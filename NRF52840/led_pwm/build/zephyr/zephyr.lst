
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200018e0 	.word	0x200018e0
}
   4:	00003175 	.word	0x00003175
   8:	00007eff 	.word	0x00007eff
   c:	0000312d 	.word	0x0000312d
  10:	0000312d 	.word	0x0000312d
  14:	0000312d 	.word	0x0000312d
  18:	0000312d 	.word	0x0000312d
	...
  2c:	00002871 	.word	0x00002871
  30:	0000312d 	.word	0x0000312d
  34:	00000000 	.word	0x00000000
  38:	00002819 	.word	0x00002819
  3c:	0000312d 	.word	0x0000312d

00000040 <_irq_vector_table>:
  40:	0000295d 0000295d 0000295d 0000295d     ])..])..])..])..
  50:	0000295d 0000295d 0000295d 0000295d     ])..])..])..])..
  60:	0000295d 0000295d 0000295d 0000295d     ])..])..])..])..
  70:	0000295d 0000295d 0000295d 0000295d     ])..])..])..])..
  80:	0000295d 0000295d 0000295d 0000295d     ])..])..])..])..
  90:	0000295d 0000295d 0000295d 0000295d     ])..])..])..])..
  a0:	0000295d 0000295d 0000295d 0000295d     ])..])..])..])..
  b0:	0000295d 0000295d 0000295d 0000295d     ])..])..])..])..
  c0:	0000295d 0000295d 0000295d 0000295d     ])..])..])..])..
  d0:	0000295d 0000295d 0000295d 0000295d     ])..])..])..])..
  e0:	0000295d 0000295d 0000295d 0000295d     ])..])..])..])..
  f0:	0000295d 0000295d 0000295d 0000295d     ])..])..])..])..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <CONFIG_IDLE_STACK_SIZE+0x106>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295
     184:	f080 8116 	bcs.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <CONFIG_IDLE_STACK_SIZE+0x142>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <CONFIG_IDLE_STACK_SIZE+0xd2>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <CONFIG_IDLE_STACK_SIZE+0xfa>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <CONFIG_IDLE_STACK_SIZE+0x11c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xae>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <CONFIG_IDLE_STACK_SIZE+0x1bc>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <CONFIG_IDLE_STACK_SIZE+0x12e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xdc>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d271      	bcs.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295
     342:	d247      	bcs.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295
     36e:	d22d      	bcs.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc0>
     38c:	d016      	beq.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <CONFIG_IDLE_STACK_SIZE+0x138>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop
     3f4:	0000      	movs	r0, r0
	...

000003f8 <led_pwm_set_brightness>:
}

static int led_pwm_set_brightness(const struct device *dev,
				  uint32_t led, uint8_t value)
{
	const struct led_pwm_config *config = DEV_CFG(dev);
     3f8:	6843      	ldr	r3, [r0, #4]
	const struct led_pwm *led_pwm;
	uint32_t pulse;

	if (led >= config->num_leds || value > 100) {
     3fa:	6818      	ldr	r0, [r3, #0]
     3fc:	4288      	cmp	r0, r1
     3fe:	d959      	bls.n	4b4 <CONFIG_FLASH_SIZE+0xb4>
     400:	2a64      	cmp	r2, #100	; 0x64
     402:	d85a      	bhi.n	4ba <CONFIG_FLASH_SIZE+0xba>
{
     404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     408:	b087      	sub	sp, #28
		return -EINVAL;
	}

	led_pwm = &config->led[led];
     40a:	685b      	ldr	r3, [r3, #4]
     40c:	0108      	lsls	r0, r1, #4
     40e:	eb03 1101 	add.w	r1, r3, r1, lsl #4

	pulse = led_pwm->period * value / 100;
     412:	688f      	ldr	r7, [r1, #8]
     414:	fb07 f402 	mul.w	r4, r7, r2
     418:	4a2d      	ldr	r2, [pc, #180]	; (4d0 <CONFIG_FLASH_SIZE+0xd0>)
     41a:	fba2 2404 	umull	r2, r4, r2, r4
     41e:	0964      	lsrs	r4, r4, #5

	return pwm_pin_set_nsec(led_pwm->dev, led_pwm->channel,
     420:	581d      	ldr	r5, [r3, r0]
     422:	f8d1 a004 	ldr.w	sl, [r1, #4]
     426:	7b0b      	ldrb	r3, [r1, #12]
     428:	9302      	str	r3, [sp, #8]
						uint32_t pwm,
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
     42a:	68ab      	ldr	r3, [r5, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
     42c:	685b      	ldr	r3, [r3, #4]
     42e:	aa04      	add	r2, sp, #16
     430:	4651      	mov	r1, sl
     432:	4628      	mov	r0, r5
     434:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
     436:	2800      	cmp	r0, #0
     438:	d133      	bne.n	4a2 <CONFIG_FLASH_SIZE+0xa2>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
     43a:	9e04      	ldr	r6, [sp, #16]
     43c:	f8dd b014 	ldr.w	fp, [sp, #20]
     440:	fba7 8906 	umull	r8, r9, r7, r6
     444:	fb07 990b 	mla	r9, r7, fp, r9
     448:	a31d      	add	r3, pc, #116	; (adr r3, 4c0 <CONFIG_FLASH_SIZE+0xc0>)
     44a:	e9d3 2300 	ldrd	r2, r3, [r3]
     44e:	4640      	mov	r0, r8
     450:	4649      	mov	r1, r9
     452:	f7ff fe55 	bl	100 <__aeabi_uldivmod>
     456:	9003      	str	r0, [sp, #12]
	if (period_cycles >= ((uint64_t)1 << 32)) {
     458:	a31b      	add	r3, pc, #108	; (adr r3, 4c8 <CONFIG_FLASH_SIZE+0xc8>)
     45a:	e9d3 2300 	ldrd	r2, r3, [r3]
     45e:	454b      	cmp	r3, r9
     460:	bf08      	it	eq
     462:	4542      	cmpeq	r2, r8
     464:	d320      	bcc.n	4a8 <CONFIG_FLASH_SIZE+0xa8>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
     466:	fba4 6706 	umull	r6, r7, r4, r6
     46a:	fb04 770b 	mla	r7, r4, fp, r7
     46e:	a314      	add	r3, pc, #80	; (adr r3, 4c0 <CONFIG_FLASH_SIZE+0xc0>)
     470:	e9d3 2300 	ldrd	r2, r3, [r3]
     474:	4630      	mov	r0, r6
     476:	4639      	mov	r1, r7
     478:	f7ff fe42 	bl	100 <__aeabi_uldivmod>
     47c:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     47e:	a112      	add	r1, pc, #72	; (adr r1, 4c8 <CONFIG_FLASH_SIZE+0xc8>)
     480:	e9d1 0100 	ldrd	r0, r1, [r1]
     484:	42b9      	cmp	r1, r7
     486:	bf08      	it	eq
     488:	42b0      	cmpeq	r0, r6
     48a:	d310      	bcc.n	4ae <CONFIG_FLASH_SIZE+0xae>
	api = (struct pwm_driver_api *)dev->api;
     48c:	68aa      	ldr	r2, [r5, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
     48e:	6814      	ldr	r4, [r2, #0]
     490:	9902      	ldr	r1, [sp, #8]
     492:	9100      	str	r1, [sp, #0]
     494:	9a03      	ldr	r2, [sp, #12]
     496:	4651      	mov	r1, sl
     498:	4628      	mov	r0, r5
     49a:	47a0      	blx	r4
				led_pwm->period, pulse, led_pwm->flags);
}
     49c:	b007      	add	sp, #28
     49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EIO;
     4a2:	f06f 0004 	mvn.w	r0, #4
     4a6:	e7f9      	b.n	49c <CONFIG_FLASH_SIZE+0x9c>
		return -ENOTSUP;
     4a8:	f06f 0085 	mvn.w	r0, #133	; 0x85
     4ac:	e7f6      	b.n	49c <CONFIG_FLASH_SIZE+0x9c>
		return -ENOTSUP;
     4ae:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return pwm_pin_set_nsec(led_pwm->dev, led_pwm->channel,
     4b2:	e7f3      	b.n	49c <CONFIG_FLASH_SIZE+0x9c>
		return -EINVAL;
     4b4:	f06f 0015 	mvn.w	r0, #21
     4b8:	4770      	bx	lr
     4ba:	f06f 0015 	mvn.w	r0, #21
}
     4be:	4770      	bx	lr
     4c0:	3b9aca00 	.word	0x3b9aca00
     4c4:	00000000 	.word	0x00000000
     4c8:	ffffffff 	.word	0xffffffff
     4cc:	3b9ac9ff 	.word	0x3b9ac9ff
     4d0:	51eb851f 	.word	0x51eb851f

000004d4 <run_led_test>:
 *
 * @param led_pwm LED PWM device.
 * @param led Number of the LED to test.
 */
static void run_led_test(const struct device *led_pwm, uint8_t led)
{
     4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     4d8:	4605      	mov	r5, r0
     4da:	460f      	mov	r7, r1
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
     4dc:	4aa6      	ldr	r2, [pc, #664]	; (778 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x290>)
     4de:	4ba7      	ldr	r3, [pc, #668]	; (77c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x294>)
     4e0:	1ad2      	subs	r2, r2, r3
     4e2:	08d2      	lsrs	r2, r2, #3
	int err;
	uint16_t level;

	LOG_INF("Testing LED %d - %s", led, led_label[led] ? : "no label");
     4e4:	f04f 0300 	mov.w	r3, #0
     4e8:	2103      	movs	r1, #3
     4ea:	f361 0302 	bfi	r3, r1, #0, #3
     4ee:	f36f 03c5 	bfc	r3, #3, #3
     4f2:	f362 138f 	bfi	r3, r2, #6, #10
     4f6:	463e      	mov	r6, r7
     4f8:	4aa1      	ldr	r2, [pc, #644]	; (780 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x298>)
     4fa:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
     4fe:	2a00      	cmp	r2, #0
     500:	d049      	beq.n	596 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xae>
     502:	4639      	mov	r1, r7
     504:	489f      	ldr	r0, [pc, #636]	; (784 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x29c>)
     506:	f001 fa6b 	bl	19e0 <log_2>
 */
__syscall int led_on(const struct device *dev, uint32_t led);

static inline int z_impl_led_on(const struct device *dev, uint32_t led)
{
	const struct led_driver_api *api =
     50a:	68ab      	ldr	r3, [r5, #8]
		(const struct led_driver_api *)dev->api;

	return api->on(dev, led);
     50c:	681b      	ldr	r3, [r3, #0]
     50e:	4639      	mov	r1, r7
     510:	4628      	mov	r0, r5
     512:	4798      	blx	r3

	/* Turn LED on. */
	err = led_on(led_pwm, led);
	if (err < 0) {
     514:	1e01      	subs	r1, r0, #0
     516:	db40      	blt.n	59a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb2>
     518:	4b97      	ldr	r3, [pc, #604]	; (778 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x290>)
     51a:	4a98      	ldr	r2, [pc, #608]	; (77c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x294>)
     51c:	1a9b      	subs	r3, r3, r2
     51e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("err=%d", err);
		return;
	}
	LOG_INF("  Turned on");
     520:	f04f 0100 	mov.w	r1, #0
     524:	2203      	movs	r2, #3
     526:	f362 0102 	bfi	r1, r2, #0, #3
     52a:	f36f 01c5 	bfc	r1, #3, #3
     52e:	f363 118f 	bfi	r1, r3, #6, #10
     532:	4895      	ldr	r0, [pc, #596]	; (788 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a0>)
     534:	f001 fa90 	bl	1a58 <log_0>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     538:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     53c:	2100      	movs	r1, #0
     53e:	f006 fb03 	bl	6b48 <z_impl_k_sleep>
 */
__syscall int led_off(const struct device *dev, uint32_t led);

static inline int z_impl_led_off(const struct device *dev, uint32_t led)
{
	const struct led_driver_api *api =
     542:	68ab      	ldr	r3, [r5, #8]
		(const struct led_driver_api *)dev->api;

	return api->off(dev, led);
     544:	685b      	ldr	r3, [r3, #4]
     546:	4639      	mov	r1, r7
     548:	4628      	mov	r0, r5
     54a:	4798      	blx	r3
	k_sleep(K_MSEC(1000));

	/* Turn LED off. */
	err = led_off(led_pwm, led);
	if (err < 0) {
     54c:	1e01      	subs	r1, r0, #0
     54e:	db35      	blt.n	5bc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd4>
     550:	4c89      	ldr	r4, [pc, #548]	; (778 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x290>)
     552:	4b8a      	ldr	r3, [pc, #552]	; (77c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x294>)
     554:	1ae4      	subs	r4, r4, r3
     556:	08e4      	lsrs	r4, r4, #3
		LOG_ERR("err=%d", err);
		return;
	}
	LOG_INF("  Turned off");
     558:	f04f 0803 	mov.w	r8, #3
     55c:	f04f 0100 	mov.w	r1, #0
     560:	f368 0102 	bfi	r1, r8, #0, #3
     564:	f36f 01c5 	bfc	r1, #3, #3
     568:	f364 118f 	bfi	r1, r4, #6, #10
     56c:	4887      	ldr	r0, [pc, #540]	; (78c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a4>)
     56e:	f001 fa73 	bl	1a58 <log_0>
     572:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     576:	2100      	movs	r1, #0
     578:	f006 fae6 	bl	6b48 <z_impl_k_sleep>
	k_sleep(K_MSEC(1000));

	/* Increase LED brightness gradually up to the maximum level. */
	LOG_INF("  Increasing brightness gradually");
     57c:	f04f 0100 	mov.w	r1, #0
     580:	f368 0102 	bfi	r1, r8, #0, #3
     584:	f36f 01c5 	bfc	r1, #3, #3
     588:	f364 118f 	bfi	r1, r4, #6, #10
     58c:	4880      	ldr	r0, [pc, #512]	; (790 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a8>)
     58e:	f001 fa63 	bl	1a58 <log_0>
	for (level = 0; level <= MAX_BRIGHTNESS; level++) {
     592:	2400      	movs	r4, #0
     594:	e02d      	b.n	5f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10a>
	LOG_INF("Testing LED %d - %s", led, led_label[led] ? : "no label");
     596:	4a7f      	ldr	r2, [pc, #508]	; (794 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2ac>)
     598:	e7b3      	b.n	502 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a>
     59a:	4b77      	ldr	r3, [pc, #476]	; (778 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x290>)
     59c:	4a77      	ldr	r2, [pc, #476]	; (77c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x294>)
     59e:	1a9b      	subs	r3, r3, r2
     5a0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("err=%d", err);
     5a2:	f04f 0200 	mov.w	r2, #0
     5a6:	2001      	movs	r0, #1
     5a8:	f360 0202 	bfi	r2, r0, #0, #3
     5ac:	f36f 02c5 	bfc	r2, #3, #3
     5b0:	f363 128f 	bfi	r2, r3, #6, #10
     5b4:	4878      	ldr	r0, [pc, #480]	; (798 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2b0>)
     5b6:	f001 f9dd 	bl	1974 <log_1>
		return;
     5ba:	e038      	b.n	62e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x146>
     5bc:	4b6e      	ldr	r3, [pc, #440]	; (778 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x290>)
     5be:	4a6f      	ldr	r2, [pc, #444]	; (77c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x294>)
     5c0:	1a9b      	subs	r3, r3, r2
     5c2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("err=%d", err);
     5c4:	f04f 0200 	mov.w	r2, #0
     5c8:	2001      	movs	r0, #1
     5ca:	f360 0202 	bfi	r2, r0, #0, #3
     5ce:	f36f 02c5 	bfc	r2, #3, #3
     5d2:	f363 128f 	bfi	r2, r3, #6, #10
     5d6:	4870      	ldr	r0, [pc, #448]	; (798 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2b0>)
     5d8:	f001 f9cc 	bl	1974 <log_1>
		return;
     5dc:	e027      	b.n	62e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x146>
		return -ENOSYS;
     5de:	f06f 0057 	mvn.w	r0, #87	; 0x57
     5e2:	e012      	b.n	60a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x122>
     5e4:	f44f 70a4 	mov.w	r0, #328	; 0x148
     5e8:	2100      	movs	r1, #0
     5ea:	f006 faad 	bl	6b48 <z_impl_k_sleep>
	for (level = 0; level <= MAX_BRIGHTNESS; level++) {
     5ee:	3401      	adds	r4, #1
     5f0:	b2a4      	uxth	r4, r4
     5f2:	2c64      	cmp	r4, #100	; 0x64
     5f4:	d81d      	bhi.n	632 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14a>
		err = led_set_brightness(led_pwm, led, level);
     5f6:	b2e2      	uxtb	r2, r4
	const struct led_driver_api *api =
     5f8:	68ab      	ldr	r3, [r5, #8]
	if (api->set_brightness == NULL) {
     5fa:	691b      	ldr	r3, [r3, #16]
     5fc:	2b00      	cmp	r3, #0
     5fe:	d0ee      	beq.n	5de <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf6>
	return api->set_brightness(dev, led, value);
     600:	4631      	mov	r1, r6
     602:	4628      	mov	r0, r5
     604:	4798      	blx	r3
		if (err < 0) {
     606:	2800      	cmp	r0, #0
     608:	daec      	bge.n	5e4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xfc>
     60a:	4a5b      	ldr	r2, [pc, #364]	; (778 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x290>)
     60c:	4b5b      	ldr	r3, [pc, #364]	; (77c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x294>)
     60e:	1ad2      	subs	r2, r2, r3
     610:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("err=%d brightness=%d\n", err, level);
     612:	f04f 0300 	mov.w	r3, #0
     616:	2101      	movs	r1, #1
     618:	f361 0302 	bfi	r3, r1, #0, #3
     61c:	f36f 03c5 	bfc	r3, #3, #3
     620:	f362 138f 	bfi	r3, r2, #6, #10
     624:	4622      	mov	r2, r4
     626:	4601      	mov	r1, r0
     628:	485c      	ldr	r0, [pc, #368]	; (79c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2b4>)
     62a:	f001 f9d9 	bl	19e0 <log_2>
	if (err < 0) {
		LOG_ERR("err=%d", err);
		return;
	}
	LOG_INF("  Turned off, loop end");
}
     62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     632:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     636:	2100      	movs	r1, #0
     638:	f006 fa86 	bl	6b48 <z_impl_k_sleep>
	const struct led_driver_api *api =
     63c:	68ab      	ldr	r3, [r5, #8]
	if (api->blink == NULL) {
     63e:	689c      	ldr	r4, [r3, #8]
     640:	2c00      	cmp	r4, #0
     642:	d060      	beq.n	706 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21e>
	return api->blink(dev, led, delay_on, delay_off);
     644:	2364      	movs	r3, #100	; 0x64
     646:	461a      	mov	r2, r3
     648:	4639      	mov	r1, r7
     64a:	4628      	mov	r0, r5
     64c:	47a0      	blx	r4
	if (err < 0) {
     64e:	1e01      	subs	r1, r0, #0
     650:	db5b      	blt.n	70a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x222>
     652:	4b49      	ldr	r3, [pc, #292]	; (778 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x290>)
     654:	4a49      	ldr	r2, [pc, #292]	; (77c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x294>)
     656:	1a9b      	subs	r3, r3, r2
     658:	08db      	lsrs	r3, r3, #3
	LOG_INF("  Blinking on: 0.1 sec, off: 0.1 sec");
     65a:	f04f 0100 	mov.w	r1, #0
     65e:	2203      	movs	r2, #3
     660:	f362 0102 	bfi	r1, r2, #0, #3
     664:	f36f 01c5 	bfc	r1, #3, #3
     668:	f363 118f 	bfi	r1, r3, #6, #10
     66c:	484c      	ldr	r0, [pc, #304]	; (7a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2b8>)
     66e:	f001 f9f3 	bl	1a58 <log_0>
     672:	f44f 3020 	mov.w	r0, #163840	; 0x28000
     676:	2100      	movs	r1, #0
     678:	f006 fa66 	bl	6b48 <z_impl_k_sleep>
	const struct led_driver_api *api =
     67c:	68ab      	ldr	r3, [r5, #8]
	if (api->blink == NULL) {
     67e:	689c      	ldr	r4, [r3, #8]
     680:	2c00      	cmp	r4, #0
     682:	d053      	beq.n	72c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x244>
	return api->blink(dev, led, delay_on, delay_off);
     684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     688:	461a      	mov	r2, r3
     68a:	4639      	mov	r1, r7
     68c:	4628      	mov	r0, r5
     68e:	47a0      	blx	r4
	if (err < 0) {
     690:	1e01      	subs	r1, r0, #0
     692:	da4e      	bge.n	732 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24a>
     694:	4c38      	ldr	r4, [pc, #224]	; (778 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x290>)
     696:	4b39      	ldr	r3, [pc, #228]	; (77c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x294>)
     698:	1ae4      	subs	r4, r4, r3
     69a:	08e4      	lsrs	r4, r4, #3
		LOG_ERR("err=%d", err);
     69c:	f04f 0200 	mov.w	r2, #0
     6a0:	2301      	movs	r3, #1
     6a2:	f363 0202 	bfi	r2, r3, #0, #3
     6a6:	f36f 02c5 	bfc	r2, #3, #3
     6aa:	f364 128f 	bfi	r2, r4, #6, #10
     6ae:	483a      	ldr	r0, [pc, #232]	; (798 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2b0>)
     6b0:	f001 f960 	bl	1974 <log_1>
		LOG_INF("  Cycle period not supported - on: 1 sec, off: 1 sec");
     6b4:	f04f 0100 	mov.w	r1, #0
     6b8:	2303      	movs	r3, #3
     6ba:	f363 0102 	bfi	r1, r3, #0, #3
     6be:	f36f 01c5 	bfc	r1, #3, #3
     6c2:	f364 118f 	bfi	r1, r4, #6, #10
     6c6:	4837      	ldr	r0, [pc, #220]	; (7a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2bc>)
     6c8:	f001 f9c6 	bl	1a58 <log_0>
     6cc:	f44f 3020 	mov.w	r0, #163840	; 0x28000
     6d0:	2100      	movs	r1, #0
     6d2:	f006 fa39 	bl	6b48 <z_impl_k_sleep>
	const struct led_driver_api *api =
     6d6:	68ab      	ldr	r3, [r5, #8]
	return api->off(dev, led);
     6d8:	685b      	ldr	r3, [r3, #4]
     6da:	4639      	mov	r1, r7
     6dc:	4628      	mov	r0, r5
     6de:	4798      	blx	r3
	if (err < 0) {
     6e0:	1e01      	subs	r1, r0, #0
     6e2:	db37      	blt.n	754 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26c>
     6e4:	4b24      	ldr	r3, [pc, #144]	; (778 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x290>)
     6e6:	4a25      	ldr	r2, [pc, #148]	; (77c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x294>)
     6e8:	1a9b      	subs	r3, r3, r2
     6ea:	08db      	lsrs	r3, r3, #3
	LOG_INF("  Turned off, loop end");
     6ec:	f04f 0100 	mov.w	r1, #0
     6f0:	2203      	movs	r2, #3
     6f2:	f362 0102 	bfi	r1, r2, #0, #3
     6f6:	f36f 01c5 	bfc	r1, #3, #3
     6fa:	f363 118f 	bfi	r1, r3, #6, #10
     6fe:	482a      	ldr	r0, [pc, #168]	; (7a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c0>)
     700:	f001 f9aa 	bl	1a58 <log_0>
     704:	e793      	b.n	62e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x146>
		return -ENOSYS;
     706:	f06f 0157 	mvn.w	r1, #87	; 0x57
     70a:	4b1b      	ldr	r3, [pc, #108]	; (778 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x290>)
     70c:	4a1b      	ldr	r2, [pc, #108]	; (77c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x294>)
     70e:	1a9b      	subs	r3, r3, r2
     710:	08db      	lsrs	r3, r3, #3
		LOG_ERR("err=%d", err);
     712:	f04f 0200 	mov.w	r2, #0
     716:	2001      	movs	r0, #1
     718:	f360 0202 	bfi	r2, r0, #0, #3
     71c:	f36f 02c5 	bfc	r2, #3, #3
     720:	f363 128f 	bfi	r2, r3, #6, #10
     724:	481c      	ldr	r0, [pc, #112]	; (798 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2b0>)
     726:	f001 f925 	bl	1974 <log_1>
		return;
     72a:	e780      	b.n	62e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x146>
     72c:	f06f 0157 	mvn.w	r1, #87	; 0x57
     730:	e7b0      	b.n	694 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ac>
     732:	4b11      	ldr	r3, [pc, #68]	; (778 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x290>)
     734:	4a11      	ldr	r2, [pc, #68]	; (77c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x294>)
     736:	1a9b      	subs	r3, r3, r2
     738:	08db      	lsrs	r3, r3, #3
		LOG_INF("  Blinking on: 1 sec, off: 1 sec");
     73a:	f04f 0100 	mov.w	r1, #0
     73e:	2203      	movs	r2, #3
     740:	f362 0102 	bfi	r1, r2, #0, #3
     744:	f36f 01c5 	bfc	r1, #3, #3
     748:	f363 118f 	bfi	r1, r3, #6, #10
     74c:	4817      	ldr	r0, [pc, #92]	; (7ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c4>)
     74e:	f001 f983 	bl	1a58 <log_0>
     752:	e7bb      	b.n	6cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e4>
     754:	4b08      	ldr	r3, [pc, #32]	; (778 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x290>)
     756:	4a09      	ldr	r2, [pc, #36]	; (77c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x294>)
     758:	1a9b      	subs	r3, r3, r2
     75a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("err=%d", err);
     75c:	f04f 0200 	mov.w	r2, #0
     760:	2001      	movs	r0, #1
     762:	f360 0202 	bfi	r2, r0, #0, #3
     766:	f36f 02c5 	bfc	r2, #3, #3
     76a:	f363 128f 	bfi	r2, r3, #6, #10
     76e:	480a      	ldr	r0, [pc, #40]	; (798 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2b0>)
     770:	f001 f900 	bl	1974 <log_1>
		return;
     774:	e75b      	b.n	62e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x146>
     776:	bf00      	nop
     778:	000091c4 	.word	0x000091c4
     77c:	0000919c 	.word	0x0000919c
     780:	20000440 	.word	0x20000440
     784:	000092b4 	.word	0x000092b4
     788:	000092d0 	.word	0x000092d0
     78c:	000092dc 	.word	0x000092dc
     790:	000092ec 	.word	0x000092ec
     794:	000092a8 	.word	0x000092a8
     798:	000092c8 	.word	0x000092c8
     79c:	00009310 	.word	0x00009310
     7a0:	00009328 	.word	0x00009328
     7a4:	00009350 	.word	0x00009350
     7a8:	000093ac 	.word	0x000093ac
     7ac:	00009388 	.word	0x00009388

000007b0 <main>:

void main(void)
{
     7b0:	b538      	push	{r3, r4, r5, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     7b2:	4819      	ldr	r0, [pc, #100]	; (818 <CONFIG_ISR_STACK_SIZE+0x18>)
     7b4:	f005 fa00 	bl	5bb8 <z_impl_device_get_binding>
	const struct device *led_pwm;
	uint8_t led;

	led_pwm = device_get_binding(LED_PWM_DEV_NAME);
	if (led_pwm) {
     7b8:	b1d8      	cbz	r0, 7f2 <main+0x42>
     7ba:	4605      	mov	r5, r0
     7bc:	4b17      	ldr	r3, [pc, #92]	; (81c <CONFIG_ISR_STACK_SIZE+0x1c>)
     7be:	4a18      	ldr	r2, [pc, #96]	; (820 <CONFIG_ISR_STACK_SIZE+0x20>)
     7c0:	1a9b      	subs	r3, r3, r2
     7c2:	08db      	lsrs	r3, r3, #3
		LOG_INF("Found device %s", LED_PWM_DEV_NAME);
     7c4:	f04f 0200 	mov.w	r2, #0
     7c8:	2103      	movs	r1, #3
     7ca:	f361 0202 	bfi	r2, r1, #0, #3
     7ce:	f36f 02c5 	bfc	r2, #3, #3
     7d2:	f363 128f 	bfi	r2, r3, #6, #10
     7d6:	4910      	ldr	r1, [pc, #64]	; (818 <CONFIG_ISR_STACK_SIZE+0x18>)
     7d8:	4812      	ldr	r0, [pc, #72]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     7da:	f001 f8cb 	bl	1974 <log_1>
		LOG_ERR("No LEDs found for %s", LED_PWM_DEV_NAME);
		return;
	}

	do {
		for (led = 0; led < num_leds; led++) {
     7de:	2400      	movs	r4, #0
     7e0:	2c00      	cmp	r4, #0
     7e2:	d1fc      	bne.n	7de <main+0x2e>
			run_led_test(led_pwm, led);
     7e4:	4621      	mov	r1, r4
     7e6:	4628      	mov	r0, r5
     7e8:	f7ff fe74 	bl	4d4 <run_led_test>
		for (led = 0; led < num_leds; led++) {
     7ec:	3401      	adds	r4, #1
     7ee:	b2e4      	uxtb	r4, r4
     7f0:	e7f6      	b.n	7e0 <main+0x30>
     7f2:	4b0a      	ldr	r3, [pc, #40]	; (81c <CONFIG_ISR_STACK_SIZE+0x1c>)
     7f4:	4a0a      	ldr	r2, [pc, #40]	; (820 <CONFIG_ISR_STACK_SIZE+0x20>)
     7f6:	1a9b      	subs	r3, r3, r2
     7f8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Device %s not found", LED_PWM_DEV_NAME);
     7fa:	f04f 0200 	mov.w	r2, #0
     7fe:	2101      	movs	r1, #1
     800:	f361 0202 	bfi	r2, r1, #0, #3
     804:	f36f 02c5 	bfc	r2, #3, #3
     808:	f363 128f 	bfi	r2, r3, #6, #10
     80c:	4902      	ldr	r1, [pc, #8]	; (818 <CONFIG_ISR_STACK_SIZE+0x18>)
     80e:	4806      	ldr	r0, [pc, #24]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
     810:	f001 f8b0 	bl	1974 <log_1>
		}
	} while (true);
}
     814:	bd38      	pop	{r3, r4, r5, pc}
     816:	bf00      	nop
     818:	000093c4 	.word	0x000093c4
     81c:	000091c4 	.word	0x000091c4
     820:	0000919c 	.word	0x0000919c
     824:	000093cc 	.word	0x000093cc
     828:	000093dc 	.word	0x000093dc

0000082c <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     82c:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     82e:	680b      	ldr	r3, [r1, #0]
     830:	3301      	adds	r3, #1
     832:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     834:	4b01      	ldr	r3, [pc, #4]	; (83c <char_out+0x10>)
     836:	681b      	ldr	r3, [r3, #0]
     838:	4798      	blx	r3
}
     83a:	bd08      	pop	{r3, pc}
     83c:	20000000 	.word	0x20000000

00000840 <__printk_hook_install>:
	_char_out = fn;
     840:	4b01      	ldr	r3, [pc, #4]	; (848 <__printk_hook_install+0x8>)
     842:	6018      	str	r0, [r3, #0]
}
     844:	4770      	bx	lr
     846:	bf00      	nop
     848:	20000000 	.word	0x20000000

0000084c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     84c:	b500      	push	{lr}
     84e:	b083      	sub	sp, #12
     850:	4602      	mov	r2, r0
     852:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     854:	2100      	movs	r1, #0
     856:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     858:	a901      	add	r1, sp, #4
     85a:	4803      	ldr	r0, [pc, #12]	; (868 <vprintk+0x1c>)
     85c:	f000 f8c8 	bl	9f0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     860:	b003      	add	sp, #12
     862:	f85d fb04 	ldr.w	pc, [sp], #4
     866:	bf00      	nop
     868:	0000082d 	.word	0x0000082d

0000086c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     86c:	b510      	push	{r4, lr}
     86e:	b084      	sub	sp, #16
     870:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     872:	9001      	str	r0, [sp, #4]
     874:	9102      	str	r1, [sp, #8]
     876:	2100      	movs	r1, #0
     878:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
     87a:	a901      	add	r1, sp, #4
     87c:	4805      	ldr	r0, [pc, #20]	; (894 <vsnprintk+0x28>)
     87e:	f000 f8b7 	bl	9f0 <cbvprintf>

	if (ctx.count < ctx.max) {
     882:	9b03      	ldr	r3, [sp, #12]
     884:	9a02      	ldr	r2, [sp, #8]
     886:	4293      	cmp	r3, r2
     888:	da01      	bge.n	88e <vsnprintk+0x22>
		str[ctx.count] = '\0';
     88a:	2200      	movs	r2, #0
     88c:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
     88e:	9803      	ldr	r0, [sp, #12]
     890:	b004      	add	sp, #16
     892:	bd10      	pop	{r4, pc}
     894:	000074b5 	.word	0x000074b5

00000898 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     89c:	b083      	sub	sp, #12
     89e:	4604      	mov	r4, r0
     8a0:	4608      	mov	r0, r1
     8a2:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     8a4:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     8a6:	f013 0f08 	tst.w	r3, #8
     8aa:	d105      	bne.n	8b8 <process_event+0x20>
     8ac:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     8b0:	2300      	movs	r3, #0
     8b2:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     8b4:	9301      	str	r3, [sp, #4]
}
     8b6:	e069      	b.n	98c <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
     8b8:	2901      	cmp	r1, #1
     8ba:	d009      	beq.n	8d0 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     8bc:	f043 0320 	orr.w	r3, r3, #32
     8c0:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     8c2:	f385 8811 	msr	BASEPRI, r5
     8c6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     8ca:	b003      	add	sp, #12
     8cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     8d0:	f043 0310 	orr.w	r3, r3, #16
     8d4:	8323      	strh	r3, [r4, #24]
     8d6:	e7f4      	b.n	8c2 <process_event+0x2a>
			evt = process_recheck(mgr);
     8d8:	4620      	mov	r0, r4
     8da:	f006 fe46 	bl	756a <process_recheck>
     8de:	e057      	b.n	990 <process_event+0xf8>
			res = mgr->last_res;
     8e0:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     8e4:	464a      	mov	r2, r9
     8e6:	4669      	mov	r1, sp
     8e8:	4620      	mov	r0, r4
     8ea:	f006 fe57 	bl	759c <process_complete>
		onoff_transition_fn transit = NULL;
     8ee:	2700      	movs	r7, #0
     8f0:	e05a      	b.n	9a8 <process_event+0x110>
			transit = mgr->transitions->start;
     8f2:	6923      	ldr	r3, [r4, #16]
     8f4:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
     8f6:	2106      	movs	r1, #6
     8f8:	4620      	mov	r0, r4
     8fa:	f006 fe0f 	bl	751c <set_state>
		res = 0;
     8fe:	f04f 0900 	mov.w	r9, #0
     902:	e051      	b.n	9a8 <process_event+0x110>
			transit = mgr->transitions->stop;
     904:	6923      	ldr	r3, [r4, #16]
     906:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     908:	2104      	movs	r1, #4
     90a:	4620      	mov	r0, r4
     90c:	f006 fe06 	bl	751c <set_state>
		res = 0;
     910:	f04f 0900 	mov.w	r9, #0
     914:	e048      	b.n	9a8 <process_event+0x110>
			transit = mgr->transitions->reset;
     916:	6923      	ldr	r3, [r4, #16]
     918:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     91a:	2105      	movs	r1, #5
     91c:	4620      	mov	r0, r4
     91e:	f006 fdfd 	bl	751c <set_state>
		res = 0;
     922:	f04f 0900 	mov.w	r9, #0
     926:	e03f      	b.n	9a8 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
     928:	2200      	movs	r2, #0
     92a:	e046      	b.n	9ba <process_event+0x122>
     92c:	2200      	movs	r2, #0
     92e:	e044      	b.n	9ba <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     930:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     934:	8323      	strh	r3, [r4, #24]
     936:	f385 8811 	msr	BASEPRI, r5
     93a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     93e:	2900      	cmp	r1, #0
     940:	d144      	bne.n	9cc <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     942:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     944:	b12b      	cbz	r3, 952 <process_event+0xba>
				notify_all(mgr, &clients, state, res);
     946:	464b      	mov	r3, r9
     948:	4642      	mov	r2, r8
     94a:	4669      	mov	r1, sp
     94c:	4620      	mov	r0, r4
     94e:	f006 fe9b 	bl	7688 <notify_all>
			if (transit != NULL) {
     952:	b117      	cbz	r7, 95a <process_event+0xc2>
				transit(mgr, transition_complete);
     954:	4925      	ldr	r1, [pc, #148]	; (9ec <process_event+0x154>)
     956:	4620      	mov	r0, r4
     958:	47b8      	blx	r7
	__asm__ volatile(
     95a:	f04f 0320 	mov.w	r3, #32
     95e:	f3ef 8511 	mrs	r5, BASEPRI
     962:	f383 8812 	msr	BASEPRI_MAX, r3
     966:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     96a:	8b23      	ldrh	r3, [r4, #24]
     96c:	f023 0308 	bic.w	r3, r3, #8
     970:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     972:	8b23      	ldrh	r3, [r4, #24]
     974:	f013 0f10 	tst.w	r3, #16
     978:	d02e      	beq.n	9d8 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     97a:	f023 0310 	bic.w	r3, r3, #16
     97e:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     980:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     982:	8b26      	ldrh	r6, [r4, #24]
     984:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     988:	2800      	cmp	r0, #0
     98a:	d09a      	beq.n	8c2 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     98c:	2802      	cmp	r0, #2
     98e:	d0a3      	beq.n	8d8 <process_event+0x40>
		if (evt == EVT_NOP) {
     990:	2800      	cmp	r0, #0
     992:	d096      	beq.n	8c2 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     994:	2801      	cmp	r0, #1
     996:	d0a3      	beq.n	8e0 <process_event+0x48>
		} else if (evt == EVT_START) {
     998:	2803      	cmp	r0, #3
     99a:	d0aa      	beq.n	8f2 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
     99c:	2804      	cmp	r0, #4
     99e:	d0b1      	beq.n	904 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
     9a0:	2805      	cmp	r0, #5
     9a2:	d0b8      	beq.n	916 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
     9a4:	2700      	movs	r7, #0
		res = 0;
     9a6:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     9a8:	8b23      	ldrh	r3, [r4, #24]
     9aa:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     9ae:	45b0      	cmp	r8, r6
     9b0:	d0ba      	beq.n	928 <process_event+0x90>
     9b2:	68a2      	ldr	r2, [r4, #8]
     9b4:	2a00      	cmp	r2, #0
     9b6:	d0b9      	beq.n	92c <process_event+0x94>
     9b8:	2201      	movs	r2, #1
		if (do_monitors
     9ba:	4611      	mov	r1, r2
     9bc:	2a00      	cmp	r2, #0
     9be:	d1b7      	bne.n	930 <process_event+0x98>
     9c0:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     9c2:	2a00      	cmp	r2, #0
     9c4:	d1b4      	bne.n	930 <process_event+0x98>
		    || (transit != NULL)) {
     9c6:	2f00      	cmp	r7, #0
     9c8:	d1b2      	bne.n	930 <process_event+0x98>
     9ca:	e7d2      	b.n	972 <process_event+0xda>
				notify_monitors(mgr, state, res);
     9cc:	464a      	mov	r2, r9
     9ce:	4641      	mov	r1, r8
     9d0:	4620      	mov	r0, r4
     9d2:	f006 fdab 	bl	752c <notify_monitors>
     9d6:	e7b4      	b.n	942 <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     9d8:	f013 0f20 	tst.w	r3, #32
     9dc:	d004      	beq.n	9e8 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     9de:	f023 0320 	bic.w	r3, r3, #32
     9e2:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     9e4:	2002      	movs	r0, #2
     9e6:	e7cc      	b.n	982 <process_event+0xea>
		evt = EVT_NOP;
     9e8:	2000      	movs	r0, #0
     9ea:	e7ca      	b.n	982 <process_event+0xea>
     9ec:	000076b7 	.word	0x000076b7

000009f0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9f4:	b093      	sub	sp, #76	; 0x4c
     9f6:	4606      	mov	r6, r0
     9f8:	460d      	mov	r5, r1
     9fa:	4692      	mov	sl, r2
     9fc:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     9fe:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     a00:	f89a 0000 	ldrb.w	r0, [sl]
     a04:	2800      	cmp	r0, #0
     a06:	f000 84d6 	beq.w	13b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b6>
		if (*fp != '%') {
     a0a:	2825      	cmp	r0, #37	; 0x25
     a0c:	d008      	beq.n	a20 <cbvprintf+0x30>
			OUTC(*fp++);
     a0e:	f10a 0a01 	add.w	sl, sl, #1
     a12:	4629      	mov	r1, r5
     a14:	47b0      	blx	r6
     a16:	2800      	cmp	r0, #0
     a18:	f2c0 84ce 	blt.w	13b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b8>
     a1c:	3401      	adds	r4, #1
			continue;
     a1e:	e7ef      	b.n	a00 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     a20:	2300      	movs	r3, #0
     a22:	9306      	str	r3, [sp, #24]
     a24:	9307      	str	r3, [sp, #28]
     a26:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
     a28:	9308      	str	r3, [sp, #32]
     a2a:	9309      	str	r3, [sp, #36]	; 0x24
     a2c:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
     a2e:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
     a32:	f89a 3001 	ldrb.w	r3, [sl, #1]
     a36:	2b25      	cmp	r3, #37	; 0x25
     a38:	d001      	beq.n	a3e <cbvprintf+0x4e>
	bool loop = true;
     a3a:	2701      	movs	r7, #1
     a3c:	e02c      	b.n	a98 <cbvprintf+0xa8>
		conv->specifier = *sp++;
     a3e:	f10a 0802 	add.w	r8, sl, #2
     a42:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
     a46:	e1a8      	b.n	d9a <cbvprintf+0x3aa>
			conv->flag_dash = true;
     a48:	f89d 3020 	ldrb.w	r3, [sp, #32]
     a4c:	f043 0304 	orr.w	r3, r3, #4
     a50:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
     a54:	b1ff      	cbz	r7, a96 <cbvprintf+0xa6>
			++sp;
     a56:	f108 0801 	add.w	r8, r8, #1
     a5a:	e01c      	b.n	a96 <cbvprintf+0xa6>
			conv->flag_plus = true;
     a5c:	f89d 3020 	ldrb.w	r3, [sp, #32]
     a60:	f043 0308 	orr.w	r3, r3, #8
     a64:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     a68:	e7f4      	b.n	a54 <cbvprintf+0x64>
			conv->flag_space = true;
     a6a:	f89d 3020 	ldrb.w	r3, [sp, #32]
     a6e:	f043 0310 	orr.w	r3, r3, #16
     a72:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     a76:	e7ed      	b.n	a54 <cbvprintf+0x64>
			conv->flag_hash = true;
     a78:	f89d 3020 	ldrb.w	r3, [sp, #32]
     a7c:	f043 0320 	orr.w	r3, r3, #32
     a80:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     a84:	e7e6      	b.n	a54 <cbvprintf+0x64>
			conv->flag_zero = true;
     a86:	f89d 3020 	ldrb.w	r3, [sp, #32]
     a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     a8e:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     a92:	e7df      	b.n	a54 <cbvprintf+0x64>
		switch (*sp) {
     a94:	2700      	movs	r7, #0
	} while (loop);
     a96:	b34f      	cbz	r7, aec <cbvprintf+0xfc>
		switch (*sp) {
     a98:	f898 3000 	ldrb.w	r3, [r8]
     a9c:	3b20      	subs	r3, #32
     a9e:	2b10      	cmp	r3, #16
     aa0:	d8f8      	bhi.n	a94 <cbvprintf+0xa4>
     aa2:	a201      	add	r2, pc, #4	; (adr r2, aa8 <cbvprintf+0xb8>)
     aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     aa8:	00000a6b 	.word	0x00000a6b
     aac:	00000a95 	.word	0x00000a95
     ab0:	00000a95 	.word	0x00000a95
     ab4:	00000a79 	.word	0x00000a79
     ab8:	00000a95 	.word	0x00000a95
     abc:	00000a95 	.word	0x00000a95
     ac0:	00000a95 	.word	0x00000a95
     ac4:	00000a95 	.word	0x00000a95
     ac8:	00000a95 	.word	0x00000a95
     acc:	00000a95 	.word	0x00000a95
     ad0:	00000a95 	.word	0x00000a95
     ad4:	00000a5d 	.word	0x00000a5d
     ad8:	00000a95 	.word	0x00000a95
     adc:	00000a49 	.word	0x00000a49
     ae0:	00000a95 	.word	0x00000a95
     ae4:	00000a95 	.word	0x00000a95
     ae8:	00000a87 	.word	0x00000a87
	if (conv->flag_zero && conv->flag_dash) {
     aec:	f89d 3020 	ldrb.w	r3, [sp, #32]
     af0:	f003 0344 	and.w	r3, r3, #68	; 0x44
     af4:	2b44      	cmp	r3, #68	; 0x44
     af6:	d06d      	beq.n	bd4 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
     af8:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
     afc:	f89d 3020 	ldrb.w	r3, [sp, #32]
     b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     b04:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
     b08:	f898 3000 	ldrb.w	r3, [r8]
     b0c:	2b2a      	cmp	r3, #42	; 0x2a
     b0e:	d068      	beq.n	be2 <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
     b10:	a805      	add	r0, sp, #20
     b12:	f006 fe60 	bl	77d6 <extract_decimal>
	if (sp != wp) {
     b16:	9b05      	ldr	r3, [sp, #20]
     b18:	4598      	cmp	r8, r3
     b1a:	d012      	beq.n	b42 <cbvprintf+0x152>
		conv->width_present = true;
     b1c:	f89d 3020 	ldrb.w	r3, [sp, #32]
     b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     b24:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
     b28:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
     b2a:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     b2e:	2800      	cmp	r0, #0
     b30:	db60      	blt.n	bf4 <cbvprintf+0x204>
     b32:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     b34:	4313      	orrs	r3, r2
     b36:	f89d 2020 	ldrb.w	r2, [sp, #32]
     b3a:	f363 0241 	bfi	r2, r3, #1, #1
     b3e:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     b42:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
     b44:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
     b46:	781b      	ldrb	r3, [r3, #0]
     b48:	2b2e      	cmp	r3, #46	; 0x2e
     b4a:	bf14      	ite	ne
     b4c:	2300      	movne	r3, #0
     b4e:	2301      	moveq	r3, #1
     b50:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     b54:	f363 0241 	bfi	r2, r3, #1, #1
     b58:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
     b5c:	2b00      	cmp	r3, #0
     b5e:	d04b      	beq.n	bf8 <cbvprintf+0x208>
	++sp;
     b60:	9b05      	ldr	r3, [sp, #20]
     b62:	1c5a      	adds	r2, r3, #1
     b64:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
     b66:	785b      	ldrb	r3, [r3, #1]
     b68:	2b2a      	cmp	r3, #42	; 0x2a
     b6a:	d048      	beq.n	bfe <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
     b6c:	a805      	add	r0, sp, #20
     b6e:	f006 fe32 	bl	77d6 <extract_decimal>
	conv->prec_value = prec;
     b72:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
     b74:	f89d 3020 	ldrb.w	r3, [sp, #32]
     b78:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     b7c:	2800      	cmp	r0, #0
     b7e:	db47      	blt.n	c10 <cbvprintf+0x220>
     b80:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     b82:	4313      	orrs	r3, r2
     b84:	f89d 2020 	ldrb.w	r2, [sp, #32]
     b88:	f363 0241 	bfi	r2, r3, #1, #1
     b8c:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     b90:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
     b94:	f898 3000 	ldrb.w	r3, [r8]
     b98:	3b4c      	subs	r3, #76	; 0x4c
     b9a:	2b2e      	cmp	r3, #46	; 0x2e
     b9c:	f200 80dc 	bhi.w	d58 <cbvprintf+0x368>
     ba0:	e8df f003 	tbb	[pc, r3]
     ba4:	dadadaca 	.word	0xdadadaca
     ba8:	dadadada 	.word	0xdadadada
     bac:	dadadada 	.word	0xdadadada
     bb0:	dadadada 	.word	0xdadadada
     bb4:	dadadada 	.word	0xdadadada
     bb8:	dadadada 	.word	0xdadadada
     bbc:	dadadada 	.word	0xdadadada
     bc0:	da6ada38 	.word	0xda6ada38
     bc4:	dadada51 	.word	0xdadada51
     bc8:	dadadada 	.word	0xdadadada
     bcc:	dadadac0 	.word	0xdadadac0
     bd0:	dada      	.short	0xdada
     bd2:	b6          	.byte	0xb6
     bd3:	00          	.byte	0x00
		conv->flag_zero = false;
     bd4:	f89d 3020 	ldrb.w	r3, [sp, #32]
     bd8:	f36f 1386 	bfc	r3, #6, #1
     bdc:	f88d 3020 	strb.w	r3, [sp, #32]
     be0:	e78a      	b.n	af8 <cbvprintf+0x108>
		conv->width_star = true;
     be2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     be6:	f043 0301 	orr.w	r3, r3, #1
     bea:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     bee:	4643      	mov	r3, r8
     bf0:	3301      	adds	r3, #1
     bf2:	e7a7      	b.n	b44 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
     bf4:	2201      	movs	r2, #1
     bf6:	e79d      	b.n	b34 <cbvprintf+0x144>
		return sp;
     bf8:	f8dd 8014 	ldr.w	r8, [sp, #20]
     bfc:	e7ca      	b.n	b94 <cbvprintf+0x1a4>
		conv->prec_star = true;
     bfe:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     c02:	f043 0304 	orr.w	r3, r3, #4
     c06:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     c0a:	f102 0801 	add.w	r8, r2, #1
     c0e:	e7c1      	b.n	b94 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
     c10:	2201      	movs	r2, #1
     c12:	e7b6      	b.n	b82 <cbvprintf+0x192>
		if (*++sp == 'h') {
     c14:	f108 0201 	add.w	r2, r8, #1
     c18:	f898 3001 	ldrb.w	r3, [r8, #1]
     c1c:	2b68      	cmp	r3, #104	; 0x68
     c1e:	d008      	beq.n	c32 <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
     c20:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     c24:	2102      	movs	r1, #2
     c26:	f361 03c6 	bfi	r3, r1, #3, #4
     c2a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
     c2e:	4690      	mov	r8, r2
     c30:	e02b      	b.n	c8a <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
     c32:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     c36:	2201      	movs	r2, #1
     c38:	f362 03c6 	bfi	r3, r2, #3, #4
     c3c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     c40:	f108 0802 	add.w	r8, r8, #2
     c44:	e021      	b.n	c8a <cbvprintf+0x29a>
		if (*++sp == 'l') {
     c46:	f108 0201 	add.w	r2, r8, #1
     c4a:	f898 3001 	ldrb.w	r3, [r8, #1]
     c4e:	2b6c      	cmp	r3, #108	; 0x6c
     c50:	d008      	beq.n	c64 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
     c52:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     c56:	2103      	movs	r1, #3
     c58:	f361 03c6 	bfi	r3, r1, #3, #4
     c5c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
     c60:	4690      	mov	r8, r2
     c62:	e012      	b.n	c8a <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
     c64:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     c68:	2204      	movs	r2, #4
     c6a:	f362 03c6 	bfi	r3, r2, #3, #4
     c6e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     c72:	f108 0802 	add.w	r8, r8, #2
     c76:	e008      	b.n	c8a <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
     c78:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     c7c:	2205      	movs	r2, #5
     c7e:	f362 03c6 	bfi	r3, r2, #3, #4
     c82:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     c86:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
     c8a:	f818 3b01 	ldrb.w	r3, [r8], #1
     c8e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
     c92:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     c96:	2a37      	cmp	r2, #55	; 0x37
     c98:	f200 8150 	bhi.w	f3c <cbvprintf+0x54c>
     c9c:	e8df f012 	tbh	[pc, r2, lsl #1]
     ca0:	014e0126 	.word	0x014e0126
     ca4:	014e014e 	.word	0x014e014e
     ca8:	01260126 	.word	0x01260126
     cac:	014e0126 	.word	0x014e0126
     cb0:	014e014e 	.word	0x014e014e
     cb4:	014e014e 	.word	0x014e014e
     cb8:	014e014e 	.word	0x014e014e
     cbc:	014e014e 	.word	0x014e014e
     cc0:	014e014e 	.word	0x014e014e
     cc4:	014e014e 	.word	0x014e014e
     cc8:	014e014e 	.word	0x014e014e
     ccc:	0113014e 	.word	0x0113014e
     cd0:	014e014e 	.word	0x014e014e
     cd4:	014e014e 	.word	0x014e014e
     cd8:	014e014e 	.word	0x014e014e
     cdc:	014e014e 	.word	0x014e014e
     ce0:	014e0126 	.word	0x014e0126
     ce4:	00630113 	.word	0x00630113
     ce8:	01260126 	.word	0x01260126
     cec:	014e0126 	.word	0x014e0126
     cf0:	014e0063 	.word	0x014e0063
     cf4:	014e014e 	.word	0x014e014e
     cf8:	012f014e 	.word	0x012f014e
     cfc:	013f0113 	.word	0x013f0113
     d00:	014e014e 	.word	0x014e014e
     d04:	014e013f 	.word	0x014e013f
     d08:	014e0113 	.word	0x014e0113
     d0c:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
     d10:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     d14:	2206      	movs	r2, #6
     d16:	f362 03c6 	bfi	r3, r2, #3, #4
     d1a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     d1e:	f108 0801 	add.w	r8, r8, #1
		break;
     d22:	e7b2      	b.n	c8a <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
     d24:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     d28:	2207      	movs	r2, #7
     d2a:	f362 03c6 	bfi	r3, r2, #3, #4
     d2e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     d32:	f108 0801 	add.w	r8, r8, #1
		break;
     d36:	e7a8      	b.n	c8a <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
     d38:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     d3c:	2208      	movs	r2, #8
     d3e:	f362 03c6 	bfi	r3, r2, #3, #4
     d42:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     d46:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
     d4a:	f89d 3020 	ldrb.w	r3, [sp, #32]
     d4e:	f043 0302 	orr.w	r3, r3, #2
     d52:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     d56:	e798      	b.n	c8a <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
     d58:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     d5c:	f36f 03c6 	bfc	r3, #3, #4
     d60:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
     d64:	e791      	b.n	c8a <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
     d66:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     d6a:	2101      	movs	r1, #1
     d6c:	f361 0202 	bfi	r2, r1, #0, #3
     d70:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     d74:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     d78:	f002 0278 	and.w	r2, r2, #120	; 0x78
     d7c:	2a40      	cmp	r2, #64	; 0x40
     d7e:	f000 80aa 	beq.w	ed6 <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
     d82:	2b63      	cmp	r3, #99	; 0x63
     d84:	f000 80ae 	beq.w	ee4 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
     d88:	f89d 3020 	ldrb.w	r3, [sp, #32]
     d8c:	f3c3 0240 	ubfx	r2, r3, #1, #1
     d90:	4317      	orrs	r7, r2
     d92:	f367 0341 	bfi	r3, r7, #1, #1
     d96:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     d9a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     d9e:	f013 0f01 	tst.w	r3, #1
     da2:	f000 80da 	beq.w	f5a <cbvprintf+0x56a>
			width = va_arg(ap, int);
     da6:	9b03      	ldr	r3, [sp, #12]
     da8:	1d1a      	adds	r2, r3, #4
     daa:	9203      	str	r2, [sp, #12]
     dac:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     dae:	2f00      	cmp	r7, #0
     db0:	f2c0 80cb 	blt.w	f4a <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     db4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     db8:	f013 0f04 	tst.w	r3, #4
     dbc:	f000 80df 	beq.w	f7e <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
     dc0:	9b03      	ldr	r3, [sp, #12]
     dc2:	1d1a      	adds	r2, r3, #4
     dc4:	9203      	str	r2, [sp, #12]
     dc6:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
     dca:	f1bb 0f00 	cmp.w	fp, #0
     dce:	f2c0 80cd 	blt.w	f6c <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     dd2:	2300      	movs	r3, #0
     dd4:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
     dd6:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     dd8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     ddc:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     de0:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
     de4:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     de8:	2b01      	cmp	r3, #1
     dea:	f000 80d1 	beq.w	f90 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     dee:	2b02      	cmp	r3, #2
     df0:	f000 8116 	beq.w	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     df4:	2b04      	cmp	r3, #4
     df6:	f000 8167 	beq.w	10c8 <CONFIG_FPROTECT_BLOCK_SIZE+0xc8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     dfa:	2b03      	cmp	r3, #3
     dfc:	f000 817e 	beq.w	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     e00:	f89d 9020 	ldrb.w	r9, [sp, #32]
     e04:	f019 0303 	ands.w	r3, r9, #3
     e08:	9302      	str	r3, [sp, #8]
     e0a:	f040 817d 	bne.w	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     e0e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
     e12:	3b25      	subs	r3, #37	; 0x25
     e14:	2b53      	cmp	r3, #83	; 0x53
     e16:	f200 8233 	bhi.w	1280 <CONFIG_FPROTECT_BLOCK_SIZE+0x280>
     e1a:	e8df f013 	tbh	[pc, r3, lsl #1]
     e1e:	0181      	.short	0x0181
     e20:	02310231 	.word	0x02310231
     e24:	02310231 	.word	0x02310231
     e28:	02310231 	.word	0x02310231
     e2c:	02310231 	.word	0x02310231
     e30:	02310231 	.word	0x02310231
     e34:	02310231 	.word	0x02310231
     e38:	02310231 	.word	0x02310231
     e3c:	02310231 	.word	0x02310231
     e40:	02310231 	.word	0x02310231
     e44:	02310231 	.word	0x02310231
     e48:	02310231 	.word	0x02310231
     e4c:	02310231 	.word	0x02310231
     e50:	02310231 	.word	0x02310231
     e54:	02310231 	.word	0x02310231
     e58:	02310231 	.word	0x02310231
     e5c:	02310231 	.word	0x02310231
     e60:	02310231 	.word	0x02310231
     e64:	02310231 	.word	0x02310231
     e68:	02310231 	.word	0x02310231
     e6c:	02310231 	.word	0x02310231
     e70:	02310231 	.word	0x02310231
     e74:	02310231 	.word	0x02310231
     e78:	02310231 	.word	0x02310231
     e7c:	02310231 	.word	0x02310231
     e80:	02310231 	.word	0x02310231
     e84:	023101c7 	.word	0x023101c7
     e88:	02310231 	.word	0x02310231
     e8c:	02310231 	.word	0x02310231
     e90:	02310231 	.word	0x02310231
     e94:	02310231 	.word	0x02310231
     e98:	01a10231 	.word	0x01a10231
     e9c:	023101ab 	.word	0x023101ab
     ea0:	02310231 	.word	0x02310231
     ea4:	01ab0231 	.word	0x01ab0231
     ea8:	02310231 	.word	0x02310231
     eac:	02310231 	.word	0x02310231
     eb0:	01c70208 	.word	0x01c70208
     eb4:	023101ea 	.word	0x023101ea
     eb8:	018f0231 	.word	0x018f0231
     ebc:	01c70231 	.word	0x01c70231
     ec0:	02310231 	.word	0x02310231
     ec4:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
     ec6:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     eca:	2102      	movs	r1, #2
     ecc:	f361 0202 	bfi	r2, r1, #0, #3
     ed0:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
     ed4:	e74e      	b.n	d74 <cbvprintf+0x384>
			conv->invalid = true;
     ed6:	f89d 1020 	ldrb.w	r1, [sp, #32]
     eda:	f041 0101 	orr.w	r1, r1, #1
     ede:	f88d 1020 	strb.w	r1, [sp, #32]
     ee2:	e74e      	b.n	d82 <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
     ee4:	1e17      	subs	r7, r2, #0
     ee6:	bf18      	it	ne
     ee8:	2701      	movne	r7, #1
     eea:	e74d      	b.n	d88 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
     eec:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     ef0:	2204      	movs	r2, #4
     ef2:	f362 0302 	bfi	r3, r2, #0, #3
     ef6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
     efa:	2701      	movs	r7, #1
			break;
     efc:	e744      	b.n	d88 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
     efe:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     f02:	2203      	movs	r2, #3
     f04:	f362 0302 	bfi	r3, r2, #0, #3
     f08:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     f0c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     f10:	f003 0378 	and.w	r3, r3, #120	; 0x78
     f14:	2b40      	cmp	r3, #64	; 0x40
     f16:	f47f af37 	bne.w	d88 <cbvprintf+0x398>
			unsupported = true;
     f1a:	2701      	movs	r7, #1
     f1c:	e734      	b.n	d88 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
     f1e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     f22:	2203      	movs	r2, #3
     f24:	f362 0302 	bfi	r3, r2, #0, #3
     f28:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
     f2c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     f30:	f013 0f78 	tst.w	r3, #120	; 0x78
     f34:	f43f af28 	beq.w	d88 <cbvprintf+0x398>
			unsupported = true;
     f38:	2701      	movs	r7, #1
     f3a:	e725      	b.n	d88 <cbvprintf+0x398>
		conv->invalid = true;
     f3c:	f89d 3020 	ldrb.w	r3, [sp, #32]
     f40:	f043 0301 	orr.w	r3, r3, #1
     f44:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     f48:	e71e      	b.n	d88 <cbvprintf+0x398>
				conv->flag_dash = true;
     f4a:	f89d 3020 	ldrb.w	r3, [sp, #32]
     f4e:	f043 0304 	orr.w	r3, r3, #4
     f52:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
     f56:	427f      	negs	r7, r7
     f58:	e72c      	b.n	db4 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
     f5a:	f99d 3020 	ldrsb.w	r3, [sp, #32]
     f5e:	2b00      	cmp	r3, #0
     f60:	db02      	blt.n	f68 <cbvprintf+0x578>
		int width = -1;
     f62:	f04f 37ff 	mov.w	r7, #4294967295
     f66:	e725      	b.n	db4 <cbvprintf+0x3c4>
			width = conv->width_value;
     f68:	9f09      	ldr	r7, [sp, #36]	; 0x24
     f6a:	e723      	b.n	db4 <cbvprintf+0x3c4>
				conv->prec_present = false;
     f6c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     f70:	f36f 0341 	bfc	r3, #1, #1
     f74:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
     f78:	f04f 3bff 	mov.w	fp, #4294967295
     f7c:	e729      	b.n	dd2 <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
     f7e:	f013 0f02 	tst.w	r3, #2
     f82:	d002      	beq.n	f8a <cbvprintf+0x59a>
			precision = conv->prec_value;
     f84:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
     f88:	e723      	b.n	dd2 <cbvprintf+0x3e2>
		int precision = -1;
     f8a:	f04f 3bff 	mov.w	fp, #4294967295
     f8e:	e720      	b.n	dd2 <cbvprintf+0x3e2>
			switch (length_mod) {
     f90:	1ecb      	subs	r3, r1, #3
     f92:	2b04      	cmp	r3, #4
     f94:	d804      	bhi.n	fa0 <cbvprintf+0x5b0>
     f96:	e8df f003 	tbb	[pc, r3]
     f9a:	1d0b      	.short	0x1d0b
     f9c:	3529      	.short	0x3529
     f9e:	35          	.byte	0x35
     f9f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     fa0:	9b03      	ldr	r3, [sp, #12]
     fa2:	1d1a      	adds	r2, r3, #4
     fa4:	9203      	str	r2, [sp, #12]
     fa6:	681a      	ldr	r2, [r3, #0]
     fa8:	17d3      	asrs	r3, r2, #31
     faa:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     fae:	e006      	b.n	fbe <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
     fb0:	9b03      	ldr	r3, [sp, #12]
     fb2:	1d1a      	adds	r2, r3, #4
     fb4:	9203      	str	r2, [sp, #12]
     fb6:	681a      	ldr	r2, [r3, #0]
     fb8:	17d3      	asrs	r3, r2, #31
     fba:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
     fbe:	2901      	cmp	r1, #1
     fc0:	d028      	beq.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
			} else if (length_mod == LENGTH_H) {
     fc2:	2902      	cmp	r1, #2
     fc4:	f47f af1c 	bne.w	e00 <cbvprintf+0x410>
				value->sint = (short)value->sint;
     fc8:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
     fcc:	17d3      	asrs	r3, r2, #31
     fce:	e9cd 2306 	strd	r2, r3, [sp, #24]
     fd2:	e715      	b.n	e00 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
     fd4:	9b03      	ldr	r3, [sp, #12]
     fd6:	3307      	adds	r3, #7
     fd8:	f023 0307 	bic.w	r3, r3, #7
     fdc:	f103 0208 	add.w	r2, r3, #8
     fe0:	9203      	str	r2, [sp, #12]
     fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     fe6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     fea:	e7e8      	b.n	fbe <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
     fec:	9b03      	ldr	r3, [sp, #12]
     fee:	3307      	adds	r3, #7
     ff0:	f023 0307 	bic.w	r3, r3, #7
     ff4:	f103 0208 	add.w	r2, r3, #8
     ff8:	9203      	str	r2, [sp, #12]
     ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     ffe:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    1002:	e7dc      	b.n	fbe <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1004:	9b03      	ldr	r3, [sp, #12]
    1006:	1d1a      	adds	r2, r3, #4
    1008:	9203      	str	r2, [sp, #12]
    100a:	681a      	ldr	r2, [r3, #0]
    100c:	17d3      	asrs	r3, r2, #31
				value->sint =
    100e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    1012:	e7d4      	b.n	fbe <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
    1014:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1018:	9306      	str	r3, [sp, #24]
    101a:	2300      	movs	r3, #0
    101c:	9307      	str	r3, [sp, #28]
    101e:	e6ef      	b.n	e00 <cbvprintf+0x410>
			switch (length_mod) {
    1020:	1ecb      	subs	r3, r1, #3
    1022:	2b04      	cmp	r3, #4
    1024:	d804      	bhi.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    1026:	e8df f003 	tbb	[pc, r3]
    102a:	1f0b      	.short	0x1f0b
    102c:	4135      	.short	0x4135
    102e:	41          	.byte	0x41
    102f:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    1030:	9b03      	ldr	r3, [sp, #12]
    1032:	1d1a      	adds	r2, r3, #4
    1034:	9203      	str	r2, [sp, #12]
    1036:	681b      	ldr	r3, [r3, #0]
    1038:	9306      	str	r3, [sp, #24]
    103a:	2300      	movs	r3, #0
    103c:	9307      	str	r3, [sp, #28]
				break;
    103e:	e01e      	b.n	107e <CONFIG_FPROTECT_BLOCK_SIZE+0x7e>
				    && (conv->specifier == 'c')) {
    1040:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
    1044:	2b63      	cmp	r3, #99	; 0x63
    1046:	d007      	beq.n	1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>
					value->uint = va_arg(ap, unsigned long);
    1048:	9b03      	ldr	r3, [sp, #12]
    104a:	1d1a      	adds	r2, r3, #4
    104c:	9203      	str	r2, [sp, #12]
    104e:	681b      	ldr	r3, [r3, #0]
    1050:	9306      	str	r3, [sp, #24]
    1052:	2300      	movs	r3, #0
    1054:	9307      	str	r3, [sp, #28]
    1056:	e012      	b.n	107e <CONFIG_FPROTECT_BLOCK_SIZE+0x7e>
					value->uint = (wchar_t)va_arg(ap,
    1058:	9b03      	ldr	r3, [sp, #12]
    105a:	1d1a      	adds	r2, r3, #4
    105c:	9203      	str	r2, [sp, #12]
    105e:	681b      	ldr	r3, [r3, #0]
    1060:	9306      	str	r3, [sp, #24]
    1062:	2300      	movs	r3, #0
    1064:	9307      	str	r3, [sp, #28]
    1066:	e00a      	b.n	107e <CONFIG_FPROTECT_BLOCK_SIZE+0x7e>
					(uint_value_type)va_arg(ap,
    1068:	9b03      	ldr	r3, [sp, #12]
    106a:	3307      	adds	r3, #7
    106c:	f023 0307 	bic.w	r3, r3, #7
    1070:	f103 0208 	add.w	r2, r3, #8
    1074:	9203      	str	r2, [sp, #12]
    1076:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    107a:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    107e:	2901      	cmp	r1, #1
    1080:	d01c      	beq.n	10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>
			} else if (length_mod == LENGTH_H) {
    1082:	2902      	cmp	r1, #2
    1084:	f47f aebc 	bne.w	e00 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
    1088:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    108c:	9306      	str	r3, [sp, #24]
    108e:	2300      	movs	r3, #0
    1090:	9307      	str	r3, [sp, #28]
    1092:	e6b5      	b.n	e00 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
    1094:	9b03      	ldr	r3, [sp, #12]
    1096:	3307      	adds	r3, #7
    1098:	f023 0307 	bic.w	r3, r3, #7
    109c:	f103 0208 	add.w	r2, r3, #8
    10a0:	9203      	str	r2, [sp, #12]
    10a2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    10a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    10aa:	e7e8      	b.n	107e <CONFIG_FPROTECT_BLOCK_SIZE+0x7e>
					(uint_value_type)va_arg(ap, size_t);
    10ac:	9b03      	ldr	r3, [sp, #12]
    10ae:	1d1a      	adds	r2, r3, #4
    10b0:	9203      	str	r2, [sp, #12]
    10b2:	681b      	ldr	r3, [r3, #0]
				value->uint =
    10b4:	9306      	str	r3, [sp, #24]
    10b6:	2300      	movs	r3, #0
    10b8:	9307      	str	r3, [sp, #28]
				break;
    10ba:	e7e0      	b.n	107e <CONFIG_FPROTECT_BLOCK_SIZE+0x7e>
				value->uint = (unsigned char)value->uint;
    10bc:	f89d 3018 	ldrb.w	r3, [sp, #24]
    10c0:	9306      	str	r3, [sp, #24]
    10c2:	2300      	movs	r3, #0
    10c4:	9307      	str	r3, [sp, #28]
    10c6:	e69b      	b.n	e00 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
    10c8:	2908      	cmp	r1, #8
    10ca:	d00b      	beq.n	10e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>
				value->dbl = va_arg(ap, double);
    10cc:	9b03      	ldr	r3, [sp, #12]
    10ce:	3307      	adds	r3, #7
    10d0:	f023 0307 	bic.w	r3, r3, #7
    10d4:	f103 0208 	add.w	r2, r3, #8
    10d8:	9203      	str	r2, [sp, #12]
    10da:	e9d3 2300 	ldrd	r2, r3, [r3]
    10de:	e9cd 2306 	strd	r2, r3, [sp, #24]
    10e2:	e68d      	b.n	e00 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
    10e4:	9b03      	ldr	r3, [sp, #12]
    10e6:	3307      	adds	r3, #7
    10e8:	f023 0307 	bic.w	r3, r3, #7
    10ec:	f103 0208 	add.w	r2, r3, #8
    10f0:	9203      	str	r2, [sp, #12]
    10f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    10f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    10fa:	e681      	b.n	e00 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
    10fc:	9b03      	ldr	r3, [sp, #12]
    10fe:	1d1a      	adds	r2, r3, #4
    1100:	9203      	str	r2, [sp, #12]
    1102:	681b      	ldr	r3, [r3, #0]
    1104:	9306      	str	r3, [sp, #24]
    1106:	e67b      	b.n	e00 <cbvprintf+0x410>
			OUTS(sp, fp);
    1108:	4643      	mov	r3, r8
    110a:	4652      	mov	r2, sl
    110c:	4629      	mov	r1, r5
    110e:	4630      	mov	r0, r6
    1110:	f006 fbde 	bl	78d0 <outs>
    1114:	2800      	cmp	r0, #0
    1116:	f2c0 814f 	blt.w	13b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b8>
    111a:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    111c:	46c2      	mov	sl, r8
			continue;
    111e:	e46f      	b.n	a00 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    1120:	4629      	mov	r1, r5
    1122:	2025      	movs	r0, #37	; 0x25
    1124:	47b0      	blx	r6
    1126:	2800      	cmp	r0, #0
    1128:	f2c0 8146 	blt.w	13b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b8>
    112c:	3401      	adds	r4, #1
		char sign = 0;
    112e:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    1132:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    1136:	f04f 0a00 	mov.w	sl, #0
			break;
    113a:	e0a7      	b.n	128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>
		case 's': {
			bps = (const char *)value->ptr;
    113c:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    1140:	f1bb 0f00 	cmp.w	fp, #0
    1144:	db08      	blt.n	1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
				len = strnlen(bps, precision);
    1146:	4659      	mov	r1, fp
    1148:	4650      	mov	r0, sl
    114a:	f006 ff68 	bl	801e <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    114e:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    1152:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    1156:	e099      	b.n	128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>
				len = strlen(bps);
    1158:	4650      	mov	r0, sl
    115a:	f006 ff58 	bl	800e <strlen>
    115e:	e7f6      	b.n	114e <CONFIG_FPROTECT_BLOCK_SIZE+0x14e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1160:	9b06      	ldr	r3, [sp, #24]
    1162:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    1166:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    116a:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    116e:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    1172:	e08b      	b.n	128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    1174:	f019 0f08 	tst.w	r9, #8
    1178:	d105      	bne.n	1186 <CONFIG_FPROTECT_BLOCK_SIZE+0x186>
				sign = '+';
			} else if (conv->flag_space) {
    117a:	f019 0910 	ands.w	r9, r9, #16
    117e:	d004      	beq.n	118a <CONFIG_FPROTECT_BLOCK_SIZE+0x18a>
				sign = ' ';
    1180:	f04f 0920 	mov.w	r9, #32
    1184:	e001      	b.n	118a <CONFIG_FPROTECT_BLOCK_SIZE+0x18a>
				sign = '+';
    1186:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    118a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    118e:	2a00      	cmp	r2, #0
    1190:	f173 0100 	sbcs.w	r1, r3, #0
    1194:	db02      	blt.n	119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    1196:	e9cd 2306 	strd	r2, r3, [sp, #24]
    119a:	e009      	b.n	11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
				value->uint = (uint_value_type)-sint;
    119c:	4252      	negs	r2, r2
    119e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    11a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    11a6:	f04f 092d 	mov.w	r9, #45	; 0x2d
    11aa:	e001      	b.n	11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
		switch (conv->specifier) {
    11ac:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    11b0:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    11b4:	9300      	str	r3, [sp, #0]
    11b6:	ab0c      	add	r3, sp, #48	; 0x30
    11b8:	aa08      	add	r2, sp, #32
    11ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    11be:	f006 fb1d 	bl	77fc <encode_uint>
    11c2:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    11c4:	f1bb 0f00 	cmp.w	fp, #0
    11c8:	f2c0 8090 	blt.w	12ec <CONFIG_FPROTECT_BLOCK_SIZE+0x2ec>
				size_t len = bpe - bps;
    11cc:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    11d0:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    11d4:	f89d 2020 	ldrb.w	r2, [sp, #32]
    11d8:	f36f 1286 	bfc	r2, #6, #1
    11dc:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    11e0:	459b      	cmp	fp, r3
    11e2:	f240 8086 	bls.w	12f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f2>
					conv->pad0_value = precision - (int)len;
    11e6:	ebab 0303 	sub.w	r3, fp, r3
    11ea:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    11ec:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    11f0:	e04c      	b.n	128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    11f2:	9806      	ldr	r0, [sp, #24]
    11f4:	b930      	cbnz	r0, 1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
		char sign = 0;
    11f6:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    11fa:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>
			bps = "(nil)";
    11fe:	f1ab 0a05 	sub.w	sl, fp, #5
    1202:	e043      	b.n	128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1204:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    1208:	9300      	str	r3, [sp, #0]
    120a:	ab0c      	add	r3, sp, #48	; 0x30
    120c:	aa08      	add	r2, sp, #32
    120e:	2100      	movs	r1, #0
    1210:	f006 faf4 	bl	77fc <encode_uint>
    1214:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1216:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    121a:	f043 0310 	orr.w	r3, r3, #16
    121e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    1222:	2378      	movs	r3, #120	; 0x78
    1224:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    1228:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    122c:	e7ca      	b.n	11c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    122e:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    1230:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1234:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    1238:	2b07      	cmp	r3, #7
    123a:	d806      	bhi.n	124a <CONFIG_FPROTECT_BLOCK_SIZE+0x24a>
    123c:	e8df f003 	tbb	[pc, r3]
    1240:	100e0c04 	.word	0x100e0c04
    1244:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    1248:	6014      	str	r4, [r2, #0]
		char sign = 0;
    124a:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    124e:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    1252:	f04f 0a00 	mov.w	sl, #0
}
    1256:	e019      	b.n	128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>
		*(signed char *)dp = (signed char)count;
    1258:	7014      	strb	r4, [r2, #0]
		break;
    125a:	e7f6      	b.n	124a <CONFIG_FPROTECT_BLOCK_SIZE+0x24a>
		*(short *)dp = (short)count;
    125c:	8014      	strh	r4, [r2, #0]
		break;
    125e:	e7f4      	b.n	124a <CONFIG_FPROTECT_BLOCK_SIZE+0x24a>
		*(long *)dp = (long)count;
    1260:	6014      	str	r4, [r2, #0]
		break;
    1262:	e7f2      	b.n	124a <CONFIG_FPROTECT_BLOCK_SIZE+0x24a>
		*(long long *)dp = (long long)count;
    1264:	4620      	mov	r0, r4
    1266:	17e1      	asrs	r1, r4, #31
    1268:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    126c:	e7ed      	b.n	124a <CONFIG_FPROTECT_BLOCK_SIZE+0x24a>
		*(intmax_t *)dp = (intmax_t)count;
    126e:	4620      	mov	r0, r4
    1270:	17e1      	asrs	r1, r4, #31
    1272:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    1276:	e7e8      	b.n	124a <CONFIG_FPROTECT_BLOCK_SIZE+0x24a>
		*(size_t *)dp = (size_t)count;
    1278:	6014      	str	r4, [r2, #0]
		break;
    127a:	e7e6      	b.n	124a <CONFIG_FPROTECT_BLOCK_SIZE+0x24a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    127c:	6014      	str	r4, [r2, #0]
		break;
    127e:	e7e4      	b.n	124a <CONFIG_FPROTECT_BLOCK_SIZE+0x24a>
		switch (conv->specifier) {
    1280:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1284:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    1288:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    128c:	f1ba 0f00 	cmp.w	sl, #0
    1290:	f000 808e 	beq.w	13b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    1294:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    1298:	f1b9 0f00 	cmp.w	r9, #0
    129c:	d000      	beq.n	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
			nj_len += 1U;
    129e:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    12a0:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    12a4:	f011 0f10 	tst.w	r1, #16
    12a8:	d026      	beq.n	12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>
			nj_len += 2U;
    12aa:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    12ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    12ae:	4413      	add	r3, r2
		if (conv->pad_fp) {
    12b0:	f011 0f40 	tst.w	r1, #64	; 0x40
    12b4:	d001      	beq.n	12ba <CONFIG_FPROTECT_BLOCK_SIZE+0x2ba>
			nj_len += conv->pad0_pre_exp;
    12b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    12b8:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    12ba:	2f00      	cmp	r7, #0
    12bc:	dd32      	ble.n	1324 <CONFIG_FPROTECT_BLOCK_SIZE+0x324>
			width -= (int)nj_len;
    12be:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    12c0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    12c4:	f013 0f04 	tst.w	r3, #4
    12c8:	d12c      	bne.n	1324 <CONFIG_FPROTECT_BLOCK_SIZE+0x324>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    12ca:	f013 0f40 	tst.w	r3, #64	; 0x40
    12ce:	d018      	beq.n	1302 <CONFIG_FPROTECT_BLOCK_SIZE+0x302>
					if (sign != 0) {
    12d0:	f1b9 0f00 	cmp.w	r9, #0
    12d4:	d018      	beq.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
						OUTC(sign);
    12d6:	4629      	mov	r1, r5
    12d8:	4648      	mov	r0, r9
    12da:	47b0      	blx	r6
    12dc:	2800      	cmp	r0, #0
    12de:	db6b      	blt.n	13b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b8>
    12e0:	3401      	adds	r4, #1
						sign = 0;
    12e2:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    12e6:	2330      	movs	r3, #48	; 0x30
    12e8:	9302      	str	r3, [sp, #8]
    12ea:	e00f      	b.n	130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
		const char *bpe = buf + sizeof(buf);
    12ec:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    12f0:	e7cc      	b.n	128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>
    12f2:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    12f6:	e7c9      	b.n	128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>
		} else if (conv->altform_0) {
    12f8:	f011 0f08 	tst.w	r1, #8
    12fc:	d0d6      	beq.n	12ac <CONFIG_FPROTECT_BLOCK_SIZE+0x2ac>
			nj_len += 1U;
    12fe:	3201      	adds	r2, #1
    1300:	e7d4      	b.n	12ac <CONFIG_FPROTECT_BLOCK_SIZE+0x2ac>
				char pad = ' ';
    1302:	2320      	movs	r3, #32
    1304:	9302      	str	r3, [sp, #8]
    1306:	e001      	b.n	130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
					pad = '0';
    1308:	2330      	movs	r3, #48	; 0x30
    130a:	9302      	str	r3, [sp, #8]
    130c:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    130e:	1e5f      	subs	r7, r3, #1
    1310:	2b00      	cmp	r3, #0
    1312:	dd07      	ble.n	1324 <CONFIG_FPROTECT_BLOCK_SIZE+0x324>
					OUTC(pad);
    1314:	4629      	mov	r1, r5
    1316:	9802      	ldr	r0, [sp, #8]
    1318:	47b0      	blx	r6
    131a:	2800      	cmp	r0, #0
    131c:	db4c      	blt.n	13b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b8>
    131e:	3401      	adds	r4, #1
				while (width-- > 0) {
    1320:	463b      	mov	r3, r7
    1322:	e7f4      	b.n	130e <CONFIG_FPROTECT_BLOCK_SIZE+0x30e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    1324:	f1b9 0f00 	cmp.w	r9, #0
    1328:	d005      	beq.n	1336 <CONFIG_FPROTECT_BLOCK_SIZE+0x336>
			OUTC(sign);
    132a:	4629      	mov	r1, r5
    132c:	4648      	mov	r0, r9
    132e:	47b0      	blx	r6
    1330:	2800      	cmp	r0, #0
    1332:	db41      	blt.n	13b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b8>
    1334:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    1336:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    133a:	f3c3 1200 	ubfx	r2, r3, #4, #1
    133e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1342:	4313      	orrs	r3, r2
    1344:	d005      	beq.n	1352 <CONFIG_FPROTECT_BLOCK_SIZE+0x352>
				OUTC('0');
    1346:	4629      	mov	r1, r5
    1348:	2030      	movs	r0, #48	; 0x30
    134a:	47b0      	blx	r6
    134c:	2800      	cmp	r0, #0
    134e:	db33      	blt.n	13b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b8>
    1350:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    1352:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    1356:	f013 0f10 	tst.w	r3, #16
    135a:	d006      	beq.n	136a <CONFIG_FPROTECT_BLOCK_SIZE+0x36a>
				OUTC(conv->specifier);
    135c:	4629      	mov	r1, r5
    135e:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    1362:	47b0      	blx	r6
    1364:	2800      	cmp	r0, #0
    1366:	db27      	blt.n	13b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b8>
    1368:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    136a:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    136c:	f103 39ff 	add.w	r9, r3, #4294967295
    1370:	2b00      	cmp	r3, #0
    1372:	dd07      	ble.n	1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>
				OUTC('0');
    1374:	4629      	mov	r1, r5
    1376:	2030      	movs	r0, #48	; 0x30
    1378:	47b0      	blx	r6
    137a:	2800      	cmp	r0, #0
    137c:	db1c      	blt.n	13b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b8>
    137e:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    1380:	464b      	mov	r3, r9
    1382:	e7f3      	b.n	136c <CONFIG_FPROTECT_BLOCK_SIZE+0x36c>
			}

			OUTS(bps, bpe);
    1384:	465b      	mov	r3, fp
    1386:	4652      	mov	r2, sl
    1388:	4629      	mov	r1, r5
    138a:	4630      	mov	r0, r6
    138c:	f006 faa0 	bl	78d0 <outs>
    1390:	2800      	cmp	r0, #0
    1392:	db11      	blt.n	13b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b8>
    1394:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    1396:	2f00      	cmp	r7, #0
    1398:	dd07      	ble.n	13aa <CONFIG_FPROTECT_BLOCK_SIZE+0x3aa>
			OUTC(' ');
    139a:	4629      	mov	r1, r5
    139c:	2020      	movs	r0, #32
    139e:	47b0      	blx	r6
    13a0:	2800      	cmp	r0, #0
    13a2:	db09      	blt.n	13b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b8>
    13a4:	3401      	adds	r4, #1
			--width;
    13a6:	3f01      	subs	r7, #1
    13a8:	e7f5      	b.n	1396 <CONFIG_FPROTECT_BLOCK_SIZE+0x396>
		fp = extract_conversion(conv, sp);
    13aa:	46c2      	mov	sl, r8
    13ac:	f7ff bb28 	b.w	a00 <cbvprintf+0x10>
    13b0:	46c2      	mov	sl, r8
    13b2:	f7ff bb25 	b.w	a00 <cbvprintf+0x10>
		}
	}

	return count;
    13b6:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    13b8:	b013      	add	sp, #76	; 0x4c
    13ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13be:	bf00      	nop
    13c0:	000093fd 	.word	0x000093fd

000013c4 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    13c4:	b508      	push	{r3, lr}
    13c6:	f04f 0220 	mov.w	r2, #32
    13ca:	f3ef 8311 	mrs	r3, BASEPRI
    13ce:	f382 8812 	msr	BASEPRI_MAX, r2
    13d2:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    13d6:	f002 f86d 	bl	34b4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    13da:	4803      	ldr	r0, [pc, #12]	; (13e8 <sys_reboot+0x24>)
    13dc:	f006 f882 	bl	74e4 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    13e0:	f001 f944 	bl	266c <arch_cpu_idle>
    13e4:	e7fc      	b.n	13e0 <sys_reboot+0x1c>
    13e6:	bf00      	nop
    13e8:	00009400 	.word	0x00009400

000013ec <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    13ec:	4b05      	ldr	r3, [pc, #20]	; (1404 <is_rodata+0x18>)
    13ee:	4298      	cmp	r0, r3
    13f0:	d304      	bcc.n	13fc <is_rodata+0x10>
    13f2:	4b05      	ldr	r3, [pc, #20]	; (1408 <is_rodata+0x1c>)
    13f4:	4298      	cmp	r0, r3
    13f6:	d303      	bcc.n	1400 <is_rodata+0x14>
    13f8:	2000      	movs	r0, #0
    13fa:	4770      	bx	lr
    13fc:	2000      	movs	r0, #0
    13fe:	4770      	bx	lr
    1400:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
    1402:	4770      	bx	lr
    1404:	00008efc 	.word	0x00008efc
    1408:	00009fac 	.word	0x00009fac

0000140c <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
    140c:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    140e:	4b06      	ldr	r3, [pc, #24]	; (1428 <thread_set+0x1c>)
    1410:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1412:	b118      	cbz	r0, 141c <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1414:	4b05      	ldr	r3, [pc, #20]	; (142c <thread_set+0x20>)
    1416:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    1418:	2b09      	cmp	r3, #9
    141a:	dc00      	bgt.n	141e <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
    141c:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    141e:	4804      	ldr	r0, [pc, #16]	; (1430 <thread_set+0x24>)
    1420:	f004 ffb4 	bl	638c <z_impl_k_sem_give>
}
    1424:	e7fa      	b.n	141c <thread_set+0x10>
    1426:	bf00      	nop
    1428:	20000474 	.word	0x20000474
    142c:	20000444 	.word	0x20000444
    1430:	200001c0 	.word	0x200001c0

00001434 <log_process_thread_timer_expiry_fn>:

	return 0;
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    1434:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    1436:	4802      	ldr	r0, [pc, #8]	; (1440 <log_process_thread_timer_expiry_fn+0xc>)
    1438:	f004 ffa8 	bl	638c <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    143c:	bd08      	pop	{r3, pc}
    143e:	bf00      	nop
    1440:	200001c0 	.word	0x200001c0

00001444 <next_pending>:
{
    1444:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
    1446:	4803      	ldr	r0, [pc, #12]	; (1454 <next_pending+0x10>)
    1448:	f006 fa6b 	bl	7922 <log_list_head_peek>
}
    144c:	3800      	subs	r0, #0
    144e:	bf18      	it	ne
    1450:	2001      	movne	r0, #1
    1452:	bd08      	pop	{r3, pc}
    1454:	20000450 	.word	0x20000450

00001458 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    1458:	b530      	push	{r4, r5, lr}
    145a:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    145c:	2200      	movs	r2, #0
    145e:	490f      	ldr	r1, [pc, #60]	; (149c <enable_logger+0x44>)
    1460:	480f      	ldr	r0, [pc, #60]	; (14a0 <enable_logger+0x48>)
    1462:	f007 fd1c 	bl	8e9e <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1466:	4d0f      	ldr	r5, [pc, #60]	; (14a4 <enable_logger+0x4c>)
    1468:	2200      	movs	r2, #0
    146a:	2300      	movs	r3, #0
    146c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1470:	2400      	movs	r4, #0
    1472:	9404      	str	r4, [sp, #16]
    1474:	230e      	movs	r3, #14
    1476:	9303      	str	r3, [sp, #12]
    1478:	9402      	str	r4, [sp, #8]
    147a:	9401      	str	r4, [sp, #4]
    147c:	9400      	str	r4, [sp, #0]
    147e:	4b0a      	ldr	r3, [pc, #40]	; (14a8 <enable_logger+0x50>)
    1480:	f44f 7240 	mov.w	r2, #768	; 0x300
    1484:	4909      	ldr	r1, [pc, #36]	; (14ac <enable_logger+0x54>)
    1486:	4628      	mov	r0, r5
    1488:	f007 fb02 	bl	8a90 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    148c:	4908      	ldr	r1, [pc, #32]	; (14b0 <enable_logger+0x58>)
    148e:	4628      	mov	r0, r5
    1490:	f004 fdc0 	bl	6014 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    1494:	4620      	mov	r0, r4
    1496:	b009      	add	sp, #36	; 0x24
    1498:	bd30      	pop	{r4, r5, pc}
    149a:	bf00      	nop
    149c:	00001435 	.word	0x00001435
    14a0:	200001d0 	.word	0x200001d0
    14a4:	20000208 	.word	0x20000208
    14a8:	00001b11 	.word	0x00001b11
    14ac:	200011c0 	.word	0x200011c0
    14b0:	0000942c 	.word	0x0000942c

000014b4 <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    14b4:	4b18      	ldr	r3, [pc, #96]	; (1518 <log_init+0x64>)
    14b6:	f3bf 8f5b 	dmb	ish
    14ba:	e853 2f00 	ldrex	r2, [r3]
    14be:	1c51      	adds	r1, r2, #1
    14c0:	e843 1000 	strex	r0, r1, [r3]
    14c4:	2800      	cmp	r0, #0
    14c6:	d1f8      	bne.n	14ba <log_init+0x6>
    14c8:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    14cc:	bb1a      	cbnz	r2, 1516 <log_init+0x62>
{
    14ce:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
    14d0:	2400      	movs	r4, #0
    14d2:	e009      	b.n	14e8 <log_init+0x34>
					   backend->cb->ctx,
    14d4:	4b11      	ldr	r3, [pc, #68]	; (151c <log_init+0x68>)
    14d6:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    14da:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    14dc:	2204      	movs	r2, #4
    14de:	6819      	ldr	r1, [r3, #0]
    14e0:	4628      	mov	r0, r5
    14e2:	f000 fb59 	bl	1b98 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    14e6:	3401      	adds	r4, #1
    14e8:	4b0d      	ldr	r3, [pc, #52]	; (1520 <log_init+0x6c>)
    14ea:	4a0c      	ldr	r2, [pc, #48]	; (151c <log_init+0x68>)
    14ec:	1a9b      	subs	r3, r3, r2
    14ee:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    14f2:	da0f      	bge.n	1514 <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
    14f4:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
    14f6:	4d09      	ldr	r5, [pc, #36]	; (151c <log_init+0x68>)
    14f8:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    14fc:	7b2b      	ldrb	r3, [r5, #12]
    14fe:	2b00      	cmp	r3, #0
    1500:	d0f1      	beq.n	14e6 <log_init+0x32>
			if (backend->api->init != NULL) {
    1502:	0123      	lsls	r3, r4, #4
    1504:	4a05      	ldr	r2, [pc, #20]	; (151c <log_init+0x68>)
    1506:	58d3      	ldr	r3, [r2, r3]
    1508:	699b      	ldr	r3, [r3, #24]
    150a:	2b00      	cmp	r3, #0
    150c:	d0e2      	beq.n	14d4 <log_init+0x20>
				backend->api->init(backend);
    150e:	4628      	mov	r0, r5
    1510:	4798      	blx	r3
    1512:	e7df      	b.n	14d4 <log_init+0x20>
}
    1514:	bd70      	pop	{r4, r5, r6, pc}
    1516:	4770      	bx	lr
    1518:	2000044c 	.word	0x2000044c
    151c:	000091fc 	.word	0x000091fc
    1520:	0000921c 	.word	0x0000921c

00001524 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    1524:	b138      	cbz	r0, 1536 <log_set_timestamp_func+0x12>
{
    1526:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    1528:	4a04      	ldr	r2, [pc, #16]	; (153c <log_set_timestamp_func+0x18>)
    152a:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    152c:	4608      	mov	r0, r1
    152e:	f000 fdab 	bl	2088 <log_output_timestamp_freq_set>
	return 0;
    1532:	2000      	movs	r0, #0
}
    1534:	bd08      	pop	{r3, pc}
		return -EINVAL;
    1536:	f06f 0015 	mvn.w	r0, #21
}
    153a:	4770      	bx	lr
    153c:	20000004 	.word	0x20000004

00001540 <log_core_init>:
{
    1540:	b508      	push	{r3, lr}
	panic_mode = false;
    1542:	2300      	movs	r3, #0
    1544:	4a0a      	ldr	r2, [pc, #40]	; (1570 <log_core_init+0x30>)
    1546:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1548:	4a0a      	ldr	r2, [pc, #40]	; (1574 <log_core_init+0x34>)
    154a:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    154c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1550:	4809      	ldr	r0, [pc, #36]	; (1578 <log_core_init+0x38>)
    1552:	f7ff ffe7 	bl	1524 <log_set_timestamp_func>
		log_msg_pool_init();
    1556:	f000 fb41 	bl	1bdc <log_msg_pool_init>
		log_list_init(&list);
    155a:	4808      	ldr	r0, [pc, #32]	; (157c <log_core_init+0x3c>)
    155c:	f006 f9d3 	bl	7906 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    1560:	2304      	movs	r3, #4
    1562:	2228      	movs	r2, #40	; 0x28
    1564:	4906      	ldr	r1, [pc, #24]	; (1580 <log_core_init+0x40>)
    1566:	4807      	ldr	r0, [pc, #28]	; (1584 <log_core_init+0x44>)
    1568:	f007 fa2f 	bl	89ca <k_mem_slab_init>
}
    156c:	bd08      	pop	{r3, pc}
    156e:	bf00      	nop
    1570:	20000fe1 	.word	0x20000fe1
    1574:	20000448 	.word	0x20000448
    1578:	0000793b 	.word	0x0000793b
    157c:	20000450 	.word	0x20000450
    1580:	20002280 	.word	0x20002280
    1584:	20000458 	.word	0x20000458

00001588 <get_msg>:
{
    1588:	b510      	push	{r4, lr}
    158a:	f04f 0320 	mov.w	r3, #32
    158e:	f3ef 8411 	mrs	r4, BASEPRI
    1592:	f383 8812 	msr	BASEPRI_MAX, r3
    1596:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    159a:	4804      	ldr	r0, [pc, #16]	; (15ac <get_msg+0x24>)
    159c:	f006 f9c3 	bl	7926 <log_list_head_get>
	__asm__ volatile(
    15a0:	f384 8811 	msr	BASEPRI, r4
    15a4:	f3bf 8f6f 	isb	sy
}
    15a8:	bd10      	pop	{r4, pc}
    15aa:	bf00      	nop
    15ac:	20000450 	.word	0x20000450

000015b0 <z_log_notify_backend_enabled>:
{
    15b0:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    15b2:	4b05      	ldr	r3, [pc, #20]	; (15c8 <z_log_notify_backend_enabled+0x18>)
    15b4:	781b      	ldrb	r3, [r3, #0]
    15b6:	b11b      	cbz	r3, 15c0 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    15b8:	4b03      	ldr	r3, [pc, #12]	; (15c8 <z_log_notify_backend_enabled+0x18>)
    15ba:	2201      	movs	r2, #1
    15bc:	701a      	strb	r2, [r3, #0]
}
    15be:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    15c0:	4802      	ldr	r0, [pc, #8]	; (15cc <z_log_notify_backend_enabled+0x1c>)
    15c2:	f004 fee3 	bl	638c <z_impl_k_sem_give>
}
    15c6:	e7f7      	b.n	15b8 <z_log_notify_backend_enabled+0x8>
    15c8:	20000fe0 	.word	0x20000fe0
    15cc:	200001c0 	.word	0x200001c0

000015d0 <z_log_dropped>:
    15d0:	4b0c      	ldr	r3, [pc, #48]	; (1604 <z_log_dropped+0x34>)
    15d2:	f3bf 8f5b 	dmb	ish
    15d6:	e853 2f00 	ldrex	r2, [r3]
    15da:	3201      	adds	r2, #1
    15dc:	e843 2100 	strex	r1, r2, [r3]
    15e0:	2900      	cmp	r1, #0
    15e2:	d1f8      	bne.n	15d6 <z_log_dropped+0x6>
    15e4:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    15e8:	4b07      	ldr	r3, [pc, #28]	; (1608 <z_log_dropped+0x38>)
    15ea:	f3bf 8f5b 	dmb	ish
    15ee:	e853 2f00 	ldrex	r2, [r3]
    15f2:	3a01      	subs	r2, #1
    15f4:	e843 2100 	strex	r1, r2, [r3]
    15f8:	2900      	cmp	r1, #0
    15fa:	d1f8      	bne.n	15ee <z_log_dropped+0x1e>
    15fc:	f3bf 8f5b 	dmb	ish
}
    1600:	4770      	bx	lr
    1602:	bf00      	nop
    1604:	20000448 	.word	0x20000448
    1608:	20000444 	.word	0x20000444

0000160c <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    160c:	4b06      	ldr	r3, [pc, #24]	; (1628 <z_log_dropped_read_and_clear+0x1c>)
}
    160e:	2000      	movs	r0, #0
    1610:	4602      	mov	r2, r0
    1612:	f3bf 8f5b 	dmb	ish
    1616:	e853 0f00 	ldrex	r0, [r3]
    161a:	e843 2100 	strex	r1, r2, [r3]
    161e:	2900      	cmp	r1, #0
    1620:	d1f9      	bne.n	1616 <z_log_dropped_read_and_clear+0xa>
    1622:	f3bf 8f5b 	dmb	ish
    1626:	4770      	bx	lr
    1628:	20000448 	.word	0x20000448

0000162c <dropped_notify>:
{
    162c:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    162e:	f7ff ffed 	bl	160c <z_log_dropped_read_and_clear>
    1632:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
    1634:	2400      	movs	r4, #0
    1636:	e000      	b.n	163a <dropped_notify+0xe>
    1638:	3401      	adds	r4, #1
    163a:	4b0b      	ldr	r3, [pc, #44]	; (1668 <dropped_notify+0x3c>)
    163c:	4a0b      	ldr	r2, [pc, #44]	; (166c <dropped_notify+0x40>)
    163e:	1a9b      	subs	r3, r3, r2
    1640:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1644:	da0f      	bge.n	1666 <dropped_notify+0x3a>
    1646:	4809      	ldr	r0, [pc, #36]	; (166c <dropped_notify+0x40>)
    1648:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    164c:	6843      	ldr	r3, [r0, #4]
    164e:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1650:	2b00      	cmp	r3, #0
    1652:	d0f1      	beq.n	1638 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
    1654:	0123      	lsls	r3, r4, #4
    1656:	4a05      	ldr	r2, [pc, #20]	; (166c <dropped_notify+0x40>)
    1658:	58d3      	ldr	r3, [r2, r3]
    165a:	691b      	ldr	r3, [r3, #16]
    165c:	2b00      	cmp	r3, #0
    165e:	d0eb      	beq.n	1638 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
    1660:	4629      	mov	r1, r5
    1662:	4798      	blx	r3
    1664:	e7e8      	b.n	1638 <dropped_notify+0xc>
}
    1666:	bd38      	pop	{r3, r4, r5, pc}
    1668:	0000921c 	.word	0x0000921c
    166c:	000091fc 	.word	0x000091fc

00001670 <z_log_dropped_pending>:
	return dropped_cnt > 0;
    1670:	4b03      	ldr	r3, [pc, #12]	; (1680 <z_log_dropped_pending+0x10>)
    1672:	6818      	ldr	r0, [r3, #0]
}
    1674:	2800      	cmp	r0, #0
    1676:	bfd4      	ite	le
    1678:	2000      	movle	r0, #0
    167a:	2001      	movgt	r0, #1
    167c:	4770      	bx	lr
    167e:	bf00      	nop
    1680:	20000448 	.word	0x20000448

00001684 <z_log_strdup>:
{
    1684:	b510      	push	{r4, lr}
    1686:	b082      	sub	sp, #8
    1688:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
    168a:	f7ff feaf 	bl	13ec <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    168e:	bb10      	cbnz	r0, 16d6 <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    1690:	2200      	movs	r2, #0
    1692:	2300      	movs	r3, #0
    1694:	a901      	add	r1, sp, #4
    1696:	4811      	ldr	r0, [pc, #68]	; (16dc <z_log_strdup+0x58>)
    1698:	f004 fc66 	bl	5f68 <k_mem_slab_alloc>
	if (err != 0) {
    169c:	b108      	cbz	r0, 16a2 <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
    169e:	4c10      	ldr	r4, [pc, #64]	; (16e0 <z_log_strdup+0x5c>)
    16a0:	e019      	b.n	16d6 <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
    16a2:	9b01      	ldr	r3, [sp, #4]
    16a4:	2201      	movs	r2, #1
    16a6:	f3bf 8f5b 	dmb	ish
    16aa:	e853 1f00 	ldrex	r1, [r3]
    16ae:	e843 2000 	strex	r0, r2, [r3]
    16b2:	2800      	cmp	r0, #0
    16b4:	d1f9      	bne.n	16aa <z_log_strdup+0x26>
    16b6:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    16ba:	221f      	movs	r2, #31
    16bc:	4621      	mov	r1, r4
    16be:	9801      	ldr	r0, [sp, #4]
    16c0:	3004      	adds	r0, #4
    16c2:	f006 fc8a 	bl	7fda <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    16c6:	9c01      	ldr	r4, [sp, #4]
    16c8:	237e      	movs	r3, #126	; 0x7e
    16ca:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    16ce:	2300      	movs	r3, #0
    16d0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	return dup->buf;
    16d4:	3404      	adds	r4, #4
}
    16d6:	4620      	mov	r0, r4
    16d8:	b002      	add	sp, #8
    16da:	bd10      	pop	{r4, pc}
    16dc:	20000458 	.word	0x20000458
    16e0:	00009434 	.word	0x00009434

000016e4 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    16e4:	b138      	cbz	r0, 16f6 <log_is_strdup+0x12>
    16e6:	4a07      	ldr	r2, [pc, #28]	; (1704 <log_is_strdup+0x20>)
    16e8:	4290      	cmp	r0, r2
    16ea:	d306      	bcc.n	16fa <log_is_strdup+0x16>
    16ec:	32a0      	adds	r2, #160	; 0xa0
    16ee:	4290      	cmp	r0, r2
    16f0:	d305      	bcc.n	16fe <log_is_strdup+0x1a>
    16f2:	2000      	movs	r0, #0
    16f4:	4770      	bx	lr
    16f6:	2000      	movs	r0, #0
    16f8:	4770      	bx	lr
    16fa:	2000      	movs	r0, #0
    16fc:	4770      	bx	lr
    16fe:	2001      	movs	r0, #1
}
    1700:	4770      	bx	lr
    1702:	bf00      	nop
    1704:	20002280 	.word	0x20002280

00001708 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1708:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
    170a:	f013 0f01 	tst.w	r3, #1
    170e:	d000      	beq.n	1712 <detect_missed_strdup+0xa>
    1710:	4770      	bx	lr
{
    1712:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1716:	b083      	sub	sp, #12
    1718:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
    171a:	f006 f9ca 	bl	7ab2 <log_msg_str_get>
    171e:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    1720:	4630      	mov	r0, r6
    1722:	f006 f9b1 	bl	7a88 <log_msg_nargs_get>
    1726:	4601      	mov	r1, r0
    1728:	4638      	mov	r0, r7
    172a:	f006 f90a 	bl	7942 <z_log_get_s_mask>
    172e:	4605      	mov	r5, r0
	while (mask) {
    1730:	e004      	b.n	173c <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
    1732:	2301      	movs	r3, #1
    1734:	fa03 f404 	lsl.w	r4, r3, r4
    1738:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
    173c:	b36d      	cbz	r5, 179a <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
    173e:	fab5 f485 	clz	r4, r5
    1742:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    1746:	4621      	mov	r1, r4
    1748:	4630      	mov	r0, r6
    174a:	f006 f9a0 	bl	7a8e <log_msg_arg_get>
    174e:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
    1750:	f7ff fe4c 	bl	13ec <is_rodata>
    1754:	2800      	cmp	r0, #0
    1756:	d1ec      	bne.n	1732 <detect_missed_strdup+0x2a>
    1758:	4648      	mov	r0, r9
    175a:	f7ff ffc3 	bl	16e4 <log_is_strdup>
    175e:	2800      	cmp	r0, #0
    1760:	d1e7      	bne.n	1732 <detect_missed_strdup+0x2a>
    1762:	4b0f      	ldr	r3, [pc, #60]	; (17a0 <detect_missed_strdup+0x98>)
    1764:	4599      	cmp	r9, r3
    1766:	d0e4      	beq.n	1732 <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
    1768:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    176a:	f3c1 1189 	ubfx	r1, r1, #6, #10
    176e:	f000 fa03 	bl	1b78 <log_source_name_get>
    1772:	4602      	mov	r2, r0
    1774:	4b0b      	ldr	r3, [pc, #44]	; (17a4 <detect_missed_strdup+0x9c>)
    1776:	490c      	ldr	r1, [pc, #48]	; (17a8 <detect_missed_strdup+0xa0>)
    1778:	1a5b      	subs	r3, r3, r1
    177a:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    177c:	2101      	movs	r1, #1
    177e:	f361 0802 	bfi	r8, r1, #0, #3
    1782:	f36f 08c5 	bfc	r8, #3, #3
    1786:	f363 188f 	bfi	r8, r3, #6, #10
    178a:	f8ad 8000 	strh.w	r8, [sp]
    178e:	463b      	mov	r3, r7
    1790:	4621      	mov	r1, r4
    1792:	4806      	ldr	r0, [pc, #24]	; (17ac <detect_missed_strdup+0xa4>)
    1794:	f000 f8b0 	bl	18f8 <log_3>
    1798:	e7cb      	b.n	1732 <detect_missed_strdup+0x2a>
}
    179a:	b003      	add	sp, #12
    179c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    17a0:	00009434 	.word	0x00009434
    17a4:	000091b4 	.word	0x000091b4
    17a8:	0000919c 	.word	0x0000919c
    17ac:	00009450 	.word	0x00009450

000017b0 <msg_process>:
{
    17b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17b2:	4606      	mov	r6, r0
	if (!bypass) {
    17b4:	bb19      	cbnz	r1, 17fe <msg_process+0x4e>
		    !panic_mode) {
    17b6:	4b14      	ldr	r3, [pc, #80]	; (1808 <msg_process+0x58>)
    17b8:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
    17ba:	b10b      	cbz	r3, 17c0 <msg_process+0x10>
{
    17bc:	2400      	movs	r4, #0
    17be:	e003      	b.n	17c8 <msg_process+0x18>
			detect_missed_strdup(msg.msg);
    17c0:	f7ff ffa2 	bl	1708 <detect_missed_strdup>
    17c4:	e7fa      	b.n	17bc <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
    17c6:	3401      	adds	r4, #1
    17c8:	4b10      	ldr	r3, [pc, #64]	; (180c <msg_process+0x5c>)
    17ca:	4a11      	ldr	r2, [pc, #68]	; (1810 <msg_process+0x60>)
    17cc:	1a9b      	subs	r3, r3, r2
    17ce:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    17d2:	da14      	bge.n	17fe <msg_process+0x4e>
	return &__log_backends_start[idx];
    17d4:	4d0e      	ldr	r5, [pc, #56]	; (1810 <msg_process+0x60>)
    17d6:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
    17da:	686b      	ldr	r3, [r5, #4]
    17dc:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
    17de:	2b00      	cmp	r3, #0
    17e0:	d0f1      	beq.n	17c6 <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
    17e2:	4631      	mov	r1, r6
    17e4:	4628      	mov	r0, r5
    17e6:	f006 f8a6 	bl	7936 <msg_filter_check>
			if (log_backend_is_active(backend) &&
    17ea:	2800      	cmp	r0, #0
    17ec:	d0eb      	beq.n	17c6 <msg_process+0x16>
	backend->api->put(backend, msg);
    17ee:	0127      	lsls	r7, r4, #4
    17f0:	4b07      	ldr	r3, [pc, #28]	; (1810 <msg_process+0x60>)
    17f2:	59db      	ldr	r3, [r3, r7]
    17f4:	685b      	ldr	r3, [r3, #4]
    17f6:	4631      	mov	r1, r6
    17f8:	4628      	mov	r0, r5
    17fa:	4798      	blx	r3
}
    17fc:	e7e3      	b.n	17c6 <msg_process+0x16>
			log_msg_put(msg.msg);
    17fe:	4630      	mov	r0, r6
    1800:	f006 f959 	bl	7ab6 <log_msg_put>
}
    1804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1806:	bf00      	nop
    1808:	20000fe1 	.word	0x20000fe1
    180c:	0000921c 	.word	0x0000921c
    1810:	000091fc 	.word	0x000091fc

00001814 <z_impl_log_process>:
{
    1814:	b510      	push	{r4, lr}
    1816:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    1818:	4b11      	ldr	r3, [pc, #68]	; (1860 <z_impl_log_process+0x4c>)
    181a:	781b      	ldrb	r3, [r3, #0]
    181c:	b903      	cbnz	r3, 1820 <z_impl_log_process+0xc>
    181e:	b1d0      	cbz	r0, 1856 <z_impl_log_process+0x42>
	msg = get_msg();
    1820:	f7ff feb2 	bl	1588 <get_msg>
	if (msg.msg) {
    1824:	4603      	mov	r3, r0
    1826:	b180      	cbz	r0, 184a <z_impl_log_process+0x36>
		if (!bypass) {
    1828:	b95c      	cbnz	r4, 1842 <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    182a:	4a0e      	ldr	r2, [pc, #56]	; (1864 <z_impl_log_process+0x50>)
    182c:	f3bf 8f5b 	dmb	ish
    1830:	e852 1f00 	ldrex	r1, [r2]
    1834:	3901      	subs	r1, #1
    1836:	e842 1000 	strex	r0, r1, [r2]
    183a:	2800      	cmp	r0, #0
    183c:	d1f8      	bne.n	1830 <z_impl_log_process+0x1c>
    183e:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
    1842:	4621      	mov	r1, r4
    1844:	4618      	mov	r0, r3
    1846:	f7ff ffb3 	bl	17b0 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
    184a:	b914      	cbnz	r4, 1852 <z_impl_log_process+0x3e>
    184c:	f7ff ff10 	bl	1670 <z_log_dropped_pending>
    1850:	b910      	cbnz	r0, 1858 <z_impl_log_process+0x44>
	return next_pending();
    1852:	f7ff fdf7 	bl	1444 <next_pending>
}
    1856:	bd10      	pop	{r4, pc}
		dropped_notify();
    1858:	f7ff fee8 	bl	162c <dropped_notify>
    185c:	e7f9      	b.n	1852 <z_impl_log_process+0x3e>
    185e:	bf00      	nop
    1860:	20000fe0 	.word	0x20000fe0
    1864:	20000444 	.word	0x20000444

00001868 <z_log_msg_post_finalize>:
{
    1868:	b510      	push	{r4, lr}
    186a:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    186c:	4b1d      	ldr	r3, [pc, #116]	; (18e4 <z_log_msg_post_finalize+0x7c>)
    186e:	f3bf 8f5b 	dmb	ish
    1872:	e853 2f00 	ldrex	r2, [r3]
    1876:	1c51      	adds	r1, r2, #1
    1878:	e843 1000 	strex	r0, r1, [r3]
    187c:	2800      	cmp	r0, #0
    187e:	d1f8      	bne.n	1872 <z_log_msg_post_finalize+0xa>
    1880:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    1884:	4b18      	ldr	r3, [pc, #96]	; (18e8 <z_log_msg_post_finalize+0x80>)
    1886:	781b      	ldrb	r3, [r3, #0]
    1888:	b93b      	cbnz	r3, 189a <z_log_msg_post_finalize+0x32>
	} else if (proc_tid != NULL && cnt == 0) {
    188a:	4b18      	ldr	r3, [pc, #96]	; (18ec <z_log_msg_post_finalize+0x84>)
    188c:	681b      	ldr	r3, [r3, #0]
    188e:	b103      	cbz	r3, 1892 <z_log_msg_post_finalize+0x2a>
    1890:	b19a      	cbz	r2, 18ba <z_log_msg_post_finalize+0x52>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    1892:	2a0a      	cmp	r2, #10
    1894:	d01c      	beq.n	18d0 <z_log_msg_post_finalize+0x68>
}
    1896:	b002      	add	sp, #8
    1898:	bd10      	pop	{r4, pc}
	__asm__ volatile(
    189a:	f04f 0320 	mov.w	r3, #32
    189e:	f3ef 8411 	mrs	r4, BASEPRI
    18a2:	f383 8812 	msr	BASEPRI_MAX, r3
    18a6:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    18aa:	2000      	movs	r0, #0
    18ac:	f7ff ffb2 	bl	1814 <z_impl_log_process>
	__asm__ volatile(
    18b0:	f384 8811 	msr	BASEPRI, r4
    18b4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    18b8:	e7ed      	b.n	1896 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_start(timer, duration, period);
    18ba:	2200      	movs	r2, #0
    18bc:	2300      	movs	r3, #0
    18be:	e9cd 2300 	strd	r2, r3, [sp]
    18c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    18c6:	2300      	movs	r3, #0
    18c8:	4809      	ldr	r0, [pc, #36]	; (18f0 <z_log_msg_post_finalize+0x88>)
    18ca:	f005 fb6f 	bl	6fac <z_impl_k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
    18ce:	e7e2      	b.n	1896 <z_log_msg_post_finalize+0x2e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    18d0:	2b00      	cmp	r3, #0
    18d2:	d0e0      	beq.n	1896 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_stop(timer);
    18d4:	4806      	ldr	r0, [pc, #24]	; (18f0 <z_log_msg_post_finalize+0x88>)
    18d6:	f007 faee 	bl	8eb6 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    18da:	4806      	ldr	r0, [pc, #24]	; (18f4 <z_log_msg_post_finalize+0x8c>)
    18dc:	f004 fd56 	bl	638c <z_impl_k_sem_give>
}
    18e0:	e7d9      	b.n	1896 <z_log_msg_post_finalize+0x2e>
    18e2:	bf00      	nop
    18e4:	20000444 	.word	0x20000444
    18e8:	20000fe1 	.word	0x20000fe1
    18ec:	20000474 	.word	0x20000474
    18f0:	200001d0 	.word	0x200001d0
    18f4:	200001c0 	.word	0x200001c0

000018f8 <log_3>:
{
    18f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    18fc:	4680      	mov	r8, r0
    18fe:	460f      	mov	r7, r1
    1900:	4616      	mov	r6, r2
    1902:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    1904:	f000 f98e 	bl	1c24 <log_msg_chunk_alloc>

	if (msg != NULL) {
    1908:	4604      	mov	r4, r0
    190a:	b140      	cbz	r0, 191e <log_3+0x26>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    190c:	2301      	movs	r3, #1
    190e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    1910:	2200      	movs	r2, #0
    1912:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    1914:	f04f 0300 	mov.w	r3, #0
    1918:	f362 0300 	bfi	r3, r2, #0, #1
    191c:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
    191e:	b14c      	cbz	r4, 1934 <log_3+0x3c>
		msg->str = str;
    1920:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
    1924:	7a63      	ldrb	r3, [r4, #9]
    1926:	2203      	movs	r2, #3
    1928:	f362 1307 	bfi	r3, r2, #4, #4
    192c:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    192e:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
    1930:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
    1932:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
    1934:	b1c4      	cbz	r4, 1968 <log_3+0x70>
	msg->hdr.ids = src_level;
    1936:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    193a:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    193c:	4b0b      	ldr	r3, [pc, #44]	; (196c <log_3+0x74>)
    193e:	681b      	ldr	r3, [r3, #0]
    1940:	4798      	blx	r3
    1942:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    1944:	f04f 0320 	mov.w	r3, #32
    1948:	f3ef 8511 	mrs	r5, BASEPRI
    194c:	f383 8812 	msr	BASEPRI_MAX, r3
    1950:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1954:	4621      	mov	r1, r4
    1956:	4806      	ldr	r0, [pc, #24]	; (1970 <log_3+0x78>)
    1958:	f005 ffd9 	bl	790e <log_list_add_tail>
	__asm__ volatile(
    195c:	f385 8811 	msr	BASEPRI, r5
    1960:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    1964:	f7ff ff80 	bl	1868 <z_log_msg_post_finalize>
}
    1968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    196c:	20000004 	.word	0x20000004
    1970:	20000450 	.word	0x20000450

00001974 <log_1>:
{
    1974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1976:	4606      	mov	r6, r0
    1978:	460d      	mov	r5, r1
    197a:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    197c:	f000 f952 	bl	1c24 <log_msg_chunk_alloc>
	if (msg != NULL) {
    1980:	4604      	mov	r4, r0
    1982:	b140      	cbz	r0, 1996 <log_1+0x22>
		msg->hdr.ref_cnt = 1;
    1984:	2301      	movs	r3, #1
    1986:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    1988:	2100      	movs	r1, #0
    198a:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    198c:	f04f 0300 	mov.w	r3, #0
    1990:	f361 0300 	bfi	r3, r1, #0, #1
    1994:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    1996:	b134      	cbz	r4, 19a6 <log_1+0x32>
		msg->str = str;
    1998:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
    199a:	7a63      	ldrb	r3, [r4, #9]
    199c:	2201      	movs	r2, #1
    199e:	f362 1307 	bfi	r3, r2, #4, #4
    19a2:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    19a4:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
    19a6:	b1b4      	cbz	r4, 19d6 <log_1+0x62>
	msg->hdr.ids = src_level;
    19a8:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    19aa:	4b0b      	ldr	r3, [pc, #44]	; (19d8 <log_1+0x64>)
    19ac:	681b      	ldr	r3, [r3, #0]
    19ae:	4798      	blx	r3
    19b0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    19b2:	f04f 0320 	mov.w	r3, #32
    19b6:	f3ef 8511 	mrs	r5, BASEPRI
    19ba:	f383 8812 	msr	BASEPRI_MAX, r3
    19be:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    19c2:	4621      	mov	r1, r4
    19c4:	4805      	ldr	r0, [pc, #20]	; (19dc <log_1+0x68>)
    19c6:	f005 ffa2 	bl	790e <log_list_add_tail>
	__asm__ volatile(
    19ca:	f385 8811 	msr	BASEPRI, r5
    19ce:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    19d2:	f7ff ff49 	bl	1868 <z_log_msg_post_finalize>
}
    19d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19d8:	20000004 	.word	0x20000004
    19dc:	20000450 	.word	0x20000450

000019e0 <log_2>:
{
    19e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    19e4:	4607      	mov	r7, r0
    19e6:	460e      	mov	r6, r1
    19e8:	4615      	mov	r5, r2
    19ea:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    19ec:	f000 f91a 	bl	1c24 <log_msg_chunk_alloc>
	if (msg != NULL) {
    19f0:	4604      	mov	r4, r0
    19f2:	b140      	cbz	r0, 1a06 <log_2+0x26>
		msg->hdr.ref_cnt = 1;
    19f4:	2301      	movs	r3, #1
    19f6:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    19f8:	2200      	movs	r2, #0
    19fa:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    19fc:	f04f 0300 	mov.w	r3, #0
    1a00:	f362 0300 	bfi	r3, r2, #0, #1
    1a04:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    1a06:	b13c      	cbz	r4, 1a18 <log_2+0x38>
		msg->str = str;
    1a08:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
    1a0a:	7a63      	ldrb	r3, [r4, #9]
    1a0c:	2202      	movs	r2, #2
    1a0e:	f362 1307 	bfi	r3, r2, #4, #4
    1a12:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    1a14:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
    1a16:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
    1a18:	b1bc      	cbz	r4, 1a4a <log_2+0x6a>
	msg->hdr.ids = src_level;
    1a1a:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    1a1e:	4b0c      	ldr	r3, [pc, #48]	; (1a50 <log_2+0x70>)
    1a20:	681b      	ldr	r3, [r3, #0]
    1a22:	4798      	blx	r3
    1a24:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    1a26:	f04f 0320 	mov.w	r3, #32
    1a2a:	f3ef 8511 	mrs	r5, BASEPRI
    1a2e:	f383 8812 	msr	BASEPRI_MAX, r3
    1a32:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1a36:	4621      	mov	r1, r4
    1a38:	4806      	ldr	r0, [pc, #24]	; (1a54 <log_2+0x74>)
    1a3a:	f005 ff68 	bl	790e <log_list_add_tail>
	__asm__ volatile(
    1a3e:	f385 8811 	msr	BASEPRI, r5
    1a42:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    1a46:	f7ff ff0f 	bl	1868 <z_log_msg_post_finalize>
}
    1a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a4e:	bf00      	nop
    1a50:	20000004 	.word	0x20000004
    1a54:	20000450 	.word	0x20000450

00001a58 <log_0>:
{
    1a58:	b570      	push	{r4, r5, r6, lr}
    1a5a:	4605      	mov	r5, r0
    1a5c:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    1a5e:	f000 f8e1 	bl	1c24 <log_msg_chunk_alloc>
	if (msg != NULL) {
    1a62:	4604      	mov	r4, r0
    1a64:	b140      	cbz	r0, 1a78 <log_0+0x20>
		msg->hdr.ref_cnt = 1;
    1a66:	2301      	movs	r3, #1
    1a68:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    1a6a:	2200      	movs	r2, #0
    1a6c:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    1a6e:	f04f 0300 	mov.w	r3, #0
    1a72:	f362 0300 	bfi	r3, r2, #0, #1
    1a76:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    1a78:	b104      	cbz	r4, 1a7c <log_0+0x24>
		msg->str = str;
    1a7a:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
    1a7c:	b1b4      	cbz	r4, 1aac <log_0+0x54>
	msg->hdr.ids = src_level;
    1a7e:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    1a80:	4b0b      	ldr	r3, [pc, #44]	; (1ab0 <log_0+0x58>)
    1a82:	681b      	ldr	r3, [r3, #0]
    1a84:	4798      	blx	r3
    1a86:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    1a88:	f04f 0320 	mov.w	r3, #32
    1a8c:	f3ef 8511 	mrs	r5, BASEPRI
    1a90:	f383 8812 	msr	BASEPRI_MAX, r3
    1a94:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1a98:	4621      	mov	r1, r4
    1a9a:	4806      	ldr	r0, [pc, #24]	; (1ab4 <log_0+0x5c>)
    1a9c:	f005 ff37 	bl	790e <log_list_add_tail>
	__asm__ volatile(
    1aa0:	f385 8811 	msr	BASEPRI, r5
    1aa4:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    1aa8:	f7ff fede 	bl	1868 <z_log_msg_post_finalize>
}
    1aac:	bd70      	pop	{r4, r5, r6, pc}
    1aae:	bf00      	nop
    1ab0:	20000004 	.word	0x20000004
    1ab4:	20000450 	.word	0x20000450

00001ab8 <z_impl_log_panic>:
	if (panic_mode) {
    1ab8:	4b12      	ldr	r3, [pc, #72]	; (1b04 <z_impl_log_panic+0x4c>)
    1aba:	781b      	ldrb	r3, [r3, #0]
    1abc:	b103      	cbz	r3, 1ac0 <z_impl_log_panic+0x8>
    1abe:	4770      	bx	lr
{
    1ac0:	b510      	push	{r4, lr}
	log_init();
    1ac2:	f7ff fcf7 	bl	14b4 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    1ac6:	2400      	movs	r4, #0
    1ac8:	e000      	b.n	1acc <z_impl_log_panic+0x14>
    1aca:	3401      	adds	r4, #1
    1acc:	4b0e      	ldr	r3, [pc, #56]	; (1b08 <z_impl_log_panic+0x50>)
    1ace:	4a0f      	ldr	r2, [pc, #60]	; (1b0c <z_impl_log_panic+0x54>)
    1ad0:	1a9b      	subs	r3, r3, r2
    1ad2:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1ad6:	da0c      	bge.n	1af2 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
    1ad8:	480c      	ldr	r0, [pc, #48]	; (1b0c <z_impl_log_panic+0x54>)
    1ada:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    1ade:	6843      	ldr	r3, [r0, #4]
    1ae0:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1ae2:	2b00      	cmp	r3, #0
    1ae4:	d0f1      	beq.n	1aca <z_impl_log_panic+0x12>
	backend->api->panic(backend);
    1ae6:	0123      	lsls	r3, r4, #4
    1ae8:	4a08      	ldr	r2, [pc, #32]	; (1b0c <z_impl_log_panic+0x54>)
    1aea:	58d3      	ldr	r3, [r2, r3]
    1aec:	695b      	ldr	r3, [r3, #20]
    1aee:	4798      	blx	r3
}
    1af0:	e7eb      	b.n	1aca <z_impl_log_panic+0x12>
    1af2:	2000      	movs	r0, #0
    1af4:	f7ff fe8e 	bl	1814 <z_impl_log_process>
		while (log_process(false) == true) {
    1af8:	2800      	cmp	r0, #0
    1afa:	d1fa      	bne.n	1af2 <z_impl_log_panic+0x3a>
	panic_mode = true;
    1afc:	4b01      	ldr	r3, [pc, #4]	; (1b04 <z_impl_log_panic+0x4c>)
    1afe:	2201      	movs	r2, #1
    1b00:	701a      	strb	r2, [r3, #0]
}
    1b02:	bd10      	pop	{r4, pc}
    1b04:	20000fe1 	.word	0x20000fe1
    1b08:	0000921c 	.word	0x0000921c
    1b0c:	000091fc 	.word	0x000091fc

00001b10 <log_process_thread_func>:
{
    1b10:	b508      	push	{r3, lr}
	log_init();
    1b12:	f7ff fccf 	bl	14b4 <log_init>
	return z_impl_z_current_get();
    1b16:	f005 f843 	bl	6ba0 <z_impl_z_current_get>
	thread_set(k_current_get());
    1b1a:	f7ff fc77 	bl	140c <thread_set>
    1b1e:	e006      	b.n	1b2e <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
    1b20:	f04f 32ff 	mov.w	r2, #4294967295
    1b24:	f04f 33ff 	mov.w	r3, #4294967295
    1b28:	4804      	ldr	r0, [pc, #16]	; (1b3c <log_process_thread_func+0x2c>)
    1b2a:	f004 fc53 	bl	63d4 <z_impl_k_sem_take>
    1b2e:	2000      	movs	r0, #0
    1b30:	f7ff fe70 	bl	1814 <z_impl_log_process>
		if (log_process(false) == false) {
    1b34:	2800      	cmp	r0, #0
    1b36:	d1fa      	bne.n	1b2e <log_process_thread_func+0x1e>
    1b38:	e7f2      	b.n	1b20 <log_process_thread_func+0x10>
    1b3a:	bf00      	nop
    1b3c:	200001c0 	.word	0x200001c0

00001b40 <z_log_free>:
{
    1b40:	b500      	push	{lr}
    1b42:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    1b44:	3804      	subs	r0, #4
    1b46:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1b48:	f3bf 8f5b 	dmb	ish
    1b4c:	e850 3f00 	ldrex	r3, [r0]
    1b50:	1e5a      	subs	r2, r3, #1
    1b52:	e840 2100 	strex	r1, r2, [r0]
    1b56:	2900      	cmp	r1, #0
    1b58:	d1f8      	bne.n	1b4c <z_log_free+0xc>
    1b5a:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    1b5e:	2b01      	cmp	r3, #1
    1b60:	d002      	beq.n	1b68 <z_log_free+0x28>
}
    1b62:	b003      	add	sp, #12
    1b64:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    1b68:	a901      	add	r1, sp, #4
    1b6a:	4802      	ldr	r0, [pc, #8]	; (1b74 <z_log_free+0x34>)
    1b6c:	f006 ff3b 	bl	89e6 <k_mem_slab_free>
}
    1b70:	e7f7      	b.n	1b62 <z_log_free+0x22>
    1b72:	bf00      	nop
    1b74:	20000458 	.word	0x20000458

00001b78 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1b78:	4b05      	ldr	r3, [pc, #20]	; (1b90 <log_source_name_get+0x18>)
    1b7a:	4a06      	ldr	r2, [pc, #24]	; (1b94 <log_source_name_get+0x1c>)
    1b7c:	1a9b      	subs	r3, r3, r2
    1b7e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    1b82:	d202      	bcs.n	1b8a <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    1b84:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    1b88:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1b8a:	2000      	movs	r0, #0
}
    1b8c:	4770      	bx	lr
    1b8e:	bf00      	nop
    1b90:	000091fc 	.word	0x000091fc
    1b94:	0000919c 	.word	0x0000919c

00001b98 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    1b98:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1b9a:	4b07      	ldr	r3, [pc, #28]	; (1bb8 <log_backend_enable+0x20>)
    1b9c:	1ac3      	subs	r3, r0, r3
    1b9e:	111b      	asrs	r3, r3, #4
    1ba0:	3301      	adds	r3, #1
	backend->cb->id = id;
    1ba2:	6842      	ldr	r2, [r0, #4]
    1ba4:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
    1ba6:	6843      	ldr	r3, [r0, #4]
    1ba8:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1baa:	6843      	ldr	r3, [r0, #4]
    1bac:	2201      	movs	r2, #1
    1bae:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    1bb0:	f7ff fcfe 	bl	15b0 <z_log_notify_backend_enabled>
}
    1bb4:	bd08      	pop	{r3, pc}
    1bb6:	bf00      	nop
    1bb8:	000091fc 	.word	0x000091fc

00001bbc <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
    1bbc:	b510      	push	{r4, lr}
    1bbe:	b082      	sub	sp, #8
    1bc0:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
    1bc2:	9b01      	ldr	r3, [sp, #4]
    1bc4:	b133      	cbz	r3, 1bd4 <cont_free+0x18>
		next = cont->next;
    1bc6:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    1bc8:	a901      	add	r1, sp, #4
    1bca:	4803      	ldr	r0, [pc, #12]	; (1bd8 <cont_free+0x1c>)
    1bcc:	f006 ff0b 	bl	89e6 <k_mem_slab_free>
		cont = next;
    1bd0:	9401      	str	r4, [sp, #4]
    1bd2:	e7f6      	b.n	1bc2 <cont_free+0x6>
	}
}
    1bd4:	b002      	add	sp, #8
    1bd6:	bd10      	pop	{r4, pc}
    1bd8:	20000478 	.word	0x20000478

00001bdc <log_msg_pool_init>:
{
    1bdc:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    1bde:	2320      	movs	r3, #32
    1be0:	461a      	mov	r2, r3
    1be2:	4902      	ldr	r1, [pc, #8]	; (1bec <log_msg_pool_init+0x10>)
    1be4:	4802      	ldr	r0, [pc, #8]	; (1bf0 <log_msg_pool_init+0x14>)
    1be6:	f006 fef0 	bl	89ca <k_mem_slab_init>
}
    1bea:	bd08      	pop	{r3, pc}
    1bec:	20002320 	.word	0x20002320
    1bf0:	20000478 	.word	0x20000478

00001bf4 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    1bf4:	b510      	push	{r4, lr}
    1bf6:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
    1bf8:	2300      	movs	r3, #0
    1bfa:	9301      	str	r3, [sp, #4]
    1bfc:	2001      	movs	r0, #1
    1bfe:	f7ff fe09 	bl	1814 <z_impl_log_process>
    1c02:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
    1c04:	f7ff fce4 	bl	15d0 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    1c08:	2200      	movs	r2, #0
    1c0a:	2300      	movs	r3, #0
    1c0c:	a901      	add	r1, sp, #4
    1c0e:	4804      	ldr	r0, [pc, #16]	; (1c20 <log_msg_no_space_handle+0x2c>)
    1c10:	f004 f9aa 	bl	5f68 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    1c14:	b108      	cbz	r0, 1c1a <log_msg_no_space_handle+0x26>
    1c16:	2c00      	cmp	r4, #0
    1c18:	d1f0      	bne.n	1bfc <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    1c1a:	9801      	ldr	r0, [sp, #4]
    1c1c:	b002      	add	sp, #8
    1c1e:	bd10      	pop	{r4, pc}
    1c20:	20000478 	.word	0x20000478

00001c24 <log_msg_chunk_alloc>:
{
    1c24:	b500      	push	{lr}
    1c26:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
    1c28:	2300      	movs	r3, #0
    1c2a:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
    1c2c:	f005 feac 	bl	7988 <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    1c30:	b150      	cbz	r0, 1c48 <log_msg_chunk_alloc+0x24>
    1c32:	2200      	movs	r2, #0
    1c34:	2300      	movs	r3, #0
    1c36:	a901      	add	r1, sp, #4
    1c38:	4807      	ldr	r0, [pc, #28]	; (1c58 <log_msg_chunk_alloc+0x34>)
    1c3a:	f004 f995 	bl	5f68 <k_mem_slab_alloc>
	if (err != 0) {
    1c3e:	b930      	cbnz	r0, 1c4e <log_msg_chunk_alloc+0x2a>
}
    1c40:	9801      	ldr	r0, [sp, #4]
    1c42:	b003      	add	sp, #12
    1c44:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    1c48:	2200      	movs	r2, #0
    1c4a:	2300      	movs	r3, #0
    1c4c:	e7f3      	b.n	1c36 <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
    1c4e:	f7ff ffd1 	bl	1bf4 <log_msg_no_space_handle>
    1c52:	9001      	str	r0, [sp, #4]
    1c54:	e7f4      	b.n	1c40 <log_msg_chunk_alloc+0x1c>
    1c56:	bf00      	nop
    1c58:	20000478 	.word	0x20000478

00001c5c <msg_free>:
{
    1c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c5e:	b083      	sub	sp, #12
    1c60:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
    1c62:	4604      	mov	r4, r0
    1c64:	f005 ff10 	bl	7a88 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1c68:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
    1c6a:	f013 0f01 	tst.w	r3, #1
    1c6e:	d101      	bne.n	1c74 <msg_free+0x18>
    1c70:	4606      	mov	r6, r0
    1c72:	bb50      	cbnz	r0, 1cca <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
    1c74:	9b01      	ldr	r3, [sp, #4]
    1c76:	7a1a      	ldrb	r2, [r3, #8]
    1c78:	f012 0f02 	tst.w	r2, #2
    1c7c:	d128      	bne.n	1cd0 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    1c7e:	a901      	add	r1, sp, #4
    1c80:	4815      	ldr	r0, [pc, #84]	; (1cd8 <msg_free+0x7c>)
    1c82:	f006 feb0 	bl	89e6 <k_mem_slab_free>
}
    1c86:	b003      	add	sp, #12
    1c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
    1c8a:	9801      	ldr	r0, [sp, #4]
    1c8c:	f005 ff11 	bl	7ab2 <log_msg_str_get>
    1c90:	4631      	mov	r1, r6
    1c92:	f005 fe56 	bl	7942 <z_log_get_s_mask>
					if (smask == 0U) {
    1c96:	4607      	mov	r7, r0
    1c98:	b988      	cbnz	r0, 1cbe <msg_free+0x62>
    1c9a:	e7eb      	b.n	1c74 <msg_free+0x18>
					z_log_free(buf);
    1c9c:	4628      	mov	r0, r5
    1c9e:	f7ff ff4f 	bl	1b40 <z_log_free>
		for (i = 0U; i < nargs; i++) {
    1ca2:	3401      	adds	r4, #1
    1ca4:	42b4      	cmp	r4, r6
    1ca6:	d2e5      	bcs.n	1c74 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
    1ca8:	4621      	mov	r1, r4
    1caa:	9801      	ldr	r0, [sp, #4]
    1cac:	f005 feef 	bl	7a8e <log_msg_arg_get>
    1cb0:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
    1cb2:	f7ff fd17 	bl	16e4 <log_is_strdup>
    1cb6:	2800      	cmp	r0, #0
    1cb8:	d0f3      	beq.n	1ca2 <msg_free+0x46>
				if (smask == 0U) {
    1cba:	2f00      	cmp	r7, #0
    1cbc:	d0e5      	beq.n	1c8a <msg_free+0x2e>
				if (smask & BIT(i)) {
    1cbe:	fa27 f304 	lsr.w	r3, r7, r4
    1cc2:	f013 0f01 	tst.w	r3, #1
    1cc6:	d0ec      	beq.n	1ca2 <msg_free+0x46>
    1cc8:	e7e8      	b.n	1c9c <msg_free+0x40>
		uint32_t smask = 0U;
    1cca:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
    1ccc:	463c      	mov	r4, r7
    1cce:	e7e9      	b.n	1ca4 <msg_free+0x48>
		cont_free(msg->payload.ext.next);
    1cd0:	6958      	ldr	r0, [r3, #20]
    1cd2:	f7ff ff73 	bl	1bbc <cont_free>
    1cd6:	e7d2      	b.n	1c7e <msg_free+0x22>
    1cd8:	20000478 	.word	0x20000478

00001cdc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1cdc:	b40e      	push	{r1, r2, r3}
    1cde:	b500      	push	{lr}
    1ce0:	b082      	sub	sp, #8
    1ce2:	4601      	mov	r1, r0
    1ce4:	ab03      	add	r3, sp, #12
    1ce6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    1cea:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1cec:	4803      	ldr	r0, [pc, #12]	; (1cfc <print_formatted+0x20>)
    1cee:	f7fe fe7f 	bl	9f0 <cbvprintf>
	va_end(args);

	return length;
}
    1cf2:	b002      	add	sp, #8
    1cf4:	f85d eb04 	ldr.w	lr, [sp], #4
    1cf8:	b003      	add	sp, #12
    1cfa:	4770      	bx	lr
    1cfc:	00007e07 	.word	0x00007e07

00001d00 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
    1d00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d02:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
    1d04:	f011 0f44 	tst.w	r1, #68	; 0x44
    1d08:	d005      	beq.n	1d16 <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
    1d0a:	4b1a      	ldr	r3, [pc, #104]	; (1d74 <timestamp_print+0x74>)
    1d0c:	681c      	ldr	r4, [r3, #0]
    1d0e:	b934      	cbnz	r4, 1d1e <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
    1d10:	2000      	movs	r0, #0
	}

	return length;
}
    1d12:	b005      	add	sp, #20
    1d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    1d16:	4918      	ldr	r1, [pc, #96]	; (1d78 <timestamp_print+0x78>)
    1d18:	f7ff ffe0 	bl	1cdc <print_formatted>
    1d1c:	e7f9      	b.n	1d12 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    1d1e:	4b17      	ldr	r3, [pc, #92]	; (1d7c <timestamp_print+0x7c>)
    1d20:	6819      	ldr	r1, [r3, #0]
    1d22:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    1d26:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
    1d2a:	4a15      	ldr	r2, [pc, #84]	; (1d80 <timestamp_print+0x80>)
    1d2c:	fba2 3205 	umull	r3, r2, r2, r5
    1d30:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    1d32:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    1d36:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
    1d3a:	4b12      	ldr	r3, [pc, #72]	; (1d84 <timestamp_print+0x84>)
    1d3c:	fba3 7306 	umull	r7, r3, r3, r6
    1d40:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    1d42:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
    1d46:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    1d4a:	fb05 f101 	mul.w	r1, r5, r1
    1d4e:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1d52:	fb07 1114 	mls	r1, r7, r4, r1
    1d56:	fb05 f101 	mul.w	r1, r5, r1
    1d5a:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
    1d5e:	9402      	str	r4, [sp, #8]
    1d60:	9701      	str	r7, [sp, #4]
    1d62:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    1d66:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
    1d6a:	9100      	str	r1, [sp, #0]
    1d6c:	4906      	ldr	r1, [pc, #24]	; (1d88 <timestamp_print+0x88>)
    1d6e:	f7ff ffb5 	bl	1cdc <print_formatted>
    1d72:	e7ce      	b.n	1d12 <timestamp_print+0x12>
    1d74:	20000494 	.word	0x20000494
    1d78:	00009494 	.word	0x00009494
    1d7c:	20000498 	.word	0x20000498
    1d80:	91a2b3c5 	.word	0x91a2b3c5
    1d84:	88888889 	.word	0x88888889
    1d88:	000094a0 	.word	0x000094a0

00001d8c <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    1d8c:	b161      	cbz	r1, 1da8 <color_print+0x1c>
{
    1d8e:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1d90:	b12a      	cbz	r2, 1d9e <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    1d92:	4a06      	ldr	r2, [pc, #24]	; (1dac <color_print+0x20>)
    1d94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1d98:	b912      	cbnz	r2, 1da0 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1d9a:	4a05      	ldr	r2, [pc, #20]	; (1db0 <color_print+0x24>)
    1d9c:	e000      	b.n	1da0 <color_print+0x14>
    1d9e:	4a04      	ldr	r2, [pc, #16]	; (1db0 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    1da0:	4904      	ldr	r1, [pc, #16]	; (1db4 <color_print+0x28>)
    1da2:	f7ff ff9b 	bl	1cdc <print_formatted>
	}
}
    1da6:	bd08      	pop	{r3, pc}
    1da8:	4770      	bx	lr
    1daa:	bf00      	nop
    1dac:	00009518 	.word	0x00009518
    1db0:	000094bc 	.word	0x000094bc
    1db4:	000094c4 	.word	0x000094c4

00001db8 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1db8:	f011 0f10 	tst.w	r1, #16
    1dbc:	d10b      	bne.n	1dd6 <newline_print+0x1e>
{
    1dbe:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1dc0:	f011 0f20 	tst.w	r1, #32
    1dc4:	d003      	beq.n	1dce <newline_print+0x16>
		print_formatted(ctx, "\n");
    1dc6:	4904      	ldr	r1, [pc, #16]	; (1dd8 <newline_print+0x20>)
    1dc8:	f7ff ff88 	bl	1cdc <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    1dcc:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    1dce:	4903      	ldr	r1, [pc, #12]	; (1ddc <newline_print+0x24>)
    1dd0:	f7ff ff84 	bl	1cdc <print_formatted>
    1dd4:	e7fa      	b.n	1dcc <newline_print+0x14>
    1dd6:	4770      	bx	lr
    1dd8:	00009324 	.word	0x00009324
    1ddc:	00009f88 	.word	0x00009f88

00001de0 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    1de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1de4:	4605      	mov	r5, r0
    1de6:	460f      	mov	r7, r1
    1de8:	4616      	mov	r6, r2
    1dea:	4698      	mov	r8, r3
	newline_print(output, flags);
    1dec:	9906      	ldr	r1, [sp, #24]
    1dee:	f7ff ffe3 	bl	1db8 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    1df2:	2400      	movs	r4, #0
    1df4:	4544      	cmp	r4, r8
    1df6:	da05      	bge.n	1e04 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    1df8:	4923      	ldr	r1, [pc, #140]	; (1e88 <hexdump_line_print+0xa8>)
    1dfa:	4628      	mov	r0, r5
    1dfc:	f7ff ff6e 	bl	1cdc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1e00:	3401      	adds	r4, #1
    1e02:	e7f7      	b.n	1df4 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1e04:	2400      	movs	r4, #0
    1e06:	e009      	b.n	1e1c <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    1e08:	491f      	ldr	r1, [pc, #124]	; (1e88 <hexdump_line_print+0xa8>)
    1e0a:	4628      	mov	r0, r5
    1e0c:	f7ff ff66 	bl	1cdc <print_formatted>
    1e10:	e00b      	b.n	1e2a <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    1e12:	491e      	ldr	r1, [pc, #120]	; (1e8c <hexdump_line_print+0xac>)
    1e14:	4628      	mov	r0, r5
    1e16:	f7ff ff61 	bl	1cdc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1e1a:	3401      	adds	r4, #1
    1e1c:	2c0f      	cmp	r4, #15
    1e1e:	dc0c      	bgt.n	1e3a <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    1e20:	2c00      	cmp	r4, #0
    1e22:	dd02      	ble.n	1e2a <hexdump_line_print+0x4a>
    1e24:	f014 0f07 	tst.w	r4, #7
    1e28:	d0ee      	beq.n	1e08 <hexdump_line_print+0x28>
		if (i < length) {
    1e2a:	42b4      	cmp	r4, r6
    1e2c:	d2f1      	bcs.n	1e12 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    1e2e:	5d3a      	ldrb	r2, [r7, r4]
    1e30:	4917      	ldr	r1, [pc, #92]	; (1e90 <hexdump_line_print+0xb0>)
    1e32:	4628      	mov	r0, r5
    1e34:	f7ff ff52 	bl	1cdc <print_formatted>
    1e38:	e7ef      	b.n	1e1a <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    1e3a:	4916      	ldr	r1, [pc, #88]	; (1e94 <hexdump_line_print+0xb4>)
    1e3c:	4628      	mov	r0, r5
    1e3e:	f7ff ff4d 	bl	1cdc <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1e42:	2400      	movs	r4, #0
    1e44:	e009      	b.n	1e5a <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    1e46:	4910      	ldr	r1, [pc, #64]	; (1e88 <hexdump_line_print+0xa8>)
    1e48:	4628      	mov	r0, r5
    1e4a:	f7ff ff47 	bl	1cdc <print_formatted>
    1e4e:	e00b      	b.n	1e68 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    1e50:	4911      	ldr	r1, [pc, #68]	; (1e98 <hexdump_line_print+0xb8>)
    1e52:	4628      	mov	r0, r5
    1e54:	f7ff ff42 	bl	1cdc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1e58:	3401      	adds	r4, #1
    1e5a:	2c0f      	cmp	r4, #15
    1e5c:	dc12      	bgt.n	1e84 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    1e5e:	2c00      	cmp	r4, #0
    1e60:	dd02      	ble.n	1e68 <hexdump_line_print+0x88>
    1e62:	f014 0f07 	tst.w	r4, #7
    1e66:	d0ee      	beq.n	1e46 <hexdump_line_print+0x66>
		if (i < length) {
    1e68:	42b4      	cmp	r4, r6
    1e6a:	d206      	bcs.n	1e7a <hexdump_line_print+0x9a>
			char c = (char)data[i];
    1e6c:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    1e6e:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    1e72:	2b5e      	cmp	r3, #94	; 0x5e
    1e74:	d9ec      	bls.n	1e50 <hexdump_line_print+0x70>
    1e76:	222e      	movs	r2, #46	; 0x2e
    1e78:	e7ea      	b.n	1e50 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    1e7a:	4903      	ldr	r1, [pc, #12]	; (1e88 <hexdump_line_print+0xa8>)
    1e7c:	4628      	mov	r0, r5
    1e7e:	f7ff ff2d 	bl	1cdc <print_formatted>
    1e82:	e7e9      	b.n	1e58 <hexdump_line_print+0x78>
		}
	}
}
    1e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e88:	000094ec 	.word	0x000094ec
    1e8c:	000094d0 	.word	0x000094d0
    1e90:	000094c8 	.word	0x000094c8
    1e94:	000094d4 	.word	0x000094d4
    1e98:	000094d8 	.word	0x000094d8

00001e9c <ids_print>:
{
    1e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ea0:	4680      	mov	r8, r0
    1ea2:	4616      	mov	r6, r2
    1ea4:	461d      	mov	r5, r3
    1ea6:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    1eaa:	b959      	cbnz	r1, 1ec4 <ids_print+0x28>
	int total = 0;
    1eac:	2400      	movs	r4, #0
	if (source_id >= 0) {
    1eae:	2f00      	cmp	r7, #0
    1eb0:	db1c      	blt.n	1eec <ids_print+0x50>
		total += print_formatted(output,
    1eb2:	b186      	cbz	r6, 1ed6 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1eb4:	2301      	movs	r3, #1
    1eb6:	9a07      	ldr	r2, [sp, #28]
    1eb8:	4093      	lsls	r3, r2
				(func_on &&
    1eba:	f013 0f10 	tst.w	r3, #16
    1ebe:	d118      	bne.n	1ef2 <ids_print+0x56>
		total += print_formatted(output,
    1ec0:	4e0d      	ldr	r6, [pc, #52]	; (1ef8 <ids_print+0x5c>)
    1ec2:	e009      	b.n	1ed8 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    1ec4:	4b0d      	ldr	r3, [pc, #52]	; (1efc <ids_print+0x60>)
    1ec6:	9a07      	ldr	r2, [sp, #28]
    1ec8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1ecc:	490c      	ldr	r1, [pc, #48]	; (1f00 <ids_print+0x64>)
    1ece:	f7ff ff05 	bl	1cdc <print_formatted>
    1ed2:	4604      	mov	r4, r0
    1ed4:	e7eb      	b.n	1eae <ids_print+0x12>
		total += print_formatted(output,
    1ed6:	4e08      	ldr	r6, [pc, #32]	; (1ef8 <ids_print+0x5c>)
    1ed8:	4639      	mov	r1, r7
    1eda:	4628      	mov	r0, r5
    1edc:	f7ff fe4c 	bl	1b78 <log_source_name_get>
    1ee0:	4602      	mov	r2, r0
    1ee2:	4631      	mov	r1, r6
    1ee4:	4640      	mov	r0, r8
    1ee6:	f7ff fef9 	bl	1cdc <print_formatted>
    1eea:	4404      	add	r4, r0
}
    1eec:	4620      	mov	r0, r4
    1eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    1ef2:	4e04      	ldr	r6, [pc, #16]	; (1f04 <ids_print+0x68>)
    1ef4:	e7f0      	b.n	1ed8 <ids_print+0x3c>
    1ef6:	bf00      	nop
    1ef8:	000094dc 	.word	0x000094dc
    1efc:	00009554 	.word	0x00009554
    1f00:	000094e8 	.word	0x000094e8
    1f04:	000094e4 	.word	0x000094e4

00001f08 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    1f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f0c:	b085      	sub	sp, #20
    1f0e:	4605      	mov	r5, r0
    1f10:	460c      	mov	r4, r1
    1f12:	4616      	mov	r6, r2
    1f14:	9303      	str	r3, [sp, #12]
    1f16:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1f1a:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1f1e:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1f22:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    1f26:	f005 fd2d 	bl	7984 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    1f2a:	b1e8      	cbz	r0, 1f68 <prefix_print+0x60>
    1f2c:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    1f2e:	4913      	ldr	r1, [pc, #76]	; (1f7c <prefix_print+0x74>)
    1f30:	4628      	mov	r0, r5
    1f32:	f7ff fed3 	bl	1cdc <print_formatted>
    1f36:	4607      	mov	r7, r0
	}

	if (stamp) {
    1f38:	f1bb 0f00 	cmp.w	fp, #0
    1f3c:	d116      	bne.n	1f6c <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    1f3e:	4642      	mov	r2, r8
    1f40:	4651      	mov	r1, sl
    1f42:	4628      	mov	r0, r5
    1f44:	f005 fddf 	bl	7b06 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    1f48:	f8cd 8004 	str.w	r8, [sp, #4]
    1f4c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    1f50:	9300      	str	r3, [sp, #0]
    1f52:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    1f56:	4632      	mov	r2, r6
    1f58:	4649      	mov	r1, r9
    1f5a:	4628      	mov	r0, r5
    1f5c:	f7ff ff9e 	bl	1e9c <ids_print>
			domain_id, source_id, level);


	return length;
}
    1f60:	4438      	add	r0, r7
    1f62:	b005      	add	sp, #20
    1f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    1f68:	2700      	movs	r7, #0
    1f6a:	e7e5      	b.n	1f38 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    1f6c:	9a03      	ldr	r2, [sp, #12]
    1f6e:	4621      	mov	r1, r4
    1f70:	4628      	mov	r0, r5
    1f72:	f7ff fec5 	bl	1d00 <timestamp_print>
    1f76:	4407      	add	r7, r0
    1f78:	e7e1      	b.n	1f3e <prefix_print+0x36>
    1f7a:	bf00      	nop
    1f7c:	000094f0 	.word	0x000094f0

00001f80 <hexdump_print>:
{
    1f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1f84:	b089      	sub	sp, #36	; 0x24
    1f86:	4607      	mov	r7, r0
    1f88:	460e      	mov	r6, r1
    1f8a:	4691      	mov	r9, r2
    1f8c:	4698      	mov	r8, r3
	print_formatted(output, "%s", log_msg_str_get(msg));
    1f8e:	f005 fd90 	bl	7ab2 <log_msg_str_get>
    1f92:	4602      	mov	r2, r0
    1f94:	490e      	ldr	r1, [pc, #56]	; (1fd0 <hexdump_print+0x50>)
    1f96:	4630      	mov	r0, r6
    1f98:	f7ff fea0 	bl	1cdc <print_formatted>
	uint32_t offset = 0U;
    1f9c:	2400      	movs	r4, #0
		length = sizeof(buf);
    1f9e:	2510      	movs	r5, #16
    1fa0:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    1fa2:	4623      	mov	r3, r4
    1fa4:	aa03      	add	r2, sp, #12
    1fa6:	eb0d 0105 	add.w	r1, sp, r5
    1faa:	4638      	mov	r0, r7
    1fac:	f005 fd96 	bl	7adc <log_msg_hexdump_data_get>
		if (length) {
    1fb0:	9a03      	ldr	r2, [sp, #12]
    1fb2:	b152      	cbz	r2, 1fca <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
    1fb4:	f8cd 8000 	str.w	r8, [sp]
    1fb8:	464b      	mov	r3, r9
    1fba:	eb0d 0105 	add.w	r1, sp, r5
    1fbe:	4630      	mov	r0, r6
    1fc0:	f7ff ff0e 	bl	1de0 <hexdump_line_print>
			offset += length;
    1fc4:	9d03      	ldr	r5, [sp, #12]
    1fc6:	442c      	add	r4, r5
		length = sizeof(buf);
    1fc8:	e7e9      	b.n	1f9e <hexdump_print+0x1e>
}
    1fca:	b009      	add	sp, #36	; 0x24
    1fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1fd0:	000094c4 	.word	0x000094c4

00001fd4 <raw_string_print>:
{
    1fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fd6:	b083      	sub	sp, #12
    1fd8:	4606      	mov	r6, r0
    1fda:	460c      	mov	r4, r1
	bool eol = false;
    1fdc:	2700      	movs	r7, #0
	size_t offset = 0;
    1fde:	463d      	mov	r5, r7
    1fe0:	e00d      	b.n	1ffe <raw_string_print+0x2a>
			eol = (output->buf[length - 1] == '\n');
    1fe2:	68a2      	ldr	r2, [r4, #8]
    1fe4:	4413      	add	r3, r2
    1fe6:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    1fea:	2f0a      	cmp	r7, #10
    1fec:	bf14      	ite	ne
    1fee:	2700      	movne	r7, #0
    1ff0:	2701      	moveq	r7, #1
		log_output_flush(output);
    1ff2:	4620      	mov	r0, r4
    1ff4:	f005 fefa 	bl	7dec <log_output_flush>
		offset += length;
    1ff8:	9b01      	ldr	r3, [sp, #4]
    1ffa:	441d      	add	r5, r3
	} while (length > 0);
    1ffc:	b173      	cbz	r3, 201c <raw_string_print+0x48>
		length = output->size;
    1ffe:	68e3      	ldr	r3, [r4, #12]
    2000:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    2002:	462b      	mov	r3, r5
    2004:	aa01      	add	r2, sp, #4
    2006:	68a1      	ldr	r1, [r4, #8]
    2008:	4630      	mov	r0, r6
    200a:	f005 fd67 	bl	7adc <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    200e:	6863      	ldr	r3, [r4, #4]
    2010:	9a01      	ldr	r2, [sp, #4]
    2012:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    2014:	9b01      	ldr	r3, [sp, #4]
    2016:	2b00      	cmp	r3, #0
    2018:	d0eb      	beq.n	1ff2 <raw_string_print+0x1e>
    201a:	e7e2      	b.n	1fe2 <raw_string_print+0xe>
	if (eol) {
    201c:	b90f      	cbnz	r7, 2022 <raw_string_print+0x4e>
}
    201e:	b003      	add	sp, #12
    2020:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
    2022:	4902      	ldr	r1, [pc, #8]	; (202c <raw_string_print+0x58>)
    2024:	4620      	mov	r0, r4
    2026:	f7ff fe59 	bl	1cdc <print_formatted>
}
    202a:	e7f8      	b.n	201e <raw_string_print+0x4a>
    202c:	000094f4 	.word	0x000094f4

00002030 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    2030:	b570      	push	{r4, r5, r6, lr}
    2032:	b082      	sub	sp, #8
    2034:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    2036:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2038:	f242 730f 	movw	r3, #9999	; 0x270f
    203c:	428b      	cmp	r3, r1
    203e:	bf28      	it	cs
    2040:	460b      	movcs	r3, r1
    2042:	4a0e      	ldr	r2, [pc, #56]	; (207c <log_output_dropped_process+0x4c>)
    2044:	2105      	movs	r1, #5
    2046:	4668      	mov	r0, sp
    2048:	f005 fa5a 	bl	7500 <snprintk>
    204c:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    204e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2050:	685b      	ldr	r3, [r3, #4]
    2052:	220b      	movs	r2, #11
    2054:	490a      	ldr	r1, [pc, #40]	; (2080 <log_output_dropped_process+0x50>)
    2056:	4628      	mov	r0, r5
    2058:	f005 fd48 	bl	7aec <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    205c:	6863      	ldr	r3, [r4, #4]
    205e:	685b      	ldr	r3, [r3, #4]
    2060:	4632      	mov	r2, r6
    2062:	4669      	mov	r1, sp
    2064:	4628      	mov	r0, r5
    2066:	f005 fd41 	bl	7aec <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    206a:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    206c:	685b      	ldr	r3, [r3, #4]
    206e:	221b      	movs	r2, #27
    2070:	4904      	ldr	r1, [pc, #16]	; (2084 <log_output_dropped_process+0x54>)
    2072:	4628      	mov	r0, r5
    2074:	f005 fd3a 	bl	7aec <buffer_write>
}
    2078:	b002      	add	sp, #8
    207a:	bd70      	pop	{r4, r5, r6, pc}
    207c:	000092cc 	.word	0x000092cc
    2080:	00009548 	.word	0x00009548
    2084:	0000952c 	.word	0x0000952c

00002088 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    2088:	4b07      	ldr	r3, [pc, #28]	; (20a8 <log_output_timestamp_freq_set+0x20>)
    208a:	2201      	movs	r2, #1
    208c:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    208e:	4b07      	ldr	r3, [pc, #28]	; (20ac <log_output_timestamp_freq_set+0x24>)
    2090:	4298      	cmp	r0, r3
    2092:	d905      	bls.n	20a0 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
    2094:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2096:	4a04      	ldr	r2, [pc, #16]	; (20a8 <log_output_timestamp_freq_set+0x20>)
    2098:	6813      	ldr	r3, [r2, #0]
    209a:	005b      	lsls	r3, r3, #1
    209c:	6013      	str	r3, [r2, #0]
    209e:	e7f6      	b.n	208e <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
    20a0:	4b03      	ldr	r3, [pc, #12]	; (20b0 <log_output_timestamp_freq_set+0x28>)
    20a2:	6018      	str	r0, [r3, #0]
}
    20a4:	4770      	bx	lr
    20a6:	bf00      	nop
    20a8:	20000498 	.word	0x20000498
    20ac:	000f4240 	.word	0x000f4240
    20b0:	20000494 	.word	0x20000494

000020b4 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    20b4:	b570      	push	{r4, r5, r6, lr}
    20b6:	4606      	mov	r6, r0
    20b8:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    20ba:	2400      	movs	r4, #0
    20bc:	42ac      	cmp	r4, r5
    20be:	d207      	bcs.n	20d0 <char_out+0x1c>
			uart_poll_out(uart_dev, data[i]);
    20c0:	4b04      	ldr	r3, [pc, #16]	; (20d4 <char_out+0x20>)
    20c2:	6818      	ldr	r0, [r3, #0]
    20c4:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
    20c6:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    20c8:	685b      	ldr	r3, [r3, #4]
    20ca:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    20cc:	3401      	adds	r4, #1
    20ce:	e7f5      	b.n	20bc <char_out+0x8>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    20d0:	4628      	mov	r0, r5
    20d2:	bd70      	pop	{r4, r5, r6, pc}
    20d4:	200004b0 	.word	0x200004b0

000020d8 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    20d8:	4b01      	ldr	r3, [pc, #4]	; (20e0 <log_backend_uart_init+0x8>)
    20da:	4a02      	ldr	r2, [pc, #8]	; (20e4 <log_backend_uart_init+0xc>)
    20dc:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    20de:	4770      	bx	lr
    20e0:	200004b0 	.word	0x200004b0
    20e4:	00008fd4 	.word	0x00008fd4

000020e8 <panic>:

static void panic(struct log_backend const *const backend)
{
    20e8:	b508      	push	{r3, lr}
	in_panic = true;
    20ea:	4b03      	ldr	r3, [pc, #12]	; (20f8 <panic+0x10>)
    20ec:	2201      	movs	r2, #1
    20ee:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    20f0:	4802      	ldr	r0, [pc, #8]	; (20fc <panic+0x14>)
    20f2:	f005 fe7b 	bl	7dec <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    20f6:	bd08      	pop	{r3, pc}
    20f8:	20000fe2 	.word	0x20000fe2
    20fc:	000095a4 	.word	0x000095a4

00002100 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    2100:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    2102:	4802      	ldr	r0, [pc, #8]	; (210c <dropped+0xc>)
    2104:	f7ff ff94 	bl	2030 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
    2108:	bd08      	pop	{r3, pc}
    210a:	bf00      	nop
    210c:	000095a4 	.word	0x000095a4

00002110 <put>:
{
    2110:	b510      	push	{r4, lr}
    2112:	460c      	mov	r4, r1
	log_msg_get(msg);
    2114:	4608      	mov	r0, r1
    2116:	f005 fcaa 	bl	7a6e <log_msg_get>
	log_output_msg_process(output, msg, flags);
    211a:	220f      	movs	r2, #15
    211c:	4621      	mov	r1, r4
    211e:	4803      	ldr	r0, [pc, #12]	; (212c <put+0x1c>)
    2120:	f005 fe8d 	bl	7e3e <log_output_msg_process>
	log_msg_put(msg);
    2124:	4620      	mov	r0, r4
    2126:	f005 fcc6 	bl	7ab6 <log_msg_put>
}
    212a:	bd10      	pop	{r4, pc}
    212c:	000095a4 	.word	0x000095a4

00002130 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2130:	4b01      	ldr	r3, [pc, #4]	; (2138 <log_backend_rtt_init+0x8>)
    2132:	2201      	movs	r2, #1
    2134:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    2136:	4770      	bx	lr
    2138:	20000fe3 	.word	0x20000fe3

0000213c <on_failed_write>:
{
    213c:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    213e:	b918      	cbnz	r0, 2148 <on_failed_write+0xc>
		host_present = false;
    2140:	4b08      	ldr	r3, [pc, #32]	; (2164 <on_failed_write+0x28>)
    2142:	2200      	movs	r2, #0
    2144:	701a      	strb	r2, [r3, #0]
}
    2146:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    2148:	4b07      	ldr	r3, [pc, #28]	; (2168 <on_failed_write+0x2c>)
    214a:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
    214c:	b123      	cbz	r3, 2158 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    214e:	f241 3088 	movw	r0, #5000	; 0x1388
    2152:	f006 fe9e 	bl	8e92 <z_impl_k_busy_wait>
}
    2156:	e7f6      	b.n	2146 <on_failed_write+0xa>
	return z_impl_k_sleep(timeout);
    2158:	20a4      	movs	r0, #164	; 0xa4
    215a:	2100      	movs	r1, #0
    215c:	f004 fcf4 	bl	6b48 <z_impl_k_sleep>
}
    2160:	e7f1      	b.n	2146 <on_failed_write+0xa>
    2162:	bf00      	nop
    2164:	20000fe3 	.word	0x20000fe3
    2168:	20000fe4 	.word	0x20000fe4

0000216c <on_write>:
{
    216c:	b538      	push	{r3, r4, r5, lr}
    216e:	4604      	mov	r4, r0
	host_present = true;
    2170:	4b0a      	ldr	r3, [pc, #40]	; (219c <on_write+0x30>)
    2172:	2201      	movs	r2, #1
    2174:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    2176:	4b0a      	ldr	r3, [pc, #40]	; (21a0 <on_write+0x34>)
    2178:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    217a:	b903      	cbnz	r3, 217e <on_write+0x12>
}
    217c:	bd38      	pop	{r3, r4, r5, pc}
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    217e:	2000      	movs	r0, #0
    2180:	f003 fcd6 	bl	5b30 <SEGGER_RTT_HasDataUp>
    2184:	2800      	cmp	r0, #0
    2186:	d0f9      	beq.n	217c <on_write+0x10>
    2188:	4b04      	ldr	r3, [pc, #16]	; (219c <on_write+0x30>)
    218a:	781b      	ldrb	r3, [r3, #0]
    218c:	2b00      	cmp	r3, #0
    218e:	d0f5      	beq.n	217c <on_write+0x10>
			on_failed_write(retry_cnt--);
    2190:	1e65      	subs	r5, r4, #1
    2192:	4620      	mov	r0, r4
    2194:	f7ff ffd2 	bl	213c <on_failed_write>
    2198:	462c      	mov	r4, r5
    219a:	e7f0      	b.n	217e <on_write+0x12>
    219c:	20000fe3 	.word	0x20000fe3
    21a0:	20000fe4 	.word	0x20000fe4

000021a4 <data_out_block_mode>:
{
    21a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21a8:	4606      	mov	r6, r0
    21aa:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    21ac:	2704      	movs	r7, #4
    21ae:	e00d      	b.n	21cc <data_out_block_mode+0x28>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    21b0:	462a      	mov	r2, r5
    21b2:	4631      	mov	r1, r6
    21b4:	2000      	movs	r0, #0
    21b6:	f003 fc57 	bl	5a68 <SEGGER_RTT_WriteSkipNoLock>
    21ba:	4604      	mov	r4, r0
    21bc:	e01c      	b.n	21f8 <data_out_block_mode+0x54>
			on_write(retry_cnt);
    21be:	4638      	mov	r0, r7
    21c0:	f7ff ffd4 	bl	216c <on_write>
	} while ((ret == 0) && host_present);
    21c4:	bb1c      	cbnz	r4, 220e <data_out_block_mode+0x6a>
    21c6:	4b16      	ldr	r3, [pc, #88]	; (2220 <data_out_block_mode+0x7c>)
    21c8:	781b      	ldrb	r3, [r3, #0]
    21ca:	b303      	cbz	r3, 220e <data_out_block_mode+0x6a>
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    21cc:	4b15      	ldr	r3, [pc, #84]	; (2224 <data_out_block_mode+0x80>)
    21ce:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
    21d0:	2b00      	cmp	r3, #0
    21d2:	d1ed      	bne.n	21b0 <data_out_block_mode+0xc>
	return z_impl_k_mutex_lock(mutex, timeout);
    21d4:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2228 <data_out_block_mode+0x84>
    21d8:	f04f 32ff 	mov.w	r2, #4294967295
    21dc:	f04f 33ff 	mov.w	r3, #4294967295
    21e0:	4640      	mov	r0, r8
    21e2:	f004 f805 	bl	61f0 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    21e6:	462a      	mov	r2, r5
    21e8:	4631      	mov	r1, r6
    21ea:	2000      	movs	r0, #0
    21ec:	f003 fc3c 	bl	5a68 <SEGGER_RTT_WriteSkipNoLock>
    21f0:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    21f2:	4640      	mov	r0, r8
    21f4:	f004 f886 	bl	6304 <z_impl_k_mutex_unlock>
		if (ret) {
    21f8:	2c00      	cmp	r4, #0
    21fa:	d1e0      	bne.n	21be <data_out_block_mode+0x1a>
		} else if (host_present) {
    21fc:	4b08      	ldr	r3, [pc, #32]	; (2220 <data_out_block_mode+0x7c>)
    21fe:	781b      	ldrb	r3, [r3, #0]
    2200:	2b00      	cmp	r3, #0
    2202:	d0df      	beq.n	21c4 <data_out_block_mode+0x20>
			retry_cnt--;
    2204:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    2206:	4638      	mov	r0, r7
    2208:	f7ff ff98 	bl	213c <on_failed_write>
    220c:	e7da      	b.n	21c4 <data_out_block_mode+0x20>
	return ((ret == 0) && host_present) ? 0 : length;
    220e:	b914      	cbnz	r4, 2216 <data_out_block_mode+0x72>
    2210:	4b03      	ldr	r3, [pc, #12]	; (2220 <data_out_block_mode+0x7c>)
    2212:	781b      	ldrb	r3, [r3, #0]
    2214:	b903      	cbnz	r3, 2218 <data_out_block_mode+0x74>
    2216:	462c      	mov	r4, r5
}
    2218:	4620      	mov	r0, r4
    221a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    221e:	bf00      	nop
    2220:	20000fe3 	.word	0x20000fe3
    2224:	20000fe4 	.word	0x20000fe4
    2228:	20000198 	.word	0x20000198

0000222c <panic>:

static void panic(struct log_backend const *const backend)
{
    222c:	b508      	push	{r3, lr}
	panic_mode = true;
    222e:	4b03      	ldr	r3, [pc, #12]	; (223c <panic+0x10>)
    2230:	2201      	movs	r2, #1
    2232:	701a      	strb	r2, [r3, #0]
	log_output_flush(output);
    2234:	4802      	ldr	r0, [pc, #8]	; (2240 <panic+0x14>)
    2236:	f005 fdd9 	bl	7dec <log_output_flush>
	log_backend_std_panic(&log_output_rtt);
}
    223a:	bd08      	pop	{r3, pc}
    223c:	20000fe4 	.word	0x20000fe4
    2240:	000095e0 	.word	0x000095e0

00002244 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    2244:	b508      	push	{r3, lr}
	log_output_dropped_process(output, cnt);
    2246:	4802      	ldr	r0, [pc, #8]	; (2250 <dropped+0xc>)
    2248:	f7ff fef2 	bl	2030 <log_output_dropped_process>
	ARG_UNUSED(backend);

	log_backend_std_dropped(&log_output_rtt, cnt);
}
    224c:	bd08      	pop	{r3, pc}
    224e:	bf00      	nop
    2250:	000095e0 	.word	0x000095e0

00002254 <put>:
{
    2254:	b510      	push	{r4, lr}
    2256:	460c      	mov	r4, r1
	log_msg_get(msg);
    2258:	4608      	mov	r0, r1
    225a:	f005 fc08 	bl	7a6e <log_msg_get>
	log_output_msg_process(output, msg, flags);
    225e:	220f      	movs	r2, #15
    2260:	4621      	mov	r1, r4
    2262:	4803      	ldr	r0, [pc, #12]	; (2270 <put+0x1c>)
    2264:	f005 fdeb 	bl	7e3e <log_output_msg_process>
	log_msg_put(msg);
    2268:	4620      	mov	r0, r4
    226a:	f005 fc24 	bl	7ab6 <log_msg_put>
}
    226e:	bd10      	pop	{r4, pc}
    2270:	000095e0 	.word	0x000095e0

00002274 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    2274:	b570      	push	{r4, r5, r6, lr}
    2276:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
    2278:	4b2c      	ldr	r3, [pc, #176]	; (232c <pm_system_resume+0xb8>)
    227a:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    227c:	f004 031f 	and.w	r3, r4, #31
    2280:	2201      	movs	r2, #1
    2282:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2284:	0961      	lsrs	r1, r4, #5
    2286:	4b2a      	ldr	r3, [pc, #168]	; (2330 <pm_system_resume+0xbc>)
    2288:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    228c:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    228e:	f3bf 8f5b 	dmb	ish
    2292:	e853 1f00 	ldrex	r1, [r3]
    2296:	ea01 0500 	and.w	r5, r1, r0
    229a:	e843 5600 	strex	r6, r5, [r3]
    229e:	2e00      	cmp	r6, #0
    22a0:	d1f7      	bne.n	2292 <pm_system_resume+0x1e>
    22a2:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    22a6:	420a      	tst	r2, r1
    22a8:	d03d      	beq.n	2326 <pm_system_resume+0xb2>
		exit_pos_ops(z_power_states[id]);
    22aa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    22ae:	009a      	lsls	r2, r3, #2
    22b0:	4b20      	ldr	r3, [pc, #128]	; (2334 <pm_system_resume+0xc0>)
    22b2:	4413      	add	r3, r2
    22b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    22b8:	ab04      	add	r3, sp, #16
    22ba:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    22be:	4b1e      	ldr	r3, [pc, #120]	; (2338 <pm_system_resume+0xc4>)
    22c0:	b163      	cbz	r3, 22dc <pm_system_resume+0x68>
		pm_power_state_exit_post_ops(info);
    22c2:	f005 ff17 	bl	80f4 <pm_power_state_exit_post_ops>
	__asm__ volatile(
    22c6:	f04f 0320 	mov.w	r3, #32
    22ca:	f3ef 8611 	mrs	r6, BASEPRI
    22ce:	f383 8812 	msr	BASEPRI_MAX, r3
    22d2:	f3bf 8f6f 	isb	sy
    22d6:	4b19      	ldr	r3, [pc, #100]	; (233c <pm_system_resume+0xc8>)
    22d8:	681d      	ldr	r5, [r3, #0]
    22da:	e00a      	b.n	22f2 <pm_system_resume+0x7e>
	__asm__ volatile(
    22dc:	2300      	movs	r3, #0
    22de:	f383 8811 	msr	BASEPRI, r3
    22e2:	f3bf 8f6f 	isb	sy
}
    22e6:	e7ee      	b.n	22c6 <pm_system_resume+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    22e8:	462b      	mov	r3, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    22ea:	b10d      	cbz	r5, 22f0 <pm_system_resume+0x7c>
	return node->next;
    22ec:	682b      	ldr	r3, [r5, #0]
    22ee:	b16b      	cbz	r3, 230c <pm_system_resume+0x98>
{
    22f0:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    22f2:	b15d      	cbz	r5, 230c <pm_system_resume+0x98>
			callback = notifier->state_exit;
    22f4:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
    22f6:	2a00      	cmp	r2, #0
    22f8:	d0f6      	beq.n	22e8 <pm_system_resume+0x74>
			callback(z_power_states[_current_cpu->id].state);
    22fa:	4b0c      	ldr	r3, [pc, #48]	; (232c <pm_system_resume+0xb8>)
    22fc:	7d1b      	ldrb	r3, [r3, #20]
    22fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2302:	0099      	lsls	r1, r3, #2
    2304:	4b0b      	ldr	r3, [pc, #44]	; (2334 <pm_system_resume+0xc0>)
    2306:	5c58      	ldrb	r0, [r3, r1]
    2308:	4790      	blx	r2
    230a:	e7ed      	b.n	22e8 <pm_system_resume+0x74>
	__asm__ volatile(
    230c:	f386 8811 	msr	BASEPRI, r6
    2310:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2314:	4807      	ldr	r0, [pc, #28]	; (2334 <pm_system_resume+0xc0>)
    2316:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    231a:	00a2      	lsls	r2, r4, #2
    231c:	1881      	adds	r1, r0, r2
    231e:	2300      	movs	r3, #0
    2320:	5083      	str	r3, [r0, r2]
    2322:	604b      	str	r3, [r1, #4]
    2324:	608b      	str	r3, [r1, #8]
			0, 0};
	}
}
    2326:	b004      	add	sp, #16
    2328:	bd70      	pop	{r4, r5, r6, pc}
    232a:	bf00      	nop
    232c:	20000f8c 	.word	0x20000f8c
    2330:	200004e4 	.word	0x200004e4
    2334:	200004e8 	.word	0x200004e8
    2338:	000080f5 	.word	0x000080f5
    233c:	200004dc 	.word	0x200004dc

00002340 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    2340:	b5f0      	push	{r4, r5, r6, r7, lr}
    2342:	b089      	sub	sp, #36	; 0x24
    2344:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2346:	4b55      	ldr	r3, [pc, #340]	; (249c <pm_system_suspend+0x15c>)
    2348:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    234a:	f004 031f 	and.w	r3, r4, #31
    234e:	2201      	movs	r2, #1
    2350:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2352:	0961      	lsrs	r1, r4, #5
    2354:	4b52      	ldr	r3, [pc, #328]	; (24a0 <pm_system_suspend+0x160>)
    2356:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    235a:	f3bf 8f5b 	dmb	ish
    235e:	e853 1f00 	ldrex	r1, [r3]
    2362:	ea41 0002 	orr.w	r0, r1, r2
    2366:	e843 0600 	strex	r6, r0, [r3]
    236a:	2e00      	cmp	r6, #0
    236c:	d1f7      	bne.n	235e <pm_system_suspend+0x1e>
    236e:	f3bf 8f5b 	dmb	ish

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    2372:	420a      	tst	r2, r1
    2374:	d017      	beq.n	23a6 <pm_system_suspend+0x66>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    2376:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    237a:	4a4a      	ldr	r2, [pc, #296]	; (24a4 <pm_system_suspend+0x164>)
    237c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    2380:	2b00      	cmp	r3, #0
    2382:	f000 8088 	beq.w	2496 <pm_system_suspend+0x156>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    2386:	f1b5 3fff 	cmp.w	r5, #4294967295
    238a:	d11c      	bne.n	23c6 <pm_system_suspend+0x86>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    238c:	f004 f8ca 	bl	6524 <k_sched_lock>
	__asm__ volatile(
    2390:	f04f 0320 	mov.w	r3, #32
    2394:	f3ef 8611 	mrs	r6, BASEPRI
    2398:	f383 8812 	msr	BASEPRI_MAX, r3
    239c:	f3bf 8f6f 	isb	sy
	return list->head;
    23a0:	4b41      	ldr	r3, [pc, #260]	; (24a8 <pm_system_suspend+0x168>)
    23a2:	681d      	ldr	r5, [r3, #0]
    23a4:	e02a      	b.n	23fc <pm_system_suspend+0xbc>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    23a6:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    23aa:	4b3e      	ldr	r3, [pc, #248]	; (24a4 <pm_system_suspend+0x164>)
    23ac:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    23b0:	466f      	mov	r7, sp
    23b2:	462a      	mov	r2, r5
    23b4:	4621      	mov	r1, r4
    23b6:	4638      	mov	r0, r7
    23b8:	f005 fd80 	bl	7ebc <pm_policy_next_state>
    23bc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    23c0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    23c4:	e7d7      	b.n	2376 <pm_system_suspend+0x36>
		     k_us_to_ticks_ceil32(
    23c6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    23ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    23ce:	689b      	ldr	r3, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    23d0:	0c59      	lsrs	r1, r3, #17
    23d2:	03d8      	lsls	r0, r3, #15
    23d4:	4e35      	ldr	r6, [pc, #212]	; (24ac <pm_system_suspend+0x16c>)
    23d6:	4a36      	ldr	r2, [pc, #216]	; (24b0 <pm_system_suspend+0x170>)
    23d8:	2300      	movs	r3, #0
    23da:	1980      	adds	r0, r0, r6
    23dc:	f04f 0600 	mov.w	r6, #0
    23e0:	eb46 0101 	adc.w	r1, r6, r1
    23e4:	f7fd fe8c 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    23e8:	2101      	movs	r1, #1
    23ea:	1a28      	subs	r0, r5, r0
    23ec:	f006 fd22 	bl	8e34 <z_set_timeout_expiry>
    23f0:	e7cc      	b.n	238c <pm_system_suspend+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    23f2:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    23f4:	b10d      	cbz	r5, 23fa <pm_system_suspend+0xba>
	return node->next;
    23f6:	682b      	ldr	r3, [r5, #0]
    23f8:	b16b      	cbz	r3, 2416 <pm_system_suspend+0xd6>
{
    23fa:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    23fc:	b15d      	cbz	r5, 2416 <pm_system_suspend+0xd6>
			callback = notifier->state_entry;
    23fe:	686a      	ldr	r2, [r5, #4]
		if (callback) {
    2400:	2a00      	cmp	r2, #0
    2402:	d0f6      	beq.n	23f2 <pm_system_suspend+0xb2>
			callback(z_power_states[_current_cpu->id].state);
    2404:	4b25      	ldr	r3, [pc, #148]	; (249c <pm_system_suspend+0x15c>)
    2406:	7d1b      	ldrb	r3, [r3, #20]
    2408:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    240c:	4925      	ldr	r1, [pc, #148]	; (24a4 <pm_system_suspend+0x164>)
    240e:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    2412:	4790      	blx	r2
    2414:	e7ed      	b.n	23f2 <pm_system_suspend+0xb2>
	__asm__ volatile(
    2416:	f386 8811 	msr	BASEPRI, r6
    241a:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    241e:	f004 031f 	and.w	r3, r4, #31
    2422:	2101      	movs	r1, #1
    2424:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2426:	0963      	lsrs	r3, r4, #5
    2428:	4a22      	ldr	r2, [pc, #136]	; (24b4 <pm_system_suspend+0x174>)
    242a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    242e:	f3bf 8f5b 	dmb	ish
    2432:	e853 2f00 	ldrex	r2, [r3]
    2436:	430a      	orrs	r2, r1
    2438:	e843 2000 	strex	r0, r2, [r3]
    243c:	2800      	cmp	r0, #0
    243e:	d1f8      	bne.n	2432 <pm_system_suspend+0xf2>
    2440:	f3bf 8f5b 	dmb	ish
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    2444:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    2448:	4a16      	ldr	r2, [pc, #88]	; (24a4 <pm_system_suspend+0x164>)
    244a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    244e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2452:	ab08      	add	r3, sp, #32
    2454:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    2458:	4b17      	ldr	r3, [pc, #92]	; (24b8 <pm_system_suspend+0x178>)
    245a:	b10b      	cbz	r3, 2460 <pm_system_suspend+0x120>
		pm_power_state_set(info);
    245c:	f005 fe37 	bl	80ce <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    2460:	f7ff ff08 	bl	2274 <pm_system_resume>
	k_sched_unlock();
    2464:	f004 fa5c 	bl	6920 <k_sched_unlock>
	bool ret = true;
    2468:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    246a:	f004 021f 	and.w	r2, r4, #31
    246e:	2301      	movs	r3, #1
    2470:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2472:	0964      	lsrs	r4, r4, #5
    2474:	4a0a      	ldr	r2, [pc, #40]	; (24a0 <pm_system_suspend+0x160>)
    2476:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    247a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    247c:	f3bf 8f5b 	dmb	ish
    2480:	e854 2f00 	ldrex	r2, [r4]
    2484:	401a      	ands	r2, r3
    2486:	e844 2100 	strex	r1, r2, [r4]
    248a:	2900      	cmp	r1, #0
    248c:	d1f8      	bne.n	2480 <pm_system_suspend+0x140>
    248e:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    2492:	b009      	add	sp, #36	; 0x24
    2494:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = false;
    2496:	2000      	movs	r0, #0
    2498:	e7e7      	b.n	246a <pm_system_suspend+0x12a>
    249a:	bf00      	nop
    249c:	20000f8c 	.word	0x20000f8c
    24a0:	200004f4 	.word	0x200004f4
    24a4:	200004e8 	.word	0x200004e8
    24a8:	200004dc 	.word	0x200004dc
    24ac:	000f423f 	.word	0x000f423f
    24b0:	000f4240 	.word	0x000f4240
    24b4:	200004e4 	.word	0x200004e4
    24b8:	000080cf 	.word	0x000080cf

000024bc <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    24bc:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    24be:	4802      	ldr	r0, [pc, #8]	; (24c8 <nrf_cc3xx_platform_abort_init+0xc>)
    24c0:	f004 fe40 	bl	7144 <nrf_cc3xx_platform_set_abort>
}
    24c4:	bd08      	pop	{r3, pc}
    24c6:	bf00      	nop
    24c8:	000095f4 	.word	0x000095f4

000024cc <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    24cc:	b1d0      	cbz	r0, 2504 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    24ce:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    24d0:	6842      	ldr	r2, [r0, #4]
    24d2:	2a04      	cmp	r2, #4
    24d4:	d005      	beq.n	24e2 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    24d6:	b1d2      	cbz	r2, 250e <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    24d8:	6800      	ldr	r0, [r0, #0]
    24da:	f003 ff13 	bl	6304 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    24de:	2000      	movs	r0, #0
    }
}
    24e0:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    24e2:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    24e4:	2200      	movs	r2, #0
    24e6:	f3bf 8f5b 	dmb	ish
    24ea:	e853 1f00 	ldrex	r1, [r3]
    24ee:	2901      	cmp	r1, #1
    24f0:	d103      	bne.n	24fa <mutex_unlock_platform+0x2e>
    24f2:	e843 2000 	strex	r0, r2, [r3]
    24f6:	2800      	cmp	r0, #0
    24f8:	d1f7      	bne.n	24ea <mutex_unlock_platform+0x1e>
    24fa:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    24fe:	d104      	bne.n	250a <mutex_unlock_platform+0x3e>
    2500:	4610      	mov	r0, r2
    2502:	e7ed      	b.n	24e0 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2504:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    2508:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    250a:	4802      	ldr	r0, [pc, #8]	; (2514 <mutex_unlock_platform+0x48>)
    250c:	e7e8      	b.n	24e0 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    250e:	4802      	ldr	r0, [pc, #8]	; (2518 <mutex_unlock_platform+0x4c>)
    2510:	e7e6      	b.n	24e0 <mutex_unlock_platform+0x14>
    2512:	bf00      	nop
    2514:	ffff8fe9 	.word	0xffff8fe9
    2518:	ffff8fea 	.word	0xffff8fea

0000251c <mutex_lock_platform>:
    if(mutex == NULL) {
    251c:	b320      	cbz	r0, 2568 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    251e:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    2520:	6842      	ldr	r2, [r0, #4]
    2522:	2a04      	cmp	r2, #4
    2524:	d002      	beq.n	252c <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2526:	b992      	cbnz	r2, 254e <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2528:	4811      	ldr	r0, [pc, #68]	; (2570 <mutex_lock_platform+0x54>)
    252a:	e00f      	b.n	254c <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    252c:	6803      	ldr	r3, [r0, #0]
    252e:	2201      	movs	r2, #1
    2530:	f3bf 8f5b 	dmb	ish
    2534:	e853 1f00 	ldrex	r1, [r3]
    2538:	2900      	cmp	r1, #0
    253a:	d103      	bne.n	2544 <mutex_lock_platform+0x28>
    253c:	e843 2000 	strex	r0, r2, [r3]
    2540:	2800      	cmp	r0, #0
    2542:	d1f7      	bne.n	2534 <mutex_lock_platform+0x18>
    2544:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2548:	d10c      	bne.n	2564 <mutex_lock_platform+0x48>
    254a:	2000      	movs	r0, #0
}
    254c:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    254e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2550:	f04f 32ff 	mov.w	r2, #4294967295
    2554:	f04f 33ff 	mov.w	r3, #4294967295
    2558:	f003 fe4a 	bl	61f0 <z_impl_k_mutex_lock>
        if (ret == 0) {
    255c:	2800      	cmp	r0, #0
    255e:	d0f5      	beq.n	254c <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    2560:	4804      	ldr	r0, [pc, #16]	; (2574 <mutex_lock_platform+0x58>)
    2562:	e7f3      	b.n	254c <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2564:	4803      	ldr	r0, [pc, #12]	; (2574 <mutex_lock_platform+0x58>)
    2566:	e7f1      	b.n	254c <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2568:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    256c:	4770      	bx	lr
    256e:	bf00      	nop
    2570:	ffff8fea 	.word	0xffff8fea
    2574:	ffff8fe9 	.word	0xffff8fe9

00002578 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2578:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    257a:	4604      	mov	r4, r0
    257c:	b188      	cbz	r0, 25a2 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    257e:	6863      	ldr	r3, [r4, #4]
    2580:	2b04      	cmp	r3, #4
    2582:	d00d      	beq.n	25a0 <mutex_free_platform+0x28>
    2584:	2b08      	cmp	r3, #8
    2586:	d00b      	beq.n	25a0 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2588:	b153      	cbz	r3, 25a0 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    258a:	f013 0f02 	tst.w	r3, #2
    258e:	d00d      	beq.n	25ac <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2590:	4621      	mov	r1, r4
    2592:	4809      	ldr	r0, [pc, #36]	; (25b8 <mutex_free_platform+0x40>)
    2594:	f006 fa27 	bl	89e6 <k_mem_slab_free>
        mutex->mutex = NULL;
    2598:	2300      	movs	r3, #0
    259a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    259c:	2300      	movs	r3, #0
    259e:	6063      	str	r3, [r4, #4]
}
    25a0:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    25a2:	4b06      	ldr	r3, [pc, #24]	; (25bc <mutex_free_platform+0x44>)
    25a4:	685b      	ldr	r3, [r3, #4]
    25a6:	4806      	ldr	r0, [pc, #24]	; (25c0 <mutex_free_platform+0x48>)
    25a8:	4798      	blx	r3
    25aa:	e7e8      	b.n	257e <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    25ac:	2214      	movs	r2, #20
    25ae:	2100      	movs	r1, #0
    25b0:	6820      	ldr	r0, [r4, #0]
    25b2:	f005 fd6c 	bl	808e <memset>
    25b6:	e7f1      	b.n	259c <mutex_free_platform+0x24>
    25b8:	200004f8 	.word	0x200004f8
    25bc:	200000e0 	.word	0x200000e0
    25c0:	000095fc 	.word	0x000095fc

000025c4 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    25c4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    25c6:	4604      	mov	r4, r0
    25c8:	b178      	cbz	r0, 25ea <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    25ca:	6863      	ldr	r3, [r4, #4]
    25cc:	2b04      	cmp	r3, #4
    25ce:	d00b      	beq.n	25e8 <mutex_init_platform+0x24>
    25d0:	2b08      	cmp	r3, #8
    25d2:	d009      	beq.n	25e8 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    25d4:	b90b      	cbnz	r3, 25da <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    25d6:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    25d8:	b163      	cbz	r3, 25f4 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    25da:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    25dc:	f006 fa96 	bl	8b0c <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    25e0:	6863      	ldr	r3, [r4, #4]
    25e2:	f043 0301 	orr.w	r3, r3, #1
    25e6:	6063      	str	r3, [r4, #4]
}
    25e8:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    25ea:	4b0f      	ldr	r3, [pc, #60]	; (2628 <mutex_init_platform+0x64>)
    25ec:	685b      	ldr	r3, [r3, #4]
    25ee:	480f      	ldr	r0, [pc, #60]	; (262c <mutex_init_platform+0x68>)
    25f0:	4798      	blx	r3
    25f2:	e7ea      	b.n	25ca <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    25f4:	f04f 32ff 	mov.w	r2, #4294967295
    25f8:	f04f 33ff 	mov.w	r3, #4294967295
    25fc:	4621      	mov	r1, r4
    25fe:	480c      	ldr	r0, [pc, #48]	; (2630 <mutex_init_platform+0x6c>)
    2600:	f003 fcb2 	bl	5f68 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2604:	b908      	cbnz	r0, 260a <mutex_init_platform+0x46>
    2606:	6823      	ldr	r3, [r4, #0]
    2608:	b91b      	cbnz	r3, 2612 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    260a:	4b07      	ldr	r3, [pc, #28]	; (2628 <mutex_init_platform+0x64>)
    260c:	685b      	ldr	r3, [r3, #4]
    260e:	4809      	ldr	r0, [pc, #36]	; (2634 <mutex_init_platform+0x70>)
    2610:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2612:	2214      	movs	r2, #20
    2614:	2100      	movs	r1, #0
    2616:	6820      	ldr	r0, [r4, #0]
    2618:	f005 fd39 	bl	808e <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    261c:	6863      	ldr	r3, [r4, #4]
    261e:	f043 0302 	orr.w	r3, r3, #2
    2622:	6063      	str	r3, [r4, #4]
    2624:	e7d9      	b.n	25da <mutex_init_platform+0x16>
    2626:	bf00      	nop
    2628:	200000e0 	.word	0x200000e0
    262c:	000095fc 	.word	0x000095fc
    2630:	200004f8 	.word	0x200004f8
    2634:	00009624 	.word	0x00009624

00002638 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2638:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    263a:	2340      	movs	r3, #64	; 0x40
    263c:	2214      	movs	r2, #20
    263e:	4904      	ldr	r1, [pc, #16]	; (2650 <nrf_cc3xx_platform_mutex_init+0x18>)
    2640:	4804      	ldr	r0, [pc, #16]	; (2654 <nrf_cc3xx_platform_mutex_init+0x1c>)
    2642:	f006 f9c2 	bl	89ca <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2646:	4904      	ldr	r1, [pc, #16]	; (2658 <nrf_cc3xx_platform_mutex_init+0x20>)
    2648:	4804      	ldr	r0, [pc, #16]	; (265c <nrf_cc3xx_platform_mutex_init+0x24>)
    264a:	f004 fddd 	bl	7208 <nrf_cc3xx_platform_set_mutexes>
}
    264e:	bd08      	pop	{r3, pc}
    2650:	20000514 	.word	0x20000514
    2654:	200004f8 	.word	0x200004f8
    2658:	00009664 	.word	0x00009664
    265c:	00009654 	.word	0x00009654

00002660 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2660:	4901      	ldr	r1, [pc, #4]	; (2668 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2662:	2210      	movs	r2, #16
	str	r2, [r1]
    2664:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2666:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2668:	e000ed10 	.word	0xe000ed10

0000266c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    266c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    266e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2670:	f380 8811 	msr	BASEPRI, r0
	isb
    2674:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2678:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    267c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    267e:	b662      	cpsie	i
	isb
    2680:	f3bf 8f6f 	isb	sy

	bx	lr
    2684:	4770      	bx	lr
    2686:	bf00      	nop

00002688 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2688:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    268a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    268c:	f381 8811 	msr	BASEPRI, r1

	wfe
    2690:	bf20      	wfe

	msr	BASEPRI, r0
    2692:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2696:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2698:	4770      	bx	lr
    269a:	bf00      	nop

0000269c <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    269c:	b570      	push	{r4, r5, r6, lr}
    269e:	b082      	sub	sp, #8
    26a0:	4604      	mov	r4, r0
    26a2:	4d1f      	ldr	r5, [pc, #124]	; (2720 <esf_dump+0x84>)
    26a4:	4b1f      	ldr	r3, [pc, #124]	; (2724 <esf_dump+0x88>)
    26a6:	1aed      	subs	r5, r5, r3
    26a8:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    26aa:	2601      	movs	r6, #1
    26ac:	f04f 0300 	mov.w	r3, #0
    26b0:	f366 0302 	bfi	r3, r6, #0, #3
    26b4:	f36f 03c5 	bfc	r3, #3, #3
    26b8:	f365 138f 	bfi	r3, r5, #6, #10
    26bc:	f8ad 3000 	strh.w	r3, [sp]
    26c0:	6883      	ldr	r3, [r0, #8]
    26c2:	6842      	ldr	r2, [r0, #4]
    26c4:	6801      	ldr	r1, [r0, #0]
    26c6:	4818      	ldr	r0, [pc, #96]	; (2728 <esf_dump+0x8c>)
    26c8:	f7ff f916 	bl	18f8 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    26cc:	f04f 0300 	mov.w	r3, #0
    26d0:	f366 0302 	bfi	r3, r6, #0, #3
    26d4:	f36f 03c5 	bfc	r3, #3, #3
    26d8:	f365 138f 	bfi	r3, r5, #6, #10
    26dc:	f8ad 3000 	strh.w	r3, [sp]
    26e0:	6963      	ldr	r3, [r4, #20]
    26e2:	6922      	ldr	r2, [r4, #16]
    26e4:	68e1      	ldr	r1, [r4, #12]
    26e6:	4811      	ldr	r0, [pc, #68]	; (272c <esf_dump+0x90>)
    26e8:	f7ff f906 	bl	18f8 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    26ec:	f04f 0200 	mov.w	r2, #0
    26f0:	f366 0202 	bfi	r2, r6, #0, #3
    26f4:	f36f 02c5 	bfc	r2, #3, #3
    26f8:	f365 128f 	bfi	r2, r5, #6, #10
    26fc:	69e1      	ldr	r1, [r4, #28]
    26fe:	480c      	ldr	r0, [pc, #48]	; (2730 <esf_dump+0x94>)
    2700:	f7ff f938 	bl	1974 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2704:	f04f 0200 	mov.w	r2, #0
    2708:	f366 0202 	bfi	r2, r6, #0, #3
    270c:	f36f 02c5 	bfc	r2, #3, #3
    2710:	f365 128f 	bfi	r2, r5, #6, #10
    2714:	69a1      	ldr	r1, [r4, #24]
    2716:	4807      	ldr	r0, [pc, #28]	; (2734 <esf_dump+0x98>)
    2718:	f7ff f92c 	bl	1974 <log_1>
		esf->basic.pc);
}
    271c:	b002      	add	sp, #8
    271e:	bd70      	pop	{r4, r5, r6, pc}
    2720:	000091d4 	.word	0x000091d4
    2724:	0000919c 	.word	0x0000919c
    2728:	00009678 	.word	0x00009678
    272c:	000096a8 	.word	0x000096a8
    2730:	000096d8 	.word	0x000096d8
    2734:	000096e8 	.word	0x000096e8

00002738 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2738:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    273a:	2b00      	cmp	r3, #0
    273c:	db08      	blt.n	2750 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    273e:	f000 001f 	and.w	r0, r0, #31
    2742:	095b      	lsrs	r3, r3, #5
    2744:	2201      	movs	r2, #1
    2746:	fa02 f000 	lsl.w	r0, r2, r0
    274a:	4a02      	ldr	r2, [pc, #8]	; (2754 <arch_irq_enable+0x1c>)
    274c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2750:	4770      	bx	lr
    2752:	bf00      	nop
    2754:	e000e100 	.word	0xe000e100

00002758 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2758:	0942      	lsrs	r2, r0, #5
    275a:	4b05      	ldr	r3, [pc, #20]	; (2770 <arch_irq_is_enabled+0x18>)
    275c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2760:	f000 001f 	and.w	r0, r0, #31
    2764:	2301      	movs	r3, #1
    2766:	fa03 f000 	lsl.w	r0, r3, r0
}
    276a:	4010      	ands	r0, r2
    276c:	4770      	bx	lr
    276e:	bf00      	nop
    2770:	e000e100 	.word	0xe000e100

00002774 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    2774:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2776:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2778:	2b00      	cmp	r3, #0
    277a:	db08      	blt.n	278e <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    277c:	0149      	lsls	r1, r1, #5
    277e:	b2c9      	uxtb	r1, r1
    2780:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2784:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2788:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    278c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    278e:	f000 000f 	and.w	r0, r0, #15
    2792:	0149      	lsls	r1, r1, #5
    2794:	b2c9      	uxtb	r1, r1
    2796:	4b01      	ldr	r3, [pc, #4]	; (279c <z_arm_irq_priority_set+0x28>)
    2798:	5419      	strb	r1, [r3, r0]
}
    279a:	4770      	bx	lr
    279c:	e000ed14 	.word	0xe000ed14

000027a0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    27a0:	bf30      	wfi
    b z_SysNmiOnReset
    27a2:	f7ff bffd 	b.w	27a0 <z_SysNmiOnReset>
    27a6:	bf00      	nop

000027a8 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    27a8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    27aa:	4b0b      	ldr	r3, [pc, #44]	; (27d8 <z_arm_prep_c+0x30>)
    27ac:	4a0b      	ldr	r2, [pc, #44]	; (27dc <z_arm_prep_c+0x34>)
    27ae:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    27b2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    27b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    27b8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    27bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    27c0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    27c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    27c8:	f003 fb6c 	bl	5ea4 <z_bss_zero>
	z_data_copy();
    27cc:	f004 fa16 	bl	6bfc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    27d0:	f000 fcb6 	bl	3140 <z_arm_interrupt_init>
	z_cstart();
    27d4:	f003 fb72 	bl	5ebc <z_cstart>
    27d8:	e000ed00 	.word	0xe000ed00
    27dc:	00000000 	.word	0x00000000

000027e0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    27e0:	4a0a      	ldr	r2, [pc, #40]	; (280c <arch_swap+0x2c>)
    27e2:	6893      	ldr	r3, [r2, #8]
    27e4:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    27e8:	4909      	ldr	r1, [pc, #36]	; (2810 <arch_swap+0x30>)
    27ea:	6809      	ldr	r1, [r1, #0]
    27ec:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    27f0:	4908      	ldr	r1, [pc, #32]	; (2814 <arch_swap+0x34>)
    27f2:	684b      	ldr	r3, [r1, #4]
    27f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    27f8:	604b      	str	r3, [r1, #4]
    27fa:	2300      	movs	r3, #0
    27fc:	f383 8811 	msr	BASEPRI, r3
    2800:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2804:	6893      	ldr	r3, [r2, #8]
}
    2806:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    280a:	4770      	bx	lr
    280c:	20000f8c 	.word	0x20000f8c
    2810:	00009e0c 	.word	0x00009e0c
    2814:	e000ed00 	.word	0xe000ed00

00002818 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2818:	4913      	ldr	r1, [pc, #76]	; (2868 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    281a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    281c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2820:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2822:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2826:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    282a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    282c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2830:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2834:	4f0d      	ldr	r7, [pc, #52]	; (286c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2836:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    283a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    283c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    283e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2840:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    2844:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2846:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    284a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    284e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2850:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2852:	f000 fd17 	bl	3284 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2856:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    285a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    285e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2862:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2866:	4770      	bx	lr
    ldr r1, =_kernel
    2868:	20000f8c 	.word	0x20000f8c
    ldr v4, =_SCS_ICSR
    286c:	e000ed04 	.word	0xe000ed04

00002870 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2870:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2874:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2876:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    287a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    287e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2880:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2884:	2902      	cmp	r1, #2
    beq _oops
    2886:	d0ff      	beq.n	2888 <_oops>

00002888 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2888:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    288a:	f005 fb2c 	bl	7ee6 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    288e:	bd01      	pop	{r0, pc}

00002890 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    2890:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2892:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    2896:	490d      	ldr	r1, [pc, #52]	; (28cc <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    2898:	f021 0101 	bic.w	r1, r1, #1
    289c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    28a0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    28a4:	9b01      	ldr	r3, [sp, #4]
    28a6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    28aa:	9b02      	ldr	r3, [sp, #8]
    28ac:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    28b0:	9b03      	ldr	r3, [sp, #12]
    28b2:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    28b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    28ba:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    28be:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    28c0:	2300      	movs	r3, #0
    28c2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    28c6:	bc10      	pop	{r4}
    28c8:	4770      	bx	lr
    28ca:	bf00      	nop
    28cc:	000077c3 	.word	0x000077c3

000028d0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    28d0:	4b16      	ldr	r3, [pc, #88]	; (292c <z_check_thread_stack_fail+0x5c>)
    28d2:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    28d4:	b1da      	cbz	r2, 290e <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    28d6:	f110 0f16 	cmn.w	r0, #22
    28da:	d01a      	beq.n	2912 <z_check_thread_stack_fail+0x42>
{
    28dc:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    28de:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    28e2:	f1a3 0420 	sub.w	r4, r3, #32
    28e6:	4284      	cmp	r4, r0
    28e8:	d805      	bhi.n	28f6 <z_check_thread_stack_fail+0x26>
    28ea:	4283      	cmp	r3, r0
    28ec:	d908      	bls.n	2900 <z_check_thread_stack_fail+0x30>
    28ee:	428b      	cmp	r3, r1
    28f0:	d808      	bhi.n	2904 <z_check_thread_stack_fail+0x34>
    28f2:	2100      	movs	r1, #0
    28f4:	e000      	b.n	28f8 <z_check_thread_stack_fail+0x28>
    28f6:	2100      	movs	r1, #0
    28f8:	b931      	cbnz	r1, 2908 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    28fa:	2000      	movs	r0, #0
}
    28fc:	bc10      	pop	{r4}
    28fe:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2900:	2100      	movs	r1, #0
    2902:	e7f9      	b.n	28f8 <z_check_thread_stack_fail+0x28>
    2904:	2101      	movs	r1, #1
    2906:	e7f7      	b.n	28f8 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    2908:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    290c:	e7f6      	b.n	28fc <z_check_thread_stack_fail+0x2c>
		return 0;
    290e:	2000      	movs	r0, #0
    2910:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2912:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    2916:	428b      	cmp	r3, r1
    2918:	bf94      	ite	ls
    291a:	2100      	movls	r1, #0
    291c:	2101      	movhi	r1, #1
    291e:	b909      	cbnz	r1, 2924 <z_check_thread_stack_fail+0x54>
	return 0;
    2920:	2000      	movs	r0, #0
}
    2922:	4770      	bx	lr
		return thread->stack_info.start;
    2924:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    2928:	4770      	bx	lr
    292a:	bf00      	nop
    292c:	20000f8c 	.word	0x20000f8c

00002930 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2930:	b508      	push	{r3, lr}
    2932:	460d      	mov	r5, r1
    2934:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2936:	4b08      	ldr	r3, [pc, #32]	; (2958 <arch_switch_to_main_thread+0x28>)
    2938:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    293a:	f000 fca3 	bl	3284 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    293e:	4620      	mov	r0, r4
    2940:	f385 8809 	msr	PSP, r5
    2944:	2100      	movs	r1, #0
    2946:	b663      	cpsie	if
    2948:	f381 8811 	msr	BASEPRI, r1
    294c:	f3bf 8f6f 	isb	sy
    2950:	2200      	movs	r2, #0
    2952:	2300      	movs	r3, #0
    2954:	f004 ff35 	bl	77c2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2958:	20000f8c 	.word	0x20000f8c

0000295c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    295c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    295e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2960:	4a0b      	ldr	r2, [pc, #44]	; (2990 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2962:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2964:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2966:	bf1e      	ittt	ne
	movne	r1, #0
    2968:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    296a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    296c:	f006 f8b2 	blne	8ad4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2970:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2972:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2976:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    297a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    297e:	4905      	ldr	r1, [pc, #20]	; (2994 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2980:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2982:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2984:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2986:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    298a:	4903      	ldr	r1, [pc, #12]	; (2998 <_isr_wrapper+0x3c>)
	bx r1
    298c:	4708      	bx	r1
    298e:	0000      	.short	0x0000
	ldr r2, =_kernel
    2990:	20000f8c 	.word	0x20000f8c
	ldr r1, =_sw_isr_table
    2994:	0000901c 	.word	0x0000901c
	ldr r1, =z_arm_int_exit
    2998:	0000299d 	.word	0x0000299d

0000299c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    299c:	4b04      	ldr	r3, [pc, #16]	; (29b0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    299e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    29a0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    29a2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    29a4:	d003      	beq.n	29ae <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    29a6:	4903      	ldr	r1, [pc, #12]	; (29b4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    29a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    29ac:	600a      	str	r2, [r1, #0]

000029ae <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    29ae:	4770      	bx	lr
	ldr r3, =_kernel
    29b0:	20000f8c 	.word	0x20000f8c
	ldr r1, =_SCS_ICSR
    29b4:	e000ed04 	.word	0xe000ed04

000029b8 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    29b8:	b508      	push	{r3, lr}
    29ba:	4b4e      	ldr	r3, [pc, #312]	; (2af4 <usage_fault+0x13c>)
    29bc:	4a4e      	ldr	r2, [pc, #312]	; (2af8 <usage_fault+0x140>)
    29be:	1a9b      	subs	r3, r3, r2
    29c0:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    29c2:	f04f 0100 	mov.w	r1, #0
    29c6:	2201      	movs	r2, #1
    29c8:	f362 0102 	bfi	r1, r2, #0, #3
    29cc:	f36f 01c5 	bfc	r1, #3, #3
    29d0:	f363 118f 	bfi	r1, r3, #6, #10
    29d4:	4849      	ldr	r0, [pc, #292]	; (2afc <usage_fault+0x144>)
    29d6:	f7ff f83f 	bl	1a58 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    29da:	4b49      	ldr	r3, [pc, #292]	; (2b00 <usage_fault+0x148>)
    29dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29de:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    29e2:	d121      	bne.n	2a28 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    29e4:	4b46      	ldr	r3, [pc, #280]	; (2b00 <usage_fault+0x148>)
    29e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29e8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    29ec:	d12d      	bne.n	2a4a <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    29ee:	4b44      	ldr	r3, [pc, #272]	; (2b00 <usage_fault+0x148>)
    29f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29f2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    29f6:	d139      	bne.n	2a6c <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    29f8:	4b41      	ldr	r3, [pc, #260]	; (2b00 <usage_fault+0x148>)
    29fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29fc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    2a00:	d145      	bne.n	2a8e <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2a02:	4b3f      	ldr	r3, [pc, #252]	; (2b00 <usage_fault+0x148>)
    2a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a06:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    2a0a:	d151      	bne.n	2ab0 <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2a0c:	4b3c      	ldr	r3, [pc, #240]	; (2b00 <usage_fault+0x148>)
    2a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a10:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a14:	d15d      	bne.n	2ad2 <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2a16:	4a3a      	ldr	r2, [pc, #232]	; (2b00 <usage_fault+0x148>)
    2a18:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2a1a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2a1e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2a22:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    2a24:	2000      	movs	r0, #0
    2a26:	bd08      	pop	{r3, pc}
    2a28:	4b32      	ldr	r3, [pc, #200]	; (2af4 <usage_fault+0x13c>)
    2a2a:	4a33      	ldr	r2, [pc, #204]	; (2af8 <usage_fault+0x140>)
    2a2c:	1a9b      	subs	r3, r3, r2
    2a2e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
    2a30:	f04f 0100 	mov.w	r1, #0
    2a34:	2201      	movs	r2, #1
    2a36:	f362 0102 	bfi	r1, r2, #0, #3
    2a3a:	f36f 01c5 	bfc	r1, #3, #3
    2a3e:	f363 118f 	bfi	r1, r3, #6, #10
    2a42:	4830      	ldr	r0, [pc, #192]	; (2b04 <usage_fault+0x14c>)
    2a44:	f7ff f808 	bl	1a58 <log_0>
    2a48:	e7cc      	b.n	29e4 <usage_fault+0x2c>
    2a4a:	4b2a      	ldr	r3, [pc, #168]	; (2af4 <usage_fault+0x13c>)
    2a4c:	4a2a      	ldr	r2, [pc, #168]	; (2af8 <usage_fault+0x140>)
    2a4e:	1a9b      	subs	r3, r3, r2
    2a50:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
    2a52:	f04f 0100 	mov.w	r1, #0
    2a56:	2201      	movs	r2, #1
    2a58:	f362 0102 	bfi	r1, r2, #0, #3
    2a5c:	f36f 01c5 	bfc	r1, #3, #3
    2a60:	f363 118f 	bfi	r1, r3, #6, #10
    2a64:	4828      	ldr	r0, [pc, #160]	; (2b08 <usage_fault+0x150>)
    2a66:	f7fe fff7 	bl	1a58 <log_0>
    2a6a:	e7c0      	b.n	29ee <usage_fault+0x36>
    2a6c:	4b21      	ldr	r3, [pc, #132]	; (2af4 <usage_fault+0x13c>)
    2a6e:	4a22      	ldr	r2, [pc, #136]	; (2af8 <usage_fault+0x140>)
    2a70:	1a9b      	subs	r3, r3, r2
    2a72:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
    2a74:	f04f 0100 	mov.w	r1, #0
    2a78:	2201      	movs	r2, #1
    2a7a:	f362 0102 	bfi	r1, r2, #0, #3
    2a7e:	f36f 01c5 	bfc	r1, #3, #3
    2a82:	f363 118f 	bfi	r1, r3, #6, #10
    2a86:	4821      	ldr	r0, [pc, #132]	; (2b0c <usage_fault+0x154>)
    2a88:	f7fe ffe6 	bl	1a58 <log_0>
    2a8c:	e7b4      	b.n	29f8 <usage_fault+0x40>
    2a8e:	4b19      	ldr	r3, [pc, #100]	; (2af4 <usage_fault+0x13c>)
    2a90:	4a19      	ldr	r2, [pc, #100]	; (2af8 <usage_fault+0x140>)
    2a92:	1a9b      	subs	r3, r3, r2
    2a94:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2a96:	f04f 0100 	mov.w	r1, #0
    2a9a:	2201      	movs	r2, #1
    2a9c:	f362 0102 	bfi	r1, r2, #0, #3
    2aa0:	f36f 01c5 	bfc	r1, #3, #3
    2aa4:	f363 118f 	bfi	r1, r3, #6, #10
    2aa8:	4819      	ldr	r0, [pc, #100]	; (2b10 <usage_fault+0x158>)
    2aaa:	f7fe ffd5 	bl	1a58 <log_0>
    2aae:	e7a8      	b.n	2a02 <usage_fault+0x4a>
    2ab0:	4b10      	ldr	r3, [pc, #64]	; (2af4 <usage_fault+0x13c>)
    2ab2:	4a11      	ldr	r2, [pc, #68]	; (2af8 <usage_fault+0x140>)
    2ab4:	1a9b      	subs	r3, r3, r2
    2ab6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2ab8:	f04f 0100 	mov.w	r1, #0
    2abc:	2201      	movs	r2, #1
    2abe:	f362 0102 	bfi	r1, r2, #0, #3
    2ac2:	f36f 01c5 	bfc	r1, #3, #3
    2ac6:	f363 118f 	bfi	r1, r3, #6, #10
    2aca:	4812      	ldr	r0, [pc, #72]	; (2b14 <usage_fault+0x15c>)
    2acc:	f7fe ffc4 	bl	1a58 <log_0>
    2ad0:	e79c      	b.n	2a0c <usage_fault+0x54>
    2ad2:	4b08      	ldr	r3, [pc, #32]	; (2af4 <usage_fault+0x13c>)
    2ad4:	4a08      	ldr	r2, [pc, #32]	; (2af8 <usage_fault+0x140>)
    2ad6:	1a9b      	subs	r3, r3, r2
    2ad8:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2ada:	f04f 0100 	mov.w	r1, #0
    2ade:	2201      	movs	r2, #1
    2ae0:	f362 0102 	bfi	r1, r2, #0, #3
    2ae4:	f36f 01c5 	bfc	r1, #3, #3
    2ae8:	f363 118f 	bfi	r1, r3, #6, #10
    2aec:	480a      	ldr	r0, [pc, #40]	; (2b18 <usage_fault+0x160>)
    2aee:	f7fe ffb3 	bl	1a58 <log_0>
    2af2:	e790      	b.n	2a16 <usage_fault+0x5e>
    2af4:	000091d4 	.word	0x000091d4
    2af8:	0000919c 	.word	0x0000919c
    2afc:	00009718 	.word	0x00009718
    2b00:	e000ed00 	.word	0xe000ed00
    2b04:	00009730 	.word	0x00009730
    2b08:	00009744 	.word	0x00009744
    2b0c:	00009760 	.word	0x00009760
    2b10:	00009780 	.word	0x00009780
    2b14:	000097a8 	.word	0x000097a8
    2b18:	000097c4 	.word	0x000097c4

00002b1c <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    2b1c:	b508      	push	{r3, lr}
	*recoverable = false;
    2b1e:	2200      	movs	r2, #0
    2b20:	700a      	strb	r2, [r1, #0]
    2b22:	4b08      	ldr	r3, [pc, #32]	; (2b44 <debug_monitor+0x28>)
    2b24:	4908      	ldr	r1, [pc, #32]	; (2b48 <debug_monitor+0x2c>)
    2b26:	1a5b      	subs	r3, r3, r1
    2b28:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
    2b2a:	f04f 0100 	mov.w	r1, #0
    2b2e:	2001      	movs	r0, #1
    2b30:	f360 0102 	bfi	r1, r0, #0, #3
    2b34:	f362 01c5 	bfi	r1, r2, #3, #3
    2b38:	f363 118f 	bfi	r1, r3, #6, #10
    2b3c:	4803      	ldr	r0, [pc, #12]	; (2b4c <debug_monitor+0x30>)
    2b3e:	f7fe ff8b 	bl	1a58 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    2b42:	bd08      	pop	{r3, pc}
    2b44:	000091d4 	.word	0x000091d4
    2b48:	0000919c 	.word	0x0000919c
    2b4c:	000097f0 	.word	0x000097f0

00002b50 <bus_fault>:
{
    2b50:	b570      	push	{r4, r5, r6, lr}
    2b52:	4605      	mov	r5, r0
    2b54:	460e      	mov	r6, r1
    2b56:	4614      	mov	r4, r2
    2b58:	4b5e      	ldr	r3, [pc, #376]	; (2cd4 <bus_fault+0x184>)
    2b5a:	4a5f      	ldr	r2, [pc, #380]	; (2cd8 <bus_fault+0x188>)
    2b5c:	1a9b      	subs	r3, r3, r2
    2b5e:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    2b60:	f04f 0100 	mov.w	r1, #0
    2b64:	2201      	movs	r2, #1
    2b66:	f362 0102 	bfi	r1, r2, #0, #3
    2b6a:	f36f 01c5 	bfc	r1, #3, #3
    2b6e:	f363 118f 	bfi	r1, r3, #6, #10
    2b72:	485a      	ldr	r0, [pc, #360]	; (2cdc <bus_fault+0x18c>)
    2b74:	f7fe ff70 	bl	1a58 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2b78:	4b59      	ldr	r3, [pc, #356]	; (2ce0 <bus_fault+0x190>)
    2b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b7c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    2b80:	d124      	bne.n	2bcc <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2b82:	4b57      	ldr	r3, [pc, #348]	; (2ce0 <bus_fault+0x190>)
    2b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b86:	f413 6f00 	tst.w	r3, #2048	; 0x800
    2b8a:	d130      	bne.n	2bee <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2b8c:	4b54      	ldr	r3, [pc, #336]	; (2ce0 <bus_fault+0x190>)
    2b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b90:	f413 7f00 	tst.w	r3, #512	; 0x200
    2b94:	d13c      	bne.n	2c10 <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2b96:	4b52      	ldr	r3, [pc, #328]	; (2ce0 <bus_fault+0x190>)
    2b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b9a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2b9e:	d165      	bne.n	2c6c <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2ba0:	4b4f      	ldr	r3, [pc, #316]	; (2ce0 <bus_fault+0x190>)
    2ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ba4:	f413 7f80 	tst.w	r3, #256	; 0x100
    2ba8:	d171      	bne.n	2c8e <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2baa:	4b4d      	ldr	r3, [pc, #308]	; (2ce0 <bus_fault+0x190>)
    2bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2bae:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2bb2:	d17d      	bne.n	2cb0 <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2bb4:	4a4a      	ldr	r2, [pc, #296]	; (2ce0 <bus_fault+0x190>)
    2bb6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2bb8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2bbc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2bbe:	2101      	movs	r1, #1
    2bc0:	4628      	mov	r0, r5
    2bc2:	f005 f9a2 	bl	7f0a <memory_fault_recoverable>
    2bc6:	7020      	strb	r0, [r4, #0]
}
    2bc8:	2000      	movs	r0, #0
    2bca:	bd70      	pop	{r4, r5, r6, pc}
    2bcc:	4b41      	ldr	r3, [pc, #260]	; (2cd4 <bus_fault+0x184>)
    2bce:	4a42      	ldr	r2, [pc, #264]	; (2cd8 <bus_fault+0x188>)
    2bd0:	1a9b      	subs	r3, r3, r2
    2bd2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
    2bd4:	f04f 0100 	mov.w	r1, #0
    2bd8:	2201      	movs	r2, #1
    2bda:	f362 0102 	bfi	r1, r2, #0, #3
    2bde:	f36f 01c5 	bfc	r1, #3, #3
    2be2:	f363 118f 	bfi	r1, r3, #6, #10
    2be6:	483f      	ldr	r0, [pc, #252]	; (2ce4 <bus_fault+0x194>)
    2be8:	f7fe ff36 	bl	1a58 <log_0>
    2bec:	e7c9      	b.n	2b82 <bus_fault+0x32>
    2bee:	4b39      	ldr	r3, [pc, #228]	; (2cd4 <bus_fault+0x184>)
    2bf0:	4a39      	ldr	r2, [pc, #228]	; (2cd8 <bus_fault+0x188>)
    2bf2:	1a9b      	subs	r3, r3, r2
    2bf4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    2bf6:	f04f 0100 	mov.w	r1, #0
    2bfa:	2201      	movs	r2, #1
    2bfc:	f362 0102 	bfi	r1, r2, #0, #3
    2c00:	f36f 01c5 	bfc	r1, #3, #3
    2c04:	f363 118f 	bfi	r1, r3, #6, #10
    2c08:	4837      	ldr	r0, [pc, #220]	; (2ce8 <bus_fault+0x198>)
    2c0a:	f7fe ff25 	bl	1a58 <log_0>
    2c0e:	e7bd      	b.n	2b8c <bus_fault+0x3c>
    2c10:	4b30      	ldr	r3, [pc, #192]	; (2cd4 <bus_fault+0x184>)
    2c12:	4a31      	ldr	r2, [pc, #196]	; (2cd8 <bus_fault+0x188>)
    2c14:	1a9b      	subs	r3, r3, r2
    2c16:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
    2c18:	f04f 0100 	mov.w	r1, #0
    2c1c:	2201      	movs	r2, #1
    2c1e:	f362 0102 	bfi	r1, r2, #0, #3
    2c22:	f36f 01c5 	bfc	r1, #3, #3
    2c26:	f363 118f 	bfi	r1, r3, #6, #10
    2c2a:	4830      	ldr	r0, [pc, #192]	; (2cec <bus_fault+0x19c>)
    2c2c:	f7fe ff14 	bl	1a58 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    2c30:	4b2b      	ldr	r3, [pc, #172]	; (2ce0 <bus_fault+0x190>)
    2c32:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2c36:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2c3a:	d0ac      	beq.n	2b96 <bus_fault+0x46>
    2c3c:	4b25      	ldr	r3, [pc, #148]	; (2cd4 <bus_fault+0x184>)
    2c3e:	4a26      	ldr	r2, [pc, #152]	; (2cd8 <bus_fault+0x188>)
    2c40:	1a9b      	subs	r3, r3, r2
    2c42:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2c44:	f04f 0200 	mov.w	r2, #0
    2c48:	2001      	movs	r0, #1
    2c4a:	f360 0202 	bfi	r2, r0, #0, #3
    2c4e:	f36f 02c5 	bfc	r2, #3, #3
    2c52:	f363 128f 	bfi	r2, r3, #6, #10
    2c56:	4826      	ldr	r0, [pc, #152]	; (2cf0 <bus_fault+0x1a0>)
    2c58:	f7fe fe8c 	bl	1974 <log_1>
			if (from_hard_fault != 0) {
    2c5c:	2e00      	cmp	r6, #0
    2c5e:	d09a      	beq.n	2b96 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2c60:	4a1f      	ldr	r2, [pc, #124]	; (2ce0 <bus_fault+0x190>)
    2c62:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2c64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2c68:	6293      	str	r3, [r2, #40]	; 0x28
    2c6a:	e794      	b.n	2b96 <bus_fault+0x46>
    2c6c:	4b19      	ldr	r3, [pc, #100]	; (2cd4 <bus_fault+0x184>)
    2c6e:	4a1a      	ldr	r2, [pc, #104]	; (2cd8 <bus_fault+0x188>)
    2c70:	1a9b      	subs	r3, r3, r2
    2c72:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
    2c74:	f04f 0100 	mov.w	r1, #0
    2c78:	2201      	movs	r2, #1
    2c7a:	f362 0102 	bfi	r1, r2, #0, #3
    2c7e:	f36f 01c5 	bfc	r1, #3, #3
    2c82:	f363 118f 	bfi	r1, r3, #6, #10
    2c86:	481b      	ldr	r0, [pc, #108]	; (2cf4 <bus_fault+0x1a4>)
    2c88:	f7fe fee6 	bl	1a58 <log_0>
    2c8c:	e788      	b.n	2ba0 <bus_fault+0x50>
    2c8e:	4b11      	ldr	r3, [pc, #68]	; (2cd4 <bus_fault+0x184>)
    2c90:	4a11      	ldr	r2, [pc, #68]	; (2cd8 <bus_fault+0x188>)
    2c92:	1a9b      	subs	r3, r3, r2
    2c94:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
    2c96:	f04f 0100 	mov.w	r1, #0
    2c9a:	2201      	movs	r2, #1
    2c9c:	f362 0102 	bfi	r1, r2, #0, #3
    2ca0:	f36f 01c5 	bfc	r1, #3, #3
    2ca4:	f363 118f 	bfi	r1, r3, #6, #10
    2ca8:	4813      	ldr	r0, [pc, #76]	; (2cf8 <bus_fault+0x1a8>)
    2caa:	f7fe fed5 	bl	1a58 <log_0>
    2cae:	e781      	b.n	2bb4 <bus_fault+0x64>
    2cb0:	4b08      	ldr	r3, [pc, #32]	; (2cd4 <bus_fault+0x184>)
    2cb2:	4a09      	ldr	r2, [pc, #36]	; (2cd8 <bus_fault+0x188>)
    2cb4:	1a9b      	subs	r3, r3, r2
    2cb6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2cb8:	f04f 0100 	mov.w	r1, #0
    2cbc:	2201      	movs	r2, #1
    2cbe:	f362 0102 	bfi	r1, r2, #0, #3
    2cc2:	f36f 01c5 	bfc	r1, #3, #3
    2cc6:	f363 118f 	bfi	r1, r3, #6, #10
    2cca:	480c      	ldr	r0, [pc, #48]	; (2cfc <bus_fault+0x1ac>)
    2ccc:	f7fe fec4 	bl	1a58 <log_0>
    2cd0:	e770      	b.n	2bb4 <bus_fault+0x64>
    2cd2:	bf00      	nop
    2cd4:	000091d4 	.word	0x000091d4
    2cd8:	0000919c 	.word	0x0000919c
    2cdc:	00009814 	.word	0x00009814
    2ce0:	e000ed00 	.word	0xe000ed00
    2ce4:	0000982c 	.word	0x0000982c
    2ce8:	00009840 	.word	0x00009840
    2cec:	00009854 	.word	0x00009854
    2cf0:	00009870 	.word	0x00009870
    2cf4:	00009888 	.word	0x00009888
    2cf8:	000098a4 	.word	0x000098a4
    2cfc:	000098bc 	.word	0x000098bc

00002d00 <mem_manage_fault>:
{
    2d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d02:	4605      	mov	r5, r0
    2d04:	460c      	mov	r4, r1
    2d06:	4616      	mov	r6, r2
    2d08:	4b64      	ldr	r3, [pc, #400]	; (2e9c <mem_manage_fault+0x19c>)
    2d0a:	4a65      	ldr	r2, [pc, #404]	; (2ea0 <mem_manage_fault+0x1a0>)
    2d0c:	1a9b      	subs	r3, r3, r2
    2d0e:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    2d10:	f04f 0100 	mov.w	r1, #0
    2d14:	2201      	movs	r2, #1
    2d16:	f362 0102 	bfi	r1, r2, #0, #3
    2d1a:	f36f 01c5 	bfc	r1, #3, #3
    2d1e:	f363 118f 	bfi	r1, r3, #6, #10
    2d22:	4860      	ldr	r0, [pc, #384]	; (2ea4 <mem_manage_fault+0x1a4>)
    2d24:	f7fe fe98 	bl	1a58 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2d28:	4b5f      	ldr	r3, [pc, #380]	; (2ea8 <mem_manage_fault+0x1a8>)
    2d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d2c:	f013 0f10 	tst.w	r3, #16
    2d30:	d132      	bne.n	2d98 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2d32:	4b5d      	ldr	r3, [pc, #372]	; (2ea8 <mem_manage_fault+0x1a8>)
    2d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d36:	f013 0f08 	tst.w	r3, #8
    2d3a:	d13e      	bne.n	2dba <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2d3c:	4b5a      	ldr	r3, [pc, #360]	; (2ea8 <mem_manage_fault+0x1a8>)
    2d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d40:	f013 0f02 	tst.w	r3, #2
    2d44:	d14a      	bne.n	2ddc <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
    2d46:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2d4a:	4b57      	ldr	r3, [pc, #348]	; (2ea8 <mem_manage_fault+0x1a8>)
    2d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d4e:	f013 0f01 	tst.w	r3, #1
    2d52:	d175      	bne.n	2e40 <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2d54:	4b54      	ldr	r3, [pc, #336]	; (2ea8 <mem_manage_fault+0x1a8>)
    2d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d58:	f013 0f20 	tst.w	r3, #32
    2d5c:	f040 8081 	bne.w	2e62 <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2d60:	4b51      	ldr	r3, [pc, #324]	; (2ea8 <mem_manage_fault+0x1a8>)
    2d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d64:	f013 0f10 	tst.w	r3, #16
    2d68:	d104      	bne.n	2d74 <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2d6a:	4b4f      	ldr	r3, [pc, #316]	; (2ea8 <mem_manage_fault+0x1a8>)
    2d6c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2d6e:	f014 0402 	ands.w	r4, r4, #2
    2d72:	d005      	beq.n	2d80 <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2d74:	4b4c      	ldr	r3, [pc, #304]	; (2ea8 <mem_manage_fault+0x1a8>)
    2d76:	685c      	ldr	r4, [r3, #4]
    2d78:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    2d7c:	f040 8082 	bne.w	2e84 <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2d80:	4a49      	ldr	r2, [pc, #292]	; (2ea8 <mem_manage_fault+0x1a8>)
    2d82:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2d84:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2d88:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2d8a:	2101      	movs	r1, #1
    2d8c:	4628      	mov	r0, r5
    2d8e:	f005 f8bc 	bl	7f0a <memory_fault_recoverable>
    2d92:	7030      	strb	r0, [r6, #0]
}
    2d94:	4620      	mov	r0, r4
    2d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d98:	4b40      	ldr	r3, [pc, #256]	; (2e9c <mem_manage_fault+0x19c>)
    2d9a:	4a41      	ldr	r2, [pc, #260]	; (2ea0 <mem_manage_fault+0x1a0>)
    2d9c:	1a9b      	subs	r3, r3, r2
    2d9e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
    2da0:	f04f 0100 	mov.w	r1, #0
    2da4:	2201      	movs	r2, #1
    2da6:	f362 0102 	bfi	r1, r2, #0, #3
    2daa:	f36f 01c5 	bfc	r1, #3, #3
    2dae:	f363 118f 	bfi	r1, r3, #6, #10
    2db2:	483e      	ldr	r0, [pc, #248]	; (2eac <mem_manage_fault+0x1ac>)
    2db4:	f7fe fe50 	bl	1a58 <log_0>
    2db8:	e7bb      	b.n	2d32 <mem_manage_fault+0x32>
    2dba:	4b38      	ldr	r3, [pc, #224]	; (2e9c <mem_manage_fault+0x19c>)
    2dbc:	4a38      	ldr	r2, [pc, #224]	; (2ea0 <mem_manage_fault+0x1a0>)
    2dbe:	1a9b      	subs	r3, r3, r2
    2dc0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    2dc2:	f04f 0100 	mov.w	r1, #0
    2dc6:	2201      	movs	r2, #1
    2dc8:	f362 0102 	bfi	r1, r2, #0, #3
    2dcc:	f36f 01c5 	bfc	r1, #3, #3
    2dd0:	f363 118f 	bfi	r1, r3, #6, #10
    2dd4:	4836      	ldr	r0, [pc, #216]	; (2eb0 <mem_manage_fault+0x1b0>)
    2dd6:	f7fe fe3f 	bl	1a58 <log_0>
    2dda:	e7af      	b.n	2d3c <mem_manage_fault+0x3c>
    2ddc:	4b2f      	ldr	r3, [pc, #188]	; (2e9c <mem_manage_fault+0x19c>)
    2dde:	4a30      	ldr	r2, [pc, #192]	; (2ea0 <mem_manage_fault+0x1a0>)
    2de0:	1a9b      	subs	r3, r3, r2
    2de2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
    2de4:	f04f 0100 	mov.w	r1, #0
    2de8:	2201      	movs	r2, #1
    2dea:	f362 0102 	bfi	r1, r2, #0, #3
    2dee:	f36f 01c5 	bfc	r1, #3, #3
    2df2:	f363 118f 	bfi	r1, r3, #6, #10
    2df6:	482f      	ldr	r0, [pc, #188]	; (2eb4 <mem_manage_fault+0x1b4>)
    2df8:	f7fe fe2e 	bl	1a58 <log_0>
		uint32_t temp = SCB->MMFAR;
    2dfc:	4b2a      	ldr	r3, [pc, #168]	; (2ea8 <mem_manage_fault+0x1a8>)
    2dfe:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e02:	f013 0f80 	tst.w	r3, #128	; 0x80
    2e06:	d102      	bne.n	2e0e <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
    2e08:	f06f 0715 	mvn.w	r7, #21
    2e0c:	e79d      	b.n	2d4a <mem_manage_fault+0x4a>
    2e0e:	4b23      	ldr	r3, [pc, #140]	; (2e9c <mem_manage_fault+0x19c>)
    2e10:	4a23      	ldr	r2, [pc, #140]	; (2ea0 <mem_manage_fault+0x1a0>)
    2e12:	1a9b      	subs	r3, r3, r2
    2e14:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2e16:	f04f 0200 	mov.w	r2, #0
    2e1a:	2101      	movs	r1, #1
    2e1c:	f361 0202 	bfi	r2, r1, #0, #3
    2e20:	f36f 02c5 	bfc	r2, #3, #3
    2e24:	f363 128f 	bfi	r2, r3, #6, #10
    2e28:	4639      	mov	r1, r7
    2e2a:	4823      	ldr	r0, [pc, #140]	; (2eb8 <mem_manage_fault+0x1b8>)
    2e2c:	f7fe fda2 	bl	1974 <log_1>
			if (from_hard_fault != 0) {
    2e30:	2c00      	cmp	r4, #0
    2e32:	d08a      	beq.n	2d4a <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2e34:	4a1c      	ldr	r2, [pc, #112]	; (2ea8 <mem_manage_fault+0x1a8>)
    2e36:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2e3c:	6293      	str	r3, [r2, #40]	; 0x28
    2e3e:	e784      	b.n	2d4a <mem_manage_fault+0x4a>
    2e40:	4b16      	ldr	r3, [pc, #88]	; (2e9c <mem_manage_fault+0x19c>)
    2e42:	4a17      	ldr	r2, [pc, #92]	; (2ea0 <mem_manage_fault+0x1a0>)
    2e44:	1a9b      	subs	r3, r3, r2
    2e46:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
    2e48:	f04f 0100 	mov.w	r1, #0
    2e4c:	2201      	movs	r2, #1
    2e4e:	f362 0102 	bfi	r1, r2, #0, #3
    2e52:	f36f 01c5 	bfc	r1, #3, #3
    2e56:	f363 118f 	bfi	r1, r3, #6, #10
    2e5a:	4818      	ldr	r0, [pc, #96]	; (2ebc <mem_manage_fault+0x1bc>)
    2e5c:	f7fe fdfc 	bl	1a58 <log_0>
    2e60:	e778      	b.n	2d54 <mem_manage_fault+0x54>
    2e62:	4b0e      	ldr	r3, [pc, #56]	; (2e9c <mem_manage_fault+0x19c>)
    2e64:	4a0e      	ldr	r2, [pc, #56]	; (2ea0 <mem_manage_fault+0x1a0>)
    2e66:	1a9b      	subs	r3, r3, r2
    2e68:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
    2e6a:	f04f 0100 	mov.w	r1, #0
    2e6e:	2201      	movs	r2, #1
    2e70:	f362 0102 	bfi	r1, r2, #0, #3
    2e74:	f36f 01c5 	bfc	r1, #3, #3
    2e78:	f363 118f 	bfi	r1, r3, #6, #10
    2e7c:	4810      	ldr	r0, [pc, #64]	; (2ec0 <mem_manage_fault+0x1c0>)
    2e7e:	f7fe fdeb 	bl	1a58 <log_0>
    2e82:	e76d      	b.n	2d60 <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2e84:	4629      	mov	r1, r5
    2e86:	4638      	mov	r0, r7
    2e88:	f7ff fd22 	bl	28d0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2e8c:	4604      	mov	r4, r0
    2e8e:	2800      	cmp	r0, #0
    2e90:	f43f af76 	beq.w	2d80 <mem_manage_fault+0x80>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2e94:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2e98:	2402      	movs	r4, #2
    2e9a:	e771      	b.n	2d80 <mem_manage_fault+0x80>
    2e9c:	000091d4 	.word	0x000091d4
    2ea0:	0000919c 	.word	0x0000919c
    2ea4:	000098ec 	.word	0x000098ec
    2ea8:	e000ed00 	.word	0xe000ed00
    2eac:	00009904 	.word	0x00009904
    2eb0:	00009840 	.word	0x00009840
    2eb4:	00009938 	.word	0x00009938
    2eb8:	00009950 	.word	0x00009950
    2ebc:	00009968 	.word	0x00009968
    2ec0:	000098bc 	.word	0x000098bc

00002ec4 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    2ec4:	b570      	push	{r4, r5, r6, lr}
    2ec6:	4605      	mov	r5, r0
    2ec8:	460c      	mov	r4, r1
    2eca:	4b47      	ldr	r3, [pc, #284]	; (2fe8 <hard_fault+0x124>)
    2ecc:	4a47      	ldr	r2, [pc, #284]	; (2fec <hard_fault+0x128>)
    2ece:	1a9b      	subs	r3, r3, r2
    2ed0:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
    2ed2:	f04f 0100 	mov.w	r1, #0
    2ed6:	2201      	movs	r2, #1
    2ed8:	f362 0102 	bfi	r1, r2, #0, #3
    2edc:	f36f 01c5 	bfc	r1, #3, #3
    2ee0:	f363 118f 	bfi	r1, r3, #6, #10
    2ee4:	4842      	ldr	r0, [pc, #264]	; (2ff0 <hard_fault+0x12c>)
    2ee6:	f7fe fdb7 	bl	1a58 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    2eea:	2300      	movs	r3, #0
    2eec:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2eee:	4b41      	ldr	r3, [pc, #260]	; (2ff4 <hard_fault+0x130>)
    2ef0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    2ef2:	f016 0602 	ands.w	r6, r6, #2
    2ef6:	d109      	bne.n	2f0c <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2ef8:	4b3e      	ldr	r3, [pc, #248]	; (2ff4 <hard_fault+0x130>)
    2efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2efc:	2b00      	cmp	r3, #0
    2efe:	db17      	blt.n	2f30 <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2f00:	4b3c      	ldr	r3, [pc, #240]	; (2ff4 <hard_fault+0x130>)
    2f02:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    2f04:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    2f08:	d124      	bne.n	2f54 <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    2f0a:	bd70      	pop	{r4, r5, r6, pc}
    2f0c:	4b36      	ldr	r3, [pc, #216]	; (2fe8 <hard_fault+0x124>)
    2f0e:	4a37      	ldr	r2, [pc, #220]	; (2fec <hard_fault+0x128>)
    2f10:	1a9b      	subs	r3, r3, r2
    2f12:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
    2f14:	f04f 0100 	mov.w	r1, #0
    2f18:	2201      	movs	r2, #1
    2f1a:	f362 0102 	bfi	r1, r2, #0, #3
    2f1e:	f36f 01c5 	bfc	r1, #3, #3
    2f22:	f363 118f 	bfi	r1, r3, #6, #10
    2f26:	4834      	ldr	r0, [pc, #208]	; (2ff8 <hard_fault+0x134>)
    2f28:	f7fe fd96 	bl	1a58 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2f2c:	2000      	movs	r0, #0
    2f2e:	e7ec      	b.n	2f0a <hard_fault+0x46>
    2f30:	4b2d      	ldr	r3, [pc, #180]	; (2fe8 <hard_fault+0x124>)
    2f32:	4a2e      	ldr	r2, [pc, #184]	; (2fec <hard_fault+0x128>)
    2f34:	1a9b      	subs	r3, r3, r2
    2f36:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
    2f38:	f04f 0100 	mov.w	r1, #0
    2f3c:	2201      	movs	r2, #1
    2f3e:	f362 0102 	bfi	r1, r2, #0, #3
    2f42:	f36f 01c5 	bfc	r1, #3, #3
    2f46:	f363 118f 	bfi	r1, r3, #6, #10
    2f4a:	482c      	ldr	r0, [pc, #176]	; (2ffc <hard_fault+0x138>)
    2f4c:	f7fe fd84 	bl	1a58 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2f50:	4630      	mov	r0, r6
    2f52:	e7da      	b.n	2f0a <hard_fault+0x46>
    2f54:	4b24      	ldr	r3, [pc, #144]	; (2fe8 <hard_fault+0x124>)
    2f56:	4a25      	ldr	r2, [pc, #148]	; (2fec <hard_fault+0x128>)
    2f58:	1a9b      	subs	r3, r3, r2
    2f5a:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
    2f5c:	f04f 0100 	mov.w	r1, #0
    2f60:	2201      	movs	r2, #1
    2f62:	f362 0102 	bfi	r1, r2, #0, #3
    2f66:	f36f 01c5 	bfc	r1, #3, #3
    2f6a:	f363 118f 	bfi	r1, r3, #6, #10
    2f6e:	4824      	ldr	r0, [pc, #144]	; (3000 <hard_fault+0x13c>)
    2f70:	f7fe fd72 	bl	1a58 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    2f74:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    2f76:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2f7a:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2f7e:	429a      	cmp	r2, r3
    2f80:	d00e      	beq.n	2fa0 <hard_fault+0xdc>
		} else if (SCB_MMFSR != 0) {
    2f82:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2f86:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    2f8a:	781b      	ldrb	r3, [r3, #0]
    2f8c:	b9db      	cbnz	r3, 2fc6 <hard_fault+0x102>
		} else if (SCB_BFSR != 0) {
    2f8e:	4b1d      	ldr	r3, [pc, #116]	; (3004 <hard_fault+0x140>)
    2f90:	781b      	ldrb	r3, [r3, #0]
    2f92:	b9f3      	cbnz	r3, 2fd2 <hard_fault+0x10e>
		} else if (SCB_UFSR != 0) {
    2f94:	4b1c      	ldr	r3, [pc, #112]	; (3008 <hard_fault+0x144>)
    2f96:	881b      	ldrh	r3, [r3, #0]
    2f98:	b29b      	uxth	r3, r3
    2f9a:	bb03      	cbnz	r3, 2fde <hard_fault+0x11a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2f9c:	4630      	mov	r0, r6
	return reason;
    2f9e:	e7b4      	b.n	2f0a <hard_fault+0x46>
    2fa0:	4b11      	ldr	r3, [pc, #68]	; (2fe8 <hard_fault+0x124>)
    2fa2:	4a12      	ldr	r2, [pc, #72]	; (2fec <hard_fault+0x128>)
    2fa4:	1a9b      	subs	r3, r3, r2
    2fa6:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2fa8:	f04f 0200 	mov.w	r2, #0
    2fac:	2101      	movs	r1, #1
    2fae:	f361 0202 	bfi	r2, r1, #0, #3
    2fb2:	f36f 02c5 	bfc	r2, #3, #3
    2fb6:	f363 128f 	bfi	r2, r3, #6, #10
    2fba:	6829      	ldr	r1, [r5, #0]
    2fbc:	4813      	ldr	r0, [pc, #76]	; (300c <hard_fault+0x148>)
    2fbe:	f7fe fcd9 	bl	1974 <log_1>
			reason = esf->basic.r0;
    2fc2:	6828      	ldr	r0, [r5, #0]
    2fc4:	e7a1      	b.n	2f0a <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
    2fc6:	4622      	mov	r2, r4
    2fc8:	2101      	movs	r1, #1
    2fca:	4628      	mov	r0, r5
    2fcc:	f7ff fe98 	bl	2d00 <mem_manage_fault>
    2fd0:	e79b      	b.n	2f0a <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
    2fd2:	4622      	mov	r2, r4
    2fd4:	2101      	movs	r1, #1
    2fd6:	4628      	mov	r0, r5
    2fd8:	f7ff fdba 	bl	2b50 <bus_fault>
    2fdc:	e795      	b.n	2f0a <hard_fault+0x46>
			reason = usage_fault(esf);
    2fde:	4628      	mov	r0, r5
    2fe0:	f7ff fcea 	bl	29b8 <usage_fault>
    2fe4:	e791      	b.n	2f0a <hard_fault+0x46>
    2fe6:	bf00      	nop
    2fe8:	000091d4 	.word	0x000091d4
    2fec:	0000919c 	.word	0x0000919c
    2ff0:	00009988 	.word	0x00009988
    2ff4:	e000ed00 	.word	0xe000ed00
    2ff8:	000099a0 	.word	0x000099a0
    2ffc:	000099c4 	.word	0x000099c4
    3000:	000099d4 	.word	0x000099d4
    3004:	e000ed29 	.word	0xe000ed29
    3008:	e000ed2a 	.word	0xe000ed2a
    300c:	000099f4 	.word	0x000099f4

00003010 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    3010:	b508      	push	{r3, lr}
    3012:	460a      	mov	r2, r1
    3014:	480b      	ldr	r0, [pc, #44]	; (3044 <reserved_exception+0x34>)
    3016:	4b0c      	ldr	r3, [pc, #48]	; (3048 <reserved_exception+0x38>)
    3018:	1ac0      	subs	r0, r0, r3
    301a:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    301c:	f04f 0300 	mov.w	r3, #0
    3020:	2101      	movs	r1, #1
    3022:	f361 0302 	bfi	r3, r1, #0, #3
    3026:	f36f 03c5 	bfc	r3, #3, #3
    302a:	f360 138f 	bfi	r3, r0, #6, #10
    302e:	2a0f      	cmp	r2, #15
    3030:	dc05      	bgt.n	303e <reserved_exception+0x2e>
    3032:	4906      	ldr	r1, [pc, #24]	; (304c <reserved_exception+0x3c>)
    3034:	3a10      	subs	r2, #16
    3036:	4806      	ldr	r0, [pc, #24]	; (3050 <reserved_exception+0x40>)
    3038:	f7fe fcd2 	bl	19e0 <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    303c:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    303e:	4905      	ldr	r1, [pc, #20]	; (3054 <reserved_exception+0x44>)
    3040:	e7f8      	b.n	3034 <reserved_exception+0x24>
    3042:	bf00      	nop
    3044:	000091d4 	.word	0x000091d4
    3048:	0000919c 	.word	0x0000919c
    304c:	00009a10 	.word	0x00009a10
    3050:	00009a44 	.word	0x00009a44
    3054:	00009a28 	.word	0x00009a28

00003058 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3058:	b570      	push	{r4, r5, r6, lr}
    305a:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    305c:	4b2b      	ldr	r3, [pc, #172]	; (310c <z_arm_fault+0xb4>)
    305e:	685d      	ldr	r5, [r3, #4]
    3060:	f3c5 0508 	ubfx	r5, r5, #0, #9
    3064:	2300      	movs	r3, #0
    3066:	f383 8811 	msr	BASEPRI, r3
    306a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    306e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    3072:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    3076:	d12a      	bne.n	30ce <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3078:	f002 030c 	and.w	r3, r2, #12
    307c:	2b08      	cmp	r3, #8
    307e:	d010      	beq.n	30a2 <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3080:	f012 0f08 	tst.w	r2, #8
    3084:	d020      	beq.n	30c8 <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
    3086:	460c      	mov	r4, r1
	*nested_exc = false;
    3088:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    308a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    308e:	4629      	mov	r1, r5
    3090:	4620      	mov	r0, r4
    3092:	f004 ff3c 	bl	7f0e <fault_handle>
    3096:	4605      	mov	r5, r0
	if (recoverable) {
    3098:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    309c:	b1d3      	cbz	r3, 30d4 <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    309e:	b00a      	add	sp, #40	; 0x28
    30a0:	bd70      	pop	{r4, r5, r6, pc}
    30a2:	4b1b      	ldr	r3, [pc, #108]	; (3110 <z_arm_fault+0xb8>)
    30a4:	4a1b      	ldr	r2, [pc, #108]	; (3114 <z_arm_fault+0xbc>)
    30a6:	1a9b      	subs	r3, r3, r2
    30a8:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    30aa:	f04f 0100 	mov.w	r1, #0
    30ae:	2201      	movs	r2, #1
    30b0:	f362 0102 	bfi	r1, r2, #0, #3
    30b4:	f36f 01c5 	bfc	r1, #3, #3
    30b8:	f363 118f 	bfi	r1, r3, #6, #10
    30bc:	4816      	ldr	r0, [pc, #88]	; (3118 <z_arm_fault+0xc0>)
    30be:	f7fe fccb 	bl	1a58 <log_0>
	*nested_exc = false;
    30c2:	2600      	movs	r6, #0
		return NULL;
    30c4:	4634      	mov	r4, r6
    30c6:	e7e0      	b.n	308a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    30c8:	4604      	mov	r4, r0
			*nested_exc = true;
    30ca:	2601      	movs	r6, #1
    30cc:	e7dd      	b.n	308a <z_arm_fault+0x32>
	*nested_exc = false;
    30ce:	2600      	movs	r6, #0
		return NULL;
    30d0:	4634      	mov	r4, r6
    30d2:	e7da      	b.n	308a <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    30d4:	2220      	movs	r2, #32
    30d6:	4621      	mov	r1, r4
    30d8:	a801      	add	r0, sp, #4
    30da:	f004 ffb4 	bl	8046 <memcpy>
	if (nested_exc) {
    30de:	b14e      	cbz	r6, 30f4 <z_arm_fault+0x9c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    30e0:	9b08      	ldr	r3, [sp, #32]
    30e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
    30e6:	b95a      	cbnz	r2, 3100 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    30e8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    30ec:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    30f0:	9308      	str	r3, [sp, #32]
    30f2:	e005      	b.n	3100 <z_arm_fault+0xa8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    30f4:	9b08      	ldr	r3, [sp, #32]
    30f6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    30fa:	f023 0301 	bic.w	r3, r3, #1
    30fe:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    3100:	a901      	add	r1, sp, #4
    3102:	4628      	mov	r0, r5
    3104:	f004 fee3 	bl	7ece <z_arm_fatal_error>
    3108:	e7c9      	b.n	309e <z_arm_fault+0x46>
    310a:	bf00      	nop
    310c:	e000ed00 	.word	0xe000ed00
    3110:	000091d4 	.word	0x000091d4
    3114:	0000919c 	.word	0x0000919c
    3118:	00009a58 	.word	0x00009a58

0000311c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    311c:	4a02      	ldr	r2, [pc, #8]	; (3128 <z_arm_fault_init+0xc>)
    311e:	6953      	ldr	r3, [r2, #20]
    3120:	f043 0310 	orr.w	r3, r3, #16
    3124:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    3126:	4770      	bx	lr
    3128:	e000ed00 	.word	0xe000ed00

0000312c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    312c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3130:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3134:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3136:	4672      	mov	r2, lr
	bl z_arm_fault
    3138:	f7ff ff8e 	bl	3058 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    313c:	bd01      	pop	{r0, pc}
    313e:	bf00      	nop

00003140 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3140:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3142:	e006      	b.n	3152 <z_arm_interrupt_init+0x12>
    3144:	f002 010f 	and.w	r1, r2, #15
    3148:	4b09      	ldr	r3, [pc, #36]	; (3170 <z_arm_interrupt_init+0x30>)
    314a:	440b      	add	r3, r1
    314c:	2120      	movs	r1, #32
    314e:	7619      	strb	r1, [r3, #24]
    3150:	3201      	adds	r2, #1
    3152:	2a2f      	cmp	r2, #47	; 0x2f
    3154:	dc0a      	bgt.n	316c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    3156:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    3158:	2b00      	cmp	r3, #0
    315a:	dbf3      	blt.n	3144 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    315c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3160:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3164:	2120      	movs	r1, #32
    3166:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    316a:	e7f1      	b.n	3150 <z_arm_interrupt_init+0x10>
	}
}
    316c:	4770      	bx	lr
    316e:	bf00      	nop
    3170:	e000ecfc 	.word	0xe000ecfc

00003174 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3174:	2000      	movs	r0, #0
    msr CONTROL, r0
    3176:	f380 8814 	msr	CONTROL, r0
    isb
    317a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    317e:	f005 feb7 	bl	8ef0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3182:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3184:	490d      	ldr	r1, [pc, #52]	; (31bc <__start+0x48>)
    str r0, [r1]
    3186:	6008      	str	r0, [r1, #0]
    dsb
    3188:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    318c:	480c      	ldr	r0, [pc, #48]	; (31c0 <__start+0x4c>)
    msr msp, r0
    318e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3192:	f000 f829 	bl	31e8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3196:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3198:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    319c:	4809      	ldr	r0, [pc, #36]	; (31c4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    319e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    31a2:	1840      	adds	r0, r0, r1
    msr PSP, r0
    31a4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    31a8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    31ac:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    31ae:	4308      	orrs	r0, r1
    msr CONTROL, r0
    31b0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    31b4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    31b8:	f7ff faf6 	bl	27a8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    31bc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    31c0:	200018e0 	.word	0x200018e0
    ldr r0, =z_interrupt_stacks
    31c4:	20001a60 	.word	0x20001a60

000031c8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    31c8:	4b06      	ldr	r3, [pc, #24]	; (31e4 <z_arm_clear_arm_mpu_config+0x1c>)
    31ca:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    31cc:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    31d0:	2300      	movs	r3, #0
    31d2:	4283      	cmp	r3, r0
    31d4:	da05      	bge.n	31e2 <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    31d6:	4a03      	ldr	r2, [pc, #12]	; (31e4 <z_arm_clear_arm_mpu_config+0x1c>)
    31d8:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    31da:	2100      	movs	r1, #0
    31dc:	6111      	str	r1, [r2, #16]
    31de:	3301      	adds	r3, #1
    31e0:	e7f7      	b.n	31d2 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    31e2:	4770      	bx	lr
    31e4:	e000ed90 	.word	0xe000ed90

000031e8 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    31e8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    31ea:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    31ec:	2400      	movs	r4, #0
    31ee:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    31f2:	f7ff ffe9 	bl	31c8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    31f6:	4623      	mov	r3, r4
    31f8:	e008      	b.n	320c <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    31fa:	f103 0120 	add.w	r1, r3, #32
    31fe:	4a0e      	ldr	r2, [pc, #56]	; (3238 <z_arm_init_arch_hw_at_boot+0x50>)
    3200:	f04f 30ff 	mov.w	r0, #4294967295
    3204:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    3208:	3301      	adds	r3, #1
    320a:	b2db      	uxtb	r3, r3
    320c:	2b07      	cmp	r3, #7
    320e:	d9f4      	bls.n	31fa <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3210:	2300      	movs	r3, #0
    3212:	e008      	b.n	3226 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3214:	f103 0160 	add.w	r1, r3, #96	; 0x60
    3218:	4a07      	ldr	r2, [pc, #28]	; (3238 <z_arm_init_arch_hw_at_boot+0x50>)
    321a:	f04f 30ff 	mov.w	r0, #4294967295
    321e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3222:	3301      	adds	r3, #1
    3224:	b2db      	uxtb	r3, r3
    3226:	2b07      	cmp	r3, #7
    3228:	d9f4      	bls.n	3214 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    322a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    322c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3230:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3234:	bd10      	pop	{r4, pc}
    3236:	bf00      	nop
    3238:	e000e100 	.word	0xe000e100

0000323c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    323c:	b508      	push	{r3, lr}
	if (_current == thread) {
    323e:	4b08      	ldr	r3, [pc, #32]	; (3260 <z_impl_k_thread_abort+0x24>)
    3240:	689b      	ldr	r3, [r3, #8]
    3242:	4283      	cmp	r3, r0
    3244:	d002      	beq.n	324c <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    3246:	f003 fcb1 	bl	6bac <z_thread_abort>
}
    324a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    324c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3250:	2b00      	cmp	r3, #0
    3252:	d0f8      	beq.n	3246 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3254:	4a03      	ldr	r2, [pc, #12]	; (3264 <z_impl_k_thread_abort+0x28>)
    3256:	6853      	ldr	r3, [r2, #4]
    3258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    325c:	6053      	str	r3, [r2, #4]
    325e:	e7f2      	b.n	3246 <z_impl_k_thread_abort+0xa>
    3260:	20000f8c 	.word	0x20000f8c
    3264:	e000ed00 	.word	0xe000ed00

00003268 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    3268:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    326a:	4b03      	ldr	r3, [pc, #12]	; (3278 <z_arm_configure_static_mpu_regions+0x10>)
    326c:	4a03      	ldr	r2, [pc, #12]	; (327c <z_arm_configure_static_mpu_regions+0x14>)
    326e:	2101      	movs	r1, #1
    3270:	4803      	ldr	r0, [pc, #12]	; (3280 <z_arm_configure_static_mpu_regions+0x18>)
    3272:	f004 fea1 	bl	7fb8 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    3276:	bd08      	pop	{r3, pc}
    3278:	20040000 	.word	0x20040000
    327c:	20000000 	.word	0x20000000
    3280:	00009a88 	.word	0x00009a88

00003284 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    3284:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3286:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    328a:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    328c:	4804      	ldr	r0, [pc, #16]	; (32a0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    328e:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    3290:	2320      	movs	r3, #32
    3292:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3294:	4b03      	ldr	r3, [pc, #12]	; (32a4 <z_arm_configure_dynamic_mpu_regions+0x20>)
    3296:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3298:	2101      	movs	r1, #1
    329a:	f004 fe91 	bl	7fc0 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    329e:	bd08      	pop	{r3, pc}
    32a0:	20000a14 	.word	0x20000a14
    32a4:	150b0000 	.word	0x150b0000

000032a8 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    32a8:	4a06      	ldr	r2, [pc, #24]	; (32c4 <region_init+0x1c>)
    32aa:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    32ac:	680b      	ldr	r3, [r1, #0]
    32ae:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    32b2:	4303      	orrs	r3, r0
    32b4:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    32b8:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    32ba:	688b      	ldr	r3, [r1, #8]
    32bc:	f043 0301 	orr.w	r3, r3, #1
    32c0:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    32c2:	4770      	bx	lr
    32c4:	e000ed90 	.word	0xe000ed90

000032c8 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    32c8:	b510      	push	{r4, lr}
    32ca:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    32cc:	2807      	cmp	r0, #7
    32ce:	d803      	bhi.n	32d8 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    32d0:	f7ff ffea 	bl	32a8 <region_init>

	return index;
    32d4:	4620      	mov	r0, r4
}
    32d6:	bd10      	pop	{r4, pc}
    32d8:	4b09      	ldr	r3, [pc, #36]	; (3300 <region_allocate_and_init+0x38>)
    32da:	4a0a      	ldr	r2, [pc, #40]	; (3304 <region_allocate_and_init+0x3c>)
    32dc:	1a9b      	subs	r3, r3, r2
    32de:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    32e0:	f04f 0200 	mov.w	r2, #0
    32e4:	2101      	movs	r1, #1
    32e6:	f361 0202 	bfi	r2, r1, #0, #3
    32ea:	f36f 02c5 	bfc	r2, #3, #3
    32ee:	f363 128f 	bfi	r2, r3, #6, #10
    32f2:	4601      	mov	r1, r0
    32f4:	4804      	ldr	r0, [pc, #16]	; (3308 <region_allocate_and_init+0x40>)
    32f6:	f7fe fb3d 	bl	1974 <log_1>
		return -EINVAL;
    32fa:	f06f 0015 	mvn.w	r0, #21
    32fe:	e7ea      	b.n	32d6 <region_allocate_and_init+0xe>
    3300:	000091cc 	.word	0x000091cc
    3304:	0000919c 	.word	0x0000919c
    3308:	00009a94 	.word	0x00009a94

0000330c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    330c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3310:	4680      	mov	r8, r0
    3312:	460f      	mov	r7, r1
    3314:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
    3316:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    3318:	2400      	movs	r4, #0
    331a:	e009      	b.n	3330 <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    331c:	4629      	mov	r1, r5
    331e:	b2f0      	uxtb	r0, r6
    3320:	f004 fe2b 	bl	7f7a <mpu_configure_region>
    3324:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    3326:	f110 0f16 	cmn.w	r0, #22
    332a:	d025      	beq.n	3378 <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    332c:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    332e:	3401      	adds	r4, #1
    3330:	42bc      	cmp	r4, r7
    3332:	da21      	bge.n	3378 <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
    3334:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    3338:	eb08 0585 	add.w	r5, r8, r5, lsl #2
    333c:	686a      	ldr	r2, [r5, #4]
    333e:	2a00      	cmp	r2, #0
    3340:	d0f5      	beq.n	332e <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    3342:	f1ba 0f00 	cmp.w	sl, #0
    3346:	d0e9      	beq.n	331c <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    3348:	4628      	mov	r0, r5
    334a:	f004 fe05 	bl	7f58 <mpu_partition_is_valid>
		if (do_sanity_check &&
    334e:	2800      	cmp	r0, #0
    3350:	d1e4      	bne.n	331c <mpu_configure_regions+0x10>
    3352:	4b0b      	ldr	r3, [pc, #44]	; (3380 <mpu_configure_regions+0x74>)
    3354:	4a0b      	ldr	r2, [pc, #44]	; (3384 <mpu_configure_regions+0x78>)
    3356:	1a9b      	subs	r3, r3, r2
    3358:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
    335a:	f04f 0200 	mov.w	r2, #0
    335e:	2101      	movs	r1, #1
    3360:	f361 0202 	bfi	r2, r1, #0, #3
    3364:	f36f 02c5 	bfc	r2, #3, #3
    3368:	f363 128f 	bfi	r2, r3, #6, #10
    336c:	4621      	mov	r1, r4
    336e:	4806      	ldr	r0, [pc, #24]	; (3388 <mpu_configure_regions+0x7c>)
    3370:	f7fe fb00 	bl	1974 <log_1>
			return -EINVAL;
    3374:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    3378:	4630      	mov	r0, r6
    337a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    337e:	bf00      	nop
    3380:	000091cc 	.word	0x000091cc
    3384:	0000919c 	.word	0x0000919c
    3388:	00009abc 	.word	0x00009abc

0000338c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    338c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    338e:	4c03      	ldr	r4, [pc, #12]	; (339c <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3390:	2301      	movs	r3, #1
    3392:	7822      	ldrb	r2, [r4, #0]
    3394:	f7ff ffba 	bl	330c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3398:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    339a:	bd10      	pop	{r4, pc}
    339c:	20000fe5 	.word	0x20000fe5

000033a0 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    33a0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    33a2:	2300      	movs	r3, #0
    33a4:	4a08      	ldr	r2, [pc, #32]	; (33c8 <mpu_configure_dynamic_mpu_regions+0x28>)
    33a6:	7812      	ldrb	r2, [r2, #0]
    33a8:	f7ff ffb0 	bl	330c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    33ac:	f110 0f16 	cmn.w	r0, #22
    33b0:	d008      	beq.n	33c4 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    33b2:	4603      	mov	r3, r0
    33b4:	2b07      	cmp	r3, #7
    33b6:	dc05      	bgt.n	33c4 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    33b8:	4a04      	ldr	r2, [pc, #16]	; (33cc <mpu_configure_dynamic_mpu_regions+0x2c>)
    33ba:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    33bc:	2100      	movs	r1, #0
    33be:	6111      	str	r1, [r2, #16]
    33c0:	3301      	adds	r3, #1
    33c2:	e7f7      	b.n	33b4 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    33c4:	bd08      	pop	{r3, pc}
    33c6:	bf00      	nop
    33c8:	20000fe5 	.word	0x20000fe5
    33cc:	e000ed90 	.word	0xe000ed90

000033d0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    33d0:	4b03      	ldr	r3, [pc, #12]	; (33e0 <arm_core_mpu_enable+0x10>)
    33d2:	2205      	movs	r2, #5
    33d4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    33d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    33da:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    33de:	4770      	bx	lr
    33e0:	e000ed90 	.word	0xe000ed90

000033e4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    33e4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    33e8:	4b01      	ldr	r3, [pc, #4]	; (33f0 <arm_core_mpu_disable+0xc>)
    33ea:	2200      	movs	r2, #0
    33ec:	605a      	str	r2, [r3, #4]
}
    33ee:	4770      	bx	lr
    33f0:	e000ed90 	.word	0xe000ed90

000033f4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    33f4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    33f6:	4b0e      	ldr	r3, [pc, #56]	; (3430 <z_arm_mpu_init+0x3c>)
    33f8:	681d      	ldr	r5, [r3, #0]
    33fa:	2d08      	cmp	r5, #8
    33fc:	d815      	bhi.n	342a <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    33fe:	f7ff fff1 	bl	33e4 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3402:	2400      	movs	r4, #0
    3404:	42a5      	cmp	r5, r4
    3406:	d90a      	bls.n	341e <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    3408:	4b09      	ldr	r3, [pc, #36]	; (3430 <z_arm_mpu_init+0x3c>)
    340a:	6859      	ldr	r1, [r3, #4]
    340c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    3410:	0093      	lsls	r3, r2, #2
    3412:	4419      	add	r1, r3
    3414:	4620      	mov	r0, r4
    3416:	f7ff ff47 	bl	32a8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    341a:	3401      	adds	r4, #1
    341c:	e7f2      	b.n	3404 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    341e:	4b05      	ldr	r3, [pc, #20]	; (3434 <z_arm_mpu_init+0x40>)
    3420:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    3422:	f7ff ffd5 	bl	33d0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3426:	2000      	movs	r0, #0
}
    3428:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    342a:	f04f 30ff 	mov.w	r0, #4294967295
    342e:	e7fb      	b.n	3428 <z_arm_mpu_init+0x34>
    3430:	00009af0 	.word	0x00009af0
    3434:	20000fe5 	.word	0x20000fe5

00003438 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3438:	4b01      	ldr	r3, [pc, #4]	; (3440 <__stdout_hook_install+0x8>)
    343a:	6018      	str	r0, [r3, #0]
}
    343c:	4770      	bx	lr
    343e:	bf00      	nop
    3440:	20000028 	.word	0x20000028

00003444 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3444:	4b06      	ldr	r3, [pc, #24]	; (3460 <nrf52_errata_197+0x1c>)
    3446:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3448:	4a06      	ldr	r2, [pc, #24]	; (3464 <nrf52_errata_197+0x20>)
    344a:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    344c:	2b08      	cmp	r3, #8
    344e:	d001      	beq.n	3454 <nrf52_errata_197+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    3450:	2000      	movs	r0, #0
    3452:	4770      	bx	lr
                switch(var2)
    3454:	2a02      	cmp	r2, #2
    3456:	d001      	beq.n	345c <nrf52_errata_197+0x18>
                        return false;
    3458:	2000      	movs	r0, #0
    345a:	4770      	bx	lr
                        return true;
    345c:	2001      	movs	r0, #1
    #endif
}
    345e:	4770      	bx	lr
    3460:	10000130 	.word	0x10000130
    3464:	10000134 	.word	0x10000134

00003468 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    3468:	b510      	push	{r4, lr}
	__asm__ volatile(
    346a:	f04f 0320 	mov.w	r3, #32
    346e:	f3ef 8411 	mrs	r4, BASEPRI
    3472:	f383 8812 	msr	BASEPRI_MAX, r3
    3476:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    347a:	2301      	movs	r3, #1
    347c:	4a0b      	ldr	r2, [pc, #44]	; (34ac <nordicsemi_nrf52_init+0x44>)
    347e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3482:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3486:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    348a:	f7ff ffdb 	bl	3444 <nrf52_errata_197>
    348e:	b110      	cbz	r0, 3496 <nordicsemi_nrf52_init+0x2e>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    3490:	4b07      	ldr	r3, [pc, #28]	; (34b0 <nordicsemi_nrf52_init+0x48>)
    3492:	2201      	movs	r2, #1
    3494:	601a      	str	r2, [r3, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    3496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    349a:	2201      	movs	r2, #1
    349c:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    34a0:	f384 8811 	msr	BASEPRI, r4
    34a4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    34a8:	2000      	movs	r0, #0
    34aa:	bd10      	pop	{r4, pc}
    34ac:	4001e000 	.word	0x4001e000
    34b0:	40000638 	.word	0x40000638

000034b4 <sys_arch_reboot>:
    *p_gpregret = val;
    34b4:	b2c0      	uxtb	r0, r0
    34b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    34ba:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    34be:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    34c2:	4905      	ldr	r1, [pc, #20]	; (34d8 <sys_arch_reboot+0x24>)
    34c4:	68ca      	ldr	r2, [r1, #12]
    34c6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    34ca:	4b04      	ldr	r3, [pc, #16]	; (34dc <sys_arch_reboot+0x28>)
    34cc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    34ce:	60cb      	str	r3, [r1, #12]
    34d0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    34d4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    34d6:	e7fd      	b.n	34d4 <sys_arch_reboot+0x20>
    34d8:	e000ed00 	.word	0xe000ed00
    34dc:	05fa0004 	.word	0x05fa0004

000034e0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    34e0:	b130      	cbz	r0, 34f0 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    34e2:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    34e4:	0180      	lsls	r0, r0, #6
    34e6:	4b03      	ldr	r3, [pc, #12]	; (34f4 <arch_busy_wait+0x14>)
    34e8:	f043 0301 	orr.w	r3, r3, #1
    34ec:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    34ee:	bd08      	pop	{r3, pc}
    34f0:	4770      	bx	lr
    34f2:	bf00      	nop
    34f4:	000092a0 	.word	0x000092a0

000034f8 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    34f8:	4800      	ldr	r0, [pc, #0]	; (34fc <get_hf_flags+0x4>)
    34fa:	4770      	bx	lr
    34fc:	20000a70 	.word	0x20000a70

00003500 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    3500:	4b03      	ldr	r3, [pc, #12]	; (3510 <get_subsys+0x10>)
    3502:	1ac0      	subs	r0, r0, r3
    3504:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    3506:	4b03      	ldr	r3, [pc, #12]	; (3514 <get_subsys+0x14>)
    3508:	fb03 f000 	mul.w	r0, r3, r0
    350c:	4770      	bx	lr
    350e:	bf00      	nop
    3510:	20000a30 	.word	0x20000a30
    3514:	b6db6db7 	.word	0xb6db6db7

00003518 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3518:	b538      	push	{r3, r4, r5, lr}
    351a:	4605      	mov	r5, r0
    351c:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    351e:	f7ff ffef 	bl	3500 <get_subsys>
    3522:	4601      	mov	r1, r0
    3524:	2240      	movs	r2, #64	; 0x40
    3526:	4803      	ldr	r0, [pc, #12]	; (3534 <onoff_stop+0x1c>)
    3528:	f004 fe68 	bl	81fc <stop>
    352c:	4601      	mov	r1, r0
	notify(mgr, res);
    352e:	4628      	mov	r0, r5
    3530:	47a0      	blx	r4
}
    3532:	bd38      	pop	{r3, r4, r5, pc}
    3534:	00008f74 	.word	0x00008f74

00003538 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3538:	b530      	push	{r4, r5, lr}
    353a:	b083      	sub	sp, #12
    353c:	4605      	mov	r5, r0
    353e:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3540:	f7ff ffde 	bl	3500 <get_subsys>
    3544:	4601      	mov	r1, r0
    3546:	2340      	movs	r3, #64	; 0x40
    3548:	9300      	str	r3, [sp, #0]
    354a:	4623      	mov	r3, r4
    354c:	4a05      	ldr	r2, [pc, #20]	; (3564 <onoff_start+0x2c>)
    354e:	4806      	ldr	r0, [pc, #24]	; (3568 <onoff_start+0x30>)
    3550:	f004 fe6e 	bl	8230 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    3554:	1e01      	subs	r1, r0, #0
    3556:	db01      	blt.n	355c <onoff_start+0x24>
		notify(mgr, err);
	}
}
    3558:	b003      	add	sp, #12
    355a:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    355c:	4628      	mov	r0, r5
    355e:	47a0      	blx	r4
}
    3560:	e7fa      	b.n	3558 <onoff_start+0x20>
    3562:	bf00      	nop
    3564:	00008279 	.word	0x00008279
    3568:	00008f74 	.word	0x00008f74

0000356c <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    356c:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    356e:	b110      	cbz	r0, 3576 <clock_event_handler+0xa>
    3570:	2801      	cmp	r0, #1
    3572:	d00d      	beq.n	3590 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    3574:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3576:	2100      	movs	r1, #0
    3578:	4808      	ldr	r0, [pc, #32]	; (359c <clock_event_handler+0x30>)
    357a:	f004 fdc6 	bl	810a <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    357e:	6883      	ldr	r3, [r0, #8]
    3580:	f013 0f07 	tst.w	r3, #7
    3584:	d1f6      	bne.n	3574 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3586:	2100      	movs	r1, #0
    3588:	4804      	ldr	r0, [pc, #16]	; (359c <clock_event_handler+0x30>)
    358a:	f004 fe25 	bl	81d8 <clkstarted_handle>
    358e:	e7f1      	b.n	3574 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3590:	2101      	movs	r1, #1
    3592:	4802      	ldr	r0, [pc, #8]	; (359c <clock_event_handler+0x30>)
    3594:	f004 fe20 	bl	81d8 <clkstarted_handle>
}
    3598:	e7ec      	b.n	3574 <clock_event_handler+0x8>
    359a:	bf00      	nop
    359c:	00008f74 	.word	0x00008f74

000035a0 <generic_hfclk_start>:
{
    35a0:	b510      	push	{r4, lr}
	__asm__ volatile(
    35a2:	f04f 0320 	mov.w	r3, #32
    35a6:	f3ef 8411 	mrs	r4, BASEPRI
    35aa:	f383 8812 	msr	BASEPRI_MAX, r3
    35ae:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    35b2:	4a13      	ldr	r2, [pc, #76]	; (3600 <generic_hfclk_start+0x60>)
    35b4:	6813      	ldr	r3, [r2, #0]
    35b6:	f043 0302 	orr.w	r3, r3, #2
    35ba:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    35bc:	f013 0f01 	tst.w	r3, #1
    35c0:	d108      	bne.n	35d4 <generic_hfclk_start+0x34>
	bool already_started = false;
    35c2:	2300      	movs	r3, #0
	__asm__ volatile(
    35c4:	f384 8811 	msr	BASEPRI, r4
    35c8:	f3bf 8f6f 	isb	sy
	if (already_started) {
    35cc:	b99b      	cbnz	r3, 35f6 <generic_hfclk_start+0x56>
	hfclk_start();
    35ce:	f004 fe5b 	bl	8288 <hfclk_start>
}
    35d2:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    35d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    35d8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    35dc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    35e0:	f012 0f01 	tst.w	r2, #1
    35e4:	d101      	bne.n	35ea <generic_hfclk_start+0x4a>
	bool already_started = false;
    35e6:	2300      	movs	r3, #0
    35e8:	e7ec      	b.n	35c4 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    35ea:	f7ff ff85 	bl	34f8 <get_hf_flags>
    35ee:	f004 fde0 	bl	81b2 <set_on_state>
			already_started = true;
    35f2:	2301      	movs	r3, #1
    35f4:	e7e6      	b.n	35c4 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    35f6:	2100      	movs	r1, #0
    35f8:	4802      	ldr	r0, [pc, #8]	; (3604 <generic_hfclk_start+0x64>)
    35fa:	f004 fded 	bl	81d8 <clkstarted_handle>
		return;
    35fe:	e7e8      	b.n	35d2 <generic_hfclk_start+0x32>
    3600:	20000a80 	.word	0x20000a80
    3604:	00008f74 	.word	0x00008f74

00003608 <generic_hfclk_stop>:
{
    3608:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    360a:	4b0a      	ldr	r3, [pc, #40]	; (3634 <generic_hfclk_stop+0x2c>)
    360c:	f3bf 8f5b 	dmb	ish
    3610:	e853 2f00 	ldrex	r2, [r3]
    3614:	f022 0102 	bic.w	r1, r2, #2
    3618:	e843 1000 	strex	r0, r1, [r3]
    361c:	2800      	cmp	r0, #0
    361e:	d1f7      	bne.n	3610 <generic_hfclk_stop+0x8>
    3620:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3624:	f012 0f01 	tst.w	r2, #1
    3628:	d000      	beq.n	362c <generic_hfclk_stop+0x24>
}
    362a:	bd08      	pop	{r3, pc}
	hfclk_stop();
    362c:	f004 fe36 	bl	829c <hfclk_stop>
    3630:	e7fb      	b.n	362a <generic_hfclk_stop+0x22>
    3632:	bf00      	nop
    3634:	20000a80 	.word	0x20000a80

00003638 <api_blocking_start>:
{
    3638:	b500      	push	{lr}
    363a:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    363c:	f8cd d000 	str.w	sp, [sp]
    3640:	f8cd d004 	str.w	sp, [sp, #4]
    3644:	2300      	movs	r3, #0
    3646:	9302      	str	r3, [sp, #8]
    3648:	2301      	movs	r3, #1
    364a:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    364c:	466b      	mov	r3, sp
    364e:	4a07      	ldr	r2, [pc, #28]	; (366c <api_blocking_start+0x34>)
    3650:	f004 fe0a 	bl	8268 <api_start>
	if (err < 0) {
    3654:	2800      	cmp	r0, #0
    3656:	db05      	blt.n	3664 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    3658:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    365c:	2300      	movs	r3, #0
    365e:	4668      	mov	r0, sp
    3660:	f002 feb8 	bl	63d4 <z_impl_k_sem_take>
}
    3664:	b005      	add	sp, #20
    3666:	f85d fb04 	ldr.w	pc, [sp], #4
    366a:	bf00      	nop
    366c:	000082b1 	.word	0x000082b1

00003670 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    3670:	b570      	push	{r4, r5, r6, lr}
    3672:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3674:	2200      	movs	r2, #0
    3676:	2101      	movs	r1, #1
    3678:	4610      	mov	r0, r2
    367a:	f7ff f87b 	bl	2774 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    367e:	2000      	movs	r0, #0
    3680:	f7ff f85a 	bl	2738 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3684:	4811      	ldr	r0, [pc, #68]	; (36cc <clk_init+0x5c>)
    3686:	f001 faad 	bl	4be4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    368a:	4b11      	ldr	r3, [pc, #68]	; (36d0 <clk_init+0x60>)
    368c:	4298      	cmp	r0, r3
    368e:	d11a      	bne.n	36c6 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3690:	f005 f905 	bl	889e <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    3694:	2400      	movs	r4, #0
    3696:	e003      	b.n	36a0 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3698:	2301      	movs	r3, #1
    369a:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    369c:	441c      	add	r4, r3
    369e:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    36a0:	2c01      	cmp	r4, #1
    36a2:	d80e      	bhi.n	36c2 <clk_init+0x52>
						get_sub_data(dev, i);
    36a4:	4621      	mov	r1, r4
    36a6:	4630      	mov	r0, r6
    36a8:	f004 fd2f 	bl	810a <get_sub_data>
    36ac:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    36ae:	4621      	mov	r1, r4
    36b0:	4630      	mov	r0, r6
    36b2:	f004 fd37 	bl	8124 <get_onoff_manager>
    36b6:	4907      	ldr	r1, [pc, #28]	; (36d4 <clk_init+0x64>)
    36b8:	f004 f80b 	bl	76d2 <onoff_manager_init>
		if (err < 0) {
    36bc:	2800      	cmp	r0, #0
    36be:	daeb      	bge.n	3698 <clk_init+0x28>
    36c0:	e000      	b.n	36c4 <clk_init+0x54>
	}

	return 0;
    36c2:	2000      	movs	r0, #0
}
    36c4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    36c6:	f06f 0004 	mvn.w	r0, #4
    36ca:	e7fb      	b.n	36c4 <clk_init+0x54>
    36cc:	0000356d 	.word	0x0000356d
    36d0:	0bad0000 	.word	0x0bad0000
    36d4:	00009b6c 	.word	0x00009b6c

000036d8 <lfclk_spinwait>:
{
    36d8:	b570      	push	{r4, r5, r6, lr}
    36da:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    36dc:	2801      	cmp	r0, #1
    36de:	d107      	bne.n	36f0 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    36e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    36e4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    36e8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    36ec:	2b01      	cmp	r3, #1
    36ee:	d058      	beq.n	37a2 <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    36f0:	f005 f9b7 	bl	8a62 <k_is_in_isr>
    36f4:	b928      	cbnz	r0, 3702 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    36f6:	4b2e      	ldr	r3, [pc, #184]	; (37b0 <lfclk_spinwait+0xd8>)
    36f8:	781b      	ldrb	r3, [r3, #0]
    36fa:	2b00      	cmp	r3, #0
    36fc:	d041      	beq.n	3782 <lfclk_spinwait+0xaa>
    36fe:	2300      	movs	r3, #0
    3700:	e000      	b.n	3704 <lfclk_spinwait+0x2c>
    3702:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    3704:	461c      	mov	r4, r3
    3706:	2b00      	cmp	r3, #0
    3708:	d03d      	beq.n	3786 <lfclk_spinwait+0xae>
	__asm__ volatile(
    370a:	f04f 0320 	mov.w	r3, #32
    370e:	f3ef 8611 	mrs	r6, BASEPRI
    3712:	f383 8812 	msr	BASEPRI_MAX, r3
    3716:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    371a:	b924      	cbnz	r4, 3726 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    371c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3720:	2202      	movs	r2, #2
    3722:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3726:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    372a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    372e:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3732:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    3736:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    373a:	d12b      	bne.n	3794 <lfclk_spinwait+0xbc>
    return false;
    373c:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    373e:	b11a      	cbz	r2, 3748 <lfclk_spinwait+0x70>
    3740:	2b01      	cmp	r3, #1
    3742:	d029      	beq.n	3798 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3744:	2d01      	cmp	r5, #1
    3746:	d027      	beq.n	3798 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3748:	b1fc      	cbz	r4, 378a <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    374a:	4630      	mov	r0, r6
    374c:	f7fe ff9c 	bl	2688 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3754:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3758:	2b00      	cmp	r3, #0
    375a:	d1e4      	bne.n	3726 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    375c:	4b15      	ldr	r3, [pc, #84]	; (37b4 <lfclk_spinwait+0xdc>)
    375e:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    3760:	2b00      	cmp	r3, #0
    3762:	d0e0      	beq.n	3726 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3764:	4b13      	ldr	r3, [pc, #76]	; (37b4 <lfclk_spinwait+0xdc>)
    3766:	2200      	movs	r2, #0
    3768:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    376a:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    376c:	2301      	movs	r3, #1
    376e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3772:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3776:	4a10      	ldr	r2, [pc, #64]	; (37b8 <lfclk_spinwait+0xe0>)
    3778:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    377c:	4a0f      	ldr	r2, [pc, #60]	; (37bc <lfclk_spinwait+0xe4>)
    377e:	6013      	str	r3, [r2, #0]
}
    3780:	e7d1      	b.n	3726 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3782:	2301      	movs	r3, #1
    3784:	e7be      	b.n	3704 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    3786:	2600      	movs	r6, #0
    3788:	e7c7      	b.n	371a <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    378a:	2021      	movs	r0, #33	; 0x21
    378c:	2100      	movs	r1, #0
    378e:	f003 f9db 	bl	6b48 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3792:	e7dd      	b.n	3750 <lfclk_spinwait+0x78>
                return true;
    3794:	2201      	movs	r2, #1
    3796:	e7d2      	b.n	373e <lfclk_spinwait+0x66>
	if (isr_mode) {
    3798:	b124      	cbz	r4, 37a4 <lfclk_spinwait+0xcc>
	__asm__ volatile(
    379a:	f386 8811 	msr	BASEPRI, r6
    379e:	f3bf 8f6f 	isb	sy
}
    37a2:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    37a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37a8:	2202      	movs	r2, #2
    37aa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    37ae:	e7f8      	b.n	37a2 <lfclk_spinwait+0xca>
    37b0:	20000fe6 	.word	0x20000fe6
    37b4:	40000104 	.word	0x40000104
    37b8:	e000e100 	.word	0xe000e100
    37bc:	40000008 	.word	0x40000008

000037c0 <z_nrf_clock_control_lf_on>:
{
    37c0:	b510      	push	{r4, lr}
    37c2:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    37c4:	4b10      	ldr	r3, [pc, #64]	; (3808 <z_nrf_clock_control_lf_on+0x48>)
    37c6:	2101      	movs	r1, #1
    37c8:	f3bf 8f5b 	dmb	ish
    37cc:	e853 2f00 	ldrex	r2, [r3]
    37d0:	e843 1000 	strex	r0, r1, [r3]
    37d4:	2800      	cmp	r0, #0
    37d6:	d1f9      	bne.n	37cc <z_nrf_clock_control_lf_on+0xc>
    37d8:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    37dc:	b11a      	cbz	r2, 37e6 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    37de:	1e63      	subs	r3, r4, #1
    37e0:	2b01      	cmp	r3, #1
    37e2:	d90c      	bls.n	37fe <z_nrf_clock_control_lf_on+0x3e>
}
    37e4:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    37e6:	4809      	ldr	r0, [pc, #36]	; (380c <z_nrf_clock_control_lf_on+0x4c>)
    37e8:	f004 fc9c 	bl	8124 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    37ec:	4908      	ldr	r1, [pc, #32]	; (3810 <z_nrf_clock_control_lf_on+0x50>)
    37ee:	2300      	movs	r3, #0
    37f0:	604b      	str	r3, [r1, #4]
    37f2:	60cb      	str	r3, [r1, #12]
    37f4:	2301      	movs	r3, #1
    37f6:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    37f8:	f003 ff87 	bl	770a <onoff_request>
    37fc:	e7ef      	b.n	37de <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    37fe:	4620      	mov	r0, r4
    3800:	f7ff ff6a 	bl	36d8 <lfclk_spinwait>
		break;
    3804:	e7ee      	b.n	37e4 <z_nrf_clock_control_lf_on+0x24>
    3806:	bf00      	nop
    3808:	20000a84 	.word	0x20000a84
    380c:	00008f74 	.word	0x00008f74
    3810:	20000a20 	.word	0x20000a20

00003814 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    3814:	b510      	push	{r4, lr}
    3816:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    3818:	280a      	cmp	r0, #10
    381a:	d007      	beq.n	382c <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    381c:	4b07      	ldr	r3, [pc, #28]	; (383c <console_out+0x28>)
    381e:	6818      	ldr	r0, [r3, #0]
    3820:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    3822:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    3824:	685b      	ldr	r3, [r3, #4]
    3826:	4798      	blx	r3

	return c;
}
    3828:	4620      	mov	r0, r4
    382a:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    382c:	4b03      	ldr	r3, [pc, #12]	; (383c <console_out+0x28>)
    382e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    3830:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    3832:	685b      	ldr	r3, [r3, #4]
    3834:	210d      	movs	r1, #13
    3836:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    3838:	e7f0      	b.n	381c <console_out+0x8>
    383a:	bf00      	nop
    383c:	20000a88 	.word	0x20000a88

00003840 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    3840:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    3842:	4c04      	ldr	r4, [pc, #16]	; (3854 <uart_console_hook_install+0x14>)
    3844:	4620      	mov	r0, r4
    3846:	f7ff fdf7 	bl	3438 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    384a:	4620      	mov	r0, r4
    384c:	f7fc fff8 	bl	840 <__printk_hook_install>
#endif
}
    3850:	bd10      	pop	{r4, pc}
    3852:	bf00      	nop
    3854:	00003815 	.word	0x00003815

00003858 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    3858:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    385a:	4806      	ldr	r0, [pc, #24]	; (3874 <uart_console_init+0x1c>)
    385c:	4b06      	ldr	r3, [pc, #24]	; (3878 <uart_console_init+0x20>)
    385e:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    3860:	f005 f88f 	bl	8982 <z_device_ready>
    3864:	b118      	cbz	r0, 386e <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    3866:	f7ff ffeb 	bl	3840 <uart_console_hook_install>

	return 0;
    386a:	2000      	movs	r0, #0
}
    386c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    386e:	f06f 0012 	mvn.w	r0, #18
    3872:	e7fb      	b.n	386c <uart_console_init+0x14>
    3874:	00008fd4 	.word	0x00008fd4
    3878:	20000a88 	.word	0x20000a88

0000387c <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    387c:	4b1f      	ldr	r3, [pc, #124]	; (38fc <get_drive+0x80>)
    387e:	4003      	ands	r3, r0
    3880:	4a1f      	ldr	r2, [pc, #124]	; (3900 <get_drive+0x84>)
    3882:	4293      	cmp	r3, r2
    3884:	d032      	beq.n	38ec <get_drive+0x70>
    3886:	d816      	bhi.n	38b6 <get_drive+0x3a>
    3888:	2b06      	cmp	r3, #6
    388a:	d02b      	beq.n	38e4 <get_drive+0x68>
    388c:	d906      	bls.n	389c <get_drive+0x20>
    388e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3892:	d10d      	bne.n	38b0 <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
    3894:	2301      	movs	r3, #1
    3896:	700b      	strb	r3, [r1, #0]
	int err = 0;
    3898:	2000      	movs	r0, #0
		break;
    389a:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    389c:	b1fb      	cbz	r3, 38de <get_drive+0x62>
    389e:	2b02      	cmp	r3, #2
    38a0:	d103      	bne.n	38aa <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
    38a2:	2304      	movs	r3, #4
    38a4:	700b      	strb	r3, [r1, #0]
	int err = 0;
    38a6:	2000      	movs	r0, #0
		break;
    38a8:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    38aa:	f06f 0015 	mvn.w	r0, #21
    38ae:	4770      	bx	lr
    38b0:	f06f 0015 	mvn.w	r0, #21
    38b4:	4770      	bx	lr
    38b6:	4a13      	ldr	r2, [pc, #76]	; (3904 <get_drive+0x88>)
    38b8:	4293      	cmp	r3, r2
    38ba:	d01b      	beq.n	38f4 <get_drive+0x78>
    38bc:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    38c0:	d103      	bne.n	38ca <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
    38c2:	2303      	movs	r3, #3
    38c4:	700b      	strb	r3, [r1, #0]
	int err = 0;
    38c6:	2000      	movs	r0, #0
		break;
    38c8:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    38ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    38ce:	d103      	bne.n	38d8 <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
    38d0:	2302      	movs	r3, #2
    38d2:	700b      	strb	r3, [r1, #0]
	int err = 0;
    38d4:	2000      	movs	r0, #0
		break;
    38d6:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    38d8:	f06f 0015 	mvn.w	r0, #21
    38dc:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    38de:	2000      	movs	r0, #0
    38e0:	7008      	strb	r0, [r1, #0]
		break;
    38e2:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    38e4:	2306      	movs	r3, #6
    38e6:	700b      	strb	r3, [r1, #0]
	int err = 0;
    38e8:	2000      	movs	r0, #0
		break;
    38ea:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    38ec:	2307      	movs	r3, #7
    38ee:	700b      	strb	r3, [r1, #0]
	int err = 0;
    38f0:	2000      	movs	r0, #0
		break;
    38f2:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
    38f4:	2305      	movs	r3, #5
    38f6:	700b      	strb	r3, [r1, #0]
	int err = 0;
    38f8:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
    38fa:	4770      	bx	lr
    38fc:	00f00006 	.word	0x00f00006
    3900:	00100006 	.word	0x00100006
    3904:	00400002 	.word	0x00400002

00003908 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3908:	b128      	cbz	r0, 3916 <get_dev+0xe>
    390a:	2801      	cmp	r0, #1
    390c:	d101      	bne.n	3912 <get_dev+0xa>
    390e:	4803      	ldr	r0, [pc, #12]	; (391c <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    3910:	4770      	bx	lr
	const struct device *dev = NULL;
    3912:	2000      	movs	r0, #0
    3914:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3916:	4802      	ldr	r0, [pc, #8]	; (3920 <get_dev+0x18>)
    3918:	4770      	bx	lr
    391a:	bf00      	nop
    391c:	00008f8c 	.word	0x00008f8c
    3920:	00008fa4 	.word	0x00008fa4

00003924 <gpio_nrfx_pin_interrupt_configure>:
{
    3924:	b5f0      	push	{r4, r5, r6, r7, lr}
    3926:	b085      	sub	sp, #20
    3928:	460e      	mov	r6, r1
    392a:	4619      	mov	r1, r3
	return port->config;
    392c:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    392e:	7b1b      	ldrb	r3, [r3, #12]
    3930:	f006 051f 	and.w	r5, r6, #31
    3934:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    3938:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    393c:	d022      	beq.n	3984 <gpio_nrfx_pin_interrupt_configure+0x60>
    393e:	4607      	mov	r7, r0
    3940:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    3942:	2300      	movs	r3, #0
    3944:	9302      	str	r3, [sp, #8]
    3946:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    3948:	4610      	mov	r0, r2
    394a:	f004 fce9 	bl	8320 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    394e:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    3952:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    3954:	6899      	ldr	r1, [r3, #8]
    3956:	40f1      	lsrs	r1, r6
    3958:	f011 0f01 	tst.w	r1, #1
    395c:	d102      	bne.n	3964 <gpio_nrfx_pin_interrupt_configure+0x40>
    395e:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
    3962:	d014      	beq.n	398e <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3964:	2300      	movs	r3, #0
    3966:	aa02      	add	r2, sp, #8
    3968:	4619      	mov	r1, r3
    396a:	4628      	mov	r0, r5
    396c:	f001 fc54 	bl	5218 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3970:	4b1b      	ldr	r3, [pc, #108]	; (39e0 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    3972:	4298      	cmp	r0, r3
    3974:	d131      	bne.n	39da <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3976:	2101      	movs	r1, #1
    3978:	4628      	mov	r0, r5
    397a:	f001 fe25 	bl	55c8 <nrfx_gpiote_trigger_enable>
	return 0;
    397e:	2000      	movs	r0, #0
}
    3980:	b005      	add	sp, #20
    3982:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    3984:	4628      	mov	r0, r5
    3986:	f001 fe83 	bl	5690 <nrfx_gpiote_trigger_disable>
		return 0;
    398a:	2000      	movs	r0, #0
    398c:	e7f8      	b.n	3980 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    398e:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    3992:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3994:	2a01      	cmp	r2, #1
    3996:	d014      	beq.n	39c2 <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
    3998:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    399c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    39a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    39a4:	f013 0f01 	tst.w	r3, #1
    39a8:	d1dc      	bne.n	3964 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    39aa:	f10d 0107 	add.w	r1, sp, #7
    39ae:	4628      	mov	r0, r5
    39b0:	f001 fdae 	bl	5510 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    39b4:	4b0b      	ldr	r3, [pc, #44]	; (39e4 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    39b6:	4298      	cmp	r0, r3
    39b8:	d005      	beq.n	39c6 <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
    39ba:	f10d 0307 	add.w	r3, sp, #7
    39be:	9303      	str	r3, [sp, #12]
    39c0:	e7d0      	b.n	3964 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    39c2:	4a09      	ldr	r2, [pc, #36]	; (39e8 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    39c4:	e7ea      	b.n	399c <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
    39c6:	f10d 0007 	add.w	r0, sp, #7
    39ca:	f001 fdf5 	bl	55b8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    39ce:	4b04      	ldr	r3, [pc, #16]	; (39e0 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    39d0:	4298      	cmp	r0, r3
    39d2:	d0f2      	beq.n	39ba <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
    39d4:	f06f 000b 	mvn.w	r0, #11
    39d8:	e7d2      	b.n	3980 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    39da:	f06f 0004 	mvn.w	r0, #4
    39de:	e7cf      	b.n	3980 <gpio_nrfx_pin_interrupt_configure+0x5c>
    39e0:	0bad0000 	.word	0x0bad0000
    39e4:	0bad0004 	.word	0x0bad0004
    39e8:	50000300 	.word	0x50000300

000039ec <pin_uninit>:
{
    39ec:	b530      	push	{r4, r5, lr}
    39ee:	b083      	sub	sp, #12
    39f0:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    39f2:	f10d 0107 	add.w	r1, sp, #7
    39f6:	f001 fd8b 	bl	5510 <nrfx_gpiote_channel_get>
    39fa:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    39fc:	4620      	mov	r0, r4
    39fe:	f001 fe77 	bl	56f0 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    3a02:	4b0b      	ldr	r3, [pc, #44]	; (3a30 <pin_uninit+0x44>)
    3a04:	4298      	cmp	r0, r3
    3a06:	d10f      	bne.n	3a28 <pin_uninit+0x3c>
	if (free_ch) {
    3a08:	429d      	cmp	r5, r3
    3a0a:	d005      	beq.n	3a18 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    3a0c:	4b08      	ldr	r3, [pc, #32]	; (3a30 <pin_uninit+0x44>)
    3a0e:	4298      	cmp	r0, r3
    3a10:	d107      	bne.n	3a22 <pin_uninit+0x36>
    3a12:	2000      	movs	r0, #0
}
    3a14:	b003      	add	sp, #12
    3a16:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    3a18:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3a1c:	f001 fdc4 	bl	55a8 <nrfx_gpiote_channel_free>
    3a20:	e7f4      	b.n	3a0c <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    3a22:	f06f 0004 	mvn.w	r0, #4
    3a26:	e7f5      	b.n	3a14 <pin_uninit+0x28>
		return -EIO;
    3a28:	f06f 0004 	mvn.w	r0, #4
    3a2c:	e7f2      	b.n	3a14 <pin_uninit+0x28>
    3a2e:	bf00      	nop
    3a30:	0bad0000 	.word	0x0bad0000

00003a34 <gpio_nrfx_pin_configure>:
{
    3a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3a38:	b087      	sub	sp, #28
	return port->config;
    3a3a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3a3e:	f898 300c 	ldrb.w	r3, [r8, #12]
    3a42:	f001 051f 	and.w	r5, r1, #31
    3a46:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    3a4a:	2a00      	cmp	r2, #0
    3a4c:	d044      	beq.n	3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>
    3a4e:	460c      	mov	r4, r1
    3a50:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    3a52:	2600      	movs	r6, #0
    3a54:	9603      	str	r6, [sp, #12]
    3a56:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    3a58:	f10d 0117 	add.w	r1, sp, #23
    3a5c:	4620      	mov	r0, r4
    3a5e:	f001 fd57 	bl	5510 <nrfx_gpiote_channel_get>
    3a62:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3a64:	4633      	mov	r3, r6
    3a66:	aa03      	add	r2, sp, #12
    3a68:	4631      	mov	r1, r6
    3a6a:	4628      	mov	r0, r5
    3a6c:	f001 fbd4 	bl	5218 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3a70:	4b30      	ldr	r3, [pc, #192]	; (3b34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9c>)
    3a72:	4298      	cmp	r0, r3
    3a74:	d15b      	bne.n	3b2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x96>
	if (free_ch) {
    3a76:	4599      	cmp	r9, r3
    3a78:	d036      	beq.n	3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>
	if (flags & GPIO_OUTPUT) {
    3a7a:	f417 7f00 	tst.w	r7, #512	; 0x200
    3a7e:	d043      	beq.n	3b08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x70>
		int rv = get_drive(flags, &drive);
    3a80:	f10d 0103 	add.w	r1, sp, #3
    3a84:	4638      	mov	r0, r7
    3a86:	f7ff fef9 	bl	387c <get_drive>
		if (rv != 0) {
    3a8a:	4606      	mov	r6, r0
    3a8c:	bb40      	cbnz	r0, 3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
		nrfx_gpiote_output_config_t output_config = {
    3a8e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3a92:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3a96:	f417 7f80 	tst.w	r7, #256	; 0x100
    3a9a:	bf0c      	ite	eq
    3a9c:	2301      	moveq	r3, #1
    3a9e:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    3aa0:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    3aa4:	4638      	mov	r0, r7
    3aa6:	f004 fc08 	bl	82ba <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    3aaa:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3aae:	f417 6f00 	tst.w	r7, #2048	; 0x800
    3ab2:	d01e      	beq.n	3af2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3ab4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3ab8:	2101      	movs	r1, #1
    3aba:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    3abe:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    3ac2:	2200      	movs	r2, #0
    3ac4:	a901      	add	r1, sp, #4
    3ac6:	4628      	mov	r0, r5
    3ac8:	f001 fc5c 	bl	5384 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3acc:	4b19      	ldr	r3, [pc, #100]	; (3b34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9c>)
    3ace:	4298      	cmp	r0, r3
    3ad0:	d006      	beq.n	3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
    3ad2:	f06f 0615 	mvn.w	r6, #21
    3ad6:	e003      	b.n	3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
		return pin_uninit(abs_pin);
    3ad8:	4628      	mov	r0, r5
    3ada:	f7ff ff87 	bl	39ec <pin_uninit>
    3ade:	4606      	mov	r6, r0
}
    3ae0:	4630      	mov	r0, r6
    3ae2:	b007      	add	sp, #28
    3ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    3ae8:	f89d 0017 	ldrb.w	r0, [sp, #23]
    3aec:	f001 fd5c 	bl	55a8 <nrfx_gpiote_channel_free>
    3af0:	e7c3      	b.n	3a7a <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3af2:	f417 6f80 	tst.w	r7, #1024	; 0x400
    3af6:	d0e4      	beq.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3af8:	f8d8 2004 	ldr.w	r2, [r8, #4]
    3afc:	2301      	movs	r3, #1
    3afe:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    3b02:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    3b06:	e7dc      	b.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
		.pull = get_pull(flags)
    3b08:	4638      	mov	r0, r7
    3b0a:	f004 fbd6 	bl	82ba <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    3b0e:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3b12:	2300      	movs	r3, #0
    3b14:	461a      	mov	r2, r3
    3b16:	a902      	add	r1, sp, #8
    3b18:	4628      	mov	r0, r5
    3b1a:	f001 fb7d 	bl	5218 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3b1e:	4b05      	ldr	r3, [pc, #20]	; (3b34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9c>)
    3b20:	4298      	cmp	r0, r3
    3b22:	d101      	bne.n	3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>
    3b24:	2600      	movs	r6, #0
    3b26:	e7db      	b.n	3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
    3b28:	f06f 0615 	mvn.w	r6, #21
    3b2c:	e7d8      	b.n	3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
		return -EINVAL;
    3b2e:	f06f 0615 	mvn.w	r6, #21
    3b32:	e7d5      	b.n	3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
    3b34:	0bad0000 	.word	0x0bad0000

00003b38 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3b38:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3b3a:	f001 fd2b 	bl	5594 <nrfx_gpiote_is_init>
    3b3e:	b108      	cbz	r0, 3b44 <gpio_nrfx_init+0xc>
		return 0;
    3b40:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3b42:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    3b44:	f001 fcfc 	bl	5540 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    3b48:	4b08      	ldr	r3, [pc, #32]	; (3b6c <gpio_nrfx_init+0x34>)
    3b4a:	4298      	cmp	r0, r3
    3b4c:	d10a      	bne.n	3b64 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3b4e:	2100      	movs	r1, #0
    3b50:	4807      	ldr	r0, [pc, #28]	; (3b70 <gpio_nrfx_init+0x38>)
    3b52:	f001 fcd7 	bl	5504 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3b56:	2200      	movs	r2, #0
    3b58:	2105      	movs	r1, #5
    3b5a:	2006      	movs	r0, #6
    3b5c:	f7fe fe0a 	bl	2774 <z_arm_irq_priority_set>
	return 0;
    3b60:	2000      	movs	r0, #0
    3b62:	e7ee      	b.n	3b42 <gpio_nrfx_init+0xa>
		return -EIO;
    3b64:	f06f 0004 	mvn.w	r0, #4
    3b68:	e7eb      	b.n	3b42 <gpio_nrfx_init+0xa>
    3b6a:	bf00      	nop
    3b6c:	0bad0000 	.word	0x0bad0000
    3b70:	000083b1 	.word	0x000083b1

00003b74 <led_pwm_blink>:
{
    3b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b78:	b089      	sub	sp, #36	; 0x24
	const struct led_pwm_config *config = DEV_CFG(dev);
    3b7a:	6840      	ldr	r0, [r0, #4]
	if (led >= config->num_leds) {
    3b7c:	6804      	ldr	r4, [r0, #0]
    3b7e:	428c      	cmp	r4, r1
    3b80:	d96d      	bls.n	3c5e <led_pwm_blink+0xea>
	return __builtin_add_overflow(a, b, result);
}

static inline bool u32_add_overflow(uint32_t a, uint32_t b, uint32_t *result)
{
	return __builtin_add_overflow(a, b, result);
    3b82:	2400      	movs	r4, #0
    3b84:	18d3      	adds	r3, r2, r3
    3b86:	d25b      	bcs.n	3c40 <led_pwm_blink+0xcc>
	if (u32_add_overflow(delay_on, delay_off, &period_usec) ||
    3b88:	2c00      	cmp	r4, #0
    3b8a:	d16b      	bne.n	3c64 <led_pwm_blink+0xf0>
	return __builtin_mul_overflow(a, b, result);
}

static inline bool u32_mul_overflow(uint32_t a, uint32_t b, uint32_t *result)
{
	return __builtin_mul_overflow(a, b, result);
    3b8c:	2600      	movs	r6, #0
    3b8e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    3b92:	fba3 3404 	umull	r3, r4, r3, r4
    3b96:	469a      	mov	sl, r3
    3b98:	2c00      	cmp	r4, #0
    3b9a:	d153      	bne.n	3c44 <led_pwm_blink+0xd0>
    3b9c:	2e00      	cmp	r6, #0
    3b9e:	d164      	bne.n	3c6a <led_pwm_blink+0xf6>
    3ba0:	2300      	movs	r3, #0
    3ba2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    3ba6:	fba2 4506 	umull	r4, r5, r2, r6
    3baa:	e9cd 4502 	strd	r4, r5, [sp, #8]
    3bae:	2d00      	cmp	r5, #0
    3bb0:	d14a      	bne.n	3c48 <led_pwm_blink+0xd4>
	    u32_mul_overflow(period_usec, 1000, &period_usec) ||
    3bb2:	2b00      	cmp	r3, #0
    3bb4:	d15c      	bne.n	3c70 <led_pwm_blink+0xfc>
	led_pwm = &config->led[led];
    3bb6:	6843      	ldr	r3, [r0, #4]
    3bb8:	010a      	lsls	r2, r1, #4
    3bba:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	return pwm_pin_set_usec(led_pwm->dev, led_pwm->channel,
    3bbe:	589e      	ldr	r6, [r3, r2]
    3bc0:	f8d1 8004 	ldr.w	r8, [r1, #4]
    3bc4:	f891 900c 	ldrb.w	r9, [r1, #12]
	api = (struct pwm_driver_api *)dev->api;
    3bc8:	68b3      	ldr	r3, [r6, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
    3bca:	685b      	ldr	r3, [r3, #4]
    3bcc:	aa06      	add	r2, sp, #24
    3bce:	4641      	mov	r1, r8
    3bd0:	4630      	mov	r0, r6
    3bd2:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
    3bd4:	2800      	cmp	r0, #0
    3bd6:	d139      	bne.n	3c4c <led_pwm_blink+0xd8>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
    3bd8:	9d06      	ldr	r5, [sp, #24]
    3bda:	9f07      	ldr	r7, [sp, #28]
    3bdc:	4651      	mov	r1, sl
    3bde:	fbaa ab05 	umull	sl, fp, sl, r5
    3be2:	fb07 bb01 	mla	fp, r7, r1, fp
    3be6:	4a24      	ldr	r2, [pc, #144]	; (3c78 <led_pwm_blink+0x104>)
    3be8:	2300      	movs	r3, #0
    3bea:	4650      	mov	r0, sl
    3bec:	4659      	mov	r1, fp
    3bee:	f7fc fa87 	bl	100 <__aeabi_uldivmod>
    3bf2:	9005      	str	r0, [sp, #20]
	if (period_cycles >= ((uint64_t)1 << 32)) {
    3bf4:	f04f 32ff 	mov.w	r2, #4294967295
    3bf8:	4b20      	ldr	r3, [pc, #128]	; (3c7c <led_pwm_blink+0x108>)
    3bfa:	455b      	cmp	r3, fp
    3bfc:	bf08      	it	eq
    3bfe:	4552      	cmpeq	r2, sl
    3c00:	d327      	bcc.n	3c52 <led_pwm_blink+0xde>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
    3c02:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    3c06:	fba1 4505 	umull	r4, r5, r1, r5
    3c0a:	fb07 5501 	mla	r5, r7, r1, r5
    3c0e:	4a1a      	ldr	r2, [pc, #104]	; (3c78 <led_pwm_blink+0x104>)
    3c10:	2300      	movs	r3, #0
    3c12:	4620      	mov	r0, r4
    3c14:	4629      	mov	r1, r5
    3c16:	f7fc fa73 	bl	100 <__aeabi_uldivmod>
    3c1a:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
    3c1c:	f04f 30ff 	mov.w	r0, #4294967295
    3c20:	4916      	ldr	r1, [pc, #88]	; (3c7c <led_pwm_blink+0x108>)
    3c22:	42a9      	cmp	r1, r5
    3c24:	bf08      	it	eq
    3c26:	42a0      	cmpeq	r0, r4
    3c28:	d316      	bcc.n	3c58 <led_pwm_blink+0xe4>
	api = (struct pwm_driver_api *)dev->api;
    3c2a:	68b2      	ldr	r2, [r6, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
    3c2c:	6814      	ldr	r4, [r2, #0]
    3c2e:	f8cd 9000 	str.w	r9, [sp]
    3c32:	9a05      	ldr	r2, [sp, #20]
    3c34:	4641      	mov	r1, r8
    3c36:	4630      	mov	r0, r6
    3c38:	47a0      	blx	r4
}
    3c3a:	b009      	add	sp, #36	; 0x24
    3c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return __builtin_add_overflow(a, b, result);
    3c40:	2401      	movs	r4, #1
    3c42:	e7a1      	b.n	3b88 <led_pwm_blink+0x14>
	return __builtin_mul_overflow(a, b, result);
    3c44:	2601      	movs	r6, #1
    3c46:	e7a9      	b.n	3b9c <led_pwm_blink+0x28>
    3c48:	2301      	movs	r3, #1
    3c4a:	e7b2      	b.n	3bb2 <led_pwm_blink+0x3e>
		return -EIO;
    3c4c:	f06f 0004 	mvn.w	r0, #4
    3c50:	e7f3      	b.n	3c3a <led_pwm_blink+0xc6>
		return -ENOTSUP;
    3c52:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3c56:	e7f0      	b.n	3c3a <led_pwm_blink+0xc6>
		return -ENOTSUP;
    3c58:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return pwm_pin_set_usec(led_pwm->dev, led_pwm->channel,
    3c5c:	e7ed      	b.n	3c3a <led_pwm_blink+0xc6>
		return -EINVAL;
    3c5e:	f06f 0015 	mvn.w	r0, #21
    3c62:	e7ea      	b.n	3c3a <led_pwm_blink+0xc6>
		return -EINVAL;
    3c64:	f06f 0015 	mvn.w	r0, #21
    3c68:	e7e7      	b.n	3c3a <led_pwm_blink+0xc6>
    3c6a:	f06f 0015 	mvn.w	r0, #21
    3c6e:	e7e4      	b.n	3c3a <led_pwm_blink+0xc6>
    3c70:	f06f 0015 	mvn.w	r0, #21
    3c74:	e7e1      	b.n	3c3a <led_pwm_blink+0xc6>
    3c76:	bf00      	nop
    3c78:	000f4240 	.word	0x000f4240
    3c7c:	000f423f 	.word	0x000f423f

00003c80 <led_pwm_init>:
{
	return led_pwm_set_brightness(dev, led, 0);
}

static int led_pwm_init(const struct device *dev)
{
    3c80:	b570      	push	{r4, r5, r6, lr}
    3c82:	4606      	mov	r6, r0
	const struct led_pwm_config *config = DEV_CFG(dev);
    3c84:	6845      	ldr	r5, [r0, #4]
	int i;

	if (!config->num_leds) {
    3c86:	682b      	ldr	r3, [r5, #0]
    3c88:	b10b      	cbz	r3, 3c8e <led_pwm_init+0xe>
		LOG_ERR("%s: no LEDs found (DT child nodes missing)",
			dev->name);
		return -ENODEV;
	}

	for (i = 0; i < config->num_leds; i++) {
    3c8a:	2400      	movs	r4, #0
    3c8c:	e014      	b.n	3cb8 <led_pwm_init+0x38>
    3c8e:	4b1a      	ldr	r3, [pc, #104]	; (3cf8 <led_pwm_init+0x78>)
    3c90:	4a1a      	ldr	r2, [pc, #104]	; (3cfc <led_pwm_init+0x7c>)
    3c92:	1a9b      	subs	r3, r3, r2
    3c94:	08db      	lsrs	r3, r3, #3
		LOG_ERR("%s: no LEDs found (DT child nodes missing)",
    3c96:	f04f 0200 	mov.w	r2, #0
    3c9a:	2101      	movs	r1, #1
    3c9c:	f361 0202 	bfi	r2, r1, #0, #3
    3ca0:	f36f 02c5 	bfc	r2, #3, #3
    3ca4:	f363 128f 	bfi	r2, r3, #6, #10
    3ca8:	6801      	ldr	r1, [r0, #0]
    3caa:	4815      	ldr	r0, [pc, #84]	; (3d00 <led_pwm_init+0x80>)
    3cac:	f7fd fe62 	bl	1974 <log_1>
		return -ENODEV;
    3cb0:	f06f 0012 	mvn.w	r0, #18
    3cb4:	e01f      	b.n	3cf6 <led_pwm_init+0x76>
	for (i = 0; i < config->num_leds; i++) {
    3cb6:	3401      	adds	r4, #1
    3cb8:	682b      	ldr	r3, [r5, #0]
    3cba:	429c      	cmp	r4, r3
    3cbc:	da1a      	bge.n	3cf4 <led_pwm_init+0x74>
		const struct led_pwm *led = &config->led[i];
    3cbe:	686a      	ldr	r2, [r5, #4]
    3cc0:	0123      	lsls	r3, r4, #4

		if (!device_is_ready(led->dev)) {
    3cc2:	58d0      	ldr	r0, [r2, r3]
    3cc4:	f004 fe5d 	bl	8982 <z_device_ready>
    3cc8:	2800      	cmp	r0, #0
    3cca:	d1f4      	bne.n	3cb6 <led_pwm_init+0x36>
    3ccc:	4b0a      	ldr	r3, [pc, #40]	; (3cf8 <led_pwm_init+0x78>)
    3cce:	4a0b      	ldr	r2, [pc, #44]	; (3cfc <led_pwm_init+0x7c>)
    3cd0:	1a9b      	subs	r3, r3, r2
    3cd2:	08db      	lsrs	r3, r3, #3
			LOG_ERR("%s: pwm device not ready", dev->name);
    3cd4:	f04f 0200 	mov.w	r2, #0
    3cd8:	2101      	movs	r1, #1
    3cda:	f361 0202 	bfi	r2, r1, #0, #3
    3cde:	f36f 02c5 	bfc	r2, #3, #3
    3ce2:	f363 128f 	bfi	r2, r3, #6, #10
    3ce6:	6831      	ldr	r1, [r6, #0]
    3ce8:	4806      	ldr	r0, [pc, #24]	; (3d04 <led_pwm_init+0x84>)
    3cea:	f7fd fe43 	bl	1974 <log_1>
			return -ENODEV;
    3cee:	f06f 0012 	mvn.w	r0, #18
    3cf2:	e000      	b.n	3cf6 <led_pwm_init+0x76>
		}
	}

	return 0;
    3cf4:	2000      	movs	r0, #0
}
    3cf6:	bd70      	pop	{r4, r5, r6, pc}
    3cf8:	000091ac 	.word	0x000091ac
    3cfc:	0000919c 	.word	0x0000919c
    3d00:	00009bcc 	.word	0x00009bcc
    3d04:	00009bf8 	.word	0x00009bf8

00003d08 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    3d08:	4802      	ldr	r0, [pc, #8]	; (3d14 <pwm_nrfx_get_cycles_per_sec+0xc>)
    3d0a:	2100      	movs	r1, #0
    3d0c:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    3d10:	2000      	movs	r0, #0
    3d12:	4770      	bx	lr
    3d14:	00f42400 	.word	0x00f42400

00003d18 <pwm_period_check_and_set>:
{
    3d18:	b570      	push	{r4, r5, r6, lr}
    3d1a:	460e      	mov	r6, r1
    3d1c:	4619      	mov	r1, r3
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    3d1e:	2400      	movs	r4, #0
    3d20:	e001      	b.n	3d26 <pwm_period_check_and_set+0xe>
    3d22:	3401      	adds	r4, #1
    3d24:	b2e4      	uxtb	r4, r4
    3d26:	2c03      	cmp	r4, #3
    3d28:	d81b      	bhi.n	3d62 <pwm_period_check_and_set+0x4a>
		if (i != channel) {
    3d2a:	4294      	cmp	r4, r2
    3d2c:	d0f9      	beq.n	3d22 <pwm_period_check_and_set+0xa>
				data->current[i]
    3d2e:	eb06 0544 	add.w	r5, r6, r4, lsl #1
    3d32:	88ad      	ldrh	r5, [r5, #4]
			uint16_t channel_pulse_cycle =
    3d34:	f3c5 050e 	ubfx	r5, r5, #0, #15
			if (channel_pulse_cycle > 0) {
    3d38:	2d00      	cmp	r5, #0
    3d3a:	d0f2      	beq.n	3d22 <pwm_period_check_and_set+0xa>
    3d3c:	4b1e      	ldr	r3, [pc, #120]	; (3db8 <pwm_period_check_and_set+0xa0>)
    3d3e:	4a1f      	ldr	r2, [pc, #124]	; (3dbc <pwm_period_check_and_set+0xa4>)
    3d40:	1a9b      	subs	r3, r3, r2
    3d42:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Incompatible period.");
    3d44:	f04f 0100 	mov.w	r1, #0
    3d48:	2201      	movs	r2, #1
    3d4a:	f362 0102 	bfi	r1, r2, #0, #3
    3d4e:	f36f 01c5 	bfc	r1, #3, #3
    3d52:	f363 118f 	bfi	r1, r3, #6, #10
    3d56:	481a      	ldr	r0, [pc, #104]	; (3dc0 <pwm_period_check_and_set+0xa8>)
    3d58:	f7fd fe7e 	bl	1a58 <log_0>
				return -EINVAL;
    3d5c:	f06f 0015 	mvn.w	r0, #21
    3d60:	e01b      	b.n	3d9a <pwm_period_check_and_set+0x82>
	countertop = period_cycles;
    3d62:	460c      	mov	r4, r1
	prescaler = 0;
    3d64:	2200      	movs	r2, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    3d66:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    3d6a:	d317      	bcc.n	3d9c <pwm_period_check_and_set+0x84>
		countertop >>= 1;
    3d6c:	0864      	lsrs	r4, r4, #1
		++prescaler;
    3d6e:	3201      	adds	r2, #1
    3d70:	b2d2      	uxtb	r2, r2
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    3d72:	2a07      	cmp	r2, #7
    3d74:	d9f7      	bls.n	3d66 <pwm_period_check_and_set+0x4e>
    3d76:	4b10      	ldr	r3, [pc, #64]	; (3db8 <pwm_period_check_and_set+0xa0>)
    3d78:	4a10      	ldr	r2, [pc, #64]	; (3dbc <pwm_period_check_and_set+0xa4>)
    3d7a:	1a9b      	subs	r3, r3, r2
    3d7c:	08db      	lsrs	r3, r3, #3
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
    3d7e:	f04f 0200 	mov.w	r2, #0
    3d82:	2001      	movs	r0, #1
    3d84:	f360 0202 	bfi	r2, r0, #0, #3
    3d88:	f36f 02c5 	bfc	r2, #3, #3
    3d8c:	f363 128f 	bfi	r2, r3, #6, #10
    3d90:	480c      	ldr	r0, [pc, #48]	; (3dc4 <pwm_period_check_and_set+0xac>)
    3d92:	f7fd fdef 	bl	1974 <log_1>
	return -EINVAL;
    3d96:	f06f 0015 	mvn.w	r0, #21
}
    3d9a:	bd70      	pop	{r4, r5, r6, pc}
			data->period_cycles = period_cycles;
    3d9c:	6031      	str	r1, [r6, #0]
			data->prescaler     = prescaler;
    3d9e:	73b2      	strb	r2, [r6, #14]
			data->countertop    = (uint16_t)countertop;
    3da0:	b2a4      	uxth	r4, r4
    3da2:	81b4      	strh	r4, [r6, #12]
			nrf_pwm_configure(config->pwm.p_registers,
    3da4:	6803      	ldr	r3, [r0, #0]
    3da6:	7b81      	ldrb	r1, [r0, #14]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
    3da8:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    p_reg->MODE       = mode;
    3dac:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    3db0:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
			return 0;
    3db4:	2000      	movs	r0, #0
    3db6:	e7f0      	b.n	3d9a <pwm_period_check_and_set+0x82>
    3db8:	000091e4 	.word	0x000091e4
    3dbc:	0000919c 	.word	0x0000919c
    3dc0:	00009c50 	.word	0x00009c50
    3dc4:	00009c68 	.word	0x00009c68

00003dc8 <pwm_nrfx_pin_set>:
{
    3dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3dcc:	4699      	mov	r9, r3
    3dce:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
	const struct pwm_nrfx_config *config = dev->config;
    3dd2:	6845      	ldr	r5, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    3dd4:	6907      	ldr	r7, [r0, #16]
	if (flags) {
    3dd6:	2b00      	cmp	r3, #0
    3dd8:	f040 80ad 	bne.w	3f36 <pwm_nrfx_pin_set+0x16e>
    3ddc:	4688      	mov	r8, r1
    3dde:	4616      	mov	r6, r2
	channel = pwm_channel_map(config->initial_config.output_pins, pwm);
    3de0:	f105 0008 	add.w	r0, r5, #8
    3de4:	f004 fb12 	bl	840c <pwm_channel_map>
    3de8:	4604      	mov	r4, r0
	if (channel == NRF_PWM_CHANNEL_COUNT) {
    3dea:	2804      	cmp	r0, #4
    3dec:	d00c      	beq.n	3e08 <pwm_nrfx_pin_set+0x40>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    3dee:	4639      	mov	r1, r7
    3df0:	f004 fb1d 	bl	842e <pwm_channel_is_active>
    3df4:	b9e0      	cbnz	r0, 3e30 <pwm_nrfx_pin_set+0x68>
		      !any_other_channel_is_active(channel, data);
    3df6:	4639      	mov	r1, r7
    3df8:	4620      	mov	r0, r4
    3dfa:	f004 fb27 	bl	844c <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    3dfe:	2800      	cmp	r0, #0
    3e00:	d13d      	bne.n	3e7e <pwm_nrfx_pin_set+0xb6>
    3e02:	f04f 0a01 	mov.w	sl, #1
    3e06:	e015      	b.n	3e34 <pwm_nrfx_pin_set+0x6c>
    3e08:	4b4d      	ldr	r3, [pc, #308]	; (3f40 <pwm_nrfx_pin_set+0x178>)
    3e0a:	4a4e      	ldr	r2, [pc, #312]	; (3f44 <pwm_nrfx_pin_set+0x17c>)
    3e0c:	1a9b      	subs	r3, r3, r2
    3e0e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("PWM pin %d not enabled through DTS configuration.",
    3e10:	f04f 0200 	mov.w	r2, #0
    3e14:	2101      	movs	r1, #1
    3e16:	f361 0202 	bfi	r2, r1, #0, #3
    3e1a:	f36f 02c5 	bfc	r2, #3, #3
    3e1e:	f363 128f 	bfi	r2, r3, #6, #10
    3e22:	4641      	mov	r1, r8
    3e24:	4848      	ldr	r0, [pc, #288]	; (3f48 <pwm_nrfx_pin_set+0x180>)
    3e26:	f7fd fda5 	bl	1974 <log_1>
		return -EINVAL;
    3e2a:	f06f 0015 	mvn.w	r0, #21
    3e2e:	e055      	b.n	3edc <pwm_nrfx_pin_set+0x114>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    3e30:	f04f 0a00 	mov.w	sl, #0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    3e34:	7bab      	ldrb	r3, [r5, #14]
    3e36:	2b01      	cmp	r3, #1
    3e38:	d024      	beq.n	3e84 <pwm_nrfx_pin_set+0xbc>
	if (period_cycles != 0 && period_cycles != data->period_cycles) {
    3e3a:	b116      	cbz	r6, 3e42 <pwm_nrfx_pin_set+0x7a>
    3e3c:	683b      	ldr	r3, [r7, #0]
    3e3e:	42b3      	cmp	r3, r6
    3e40:	d124      	bne.n	3e8c <pwm_nrfx_pin_set+0xc4>
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    3e42:	46b3      	mov	fp, r6
    3e44:	454e      	cmp	r6, r9
    3e46:	bf28      	it	cs
    3e48:	46cb      	movcs	fp, r9
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    3e4a:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    3e4e:	888b      	ldrh	r3, [r1, #4]
    3e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
    3e54:	7bba      	ldrb	r2, [r7, #14]
    3e56:	fa2b f202 	lsr.w	r2, fp, r2
    3e5a:	4313      	orrs	r3, r2
	data->current[channel] = (
    3e5c:	808b      	strh	r3, [r1, #4]
	if (!pwm_channel_is_active(channel, data)) {
    3e5e:	4639      	mov	r1, r7
    3e60:	4620      	mov	r0, r4
    3e62:	f004 fae4 	bl	842e <pwm_channel_is_active>
    3e66:	2800      	cmp	r0, #0
    3e68:	d154      	bne.n	3f14 <pwm_nrfx_pin_set+0x14c>
			config->initial_config.output_pins[channel]
    3e6a:	192b      	adds	r3, r5, r4
    3e6c:	f993 2008 	ldrsb.w	r2, [r3, #8]
			&& !channel_inverted_state;
    3e70:	f1bb 0f00 	cmp.w	fp, #0
    3e74:	d115      	bne.n	3ea2 <pwm_nrfx_pin_set+0xda>
    3e76:	2a00      	cmp	r2, #0
    3e78:	db11      	blt.n	3e9e <pwm_nrfx_pin_set+0xd6>
    3e7a:	2301      	movs	r3, #1
    3e7c:	e012      	b.n	3ea4 <pwm_nrfx_pin_set+0xdc>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    3e7e:	f04f 0a00 	mov.w	sl, #0
    3e82:	e7d7      	b.n	3e34 <pwm_nrfx_pin_set+0x6c>
		period_cycles /= 2;
    3e84:	0876      	lsrs	r6, r6, #1
		pulse_cycles /= 2;
    3e86:	ea4f 0959 	mov.w	r9, r9, lsr #1
    3e8a:	e7d6      	b.n	3e3a <pwm_nrfx_pin_set+0x72>
		int ret = pwm_period_check_and_set(config, data, channel,
    3e8c:	4633      	mov	r3, r6
    3e8e:	4622      	mov	r2, r4
    3e90:	4639      	mov	r1, r7
    3e92:	4628      	mov	r0, r5
    3e94:	f7ff ff40 	bl	3d18 <pwm_period_check_and_set>
		if (ret) {
    3e98:	2800      	cmp	r0, #0
    3e9a:	d0d2      	beq.n	3e42 <pwm_nrfx_pin_set+0x7a>
    3e9c:	e01e      	b.n	3edc <pwm_nrfx_pin_set+0x114>
			&& !channel_inverted_state;
    3e9e:	2300      	movs	r3, #0
    3ea0:	e000      	b.n	3ea4 <pwm_nrfx_pin_set+0xdc>
    3ea2:	2300      	movs	r3, #0
			&& channel_inverted_state;
    3ea4:	454e      	cmp	r6, r9
    3ea6:	d803      	bhi.n	3eb0 <pwm_nrfx_pin_set+0xe8>
    3ea8:	2a00      	cmp	r2, #0
    3eaa:	db19      	blt.n	3ee0 <pwm_nrfx_pin_set+0x118>
    3eac:	2200      	movs	r2, #0
    3eae:	e000      	b.n	3eb2 <pwm_nrfx_pin_set+0xea>
    3eb0:	2200      	movs	r2, #0
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
    3eb2:	b903      	cbnz	r3, 3eb6 <pwm_nrfx_pin_set+0xee>
    3eb4:	b1c2      	cbz	r2, 3ee8 <pwm_nrfx_pin_set+0x120>
    *p_pin = pin_number & 0x1F;
    3eb6:	f008 021f 	and.w	r2, r8, #31
    return pin_number >> 5;
    3eba:	ea4f 1858 	mov.w	r8, r8, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3ebe:	f1b8 0f01 	cmp.w	r8, #1
    3ec2:	d00f      	beq.n	3ee4 <pwm_nrfx_pin_set+0x11c>
        case 0: return NRF_P0;
    3ec4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3ec8:	2301      	movs	r3, #1
    3eca:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    3ecc:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
		if (!any_other_channel_is_active(channel, data)) {
    3ed0:	4639      	mov	r1, r7
    3ed2:	4620      	mov	r0, r4
    3ed4:	f004 faba 	bl	844c <any_other_channel_is_active>
    3ed8:	b1b0      	cbz	r0, 3f08 <pwm_nrfx_pin_set+0x140>
	return 0;
    3eda:	2000      	movs	r0, #0
}
    3edc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& channel_inverted_state;
    3ee0:	2201      	movs	r2, #1
    3ee2:	e7e6      	b.n	3eb2 <pwm_nrfx_pin_set+0xea>
        case 1: return NRF_P1;
    3ee4:	4919      	ldr	r1, [pc, #100]	; (3f4c <pwm_nrfx_pin_set+0x184>)
    3ee6:	e7ef      	b.n	3ec8 <pwm_nrfx_pin_set+0x100>
    *p_pin = pin_number & 0x1F;
    3ee8:	f008 021f 	and.w	r2, r8, #31
    return pin_number >> 5;
    3eec:	ea4f 1858 	mov.w	r8, r8, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3ef0:	f1b8 0f01 	cmp.w	r8, #1
    3ef4:	d006      	beq.n	3f04 <pwm_nrfx_pin_set+0x13c>
        case 0: return NRF_P0;
    3ef6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3efa:	2301      	movs	r3, #1
    3efc:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    3efe:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
}
    3f02:	e7e5      	b.n	3ed0 <pwm_nrfx_pin_set+0x108>
        case 1: return NRF_P1;
    3f04:	4911      	ldr	r1, [pc, #68]	; (3f4c <pwm_nrfx_pin_set+0x184>)
    3f06:	e7f8      	b.n	3efa <pwm_nrfx_pin_set+0x132>
			nrfx_pwm_stop(&config->pwm, false);
    3f08:	2100      	movs	r1, #0
    3f0a:	4628      	mov	r0, r5
    3f0c:	f004 fd18 	bl	8940 <nrfx_pwm_stop>
	return 0;
    3f10:	2000      	movs	r0, #0
    3f12:	e7e3      	b.n	3edc <pwm_nrfx_pin_set+0x114>
		if (was_stopped) {
    3f14:	f1ba 0f00 	cmp.w	sl, #0
    3f18:	d010      	beq.n	3f3c <pwm_nrfx_pin_set+0x174>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
    3f1a:	4628      	mov	r0, r5
    3f1c:	f001 fd58 	bl	59d0 <nrfx_pwm_is_stopped>
    3f20:	2800      	cmp	r0, #0
    3f22:	d0fa      	beq.n	3f1a <pwm_nrfx_pin_set+0x152>
			nrfx_pwm_simple_playback(&config->pwm,
    3f24:	2302      	movs	r3, #2
    3f26:	2201      	movs	r2, #1
    3f28:	f105 0118 	add.w	r1, r5, #24
    3f2c:	4628      	mov	r0, r5
    3f2e:	f001 fd0d 	bl	594c <nrfx_pwm_simple_playback>
	return 0;
    3f32:	2000      	movs	r0, #0
    3f34:	e7d2      	b.n	3edc <pwm_nrfx_pin_set+0x114>
		return -ENOTSUP;
    3f36:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3f3a:	e7cf      	b.n	3edc <pwm_nrfx_pin_set+0x114>
	return 0;
    3f3c:	2000      	movs	r0, #0
    3f3e:	e7cd      	b.n	3edc <pwm_nrfx_pin_set+0x114>
    3f40:	000091e4 	.word	0x000091e4
    3f44:	0000919c 	.word	0x0000919c
    3f48:	00009c94 	.word	0x00009c94
    3f4c:	50000300 	.word	0x50000300

00003f50 <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
    3f50:	b538      	push	{r3, r4, r5, lr}
    3f52:	4604      	mov	r4, r0
	const struct pwm_nrfx_config *config = dev->config;
    3f54:	6840      	ldr	r0, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    3f56:	6925      	ldr	r5, [r4, #16]

	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    3f58:	2300      	movs	r3, #0
    3f5a:	e004      	b.n	3f66 <pwm_nrfx_init+0x16>
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
    3f5c:	2100      	movs	r1, #0

		data->current[i] = value;
    3f5e:	eb05 0243 	add.w	r2, r5, r3, lsl #1
    3f62:	8091      	strh	r1, [r2, #4]
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    3f64:	3301      	adds	r3, #1
    3f66:	2b03      	cmp	r3, #3
    3f68:	d807      	bhi.n	3f7a <pwm_nrfx_init+0x2a>
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
    3f6a:	18c2      	adds	r2, r0, r3
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
    3f6c:	f992 2008 	ldrsb.w	r2, [r2, #8]
    3f70:	2a00      	cmp	r2, #0
    3f72:	dbf3      	blt.n	3f5c <pwm_nrfx_init+0xc>
    3f74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3f78:	e7f1      	b.n	3f5e <pwm_nrfx_init+0xe>
	};

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    3f7a:	2300      	movs	r3, #0
    3f7c:	461a      	mov	r2, r3
    3f7e:	f100 0108 	add.w	r1, r0, #8
    3f82:	f001 fc7f 	bl	5884 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    3f86:	4b0c      	ldr	r3, [pc, #48]	; (3fb8 <pwm_nrfx_init+0x68>)
    3f88:	4298      	cmp	r0, r3
    3f8a:	d101      	bne.n	3f90 <pwm_nrfx_init+0x40>
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
	}

	return 0;
    3f8c:	2000      	movs	r0, #0
}
    3f8e:	bd38      	pop	{r3, r4, r5, pc}
    3f90:	4b0a      	ldr	r3, [pc, #40]	; (3fbc <pwm_nrfx_init+0x6c>)
    3f92:	4a0b      	ldr	r2, [pc, #44]	; (3fc0 <pwm_nrfx_init+0x70>)
    3f94:	1a9b      	subs	r3, r3, r2
    3f96:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to initialize device: %s", dev->name);
    3f98:	f04f 0200 	mov.w	r2, #0
    3f9c:	2101      	movs	r1, #1
    3f9e:	f361 0202 	bfi	r2, r1, #0, #3
    3fa2:	f36f 02c5 	bfc	r2, #3, #3
    3fa6:	f363 128f 	bfi	r2, r3, #6, #10
    3faa:	6821      	ldr	r1, [r4, #0]
    3fac:	4805      	ldr	r0, [pc, #20]	; (3fc4 <pwm_nrfx_init+0x74>)
    3fae:	f7fd fce1 	bl	1974 <log_1>
		return -EBUSY;
    3fb2:	f06f 000f 	mvn.w	r0, #15
    3fb6:	e7ea      	b.n	3f8e <pwm_nrfx_init+0x3e>
    3fb8:	0bad0000 	.word	0x0bad0000
    3fbc:	000091e4 	.word	0x000091e4
    3fc0:	0000919c 	.word	0x0000919c
    3fc4:	00009cc8 	.word	0x00009cc8

00003fc8 <uarte_nrfx_pins_configure>:
	return config->uarte_regs;
}

#ifndef CONFIG_PINCTRL
static void uarte_nrfx_pins_configure(const struct device *dev, bool sleep)
{
    3fc8:	b410      	push	{r4}
	return dev->config;
    3fca:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	if (!sleep) {
    3fcc:	2900      	cmp	r1, #0
    3fce:	d17e      	bne.n	40ce <uarte_nrfx_pins_configure+0x106>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3fd0:	68da      	ldr	r2, [r3, #12]
    3fd2:	f1b2 3fff 	cmp.w	r2, #4294967295
    3fd6:	d017      	beq.n	4008 <uarte_nrfx_pins_configure+0x40>
    *p_pin = pin_number & 0x1F;
    3fd8:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    3fdc:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3fde:	2a01      	cmp	r2, #1
    3fe0:	d065      	beq.n	40ae <uarte_nrfx_pins_configure+0xe6>
        case 0: return NRF_P0;
    3fe2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3fe6:	2201      	movs	r2, #1
    3fe8:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    3fea:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->tx_pin, 1);
			nrf_gpio_cfg_output(cfg->tx_pin);
    3fee:	68da      	ldr	r2, [r3, #12]
    *p_pin = pin_number & 0x1F;
    3ff0:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    3ff4:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3ff6:	2a01      	cmp	r2, #1
    3ff8:	d05b      	beq.n	40b2 <uarte_nrfx_pins_configure+0xea>
        case 0: return NRF_P0;
    3ffa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3ffe:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    4002:	2103      	movs	r1, #3
    4004:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4008:	691a      	ldr	r2, [r3, #16]
    400a:	f1b2 3fff 	cmp.w	r2, #4294967295
    400e:	d00f      	beq.n	4030 <uarte_nrfx_pins_configure+0x68>
			nrf_gpio_cfg_input(cfg->rx_pin,
					   (cfg->rx_pull_up ?
    4010:	7f19      	ldrb	r1, [r3, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
    4012:	2900      	cmp	r1, #0
    4014:	d04f      	beq.n	40b6 <uarte_nrfx_pins_configure+0xee>
    4016:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    4018:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    401c:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    401e:	2a01      	cmp	r2, #1
    4020:	d04b      	beq.n	40ba <uarte_nrfx_pins_configure+0xf2>
        case 0: return NRF_P0;
    4022:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4026:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
    4028:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    402c:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
					    NRF_GPIO_PIN_PULLUP :
					    NRF_GPIO_PIN_NOPULL));
		}

		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4030:	695a      	ldr	r2, [r3, #20]
    4032:	f1b2 3fff 	cmp.w	r2, #4294967295
    4036:	d017      	beq.n	4068 <uarte_nrfx_pins_configure+0xa0>
    *p_pin = pin_number & 0x1F;
    4038:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    403c:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    403e:	2a01      	cmp	r2, #1
    4040:	d03d      	beq.n	40be <uarte_nrfx_pins_configure+0xf6>
        case 0: return NRF_P0;
    4042:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4046:	2201      	movs	r2, #1
    4048:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    404a:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->rts_pin, 1);
			nrf_gpio_cfg_output(cfg->rts_pin);
    404e:	695a      	ldr	r2, [r3, #20]
    *p_pin = pin_number & 0x1F;
    4050:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    4054:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4056:	2a01      	cmp	r2, #1
    4058:	d033      	beq.n	40c2 <uarte_nrfx_pins_configure+0xfa>
        case 0: return NRF_P0;
    405a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    405e:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    4062:	2103      	movs	r1, #3
    4064:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4068:	699a      	ldr	r2, [r3, #24]
    406a:	f1b2 3fff 	cmp.w	r2, #4294967295
    406e:	d00e      	beq.n	408e <uarte_nrfx_pins_configure+0xc6>
			nrf_gpio_cfg_input(cfg->cts_pin,
					   (cfg->cts_pull_up ?
    4070:	7f59      	ldrb	r1, [r3, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
    4072:	b341      	cbz	r1, 40c6 <uarte_nrfx_pins_configure+0xfe>
    4074:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    4076:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    407a:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    407c:	2a01      	cmp	r2, #1
    407e:	d024      	beq.n	40ca <uarte_nrfx_pins_configure+0x102>
        case 0: return NRF_P0;
    4080:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4084:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
    4086:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    408a:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
			nrf_gpio_cfg_default(cfg->cts_pin);
		}
	}

	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    408e:	681a      	ldr	r2, [r3, #0]
    4090:	68d8      	ldr	r0, [r3, #12]
    4092:	6919      	ldr	r1, [r3, #16]

NRF_STATIC_INLINE void nrf_uarte_txrx_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pseltxd,
                                               uint32_t         pselrxd)
{
    p_reg->PSEL.TXD = pseltxd;
    4094:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    4098:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    409c:	681a      	ldr	r2, [r3, #0]
    409e:	6959      	ldr	r1, [r3, #20]
    40a0:	699b      	ldr	r3, [r3, #24]

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
    p_reg->PSEL.RTS = pselrts;
    40a2:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    40a6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
    40aa:	bc10      	pop	{r4}
    40ac:	4770      	bx	lr
        case 1: return NRF_P1;
    40ae:	482c      	ldr	r0, [pc, #176]	; (4160 <uarte_nrfx_pins_configure+0x198>)
    40b0:	e799      	b.n	3fe6 <uarte_nrfx_pins_configure+0x1e>
    40b2:	482b      	ldr	r0, [pc, #172]	; (4160 <uarte_nrfx_pins_configure+0x198>)
    40b4:	e7a3      	b.n	3ffe <uarte_nrfx_pins_configure+0x36>
			nrf_gpio_cfg_input(cfg->rx_pin,
    40b6:	2000      	movs	r0, #0
    40b8:	e7ae      	b.n	4018 <uarte_nrfx_pins_configure+0x50>
    40ba:	4c29      	ldr	r4, [pc, #164]	; (4160 <uarte_nrfx_pins_configure+0x198>)
    40bc:	e7b3      	b.n	4026 <uarte_nrfx_pins_configure+0x5e>
    40be:	4828      	ldr	r0, [pc, #160]	; (4160 <uarte_nrfx_pins_configure+0x198>)
    40c0:	e7c1      	b.n	4046 <uarte_nrfx_pins_configure+0x7e>
    40c2:	4827      	ldr	r0, [pc, #156]	; (4160 <uarte_nrfx_pins_configure+0x198>)
    40c4:	e7cb      	b.n	405e <uarte_nrfx_pins_configure+0x96>
			nrf_gpio_cfg_input(cfg->cts_pin,
    40c6:	2000      	movs	r0, #0
    40c8:	e7d5      	b.n	4076 <uarte_nrfx_pins_configure+0xae>
    40ca:	4c25      	ldr	r4, [pc, #148]	; (4160 <uarte_nrfx_pins_configure+0x198>)
    40cc:	e7da      	b.n	4084 <uarte_nrfx_pins_configure+0xbc>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    40ce:	68da      	ldr	r2, [r3, #12]
    40d0:	f1b2 3fff 	cmp.w	r2, #4294967295
    40d4:	d00b      	beq.n	40ee <uarte_nrfx_pins_configure+0x126>
    *p_pin = pin_number & 0x1F;
    40d6:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    40da:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    40dc:	2a01      	cmp	r2, #1
    40de:	d037      	beq.n	4150 <uarte_nrfx_pins_configure+0x188>
        case 0: return NRF_P0;
    40e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    40e4:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    40e8:	2102      	movs	r1, #2
    40ea:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    40ee:	691a      	ldr	r2, [r3, #16]
    40f0:	f1b2 3fff 	cmp.w	r2, #4294967295
    40f4:	d00b      	beq.n	410e <uarte_nrfx_pins_configure+0x146>
    *p_pin = pin_number & 0x1F;
    40f6:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    40fa:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    40fc:	2a01      	cmp	r2, #1
    40fe:	d029      	beq.n	4154 <uarte_nrfx_pins_configure+0x18c>
        case 0: return NRF_P0;
    4100:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    4104:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    4108:	2102      	movs	r1, #2
    410a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    410e:	695a      	ldr	r2, [r3, #20]
    4110:	f1b2 3fff 	cmp.w	r2, #4294967295
    4114:	d00b      	beq.n	412e <uarte_nrfx_pins_configure+0x166>
    *p_pin = pin_number & 0x1F;
    4116:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    411a:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    411c:	2a01      	cmp	r2, #1
    411e:	d01b      	beq.n	4158 <uarte_nrfx_pins_configure+0x190>
        case 0: return NRF_P0;
    4120:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    4124:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    4128:	2102      	movs	r1, #2
    412a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    412e:	699a      	ldr	r2, [r3, #24]
    4130:	f1b2 3fff 	cmp.w	r2, #4294967295
    4134:	d0ab      	beq.n	408e <uarte_nrfx_pins_configure+0xc6>
    *p_pin = pin_number & 0x1F;
    4136:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    413a:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    413c:	2a01      	cmp	r2, #1
    413e:	d00d      	beq.n	415c <uarte_nrfx_pins_configure+0x194>
        case 0: return NRF_P0;
    4140:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    4144:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    4148:	2102      	movs	r1, #2
    414a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
    414e:	e79e      	b.n	408e <uarte_nrfx_pins_configure+0xc6>
        case 1: return NRF_P1;
    4150:	4803      	ldr	r0, [pc, #12]	; (4160 <uarte_nrfx_pins_configure+0x198>)
    4152:	e7c7      	b.n	40e4 <uarte_nrfx_pins_configure+0x11c>
    4154:	4802      	ldr	r0, [pc, #8]	; (4160 <uarte_nrfx_pins_configure+0x198>)
    4156:	e7d5      	b.n	4104 <uarte_nrfx_pins_configure+0x13c>
    4158:	4801      	ldr	r0, [pc, #4]	; (4160 <uarte_nrfx_pins_configure+0x198>)
    415a:	e7e3      	b.n	4124 <uarte_nrfx_pins_configure+0x15c>
    415c:	4800      	ldr	r0, [pc, #0]	; (4160 <uarte_nrfx_pins_configure+0x198>)
    415e:	e7f1      	b.n	4144 <uarte_nrfx_pins_configure+0x17c>
    4160:	50000300 	.word	0x50000300

00004164 <baudrate_set>:
	return dev->config;
    4164:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    4166:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    4168:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    416c:	d06f      	beq.n	424e <baudrate_set+0xea>
    416e:	d83a      	bhi.n	41e6 <baudrate_set+0x82>
    4170:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    4174:	d06e      	beq.n	4254 <baudrate_set+0xf0>
    4176:	d90a      	bls.n	418e <baudrate_set+0x2a>
    4178:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    417c:	d075      	beq.n	426a <baudrate_set+0x106>
    417e:	d924      	bls.n	41ca <baudrate_set+0x66>
    4180:	f647 2312 	movw	r3, #31250	; 0x7a12
    4184:	4299      	cmp	r1, r3
    4186:	d12b      	bne.n	41e0 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    4188:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    418c:	e013      	b.n	41b6 <baudrate_set+0x52>
	switch (baudrate) {
    418e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    4192:	d061      	beq.n	4258 <baudrate_set+0xf4>
    4194:	d907      	bls.n	41a6 <baudrate_set+0x42>
    4196:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    419a:	d063      	beq.n	4264 <baudrate_set+0x100>
    419c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    41a0:	d110      	bne.n	41c4 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    41a2:	4b3c      	ldr	r3, [pc, #240]	; (4294 <baudrate_set+0x130>)
    41a4:	e007      	b.n	41b6 <baudrate_set+0x52>
	switch (baudrate) {
    41a6:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    41aa:	d058      	beq.n	425e <baudrate_set+0xfa>
    41ac:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    41b0:	d105      	bne.n	41be <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    41b2:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    41b6:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    41ba:	2000      	movs	r0, #0
    41bc:	4770      	bx	lr
	switch (baudrate) {
    41be:	f06f 0015 	mvn.w	r0, #21
    41c2:	4770      	bx	lr
    41c4:	f06f 0015 	mvn.w	r0, #21
    41c8:	4770      	bx	lr
    41ca:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    41ce:	d04e      	beq.n	426e <baudrate_set+0x10a>
    41d0:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    41d4:	d101      	bne.n	41da <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    41d6:	4b30      	ldr	r3, [pc, #192]	; (4298 <baudrate_set+0x134>)
    41d8:	e7ed      	b.n	41b6 <baudrate_set+0x52>
	switch (baudrate) {
    41da:	f06f 0015 	mvn.w	r0, #21
    41de:	4770      	bx	lr
    41e0:	f06f 0015 	mvn.w	r0, #21
    41e4:	4770      	bx	lr
    41e6:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    41ea:	d042      	beq.n	4272 <baudrate_set+0x10e>
    41ec:	d909      	bls.n	4202 <baudrate_set+0x9e>
    41ee:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    41f2:	d046      	beq.n	4282 <baudrate_set+0x11e>
    41f4:	d91f      	bls.n	4236 <baudrate_set+0xd2>
    41f6:	4b29      	ldr	r3, [pc, #164]	; (429c <baudrate_set+0x138>)
    41f8:	4299      	cmp	r1, r3
    41fa:	d148      	bne.n	428e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    41fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4200:	e7d9      	b.n	41b6 <baudrate_set+0x52>
	switch (baudrate) {
    4202:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    4206:	d037      	beq.n	4278 <baudrate_set+0x114>
    4208:	d905      	bls.n	4216 <baudrate_set+0xb2>
    420a:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    420e:	d10f      	bne.n	4230 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    4210:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    4214:	e7cf      	b.n	41b6 <baudrate_set+0x52>
	switch (baudrate) {
    4216:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    421a:	4299      	cmp	r1, r3
    421c:	d02e      	beq.n	427c <baudrate_set+0x118>
    421e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    4222:	d102      	bne.n	422a <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    4224:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    4228:	e7c5      	b.n	41b6 <baudrate_set+0x52>
	switch (baudrate) {
    422a:	f06f 0015 	mvn.w	r0, #21
    422e:	4770      	bx	lr
    4230:	f06f 0015 	mvn.w	r0, #21
    4234:	4770      	bx	lr
    4236:	4b1a      	ldr	r3, [pc, #104]	; (42a0 <baudrate_set+0x13c>)
    4238:	4299      	cmp	r1, r3
    423a:	d025      	beq.n	4288 <baudrate_set+0x124>
    423c:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    4240:	d102      	bne.n	4248 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    4242:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    4246:	e7b6      	b.n	41b6 <baudrate_set+0x52>
	switch (baudrate) {
    4248:	f06f 0015 	mvn.w	r0, #21
    424c:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    424e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    4252:	e7b0      	b.n	41b6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    4254:	4b13      	ldr	r3, [pc, #76]	; (42a4 <baudrate_set+0x140>)
    4256:	e7ae      	b.n	41b6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    4258:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    425c:	e7ab      	b.n	41b6 <baudrate_set+0x52>
	switch (baudrate) {
    425e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    4262:	e7a8      	b.n	41b6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    4264:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    4268:	e7a5      	b.n	41b6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    426a:	4b0f      	ldr	r3, [pc, #60]	; (42a8 <baudrate_set+0x144>)
    426c:	e7a3      	b.n	41b6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    426e:	4b0f      	ldr	r3, [pc, #60]	; (42ac <baudrate_set+0x148>)
    4270:	e7a1      	b.n	41b6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4272:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    4276:	e79e      	b.n	41b6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    4278:	4b0d      	ldr	r3, [pc, #52]	; (42b0 <baudrate_set+0x14c>)
    427a:	e79c      	b.n	41b6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    427c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    4280:	e799      	b.n	41b6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    4282:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    4286:	e796      	b.n	41b6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    4288:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    428c:	e793      	b.n	41b6 <baudrate_set+0x52>
	switch (baudrate) {
    428e:	f06f 0015 	mvn.w	r0, #21
}
    4292:	4770      	bx	lr
    4294:	0013b000 	.word	0x0013b000
    4298:	004ea000 	.word	0x004ea000
    429c:	000f4240 	.word	0x000f4240
    42a0:	0003d090 	.word	0x0003d090
    42a4:	00275000 	.word	0x00275000
    42a8:	0075c000 	.word	0x0075c000
    42ac:	003af000 	.word	0x003af000
    42b0:	013a9000 	.word	0x013a9000

000042b4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    42b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42b8:	4605      	mov	r5, r0
    42ba:	460f      	mov	r7, r1
	return dev->data;
    42bc:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    42c0:	f004 fbcf 	bl	8a62 <k_is_in_isr>
    42c4:	b920      	cbnz	r0, 42d0 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    42c6:	4b16      	ldr	r3, [pc, #88]	; (4320 <uarte_nrfx_poll_out+0x6c>)
    42c8:	781b      	ldrb	r3, [r3, #0]
    42ca:	b1ab      	cbz	r3, 42f8 <uarte_nrfx_poll_out+0x44>
    42cc:	2300      	movs	r3, #0
    42ce:	e000      	b.n	42d2 <uarte_nrfx_poll_out+0x1e>
    42d0:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    42d2:	b19b      	cbz	r3, 42fc <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    42d4:	f04f 0320 	mov.w	r3, #32
    42d8:	f3ef 8411 	mrs	r4, BASEPRI
    42dc:	f383 8812 	msr	BASEPRI_MAX, r3
    42e0:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    42e4:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    42e6:	4628      	mov	r0, r5
    42e8:	f004 f96c 	bl	85c4 <is_tx_ready>
    42ec:	b950      	cbnz	r0, 4304 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    42ee:	f384 8811 	msr	BASEPRI, r4
    42f2:	f3bf 8f6f 	isb	sy
}
    42f6:	e7ed      	b.n	42d4 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    42f8:	2301      	movs	r3, #1
    42fa:	e7ea      	b.n	42d2 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    42fc:	4628      	mov	r0, r5
    42fe:	f004 f9b0 	bl	8662 <wait_tx_ready>
    4302:	4606      	mov	r6, r0
	}

	data->char_out = c;
    4304:	4641      	mov	r1, r8
    4306:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    430a:	2201      	movs	r2, #1
    430c:	4628      	mov	r0, r5
    430e:	f004 f973 	bl	85f8 <tx_start>
	__asm__ volatile(
    4312:	f386 8811 	msr	BASEPRI, r6
    4316:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    431a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    431e:	bf00      	nop
    4320:	20000fe6 	.word	0x20000fe6

00004324 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    4324:	b538      	push	{r3, r4, r5, lr}
    4326:	4604      	mov	r4, r0
    4328:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    432a:	f101 0012 	add.w	r0, r1, #18
    432e:	f001 fa33 	bl	5798 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    4332:	4b14      	ldr	r3, [pc, #80]	; (4384 <endtx_stoptx_ppi_init+0x60>)
    4334:	4298      	cmp	r0, r3
    4336:	d111      	bne.n	435c <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    4338:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    433a:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    433e:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    4340:	4a11      	ldr	r2, [pc, #68]	; (4388 <endtx_stoptx_ppi_init+0x64>)
    4342:	33a2      	adds	r3, #162	; 0xa2
    4344:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    4348:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    434c:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    434e:	7ca9      	ldrb	r1, [r5, #18]
    4350:	2301      	movs	r3, #1
    4352:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    4354:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    4358:	2000      	movs	r0, #0
}
    435a:	bd38      	pop	{r3, r4, r5, pc}
    435c:	4b0b      	ldr	r3, [pc, #44]	; (438c <endtx_stoptx_ppi_init+0x68>)
    435e:	4a0c      	ldr	r2, [pc, #48]	; (4390 <endtx_stoptx_ppi_init+0x6c>)
    4360:	1a9b      	subs	r3, r3, r2
    4362:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate PPI Channel");
    4364:	f04f 0100 	mov.w	r1, #0
    4368:	2201      	movs	r2, #1
    436a:	f362 0102 	bfi	r1, r2, #0, #3
    436e:	f36f 01c5 	bfc	r1, #3, #3
    4372:	f363 118f 	bfi	r1, r3, #6, #10
    4376:	4807      	ldr	r0, [pc, #28]	; (4394 <endtx_stoptx_ppi_init+0x70>)
    4378:	f7fd fb6e 	bl	1a58 <log_0>
		return -EIO;
    437c:	f06f 0004 	mvn.w	r0, #4
    4380:	e7eb      	b.n	435a <endtx_stoptx_ppi_init+0x36>
    4382:	bf00      	nop
    4384:	0bad0000 	.word	0x0bad0000
    4388:	4001f000 	.word	0x4001f000
    438c:	000091f4 	.word	0x000091f4
    4390:	0000919c 	.word	0x0000919c
    4394:	00009d2c 	.word	0x00009d2c

00004398 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4398:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    439c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    43a0:	4b01      	ldr	r3, [pc, #4]	; (43a8 <set_comparator+0x10>)
    43a2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    43a6:	4770      	bx	lr
    43a8:	40011000 	.word	0x40011000

000043ac <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    43ac:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    43b0:	4b01      	ldr	r3, [pc, #4]	; (43b8 <get_comparator+0xc>)
    43b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    43b6:	4770      	bx	lr
    43b8:	40011000 	.word	0x40011000

000043bc <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    43bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    43c0:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    43c2:	4a02      	ldr	r2, [pc, #8]	; (43cc <event_enable+0x10>)
    43c4:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    43c8:	4770      	bx	lr
    43ca:	bf00      	nop
    43cc:	40011000 	.word	0x40011000

000043d0 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    43d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    43d4:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    43d6:	4a02      	ldr	r2, [pc, #8]	; (43e0 <event_disable+0x10>)
    43d8:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    43dc:	4770      	bx	lr
    43de:	bf00      	nop
    43e0:	40011000 	.word	0x40011000

000043e4 <counter>:
     return p_reg->COUNTER;
    43e4:	4b01      	ldr	r3, [pc, #4]	; (43ec <counter+0x8>)
    43e6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    43ea:	4770      	bx	lr
    43ec:	40011000 	.word	0x40011000

000043f0 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    43f0:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    43f2:	2301      	movs	r3, #1
    43f4:	4083      	lsls	r3, r0
    43f6:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    43f8:	4a10      	ldr	r2, [pc, #64]	; (443c <compare_int_lock+0x4c>)
    43fa:	f3bf 8f5b 	dmb	ish
    43fe:	e852 1f00 	ldrex	r1, [r2]
    4402:	ea01 0c04 	and.w	ip, r1, r4
    4406:	e842 ce00 	strex	lr, ip, [r2]
    440a:	f1be 0f00 	cmp.w	lr, #0
    440e:	d1f6      	bne.n	43fe <compare_int_lock+0xe>
    4410:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4414:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4418:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    441c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4420:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    4424:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    4428:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    442c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    4430:	420b      	tst	r3, r1
}
    4432:	bf14      	ite	ne
    4434:	2001      	movne	r0, #1
    4436:	2000      	moveq	r0, #0
    4438:	bd10      	pop	{r4, pc}
    443a:	bf00      	nop
    443c:	20000ab8 	.word	0x20000ab8

00004440 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    4440:	b570      	push	{r4, r5, r6, lr}
    4442:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    4444:	f004 f9b0 	bl	87a8 <full_int_lock>
    4448:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    444a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    444e:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    4450:	4a17      	ldr	r2, [pc, #92]	; (44b0 <channel_processing_check_and_clear+0x70>)
    4452:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    4456:	4213      	tst	r3, r2
    4458:	d105      	bne.n	4466 <channel_processing_check_and_clear+0x26>
	bool result = false;
    445a:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    445c:	4628      	mov	r0, r5
    445e:	f004 f9ac 	bl	87ba <full_int_unlock>

	return result;
}
    4462:	4630      	mov	r0, r6
    4464:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4466:	2301      	movs	r3, #1
    4468:	40a3      	lsls	r3, r4
    446a:	43db      	mvns	r3, r3
    446c:	4a11      	ldr	r2, [pc, #68]	; (44b4 <channel_processing_check_and_clear+0x74>)
    446e:	f3bf 8f5b 	dmb	ish
    4472:	e852 1f00 	ldrex	r1, [r2]
    4476:	ea01 0003 	and.w	r0, r1, r3
    447a:	e842 0600 	strex	r6, r0, [r2]
    447e:	2e00      	cmp	r6, #0
    4480:	d1f7      	bne.n	4472 <channel_processing_check_and_clear+0x32>
    4482:	f3bf 8f5b 	dmb	ish
    4486:	b959      	cbnz	r1, 44a0 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4488:	f104 0350 	add.w	r3, r4, #80	; 0x50
    448c:	009b      	lsls	r3, r3, #2
    448e:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4490:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4494:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    4498:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    449a:	b113      	cbz	r3, 44a2 <channel_processing_check_and_clear+0x62>
    449c:	2301      	movs	r3, #1
    449e:	e000      	b.n	44a2 <channel_processing_check_and_clear+0x62>
    44a0:	2301      	movs	r3, #1
		if (result) {
    44a2:	461e      	mov	r6, r3
    44a4:	2b00      	cmp	r3, #0
    44a6:	d0d9      	beq.n	445c <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    44a8:	4620      	mov	r0, r4
    44aa:	f004 f96e 	bl	878a <event_clear>
    44ae:	e7d5      	b.n	445c <channel_processing_check_and_clear+0x1c>
    44b0:	40011000 	.word	0x40011000
    44b4:	20000ab4 	.word	0x20000ab4

000044b8 <compare_int_unlock>:
	if (key) {
    44b8:	b901      	cbnz	r1, 44bc <compare_int_unlock+0x4>
}
    44ba:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    44bc:	2301      	movs	r3, #1
    44be:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    44c0:	4a11      	ldr	r2, [pc, #68]	; (4508 <compare_int_unlock+0x50>)
    44c2:	f3bf 8f5b 	dmb	ish
    44c6:	e852 1f00 	ldrex	r1, [r2]
    44ca:	4319      	orrs	r1, r3
    44cc:	e842 1c00 	strex	ip, r1, [r2]
    44d0:	f1bc 0f00 	cmp.w	ip, #0
    44d4:	d1f7      	bne.n	44c6 <compare_int_unlock+0xe>
    44d6:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    44da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    44de:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    44e0:	4a0a      	ldr	r2, [pc, #40]	; (450c <compare_int_unlock+0x54>)
    44e2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    44e6:	f3bf 8f5b 	dmb	ish
    44ea:	4b09      	ldr	r3, [pc, #36]	; (4510 <compare_int_unlock+0x58>)
    44ec:	681b      	ldr	r3, [r3, #0]
    44ee:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    44f2:	fa23 f000 	lsr.w	r0, r3, r0
    44f6:	f010 0f01 	tst.w	r0, #1
    44fa:	d0de      	beq.n	44ba <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    44fc:	4b05      	ldr	r3, [pc, #20]	; (4514 <compare_int_unlock+0x5c>)
    44fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4502:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    4506:	e7d8      	b.n	44ba <compare_int_unlock+0x2>
    4508:	20000ab8 	.word	0x20000ab8
    450c:	40011000 	.word	0x40011000
    4510:	20000ab4 	.word	0x20000ab4
    4514:	e000e100 	.word	0xe000e100

00004518 <sys_clock_timeout_handler>:
{
    4518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    451a:	4607      	mov	r7, r0
    451c:	4614      	mov	r4, r2
    451e:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    4520:	4610      	mov	r0, r2
    4522:	4619      	mov	r1, r3
    4524:	f004 f93d 	bl	87a2 <absolute_time_to_cc>
    4528:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    452a:	4b15      	ldr	r3, [pc, #84]	; (4580 <sys_clock_timeout_handler+0x68>)
    452c:	681a      	ldr	r2, [r3, #0]
    452e:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    4530:	601c      	str	r4, [r3, #0]
    4532:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    4534:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    4538:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    453c:	d308      	bcc.n	4550 <sys_clock_timeout_handler+0x38>
	return false;
    453e:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    4540:	f002 fc68 	bl	6e14 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    4544:	4638      	mov	r0, r7
    4546:	f7ff ff31 	bl	43ac <get_comparator>
    454a:	42a8      	cmp	r0, r5
    454c:	d00c      	beq.n	4568 <sys_clock_timeout_handler+0x50>
}
    454e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    4550:	4b0c      	ldr	r3, [pc, #48]	; (4584 <sys_clock_timeout_handler+0x6c>)
    4552:	6819      	ldr	r1, [r3, #0]
    4554:	0a0b      	lsrs	r3, r1, #8
    4556:	060a      	lsls	r2, r1, #24
    4558:	1952      	adds	r2, r2, r5
    455a:	f143 0300 	adc.w	r3, r3, #0
    455e:	490a      	ldr	r1, [pc, #40]	; (4588 <sys_clock_timeout_handler+0x70>)
    4560:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    4564:	2401      	movs	r4, #1
    4566:	e7eb      	b.n	4540 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    4568:	b11c      	cbz	r4, 4572 <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    456a:	4638      	mov	r0, r7
    456c:	f7ff ff26 	bl	43bc <event_enable>
}
    4570:	e7ed      	b.n	454e <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    4572:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    4576:	4638      	mov	r0, r7
    4578:	f7ff ff0e 	bl	4398 <set_comparator>
    457c:	e7f5      	b.n	456a <sys_clock_timeout_handler+0x52>
    457e:	bf00      	nop
    4580:	200002d0 	.word	0x200002d0
    4584:	20000abc 	.word	0x20000abc
    4588:	200002b8 	.word	0x200002b8

0000458c <z_nrf_rtc_timer_read>:
{
    458c:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    458e:	4b0d      	ldr	r3, [pc, #52]	; (45c4 <z_nrf_rtc_timer_read+0x38>)
    4590:	681b      	ldr	r3, [r3, #0]
    4592:	0a1d      	lsrs	r5, r3, #8
    4594:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4596:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    459a:	f7ff ff23 	bl	43e4 <counter>
    459e:	4603      	mov	r3, r0
	val += cntr;
    45a0:	1820      	adds	r0, r4, r0
    45a2:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    45a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    45aa:	d20a      	bcs.n	45c2 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    45ac:	4b06      	ldr	r3, [pc, #24]	; (45c8 <z_nrf_rtc_timer_read+0x3c>)
    45ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    45b2:	4299      	cmp	r1, r3
    45b4:	bf08      	it	eq
    45b6:	4290      	cmpeq	r0, r2
    45b8:	d203      	bcs.n	45c2 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    45ba:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    45be:	f141 0100 	adc.w	r1, r1, #0
}
    45c2:	bd38      	pop	{r3, r4, r5, pc}
    45c4:	20000abc 	.word	0x20000abc
    45c8:	200002b8 	.word	0x200002b8

000045cc <compare_set_nolocks>:
{
    45cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    45d0:	4606      	mov	r6, r0
    45d2:	4614      	mov	r4, r2
    45d4:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    45d6:	4610      	mov	r0, r2
    45d8:	4619      	mov	r1, r3
    45da:	f004 f8e2 	bl	87a2 <absolute_time_to_cc>
    45de:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    45e0:	f7ff ffd4 	bl	458c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    45e4:	42a9      	cmp	r1, r5
    45e6:	bf08      	it	eq
    45e8:	42a0      	cmpeq	r0, r4
    45ea:	d21e      	bcs.n	462a <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    45ec:	ebb4 0800 	subs.w	r8, r4, r0
    45f0:	eb65 0901 	sbc.w	r9, r5, r1
    45f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    45f8:	2300      	movs	r3, #0
    45fa:	454b      	cmp	r3, r9
    45fc:	bf08      	it	eq
    45fe:	4542      	cmpeq	r2, r8
    4600:	d32e      	bcc.n	4660 <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
    4602:	4b19      	ldr	r3, [pc, #100]	; (4668 <compare_set_nolocks+0x9c>)
    4604:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    4608:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    460c:	42ab      	cmp	r3, r5
    460e:	bf08      	it	eq
    4610:	42a2      	cmpeq	r2, r4
    4612:	d018      	beq.n	4646 <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    4614:	4639      	mov	r1, r7
    4616:	4630      	mov	r0, r6
    4618:	f004 f8d4 	bl	87c4 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    461c:	4639      	mov	r1, r7
    461e:	f004 f8b0 	bl	8782 <counter_sub>
    4622:	1824      	adds	r4, r4, r0
    4624:	f145 0500 	adc.w	r5, r5, #0
    4628:	e00d      	b.n	4646 <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    462a:	2301      	movs	r3, #1
    462c:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    462e:	4a0f      	ldr	r2, [pc, #60]	; (466c <compare_set_nolocks+0xa0>)
    4630:	f3bf 8f5b 	dmb	ish
    4634:	e852 1f00 	ldrex	r1, [r2]
    4638:	4319      	orrs	r1, r3
    463a:	e842 1000 	strex	r0, r1, [r2]
    463e:	2800      	cmp	r0, #0
    4640:	d1f8      	bne.n	4634 <compare_set_nolocks+0x68>
    4642:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    4646:	4b08      	ldr	r3, [pc, #32]	; (4668 <compare_set_nolocks+0x9c>)
    4648:	0132      	lsls	r2, r6, #4
    464a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    464e:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    4652:	9908      	ldr	r1, [sp, #32]
    4654:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    4656:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4658:	6073      	str	r3, [r6, #4]
	return ret;
    465a:	2000      	movs	r0, #0
}
    465c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    4660:	f06f 0015 	mvn.w	r0, #21
    4664:	e7fa      	b.n	465c <compare_set_nolocks+0x90>
    4666:	bf00      	nop
    4668:	200002c0 	.word	0x200002c0
    466c:	20000ab4 	.word	0x20000ab4

00004670 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    4670:	b530      	push	{r4, r5, lr}
    4672:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    4674:	2300      	movs	r3, #0
    4676:	4a1e      	ldr	r2, [pc, #120]	; (46f0 <sys_clock_driver_init+0x80>)
    4678:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    467c:	2b00      	cmp	r3, #0
    467e:	dd25      	ble.n	46cc <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
    4680:	4c1b      	ldr	r4, [pc, #108]	; (46f0 <sys_clock_driver_init+0x80>)
    4682:	2502      	movs	r5, #2
    4684:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4688:	4b1a      	ldr	r3, [pc, #104]	; (46f4 <sys_clock_driver_init+0x84>)
    468a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    468e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4692:	2200      	movs	r2, #0
    4694:	2101      	movs	r1, #1
    4696:	2011      	movs	r0, #17
    4698:	f7fe f86c 	bl	2774 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    469c:	2011      	movs	r0, #17
    469e:	f7fe f84b 	bl	2738 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    46a2:	2301      	movs	r3, #1
    46a4:	4a14      	ldr	r2, [pc, #80]	; (46f8 <sys_clock_driver_init+0x88>)
    46a6:	6013      	str	r3, [r2, #0]
    46a8:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    46aa:	4a14      	ldr	r2, [pc, #80]	; (46fc <sys_clock_driver_init+0x8c>)
    46ac:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    46ae:	2400      	movs	r4, #0
    46b0:	9401      	str	r4, [sp, #4]
    46b2:	4b13      	ldr	r3, [pc, #76]	; (4700 <sys_clock_driver_init+0x90>)
    46b4:	9300      	str	r3, [sp, #0]
    46b6:	4a13      	ldr	r2, [pc, #76]	; (4704 <sys_clock_driver_init+0x94>)
    46b8:	2300      	movs	r3, #0
    46ba:	4620      	mov	r0, r4
    46bc:	f004 f8bd 	bl	883a <compare_set>

	z_nrf_clock_control_lf_on(mode);
    46c0:	4628      	mov	r0, r5
    46c2:	f7ff f87d 	bl	37c0 <z_nrf_clock_control_lf_on>

	return 0;
}
    46c6:	4620      	mov	r0, r4
    46c8:	b003      	add	sp, #12
    46ca:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    46cc:	4a0e      	ldr	r2, [pc, #56]	; (4708 <sys_clock_driver_init+0x98>)
    46ce:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    46d2:	f04f 30ff 	mov.w	r0, #4294967295
    46d6:	f04f 31ff 	mov.w	r1, #4294967295
    46da:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    46de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    46e2:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    46e4:	4902      	ldr	r1, [pc, #8]	; (46f0 <sys_clock_driver_init+0x80>)
    46e6:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    46ea:	3301      	adds	r3, #1
    46ec:	e7c6      	b.n	467c <sys_clock_driver_init+0xc>
    46ee:	bf00      	nop
    46f0:	40011000 	.word	0x40011000
    46f4:	e000e100 	.word	0xe000e100
    46f8:	40011008 	.word	0x40011008
    46fc:	20000ab8 	.word	0x20000ab8
    4700:	00004519 	.word	0x00004519
    4704:	007fffff 	.word	0x007fffff
    4708:	200002c0 	.word	0x200002c0

0000470c <process_channel>:
{
    470c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4710:	b082      	sub	sp, #8
    4712:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    4714:	f7ff fe94 	bl	4440 <channel_processing_check_and_clear>
    4718:	b910      	cbnz	r0, 4720 <process_channel+0x14>
}
    471a:	b002      	add	sp, #8
    471c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    4720:	f7ff ff34 	bl	458c <z_nrf_rtc_timer_read>
    4724:	4606      	mov	r6, r0
    4726:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    4728:	f004 f83e 	bl	87a8 <full_int_lock>
    472c:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    472e:	4b13      	ldr	r3, [pc, #76]	; (477c <process_channel+0x70>)
    4730:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    4734:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    4738:	454f      	cmp	r7, r9
    473a:	bf08      	it	eq
    473c:	4546      	cmpeq	r6, r8
    473e:	d20b      	bcs.n	4758 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    4740:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    4742:	4650      	mov	r0, sl
    4744:	f004 f839 	bl	87ba <full_int_unlock>
		if (handler) {
    4748:	2e00      	cmp	r6, #0
    474a:	d0e6      	beq.n	471a <process_channel+0xe>
			handler(chan, expire_time, user_context);
    474c:	9500      	str	r5, [sp, #0]
    474e:	4642      	mov	r2, r8
    4750:	464b      	mov	r3, r9
    4752:	4620      	mov	r0, r4
    4754:	47b0      	blx	r6
}
    4756:	e7e0      	b.n	471a <process_channel+0xe>
			handler = cc_data[chan].callback;
    4758:	4a08      	ldr	r2, [pc, #32]	; (477c <process_channel+0x70>)
    475a:	0123      	lsls	r3, r4, #4
    475c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    4760:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    4762:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    4764:	2000      	movs	r0, #0
    4766:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4768:	f04f 32ff 	mov.w	r2, #4294967295
    476c:	f04f 33ff 	mov.w	r3, #4294967295
    4770:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    4774:	4620      	mov	r0, r4
    4776:	f7ff fe2b 	bl	43d0 <event_disable>
    477a:	e7e2      	b.n	4742 <process_channel+0x36>
    477c:	200002c0 	.word	0x200002c0

00004780 <rtc_nrf_isr>:
{
    4780:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    4782:	4b0d      	ldr	r3, [pc, #52]	; (47b8 <rtc_nrf_isr+0x38>)
    4784:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4788:	f013 0f02 	tst.w	r3, #2
    478c:	d00a      	beq.n	47a4 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    478e:	4b0b      	ldr	r3, [pc, #44]	; (47bc <rtc_nrf_isr+0x3c>)
    4790:	681b      	ldr	r3, [r3, #0]
    4792:	b13b      	cbz	r3, 47a4 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4794:	4b09      	ldr	r3, [pc, #36]	; (47bc <rtc_nrf_isr+0x3c>)
    4796:	2200      	movs	r2, #0
    4798:	601a      	str	r2, [r3, #0]
    479a:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
    479c:	4a08      	ldr	r2, [pc, #32]	; (47c0 <rtc_nrf_isr+0x40>)
    479e:	6813      	ldr	r3, [r2, #0]
    47a0:	3301      	adds	r3, #1
    47a2:	6013      	str	r3, [r2, #0]
{
    47a4:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    47a6:	2c00      	cmp	r4, #0
    47a8:	dd00      	ble.n	47ac <rtc_nrf_isr+0x2c>
}
    47aa:	bd10      	pop	{r4, pc}
		process_channel(chan);
    47ac:	4620      	mov	r0, r4
    47ae:	f7ff ffad 	bl	470c <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    47b2:	3401      	adds	r4, #1
    47b4:	e7f7      	b.n	47a6 <rtc_nrf_isr+0x26>
    47b6:	bf00      	nop
    47b8:	40011000 	.word	0x40011000
    47bc:	40011104 	.word	0x40011104
    47c0:	20000abc 	.word	0x20000abc

000047c4 <sys_clock_set_timeout>:
{
    47c4:	b510      	push	{r4, lr}
    47c6:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    47c8:	f1b0 3fff 	cmp.w	r0, #4294967295
    47cc:	d007      	beq.n	47de <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    47ce:	1e44      	subs	r4, r0, #1
    47d0:	2c00      	cmp	r4, #0
    47d2:	dd07      	ble.n	47e4 <sys_clock_set_timeout+0x20>
    47d4:	4b11      	ldr	r3, [pc, #68]	; (481c <sys_clock_set_timeout+0x58>)
    47d6:	429c      	cmp	r4, r3
    47d8:	dd05      	ble.n	47e6 <sys_clock_set_timeout+0x22>
    47da:	4c11      	ldr	r4, [pc, #68]	; (4820 <sys_clock_set_timeout+0x5c>)
    47dc:	e003      	b.n	47e6 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    47de:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    47e2:	e7f4      	b.n	47ce <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    47e4:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    47e6:	f7ff fed1 	bl	458c <z_nrf_rtc_timer_read>
    47ea:	4b0e      	ldr	r3, [pc, #56]	; (4824 <sys_clock_set_timeout+0x60>)
    47ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    47f0:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    47f2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    47f6:	d300      	bcc.n	47fa <sys_clock_set_timeout+0x36>
		ticks = 0;
    47f8:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    47fa:	4404      	add	r4, r0
    47fc:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
    47fe:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    4802:	d300      	bcc.n	4806 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    4804:	4c06      	ldr	r4, [pc, #24]	; (4820 <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4806:	2000      	movs	r0, #0
    4808:	9001      	str	r0, [sp, #4]
    480a:	4907      	ldr	r1, [pc, #28]	; (4828 <sys_clock_set_timeout+0x64>)
    480c:	9100      	str	r1, [sp, #0]
    480e:	1912      	adds	r2, r2, r4
    4810:	f143 0300 	adc.w	r3, r3, #0
    4814:	f004 f811 	bl	883a <compare_set>
}
    4818:	b002      	add	sp, #8
    481a:	bd10      	pop	{r4, pc}
    481c:	007ffffe 	.word	0x007ffffe
    4820:	007fffff 	.word	0x007fffff
    4824:	200002d0 	.word	0x200002d0
    4828:	00004519 	.word	0x00004519

0000482c <sys_clock_elapsed>:
{
    482c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    482e:	f7ff fead 	bl	458c <z_nrf_rtc_timer_read>
    4832:	4b02      	ldr	r3, [pc, #8]	; (483c <sys_clock_elapsed+0x10>)
    4834:	681b      	ldr	r3, [r3, #0]
}
    4836:	1ac0      	subs	r0, r0, r3
    4838:	bd08      	pop	{r3, pc}
    483a:	bf00      	nop
    483c:	200002d0 	.word	0x200002d0

00004840 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    4840:	b508      	push	{r3, lr}
	z_impl_log_panic();
    4842:	f7fd f939 	bl	1ab8 <z_impl_log_panic>
    4846:	4b09      	ldr	r3, [pc, #36]	; (486c <k_sys_fatal_error_handler+0x2c>)
    4848:	4a09      	ldr	r2, [pc, #36]	; (4870 <k_sys_fatal_error_handler+0x30>)
    484a:	1a9b      	subs	r3, r3, r2
    484c:	08db      	lsrs	r3, r3, #3
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    484e:	f04f 0100 	mov.w	r1, #0
    4852:	2201      	movs	r2, #1
    4854:	f362 0102 	bfi	r1, r2, #0, #3
    4858:	f36f 01c5 	bfc	r1, #3, #3
    485c:	f363 118f 	bfi	r1, r3, #6, #10
    4860:	4804      	ldr	r0, [pc, #16]	; (4874 <k_sys_fatal_error_handler+0x34>)
    4862:	f7fd f8f9 	bl	1a58 <log_0>
		sys_arch_reboot(0);
    4866:	2000      	movs	r0, #0
    4868:	f7fe fe24 	bl	34b4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    486c:	000091a4 	.word	0x000091a4
    4870:	0000919c 	.word	0x0000919c
    4874:	00009dc0 	.word	0x00009dc0

00004878 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4878:	4b03      	ldr	r3, [pc, #12]	; (4888 <nrf52_errata_36+0x10>)
    487a:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    487c:	2b08      	cmp	r3, #8
    487e:	d001      	beq.n	4884 <nrf52_errata_36+0xc>
        return false;
    4880:	2000      	movs	r0, #0
    4882:	4770      	bx	lr
                        return true;
    4884:	2001      	movs	r0, #1
}
    4886:	4770      	bx	lr
    4888:	10000130 	.word	0x10000130

0000488c <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    488c:	4b03      	ldr	r3, [pc, #12]	; (489c <nrf52_errata_66+0x10>)
    488e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    4890:	2b08      	cmp	r3, #8
    4892:	d001      	beq.n	4898 <nrf52_errata_66+0xc>
        return false;
    4894:	2000      	movs	r0, #0
    4896:	4770      	bx	lr
                        return true;
    4898:	2001      	movs	r0, #1
}
    489a:	4770      	bx	lr
    489c:	10000130 	.word	0x10000130

000048a0 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    48a0:	4b08      	ldr	r3, [pc, #32]	; (48c4 <nrf52_errata_98+0x24>)
    48a2:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    48a4:	3304      	adds	r3, #4
    48a6:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    48a8:	2a08      	cmp	r2, #8
    48aa:	d001      	beq.n	48b0 <nrf52_errata_98+0x10>
        return false;
    48ac:	2000      	movs	r0, #0
    48ae:	4770      	bx	lr
                switch(var2)
    48b0:	2b00      	cmp	r3, #0
    48b2:	d804      	bhi.n	48be <nrf52_errata_98+0x1e>
    48b4:	e8df f003 	tbb	[pc, r3]
    48b8:	01          	.byte	0x01
    48b9:	00          	.byte	0x00
            if (var1 == 0x08)
    48ba:	2001      	movs	r0, #1
    48bc:	4770      	bx	lr
                        return false;
    48be:	2000      	movs	r0, #0
}
    48c0:	4770      	bx	lr
    48c2:	bf00      	nop
    48c4:	10000130 	.word	0x10000130

000048c8 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    48c8:	4b08      	ldr	r3, [pc, #32]	; (48ec <nrf52_errata_103+0x24>)
    48ca:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    48cc:	3304      	adds	r3, #4
    48ce:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    48d0:	2a08      	cmp	r2, #8
    48d2:	d001      	beq.n	48d8 <nrf52_errata_103+0x10>
        return false;
    48d4:	2000      	movs	r0, #0
    48d6:	4770      	bx	lr
                switch(var2)
    48d8:	2b00      	cmp	r3, #0
    48da:	d804      	bhi.n	48e6 <nrf52_errata_103+0x1e>
    48dc:	e8df f003 	tbb	[pc, r3]
    48e0:	01          	.byte	0x01
    48e1:	00          	.byte	0x00
            if (var1 == 0x08)
    48e2:	2001      	movs	r0, #1
    48e4:	4770      	bx	lr
                        return false;
    48e6:	2000      	movs	r0, #0
}
    48e8:	4770      	bx	lr
    48ea:	bf00      	nop
    48ec:	10000130 	.word	0x10000130

000048f0 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    48f0:	4b08      	ldr	r3, [pc, #32]	; (4914 <nrf52_errata_115+0x24>)
    48f2:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    48f4:	3304      	adds	r3, #4
    48f6:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    48f8:	2a08      	cmp	r2, #8
    48fa:	d001      	beq.n	4900 <nrf52_errata_115+0x10>
        return false;
    48fc:	2000      	movs	r0, #0
    48fe:	4770      	bx	lr
                switch(var2)
    4900:	2b00      	cmp	r3, #0
    4902:	d804      	bhi.n	490e <nrf52_errata_115+0x1e>
    4904:	e8df f003 	tbb	[pc, r3]
    4908:	01          	.byte	0x01
    4909:	00          	.byte	0x00
            if (var1 == 0x08)
    490a:	2001      	movs	r0, #1
    490c:	4770      	bx	lr
                        return false;
    490e:	2000      	movs	r0, #0
}
    4910:	4770      	bx	lr
    4912:	bf00      	nop
    4914:	10000130 	.word	0x10000130

00004918 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4918:	4b08      	ldr	r3, [pc, #32]	; (493c <nrf52_errata_120+0x24>)
    491a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    491c:	3304      	adds	r3, #4
    491e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    4920:	2a08      	cmp	r2, #8
    4922:	d001      	beq.n	4928 <nrf52_errata_120+0x10>
        return false;
    4924:	2000      	movs	r0, #0
    4926:	4770      	bx	lr
                switch(var2)
    4928:	2b00      	cmp	r3, #0
    492a:	d804      	bhi.n	4936 <nrf52_errata_120+0x1e>
    492c:	e8df f003 	tbb	[pc, r3]
    4930:	01          	.byte	0x01
    4931:	00          	.byte	0x00
            if (var1 == 0x08)
    4932:	2001      	movs	r0, #1
    4934:	4770      	bx	lr
                        return false;
    4936:	2000      	movs	r0, #0
}
    4938:	4770      	bx	lr
    493a:	bf00      	nop
    493c:	10000130 	.word	0x10000130

00004940 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4940:	4b03      	ldr	r3, [pc, #12]	; (4950 <nrf52_errata_136+0x10>)
    4942:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    4944:	2b08      	cmp	r3, #8
    4946:	d001      	beq.n	494c <nrf52_errata_136+0xc>
        return false;
    4948:	2000      	movs	r0, #0
    494a:	4770      	bx	lr
                        return true;
    494c:	2001      	movs	r0, #1
}
    494e:	4770      	bx	lr
    4950:	10000130 	.word	0x10000130

00004954 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4954:	4b06      	ldr	r3, [pc, #24]	; (4970 <nrf52_configuration_249+0x1c>)
    4956:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4958:	4a06      	ldr	r2, [pc, #24]	; (4974 <nrf52_configuration_249+0x20>)
    495a:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    495c:	2b08      	cmp	r3, #8
    495e:	d001      	beq.n	4964 <nrf52_configuration_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    4960:	2000      	movs	r0, #0
    4962:	4770      	bx	lr
                switch(var2)
    4964:	2a04      	cmp	r2, #4
    4966:	d801      	bhi.n	496c <nrf52_configuration_249+0x18>
    4968:	2000      	movs	r0, #0
    496a:	4770      	bx	lr
                        return true;
    496c:	2001      	movs	r0, #1
    #endif
}
    496e:	4770      	bx	lr
    4970:	10000130 	.word	0x10000130
    4974:	10000134 	.word	0x10000134

00004978 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4978:	4b02      	ldr	r3, [pc, #8]	; (4984 <nvmc_wait+0xc>)
    497a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    497e:	2b00      	cmp	r3, #0
    4980:	d0fa      	beq.n	4978 <nvmc_wait>
}
    4982:	4770      	bx	lr
    4984:	4001e000 	.word	0x4001e000

00004988 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    4988:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    498a:	4b03      	ldr	r3, [pc, #12]	; (4998 <nvmc_config+0x10>)
    498c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    4990:	f7ff fff2 	bl	4978 <nvmc_wait>
}
    4994:	bd08      	pop	{r3, pc}
    4996:	bf00      	nop
    4998:	4001e000 	.word	0x4001e000

0000499c <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    499c:	4b01      	ldr	r3, [pc, #4]	; (49a4 <SystemCoreClockUpdate+0x8>)
    499e:	4a02      	ldr	r2, [pc, #8]	; (49a8 <SystemCoreClockUpdate+0xc>)
    49a0:	601a      	str	r2, [r3, #0]
}
    49a2:	4770      	bx	lr
    49a4:	20000054 	.word	0x20000054
    49a8:	03d09000 	.word	0x03d09000

000049ac <SystemInit>:

void SystemInit(void)
{
    49ac:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    49ae:	f7ff ff63 	bl	4878 <nrf52_errata_36>
    49b2:	b140      	cbz	r0, 49c6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    49b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    49b8:	2200      	movs	r2, #0
    49ba:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    49be:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    49c2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    49c6:	f7ff ff61 	bl	488c <nrf52_errata_66>
    49ca:	2800      	cmp	r0, #0
    49cc:	d046      	beq.n	4a5c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    49ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    49d2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    49d6:	4b56      	ldr	r3, [pc, #344]	; (4b30 <SystemInit+0x184>)
    49d8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    49dc:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    49e0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    49e4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    49e8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    49ec:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    49f0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    49f4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    49f8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    49fc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4a00:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4a04:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4a08:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4a0c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    4a10:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4a14:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4a18:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4a1c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4a20:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4a24:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4a28:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4a2c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4a30:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4a34:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4a38:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4a3c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4a40:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4a44:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4a48:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4a4c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4a50:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4a54:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4a58:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    4a5c:	f7ff ff20 	bl	48a0 <nrf52_errata_98>
    4a60:	b110      	cbz	r0, 4a68 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    4a62:	4b34      	ldr	r3, [pc, #208]	; (4b34 <SystemInit+0x188>)
    4a64:	4a34      	ldr	r2, [pc, #208]	; (4b38 <SystemInit+0x18c>)
    4a66:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    4a68:	f7ff ff2e 	bl	48c8 <nrf52_errata_103>
    4a6c:	b118      	cbz	r0, 4a76 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    4a6e:	4b33      	ldr	r3, [pc, #204]	; (4b3c <SystemInit+0x190>)
    4a70:	22fb      	movs	r2, #251	; 0xfb
    4a72:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    4a76:	f7ff ff3b 	bl	48f0 <nrf52_errata_115>
    4a7a:	b148      	cbz	r0, 4a90 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    4a7c:	4930      	ldr	r1, [pc, #192]	; (4b40 <SystemInit+0x194>)
    4a7e:	680b      	ldr	r3, [r1, #0]
    4a80:	f023 030f 	bic.w	r3, r3, #15
    4a84:	4a2f      	ldr	r2, [pc, #188]	; (4b44 <SystemInit+0x198>)
    4a86:	6812      	ldr	r2, [r2, #0]
    4a88:	f002 020f 	and.w	r2, r2, #15
    4a8c:	4313      	orrs	r3, r2
    4a8e:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    4a90:	f7ff ff42 	bl	4918 <nrf52_errata_120>
    4a94:	b118      	cbz	r0, 4a9e <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    4a96:	4b2c      	ldr	r3, [pc, #176]	; (4b48 <SystemInit+0x19c>)
    4a98:	f44f 7200 	mov.w	r2, #512	; 0x200
    4a9c:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    4a9e:	f7ff ff4f 	bl	4940 <nrf52_errata_136>
    4aa2:	b160      	cbz	r0, 4abe <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    4aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4aa8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    4aac:	f013 0f01 	tst.w	r3, #1
    4ab0:	d005      	beq.n	4abe <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4ab2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4ab6:	f06f 0201 	mvn.w	r2, #1
    4aba:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    4abe:	f7ff ff49 	bl	4954 <nrf52_configuration_249>
    4ac2:	b138      	cbz	r0, 4ad4 <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    4ac4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4ac8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    4acc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4ad0:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4ad4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4ad8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4adc:	2b00      	cmp	r3, #0
    4ade:	db08      	blt.n	4af2 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    4ae0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4ae4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4ae8:	2b00      	cmp	r3, #0
    4aea:	db02      	blt.n	4af2 <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    4aec:	f7ff ff56 	bl	499c <SystemCoreClockUpdate>
}
    4af0:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    4af2:	2001      	movs	r0, #1
    4af4:	f7ff ff48 	bl	4988 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4af8:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    4afc:	2512      	movs	r5, #18
    4afe:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    4b02:	f7ff ff39 	bl	4978 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4b06:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    4b0a:	f7ff ff35 	bl	4978 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    4b0e:	2000      	movs	r0, #0
    4b10:	f7ff ff3a 	bl	4988 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    4b14:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4b18:	490c      	ldr	r1, [pc, #48]	; (4b4c <SystemInit+0x1a0>)
    4b1a:	68ca      	ldr	r2, [r1, #12]
    4b1c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4b20:	4b0b      	ldr	r3, [pc, #44]	; (4b50 <SystemInit+0x1a4>)
    4b22:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4b24:	60cb      	str	r3, [r1, #12]
    4b26:	f3bf 8f4f 	dsb	sy
    __NOP();
    4b2a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4b2c:	e7fd      	b.n	4b2a <SystemInit+0x17e>
    4b2e:	bf00      	nop
    4b30:	4000c000 	.word	0x4000c000
    4b34:	4000568c 	.word	0x4000568c
    4b38:	00038148 	.word	0x00038148
    4b3c:	4000f000 	.word	0x4000f000
    4b40:	40000ee4 	.word	0x40000ee4
    4b44:	10000258 	.word	0x10000258
    4b48:	40029640 	.word	0x40029640
    4b4c:	e000ed00 	.word	0xe000ed00
    4b50:	05fa0004 	.word	0x05fa0004

00004b54 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4b54:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    4b56:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    4b58:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
    4b5c:	f1d3 031f 	rsbs	r3, r3, #31
    4b60:	d415      	bmi.n	4b8e <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    4b62:	2201      	movs	r2, #1
    4b64:	409a      	lsls	r2, r3
    4b66:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4b6a:	f3bf 8f5b 	dmb	ish
    4b6e:	e850 5f00 	ldrex	r5, [r0]
    4b72:	42a5      	cmp	r5, r4
    4b74:	d104      	bne.n	4b80 <nrfx_flag32_alloc+0x2c>
    4b76:	e840 2c00 	strex	ip, r2, [r0]
    4b7a:	f1bc 0f00 	cmp.w	ip, #0
    4b7e:	d1f6      	bne.n	4b6e <nrfx_flag32_alloc+0x1a>
    4b80:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4b84:	d1e7      	bne.n	4b56 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    4b86:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
    4b88:	4802      	ldr	r0, [pc, #8]	; (4b94 <nrfx_flag32_alloc+0x40>)
}
    4b8a:	bc30      	pop	{r4, r5}
    4b8c:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
    4b8e:	4802      	ldr	r0, [pc, #8]	; (4b98 <nrfx_flag32_alloc+0x44>)
    4b90:	e7fb      	b.n	4b8a <nrfx_flag32_alloc+0x36>
    4b92:	bf00      	nop
    4b94:	0bad0000 	.word	0x0bad0000
    4b98:	0bad0002 	.word	0x0bad0002

00004b9c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    4b9c:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    4b9e:	6803      	ldr	r3, [r0, #0]
    4ba0:	460c      	mov	r4, r1
    4ba2:	fa23 f101 	lsr.w	r1, r3, r1
    4ba6:	f011 0f01 	tst.w	r1, #1
    4baa:	d114      	bne.n	4bd6 <nrfx_flag32_free+0x3a>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    4bac:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    4bae:	2301      	movs	r3, #1
    4bb0:	40a3      	lsls	r3, r4
    4bb2:	4313      	orrs	r3, r2
    4bb4:	f3bf 8f5b 	dmb	ish
    4bb8:	e850 1f00 	ldrex	r1, [r0]
    4bbc:	4291      	cmp	r1, r2
    4bbe:	d104      	bne.n	4bca <nrfx_flag32_free+0x2e>
    4bc0:	e840 3c00 	strex	ip, r3, [r0]
    4bc4:	f1bc 0f00 	cmp.w	ip, #0
    4bc8:	d1f6      	bne.n	4bb8 <nrfx_flag32_free+0x1c>
    4bca:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4bce:	d1ed      	bne.n	4bac <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    4bd0:	4802      	ldr	r0, [pc, #8]	; (4bdc <nrfx_flag32_free+0x40>)
}
    4bd2:	bc10      	pop	{r4}
    4bd4:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
    4bd6:	4802      	ldr	r0, [pc, #8]	; (4be0 <nrfx_flag32_free+0x44>)
    4bd8:	e7fb      	b.n	4bd2 <nrfx_flag32_free+0x36>
    4bda:	bf00      	nop
    4bdc:	0bad0000 	.word	0x0bad0000
    4be0:	0bad0004 	.word	0x0bad0004

00004be4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4be4:	4b06      	ldr	r3, [pc, #24]	; (4c00 <nrfx_clock_init+0x1c>)
    4be6:	791b      	ldrb	r3, [r3, #4]
    4be8:	b93b      	cbnz	r3, 4bfa <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    4bea:	4b05      	ldr	r3, [pc, #20]	; (4c00 <nrfx_clock_init+0x1c>)
    4bec:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    4bee:	2201      	movs	r2, #1
    4bf0:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    4bf2:	2200      	movs	r2, #0
    4bf4:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    4bf6:	4803      	ldr	r0, [pc, #12]	; (4c04 <nrfx_clock_init+0x20>)
    4bf8:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4bfa:	4803      	ldr	r0, [pc, #12]	; (4c08 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4bfc:	4770      	bx	lr
    4bfe:	bf00      	nop
    4c00:	20000ac0 	.word	0x20000ac0
    4c04:	0bad0000 	.word	0x0bad0000
    4c08:	0bad000c 	.word	0x0bad000c

00004c0c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    4c0c:	b110      	cbz	r0, 4c14 <nrfx_clock_start+0x8>
    4c0e:	2801      	cmp	r0, #1
    4c10:	d025      	beq.n	4c5e <nrfx_clock_start+0x52>
    4c12:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4c14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4c18:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4c1c:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4c20:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    4c24:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    4c28:	d111      	bne.n	4c4e <nrfx_clock_start+0x42>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4c2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c2e:	2200      	movs	r2, #0
    4c30:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4c34:	4b0f      	ldr	r3, [pc, #60]	; (4c74 <nrfx_clock_start+0x68>)
    4c36:	2200      	movs	r2, #0
    4c38:	601a      	str	r2, [r3, #0]
    4c3a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4c3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c40:	2202      	movs	r2, #2
    4c42:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4c46:	3308      	adds	r3, #8
    4c48:	2201      	movs	r2, #1
    4c4a:	601a      	str	r2, [r3, #0]
}
    4c4c:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    4c4e:	2b01      	cmp	r3, #1
    4c50:	d1eb      	bne.n	4c2a <nrfx_clock_start+0x1e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4c52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c56:	2201      	movs	r2, #1
    4c58:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    4c5c:	e7ea      	b.n	4c34 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4c5e:	4b06      	ldr	r3, [pc, #24]	; (4c78 <nrfx_clock_start+0x6c>)
    4c60:	2200      	movs	r2, #0
    4c62:	601a      	str	r2, [r3, #0]
    4c64:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4c66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c6a:	2201      	movs	r2, #1
    4c6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4c70:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    4c72:	4770      	bx	lr
    4c74:	40000104 	.word	0x40000104
    4c78:	40000100 	.word	0x40000100

00004c7c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    4c7c:	b530      	push	{r4, r5, lr}
    4c7e:	b083      	sub	sp, #12
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    4c80:	4604      	mov	r4, r0
    4c82:	b118      	cbz	r0, 4c8c <nrfx_clock_stop+0x10>
    4c84:	2801      	cmp	r0, #1
    4c86:	d013      	beq.n	4cb0 <nrfx_clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    4c88:	b003      	add	sp, #12
    4c8a:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    4c8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c90:	2202      	movs	r2, #2
    4c92:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4c96:	f503 7382 	add.w	r3, r3, #260	; 0x104
    4c9a:	2200      	movs	r2, #0
    4c9c:	601a      	str	r2, [r3, #0]
    4c9e:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ca0:	4b39      	ldr	r3, [pc, #228]	; (4d88 <nrfx_clock_stop+0x10c>)
    4ca2:	2201      	movs	r2, #1
    4ca4:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    4ca6:	2c01      	cmp	r4, #1
    4ca8:	d00f      	beq.n	4cca <nrfx_clock_stop+0x4e>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    4caa:	f242 7510 	movw	r5, #10000	; 0x2710
    4cae:	e052      	b.n	4d56 <nrfx_clock_stop+0xda>
    p_reg->INTENCLR = mask;
    4cb0:	2301      	movs	r3, #1
    4cb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4cb6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4cba:	f502 7280 	add.w	r2, r2, #256	; 0x100
    4cbe:	2100      	movs	r1, #0
    4cc0:	6011      	str	r1, [r2, #0]
    4cc2:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4cc4:	4a31      	ldr	r2, [pc, #196]	; (4d8c <nrfx_clock_stop+0x110>)
    4cc6:	6013      	str	r3, [r2, #0]
}
    4cc8:	e7ed      	b.n	4ca6 <nrfx_clock_stop+0x2a>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4cca:	2301      	movs	r3, #1
    4ccc:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    4cd0:	f242 7510 	movw	r5, #10000	; 0x2710
    4cd4:	e018      	b.n	4d08 <nrfx_clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4cd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4cda:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4cde:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    4ce2:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4ce6:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    4cea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4cee:	d120      	bne.n	4d32 <nrfx_clock_stop+0xb6>
    return false;
    4cf0:	2300      	movs	r3, #0
    4cf2:	2b00      	cmp	r3, #0
    4cf4:	d042      	beq.n	4d7c <nrfx_clock_stop+0x100>
    4cf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4cfa:	2b01      	cmp	r3, #1
    4cfc:	d13e      	bne.n	4d7c <nrfx_clock_stop+0x100>
    4cfe:	2001      	movs	r0, #1
    4d00:	f003 fdc9 	bl	8896 <nrfx_busy_wait>
    4d04:	3d01      	subs	r5, #1
    4d06:	d039      	beq.n	4d7c <nrfx_clock_stop+0x100>
    switch (domain)
    4d08:	2c00      	cmp	r4, #0
    4d0a:	d0e4      	beq.n	4cd6 <nrfx_clock_stop+0x5a>
    4d0c:	2c01      	cmp	r4, #1
    4d0e:	d001      	beq.n	4d14 <nrfx_clock_stop+0x98>
    4d10:	2300      	movs	r3, #0
    4d12:	e7ee      	b.n	4cf2 <nrfx_clock_stop+0x76>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4d14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4d18:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    4d1c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4d20:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4d24:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    4d28:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4d2c:	d103      	bne.n	4d36 <nrfx_clock_stop+0xba>
    return false;
    4d2e:	2300      	movs	r3, #0
    4d30:	e7df      	b.n	4cf2 <nrfx_clock_stop+0x76>
                return true;
    4d32:	2301      	movs	r3, #1
    4d34:	e7dd      	b.n	4cf2 <nrfx_clock_stop+0x76>
                return true;
    4d36:	2301      	movs	r3, #1
    4d38:	e7db      	b.n	4cf2 <nrfx_clock_stop+0x76>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4d3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d3e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    4d42:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4d46:	d115      	bne.n	4d74 <nrfx_clock_stop+0xf8>
    return false;
    4d48:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    4d4a:	b1bb      	cbz	r3, 4d7c <nrfx_clock_stop+0x100>
    4d4c:	2001      	movs	r0, #1
    4d4e:	f003 fda2 	bl	8896 <nrfx_busy_wait>
    4d52:	3d01      	subs	r5, #1
    4d54:	d012      	beq.n	4d7c <nrfx_clock_stop+0x100>
    switch (domain)
    4d56:	2c00      	cmp	r4, #0
    4d58:	d0ef      	beq.n	4d3a <nrfx_clock_stop+0xbe>
    4d5a:	2c01      	cmp	r4, #1
    4d5c:	d001      	beq.n	4d62 <nrfx_clock_stop+0xe6>
    4d5e:	2300      	movs	r3, #0
    4d60:	e7f3      	b.n	4d4a <nrfx_clock_stop+0xce>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4d62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d66:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    4d6a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4d6e:	d103      	bne.n	4d78 <nrfx_clock_stop+0xfc>
    return false;
    4d70:	2300      	movs	r3, #0
    4d72:	e7ea      	b.n	4d4a <nrfx_clock_stop+0xce>
                return true;
    4d74:	2301      	movs	r3, #1
    4d76:	e7e8      	b.n	4d4a <nrfx_clock_stop+0xce>
                return true;
    4d78:	2301      	movs	r3, #1
    4d7a:	e7e6      	b.n	4d4a <nrfx_clock_stop+0xce>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    4d7c:	2c01      	cmp	r4, #1
    4d7e:	d183      	bne.n	4c88 <nrfx_clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    4d80:	4b03      	ldr	r3, [pc, #12]	; (4d90 <nrfx_clock_stop+0x114>)
    4d82:	2200      	movs	r2, #0
    4d84:	715a      	strb	r2, [r3, #5]
    4d86:	e77f      	b.n	4c88 <nrfx_clock_stop+0xc>
    4d88:	4000000c 	.word	0x4000000c
    4d8c:	40000004 	.word	0x40000004
    4d90:	20000ac0 	.word	0x20000ac0

00004d94 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4d94:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4d96:	4b1b      	ldr	r3, [pc, #108]	; (4e04 <nrfx_power_clock_irq_handler+0x70>)
    4d98:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4d9a:	b183      	cbz	r3, 4dbe <nrfx_power_clock_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d9c:	4b19      	ldr	r3, [pc, #100]	; (4e04 <nrfx_power_clock_irq_handler+0x70>)
    4d9e:	2200      	movs	r2, #0
    4da0:	601a      	str	r2, [r3, #0]
    4da2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    4da4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4da8:	2201      	movs	r2, #1
    4daa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    4dae:	4b16      	ldr	r3, [pc, #88]	; (4e08 <nrfx_power_clock_irq_handler+0x74>)
    4db0:	795b      	ldrb	r3, [r3, #5]
    4db2:	b923      	cbnz	r3, 4dbe <nrfx_power_clock_irq_handler+0x2a>
        {
            m_clock_cb.hfclk_started = true;
    4db4:	4b14      	ldr	r3, [pc, #80]	; (4e08 <nrfx_power_clock_irq_handler+0x74>)
    4db6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4db8:	681b      	ldr	r3, [r3, #0]
    4dba:	2000      	movs	r0, #0
    4dbc:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4dbe:	4b13      	ldr	r3, [pc, #76]	; (4e0c <nrfx_power_clock_irq_handler+0x78>)
    4dc0:	681b      	ldr	r3, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4dc2:	b19b      	cbz	r3, 4dec <nrfx_power_clock_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4dc4:	4b11      	ldr	r3, [pc, #68]	; (4e0c <nrfx_power_clock_irq_handler+0x78>)
    4dc6:	2200      	movs	r2, #0
    4dc8:	601a      	str	r2, [r3, #0]
    4dca:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4dcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4dd0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4dd4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4dd8:	f012 0f03 	tst.w	r2, #3
    4ddc:	d107      	bne.n	4dee <nrfx_power_clock_irq_handler+0x5a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4dde:	2301      	movs	r3, #1
    4de0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4de4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4de8:	3208      	adds	r2, #8
    4dea:	6013      	str	r3, [r2, #0]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4dec:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    4dee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4df2:	2202      	movs	r2, #2
    4df4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4df8:	4b03      	ldr	r3, [pc, #12]	; (4e08 <nrfx_power_clock_irq_handler+0x74>)
    4dfa:	681b      	ldr	r3, [r3, #0]
    4dfc:	2001      	movs	r0, #1
    4dfe:	4798      	blx	r3
}
    4e00:	e7f4      	b.n	4dec <nrfx_power_clock_irq_handler+0x58>
    4e02:	bf00      	nop
    4e04:	40000100 	.word	0x40000100
    4e08:	20000ac0 	.word	0x20000ac0
    4e0c:	40000104 	.word	0x40000104

00004e10 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4e10:	3008      	adds	r0, #8
    4e12:	4b03      	ldr	r3, [pc, #12]	; (4e20 <pin_in_use+0x10>)
    4e14:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4e18:	f000 0001 	and.w	r0, r0, #1
    4e1c:	4770      	bx	lr
    4e1e:	bf00      	nop
    4e20:	20000058 	.word	0x20000058

00004e24 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4e24:	3008      	adds	r0, #8
    4e26:	4b03      	ldr	r3, [pc, #12]	; (4e34 <pin_in_use_by_te+0x10>)
    4e28:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4e2c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4e30:	4770      	bx	lr
    4e32:	bf00      	nop
    4e34:	20000058 	.word	0x20000058

00004e38 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    4e38:	3008      	adds	r0, #8
    4e3a:	4b04      	ldr	r3, [pc, #16]	; (4e4c <pin_has_trigger+0x14>)
    4e3c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4e40:	f010 001c 	ands.w	r0, r0, #28
    4e44:	bf18      	it	ne
    4e46:	2001      	movne	r0, #1
    4e48:	4770      	bx	lr
    4e4a:	bf00      	nop
    4e4c:	20000058 	.word	0x20000058

00004e50 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4e50:	3008      	adds	r0, #8
    4e52:	4b03      	ldr	r3, [pc, #12]	; (4e60 <pin_is_output+0x10>)
    4e54:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4e58:	f3c0 0040 	ubfx	r0, r0, #1, #1
    4e5c:	4770      	bx	lr
    4e5e:	bf00      	nop
    4e60:	20000058 	.word	0x20000058

00004e64 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4e64:	3008      	adds	r0, #8
    4e66:	4b02      	ldr	r3, [pc, #8]	; (4e70 <pin_te_get+0xc>)
    4e68:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4e6c:	0b40      	lsrs	r0, r0, #13
    4e6e:	4770      	bx	lr
    4e70:	20000058 	.word	0x20000058

00004e74 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4e74:	2200      	movs	r2, #0
    4e76:	e004      	b.n	4e82 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4e78:	f04f 33ff 	mov.w	r3, #4294967295
    4e7c:	4283      	cmp	r3, r0
    4e7e:	d00f      	beq.n	4ea0 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4e80:	3201      	adds	r2, #1
    4e82:	2a2f      	cmp	r2, #47	; 0x2f
    4e84:	d80a      	bhi.n	4e9c <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4e86:	f102 0308 	add.w	r3, r2, #8
    4e8a:	4906      	ldr	r1, [pc, #24]	; (4ea4 <handler_in_use+0x30>)
    4e8c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    4e90:	f413 7f80 	tst.w	r3, #256	; 0x100
    4e94:	d0f0      	beq.n	4e78 <handler_in_use+0x4>
    4e96:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4e9a:	e7ef      	b.n	4e7c <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    4e9c:	2000      	movs	r0, #0
    4e9e:	4770      	bx	lr
            return true;
    4ea0:	2001      	movs	r0, #1
}
    4ea2:	4770      	bx	lr
    4ea4:	20000058 	.word	0x20000058

00004ea8 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    4ea8:	2300      	movs	r3, #0
    4eaa:	b113      	cbz	r3, 4eb2 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    4eac:	f04f 30ff 	mov.w	r0, #4294967295
}
    4eb0:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4eb2:	4a07      	ldr	r2, [pc, #28]	; (4ed0 <find_handler+0x28>)
    4eb4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    4eb8:	4282      	cmp	r2, r0
    4eba:	d001      	beq.n	4ec0 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    4ebc:	3301      	adds	r3, #1
    4ebe:	e7f4      	b.n	4eaa <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4ec0:	4a03      	ldr	r2, [pc, #12]	; (4ed0 <find_handler+0x28>)
    4ec2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    4ec6:	6852      	ldr	r2, [r2, #4]
    4ec8:	428a      	cmp	r2, r1
    4eca:	d1f7      	bne.n	4ebc <find_handler+0x14>
            return i;
    4ecc:	4618      	mov	r0, r3
    4ece:	4770      	bx	lr
    4ed0:	20000058 	.word	0x20000058

00004ed4 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4ed4:	3008      	adds	r0, #8
    4ed6:	4b06      	ldr	r3, [pc, #24]	; (4ef0 <channel_handler_get+0x1c>)
    4ed8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    4edc:	f410 7f80 	tst.w	r0, #256	; 0x100
    4ee0:	d004      	beq.n	4eec <channel_handler_get+0x18>
    4ee2:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    4ee6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    4eea:	4770      	bx	lr
        return NULL;
    4eec:	2000      	movs	r0, #0
}
    4eee:	4770      	bx	lr
    4ef0:	20000058 	.word	0x20000058

00004ef4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4ef4:	b570      	push	{r4, r5, r6, lr}
    4ef6:	4604      	mov	r4, r0
    4ef8:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    4efa:	f7ff ffeb 	bl	4ed4 <channel_handler_get>

    if (handler)
    4efe:	b120      	cbz	r0, 4f0a <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    4f00:	6806      	ldr	r6, [r0, #0]
    4f02:	6842      	ldr	r2, [r0, #4]
    4f04:	4629      	mov	r1, r5
    4f06:	4620      	mov	r0, r4
    4f08:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    4f0a:	4b04      	ldr	r3, [pc, #16]	; (4f1c <call_handler+0x28>)
    4f0c:	689b      	ldr	r3, [r3, #8]
    4f0e:	b123      	cbz	r3, 4f1a <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4f10:	4a02      	ldr	r2, [pc, #8]	; (4f1c <call_handler+0x28>)
    4f12:	68d2      	ldr	r2, [r2, #12]
    4f14:	4629      	mov	r1, r5
    4f16:	4620      	mov	r0, r4
    4f18:	4798      	blx	r3
    }
}
    4f1a:	bd70      	pop	{r4, r5, r6, pc}
    4f1c:	20000058 	.word	0x20000058

00004f20 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    4f20:	b570      	push	{r4, r5, r6, lr}
    4f22:	4604      	mov	r4, r0
    4f24:	460d      	mov	r5, r1
    4f26:	4616      	mov	r6, r2
    if (is_level(trigger))
    4f28:	4608      	mov	r0, r1
    4f2a:	f003 fcd9 	bl	88e0 <is_level>
    4f2e:	b9d0      	cbnz	r0, 4f66 <next_sense_cond_call_handler+0x46>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4f30:	2e02      	cmp	r6, #2
    4f32:	d03e      	beq.n	4fb2 <next_sense_cond_call_handler+0x92>
    4f34:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
    4f36:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    4f3a:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4f3c:	2901      	cmp	r1, #1
    4f3e:	d03a      	beq.n	4fb6 <next_sense_cond_call_handler+0x96>
        case 0: return NRF_P0;
    4f40:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4f44:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    4f48:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    4f4c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4f50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    4f54:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        nrf_gpio_cfg_sense_set(pin, next_sense);

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4f58:	2d03      	cmp	r5, #3
    4f5a:	d030      	beq.n	4fbe <next_sense_cond_call_handler+0x9e>
    4f5c:	2e02      	cmp	r6, #2
    4f5e:	d02c      	beq.n	4fba <next_sense_cond_call_handler+0x9a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4f60:	2e03      	cmp	r6, #3
    4f62:	d031      	beq.n	4fc8 <next_sense_cond_call_handler+0xa8>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    4f64:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    4f66:	4629      	mov	r1, r5
    4f68:	4620      	mov	r0, r4
    4f6a:	f7ff ffc3 	bl	4ef4 <call_handler>
    *p_pin = pin_number & 0x1F;
    4f6e:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    4f72:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4f74:	2c01      	cmp	r4, #1
    4f76:	d01a      	beq.n	4fae <next_sense_cond_call_handler+0x8e>
        case 0: return NRF_P0;
    4f78:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4f7c:	f503 72e0 	add.w	r2, r3, #448	; 0x1c0
    4f80:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    4f84:	f3c2 4201 	ubfx	r2, r2, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4f88:	4296      	cmp	r6, r2
    4f8a:	d1eb      	bne.n	4f64 <next_sense_cond_call_handler+0x44>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4f8c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4f90:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    4f94:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    4f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4f9c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    4fa0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4fa4:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    4fa8:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
}
    4fac:	e7da      	b.n	4f64 <next_sense_cond_call_handler+0x44>
        case 1: return NRF_P1;
    4fae:	4908      	ldr	r1, [pc, #32]	; (4fd0 <next_sense_cond_call_handler+0xb0>)
    4fb0:	e7e4      	b.n	4f7c <next_sense_cond_call_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4fb2:	2003      	movs	r0, #3
    4fb4:	e7bf      	b.n	4f36 <next_sense_cond_call_handler+0x16>
    4fb6:	4906      	ldr	r1, [pc, #24]	; (4fd0 <next_sense_cond_call_handler+0xb0>)
    4fb8:	e7c4      	b.n	4f44 <next_sense_cond_call_handler+0x24>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4fba:	2d01      	cmp	r5, #1
    4fbc:	d1d0      	bne.n	4f60 <next_sense_cond_call_handler+0x40>
            call_handler(pin, trigger);
    4fbe:	4629      	mov	r1, r5
    4fc0:	4620      	mov	r0, r4
    4fc2:	f7ff ff97 	bl	4ef4 <call_handler>
}
    4fc6:	e7cd      	b.n	4f64 <next_sense_cond_call_handler+0x44>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4fc8:	2d02      	cmp	r5, #2
    4fca:	d1cb      	bne.n	4f64 <next_sense_cond_call_handler+0x44>
    4fcc:	e7f7      	b.n	4fbe <next_sense_cond_call_handler+0x9e>
    4fce:	bf00      	nop
    4fd0:	50000300 	.word	0x50000300

00004fd4 <latch_pending_read_and_check>:

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
    4fd4:	b410      	push	{r4}
    4fd6:	b083      	sub	sp, #12
    4fd8:	4604      	mov	r4, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    4fda:	4b12      	ldr	r3, [pc, #72]	; (5024 <latch_pending_read_and_check+0x50>)
    4fdc:	e893 0003 	ldmia.w	r3, {r0, r1}
    4fe0:	ab02      	add	r3, sp, #8
    4fe2:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    4fe6:	4620      	mov	r0, r4
    4fe8:	2300      	movs	r3, #0
    4fea:	e00b      	b.n	5004 <latch_pending_read_and_check+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    4fec:	aa02      	add	r2, sp, #8
    4fee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    4ff2:	f852 2c08 	ldr.w	r2, [r2, #-8]
    4ff6:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    4ffa:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    4ffe:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    5002:	3301      	adds	r3, #1
    5004:	2b01      	cmp	r3, #1
    5006:	d9f1      	bls.n	4fec <latch_pending_read_and_check+0x18>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    5008:	2300      	movs	r3, #0
    500a:	2b01      	cmp	r3, #1
    500c:	d804      	bhi.n	5018 <latch_pending_read_and_check+0x44>
    {
        if (latch[port_idx])
    500e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    5012:	b92a      	cbnz	r2, 5020 <latch_pending_read_and_check+0x4c>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    5014:	3301      	adds	r3, #1
    5016:	e7f8      	b.n	500a <latch_pending_read_and_check+0x36>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
    5018:	2000      	movs	r0, #0
}
    501a:	b003      	add	sp, #12
    501c:	bc10      	pop	{r4}
    501e:	4770      	bx	lr
            return true;
    5020:	2001      	movs	r0, #1
    5022:	e7fa      	b.n	501a <latch_pending_read_and_check+0x46>
    5024:	00009290 	.word	0x00009290

00005028 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5028:	f100 0208 	add.w	r2, r0, #8
    502c:	4b0e      	ldr	r3, [pc, #56]	; (5068 <release_handler+0x40>)
    502e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    5032:	f413 7f80 	tst.w	r3, #256	; 0x100
    5036:	d016      	beq.n	5066 <release_handler+0x3e>
{
    5038:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    503a:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    503e:	4610      	mov	r0, r2
    5040:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5044:	4a08      	ldr	r2, [pc, #32]	; (5068 <release_handler+0x40>)
    5046:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    504a:	4620      	mov	r0, r4
    504c:	f7ff ff12 	bl	4e74 <handler_in_use>
    5050:	b100      	cbz	r0, 5054 <release_handler+0x2c>
}
    5052:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    5054:	4804      	ldr	r0, [pc, #16]	; (5068 <release_handler+0x40>)
    5056:	2300      	movs	r3, #0
    5058:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    505c:	4621      	mov	r1, r4
    505e:	3074      	adds	r0, #116	; 0x74
    5060:	f7ff fd9c 	bl	4b9c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    5064:	e7f5      	b.n	5052 <release_handler+0x2a>
    5066:	4770      	bx	lr
    5068:	20000058 	.word	0x20000058

0000506c <pin_handler_trigger_uninit>:
{
    506c:	b510      	push	{r4, lr}
    506e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    5070:	f7ff fed8 	bl	4e24 <pin_in_use_by_te>
    5074:	b140      	cbz	r0, 5088 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    5076:	4620      	mov	r0, r4
    5078:	f7ff fef4 	bl	4e64 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    507c:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    5080:	4b06      	ldr	r3, [pc, #24]	; (509c <pin_handler_trigger_uninit+0x30>)
    5082:	2200      	movs	r2, #0
    5084:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    5088:	4620      	mov	r0, r4
    508a:	f7ff ffcd 	bl	5028 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    508e:	3408      	adds	r4, #8
    5090:	4b03      	ldr	r3, [pc, #12]	; (50a0 <pin_handler_trigger_uninit+0x34>)
    5092:	2200      	movs	r2, #0
    5094:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    5098:	bd10      	pop	{r4, pc}
    509a:	bf00      	nop
    509c:	40006000 	.word	0x40006000
    50a0:	20000058 	.word	0x20000058

000050a4 <pin_handler_set>:
{
    50a4:	b570      	push	{r4, r5, r6, lr}
    50a6:	b082      	sub	sp, #8
    50a8:	4606      	mov	r6, r0
    50aa:	460c      	mov	r4, r1
    50ac:	4615      	mov	r5, r2
    release_handler(pin);
    50ae:	f7ff ffbb 	bl	5028 <release_handler>
    if (!handler)
    50b2:	b324      	cbz	r4, 50fe <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    50b4:	4629      	mov	r1, r5
    50b6:	4620      	mov	r0, r4
    50b8:	f7ff fef6 	bl	4ea8 <find_handler>
    if (handler_id < 0)
    50bc:	1e03      	subs	r3, r0, #0
    50be:	db13      	blt.n	50e8 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    50c0:	4a10      	ldr	r2, [pc, #64]	; (5104 <pin_handler_set+0x60>)
    50c2:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    50c6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    50ca:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    50cc:	025b      	lsls	r3, r3, #9
    50ce:	b29b      	uxth	r3, r3
    50d0:	f106 0008 	add.w	r0, r6, #8
    50d4:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    50d8:	430b      	orrs	r3, r1
    50da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    50de:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    50e2:	4809      	ldr	r0, [pc, #36]	; (5108 <pin_handler_set+0x64>)
}
    50e4:	b002      	add	sp, #8
    50e6:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    50e8:	f10d 0107 	add.w	r1, sp, #7
    50ec:	4807      	ldr	r0, [pc, #28]	; (510c <pin_handler_set+0x68>)
    50ee:	f7ff fd31 	bl	4b54 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    50f2:	4b05      	ldr	r3, [pc, #20]	; (5108 <pin_handler_set+0x64>)
    50f4:	4298      	cmp	r0, r3
    50f6:	d1f5      	bne.n	50e4 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    50f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    50fc:	e7e0      	b.n	50c0 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    50fe:	4802      	ldr	r0, [pc, #8]	; (5108 <pin_handler_set+0x64>)
    5100:	e7f0      	b.n	50e4 <pin_handler_set+0x40>
    5102:	bf00      	nop
    5104:	20000058 	.word	0x20000058
    5108:	0bad0000 	.word	0x0bad0000
    510c:	200000cc 	.word	0x200000cc

00005110 <port_event_handle>:

static void port_event_handle(void)
{
    5110:	b570      	push	{r4, r5, r6, lr}
    5112:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    5114:	4a2c      	ldr	r2, [pc, #176]	; (51c8 <port_event_handle+0xb8>)
    5116:	466b      	mov	r3, sp
    5118:	e892 0003 	ldmia.w	r2, {r0, r1}
    511c:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    5120:	2300      	movs	r3, #0
    5122:	a802      	add	r0, sp, #8
    5124:	e00b      	b.n	513e <port_event_handle+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    5126:	aa04      	add	r2, sp, #16
    5128:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    512c:	f852 2c10 	ldr.w	r2, [r2, #-16]
    5130:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    5134:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    5138:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    513c:	3301      	adds	r3, #1
    513e:	2b01      	cmp	r3, #1
    5140:	d9f1      	bls.n	5126 <port_event_handle+0x16>
    5142:	e03d      	b.n	51c0 <port_event_handle+0xb0>
        case 1: return NRF_P1;
    5144:	4e21      	ldr	r6, [pc, #132]	; (51cc <port_event_handle+0xbc>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5146:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    514a:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    514e:	f3c2 4201 	ubfx	r2, r2, #16, #2
    5152:	f7ff fee5 	bl	4f20 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    5156:	2301      	movs	r3, #1
    5158:	40ab      	lsls	r3, r5
    515a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
    515e:	ab04      	add	r3, sp, #16
    5160:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5164:	f853 0c08 	ldr.w	r0, [r3, #-8]
    5168:	b1f8      	cbz	r0, 51aa <port_event_handle+0x9a>
                uint32_t pin = NRF_CTZ(latch[i]);
    516a:	fa90 f0a0 	rbit	r0, r0
    516e:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    5172:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5176:	f100 0208 	add.w	r2, r0, #8
    517a:	4b15      	ldr	r3, [pc, #84]	; (51d0 <port_event_handle+0xc0>)
    517c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    5180:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    5184:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    5186:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    518a:	ae02      	add	r6, sp, #8
    518c:	2301      	movs	r3, #1
    518e:	fa03 f202 	lsl.w	r2, r3, r2
    5192:	5d73      	ldrb	r3, [r6, r5]
    5194:	ea23 0302 	bic.w	r3, r3, r2
    5198:	5573      	strb	r3, [r6, r5]
    *p_pin = pin_number & 0x1F;
    519a:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    519e:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    51a0:	2b01      	cmp	r3, #1
    51a2:	d0cf      	beq.n	5144 <port_event_handle+0x34>
        case 0: return NRF_P0;
    51a4:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    51a8:	e7cd      	b.n	5146 <port_event_handle+0x36>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    51aa:	3401      	adds	r4, #1
    51ac:	2c01      	cmp	r4, #1
    51ae:	d9d6      	bls.n	515e <port_event_handle+0x4e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    51b0:	4b08      	ldr	r3, [pc, #32]	; (51d4 <port_event_handle+0xc4>)
    51b2:	2200      	movs	r2, #0
    51b4:	601a      	str	r2, [r3, #0]
    51b6:	681b      	ldr	r3, [r3, #0]
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    51b8:	a802      	add	r0, sp, #8
    51ba:	f7ff ff0b 	bl	4fd4 <latch_pending_read_and_check>
    51be:	b108      	cbz	r0, 51c4 <port_event_handle+0xb4>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    51c0:	2400      	movs	r4, #0
    51c2:	e7f3      	b.n	51ac <port_event_handle+0x9c>
}
    51c4:	b004      	add	sp, #16
    51c6:	bd70      	pop	{r4, r5, r6, pc}
    51c8:	00009290 	.word	0x00009290
    51cc:	50000300 	.word	0x50000300
    51d0:	20000058 	.word	0x20000058
    51d4:	4000617c 	.word	0x4000617c

000051d8 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    51d8:	b538      	push	{r3, r4, r5, lr}
    51da:	4604      	mov	r4, r0
    while (mask)
    51dc:	b1cc      	cbz	r4, 5212 <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
    51de:	fa94 f3a4 	rbit	r3, r4
    51e2:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    51e6:	2201      	movs	r2, #1
    51e8:	409a      	lsls	r2, r3
    51ea:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    51ee:	4a09      	ldr	r2, [pc, #36]	; (5214 <gpiote_evt_handle+0x3c>)
    51f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    51f4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    51f8:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    51fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    5200:	f3c0 4001 	ubfx	r0, r0, #16, #2
    5204:	f003 fb6a 	bl	88dc <gpiote_polarity_to_trigger>
    5208:	4601      	mov	r1, r0
    520a:	4628      	mov	r0, r5
    520c:	f7ff fe72 	bl	4ef4 <call_handler>
    5210:	e7e4      	b.n	51dc <gpiote_evt_handle+0x4>
    }
}
    5212:	bd38      	pop	{r3, r4, r5, pc}
    5214:	40006000 	.word	0x40006000

00005218 <nrfx_gpiote_input_configure>:
{
    5218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    521c:	4604      	mov	r4, r0
    521e:	4615      	mov	r5, r2
    5220:	461e      	mov	r6, r3
    if (p_input_config)
    5222:	b361      	cbz	r1, 527e <nrfx_gpiote_input_configure+0x66>
    5224:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    5226:	f003 fb43 	bl	88b0 <pin_is_task_output>
    522a:	2800      	cmp	r0, #0
    522c:	f040 8097 	bne.w	535e <nrfx_gpiote_input_configure+0x146>
    *p_pin = pin_number & 0x1F;
    5230:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    5234:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5236:	2b01      	cmp	r3, #1
    5238:	d042      	beq.n	52c0 <nrfx_gpiote_input_configure+0xa8>
        case 0: return NRF_P0;
    523a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    523e:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    5242:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5246:	2f00      	cmp	r7, #0
    5248:	d03c      	beq.n	52c4 <nrfx_gpiote_input_configure+0xac>
    524a:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    524c:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
    5250:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5254:	2f00      	cmp	r7, #0
    5256:	d037      	beq.n	52c8 <nrfx_gpiote_input_configure+0xb0>
    5258:	7839      	ldrb	r1, [r7, #0]
    525a:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    525c:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    525e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    5262:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    5266:	4a42      	ldr	r2, [pc, #264]	; (5370 <nrfx_gpiote_input_configure+0x158>)
    5268:	f104 0108 	add.w	r1, r4, #8
    526c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5270:	f023 0302 	bic.w	r3, r3, #2
    5274:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5276:	f043 0301 	orr.w	r3, r3, #1
    527a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    527e:	b1b5      	cbz	r5, 52ae <nrfx_gpiote_input_configure+0x96>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    5280:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    5284:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
    5288:	4620      	mov	r0, r4
    528a:	f7ff fde1 	bl	4e50 <pin_is_output>
    528e:	b1e8      	cbz	r0, 52cc <nrfx_gpiote_input_configure+0xb4>
            if (use_evt)
    5290:	f1b9 0f00 	cmp.w	r9, #0
    5294:	d165      	bne.n	5362 <nrfx_gpiote_input_configure+0x14a>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    5296:	4b36      	ldr	r3, [pc, #216]	; (5370 <nrfx_gpiote_input_configure+0x158>)
    5298:	f104 0208 	add.w	r2, r4, #8
    529c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
    52a0:	f020 001c 	bic.w	r0, r0, #28
    52a4:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    52a6:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
    52aa:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
    52ae:	2e00      	cmp	r6, #0
    52b0:	d05b      	beq.n	536a <nrfx_gpiote_input_configure+0x152>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    52b2:	6872      	ldr	r2, [r6, #4]
    52b4:	6831      	ldr	r1, [r6, #0]
    52b6:	4620      	mov	r0, r4
    52b8:	f7ff fef4 	bl	50a4 <pin_handler_set>
}
    52bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        case 1: return NRF_P1;
    52c0:	482c      	ldr	r0, [pc, #176]	; (5374 <nrfx_gpiote_input_configure+0x15c>)
    52c2:	e7bc      	b.n	523e <nrfx_gpiote_input_configure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    52c4:	2100      	movs	r1, #0
    52c6:	e7c1      	b.n	524c <nrfx_gpiote_input_configure+0x34>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    52c8:	2100      	movs	r1, #0
    52ca:	e7c7      	b.n	525c <nrfx_gpiote_input_configure+0x44>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    52cc:	4b28      	ldr	r3, [pc, #160]	; (5370 <nrfx_gpiote_input_configure+0x158>)
    52ce:	f104 0208 	add.w	r2, r4, #8
    52d2:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
    52d6:	f027 0720 	bic.w	r7, r7, #32
    52da:	04ff      	lsls	r7, r7, #19
    52dc:	0cff      	lsrs	r7, r7, #19
    52de:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
    52e2:	f1b9 0f00 	cmp.w	r9, #0
    52e6:	d0d6      	beq.n	5296 <nrfx_gpiote_input_configure+0x7e>
                if (!edge)
    52e8:	f1b8 0f03 	cmp.w	r8, #3
    52ec:	d83b      	bhi.n	5366 <nrfx_gpiote_input_configure+0x14e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    52ee:	686b      	ldr	r3, [r5, #4]
    52f0:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    52f2:	f1b8 0f00 	cmp.w	r8, #0
    52f6:	d106      	bne.n	5306 <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
    52f8:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    52fc:	4b1e      	ldr	r3, [pc, #120]	; (5378 <nrfx_gpiote_input_configure+0x160>)
    52fe:	2200      	movs	r2, #0
    5300:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    5304:	e7c7      	b.n	5296 <nrfx_gpiote_input_configure+0x7e>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    5306:	4640      	mov	r0, r8
    5308:	f003 fae9 	bl	88de <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    530c:	4b1a      	ldr	r3, [pc, #104]	; (5378 <nrfx_gpiote_input_configure+0x160>)
    530e:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    5312:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5316:	f021 0103 	bic.w	r1, r1, #3
    531a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    531e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5322:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    5326:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    532a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    532e:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    5332:	0221      	lsls	r1, r4, #8
    5334:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    5338:	0400      	lsls	r0, r0, #16
    533a:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    533e:	4301      	orrs	r1, r0
    5340:	ea4c 0101 	orr.w	r1, ip, r1
    5344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5348:	036d      	lsls	r5, r5, #13
    534a:	b2ad      	uxth	r5, r5
    534c:	f104 0308 	add.w	r3, r4, #8
    5350:	432f      	orrs	r7, r5
    5352:	f047 0720 	orr.w	r7, r7, #32
    5356:	4a06      	ldr	r2, [pc, #24]	; (5370 <nrfx_gpiote_input_configure+0x158>)
    5358:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
    535c:	e79b      	b.n	5296 <nrfx_gpiote_input_configure+0x7e>
            return NRFX_ERROR_INVALID_PARAM;
    535e:	4807      	ldr	r0, [pc, #28]	; (537c <nrfx_gpiote_input_configure+0x164>)
    5360:	e7ac      	b.n	52bc <nrfx_gpiote_input_configure+0xa4>
                return NRFX_ERROR_INVALID_PARAM;
    5362:	4806      	ldr	r0, [pc, #24]	; (537c <nrfx_gpiote_input_configure+0x164>)
    5364:	e7aa      	b.n	52bc <nrfx_gpiote_input_configure+0xa4>
                    return NRFX_ERROR_INVALID_PARAM;
    5366:	4805      	ldr	r0, [pc, #20]	; (537c <nrfx_gpiote_input_configure+0x164>)
    5368:	e7a8      	b.n	52bc <nrfx_gpiote_input_configure+0xa4>
        err = NRFX_SUCCESS;
    536a:	4805      	ldr	r0, [pc, #20]	; (5380 <nrfx_gpiote_input_configure+0x168>)
    536c:	e7a6      	b.n	52bc <nrfx_gpiote_input_configure+0xa4>
    536e:	bf00      	nop
    5370:	20000058 	.word	0x20000058
    5374:	50000300 	.word	0x50000300
    5378:	40006000 	.word	0x40006000
    537c:	0bad0004 	.word	0x0bad0004
    5380:	0bad0000 	.word	0x0bad0000

00005384 <nrfx_gpiote_output_configure>:
{
    5384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5386:	4604      	mov	r4, r0
    5388:	4615      	mov	r5, r2
    if (p_config)
    538a:	2900      	cmp	r1, #0
    538c:	d052      	beq.n	5434 <nrfx_gpiote_output_configure+0xb0>
    538e:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    5390:	f003 fa9d 	bl	88ce <pin_is_input>
    5394:	b128      	cbz	r0, 53a2 <nrfx_gpiote_output_configure+0x1e>
    5396:	4620      	mov	r0, r4
    5398:	f7ff fd44 	bl	4e24 <pin_in_use_by_te>
    539c:	2800      	cmp	r0, #0
    539e:	f040 809d 	bne.w	54dc <nrfx_gpiote_output_configure+0x158>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    53a2:	4620      	mov	r0, r4
    53a4:	f7ff fd48 	bl	4e38 <pin_has_trigger>
    53a8:	b118      	cbz	r0, 53b2 <nrfx_gpiote_output_configure+0x2e>
    53aa:	7873      	ldrb	r3, [r6, #1]
    53ac:	2b01      	cmp	r3, #1
    53ae:	f000 8097 	beq.w	54e0 <nrfx_gpiote_output_configure+0x15c>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    53b2:	f106 0c01 	add.w	ip, r6, #1
    53b6:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
    53b8:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    53bc:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    53be:	2b01      	cmp	r3, #1
    53c0:	d07c      	beq.n	54bc <nrfx_gpiote_output_configure+0x138>
        case 0: return NRF_P0;
    53c2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    53c6:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    53ca:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    53ce:	f1bc 0f00 	cmp.w	ip, #0
    53d2:	d075      	beq.n	54c0 <nrfx_gpiote_output_configure+0x13c>
    53d4:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    53d6:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    53da:	2f00      	cmp	r7, #0
    53dc:	d072      	beq.n	54c4 <nrfx_gpiote_output_configure+0x140>
    53de:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    53e2:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    53e6:	2e00      	cmp	r6, #0
    53e8:	d06f      	beq.n	54ca <nrfx_gpiote_output_configure+0x146>
    53ea:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    53ee:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
    53f2:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    53f6:	f1bc 0f00 	cmp.w	ip, #0
    53fa:	d069      	beq.n	54d0 <nrfx_gpiote_output_configure+0x14c>
    53fc:	7873      	ldrb	r3, [r6, #1]
    53fe:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5400:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5404:	2f00      	cmp	r7, #0
    5406:	d065      	beq.n	54d4 <nrfx_gpiote_output_configure+0x150>
    5408:	78b7      	ldrb	r7, [r6, #2]
    540a:	00bf      	lsls	r7, r7, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    540c:	433b      	orrs	r3, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    540e:	2e00      	cmp	r6, #0
    5410:	d062      	beq.n	54d8 <nrfx_gpiote_output_configure+0x154>
    5412:	7836      	ldrb	r6, [r6, #0]
    5414:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5416:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5418:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    541a:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    541e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    5422:	4a33      	ldr	r2, [pc, #204]	; (54f0 <nrfx_gpiote_output_configure+0x16c>)
    5424:	f104 0108 	add.w	r1, r4, #8
    5428:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    542c:	f043 0303 	orr.w	r3, r3, #3
    5430:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    5434:	2d00      	cmp	r5, #0
    5436:	d055      	beq.n	54e4 <nrfx_gpiote_output_configure+0x160>
        if (pin_is_input(pin))
    5438:	4620      	mov	r0, r4
    543a:	f003 fa48 	bl	88ce <pin_is_input>
    543e:	2800      	cmp	r0, #0
    5440:	d152      	bne.n	54e8 <nrfx_gpiote_output_configure+0x164>
        uint32_t ch = p_task_config->task_ch;
    5442:	782a      	ldrb	r2, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    5444:	f502 71a2 	add.w	r1, r2, #324	; 0x144
    5448:	4b2a      	ldr	r3, [pc, #168]	; (54f4 <nrfx_gpiote_output_configure+0x170>)
    544a:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    544e:	4928      	ldr	r1, [pc, #160]	; (54f0 <nrfx_gpiote_output_configure+0x16c>)
    5450:	f104 0008 	add.w	r0, r4, #8
    5454:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
    5458:	f023 0320 	bic.w	r3, r3, #32
    545c:	04db      	lsls	r3, r3, #19
    545e:	0cdb      	lsrs	r3, r3, #19
    5460:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    5464:	7869      	ldrb	r1, [r5, #1]
    5466:	2900      	cmp	r1, #0
    5468:	d040      	beq.n	54ec <nrfx_gpiote_output_configure+0x168>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    546a:	f895 c002 	ldrb.w	ip, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    546e:	4d21      	ldr	r5, [pc, #132]	; (54f4 <nrfx_gpiote_output_configure+0x170>)
    5470:	f502 76a2 	add.w	r6, r2, #324	; 0x144
    5474:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
    5478:	f420 1099 	bic.w	r0, r0, #1253376	; 0x132000
    547c:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
    5480:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5484:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
    5488:	0220      	lsls	r0, r4, #8
    548a:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    548e:	0409      	lsls	r1, r1, #16
    5490:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5494:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5496:	ea4f 500c 	mov.w	r0, ip, lsl #20
    549a:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    549e:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    54a0:	4339      	orrs	r1, r7
    54a2:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    54a6:	0352      	lsls	r2, r2, #13
    54a8:	b292      	uxth	r2, r2
    54aa:	3408      	adds	r4, #8
    54ac:	431a      	orrs	r2, r3
    54ae:	f042 0220 	orr.w	r2, r2, #32
    54b2:	4b0f      	ldr	r3, [pc, #60]	; (54f0 <nrfx_gpiote_output_configure+0x16c>)
    54b4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
    54b8:	480f      	ldr	r0, [pc, #60]	; (54f8 <nrfx_gpiote_output_configure+0x174>)
    54ba:	e014      	b.n	54e6 <nrfx_gpiote_output_configure+0x162>
        case 1: return NRF_P1;
    54bc:	490f      	ldr	r1, [pc, #60]	; (54fc <nrfx_gpiote_output_configure+0x178>)
    54be:	e782      	b.n	53c6 <nrfx_gpiote_output_configure+0x42>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    54c0:	2300      	movs	r3, #0
    54c2:	e788      	b.n	53d6 <nrfx_gpiote_output_configure+0x52>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    54c4:	f04f 0e00 	mov.w	lr, #0
    54c8:	e78b      	b.n	53e2 <nrfx_gpiote_output_configure+0x5e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    54ca:	f04f 0e00 	mov.w	lr, #0
    54ce:	e78e      	b.n	53ee <nrfx_gpiote_output_configure+0x6a>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    54d0:	2300      	movs	r3, #0
    54d2:	e795      	b.n	5400 <nrfx_gpiote_output_configure+0x7c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    54d4:	2700      	movs	r7, #0
    54d6:	e799      	b.n	540c <nrfx_gpiote_output_configure+0x88>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    54d8:	2600      	movs	r6, #0
    54da:	e79c      	b.n	5416 <nrfx_gpiote_output_configure+0x92>
    54dc:	4808      	ldr	r0, [pc, #32]	; (5500 <nrfx_gpiote_output_configure+0x17c>)
    54de:	e002      	b.n	54e6 <nrfx_gpiote_output_configure+0x162>
    54e0:	4807      	ldr	r0, [pc, #28]	; (5500 <nrfx_gpiote_output_configure+0x17c>)
    54e2:	e000      	b.n	54e6 <nrfx_gpiote_output_configure+0x162>
    54e4:	4804      	ldr	r0, [pc, #16]	; (54f8 <nrfx_gpiote_output_configure+0x174>)
}
    54e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NRFX_ERROR_INVALID_PARAM;
    54e8:	4805      	ldr	r0, [pc, #20]	; (5500 <nrfx_gpiote_output_configure+0x17c>)
    54ea:	e7fc      	b.n	54e6 <nrfx_gpiote_output_configure+0x162>
    return NRFX_SUCCESS;
    54ec:	4802      	ldr	r0, [pc, #8]	; (54f8 <nrfx_gpiote_output_configure+0x174>)
    54ee:	e7fa      	b.n	54e6 <nrfx_gpiote_output_configure+0x162>
    54f0:	20000058 	.word	0x20000058
    54f4:	40006000 	.word	0x40006000
    54f8:	0bad0000 	.word	0x0bad0000
    54fc:	50000300 	.word	0x50000300
    5500:	0bad0004 	.word	0x0bad0004

00005504 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    5504:	4b01      	ldr	r3, [pc, #4]	; (550c <nrfx_gpiote_global_callback_set+0x8>)
    5506:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    5508:	60d9      	str	r1, [r3, #12]
}
    550a:	4770      	bx	lr
    550c:	20000058 	.word	0x20000058

00005510 <nrfx_gpiote_channel_get>:
{
    5510:	b538      	push	{r3, r4, r5, lr}
    5512:	4604      	mov	r4, r0
    5514:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    5516:	f7ff fc85 	bl	4e24 <pin_in_use_by_te>
    551a:	b140      	cbz	r0, 552e <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    551c:	f104 0008 	add.w	r0, r4, #8
    5520:	4b04      	ldr	r3, [pc, #16]	; (5534 <nrfx_gpiote_channel_get+0x24>)
    5522:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    5526:	0b5b      	lsrs	r3, r3, #13
    5528:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    552a:	4803      	ldr	r0, [pc, #12]	; (5538 <nrfx_gpiote_channel_get+0x28>)
}
    552c:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    552e:	4803      	ldr	r0, [pc, #12]	; (553c <nrfx_gpiote_channel_get+0x2c>)
    5530:	e7fc      	b.n	552c <nrfx_gpiote_channel_get+0x1c>
    5532:	bf00      	nop
    5534:	20000058 	.word	0x20000058
    5538:	0bad0000 	.word	0x0bad0000
    553c:	0bad0004 	.word	0x0bad0004

00005540 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    5540:	4b0f      	ldr	r3, [pc, #60]	; (5580 <nrfx_gpiote_init+0x40>)
    5542:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5546:	b10b      	cbz	r3, 554c <nrfx_gpiote_init+0xc>
        return err_code;
    5548:	480e      	ldr	r0, [pc, #56]	; (5584 <nrfx_gpiote_init+0x44>)
}
    554a:	4770      	bx	lr
{
    554c:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    554e:	4c0c      	ldr	r4, [pc, #48]	; (5580 <nrfx_gpiote_init+0x40>)
    5550:	2260      	movs	r2, #96	; 0x60
    5552:	2100      	movs	r1, #0
    5554:	f104 0010 	add.w	r0, r4, #16
    5558:	f002 fd99 	bl	808e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    555c:	2006      	movs	r0, #6
    555e:	f7fd f8eb 	bl	2738 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5562:	4b09      	ldr	r3, [pc, #36]	; (5588 <nrfx_gpiote_init+0x48>)
    5564:	2200      	movs	r2, #0
    5566:	601a      	str	r2, [r3, #0]
    5568:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    556a:	4b08      	ldr	r3, [pc, #32]	; (558c <nrfx_gpiote_init+0x4c>)
    556c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5570:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    5574:	2301      	movs	r3, #1
    5576:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    557a:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    557c:	4804      	ldr	r0, [pc, #16]	; (5590 <nrfx_gpiote_init+0x50>)
}
    557e:	bd10      	pop	{r4, pc}
    5580:	20000058 	.word	0x20000058
    5584:	0bad0005 	.word	0x0bad0005
    5588:	4000617c 	.word	0x4000617c
    558c:	40006000 	.word	0x40006000
    5590:	0bad0000 	.word	0x0bad0000

00005594 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    5594:	4b03      	ldr	r3, [pc, #12]	; (55a4 <nrfx_gpiote_is_init+0x10>)
    5596:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    559a:	3800      	subs	r0, #0
    559c:	bf18      	it	ne
    559e:	2001      	movne	r0, #1
    55a0:	4770      	bx	lr
    55a2:	bf00      	nop
    55a4:	20000058 	.word	0x20000058

000055a8 <nrfx_gpiote_channel_free>:
{
    55a8:	b508      	push	{r3, lr}
    55aa:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    55ac:	4801      	ldr	r0, [pc, #4]	; (55b4 <nrfx_gpiote_channel_free+0xc>)
    55ae:	f7ff faf5 	bl	4b9c <nrfx_flag32_free>
}
    55b2:	bd08      	pop	{r3, pc}
    55b4:	200000c8 	.word	0x200000c8

000055b8 <nrfx_gpiote_channel_alloc>:
{
    55b8:	b508      	push	{r3, lr}
    55ba:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    55bc:	4801      	ldr	r0, [pc, #4]	; (55c4 <nrfx_gpiote_channel_alloc+0xc>)
    55be:	f7ff fac9 	bl	4b54 <nrfx_flag32_alloc>
}
    55c2:	bd08      	pop	{r3, pc}
    55c4:	200000c8 	.word	0x200000c8

000055c8 <nrfx_gpiote_trigger_enable>:
{
    55c8:	b538      	push	{r3, r4, r5, lr}
    55ca:	4604      	mov	r4, r0
    55cc:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    55ce:	f7ff fc29 	bl	4e24 <pin_in_use_by_te>
    55d2:	b308      	cbz	r0, 5618 <nrfx_gpiote_trigger_enable+0x50>
    55d4:	4620      	mov	r0, r4
    55d6:	f003 f97a 	bl	88ce <pin_is_input>
    55da:	b1e8      	cbz	r0, 5618 <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
    55dc:	4620      	mov	r0, r4
    55de:	f7ff fc41 	bl	4e64 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    55e2:	0083      	lsls	r3, r0, #2
    55e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    55e8:	b29b      	uxth	r3, r3
    55ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    55ee:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    55f2:	2200      	movs	r2, #0
    55f4:	601a      	str	r2, [r3, #0]
    55f6:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    55f8:	4a22      	ldr	r2, [pc, #136]	; (5684 <nrfx_gpiote_trigger_enable+0xbc>)
    55fa:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    55fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    5602:	f043 0301 	orr.w	r3, r3, #1
    5606:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    560a:	b39d      	cbz	r5, 5674 <nrfx_gpiote_trigger_enable+0xac>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    560c:	2301      	movs	r3, #1
    560e:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
    5612:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
    5616:	e02d      	b.n	5674 <nrfx_gpiote_trigger_enable+0xac>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5618:	f104 0308 	add.w	r3, r4, #8
    561c:	4a1a      	ldr	r2, [pc, #104]	; (5688 <nrfx_gpiote_trigger_enable+0xc0>)
    561e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    5622:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    5626:	2b04      	cmp	r3, #4
    5628:	d012      	beq.n	5650 <nrfx_gpiote_trigger_enable+0x88>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    562a:	2b05      	cmp	r3, #5
    562c:	d023      	beq.n	5676 <nrfx_gpiote_trigger_enable+0xae>
    *p_pin = pin_number & 0x1F;
    562e:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    5632:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5634:	2b01      	cmp	r3, #1
    5636:	d009      	beq.n	564c <nrfx_gpiote_trigger_enable+0x84>
        case 0: return NRF_P0;
    5638:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
    563c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5640:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5642:	f013 0f01 	tst.w	r3, #1
    5646:	d018      	beq.n	567a <nrfx_gpiote_trigger_enable+0xb2>
    5648:	2003      	movs	r0, #3
    564a:	e002      	b.n	5652 <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
    564c:	4b0f      	ldr	r3, [pc, #60]	; (568c <nrfx_gpiote_trigger_enable+0xc4>)
    564e:	e7f5      	b.n	563c <nrfx_gpiote_trigger_enable+0x74>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    5650:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    5652:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    5656:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5658:	2c01      	cmp	r4, #1
    565a:	d010      	beq.n	567e <nrfx_gpiote_trigger_enable+0xb6>
        case 0: return NRF_P0;
    565c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5660:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    5664:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    5668:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    566c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    5670:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    5674:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    5676:	2002      	movs	r0, #2
    5678:	e7eb      	b.n	5652 <nrfx_gpiote_trigger_enable+0x8a>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    567a:	2002      	movs	r0, #2
    567c:	e7e9      	b.n	5652 <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
    567e:	4903      	ldr	r1, [pc, #12]	; (568c <nrfx_gpiote_trigger_enable+0xc4>)
    5680:	e7ee      	b.n	5660 <nrfx_gpiote_trigger_enable+0x98>
    5682:	bf00      	nop
    5684:	40006000 	.word	0x40006000
    5688:	20000058 	.word	0x20000058
    568c:	50000300 	.word	0x50000300

00005690 <nrfx_gpiote_trigger_disable>:
{
    5690:	b510      	push	{r4, lr}
    5692:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5694:	f7ff fbc6 	bl	4e24 <pin_in_use_by_te>
    5698:	b1a0      	cbz	r0, 56c4 <nrfx_gpiote_trigger_disable+0x34>
    569a:	4620      	mov	r0, r4
    569c:	f003 f917 	bl	88ce <pin_is_input>
    56a0:	b180      	cbz	r0, 56c4 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    56a2:	4620      	mov	r0, r4
    56a4:	f7ff fbde 	bl	4e64 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    56a8:	2201      	movs	r2, #1
    56aa:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    56ac:	4b0e      	ldr	r3, [pc, #56]	; (56e8 <nrfx_gpiote_trigger_disable+0x58>)
    56ae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    56b2:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    56b6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    56ba:	f022 0203 	bic.w	r2, r2, #3
    56be:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    56c2:	e00e      	b.n	56e2 <nrfx_gpiote_trigger_disable+0x52>
    *p_pin = pin_number & 0x1F;
    56c4:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    56c8:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    56ca:	2c01      	cmp	r4, #1
    56cc:	d00a      	beq.n	56e4 <nrfx_gpiote_trigger_disable+0x54>
        case 0: return NRF_P0;
    56ce:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    56d2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    56d6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    56da:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    56de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    56e2:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    56e4:	4901      	ldr	r1, [pc, #4]	; (56ec <nrfx_gpiote_trigger_disable+0x5c>)
    56e6:	e7f4      	b.n	56d2 <nrfx_gpiote_trigger_disable+0x42>
    56e8:	40006000 	.word	0x40006000
    56ec:	50000300 	.word	0x50000300

000056f0 <nrfx_gpiote_pin_uninit>:
{
    56f0:	b510      	push	{r4, lr}
    56f2:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    56f4:	f7ff fb8c 	bl	4e10 <pin_in_use>
    56f8:	b908      	cbnz	r0, 56fe <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    56fa:	480c      	ldr	r0, [pc, #48]	; (572c <nrfx_gpiote_pin_uninit+0x3c>)
}
    56fc:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    56fe:	4620      	mov	r0, r4
    5700:	f7ff ffc6 	bl	5690 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    5704:	4620      	mov	r0, r4
    5706:	f7ff fcb1 	bl	506c <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    570a:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    570e:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5710:	2c01      	cmp	r4, #1
    5712:	d008      	beq.n	5726 <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
    5714:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    5718:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    571c:	2102      	movs	r1, #2
    571e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
    5722:	4803      	ldr	r0, [pc, #12]	; (5730 <nrfx_gpiote_pin_uninit+0x40>)
    5724:	e7ea      	b.n	56fc <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
    5726:	4a03      	ldr	r2, [pc, #12]	; (5734 <nrfx_gpiote_pin_uninit+0x44>)
    5728:	e7f6      	b.n	5718 <nrfx_gpiote_pin_uninit+0x28>
    572a:	bf00      	nop
    572c:	0bad0004 	.word	0x0bad0004
    5730:	0bad0000 	.word	0x0bad0000
    5734:	50000300 	.word	0x50000300

00005738 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    5738:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    573a:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    573c:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5740:	2100      	movs	r1, #0
    uint32_t status = 0;
    5742:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5744:	e003      	b.n	574e <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    5746:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    5748:	3304      	adds	r3, #4
    574a:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    574c:	3101      	adds	r1, #1
    574e:	2907      	cmp	r1, #7
    5750:	d814      	bhi.n	577c <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5752:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    5756:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    575a:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    575c:	2a00      	cmp	r2, #0
    575e:	d0f2      	beq.n	5746 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    5760:	4a0b      	ldr	r2, [pc, #44]	; (5790 <nrfx_gpiote_irq_handler+0x58>)
    5762:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    5766:	4210      	tst	r0, r2
    5768:	d0ed      	beq.n	5746 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    576a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    576e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5772:	2400      	movs	r4, #0
    5774:	6014      	str	r4, [r2, #0]
    5776:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    5778:	4305      	orrs	r5, r0
    577a:	e7e4      	b.n	5746 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    577c:	4b05      	ldr	r3, [pc, #20]	; (5794 <nrfx_gpiote_irq_handler+0x5c>)
    577e:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    5780:	b91b      	cbnz	r3, 578a <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    5782:	4628      	mov	r0, r5
    5784:	f7ff fd28 	bl	51d8 <gpiote_evt_handle>
}
    5788:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    578a:	f7ff fcc1 	bl	5110 <port_event_handle>
    578e:	e7f8      	b.n	5782 <nrfx_gpiote_irq_handler+0x4a>
    5790:	40006000 	.word	0x40006000
    5794:	4000617c 	.word	0x4000617c

00005798 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    5798:	b508      	push	{r3, lr}
    579a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    579c:	4801      	ldr	r0, [pc, #4]	; (57a4 <nrfx_ppi_channel_alloc+0xc>)
    579e:	f7ff f9d9 	bl	4b54 <nrfx_flag32_alloc>
}
    57a2:	bd08      	pop	{r3, pc}
    57a4:	200000d4 	.word	0x200000d4

000057a8 <configure_pins>:
static void configure_pins(nrfx_pwm_t const *        p_instance,
                           nrfx_pwm_config_t const * p_config)
{
    // Nothing to do here if both GPIO configuration and pin selection are
    // to be skipped (the pin numbers may be then even not specified).
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    57a8:	7b0b      	ldrb	r3, [r1, #12]
    57aa:	2b00      	cmp	r3, #0
    57ac:	d04f      	beq.n	584e <configure_pins+0xa6>
    57ae:	7b4b      	ldrb	r3, [r1, #13]
    57b0:	b90b      	cbnz	r3, 57b6 <configure_pins+0xe>
    57b2:	2300      	movs	r3, #0
    57b4:	e04c      	b.n	5850 <configure_pins+0xa8>
    57b6:	4770      	bx	lr
    57b8:	4e31      	ldr	r6, [pc, #196]	; (5880 <configure_pins+0xd8>)
    57ba:	e032      	b.n	5822 <configure_pins+0x7a>
    *p_pin = pin_number & 0x1F;
    57bc:	f002 051f 	and.w	r5, r2, #31
    return pin_number >> 5;
    57c0:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    57c2:	2a01      	cmp	r2, #1
    57c4:	d006      	beq.n	57d4 <configure_pins+0x2c>
        case 0: return NRF_P0;
    57c6:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    57ca:	2201      	movs	r2, #1
    57cc:	40aa      	lsls	r2, r5
    p_reg->OUTSET = set_mask;
    57ce:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
}
    57d2:	e02a      	b.n	582a <configure_pins+0x82>
        case 1: return NRF_P1;
    57d4:	4e2a      	ldr	r6, [pc, #168]	; (5880 <configure_pins+0xd8>)
    57d6:	e7f8      	b.n	57ca <configure_pins+0x22>
    57d8:	4d29      	ldr	r5, [pc, #164]	; (5880 <configure_pins+0xd8>)
    57da:	e032      	b.n	5842 <configure_pins+0x9a>
                nrf_gpio_cfg_output(out_pins[i]);
            }
        }
        else
        {
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    57dc:	f04f 34ff 	mov.w	r4, #4294967295
    57e0:	aa04      	add	r2, sp, #16
    57e2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    57e6:	f842 4c10 	str.w	r4, [r2, #-16]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    57ea:	3301      	adds	r3, #1
    57ec:	b2db      	uxtb	r3, r3
    57ee:	2b03      	cmp	r3, #3
    57f0:	d831      	bhi.n	5856 <configure_pins+0xae>
        uint8_t output_pin = p_config->output_pins[i];
    57f2:	461c      	mov	r4, r3
    57f4:	5cca      	ldrb	r2, [r1, r3]
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    57f6:	2aff      	cmp	r2, #255	; 0xff
    57f8:	d0f0      	beq.n	57dc <configure_pins+0x34>
            bool inverted = output_pin &  NRFX_PWM_PIN_INVERTED;
    57fa:	b256      	sxtb	r6, r2
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    57fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    5800:	ad04      	add	r5, sp, #16
    5802:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    5806:	f845 2c10 	str.w	r2, [r5, #-16]
            if (!p_config->skip_gpio_cfg)
    580a:	7b0d      	ldrb	r5, [r1, #12]
    580c:	2d00      	cmp	r5, #0
    580e:	d1ec      	bne.n	57ea <configure_pins+0x42>
    if (value == 0)
    5810:	2e00      	cmp	r6, #0
    5812:	dbd3      	blt.n	57bc <configure_pins+0x14>
    *p_pin = pin_number & 0x1F;
    5814:	f002 051f 	and.w	r5, r2, #31
    return pin_number >> 5;
    5818:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    581a:	2a01      	cmp	r2, #1
    581c:	d0cc      	beq.n	57b8 <configure_pins+0x10>
        case 0: return NRF_P0;
    581e:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5822:	2201      	movs	r2, #1
    5824:	40aa      	lsls	r2, r5
    p_reg->OUTCLR = clr_mask;
    5826:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
                nrf_gpio_cfg_output(out_pins[i]);
    582a:	aa04      	add	r2, sp, #16
    582c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    5830:	f854 2c10 	ldr.w	r2, [r4, #-16]
    *p_pin = pin_number & 0x1F;
    5834:	f002 041f 	and.w	r4, r2, #31
    return pin_number >> 5;
    5838:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    583a:	2a01      	cmp	r2, #1
    583c:	d0cc      	beq.n	57d8 <configure_pins+0x30>
        case 0: return NRF_P0;
    583e:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    5842:	f504 72e0 	add.w	r2, r4, #448	; 0x1c0
    5846:	2403      	movs	r4, #3
    5848:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
}
    584c:	e7cd      	b.n	57ea <configure_pins+0x42>
    584e:	2300      	movs	r3, #0
{
    5850:	b470      	push	{r4, r5, r6}
    5852:	b085      	sub	sp, #20
    5854:	e7cb      	b.n	57ee <configure_pins+0x46>
        }
    }

    if (!p_config->skip_psel_cfg)
    5856:	7b4b      	ldrb	r3, [r1, #13]
    5858:	b973      	cbnz	r3, 5878 <configure_pins+0xd0>
    {
        nrf_pwm_pins_set(p_instance->p_registers, out_pins);
    585a:	6800      	ldr	r0, [r0, #0]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    585c:	e00a      	b.n	5874 <configure_pins+0xcc>
        p_reg->PSEL.OUT[i] = out_pins[i];
    585e:	aa04      	add	r2, sp, #16
    5860:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    5864:	f852 1c10 	ldr.w	r1, [r2, #-16]
    5868:	f503 72ac 	add.w	r2, r3, #344	; 0x158
    586c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    5870:	3301      	adds	r3, #1
    5872:	b2db      	uxtb	r3, r3
    5874:	2b03      	cmp	r3, #3
    5876:	d9f2      	bls.n	585e <configure_pins+0xb6>
    }
}
    5878:	b005      	add	sp, #20
    587a:	bc70      	pop	{r4, r5, r6}
    587c:	4770      	bx	lr
    587e:	bf00      	nop
    5880:	50000300 	.word	0x50000300

00005884 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    5884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5888:	4604      	mov	r4, r0
    588a:	460d      	mov	r5, r1
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    588c:	7906      	ldrb	r6, [r0, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    588e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    5892:	492b      	ldr	r1, [pc, #172]	; (5940 <nrfx_pwm_init+0xbc>)
    5894:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    5898:	7a09      	ldrb	r1, [r1, #8]
    589a:	b111      	cbz	r1, 58a2 <nrfx_pwm_init+0x1e>
    {
        err_code = NRFX_ERROR_INVALID_STATE;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    589c:	4829      	ldr	r0, [pc, #164]	; (5944 <nrfx_pwm_init+0xc0>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    589e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_cb->handler = handler;
    58a2:	4f27      	ldr	r7, [pc, #156]	; (5940 <nrfx_pwm_init+0xbc>)
    58a4:	ea4f 0880 	mov.w	r8, r0, lsl #2
    58a8:	eb07 0180 	add.w	r1, r7, r0, lsl #2
    58ac:	f847 2008 	str.w	r2, [r7, r8]
    p_cb->p_context = p_context;
    58b0:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    58b2:	7b2b      	ldrb	r3, [r5, #12]
    58b4:	728b      	strb	r3, [r1, #10]
    configure_pins(p_instance, p_config);
    58b6:	4629      	mov	r1, r5
    58b8:	4620      	mov	r0, r4
    58ba:	f7ff ff75 	bl	57a8 <configure_pins>
    nrf_pwm_enable(p_instance->p_registers);
    58be:	6823      	ldr	r3, [r4, #0]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    58c0:	2201      	movs	r2, #1
    58c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    nrf_pwm_configure(p_instance->p_registers,
    58c6:	6823      	ldr	r3, [r4, #0]
    58c8:	7968      	ldrb	r0, [r5, #5]
    58ca:	79a9      	ldrb	r1, [r5, #6]
    58cc:	892a      	ldrh	r2, [r5, #8]
    p_reg->PRESCALER  = base_clock;
    58ce:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->MODE       = mode;
    58d2:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    58d6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    nrf_pwm_decoder_set(p_instance->p_registers,
    58da:	6822      	ldr	r2, [r4, #0]
    58dc:	7aab      	ldrb	r3, [r5, #10]
    58de:	7ae9      	ldrb	r1, [r5, #11]

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    58e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    58e4:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    58e8:	6822      	ldr	r2, [r4, #0]
    p_reg->SHORTS = mask;
    58ea:	2300      	movs	r3, #0
    58ec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    nrf_pwm_int_set(p_instance->p_registers, 0);
    58f0:	6822      	ldr	r2, [r4, #0]
    p_reg->INTEN = mask;
    58f2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_LOOPSDONE);
    58f6:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    58f8:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    58fc:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND0);
    5900:	6822      	ldr	r2, [r4, #0]
    5902:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    5906:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND1);
    590a:	6822      	ldr	r2, [r4, #0]
    590c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
    5910:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
    5914:	6822      	ldr	r2, [r4, #0]
    5916:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    591a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    if (p_cb->handler)
    591e:	f857 3008 	ldr.w	r3, [r7, r8]
    5922:	b123      	cbz	r3, 592e <nrfx_pwm_init+0xaa>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    5924:	6820      	ldr	r0, [r4, #0]
    5926:	f340 3007 	sbfx	r0, r0, #12, #8
    592a:	f7fc ff05 	bl	2738 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    592e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    5932:	4b03      	ldr	r3, [pc, #12]	; (5940 <nrfx_pwm_init+0xbc>)
    5934:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    5938:	2301      	movs	r3, #1
    593a:	7233      	strb	r3, [r6, #8]
    return err_code;
    593c:	4802      	ldr	r0, [pc, #8]	; (5948 <nrfx_pwm_init+0xc4>)
    593e:	e7ae      	b.n	589e <nrfx_pwm_init+0x1a>
    5940:	20000ac8 	.word	0x20000ac8
    5944:	0bad0005 	.word	0x0bad0005
    5948:	0bad0000 	.word	0x0bad0000

0000594c <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    594c:	b570      	push	{r4, r5, r6, lr}
    594e:	460c      	mov	r4, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    5950:	7901      	ldrb	r1, [r0, #4]
    5952:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5956:	4d1d      	ldr	r5, [pc, #116]	; (59cc <nrfx_pwm_simple_playback+0x80>)
    5958:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    NRFX_ASSERT(playback_count > 0);
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    595c:	6805      	ldr	r5, [r0, #0]
    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
    595e:	6826      	ldr	r6, [r4, #0]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    5960:	f8c5 6520 	str.w	r6, [r5, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
    5964:	88a6      	ldrh	r6, [r4, #4]
    p_reg->SEQ[seq_id].CNT = length;
    5966:	f8c5 6524 	str.w	r6, [r5, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    596a:	68a6      	ldr	r6, [r4, #8]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    596c:	f8c5 6528 	str.w	r6, [r5, #1320]	; 0x528
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    5970:	68e6      	ldr	r6, [r4, #12]
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    5972:	f8c5 652c 	str.w	r6, [r5, #1324]	; 0x52c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    5976:	6805      	ldr	r5, [r0, #0]
    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
    5978:	6826      	ldr	r6, [r4, #0]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    597a:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
    597e:	88a6      	ldrh	r6, [r4, #4]
    p_reg->SEQ[seq_id].CNT = length;
    5980:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    5984:	68a6      	ldr	r6, [r4, #8]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    5986:	f8c5 6548 	str.w	r6, [r5, #1352]	; 0x548
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    598a:	68e4      	ldr	r4, [r4, #12]
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    598c:	f8c5 454c 	str.w	r4, [r5, #1356]	; 0x54c
    bool odd = (playback_count & 1);
    5990:	f002 0501 	and.w	r5, r2, #1
    nrf_pwm_loop_set(p_instance->p_registers,
    5994:	6806      	ldr	r6, [r0, #0]
    5996:	eb05 0252 	add.w	r2, r5, r2, lsr #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    599a:	f8c6 2514 	str.w	r2, [r6, #1300]	; 0x514
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    599e:	f013 0f01 	tst.w	r3, #1
    59a2:	d105      	bne.n	59b0 <nrfx_pwm_simple_playback+0x64>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    59a4:	f013 0202 	ands.w	r2, r3, #2
    59a8:	d003      	beq.n	59b2 <nrfx_pwm_simple_playback+0x66>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    59aa:	b15d      	cbz	r5, 59c4 <nrfx_pwm_simple_playback+0x78>
    59ac:	2208      	movs	r2, #8
    59ae:	e000      	b.n	59b2 <nrfx_pwm_simple_playback+0x66>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    59b0:	2210      	movs	r2, #16
    }
    else
    {
        shorts_mask = 0;
    }
    nrf_pwm_shorts_set(p_instance->p_registers, shorts_mask);
    59b2:	6804      	ldr	r4, [r0, #0]
    p_reg->SHORTS = mask;
    59b4:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    59b8:	b2da      	uxtb	r2, r3
    59ba:	b12d      	cbz	r5, 59c8 <nrfx_pwm_simple_playback+0x7c>
    59bc:	230c      	movs	r3, #12
    59be:	f002 ff94 	bl	88ea <start_playback>
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    59c2:	bd70      	pop	{r4, r5, r6, pc}
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    59c4:	2204      	movs	r2, #4
    59c6:	e7f4      	b.n	59b2 <nrfx_pwm_simple_playback+0x66>
    return start_playback(p_instance, p_cb, flags,
    59c8:	2308      	movs	r3, #8
    59ca:	e7f8      	b.n	59be <nrfx_pwm_simple_playback+0x72>
    59cc:	20000ac8 	.word	0x20000ac8

000059d0 <nrfx_pwm_is_stopped>:
    return ret_val;
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    59d0:	4602      	mov	r2, r0
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    59d2:	7903      	ldrb	r3, [r0, #4]

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    59d4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    59d8:	490a      	ldr	r1, [pc, #40]	; (5a04 <nrfx_pwm_is_stopped+0x34>)
    59da:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    59de:	7a09      	ldrb	r1, [r1, #8]
    59e0:	b2c9      	uxtb	r1, r1
    59e2:	2902      	cmp	r1, #2
    59e4:	d00c      	beq.n	5a00 <nrfx_pwm_is_stopped+0x30>
    {
        ret_val = true;
    59e6:	2001      	movs	r0, #1
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    59e8:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    59ea:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    59ee:	b132      	cbz	r2, 59fe <nrfx_pwm_is_stopped+0x2e>
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    59f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    59f4:	4a03      	ldr	r2, [pc, #12]	; (5a04 <nrfx_pwm_is_stopped+0x34>)
    59f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    59fa:	2001      	movs	r0, #1
    59fc:	7218      	strb	r0, [r3, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    59fe:	4770      	bx	lr
    bool ret_val = false;
    5a00:	2000      	movs	r0, #0
    5a02:	e7f1      	b.n	59e8 <nrfx_pwm_is_stopped+0x18>
    5a04:	20000ac8 	.word	0x20000ac8

00005a08 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    5a08:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5a0a:	4c11      	ldr	r4, [pc, #68]	; (5a50 <_DoInit+0x48>)
    5a0c:	2303      	movs	r3, #3
    5a0e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    5a10:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    5a12:	4a10      	ldr	r2, [pc, #64]	; (5a54 <_DoInit+0x4c>)
    5a14:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    5a16:	4b10      	ldr	r3, [pc, #64]	; (5a58 <_DoInit+0x50>)
    5a18:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    5a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5a1e:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    5a20:	2300      	movs	r3, #0
    5a22:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    5a24:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5a26:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    5a28:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    5a2a:	4a0c      	ldr	r2, [pc, #48]	; (5a5c <_DoInit+0x54>)
    5a2c:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    5a2e:	2210      	movs	r2, #16
    5a30:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    5a32:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    5a34:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5a36:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    5a38:	4909      	ldr	r1, [pc, #36]	; (5a60 <_DoInit+0x58>)
    5a3a:	1de0      	adds	r0, r4, #7
    5a3c:	f002 fac4 	bl	7fc8 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    5a40:	4908      	ldr	r1, [pc, #32]	; (5a64 <_DoInit+0x5c>)
    5a42:	4620      	mov	r0, r4
    5a44:	f002 fac0 	bl	7fc8 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    5a48:	2320      	movs	r3, #32
    5a4a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    5a4c:	bd10      	pop	{r4, pc}
    5a4e:	bf00      	nop
    5a50:	20000ad4 	.word	0x20000ad4
    5a54:	00009de0 	.word	0x00009de0
    5a58:	20000b8c 	.word	0x20000b8c
    5a5c:	20000b7c 	.word	0x20000b7c
    5a60:	00009dec 	.word	0x00009dec
    5a64:	00009df0 	.word	0x00009df0

00005a68 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5a6c:	4604      	mov	r4, r0
    5a6e:	460e      	mov	r6, r1
    5a70:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    5a72:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    5a76:	4a2d      	ldr	r2, [pc, #180]	; (5b2c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    5a78:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    5a7c:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    5a7e:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    5a80:	42bb      	cmp	r3, r7
    5a82:	d84b      	bhi.n	5b1c <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    5a84:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    5a88:	4928      	ldr	r1, [pc, #160]	; (5b2c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    5a8a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    5a8e:	f8d2 8020 	ldr.w	r8, [r2, #32]
    5a92:	eba8 0907 	sub.w	r9, r8, r7
    5a96:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    5a9a:	4295      	cmp	r5, r2
    5a9c:	d904      	bls.n	5aa8 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    5a9e:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    5aa0:	429d      	cmp	r5, r3
    5aa2:	d916      	bls.n	5ad2 <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    5aa4:	2000      	movs	r0, #0
    5aa6:	e03e      	b.n	5b26 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5aa8:	f8df 8080 	ldr.w	r8, [pc, #128]	; 5b2c <SEGGER_RTT_WriteSkipNoLock+0xc4>
    5aac:	1c63      	adds	r3, r4, #1
    5aae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5ab2:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    5ab6:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    5ab8:	462a      	mov	r2, r5
    5aba:	4631      	mov	r1, r6
    5abc:	4438      	add	r0, r7
    5abe:	f002 fac2 	bl	8046 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    5ac2:	443d      	add	r5, r7
    5ac4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    5ac8:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    5acc:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
    5ace:	2001      	movs	r0, #1
    5ad0:	e029      	b.n	5b26 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5ad2:	1c43      	adds	r3, r0, #1
    5ad4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5ad8:	4a14      	ldr	r2, [pc, #80]	; (5b2c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    5ada:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    5ade:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    5ae0:	464a      	mov	r2, r9
    5ae2:	4631      	mov	r1, r6
    5ae4:	4438      	add	r0, r7
    5ae6:	f002 faae 	bl	8046 <memcpy>
      NumBytes -= Rem;
    5aea:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    5aee:	197f      	adds	r7, r7, r5
    5af0:	d107      	bne.n	5b02 <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
    5af2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    5af6:	4b0d      	ldr	r3, [pc, #52]	; (5b2c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    5af8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    5afc:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    5afe:	2001      	movs	r0, #1
    5b00:	e011      	b.n	5b26 <SEGGER_RTT_WriteSkipNoLock+0xbe>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    5b02:	1c63      	adds	r3, r4, #1
    5b04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5b08:	4a08      	ldr	r2, [pc, #32]	; (5b2c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    5b0a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    5b0e:	463a      	mov	r2, r7
    5b10:	eb06 0109 	add.w	r1, r6, r9
    5b14:	6858      	ldr	r0, [r3, #4]
    5b16:	f002 fa96 	bl	8046 <memcpy>
    5b1a:	e7ea      	b.n	5af2 <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
    5b1c:	1bdb      	subs	r3, r3, r7
    5b1e:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    5b20:	42ab      	cmp	r3, r5
    5b22:	d2c1      	bcs.n	5aa8 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    5b24:	2000      	movs	r0, #0
}
    5b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5b2a:	bf00      	nop
    5b2c:	20000ad4 	.word	0x20000ad4

00005b30 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    5b30:	4b06      	ldr	r3, [pc, #24]	; (5b4c <SEGGER_RTT_HasDataUp+0x1c>)
    5b32:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    5b36:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    5b3a:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    5b3c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5b40:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5b44:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    5b46:	1a80      	subs	r0, r0, r2
    5b48:	4770      	bx	lr
    5b4a:	bf00      	nop
    5b4c:	20000ad4 	.word	0x20000ad4

00005b50 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    5b50:	4b03      	ldr	r3, [pc, #12]	; (5b60 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    5b52:	4a04      	ldr	r2, [pc, #16]	; (5b64 <z_device_state_init+0x14>)
    5b54:	4293      	cmp	r3, r2
    5b56:	d201      	bcs.n	5b5c <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    5b58:	3318      	adds	r3, #24
    5b5a:	e7fa      	b.n	5b52 <z_device_state_init+0x2>
	}
}
    5b5c:	4770      	bx	lr
    5b5e:	bf00      	nop
    5b60:	00008f74 	.word	0x00008f74
    5b64:	0000901c 	.word	0x0000901c

00005b68 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    5b68:	b570      	push	{r4, r5, r6, lr}
    5b6a:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5b6c:	4b11      	ldr	r3, [pc, #68]	; (5bb4 <z_sys_init_run_level+0x4c>)
    5b6e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    5b72:	e009      	b.n	5b88 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    5b74:	4240      	negs	r0, r0
    5b76:	e017      	b.n	5ba8 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    5b78:	68eb      	ldr	r3, [r5, #12]
    5b7a:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    5b7c:	68ea      	ldr	r2, [r5, #12]
    5b7e:	7853      	ldrb	r3, [r2, #1]
    5b80:	f043 0301 	orr.w	r3, r3, #1
    5b84:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5b86:	3408      	adds	r4, #8
    5b88:	1c73      	adds	r3, r6, #1
    5b8a:	4a0a      	ldr	r2, [pc, #40]	; (5bb4 <z_sys_init_run_level+0x4c>)
    5b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5b90:	42a3      	cmp	r3, r4
    5b92:	d90d      	bls.n	5bb0 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    5b94:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    5b96:	6823      	ldr	r3, [r4, #0]
    5b98:	4628      	mov	r0, r5
    5b9a:	4798      	blx	r3
		if (dev != NULL) {
    5b9c:	2d00      	cmp	r5, #0
    5b9e:	d0f2      	beq.n	5b86 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    5ba0:	2800      	cmp	r0, #0
    5ba2:	d0eb      	beq.n	5b7c <z_sys_init_run_level+0x14>
				if (rc < 0) {
    5ba4:	2800      	cmp	r0, #0
    5ba6:	dbe5      	blt.n	5b74 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    5ba8:	28ff      	cmp	r0, #255	; 0xff
    5baa:	dde5      	ble.n	5b78 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    5bac:	20ff      	movs	r0, #255	; 0xff
    5bae:	e7e3      	b.n	5b78 <z_sys_init_run_level+0x10>
		}
	}
}
    5bb0:	bd70      	pop	{r4, r5, r6, pc}
    5bb2:	bf00      	nop
    5bb4:	00009df8 	.word	0x00009df8

00005bb8 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    5bb8:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    5bba:	4605      	mov	r5, r0
    5bbc:	b328      	cbz	r0, 5c0a <z_impl_device_get_binding+0x52>
    5bbe:	7803      	ldrb	r3, [r0, #0]
    5bc0:	b32b      	cbz	r3, 5c0e <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    5bc2:	4c14      	ldr	r4, [pc, #80]	; (5c14 <z_impl_device_get_binding+0x5c>)
    5bc4:	e000      	b.n	5bc8 <z_impl_device_get_binding+0x10>
    5bc6:	3418      	adds	r4, #24
    5bc8:	4b13      	ldr	r3, [pc, #76]	; (5c18 <z_impl_device_get_binding+0x60>)
    5bca:	429c      	cmp	r4, r3
    5bcc:	d008      	beq.n	5be0 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
    5bce:	4620      	mov	r0, r4
    5bd0:	f002 fed7 	bl	8982 <z_device_ready>
    5bd4:	2800      	cmp	r0, #0
    5bd6:	d0f6      	beq.n	5bc6 <z_impl_device_get_binding+0xe>
    5bd8:	6823      	ldr	r3, [r4, #0]
    5bda:	42ab      	cmp	r3, r5
    5bdc:	d1f3      	bne.n	5bc6 <z_impl_device_get_binding+0xe>
    5bde:	e012      	b.n	5c06 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    5be0:	4c0c      	ldr	r4, [pc, #48]	; (5c14 <z_impl_device_get_binding+0x5c>)
    5be2:	e000      	b.n	5be6 <z_impl_device_get_binding+0x2e>
    5be4:	3418      	adds	r4, #24
    5be6:	4b0c      	ldr	r3, [pc, #48]	; (5c18 <z_impl_device_get_binding+0x60>)
    5be8:	429c      	cmp	r4, r3
    5bea:	d00b      	beq.n	5c04 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    5bec:	4620      	mov	r0, r4
    5bee:	f002 fec8 	bl	8982 <z_device_ready>
    5bf2:	2800      	cmp	r0, #0
    5bf4:	d0f6      	beq.n	5be4 <z_impl_device_get_binding+0x2c>
    5bf6:	6821      	ldr	r1, [r4, #0]
    5bf8:	4628      	mov	r0, r5
    5bfa:	f002 fa1a 	bl	8032 <strcmp>
    5bfe:	2800      	cmp	r0, #0
    5c00:	d1f0      	bne.n	5be4 <z_impl_device_get_binding+0x2c>
    5c02:	e000      	b.n	5c06 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    5c04:	2400      	movs	r4, #0
}
    5c06:	4620      	mov	r0, r4
    5c08:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    5c0a:	4604      	mov	r4, r0
    5c0c:	e7fb      	b.n	5c06 <z_impl_device_get_binding+0x4e>
    5c0e:	2400      	movs	r4, #0
    5c10:	e7f9      	b.n	5c06 <z_impl_device_get_binding+0x4e>
    5c12:	bf00      	nop
    5c14:	00008f74 	.word	0x00008f74
    5c18:	0000901c 	.word	0x0000901c

00005c1c <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    5c1c:	2804      	cmp	r0, #4
    5c1e:	d80c      	bhi.n	5c3a <reason_to_str+0x1e>
    5c20:	e8df f000 	tbb	[pc, r0]
    5c24:	07050d03 	.word	0x07050d03
    5c28:	09          	.byte	0x09
    5c29:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    5c2a:	4806      	ldr	r0, [pc, #24]	; (5c44 <reason_to_str+0x28>)
    5c2c:	4770      	bx	lr
		return "Stack overflow";
    5c2e:	4806      	ldr	r0, [pc, #24]	; (5c48 <reason_to_str+0x2c>)
    5c30:	4770      	bx	lr
		return "Kernel oops";
    5c32:	4806      	ldr	r0, [pc, #24]	; (5c4c <reason_to_str+0x30>)
    5c34:	4770      	bx	lr
		return "Kernel panic";
    5c36:	4806      	ldr	r0, [pc, #24]	; (5c50 <reason_to_str+0x34>)
    5c38:	4770      	bx	lr
	default:
		return "Unknown error";
    5c3a:	4806      	ldr	r0, [pc, #24]	; (5c54 <reason_to_str+0x38>)
    5c3c:	4770      	bx	lr
		return "Unhandled interrupt";
    5c3e:	4806      	ldr	r0, [pc, #24]	; (5c58 <reason_to_str+0x3c>)
	}
}
    5c40:	4770      	bx	lr
    5c42:	bf00      	nop
    5c44:	00009e60 	.word	0x00009e60
    5c48:	00009e34 	.word	0x00009e34
    5c4c:	00009e44 	.word	0x00009e44
    5c50:	00009e50 	.word	0x00009e50
    5c54:	00009e10 	.word	0x00009e10
    5c58:	00009e20 	.word	0x00009e20

00005c5c <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    5c5c:	b130      	cbz	r0, 5c6c <thread_name_get+0x10>
{
    5c5e:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    5c60:	f002 ff05 	bl	8a6e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    5c64:	b120      	cbz	r0, 5c70 <thread_name_get+0x14>
    5c66:	7803      	ldrb	r3, [r0, #0]
    5c68:	b123      	cbz	r3, 5c74 <thread_name_get+0x18>
}
    5c6a:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    5c6c:	4802      	ldr	r0, [pc, #8]	; (5c78 <thread_name_get+0x1c>)
}
    5c6e:	4770      	bx	lr
		thread_name = "unknown";
    5c70:	4801      	ldr	r0, [pc, #4]	; (5c78 <thread_name_get+0x1c>)
    5c72:	e7fa      	b.n	5c6a <thread_name_get+0xe>
    5c74:	4800      	ldr	r0, [pc, #0]	; (5c78 <thread_name_get+0x1c>)
	return thread_name;
    5c76:	e7f8      	b.n	5c6a <thread_name_get+0xe>
    5c78:	00009e70 	.word	0x00009e70

00005c7c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c80:	b082      	sub	sp, #8
    5c82:	4605      	mov	r5, r0
    5c84:	460e      	mov	r6, r1
	__asm__ volatile(
    5c86:	f04f 0320 	mov.w	r3, #32
    5c8a:	f3ef 8711 	mrs	r7, BASEPRI
    5c8e:	f383 8812 	msr	BASEPRI_MAX, r3
    5c92:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5c96:	f000 ff83 	bl	6ba0 <z_impl_z_current_get>
    5c9a:	4604      	mov	r4, r0
    5c9c:	4b29      	ldr	r3, [pc, #164]	; (5d44 <z_fatal_error+0xc8>)
    5c9e:	4a2a      	ldr	r2, [pc, #168]	; (5d48 <z_fatal_error+0xcc>)
    5ca0:	1a9b      	subs	r3, r3, r2
    5ca2:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    5ca4:	f04f 0800 	mov.w	r8, #0
    5ca8:	2201      	movs	r2, #1
    5caa:	f362 0802 	bfi	r8, r2, #0, #3
    5cae:	f36f 08c5 	bfc	r8, #3, #3
    5cb2:	f363 188f 	bfi	r8, r3, #6, #10
    5cb6:	4628      	mov	r0, r5
    5cb8:	f7ff ffb0 	bl	5c1c <reason_to_str>
    5cbc:	4602      	mov	r2, r0
    5cbe:	f8ad 8000 	strh.w	r8, [sp]
    5cc2:	2300      	movs	r3, #0
    5cc4:	4629      	mov	r1, r5
    5cc6:	4821      	ldr	r0, [pc, #132]	; (5d4c <z_fatal_error+0xd0>)
    5cc8:	f7fb fe16 	bl	18f8 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    5ccc:	b11e      	cbz	r6, 5cd6 <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    5cce:	69f3      	ldr	r3, [r6, #28]
    5cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5cd4:	bb2b      	cbnz	r3, 5d22 <z_fatal_error+0xa6>
    5cd6:	4b1b      	ldr	r3, [pc, #108]	; (5d44 <z_fatal_error+0xc8>)
    5cd8:	4a1b      	ldr	r2, [pc, #108]	; (5d48 <z_fatal_error+0xcc>)
    5cda:	1a9b      	subs	r3, r3, r2
    5cdc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    5cde:	f04f 0800 	mov.w	r8, #0
    5ce2:	2201      	movs	r2, #1
    5ce4:	f362 0802 	bfi	r8, r2, #0, #3
    5ce8:	f36f 08c5 	bfc	r8, #3, #3
    5cec:	f363 188f 	bfi	r8, r3, #6, #10
    5cf0:	4620      	mov	r0, r4
    5cf2:	f7ff ffb3 	bl	5c5c <thread_name_get>
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    5cf6:	f7fb fcc5 	bl	1684 <z_log_strdup>
    5cfa:	4602      	mov	r2, r0
    5cfc:	4643      	mov	r3, r8
    5cfe:	4621      	mov	r1, r4
    5d00:	4813      	ldr	r0, [pc, #76]	; (5d50 <z_fatal_error+0xd4>)
    5d02:	f7fb fe6d 	bl	19e0 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    5d06:	4631      	mov	r1, r6
    5d08:	4628      	mov	r0, r5
    5d0a:	f7fe fd99 	bl	4840 <k_sys_fatal_error_handler>
	__asm__ volatile(
    5d0e:	f387 8811 	msr	BASEPRI, r7
    5d12:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5d16:	4620      	mov	r0, r4
    5d18:	f7fd fa90 	bl	323c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5d1c:	b002      	add	sp, #8
    5d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d22:	4b08      	ldr	r3, [pc, #32]	; (5d44 <z_fatal_error+0xc8>)
    5d24:	4a08      	ldr	r2, [pc, #32]	; (5d48 <z_fatal_error+0xcc>)
    5d26:	1a9b      	subs	r3, r3, r2
    5d28:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
    5d2a:	f04f 0100 	mov.w	r1, #0
    5d2e:	2201      	movs	r2, #1
    5d30:	f362 0102 	bfi	r1, r2, #0, #3
    5d34:	f36f 01c5 	bfc	r1, #3, #3
    5d38:	f363 118f 	bfi	r1, r3, #6, #10
    5d3c:	4805      	ldr	r0, [pc, #20]	; (5d54 <z_fatal_error+0xd8>)
    5d3e:	f7fb fe8b 	bl	1a58 <log_0>
    5d42:	e7c8      	b.n	5cd6 <z_fatal_error+0x5a>
    5d44:	000091d4 	.word	0x000091d4
    5d48:	0000919c 	.word	0x0000919c
    5d4c:	00009e78 	.word	0x00009e78
    5d50:	00009ec4 	.word	0x00009ec4
    5d54:	00009ea0 	.word	0x00009ea0

00005d58 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    5d58:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d5a:	b089      	sub	sp, #36	; 0x24
    5d5c:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    5d5e:	4b15      	ldr	r3, [pc, #84]	; (5db4 <init_idle_thread+0x5c>)
    5d60:	25b0      	movs	r5, #176	; 0xb0
    5d62:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    5d66:	4b14      	ldr	r3, [pc, #80]	; (5db8 <init_idle_thread+0x60>)
    5d68:	f44f 76b0 	mov.w	r6, #352	; 0x160
    5d6c:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    5d70:	af06      	add	r7, sp, #24
    5d72:	4603      	mov	r3, r0
    5d74:	4a11      	ldr	r2, [pc, #68]	; (5dbc <init_idle_thread+0x64>)
    5d76:	2108      	movs	r1, #8
    5d78:	4638      	mov	r0, r7
    5d7a:	f001 fbc1 	bl	7500 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5d7e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    5d82:	480f      	ldr	r0, [pc, #60]	; (5dc0 <init_idle_thread+0x68>)
    5d84:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    5d88:	9705      	str	r7, [sp, #20]
    5d8a:	2301      	movs	r3, #1
    5d8c:	9304      	str	r3, [sp, #16]
    5d8e:	230f      	movs	r3, #15
    5d90:	9303      	str	r3, [sp, #12]
    5d92:	2300      	movs	r3, #0
    5d94:	9302      	str	r3, [sp, #8]
    5d96:	9301      	str	r3, [sp, #4]
    5d98:	9400      	str	r4, [sp, #0]
    5d9a:	4b0a      	ldr	r3, [pc, #40]	; (5dc4 <init_idle_thread+0x6c>)
    5d9c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    5da0:	4631      	mov	r1, r6
    5da2:	4628      	mov	r0, r5
    5da4:	f000 f95a 	bl	605c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5da8:	7b6b      	ldrb	r3, [r5, #13]
    5daa:	f023 0304 	bic.w	r3, r3, #4
    5dae:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    5db0:	b009      	add	sp, #36	; 0x24
    5db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5db4:	200002d8 	.word	0x200002d8
    5db8:	20001900 	.word	0x20001900
    5dbc:	00009edc 	.word	0x00009edc
    5dc0:	20000f8c 	.word	0x20000f8c
    5dc4:	000061c1 	.word	0x000061c1

00005dc8 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    5dc8:	b570      	push	{r4, r5, r6, lr}
    5dca:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    5dcc:	f000 fe1c 	bl	6a08 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    5dd0:	4d1b      	ldr	r5, [pc, #108]	; (5e40 <prepare_multithreading+0x78>)
    5dd2:	4b1c      	ldr	r3, [pc, #112]	; (5e44 <prepare_multithreading+0x7c>)
    5dd4:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5dd6:	4b1c      	ldr	r3, [pc, #112]	; (5e48 <prepare_multithreading+0x80>)
    5dd8:	9305      	str	r3, [sp, #20]
    5dda:	2301      	movs	r3, #1
    5ddc:	9304      	str	r3, [sp, #16]
    5dde:	2400      	movs	r4, #0
    5de0:	9403      	str	r4, [sp, #12]
    5de2:	9402      	str	r4, [sp, #8]
    5de4:	9401      	str	r4, [sp, #4]
    5de6:	9400      	str	r4, [sp, #0]
    5de8:	4b18      	ldr	r3, [pc, #96]	; (5e4c <prepare_multithreading+0x84>)
    5dea:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5dee:	4918      	ldr	r1, [pc, #96]	; (5e50 <prepare_multithreading+0x88>)
    5df0:	4628      	mov	r0, r5
    5df2:	f000 f933 	bl	605c <z_setup_new_thread>
    5df6:	4606      	mov	r6, r0
    5df8:	7b6b      	ldrb	r3, [r5, #13]
    5dfa:	f023 0304 	bic.w	r3, r3, #4
    5dfe:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    5e00:	4628      	mov	r0, r5
    5e02:	f002 fedb 	bl	8bbc <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    5e06:	2c00      	cmp	r4, #0
    5e08:	dd02      	ble.n	5e10 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    5e0a:	4630      	mov	r0, r6
    5e0c:	b006      	add	sp, #24
    5e0e:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    5e10:	4620      	mov	r0, r4
    5e12:	f7ff ffa1 	bl	5d58 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    5e16:	4b0f      	ldr	r3, [pc, #60]	; (5e54 <prepare_multithreading+0x8c>)
    5e18:	22b0      	movs	r2, #176	; 0xb0
    5e1a:	fb02 3204 	mla	r2, r2, r4, r3
    5e1e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    5e22:	4b08      	ldr	r3, [pc, #32]	; (5e44 <prepare_multithreading+0x7c>)
    5e24:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    5e28:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    5e2a:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    5e2c:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    5e30:	4a09      	ldr	r2, [pc, #36]	; (5e58 <prepare_multithreading+0x90>)
    5e32:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    5e36:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
    5e3a:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    5e3c:	3401      	adds	r4, #1
    5e3e:	e7e2      	b.n	5e06 <prepare_multithreading+0x3e>
    5e40:	20000388 	.word	0x20000388
    5e44:	20000f8c 	.word	0x20000f8c
    5e48:	000093f0 	.word	0x000093f0
    5e4c:	00005e5d 	.word	0x00005e5d
    5e50:	200014e0 	.word	0x200014e0
    5e54:	200002d8 	.word	0x200002d8
    5e58:	20001a60 	.word	0x20001a60

00005e5c <bg_thread_main>:
{
    5e5c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    5e5e:	4b0a      	ldr	r3, [pc, #40]	; (5e88 <bg_thread_main+0x2c>)
    5e60:	2201      	movs	r2, #1
    5e62:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5e64:	2002      	movs	r0, #2
    5e66:	f7ff fe7f 	bl	5b68 <z_sys_init_run_level>
	boot_banner();
    5e6a:	f001 f90f 	bl	708c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    5e6e:	2003      	movs	r0, #3
    5e70:	f7ff fe7a 	bl	5b68 <z_sys_init_run_level>
	z_init_static_threads();
    5e74:	f000 f956 	bl	6124 <z_init_static_threads>
	main();
    5e78:	f7fa fc9a 	bl	7b0 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5e7c:	4a03      	ldr	r2, [pc, #12]	; (5e8c <bg_thread_main+0x30>)
    5e7e:	7b13      	ldrb	r3, [r2, #12]
    5e80:	f023 0301 	bic.w	r3, r3, #1
    5e84:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5e86:	bd08      	pop	{r3, pc}
    5e88:	20000fe6 	.word	0x20000fe6
    5e8c:	20000388 	.word	0x20000388

00005e90 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    5e90:	b508      	push	{r3, lr}
    5e92:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5e94:	4a01      	ldr	r2, [pc, #4]	; (5e9c <switch_to_main_thread+0xc>)
    5e96:	4802      	ldr	r0, [pc, #8]	; (5ea0 <switch_to_main_thread+0x10>)
    5e98:	f7fc fd4a 	bl	2930 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    5e9c:	00005e5d 	.word	0x00005e5d
    5ea0:	20000388 	.word	0x20000388

00005ea4 <z_bss_zero>:
{
    5ea4:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    5ea6:	4803      	ldr	r0, [pc, #12]	; (5eb4 <z_bss_zero+0x10>)
    5ea8:	4a03      	ldr	r2, [pc, #12]	; (5eb8 <z_bss_zero+0x14>)
    5eaa:	1a12      	subs	r2, r2, r0
    5eac:	2100      	movs	r1, #0
    5eae:	f002 f8ee 	bl	808e <memset>
}
    5eb2:	bd08      	pop	{r3, pc}
    5eb4:	200001d0 	.word	0x200001d0
    5eb8:	200011a4 	.word	0x200011a4

00005ebc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5ebc:	b500      	push	{lr}
    5ebe:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    5ec0:	f7fb fb3e 	bl	1540 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    5ec4:	4b1c      	ldr	r3, [pc, #112]	; (5f38 <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5ec6:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5eca:	4c1c      	ldr	r4, [pc, #112]	; (5f3c <z_cstart+0x80>)
    5ecc:	6963      	ldr	r3, [r4, #20]
    5ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5ed2:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5ed4:	23e0      	movs	r3, #224	; 0xe0
    5ed6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    5eda:	2500      	movs	r5, #0
    5edc:	77e5      	strb	r5, [r4, #31]
    5ede:	7625      	strb	r5, [r4, #24]
    5ee0:	7665      	strb	r5, [r4, #25]
    5ee2:	76a5      	strb	r5, [r4, #26]
    5ee4:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5eea:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5eee:	6263      	str	r3, [r4, #36]	; 0x24
    5ef0:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5ef4:	f7fd f912 	bl	311c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5ef8:	f7fc fbb2 	bl	2660 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5efc:	f04f 33ff 	mov.w	r3, #4294967295
    5f00:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5f02:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    5f04:	f7fd fa76 	bl	33f4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5f08:	f7fd f9ae 	bl	3268 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    5f0c:	2401      	movs	r4, #1
    5f0e:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    5f12:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    5f16:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    5f18:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    5f1a:	4b09      	ldr	r3, [pc, #36]	; (5f40 <z_cstart+0x84>)
    5f1c:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5f20:	f7ff fe16 	bl	5b50 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    5f24:	4628      	mov	r0, r5
    5f26:	f7ff fe1f 	bl	5b68 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    5f2a:	4620      	mov	r0, r4
    5f2c:	f7ff fe1c 	bl	5b68 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    5f30:	f7ff ff4a 	bl	5dc8 <prepare_multithreading>
    5f34:	f7ff ffac 	bl	5e90 <switch_to_main_thread>
    5f38:	20002280 	.word	0x20002280
    5f3c:	e000ed00 	.word	0xe000ed00
    5f40:	20000f8c 	.word	0x20000f8c

00005f44 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    5f44:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5f46:	4c06      	ldr	r4, [pc, #24]	; (5f60 <init_mem_slab_module+0x1c>)
	int rc = 0;
    5f48:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5f4a:	4b06      	ldr	r3, [pc, #24]	; (5f64 <init_mem_slab_module+0x20>)
    5f4c:	429c      	cmp	r4, r3
    5f4e:	d206      	bcs.n	5f5e <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    5f50:	4620      	mov	r0, r4
    5f52:	f002 fd23 	bl	899c <create_free_list>
		if (rc < 0) {
    5f56:	2800      	cmp	r0, #0
    5f58:	db01      	blt.n	5f5e <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5f5a:	341c      	adds	r4, #28
    5f5c:	e7f5      	b.n	5f4a <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    5f5e:	bd10      	pop	{r4, pc}
    5f60:	2000015c 	.word	0x2000015c
    5f64:	2000015c 	.word	0x2000015c

00005f68 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    5f68:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f6a:	b083      	sub	sp, #12
    5f6c:	460c      	mov	r4, r1
    5f6e:	461f      	mov	r7, r3
	__asm__ volatile(
    5f70:	f04f 0320 	mov.w	r3, #32
    5f74:	f3ef 8111 	mrs	r1, BASEPRI
    5f78:	f383 8812 	msr	BASEPRI_MAX, r3
    5f7c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    5f80:	6943      	ldr	r3, [r0, #20]
    5f82:	b16b      	cbz	r3, 5fa0 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
    5f84:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    5f86:	6943      	ldr	r3, [r0, #20]
    5f88:	681b      	ldr	r3, [r3, #0]
    5f8a:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    5f8c:	6983      	ldr	r3, [r0, #24]
    5f8e:	3301      	adds	r3, #1
    5f90:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    5f92:	2000      	movs	r0, #0
	__asm__ volatile(
    5f94:	f381 8811 	msr	BASEPRI, r1
    5f98:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    5f9c:	b003      	add	sp, #12
    5f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fa0:	4616      	mov	r6, r2
    5fa2:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    5fa6:	ea56 0307 	orrs.w	r3, r6, r7
    5faa:	d104      	bne.n	5fb6 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
    5fac:	2300      	movs	r3, #0
    5fae:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    5fb0:	f06f 000b 	mvn.w	r0, #11
    5fb4:	e7ee      	b.n	5f94 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    5fb6:	e9cd 6700 	strd	r6, r7, [sp]
    5fba:	4602      	mov	r2, r0
    5fbc:	4628      	mov	r0, r5
    5fbe:	f000 fbf9 	bl	67b4 <z_pend_curr>
		if (result == 0) {
    5fc2:	2800      	cmp	r0, #0
    5fc4:	d1ea      	bne.n	5f9c <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
    5fc6:	4b02      	ldr	r3, [pc, #8]	; (5fd0 <k_mem_slab_alloc+0x68>)
    5fc8:	689b      	ldr	r3, [r3, #8]
    5fca:	695b      	ldr	r3, [r3, #20]
    5fcc:	6023      	str	r3, [r4, #0]
		return result;
    5fce:	e7e5      	b.n	5f9c <k_mem_slab_alloc+0x34>
    5fd0:	20000f8c 	.word	0x20000f8c

00005fd4 <z_thread_monitor_exit>:
	__asm__ volatile(
    5fd4:	f04f 0320 	mov.w	r3, #32
    5fd8:	f3ef 8111 	mrs	r1, BASEPRI
    5fdc:	f383 8812 	msr	BASEPRI_MAX, r3
    5fe0:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    5fe4:	4b0a      	ldr	r3, [pc, #40]	; (6010 <z_thread_monitor_exit+0x3c>)
    5fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5fe8:	4283      	cmp	r3, r0
    5fea:	d104      	bne.n	5ff6 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    5fec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    5fee:	4b08      	ldr	r3, [pc, #32]	; (6010 <z_thread_monitor_exit+0x3c>)
    5ff0:	629a      	str	r2, [r3, #40]	; 0x28
    5ff2:	e007      	b.n	6004 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    5ff4:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    5ff6:	b113      	cbz	r3, 5ffe <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    5ff8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    5ffa:	4282      	cmp	r2, r0
    5ffc:	d1fa      	bne.n	5ff4 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    5ffe:	b10b      	cbz	r3, 6004 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    6000:	6f02      	ldr	r2, [r0, #112]	; 0x70
    6002:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    6004:	f381 8811 	msr	BASEPRI, r1
    6008:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    600c:	4770      	bx	lr
    600e:	bf00      	nop
    6010:	20000f8c 	.word	0x20000f8c

00006014 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    6014:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    6016:	4604      	mov	r4, r0
    6018:	b140      	cbz	r0, 602c <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
    601a:	2220      	movs	r2, #32
    601c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    6020:	f001 ffdb 	bl	7fda <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    6024:	2000      	movs	r0, #0
    6026:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    602a:	bd10      	pop	{r4, pc}
		thread = _current;
    602c:	4b01      	ldr	r3, [pc, #4]	; (6034 <z_impl_k_thread_name_set+0x20>)
    602e:	689c      	ldr	r4, [r3, #8]
    6030:	e7f3      	b.n	601a <z_impl_k_thread_name_set+0x6>
    6032:	bf00      	nop
    6034:	20000f8c 	.word	0x20000f8c

00006038 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    6038:	b538      	push	{r3, r4, r5, lr}
    603a:	4614      	mov	r4, r2
    603c:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    603e:	ea54 0305 	orrs.w	r3, r4, r5
    6042:	d102      	bne.n	604a <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    6044:	f002 fd15 	bl	8a72 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    6048:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    604a:	462b      	mov	r3, r5
    604c:	4902      	ldr	r1, [pc, #8]	; (6058 <schedule_new_thread+0x20>)
    604e:	3018      	adds	r0, #24
    6050:	f000 fe36 	bl	6cc0 <z_add_timeout>
    6054:	e7f8      	b.n	6048 <schedule_new_thread+0x10>
    6056:	bf00      	nop
    6058:	00008bf5 	.word	0x00008bf5

0000605c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    605c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6060:	b085      	sub	sp, #20
    6062:	4604      	mov	r4, r0
    6064:	460f      	mov	r7, r1
    6066:	4615      	mov	r5, r2
    6068:	461e      	mov	r6, r3
    606a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    606e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    6072:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    6076:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    607a:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    607e:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    6080:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    6082:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6084:	2204      	movs	r2, #4
    6086:	9911      	ldr	r1, [sp, #68]	; 0x44
    6088:	f002 fcf7 	bl	8a7a <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    608c:	462a      	mov	r2, r5
    608e:	4639      	mov	r1, r7
    6090:	4620      	mov	r0, r4
    6092:	f002 fcd4 	bl	8a3e <setup_thread_stack>
    6096:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6098:	f8cd 8008 	str.w	r8, [sp, #8]
    609c:	f8cd 9004 	str.w	r9, [sp, #4]
    60a0:	f8cd a000 	str.w	sl, [sp]
    60a4:	4633      	mov	r3, r6
    60a6:	4602      	mov	r2, r0
    60a8:	4639      	mov	r1, r7
    60aa:	4620      	mov	r0, r4
    60ac:	f7fc fbf0 	bl	2890 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    60b0:	2300      	movs	r3, #0
    60b2:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    60b4:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    60b6:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    60ba:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    60be:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    60c2:	f04f 0320 	mov.w	r3, #32
    60c6:	f3ef 8211 	mrs	r2, BASEPRI
    60ca:	f383 8812 	msr	BASEPRI_MAX, r3
    60ce:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    60d2:	4b13      	ldr	r3, [pc, #76]	; (6120 <z_setup_new_thread+0xc4>)
    60d4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    60d6:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    60d8:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    60da:	f382 8811 	msr	BASEPRI, r2
    60de:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    60e2:	f1bb 0f00 	cmp.w	fp, #0
    60e6:	d013      	beq.n	6110 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    60e8:	221f      	movs	r2, #31
    60ea:	4659      	mov	r1, fp
    60ec:	f104 0074 	add.w	r0, r4, #116	; 0x74
    60f0:	f001 ff73 	bl	7fda <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    60f4:	2300      	movs	r3, #0
    60f6:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    60fa:	4b09      	ldr	r3, [pc, #36]	; (6120 <z_setup_new_thread+0xc4>)
    60fc:	689b      	ldr	r3, [r3, #8]
    60fe:	b15b      	cbz	r3, 6118 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    6100:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    6104:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    6108:	4628      	mov	r0, r5
    610a:	b005      	add	sp, #20
    610c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    6110:	2300      	movs	r3, #0
    6112:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    6116:	e7f0      	b.n	60fa <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    6118:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    611c:	e7f4      	b.n	6108 <z_setup_new_thread+0xac>
    611e:	bf00      	nop
    6120:	20000f8c 	.word	0x20000f8c

00006124 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    6124:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    6128:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    612a:	4c23      	ldr	r4, [pc, #140]	; (61b8 <z_init_static_threads+0x94>)
    612c:	4b23      	ldr	r3, [pc, #140]	; (61bc <z_init_static_threads+0x98>)
    612e:	429c      	cmp	r4, r3
    6130:	d215      	bcs.n	615e <z_init_static_threads+0x3a>
		z_setup_new_thread(
    6132:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6134:	9305      	str	r3, [sp, #20]
    6136:	6a23      	ldr	r3, [r4, #32]
    6138:	9304      	str	r3, [sp, #16]
    613a:	69e3      	ldr	r3, [r4, #28]
    613c:	9303      	str	r3, [sp, #12]
    613e:	69a3      	ldr	r3, [r4, #24]
    6140:	9302      	str	r3, [sp, #8]
    6142:	6963      	ldr	r3, [r4, #20]
    6144:	9301      	str	r3, [sp, #4]
    6146:	6923      	ldr	r3, [r4, #16]
    6148:	9300      	str	r3, [sp, #0]
    614a:	68e3      	ldr	r3, [r4, #12]
    614c:	68a2      	ldr	r2, [r4, #8]
    614e:	6861      	ldr	r1, [r4, #4]
    6150:	6820      	ldr	r0, [r4, #0]
    6152:	f7ff ff83 	bl	605c <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    6156:	6823      	ldr	r3, [r4, #0]
    6158:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    615a:	3430      	adds	r4, #48	; 0x30
    615c:	e7e6      	b.n	612c <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    615e:	f000 f9e1 	bl	6524 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    6162:	4c15      	ldr	r4, [pc, #84]	; (61b8 <z_init_static_threads+0x94>)
    6164:	e01b      	b.n	619e <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    6166:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    6168:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    616c:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
    6170:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    6174:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    6178:	03d8      	lsls	r0, r3, #15
    617a:	f240 35e7 	movw	r5, #999	; 0x3e7
    617e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6182:	2300      	movs	r3, #0
    6184:	1940      	adds	r0, r0, r5
    6186:	f04f 0500 	mov.w	r5, #0
    618a:	eb45 0101 	adc.w	r1, r5, r1
    618e:	f7f9 ffb7 	bl	100 <__aeabi_uldivmod>
    6192:	4602      	mov	r2, r0
    6194:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    6196:	4630      	mov	r0, r6
    6198:	f7ff ff4e 	bl	6038 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    619c:	3430      	adds	r4, #48	; 0x30
    619e:	4b07      	ldr	r3, [pc, #28]	; (61bc <z_init_static_threads+0x98>)
    61a0:	429c      	cmp	r4, r3
    61a2:	d204      	bcs.n	61ae <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    61a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    61a6:	f1b3 3fff 	cmp.w	r3, #4294967295
    61aa:	d0f7      	beq.n	619c <z_init_static_threads+0x78>
    61ac:	e7db      	b.n	6166 <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    61ae:	f000 fbb7 	bl	6920 <k_sched_unlock>
}
    61b2:	b006      	add	sp, #24
    61b4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    61b8:	2000015c 	.word	0x2000015c
    61bc:	2000015c 	.word	0x2000015c

000061c0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    61c0:	b508      	push	{r3, lr}
    61c2:	e001      	b.n	61c8 <idle+0x8>
	arch_cpu_idle();
    61c4:	f7fc fa52 	bl	266c <arch_cpu_idle>
	__asm__ volatile(
    61c8:	f04f 0220 	mov.w	r2, #32
    61cc:	f3ef 8311 	mrs	r3, BASEPRI
    61d0:	f382 8812 	msr	BASEPRI_MAX, r2
    61d4:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    61d8:	f002 fe16 	bl	8e08 <z_get_next_timeout_expiry>
    61dc:	4b03      	ldr	r3, [pc, #12]	; (61ec <idle+0x2c>)
    61de:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    61e0:	f7fc f8ae 	bl	2340 <pm_system_suspend>
    61e4:	2800      	cmp	r0, #0
    61e6:	d1ef      	bne.n	61c8 <idle+0x8>
    61e8:	e7ec      	b.n	61c4 <idle+0x4>
    61ea:	bf00      	nop
    61ec:	20000f8c 	.word	0x20000f8c

000061f0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    61f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    61f4:	b083      	sub	sp, #12
    61f6:	4604      	mov	r4, r0
    61f8:	461d      	mov	r5, r3
    61fa:	f04f 0320 	mov.w	r3, #32
    61fe:	f3ef 8711 	mrs	r7, BASEPRI
    6202:	f383 8812 	msr	BASEPRI_MAX, r3
    6206:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    620a:	68c1      	ldr	r1, [r0, #12]
    620c:	b999      	cbnz	r1, 6236 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    620e:	2900      	cmp	r1, #0
    6210:	d14f      	bne.n	62b2 <z_impl_k_mutex_lock+0xc2>
    6212:	4b3a      	ldr	r3, [pc, #232]	; (62fc <z_impl_k_mutex_lock+0x10c>)
    6214:	689b      	ldr	r3, [r3, #8]
    6216:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    621a:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    621c:	3101      	adds	r1, #1
    621e:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    6220:	4b36      	ldr	r3, [pc, #216]	; (62fc <z_impl_k_mutex_lock+0x10c>)
    6222:	689b      	ldr	r3, [r3, #8]
    6224:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    6226:	f387 8811 	msr	BASEPRI, r7
    622a:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    622e:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    6230:	b003      	add	sp, #12
    6232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6236:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    6238:	6882      	ldr	r2, [r0, #8]
    623a:	4b30      	ldr	r3, [pc, #192]	; (62fc <z_impl_k_mutex_lock+0x10c>)
    623c:	689b      	ldr	r3, [r3, #8]
    623e:	429a      	cmp	r2, r3
    6240:	d0e5      	beq.n	620e <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    6242:	ea55 0106 	orrs.w	r1, r5, r6
    6246:	bf0c      	ite	eq
    6248:	f04f 0801 	moveq.w	r8, #1
    624c:	f04f 0800 	movne.w	r8, #0
    6250:	d031      	beq.n	62b6 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    6252:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    6256:	4649      	mov	r1, r9
    6258:	f993 000e 	ldrsb.w	r0, [r3, #14]
    625c:	f002 fc40 	bl	8ae0 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    6260:	4581      	cmp	r9, r0
    6262:	dc2f      	bgt.n	62c4 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    6264:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    6268:	9600      	str	r6, [sp, #0]
    626a:	9501      	str	r5, [sp, #4]
    626c:	4622      	mov	r2, r4
    626e:	4639      	mov	r1, r7
    6270:	4823      	ldr	r0, [pc, #140]	; (6300 <z_impl_k_mutex_lock+0x110>)
    6272:	f000 fa9f 	bl	67b4 <z_pend_curr>
	if (got_mutex == 0) {
    6276:	2800      	cmp	r0, #0
    6278:	d0da      	beq.n	6230 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    627a:	f04f 0320 	mov.w	r3, #32
    627e:	f3ef 8511 	mrs	r5, BASEPRI
    6282:	f383 8812 	msr	BASEPRI_MAX, r3
    6286:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    628a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    628c:	42a3      	cmp	r3, r4
    628e:	d01f      	beq.n	62d0 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    6290:	b1f3      	cbz	r3, 62d0 <z_impl_k_mutex_lock+0xe0>
    6292:	6921      	ldr	r1, [r4, #16]
    6294:	f993 000e 	ldrsb.w	r0, [r3, #14]
    6298:	f002 fc22 	bl	8ae0 <new_prio_for_inheritance>
    629c:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    629e:	4620      	mov	r0, r4
    62a0:	f002 fc29 	bl	8af6 <adjust_owner_prio>
    62a4:	b9b0      	cbnz	r0, 62d4 <z_impl_k_mutex_lock+0xe4>
    62a6:	f1b9 0f00 	cmp.w	r9, #0
    62aa:	d015      	beq.n	62d8 <z_impl_k_mutex_lock+0xe8>
    62ac:	f04f 0801 	mov.w	r8, #1
    62b0:	e012      	b.n	62d8 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    62b2:	6923      	ldr	r3, [r4, #16]
    62b4:	e7b1      	b.n	621a <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    62b6:	f387 8811 	msr	BASEPRI, r7
    62ba:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    62be:	f06f 000f 	mvn.w	r0, #15
    62c2:	e7b5      	b.n	6230 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    62c4:	4601      	mov	r1, r0
    62c6:	4620      	mov	r0, r4
    62c8:	f002 fc15 	bl	8af6 <adjust_owner_prio>
    62cc:	4681      	mov	r9, r0
    62ce:	e7cb      	b.n	6268 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    62d0:	6921      	ldr	r1, [r4, #16]
    62d2:	e7e4      	b.n	629e <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    62d4:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    62d8:	f1b8 0f00 	cmp.w	r8, #0
    62dc:	d106      	bne.n	62ec <z_impl_k_mutex_lock+0xfc>
    62de:	f385 8811 	msr	BASEPRI, r5
    62e2:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    62e6:	f06f 000a 	mvn.w	r0, #10
    62ea:	e7a1      	b.n	6230 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    62ec:	4629      	mov	r1, r5
    62ee:	4804      	ldr	r0, [pc, #16]	; (6300 <z_impl_k_mutex_lock+0x110>)
    62f0:	f000 f8fc 	bl	64ec <z_reschedule>
	return -EAGAIN;
    62f4:	f06f 000a 	mvn.w	r0, #10
    62f8:	e79a      	b.n	6230 <z_impl_k_mutex_lock+0x40>
    62fa:	bf00      	nop
    62fc:	20000f8c 	.word	0x20000f8c
    6300:	20000fb8 	.word	0x20000fb8

00006304 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    6304:	6882      	ldr	r2, [r0, #8]
    6306:	2a00      	cmp	r2, #0
    6308:	d035      	beq.n	6376 <z_impl_k_mutex_unlock+0x72>
{
    630a:	b538      	push	{r3, r4, r5, lr}
    630c:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    630e:	4b1d      	ldr	r3, [pc, #116]	; (6384 <z_impl_k_mutex_unlock+0x80>)
    6310:	689b      	ldr	r3, [r3, #8]
    6312:	429a      	cmp	r2, r3
    6314:	d132      	bne.n	637c <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    6316:	7bda      	ldrb	r2, [r3, #15]
    6318:	3a01      	subs	r2, #1
    631a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    631c:	68c3      	ldr	r3, [r0, #12]
    631e:	2b01      	cmp	r3, #1
    6320:	d905      	bls.n	632e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    6322:	3b01      	subs	r3, #1
    6324:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    6326:	f000 fafb 	bl	6920 <k_sched_unlock>

	return 0;
    632a:	2000      	movs	r0, #0
}
    632c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    632e:	f04f 0320 	mov.w	r3, #32
    6332:	f3ef 8511 	mrs	r5, BASEPRI
    6336:	f383 8812 	msr	BASEPRI_MAX, r3
    633a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    633e:	6901      	ldr	r1, [r0, #16]
    6340:	f002 fbd9 	bl	8af6 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    6344:	4620      	mov	r0, r4
    6346:	f002 fcfb 	bl	8d40 <z_unpend_first_thread>
	mutex->owner = new_owner;
    634a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    634c:	b160      	cbz	r0, 6368 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    634e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6352:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    6354:	2300      	movs	r3, #0
    6356:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    635a:	f002 fc2f 	bl	8bbc <z_ready_thread>
		z_reschedule(&lock, key);
    635e:	4629      	mov	r1, r5
    6360:	4809      	ldr	r0, [pc, #36]	; (6388 <z_impl_k_mutex_unlock+0x84>)
    6362:	f000 f8c3 	bl	64ec <z_reschedule>
    6366:	e7de      	b.n	6326 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    6368:	2300      	movs	r3, #0
    636a:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    636c:	f385 8811 	msr	BASEPRI, r5
    6370:	f3bf 8f6f 	isb	sy
    6374:	e7d7      	b.n	6326 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    6376:	f06f 0015 	mvn.w	r0, #21
}
    637a:	4770      	bx	lr
		return -EPERM;
    637c:	f04f 30ff 	mov.w	r0, #4294967295
    6380:	e7d4      	b.n	632c <z_impl_k_mutex_unlock+0x28>
    6382:	bf00      	nop
    6384:	20000f8c 	.word	0x20000f8c
    6388:	20000fb8 	.word	0x20000fb8

0000638c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    638c:	b538      	push	{r3, r4, r5, lr}
    638e:	4604      	mov	r4, r0
	__asm__ volatile(
    6390:	f04f 0320 	mov.w	r3, #32
    6394:	f3ef 8511 	mrs	r5, BASEPRI
    6398:	f383 8812 	msr	BASEPRI_MAX, r3
    639c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    63a0:	f002 fcce 	bl	8d40 <z_unpend_first_thread>

	if (thread != NULL) {
    63a4:	b148      	cbz	r0, 63ba <z_impl_k_sem_give+0x2e>
    63a6:	2200      	movs	r2, #0
    63a8:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    63ac:	f002 fc06 	bl	8bbc <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    63b0:	4629      	mov	r1, r5
    63b2:	4807      	ldr	r0, [pc, #28]	; (63d0 <z_impl_k_sem_give+0x44>)
    63b4:	f000 f89a 	bl	64ec <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    63b8:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    63ba:	68a3      	ldr	r3, [r4, #8]
    63bc:	68e2      	ldr	r2, [r4, #12]
    63be:	4293      	cmp	r3, r2
    63c0:	d003      	beq.n	63ca <z_impl_k_sem_give+0x3e>
    63c2:	2201      	movs	r2, #1
    63c4:	4413      	add	r3, r2
    63c6:	60a3      	str	r3, [r4, #8]
}
    63c8:	e7f2      	b.n	63b0 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    63ca:	2200      	movs	r2, #0
    63cc:	e7fa      	b.n	63c4 <z_impl_k_sem_give+0x38>
    63ce:	bf00      	nop
    63d0:	20000fb8 	.word	0x20000fb8

000063d4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    63d4:	b530      	push	{r4, r5, lr}
    63d6:	b083      	sub	sp, #12
    63d8:	461d      	mov	r5, r3
    63da:	f04f 0320 	mov.w	r3, #32
    63de:	f3ef 8111 	mrs	r1, BASEPRI
    63e2:	f383 8812 	msr	BASEPRI_MAX, r3
    63e6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    63ea:	6883      	ldr	r3, [r0, #8]
    63ec:	b143      	cbz	r3, 6400 <z_impl_k_sem_take+0x2c>
		sem->count--;
    63ee:	3b01      	subs	r3, #1
    63f0:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    63f2:	f381 8811 	msr	BASEPRI, r1
    63f6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    63fa:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    63fc:	b003      	add	sp, #12
    63fe:	bd30      	pop	{r4, r5, pc}
    6400:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6402:	ea54 0305 	orrs.w	r3, r4, r5
    6406:	d006      	beq.n	6416 <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    6408:	e9cd 4500 	strd	r4, r5, [sp]
    640c:	4602      	mov	r2, r0
    640e:	4805      	ldr	r0, [pc, #20]	; (6424 <z_impl_k_sem_take+0x50>)
    6410:	f000 f9d0 	bl	67b4 <z_pend_curr>
	return ret;
    6414:	e7f2      	b.n	63fc <z_impl_k_sem_take+0x28>
    6416:	f381 8811 	msr	BASEPRI, r1
    641a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    641e:	f06f 000f 	mvn.w	r0, #15
    6422:	e7eb      	b.n	63fc <z_impl_k_sem_take+0x28>
    6424:	20000fb8 	.word	0x20000fb8

00006428 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    6428:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    642a:	f1b3 3fff 	cmp.w	r3, #4294967295
    642e:	bf08      	it	eq
    6430:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    6434:	d100      	bne.n	6438 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    6436:	bd38      	pop	{r3, r4, r5, pc}
    6438:	4902      	ldr	r1, [pc, #8]	; (6444 <add_thread_timeout+0x1c>)
    643a:	3018      	adds	r0, #24
    643c:	f000 fc40 	bl	6cc0 <z_add_timeout>
    6440:	e7f9      	b.n	6436 <add_thread_timeout+0xe>
    6442:	bf00      	nop
    6444:	00008bf5 	.word	0x00008bf5

00006448 <z_reset_time_slice>:
{
    6448:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    644a:	4b08      	ldr	r3, [pc, #32]	; (646c <z_reset_time_slice+0x24>)
    644c:	681b      	ldr	r3, [r3, #0]
    644e:	b903      	cbnz	r3, 6452 <z_reset_time_slice+0xa>
}
    6450:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    6452:	f7fe f9eb 	bl	482c <sys_clock_elapsed>
    6456:	4603      	mov	r3, r0
    6458:	4a04      	ldr	r2, [pc, #16]	; (646c <z_reset_time_slice+0x24>)
    645a:	6810      	ldr	r0, [r2, #0]
    645c:	4403      	add	r3, r0
    645e:	4a04      	ldr	r2, [pc, #16]	; (6470 <z_reset_time_slice+0x28>)
    6460:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    6462:	2100      	movs	r1, #0
    6464:	f002 fce6 	bl	8e34 <z_set_timeout_expiry>
}
    6468:	e7f2      	b.n	6450 <z_reset_time_slice+0x8>
    646a:	bf00      	nop
    646c:	20000fc0 	.word	0x20000fc0
    6470:	20000f8c 	.word	0x20000f8c

00006474 <k_sched_time_slice_set>:
{
    6474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6478:	4606      	mov	r6, r0
    647a:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    647c:	2300      	movs	r3, #0
	__asm__ volatile(
    647e:	f04f 0220 	mov.w	r2, #32
    6482:	f3ef 8711 	mrs	r7, BASEPRI
    6486:	f382 8812 	msr	BASEPRI_MAX, r2
    648a:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    648e:	e009      	b.n	64a4 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
    6490:	4b13      	ldr	r3, [pc, #76]	; (64e0 <k_sched_time_slice_set+0x6c>)
    6492:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    6496:	f7ff ffd7 	bl	6448 <z_reset_time_slice>
	__asm__ volatile(
    649a:	f387 8811 	msr	BASEPRI, r7
    649e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    64a2:	2301      	movs	r3, #1
    64a4:	b9cb      	cbnz	r3, 64da <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
    64a6:	2300      	movs	r3, #0
    64a8:	4a0e      	ldr	r2, [pc, #56]	; (64e4 <k_sched_time_slice_set+0x70>)
    64aa:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    64ac:	0c75      	lsrs	r5, r6, #17
    64ae:	03f4      	lsls	r4, r6, #15
    64b0:	f240 30e7 	movw	r0, #999	; 0x3e7
    64b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    64b8:	2300      	movs	r3, #0
    64ba:	1820      	adds	r0, r4, r0
    64bc:	f04f 0100 	mov.w	r1, #0
    64c0:	eb45 0101 	adc.w	r1, r5, r1
    64c4:	f7f9 fe1c 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    64c8:	4b07      	ldr	r3, [pc, #28]	; (64e8 <k_sched_time_slice_set+0x74>)
    64ca:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    64cc:	2e00      	cmp	r6, #0
    64ce:	dddf      	ble.n	6490 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
    64d0:	2802      	cmp	r0, #2
    64d2:	bfb8      	it	lt
    64d4:	2002      	movlt	r0, #2
    64d6:	6018      	str	r0, [r3, #0]
    64d8:	e7da      	b.n	6490 <k_sched_time_slice_set+0x1c>
}
    64da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64de:	bf00      	nop
    64e0:	20000fbc 	.word	0x20000fbc
    64e4:	20000f8c 	.word	0x20000f8c
    64e8:	20000fc0 	.word	0x20000fc0

000064ec <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    64ec:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    64ee:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    64f0:	b921      	cbnz	r1, 64fc <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    64f2:	f3ef 8305 	mrs	r3, IPSR
    64f6:	b913      	cbnz	r3, 64fe <z_reschedule+0x12>
    64f8:	2101      	movs	r1, #1
    64fa:	e000      	b.n	64fe <z_reschedule+0x12>
    64fc:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    64fe:	f011 0f01 	tst.w	r1, #1
    6502:	d007      	beq.n	6514 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    6504:	4b06      	ldr	r3, [pc, #24]	; (6520 <z_reschedule+0x34>)
    6506:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    6508:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    650a:	429a      	cmp	r2, r3
    650c:	d002      	beq.n	6514 <z_reschedule+0x28>
	ret = arch_swap(key);
    650e:	f7fc f967 	bl	27e0 <arch_swap>
		z_swap(lock, key);
    6512:	e003      	b.n	651c <z_reschedule+0x30>
    6514:	f380 8811 	msr	BASEPRI, r0
    6518:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    651c:	bd08      	pop	{r3, pc}
    651e:	bf00      	nop
    6520:	20000f8c 	.word	0x20000f8c

00006524 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    6524:	2300      	movs	r3, #0
	__asm__ volatile(
    6526:	f04f 0220 	mov.w	r2, #32
    652a:	f3ef 8111 	mrs	r1, BASEPRI
    652e:	f382 8812 	msr	BASEPRI_MAX, r2
    6532:	f3bf 8f6f 	isb	sy
    6536:	b953      	cbnz	r3, 654e <k_sched_lock+0x2a>
    6538:	4b05      	ldr	r3, [pc, #20]	; (6550 <k_sched_lock+0x2c>)
    653a:	689a      	ldr	r2, [r3, #8]
    653c:	7bd3      	ldrb	r3, [r2, #15]
    653e:	3b01      	subs	r3, #1
    6540:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    6542:	f381 8811 	msr	BASEPRI, r1
    6546:	f3bf 8f6f 	isb	sy
    654a:	2301      	movs	r3, #1
    654c:	e7f3      	b.n	6536 <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    654e:	4770      	bx	lr
    6550:	20000f8c 	.word	0x20000f8c

00006554 <update_cache>:
{
    6554:	b538      	push	{r3, r4, r5, lr}
    6556:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    6558:	480f      	ldr	r0, [pc, #60]	; (6598 <update_cache+0x44>)
    655a:	f002 fb28 	bl	8bae <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    655e:	4605      	mov	r5, r0
    6560:	b170      	cbz	r0, 6580 <update_cache+0x2c>
	if (preempt_ok != 0) {
    6562:	b984      	cbnz	r4, 6586 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    6564:	4b0d      	ldr	r3, [pc, #52]	; (659c <update_cache+0x48>)
    6566:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    6568:	7b5a      	ldrb	r2, [r3, #13]
    656a:	f012 0f1f 	tst.w	r2, #31
    656e:	d10a      	bne.n	6586 <update_cache+0x32>
	return node->next != NULL;
    6570:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    6572:	b942      	cbnz	r2, 6586 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    6574:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    6576:	2a7f      	cmp	r2, #127	; 0x7f
    6578:	d905      	bls.n	6586 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    657a:	4a08      	ldr	r2, [pc, #32]	; (659c <update_cache+0x48>)
    657c:	61d3      	str	r3, [r2, #28]
    657e:	e00a      	b.n	6596 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    6580:	4b06      	ldr	r3, [pc, #24]	; (659c <update_cache+0x48>)
    6582:	68dd      	ldr	r5, [r3, #12]
    6584:	e7ed      	b.n	6562 <update_cache+0xe>
		if (thread != _current) {
    6586:	4b05      	ldr	r3, [pc, #20]	; (659c <update_cache+0x48>)
    6588:	689b      	ldr	r3, [r3, #8]
    658a:	42ab      	cmp	r3, r5
    658c:	d001      	beq.n	6592 <update_cache+0x3e>
			z_reset_time_slice();
    658e:	f7ff ff5b 	bl	6448 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    6592:	4b02      	ldr	r3, [pc, #8]	; (659c <update_cache+0x48>)
    6594:	61dd      	str	r5, [r3, #28]
}
    6596:	bd38      	pop	{r3, r4, r5, pc}
    6598:	20000fac 	.word	0x20000fac
    659c:	20000f8c 	.word	0x20000f8c

000065a0 <move_thread_to_end_of_prio_q>:
{
    65a0:	b538      	push	{r3, r4, r5, lr}
    65a2:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    65a4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    65a6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    65aa:	2b00      	cmp	r3, #0
    65ac:	db28      	blt.n	6600 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    65ae:	7b6b      	ldrb	r3, [r5, #13]
    65b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    65b4:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    65b6:	4b1a      	ldr	r3, [pc, #104]	; (6620 <move_thread_to_end_of_prio_q+0x80>)
    65b8:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    65bc:	429c      	cmp	r4, r3
    65be:	d02d      	beq.n	661c <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    65c0:	b16c      	cbz	r4, 65de <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    65c2:	4621      	mov	r1, r4
    65c4:	4628      	mov	r0, r5
    65c6:	f002 faac 	bl	8b22 <z_sched_prio_cmp>
    65ca:	2800      	cmp	r0, #0
    65cc:	dc20      	bgt.n	6610 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    65ce:	b134      	cbz	r4, 65de <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    65d0:	4b13      	ldr	r3, [pc, #76]	; (6620 <move_thread_to_end_of_prio_q+0x80>)
    65d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    65d4:	429c      	cmp	r4, r3
    65d6:	d002      	beq.n	65de <move_thread_to_end_of_prio_q+0x3e>
    65d8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    65da:	2c00      	cmp	r4, #0
    65dc:	d1f0      	bne.n	65c0 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    65de:	4b10      	ldr	r3, [pc, #64]	; (6620 <move_thread_to_end_of_prio_q+0x80>)
    65e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    65e2:	f103 0120 	add.w	r1, r3, #32
    65e6:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    65e8:	606a      	str	r2, [r5, #4]

	tail->next = node;
    65ea:	6015      	str	r5, [r2, #0]
	list->tail = node;
    65ec:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    65ee:	4b0c      	ldr	r3, [pc, #48]	; (6620 <move_thread_to_end_of_prio_q+0x80>)
    65f0:	6898      	ldr	r0, [r3, #8]
    65f2:	42a8      	cmp	r0, r5
    65f4:	bf14      	ite	ne
    65f6:	2000      	movne	r0, #0
    65f8:	2001      	moveq	r0, #1
    65fa:	f7ff ffab 	bl	6554 <update_cache>
}
    65fe:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6600:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    6604:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6606:	4601      	mov	r1, r0
    6608:	4806      	ldr	r0, [pc, #24]	; (6624 <move_thread_to_end_of_prio_q+0x84>)
    660a:	f002 fac8 	bl	8b9e <z_priq_dumb_remove>
}
    660e:	e7ce      	b.n	65ae <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    6610:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    6612:	606b      	str	r3, [r5, #4]
	node->next = successor;
    6614:	602c      	str	r4, [r5, #0]
	prev->next = node;
    6616:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    6618:	6065      	str	r5, [r4, #4]
}
    661a:	e7e8      	b.n	65ee <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    661c:	2400      	movs	r4, #0
    661e:	e7cf      	b.n	65c0 <move_thread_to_end_of_prio_q+0x20>
    6620:	20000f8c 	.word	0x20000f8c
    6624:	20000fac 	.word	0x20000fac

00006628 <z_time_slice>:
{
    6628:	b510      	push	{r4, lr}
	__asm__ volatile(
    662a:	f04f 0320 	mov.w	r3, #32
    662e:	f3ef 8411 	mrs	r4, BASEPRI
    6632:	f383 8812 	msr	BASEPRI_MAX, r3
    6636:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    663a:	4b1c      	ldr	r3, [pc, #112]	; (66ac <z_time_slice+0x84>)
    663c:	689b      	ldr	r3, [r3, #8]
    663e:	4a1c      	ldr	r2, [pc, #112]	; (66b0 <z_time_slice+0x88>)
    6640:	6812      	ldr	r2, [r2, #0]
    6642:	4293      	cmp	r3, r2
    6644:	d01d      	beq.n	6682 <z_time_slice+0x5a>
	pending_current = NULL;
    6646:	4a1a      	ldr	r2, [pc, #104]	; (66b0 <z_time_slice+0x88>)
    6648:	2100      	movs	r1, #0
    664a:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    664c:	4a19      	ldr	r2, [pc, #100]	; (66b4 <z_time_slice+0x8c>)
    664e:	6812      	ldr	r2, [r2, #0]
    6650:	b322      	cbz	r2, 669c <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    6652:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    6654:	2a7f      	cmp	r2, #127	; 0x7f
    6656:	d821      	bhi.n	669c <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
    6658:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    665a:	f012 0f1f 	tst.w	r2, #31
    665e:	d11d      	bne.n	669c <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    6660:	f993 100e 	ldrsb.w	r1, [r3, #14]
    6664:	4a14      	ldr	r2, [pc, #80]	; (66b8 <z_time_slice+0x90>)
    6666:	6812      	ldr	r2, [r2, #0]
    6668:	4291      	cmp	r1, r2
    666a:	db17      	blt.n	669c <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    666c:	4a13      	ldr	r2, [pc, #76]	; (66bc <z_time_slice+0x94>)
    666e:	4293      	cmp	r3, r2
    6670:	d014      	beq.n	669c <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    6672:	4a0e      	ldr	r2, [pc, #56]	; (66ac <z_time_slice+0x84>)
    6674:	6912      	ldr	r2, [r2, #16]
    6676:	4282      	cmp	r2, r0
    6678:	dd0a      	ble.n	6690 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
    667a:	1a10      	subs	r0, r2, r0
    667c:	4b0b      	ldr	r3, [pc, #44]	; (66ac <z_time_slice+0x84>)
    667e:	6118      	str	r0, [r3, #16]
    6680:	e00f      	b.n	66a2 <z_time_slice+0x7a>
		z_reset_time_slice();
    6682:	f7ff fee1 	bl	6448 <z_reset_time_slice>
	__asm__ volatile(
    6686:	f384 8811 	msr	BASEPRI, r4
    668a:	f3bf 8f6f 	isb	sy
		return;
    668e:	e00c      	b.n	66aa <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
    6690:	4618      	mov	r0, r3
    6692:	f7ff ff85 	bl	65a0 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    6696:	f7ff fed7 	bl	6448 <z_reset_time_slice>
    669a:	e002      	b.n	66a2 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
    669c:	4b03      	ldr	r3, [pc, #12]	; (66ac <z_time_slice+0x84>)
    669e:	2200      	movs	r2, #0
    66a0:	611a      	str	r2, [r3, #16]
    66a2:	f384 8811 	msr	BASEPRI, r4
    66a6:	f3bf 8f6f 	isb	sy
}
    66aa:	bd10      	pop	{r4, pc}
    66ac:	20000f8c 	.word	0x20000f8c
    66b0:	20000fb8 	.word	0x20000fb8
    66b4:	20000fc0 	.word	0x20000fc0
    66b8:	20000fbc 	.word	0x20000fbc
    66bc:	200002d8 	.word	0x200002d8

000066c0 <ready_thread>:
{
    66c0:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    66c2:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    66c4:	f990 200d 	ldrsb.w	r2, [r0, #13]
    66c8:	2a00      	cmp	r2, #0
    66ca:	db2d      	blt.n	6728 <ready_thread+0x68>
    66cc:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    66ce:	f013 0f1f 	tst.w	r3, #31
    66d2:	d105      	bne.n	66e0 <ready_thread+0x20>
	return node->next != NULL;
    66d4:	6982      	ldr	r2, [r0, #24]
    66d6:	b10a      	cbz	r2, 66dc <ready_thread+0x1c>
    66d8:	2200      	movs	r2, #0
    66da:	e002      	b.n	66e2 <ready_thread+0x22>
    66dc:	2201      	movs	r2, #1
    66de:	e000      	b.n	66e2 <ready_thread+0x22>
    66e0:	2200      	movs	r2, #0
    66e2:	b30a      	cbz	r2, 6728 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    66e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    66e8:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    66ea:	4b14      	ldr	r3, [pc, #80]	; (673c <ready_thread+0x7c>)
    66ec:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    66f0:	429d      	cmp	r5, r3
    66f2:	d020      	beq.n	6736 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    66f4:	b16d      	cbz	r5, 6712 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    66f6:	4629      	mov	r1, r5
    66f8:	4620      	mov	r0, r4
    66fa:	f002 fa12 	bl	8b22 <z_sched_prio_cmp>
    66fe:	2800      	cmp	r0, #0
    6700:	dc13      	bgt.n	672a <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6702:	b135      	cbz	r5, 6712 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    6704:	4b0d      	ldr	r3, [pc, #52]	; (673c <ready_thread+0x7c>)
    6706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6708:	429d      	cmp	r5, r3
    670a:	d002      	beq.n	6712 <ready_thread+0x52>
    670c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    670e:	2d00      	cmp	r5, #0
    6710:	d1f0      	bne.n	66f4 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    6712:	4b0a      	ldr	r3, [pc, #40]	; (673c <ready_thread+0x7c>)
    6714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    6716:	f103 0120 	add.w	r1, r3, #32
    671a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    671c:	6062      	str	r2, [r4, #4]
	tail->next = node;
    671e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    6720:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    6722:	2000      	movs	r0, #0
    6724:	f7ff ff16 	bl	6554 <update_cache>
}
    6728:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    672a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    672c:	6063      	str	r3, [r4, #4]
	node->next = successor;
    672e:	6025      	str	r5, [r4, #0]
	prev->next = node;
    6730:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    6732:	606c      	str	r4, [r5, #4]
}
    6734:	e7f5      	b.n	6722 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6736:	2500      	movs	r5, #0
    6738:	e7dc      	b.n	66f4 <ready_thread+0x34>
    673a:	bf00      	nop
    673c:	20000f8c 	.word	0x20000f8c

00006740 <z_sched_start>:
{
    6740:	b510      	push	{r4, lr}
	__asm__ volatile(
    6742:	f04f 0320 	mov.w	r3, #32
    6746:	f3ef 8411 	mrs	r4, BASEPRI
    674a:	f383 8812 	msr	BASEPRI_MAX, r3
    674e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    6752:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    6754:	f013 0f04 	tst.w	r3, #4
    6758:	d104      	bne.n	6764 <z_sched_start+0x24>
	__asm__ volatile(
    675a:	f384 8811 	msr	BASEPRI, r4
    675e:	f3bf 8f6f 	isb	sy
}
    6762:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6764:	f023 0304 	bic.w	r3, r3, #4
    6768:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    676a:	f7ff ffa9 	bl	66c0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    676e:	4621      	mov	r1, r4
    6770:	4801      	ldr	r0, [pc, #4]	; (6778 <z_sched_start+0x38>)
    6772:	f7ff febb 	bl	64ec <z_reschedule>
    6776:	e7f4      	b.n	6762 <z_sched_start+0x22>
    6778:	20000fbc 	.word	0x20000fbc

0000677c <unready_thread>:
{
    677c:	b510      	push	{r4, lr}
    677e:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    6780:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    6782:	f990 300d 	ldrsb.w	r3, [r0, #13]
    6786:	2b00      	cmp	r3, #0
    6788:	db08      	blt.n	679c <unready_thread+0x20>
	update_cache(thread == _current);
    678a:	4b08      	ldr	r3, [pc, #32]	; (67ac <unready_thread+0x30>)
    678c:	6898      	ldr	r0, [r3, #8]
    678e:	42a0      	cmp	r0, r4
    6790:	bf14      	ite	ne
    6792:	2000      	movne	r0, #0
    6794:	2001      	moveq	r0, #1
    6796:	f7ff fedd 	bl	6554 <update_cache>
}
    679a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    679c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    67a0:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    67a2:	4601      	mov	r1, r0
    67a4:	4802      	ldr	r0, [pc, #8]	; (67b0 <unready_thread+0x34>)
    67a6:	f002 f9fa 	bl	8b9e <z_priq_dumb_remove>
}
    67aa:	e7ee      	b.n	678a <unready_thread+0xe>
    67ac:	20000f8c 	.word	0x20000f8c
    67b0:	20000fac 	.word	0x20000fac

000067b4 <z_pend_curr>:
{
    67b4:	b510      	push	{r4, lr}
    67b6:	460c      	mov	r4, r1
    67b8:	4611      	mov	r1, r2
	pending_current = _current;
    67ba:	4b06      	ldr	r3, [pc, #24]	; (67d4 <z_pend_curr+0x20>)
    67bc:	6898      	ldr	r0, [r3, #8]
    67be:	4b06      	ldr	r3, [pc, #24]	; (67d8 <z_pend_curr+0x24>)
    67c0:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    67c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    67c6:	f002 fa73 	bl	8cb0 <pend>
    67ca:	4620      	mov	r0, r4
    67cc:	f7fc f808 	bl	27e0 <arch_swap>
}
    67d0:	bd10      	pop	{r4, pc}
    67d2:	bf00      	nop
    67d4:	20000f8c 	.word	0x20000f8c
    67d8:	20000fb8 	.word	0x20000fb8

000067dc <z_set_prio>:
{
    67dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    67e0:	4604      	mov	r4, r0
    67e2:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    67e4:	2300      	movs	r3, #0
	__asm__ volatile(
    67e6:	f04f 0220 	mov.w	r2, #32
    67ea:	f3ef 8611 	mrs	r6, BASEPRI
    67ee:	f382 8812 	msr	BASEPRI_MAX, r2
    67f2:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    67f6:	4698      	mov	r8, r3
    67f8:	e008      	b.n	680c <z_set_prio+0x30>
		if (need_sched) {
    67fa:	f012 0801 	ands.w	r8, r2, #1
    67fe:	d111      	bne.n	6824 <z_set_prio+0x48>
			thread->base.prio = prio;
    6800:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
    6802:	f386 8811 	msr	BASEPRI, r6
    6806:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    680a:	2301      	movs	r3, #1
    680c:	461a      	mov	r2, r3
    680e:	2b00      	cmp	r3, #0
    6810:	d13d      	bne.n	688e <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    6812:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6814:	f013 0f1f 	tst.w	r3, #31
    6818:	d1ef      	bne.n	67fa <z_set_prio+0x1e>
	return node->next != NULL;
    681a:	69a1      	ldr	r1, [r4, #24]
    681c:	2900      	cmp	r1, #0
    681e:	d1ec      	bne.n	67fa <z_set_prio+0x1e>
    6820:	2201      	movs	r2, #1
    6822:	e7ea      	b.n	67fa <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6828:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    682a:	f8df 906c 	ldr.w	r9, [pc, #108]	; 6898 <z_set_prio+0xbc>
    682e:	4621      	mov	r1, r4
    6830:	4648      	mov	r0, r9
    6832:	f002 f9b4 	bl	8b9e <z_priq_dumb_remove>
				thread->base.prio = prio;
    6836:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    6838:	7b63      	ldrb	r3, [r4, #13]
    683a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    683e:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    6840:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6844:	454d      	cmp	r5, r9
    6846:	d020      	beq.n	688a <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6848:	b16d      	cbz	r5, 6866 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    684a:	4629      	mov	r1, r5
    684c:	4620      	mov	r0, r4
    684e:	f002 f968 	bl	8b22 <z_sched_prio_cmp>
    6852:	2800      	cmp	r0, #0
    6854:	dc13      	bgt.n	687e <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6856:	b135      	cbz	r5, 6866 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    6858:	4b0e      	ldr	r3, [pc, #56]	; (6894 <z_set_prio+0xb8>)
    685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    685c:	429d      	cmp	r5, r3
    685e:	d002      	beq.n	6866 <z_set_prio+0x8a>
    6860:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6862:	2d00      	cmp	r5, #0
    6864:	d1f0      	bne.n	6848 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    6866:	4b0b      	ldr	r3, [pc, #44]	; (6894 <z_set_prio+0xb8>)
    6868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    686a:	f103 0120 	add.w	r1, r3, #32
    686e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    6870:	6062      	str	r2, [r4, #4]
	tail->next = node;
    6872:	6014      	str	r4, [r2, #0]
	list->tail = node;
    6874:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    6876:	2001      	movs	r0, #1
    6878:	f7ff fe6c 	bl	6554 <update_cache>
    687c:	e7c1      	b.n	6802 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    687e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    6880:	6063      	str	r3, [r4, #4]
	node->next = successor;
    6882:	6025      	str	r5, [r4, #0]
	prev->next = node;
    6884:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    6886:	606c      	str	r4, [r5, #4]
}
    6888:	e7f5      	b.n	6876 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    688a:	2500      	movs	r5, #0
    688c:	e7dc      	b.n	6848 <z_set_prio+0x6c>
}
    688e:	4640      	mov	r0, r8
    6890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6894:	20000f8c 	.word	0x20000f8c
    6898:	20000fac 	.word	0x20000fac

0000689c <z_impl_k_thread_suspend>:
{
    689c:	b538      	push	{r3, r4, r5, lr}
    689e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    68a0:	3018      	adds	r0, #24
    68a2:	f002 fa93 	bl	8dcc <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    68a6:	2300      	movs	r3, #0
	__asm__ volatile(
    68a8:	f04f 0220 	mov.w	r2, #32
    68ac:	f3ef 8511 	mrs	r5, BASEPRI
    68b0:	f382 8812 	msr	BASEPRI_MAX, r2
    68b4:	f3bf 8f6f 	isb	sy
    68b8:	e010      	b.n	68dc <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    68ba:	7b63      	ldrb	r3, [r4, #13]
    68bc:	f043 0310 	orr.w	r3, r3, #16
    68c0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    68c2:	4b15      	ldr	r3, [pc, #84]	; (6918 <z_impl_k_thread_suspend+0x7c>)
    68c4:	6898      	ldr	r0, [r3, #8]
    68c6:	42a0      	cmp	r0, r4
    68c8:	bf14      	ite	ne
    68ca:	2000      	movne	r0, #0
    68cc:	2001      	moveq	r0, #1
    68ce:	f7ff fe41 	bl	6554 <update_cache>
	__asm__ volatile(
    68d2:	f385 8811 	msr	BASEPRI, r5
    68d6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    68da:	2301      	movs	r3, #1
    68dc:	b963      	cbnz	r3, 68f8 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    68de:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    68e0:	f994 300d 	ldrsb.w	r3, [r4, #13]
    68e4:	2b00      	cmp	r3, #0
    68e6:	dae8      	bge.n	68ba <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    68e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    68ec:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    68ee:	4621      	mov	r1, r4
    68f0:	480a      	ldr	r0, [pc, #40]	; (691c <z_impl_k_thread_suspend+0x80>)
    68f2:	f002 f954 	bl	8b9e <z_priq_dumb_remove>
}
    68f6:	e7e0      	b.n	68ba <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    68f8:	4b07      	ldr	r3, [pc, #28]	; (6918 <z_impl_k_thread_suspend+0x7c>)
    68fa:	689b      	ldr	r3, [r3, #8]
    68fc:	42a3      	cmp	r3, r4
    68fe:	d000      	beq.n	6902 <z_impl_k_thread_suspend+0x66>
}
    6900:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    6902:	f04f 0320 	mov.w	r3, #32
    6906:	f3ef 8011 	mrs	r0, BASEPRI
    690a:	f383 8812 	msr	BASEPRI_MAX, r3
    690e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6912:	f002 f92f 	bl	8b74 <z_reschedule_irqlock>
    6916:	e7f3      	b.n	6900 <z_impl_k_thread_suspend+0x64>
    6918:	20000f8c 	.word	0x20000f8c
    691c:	20000fac 	.word	0x20000fac

00006920 <k_sched_unlock>:

void k_sched_unlock(void)
{
    6920:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    6922:	2300      	movs	r3, #0
    6924:	f04f 0220 	mov.w	r2, #32
    6928:	f3ef 8411 	mrs	r4, BASEPRI
    692c:	f382 8812 	msr	BASEPRI_MAX, r2
    6930:	f3bf 8f6f 	isb	sy
    6934:	b96b      	cbnz	r3, 6952 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    6936:	4b0c      	ldr	r3, [pc, #48]	; (6968 <k_sched_unlock+0x48>)
    6938:	689a      	ldr	r2, [r3, #8]
    693a:	7bd3      	ldrb	r3, [r2, #15]
    693c:	3301      	adds	r3, #1
    693e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    6940:	2000      	movs	r0, #0
    6942:	f7ff fe07 	bl	6554 <update_cache>
	__asm__ volatile(
    6946:	f384 8811 	msr	BASEPRI, r4
    694a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    694e:	2301      	movs	r3, #1
    6950:	e7f0      	b.n	6934 <k_sched_unlock+0x14>
	__asm__ volatile(
    6952:	f04f 0320 	mov.w	r3, #32
    6956:	f3ef 8011 	mrs	r0, BASEPRI
    695a:	f383 8812 	msr	BASEPRI_MAX, r3
    695e:	f3bf 8f6f 	isb	sy
    6962:	f002 f907 	bl	8b74 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    6966:	bd10      	pop	{r4, pc}
    6968:	20000f8c 	.word	0x20000f8c

0000696c <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    696e:	7b43      	ldrb	r3, [r0, #13]
    6970:	f013 0f08 	tst.w	r3, #8
    6974:	d145      	bne.n	6a02 <end_thread+0x96>
    6976:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    6978:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    697c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    6980:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    6982:	f013 0f80 	tst.w	r3, #128	; 0x80
    6986:	d114      	bne.n	69b2 <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    6988:	68ab      	ldr	r3, [r5, #8]
    698a:	b15b      	cbz	r3, 69a4 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    698c:	4628      	mov	r0, r5
    698e:	f002 f8c6 	bl	8b1e <pended_on_thread>
    6992:	4629      	mov	r1, r5
    6994:	f002 f903 	bl	8b9e <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6998:	7b6b      	ldrb	r3, [r5, #13]
    699a:	f023 0302 	bic.w	r3, r3, #2
    699e:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    69a0:	2300      	movs	r3, #0
    69a2:	60ab      	str	r3, [r5, #8]
    69a4:	f105 0018 	add.w	r0, r5, #24
    69a8:	f002 fa10 	bl	8dcc <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    69ac:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    69b0:	e01c      	b.n	69ec <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    69b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    69b6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    69b8:	4601      	mov	r1, r0
    69ba:	4812      	ldr	r0, [pc, #72]	; (6a04 <end_thread+0x98>)
    69bc:	f002 f8ef 	bl	8b9e <z_priq_dumb_remove>
}
    69c0:	e7e2      	b.n	6988 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    69c2:	4620      	mov	r0, r4
    69c4:	f002 f8ab 	bl	8b1e <pended_on_thread>
    69c8:	4621      	mov	r1, r4
    69ca:	f002 f8e8 	bl	8b9e <z_priq_dumb_remove>
    69ce:	7b63      	ldrb	r3, [r4, #13]
    69d0:	f023 0302 	bic.w	r3, r3, #2
    69d4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    69d6:	2600      	movs	r6, #0
    69d8:	60a6      	str	r6, [r4, #8]
    69da:	f104 0018 	add.w	r0, r4, #24
    69de:	f002 f9f5 	bl	8dcc <z_abort_timeout>
    69e2:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    69e6:	4620      	mov	r0, r4
    69e8:	f7ff fe6a 	bl	66c0 <ready_thread>
	return list->head == list;
    69ec:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    69ee:	42bc      	cmp	r4, r7
    69f0:	d001      	beq.n	69f6 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    69f2:	2c00      	cmp	r4, #0
    69f4:	d1e5      	bne.n	69c2 <end_thread+0x56>
		update_cache(1);
    69f6:	2001      	movs	r0, #1
    69f8:	f7ff fdac 	bl	6554 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    69fc:	4628      	mov	r0, r5
    69fe:	f7ff fae9 	bl	5fd4 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    6a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a04:	20000fac 	.word	0x20000fac

00006a08 <z_sched_init>:
{
    6a08:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    6a0a:	4804      	ldr	r0, [pc, #16]	; (6a1c <z_sched_init+0x14>)
    6a0c:	f002 f9c3 	bl	8d96 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    6a10:	2100      	movs	r1, #0
    6a12:	4608      	mov	r0, r1
    6a14:	f7ff fd2e 	bl	6474 <k_sched_time_slice_set>
}
    6a18:	bd08      	pop	{r3, pc}
    6a1a:	bf00      	nop
    6a1c:	20000fa8 	.word	0x20000fa8

00006a20 <z_impl_k_yield>:
{
    6a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a22:	f04f 0320 	mov.w	r3, #32
    6a26:	f3ef 8611 	mrs	r6, BASEPRI
    6a2a:	f383 8812 	msr	BASEPRI_MAX, r3
    6a2e:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    6a32:	4c1c      	ldr	r4, [pc, #112]	; (6aa4 <z_impl_k_yield+0x84>)
    6a34:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6a36:	7b4b      	ldrb	r3, [r1, #13]
    6a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6a3c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6a3e:	f104 0720 	add.w	r7, r4, #32
    6a42:	4638      	mov	r0, r7
    6a44:	f002 f8ab 	bl	8b9e <z_priq_dumb_remove>
	queue_thread(_current);
    6a48:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    6a4a:	7b6b      	ldrb	r3, [r5, #13]
    6a4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6a50:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    6a52:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6a54:	42bc      	cmp	r4, r7
    6a56:	d023      	beq.n	6aa0 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6a58:	b16c      	cbz	r4, 6a76 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6a5a:	4621      	mov	r1, r4
    6a5c:	4628      	mov	r0, r5
    6a5e:	f002 f860 	bl	8b22 <z_sched_prio_cmp>
    6a62:	2800      	cmp	r0, #0
    6a64:	dc16      	bgt.n	6a94 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6a66:	b134      	cbz	r4, 6a76 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    6a68:	4b0e      	ldr	r3, [pc, #56]	; (6aa4 <z_impl_k_yield+0x84>)
    6a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a6c:	429c      	cmp	r4, r3
    6a6e:	d002      	beq.n	6a76 <z_impl_k_yield+0x56>
    6a70:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6a72:	2c00      	cmp	r4, #0
    6a74:	d1f0      	bne.n	6a58 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    6a76:	4b0b      	ldr	r3, [pc, #44]	; (6aa4 <z_impl_k_yield+0x84>)
    6a78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    6a7a:	f103 0120 	add.w	r1, r3, #32
    6a7e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    6a80:	606a      	str	r2, [r5, #4]
	tail->next = node;
    6a82:	6015      	str	r5, [r2, #0]
	list->tail = node;
    6a84:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    6a86:	2001      	movs	r0, #1
    6a88:	f7ff fd64 	bl	6554 <update_cache>
    6a8c:	4630      	mov	r0, r6
    6a8e:	f7fb fea7 	bl	27e0 <arch_swap>
}
    6a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    6a94:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    6a96:	606b      	str	r3, [r5, #4]
	node->next = successor;
    6a98:	602c      	str	r4, [r5, #0]
	prev->next = node;
    6a9a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    6a9c:	6065      	str	r5, [r4, #4]
}
    6a9e:	e7f2      	b.n	6a86 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6aa0:	2400      	movs	r4, #0
    6aa2:	e7d9      	b.n	6a58 <z_impl_k_yield+0x38>
    6aa4:	20000f8c 	.word	0x20000f8c

00006aa8 <z_tick_sleep>:
{
    6aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6aac:	4604      	mov	r4, r0
    6aae:	460d      	mov	r5, r1
	if (ticks == 0) {
    6ab0:	ea54 0105 	orrs.w	r1, r4, r5
    6ab4:	d037      	beq.n	6b26 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    6ab6:	f06f 0101 	mvn.w	r1, #1
    6aba:	1a0a      	subs	r2, r1, r0
    6abc:	f04f 31ff 	mov.w	r1, #4294967295
    6ac0:	eb61 0305 	sbc.w	r3, r1, r5
    6ac4:	2a01      	cmp	r2, #1
    6ac6:	f173 0300 	sbcs.w	r3, r3, #0
    6aca:	db30      	blt.n	6b2e <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    6acc:	f06f 0601 	mvn.w	r6, #1
    6ad0:	1a36      	subs	r6, r6, r0
    6ad2:	f04f 0320 	mov.w	r3, #32
    6ad6:	f3ef 8811 	mrs	r8, BASEPRI
    6ada:	f383 8812 	msr	BASEPRI_MAX, r3
    6ade:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    6ae2:	4f16      	ldr	r7, [pc, #88]	; (6b3c <z_tick_sleep+0x94>)
    6ae4:	68b8      	ldr	r0, [r7, #8]
    6ae6:	4b16      	ldr	r3, [pc, #88]	; (6b40 <z_tick_sleep+0x98>)
    6ae8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    6aea:	f7ff fe47 	bl	677c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    6aee:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6af0:	4622      	mov	r2, r4
    6af2:	462b      	mov	r3, r5
    6af4:	4913      	ldr	r1, [pc, #76]	; (6b44 <z_tick_sleep+0x9c>)
    6af6:	3018      	adds	r0, #24
    6af8:	f000 f8e2 	bl	6cc0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    6afc:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6afe:	7b53      	ldrb	r3, [r2, #13]
    6b00:	f043 0310 	orr.w	r3, r3, #16
    6b04:	7353      	strb	r3, [r2, #13]
    6b06:	4640      	mov	r0, r8
    6b08:	f7fb fe6a 	bl	27e0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    6b0c:	2500      	movs	r5, #0
    6b0e:	f002 f9bc 	bl	8e8a <sys_clock_tick_get_32>
    6b12:	1a34      	subs	r4, r6, r0
    6b14:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    6b18:	2c01      	cmp	r4, #1
    6b1a:	f175 0300 	sbcs.w	r3, r5, #0
    6b1e:	da0a      	bge.n	6b36 <z_tick_sleep+0x8e>
	return 0;
    6b20:	2000      	movs	r0, #0
}
    6b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    6b26:	f7ff ff7b 	bl	6a20 <z_impl_k_yield>
		return 0;
    6b2a:	2000      	movs	r0, #0
    6b2c:	e7f9      	b.n	6b22 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6b2e:	f002 f9ac 	bl	8e8a <sys_clock_tick_get_32>
    6b32:	1906      	adds	r6, r0, r4
    6b34:	e7cd      	b.n	6ad2 <z_tick_sleep+0x2a>
		return ticks;
    6b36:	4620      	mov	r0, r4
    6b38:	e7f3      	b.n	6b22 <z_tick_sleep+0x7a>
    6b3a:	bf00      	nop
    6b3c:	20000f8c 	.word	0x20000f8c
    6b40:	20000fb8 	.word	0x20000fb8
    6b44:	00008bf5 	.word	0x00008bf5

00006b48 <z_impl_k_sleep>:
{
    6b48:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6b4a:	f1b1 3fff 	cmp.w	r1, #4294967295
    6b4e:	bf08      	it	eq
    6b50:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    6b54:	d01a      	beq.n	6b8c <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    6b56:	f7ff ffa7 	bl	6aa8 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    6b5a:	4604      	mov	r4, r0
    6b5c:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    6b5e:	0169      	lsls	r1, r5, #5
    6b60:	0143      	lsls	r3, r0, #5
    6b62:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    6b66:	1a18      	subs	r0, r3, r0
    6b68:	eb62 0305 	sbc.w	r3, r2, r5
    6b6c:	009a      	lsls	r2, r3, #2
    6b6e:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    6b72:	0081      	lsls	r1, r0, #2
    6b74:	4613      	mov	r3, r2
    6b76:	1908      	adds	r0, r1, r4
    6b78:	eb45 0303 	adc.w	r3, r5, r3
    6b7c:	00da      	lsls	r2, r3, #3
    6b7e:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    6b82:	00c1      	lsls	r1, r0, #3
    6b84:	0bc8      	lsrs	r0, r1, #15
    6b86:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    6b8a:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    6b8c:	4b03      	ldr	r3, [pc, #12]	; (6b9c <z_impl_k_sleep+0x54>)
    6b8e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    6b90:	f7ff fe84 	bl	689c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    6b94:	f04f 30ff 	mov.w	r0, #4294967295
    6b98:	e7f7      	b.n	6b8a <z_impl_k_sleep+0x42>
    6b9a:	bf00      	nop
    6b9c:	20000f8c 	.word	0x20000f8c

00006ba0 <z_impl_z_current_get>:
}
    6ba0:	4b01      	ldr	r3, [pc, #4]	; (6ba8 <z_impl_z_current_get+0x8>)
    6ba2:	6898      	ldr	r0, [r3, #8]
    6ba4:	4770      	bx	lr
    6ba6:	bf00      	nop
    6ba8:	20000f8c 	.word	0x20000f8c

00006bac <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    6bac:	b538      	push	{r3, r4, r5, lr}
    6bae:	f04f 0320 	mov.w	r3, #32
    6bb2:	f3ef 8511 	mrs	r5, BASEPRI
    6bb6:	f383 8812 	msr	BASEPRI_MAX, r3
    6bba:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    6bbe:	7b43      	ldrb	r3, [r0, #13]
    6bc0:	f013 0f08 	tst.w	r3, #8
    6bc4:	d004      	beq.n	6bd0 <z_thread_abort+0x24>
	__asm__ volatile(
    6bc6:	f385 8811 	msr	BASEPRI, r5
    6bca:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    6bce:	bd38      	pop	{r3, r4, r5, pc}
    6bd0:	4604      	mov	r4, r0
	end_thread(thread);
    6bd2:	f7ff fecb 	bl	696c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    6bd6:	4b08      	ldr	r3, [pc, #32]	; (6bf8 <z_thread_abort+0x4c>)
    6bd8:	689b      	ldr	r3, [r3, #8]
    6bda:	42a3      	cmp	r3, r4
    6bdc:	d004      	beq.n	6be8 <z_thread_abort+0x3c>
    6bde:	f385 8811 	msr	BASEPRI, r5
    6be2:	f3bf 8f6f 	isb	sy
    6be6:	e7f2      	b.n	6bce <z_thread_abort+0x22>
    6be8:	f3ef 8305 	mrs	r3, IPSR
    6bec:	2b00      	cmp	r3, #0
    6bee:	d1f6      	bne.n	6bde <z_thread_abort+0x32>
    6bf0:	4628      	mov	r0, r5
    6bf2:	f7fb fdf5 	bl	27e0 <arch_swap>
	return ret;
    6bf6:	e7f2      	b.n	6bde <z_thread_abort+0x32>
    6bf8:	20000f8c 	.word	0x20000f8c

00006bfc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    6bfc:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    6bfe:	4806      	ldr	r0, [pc, #24]	; (6c18 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    6c00:	4a06      	ldr	r2, [pc, #24]	; (6c1c <z_data_copy+0x20>)
    6c02:	1a12      	subs	r2, r2, r0
    6c04:	4906      	ldr	r1, [pc, #24]	; (6c20 <z_data_copy+0x24>)
    6c06:	f001 fa1e 	bl	8046 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    6c0a:	4a06      	ldr	r2, [pc, #24]	; (6c24 <z_data_copy+0x28>)
    6c0c:	4906      	ldr	r1, [pc, #24]	; (6c28 <z_data_copy+0x2c>)
    6c0e:	4807      	ldr	r0, [pc, #28]	; (6c2c <z_data_copy+0x30>)
    6c10:	f001 fa19 	bl	8046 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    6c14:	bd08      	pop	{r3, pc}
    6c16:	bf00      	nop
    6c18:	20000000 	.word	0x20000000
    6c1c:	200001d0 	.word	0x200001d0
    6c20:	00009fac 	.word	0x00009fac
    6c24:	00000000 	.word	0x00000000
    6c28:	00009fac 	.word	0x00009fac
    6c2c:	20000000 	.word	0x20000000

00006c30 <first>:
	return list->head == list;
    6c30:	4b03      	ldr	r3, [pc, #12]	; (6c40 <first+0x10>)
    6c32:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6c34:	4298      	cmp	r0, r3
    6c36:	d000      	beq.n	6c3a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    6c38:	4770      	bx	lr
    6c3a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    6c3c:	e7fc      	b.n	6c38 <first+0x8>
    6c3e:	bf00      	nop
    6c40:	200000d8 	.word	0x200000d8

00006c44 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6c44:	b130      	cbz	r0, 6c54 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    6c46:	4a04      	ldr	r2, [pc, #16]	; (6c58 <next+0x14>)
    6c48:	6852      	ldr	r2, [r2, #4]
    6c4a:	4290      	cmp	r0, r2
    6c4c:	d001      	beq.n	6c52 <next+0xe>
    6c4e:	6800      	ldr	r0, [r0, #0]
    6c50:	4770      	bx	lr
    6c52:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    6c54:	4770      	bx	lr
    6c56:	bf00      	nop
    6c58:	200000d8 	.word	0x200000d8

00006c5c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    6c5c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6c5e:	4b04      	ldr	r3, [pc, #16]	; (6c70 <elapsed+0x14>)
    6c60:	681b      	ldr	r3, [r3, #0]
    6c62:	b10b      	cbz	r3, 6c68 <elapsed+0xc>
    6c64:	2000      	movs	r0, #0
}
    6c66:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6c68:	f7fd fde0 	bl	482c <sys_clock_elapsed>
    6c6c:	e7fb      	b.n	6c66 <elapsed+0xa>
    6c6e:	bf00      	nop
    6c70:	20000fc4 	.word	0x20000fc4

00006c74 <next_timeout>:

static int32_t next_timeout(void)
{
    6c74:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    6c76:	f7ff ffdb 	bl	6c30 <first>
    6c7a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    6c7c:	f7ff ffee 	bl	6c5c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    6c80:	b18c      	cbz	r4, 6ca6 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    6c82:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    6c86:	1a12      	subs	r2, r2, r0
    6c88:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    6c8c:	2a01      	cmp	r2, #1
    6c8e:	f173 0100 	sbcs.w	r1, r3, #0
    6c92:	db11      	blt.n	6cb8 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    6c94:	4610      	mov	r0, r2
    6c96:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6c9a:	f173 0300 	sbcs.w	r3, r3, #0
    6c9e:	db04      	blt.n	6caa <next_timeout+0x36>
    6ca0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6ca4:	e001      	b.n	6caa <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    6ca6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    6caa:	4b04      	ldr	r3, [pc, #16]	; (6cbc <next_timeout+0x48>)
    6cac:	691b      	ldr	r3, [r3, #16]
    6cae:	b113      	cbz	r3, 6cb6 <next_timeout+0x42>
    6cb0:	4283      	cmp	r3, r0
    6cb2:	da00      	bge.n	6cb6 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    6cb4:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    6cb6:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    6cb8:	2000      	movs	r0, #0
    6cba:	e7f6      	b.n	6caa <next_timeout+0x36>
    6cbc:	20000f8c 	.word	0x20000f8c

00006cc0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    6cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6cc4:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
    6cca:	bf08      	it	eq
    6ccc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    6cd0:	f000 8096 	beq.w	6e00 <z_add_timeout+0x140>
    6cd4:	4682      	mov	sl, r0
    6cd6:	4614      	mov	r4, r2
    6cd8:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    6cda:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    6cdc:	2300      	movs	r3, #0
	__asm__ volatile(
    6cde:	f04f 0220 	mov.w	r2, #32
    6ce2:	f3ef 8b11 	mrs	fp, BASEPRI
    6ce6:	f382 8812 	msr	BASEPRI_MAX, r2
    6cea:	f3bf 8f6f 	isb	sy
    6cee:	e02e      	b.n	6d4e <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    6cf0:	2201      	movs	r2, #1
    6cf2:	2300      	movs	r3, #0
    6cf4:	e04b      	b.n	6d8e <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    6cf6:	f7ff ffb1 	bl	6c5c <elapsed>
    6cfa:	1822      	adds	r2, r4, r0
    6cfc:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
    6d00:	3201      	adds	r2, #1
    6d02:	f143 0300 	adc.w	r3, r3, #0
    6d06:	f8ca 2010 	str.w	r2, [sl, #16]
    6d0a:	f8ca 3014 	str.w	r3, [sl, #20]
    6d0e:	e042      	b.n	6d96 <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    6d10:	9b00      	ldr	r3, [sp, #0]
    6d12:	1ac2      	subs	r2, r0, r3
    6d14:	9b01      	ldr	r3, [sp, #4]
    6d16:	eb61 0303 	sbc.w	r3, r1, r3
    6d1a:	f8cc 2010 	str.w	r2, [ip, #16]
    6d1e:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
    6d22:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
    6d26:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
    6d2a:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
    6d2e:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
    6d32:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    6d36:	f1bc 0f00 	cmp.w	ip, #0
    6d3a:	d049      	beq.n	6dd0 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    6d3c:	f7ff ff78 	bl	6c30 <first>
    6d40:	4582      	cmp	sl, r0
    6d42:	d050      	beq.n	6de6 <z_add_timeout+0x126>
	__asm__ volatile(
    6d44:	f38b 8811 	msr	BASEPRI, fp
    6d48:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    6d4c:	2301      	movs	r3, #1
    6d4e:	2b00      	cmp	r3, #0
    6d50:	d156      	bne.n	6e00 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    6d52:	f06f 0301 	mvn.w	r3, #1
    6d56:	ebb3 0804 	subs.w	r8, r3, r4
    6d5a:	f04f 30ff 	mov.w	r0, #4294967295
    6d5e:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    6d62:	f1b8 0f00 	cmp.w	r8, #0
    6d66:	f179 0300 	sbcs.w	r3, r9, #0
    6d6a:	dbc4      	blt.n	6cf6 <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    6d6c:	4a26      	ldr	r2, [pc, #152]	; (6e08 <z_add_timeout+0x148>)
    6d6e:	6813      	ldr	r3, [r2, #0]
    6d70:	6852      	ldr	r2, [r2, #4]
    6d72:	18e3      	adds	r3, r4, r3
    6d74:	eb45 0202 	adc.w	r2, r5, r2
    6d78:	f06f 0101 	mvn.w	r1, #1
    6d7c:	1ace      	subs	r6, r1, r3
    6d7e:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
    6d82:	4632      	mov	r2, r6
    6d84:	463b      	mov	r3, r7
    6d86:	2e01      	cmp	r6, #1
    6d88:	f177 0100 	sbcs.w	r1, r7, #0
    6d8c:	dbb0      	blt.n	6cf0 <z_add_timeout+0x30>
    6d8e:	f8ca 2010 	str.w	r2, [sl, #16]
    6d92:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    6d96:	f7ff ff4b 	bl	6c30 <first>
    6d9a:	4684      	mov	ip, r0
    6d9c:	f1bc 0f00 	cmp.w	ip, #0
    6da0:	d0c9      	beq.n	6d36 <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
    6da2:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
    6da6:	e9da 2304 	ldrd	r2, r3, [sl, #16]
    6daa:	e9cd 2300 	strd	r2, r3, [sp]
    6dae:	4282      	cmp	r2, r0
    6db0:	418b      	sbcs	r3, r1
    6db2:	dbad      	blt.n	6d10 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
    6db4:	9b00      	ldr	r3, [sp, #0]
    6db6:	1a1a      	subs	r2, r3, r0
    6db8:	9b01      	ldr	r3, [sp, #4]
    6dba:	eb63 0301 	sbc.w	r3, r3, r1
    6dbe:	f8ca 2010 	str.w	r2, [sl, #16]
    6dc2:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    6dc6:	4660      	mov	r0, ip
    6dc8:	f7ff ff3c 	bl	6c44 <next>
    6dcc:	4684      	mov	ip, r0
    6dce:	e7e5      	b.n	6d9c <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
    6dd0:	4b0e      	ldr	r3, [pc, #56]	; (6e0c <z_add_timeout+0x14c>)
    6dd2:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    6dd4:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
    6dd8:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
    6ddc:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    6de0:	f8c3 a004 	str.w	sl, [r3, #4]
}
    6de4:	e7aa      	b.n	6d3c <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    6de6:	f7ff ff45 	bl	6c74 <next_timeout>

			if (next_time == 0 ||
    6dea:	4603      	mov	r3, r0
    6dec:	b118      	cbz	r0, 6df6 <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
    6dee:	4a08      	ldr	r2, [pc, #32]	; (6e10 <z_add_timeout+0x150>)
    6df0:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    6df2:	4282      	cmp	r2, r0
    6df4:	d0a6      	beq.n	6d44 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
    6df6:	2100      	movs	r1, #0
    6df8:	4618      	mov	r0, r3
    6dfa:	f7fd fce3 	bl	47c4 <sys_clock_set_timeout>
    6dfe:	e7a1      	b.n	6d44 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    6e00:	b003      	add	sp, #12
    6e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e06:	bf00      	nop
    6e08:	20000438 	.word	0x20000438
    6e0c:	200000d8 	.word	0x200000d8
    6e10:	20000f8c 	.word	0x20000f8c

00006e14 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    6e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e16:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    6e18:	f7ff fc06 	bl	6628 <z_time_slice>
	__asm__ volatile(
    6e1c:	f04f 0320 	mov.w	r3, #32
    6e20:	f3ef 8511 	mrs	r5, BASEPRI
    6e24:	f383 8812 	msr	BASEPRI_MAX, r3
    6e28:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    6e2c:	4b28      	ldr	r3, [pc, #160]	; (6ed0 <sys_clock_announce+0xbc>)
    6e2e:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    6e30:	f7ff fefe 	bl	6c30 <first>
    6e34:	4604      	mov	r4, r0
    6e36:	b350      	cbz	r0, 6e8e <sys_clock_announce+0x7a>
    6e38:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    6e3c:	4b24      	ldr	r3, [pc, #144]	; (6ed0 <sys_clock_announce+0xbc>)
    6e3e:	681b      	ldr	r3, [r3, #0]
    6e40:	17d9      	asrs	r1, r3, #31
    6e42:	42b3      	cmp	r3, r6
    6e44:	eb71 0207 	sbcs.w	r2, r1, r7
    6e48:	db21      	blt.n	6e8e <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    6e4a:	4a22      	ldr	r2, [pc, #136]	; (6ed4 <sys_clock_announce+0xc0>)
    6e4c:	e9d2 0100 	ldrd	r0, r1, [r2]
    6e50:	1980      	adds	r0, r0, r6
    6e52:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    6e56:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
    6e5a:	1b9b      	subs	r3, r3, r6
    6e5c:	4a1c      	ldr	r2, [pc, #112]	; (6ed0 <sys_clock_announce+0xbc>)
    6e5e:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    6e60:	2200      	movs	r2, #0
    6e62:	2300      	movs	r3, #0
    6e64:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    6e68:	4620      	mov	r0, r4
    6e6a:	f001 ff98 	bl	8d9e <remove_timeout>
	__asm__ volatile(
    6e6e:	f385 8811 	msr	BASEPRI, r5
    6e72:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    6e76:	68a3      	ldr	r3, [r4, #8]
    6e78:	4620      	mov	r0, r4
    6e7a:	4798      	blx	r3
	__asm__ volatile(
    6e7c:	f04f 0320 	mov.w	r3, #32
    6e80:	f3ef 8511 	mrs	r5, BASEPRI
    6e84:	f383 8812 	msr	BASEPRI_MAX, r3
    6e88:	f3bf 8f6f 	isb	sy
    6e8c:	e7d0      	b.n	6e30 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    6e8e:	b144      	cbz	r4, 6ea2 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    6e90:	4b0f      	ldr	r3, [pc, #60]	; (6ed0 <sys_clock_announce+0xbc>)
    6e92:	6819      	ldr	r1, [r3, #0]
    6e94:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    6e98:	1a52      	subs	r2, r2, r1
    6e9a:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    6e9e:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
    6ea2:	480c      	ldr	r0, [pc, #48]	; (6ed4 <sys_clock_announce+0xc0>)
    6ea4:	490a      	ldr	r1, [pc, #40]	; (6ed0 <sys_clock_announce+0xbc>)
    6ea6:	680c      	ldr	r4, [r1, #0]
    6ea8:	e9d0 2300 	ldrd	r2, r3, [r0]
    6eac:	1912      	adds	r2, r2, r4
    6eae:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    6eb2:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    6eb6:	2400      	movs	r4, #0
    6eb8:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
    6eba:	f7ff fedb 	bl	6c74 <next_timeout>
    6ebe:	4621      	mov	r1, r4
    6ec0:	f7fd fc80 	bl	47c4 <sys_clock_set_timeout>
	__asm__ volatile(
    6ec4:	f385 8811 	msr	BASEPRI, r5
    6ec8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    6ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ece:	bf00      	nop
    6ed0:	20000fc4 	.word	0x20000fc4
    6ed4:	20000438 	.word	0x20000438

00006ed8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    6ed8:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    6eda:	2100      	movs	r1, #0
	__asm__ volatile(
    6edc:	f04f 0320 	mov.w	r3, #32
    6ee0:	f3ef 8411 	mrs	r4, BASEPRI
    6ee4:	f383 8812 	msr	BASEPRI_MAX, r3
    6ee8:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    6eec:	2200      	movs	r2, #0
    6eee:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
    6ef0:	b969      	cbnz	r1, 6f0e <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
    6ef2:	f7fd fc9b 	bl	482c <sys_clock_elapsed>
    6ef6:	4b07      	ldr	r3, [pc, #28]	; (6f14 <sys_clock_tick_get+0x3c>)
    6ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
    6efc:	1812      	adds	r2, r2, r0
    6efe:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    6f02:	f384 8811 	msr	BASEPRI, r4
    6f06:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    6f0a:	2101      	movs	r1, #1
    6f0c:	e7f0      	b.n	6ef0 <sys_clock_tick_get+0x18>
	}
	return t;
}
    6f0e:	4610      	mov	r0, r2
    6f10:	4619      	mov	r1, r3
    6f12:	bd10      	pop	{r4, pc}
    6f14:	20000438 	.word	0x20000438

00006f18 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    6f18:	b570      	push	{r4, r5, r6, lr}
    6f1a:	4604      	mov	r4, r0
	__asm__ volatile(
    6f1c:	f04f 0320 	mov.w	r3, #32
    6f20:	f3ef 8611 	mrs	r6, BASEPRI
    6f24:	f383 8812 	msr	BASEPRI_MAX, r3
    6f28:	f3bf 8f6f 	isb	sy
    6f2c:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    6f2e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    6f32:	ea52 0103 	orrs.w	r1, r2, r3
    6f36:	d005      	beq.n	6f44 <z_timer_expiration_handler+0x2c>
    6f38:	f1b3 3fff 	cmp.w	r3, #4294967295
    6f3c:	bf08      	it	eq
    6f3e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    6f42:	d127      	bne.n	6f94 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    6f44:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6f46:	3301      	adds	r3, #1
    6f48:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    6f4a:	6a23      	ldr	r3, [r4, #32]
    6f4c:	b173      	cbz	r3, 6f6c <z_timer_expiration_handler+0x54>
	__asm__ volatile(
    6f4e:	f386 8811 	msr	BASEPRI, r6
    6f52:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    6f56:	6a23      	ldr	r3, [r4, #32]
    6f58:	4620      	mov	r0, r4
    6f5a:	4798      	blx	r3
	__asm__ volatile(
    6f5c:	f04f 0320 	mov.w	r3, #32
    6f60:	f3ef 8511 	mrs	r5, BASEPRI
    6f64:	f383 8812 	msr	BASEPRI_MAX, r3
    6f68:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6f6c:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    6f70:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6f72:	42a3      	cmp	r3, r4
    6f74:	d012      	beq.n	6f9c <z_timer_expiration_handler+0x84>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    6f76:	b18c      	cbz	r4, 6f9c <z_timer_expiration_handler+0x84>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    6f78:	4620      	mov	r0, r4
    6f7a:	f001 fddc 	bl	8b36 <z_unpend_thread_no_timeout>
    6f7e:	2300      	movs	r3, #0
    6f80:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
    6f84:	f385 8811 	msr	BASEPRI, r5
    6f88:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    6f8c:	4620      	mov	r0, r4
    6f8e:	f001 fe15 	bl	8bbc <z_ready_thread>
}
    6f92:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6f94:	4904      	ldr	r1, [pc, #16]	; (6fa8 <z_timer_expiration_handler+0x90>)
    6f96:	f7ff fe93 	bl	6cc0 <z_add_timeout>
    6f9a:	e7d3      	b.n	6f44 <z_timer_expiration_handler+0x2c>
    6f9c:	f385 8811 	msr	BASEPRI, r5
    6fa0:	f3bf 8f6f 	isb	sy
		return;
    6fa4:	e7f5      	b.n	6f92 <z_timer_expiration_handler+0x7a>
    6fa6:	bf00      	nop
    6fa8:	00006f19 	.word	0x00006f19

00006fac <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    6fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fb0:	b087      	sub	sp, #28
    6fb2:	4614      	mov	r4, r2
    6fb4:	461d      	mov	r5, r3
    6fb6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    6fba:	f1b3 3fff 	cmp.w	r3, #4294967295
    6fbe:	bf08      	it	eq
    6fc0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    6fc4:	d035      	beq.n	7032 <z_impl_k_timer_start+0x86>
    6fc6:	4606      	mov	r6, r0
    6fc8:	4613      	mov	r3, r2
    6fca:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    6fcc:	f1b9 3fff 	cmp.w	r9, #4294967295
    6fd0:	bf08      	it	eq
    6fd2:	f1b8 3fff 	cmpeq.w	r8, #4294967295
    6fd6:	d012      	beq.n	6ffe <z_impl_k_timer_start+0x52>
    6fd8:	ea58 0109 	orrs.w	r1, r8, r9
    6fdc:	d00f      	beq.n	6ffe <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
    6fde:	f06f 0701 	mvn.w	r7, #1
    6fe2:	ebb7 0708 	subs.w	r7, r7, r8
    6fe6:	9702      	str	r7, [sp, #8]
    6fe8:	f04f 31ff 	mov.w	r1, #4294967295
    6fec:	eb61 0709 	sbc.w	r7, r1, r9
    6ff0:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    6ff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    6ff6:	2800      	cmp	r0, #0
    6ff8:	f171 0100 	sbcs.w	r1, r1, #0
    6ffc:	db1c      	blt.n	7038 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    6ffe:	f06f 0101 	mvn.w	r1, #1
    7002:	ebb1 0a03 	subs.w	sl, r1, r3
    7006:	f04f 31ff 	mov.w	r1, #4294967295
    700a:	eb61 0b02 	sbc.w	fp, r1, r2
    700e:	f1ba 0f00 	cmp.w	sl, #0
    7012:	f17b 0100 	sbcs.w	r1, fp, #0
    7016:	db23      	blt.n	7060 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    7018:	4630      	mov	r0, r6
    701a:	f001 fed7 	bl	8dcc <z_abort_timeout>
	timer->period = period;
    701e:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
    7022:	2300      	movs	r3, #0
    7024:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    7026:	4622      	mov	r2, r4
    7028:	462b      	mov	r3, r5
    702a:	4917      	ldr	r1, [pc, #92]	; (7088 <z_impl_k_timer_start+0xdc>)
    702c:	4630      	mov	r0, r6
    702e:	f7ff fe47 	bl	6cc0 <z_add_timeout>
		     duration);
}
    7032:	b007      	add	sp, #28
    7034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    7038:	f118 31ff 	adds.w	r1, r8, #4294967295
    703c:	9104      	str	r1, [sp, #16]
    703e:	f149 31ff 	adc.w	r1, r9, #4294967295
    7042:	9105      	str	r1, [sp, #20]
    7044:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
    7048:	4638      	mov	r0, r7
    704a:	4641      	mov	r1, r8
    704c:	2f01      	cmp	r7, #1
    704e:	f178 0700 	sbcs.w	r7, r8, #0
    7052:	db02      	blt.n	705a <z_impl_k_timer_start+0xae>
    7054:	4680      	mov	r8, r0
    7056:	4689      	mov	r9, r1
    7058:	e7d1      	b.n	6ffe <z_impl_k_timer_start+0x52>
    705a:	2001      	movs	r0, #1
    705c:	2100      	movs	r1, #0
    705e:	e7f9      	b.n	7054 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
    7060:	f113 33ff 	adds.w	r3, r3, #4294967295
    7064:	9300      	str	r3, [sp, #0]
    7066:	f142 33ff 	adc.w	r3, r2, #4294967295
    706a:	9301      	str	r3, [sp, #4]
    706c:	e9dd 0100 	ldrd	r0, r1, [sp]
    7070:	4602      	mov	r2, r0
    7072:	460b      	mov	r3, r1
    7074:	2800      	cmp	r0, #0
    7076:	f171 0100 	sbcs.w	r1, r1, #0
    707a:	db02      	blt.n	7082 <z_impl_k_timer_start+0xd6>
    707c:	4614      	mov	r4, r2
    707e:	461d      	mov	r5, r3
    7080:	e7ca      	b.n	7018 <z_impl_k_timer_start+0x6c>
    7082:	2200      	movs	r2, #0
    7084:	4613      	mov	r3, r2
    7086:	e7f9      	b.n	707c <z_impl_k_timer_start+0xd0>
    7088:	00006f19 	.word	0x00006f19

0000708c <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    708c:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    708e:	4a03      	ldr	r2, [pc, #12]	; (709c <boot_banner+0x10>)
    7090:	4903      	ldr	r1, [pc, #12]	; (70a0 <boot_banner+0x14>)
    7092:	4804      	ldr	r0, [pc, #16]	; (70a4 <boot_banner+0x18>)
    7094:	f000 fa26 	bl	74e4 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    7098:	bd08      	pop	{r3, pc}
    709a:	bf00      	nop
    709c:	00009428 	.word	0x00009428
    70a0:	00009eec 	.word	0x00009eec
    70a4:	00009efc 	.word	0x00009efc

000070a8 <nrf_cc3xx_platform_init_no_rng>:
    70a8:	b510      	push	{r4, lr}
    70aa:	4c0a      	ldr	r4, [pc, #40]	; (70d4 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    70ac:	6823      	ldr	r3, [r4, #0]
    70ae:	b11b      	cbz	r3, 70b8 <nrf_cc3xx_platform_init_no_rng+0x10>
    70b0:	2301      	movs	r3, #1
    70b2:	6023      	str	r3, [r4, #0]
    70b4:	2000      	movs	r0, #0
    70b6:	bd10      	pop	{r4, pc}
    70b8:	f000 f8d6 	bl	7268 <CC_LibInitNoRng>
    70bc:	2800      	cmp	r0, #0
    70be:	d0f7      	beq.n	70b0 <nrf_cc3xx_platform_init_no_rng+0x8>
    70c0:	3801      	subs	r0, #1
    70c2:	2806      	cmp	r0, #6
    70c4:	d803      	bhi.n	70ce <nrf_cc3xx_platform_init_no_rng+0x26>
    70c6:	4b04      	ldr	r3, [pc, #16]	; (70d8 <nrf_cc3xx_platform_init_no_rng+0x30>)
    70c8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    70cc:	bd10      	pop	{r4, pc}
    70ce:	4803      	ldr	r0, [pc, #12]	; (70dc <nrf_cc3xx_platform_init_no_rng+0x34>)
    70d0:	bd10      	pop	{r4, pc}
    70d2:	bf00      	nop
    70d4:	20000fc8 	.word	0x20000fc8
    70d8:	00009f24 	.word	0x00009f24
    70dc:	ffff8ffe 	.word	0xffff8ffe

000070e0 <nrf_cc3xx_platform_abort>:
    70e0:	f3bf 8f4f 	dsb	sy
    70e4:	4905      	ldr	r1, [pc, #20]	; (70fc <nrf_cc3xx_platform_abort+0x1c>)
    70e6:	4b06      	ldr	r3, [pc, #24]	; (7100 <nrf_cc3xx_platform_abort+0x20>)
    70e8:	68ca      	ldr	r2, [r1, #12]
    70ea:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    70ee:	4313      	orrs	r3, r2
    70f0:	60cb      	str	r3, [r1, #12]
    70f2:	f3bf 8f4f 	dsb	sy
    70f6:	bf00      	nop
    70f8:	e7fd      	b.n	70f6 <nrf_cc3xx_platform_abort+0x16>
    70fa:	bf00      	nop
    70fc:	e000ed00 	.word	0xe000ed00
    7100:	05fa0004 	.word	0x05fa0004

00007104 <CC_PalAbort>:
    7104:	b4f0      	push	{r4, r5, r6, r7}
    7106:	4f09      	ldr	r7, [pc, #36]	; (712c <CC_PalAbort+0x28>)
    7108:	4e09      	ldr	r6, [pc, #36]	; (7130 <CC_PalAbort+0x2c>)
    710a:	4c0a      	ldr	r4, [pc, #40]	; (7134 <CC_PalAbort+0x30>)
    710c:	4a0a      	ldr	r2, [pc, #40]	; (7138 <CC_PalAbort+0x34>)
    710e:	4d0b      	ldr	r5, [pc, #44]	; (713c <CC_PalAbort+0x38>)
    7110:	490b      	ldr	r1, [pc, #44]	; (7140 <CC_PalAbort+0x3c>)
    7112:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    7116:	603b      	str	r3, [r7, #0]
    7118:	6852      	ldr	r2, [r2, #4]
    711a:	6033      	str	r3, [r6, #0]
    711c:	6023      	str	r3, [r4, #0]
    711e:	2400      	movs	r4, #0
    7120:	602b      	str	r3, [r5, #0]
    7122:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    7126:	bcf0      	pop	{r4, r5, r6, r7}
    7128:	4710      	bx	r2
    712a:	bf00      	nop
    712c:	5002b400 	.word	0x5002b400
    7130:	5002b404 	.word	0x5002b404
    7134:	5002b408 	.word	0x5002b408
    7138:	200000e0 	.word	0x200000e0
    713c:	5002b40c 	.word	0x5002b40c
    7140:	5002a000 	.word	0x5002a000

00007144 <nrf_cc3xx_platform_set_abort>:
    7144:	e9d0 1200 	ldrd	r1, r2, [r0]
    7148:	4b01      	ldr	r3, [pc, #4]	; (7150 <nrf_cc3xx_platform_set_abort+0xc>)
    714a:	e9c3 1200 	strd	r1, r2, [r3]
    714e:	4770      	bx	lr
    7150:	200000e0 	.word	0x200000e0

00007154 <mutex_free>:
    7154:	b510      	push	{r4, lr}
    7156:	4604      	mov	r4, r0
    7158:	b130      	cbz	r0, 7168 <mutex_free+0x14>
    715a:	6863      	ldr	r3, [r4, #4]
    715c:	06db      	lsls	r3, r3, #27
    715e:	d502      	bpl.n	7166 <mutex_free+0x12>
    7160:	2300      	movs	r3, #0
    7162:	6023      	str	r3, [r4, #0]
    7164:	6063      	str	r3, [r4, #4]
    7166:	bd10      	pop	{r4, pc}
    7168:	4b02      	ldr	r3, [pc, #8]	; (7174 <mutex_free+0x20>)
    716a:	4803      	ldr	r0, [pc, #12]	; (7178 <mutex_free+0x24>)
    716c:	685b      	ldr	r3, [r3, #4]
    716e:	4798      	blx	r3
    7170:	e7f3      	b.n	715a <mutex_free+0x6>
    7172:	bf00      	nop
    7174:	200000e0 	.word	0x200000e0
    7178:	00009f40 	.word	0x00009f40

0000717c <mutex_unlock>:
    717c:	b168      	cbz	r0, 719a <mutex_unlock+0x1e>
    717e:	6843      	ldr	r3, [r0, #4]
    7180:	b13b      	cbz	r3, 7192 <mutex_unlock+0x16>
    7182:	06db      	lsls	r3, r3, #27
    7184:	d507      	bpl.n	7196 <mutex_unlock+0x1a>
    7186:	f3bf 8f5f 	dmb	sy
    718a:	2300      	movs	r3, #0
    718c:	6003      	str	r3, [r0, #0]
    718e:	4618      	mov	r0, r3
    7190:	4770      	bx	lr
    7192:	4803      	ldr	r0, [pc, #12]	; (71a0 <mutex_unlock+0x24>)
    7194:	4770      	bx	lr
    7196:	4803      	ldr	r0, [pc, #12]	; (71a4 <mutex_unlock+0x28>)
    7198:	4770      	bx	lr
    719a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    719e:	4770      	bx	lr
    71a0:	ffff8fea 	.word	0xffff8fea
    71a4:	ffff8fe9 	.word	0xffff8fe9

000071a8 <mutex_init>:
    71a8:	b510      	push	{r4, lr}
    71aa:	4604      	mov	r4, r0
    71ac:	b120      	cbz	r0, 71b8 <mutex_init+0x10>
    71ae:	2200      	movs	r2, #0
    71b0:	2311      	movs	r3, #17
    71b2:	6022      	str	r2, [r4, #0]
    71b4:	6063      	str	r3, [r4, #4]
    71b6:	bd10      	pop	{r4, pc}
    71b8:	4801      	ldr	r0, [pc, #4]	; (71c0 <mutex_init+0x18>)
    71ba:	f7ff ffa3 	bl	7104 <CC_PalAbort>
    71be:	e7f6      	b.n	71ae <mutex_init+0x6>
    71c0:	00009f68 	.word	0x00009f68

000071c4 <mutex_lock>:
    71c4:	b1c0      	cbz	r0, 71f8 <mutex_lock+0x34>
    71c6:	6843      	ldr	r3, [r0, #4]
    71c8:	b1a3      	cbz	r3, 71f4 <mutex_lock+0x30>
    71ca:	06db      	lsls	r3, r3, #27
    71cc:	d510      	bpl.n	71f0 <mutex_lock+0x2c>
    71ce:	2201      	movs	r2, #1
    71d0:	f3bf 8f5b 	dmb	ish
    71d4:	e850 3f00 	ldrex	r3, [r0]
    71d8:	e840 2100 	strex	r1, r2, [r0]
    71dc:	2900      	cmp	r1, #0
    71de:	d1f9      	bne.n	71d4 <mutex_lock+0x10>
    71e0:	f3bf 8f5b 	dmb	ish
    71e4:	2b01      	cmp	r3, #1
    71e6:	d0f3      	beq.n	71d0 <mutex_lock+0xc>
    71e8:	f3bf 8f5f 	dmb	sy
    71ec:	2000      	movs	r0, #0
    71ee:	4770      	bx	lr
    71f0:	4803      	ldr	r0, [pc, #12]	; (7200 <mutex_lock+0x3c>)
    71f2:	4770      	bx	lr
    71f4:	4803      	ldr	r0, [pc, #12]	; (7204 <mutex_lock+0x40>)
    71f6:	4770      	bx	lr
    71f8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    71fc:	4770      	bx	lr
    71fe:	bf00      	nop
    7200:	ffff8fe9 	.word	0xffff8fe9
    7204:	ffff8fea 	.word	0xffff8fea

00007208 <nrf_cc3xx_platform_set_mutexes>:
    7208:	b570      	push	{r4, r5, r6, lr}
    720a:	e9d0 2300 	ldrd	r2, r3, [r0]
    720e:	4c13      	ldr	r4, [pc, #76]	; (725c <nrf_cc3xx_platform_set_mutexes+0x54>)
    7210:	4d13      	ldr	r5, [pc, #76]	; (7260 <nrf_cc3xx_platform_set_mutexes+0x58>)
    7212:	e9c4 2300 	strd	r2, r3, [r4]
    7216:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    721a:	e9c4 6302 	strd	r6, r3, [r4, #8]
    721e:	4b11      	ldr	r3, [pc, #68]	; (7264 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    7220:	6808      	ldr	r0, [r1, #0]
    7222:	6018      	str	r0, [r3, #0]
    7224:	6848      	ldr	r0, [r1, #4]
    7226:	6058      	str	r0, [r3, #4]
    7228:	6888      	ldr	r0, [r1, #8]
    722a:	6098      	str	r0, [r3, #8]
    722c:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    7230:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    7234:	60de      	str	r6, [r3, #12]
    7236:	6118      	str	r0, [r3, #16]
    7238:	06cb      	lsls	r3, r1, #27
    723a:	d50d      	bpl.n	7258 <nrf_cc3xx_platform_set_mutexes+0x50>
    723c:	2300      	movs	r3, #0
    723e:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    7242:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    7246:	f505 7088 	add.w	r0, r5, #272	; 0x110
    724a:	4790      	blx	r2
    724c:	6823      	ldr	r3, [r4, #0]
    724e:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    7252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7256:	4718      	bx	r3
    7258:	bd70      	pop	{r4, r5, r6, pc}
    725a:	bf00      	nop
    725c:	200000f0 	.word	0x200000f0
    7260:	20000fe8 	.word	0x20000fe8
    7264:	20000100 	.word	0x20000100

00007268 <CC_LibInitNoRng>:
    7268:	b510      	push	{r4, lr}
    726a:	f000 f833 	bl	72d4 <CC_HalInit>
    726e:	b120      	cbz	r0, 727a <CC_LibInitNoRng+0x12>
    7270:	2403      	movs	r4, #3
    7272:	f000 f867 	bl	7344 <CC_PalTerminate>
    7276:	4620      	mov	r0, r4
    7278:	bd10      	pop	{r4, pc}
    727a:	f000 f835 	bl	72e8 <CC_PalInit>
    727e:	b990      	cbnz	r0, 72a6 <CC_LibInitNoRng+0x3e>
    7280:	f000 f8b0 	bl	73e4 <CC_PalPowerSaveModeSelect>
    7284:	b990      	cbnz	r0, 72ac <CC_LibInitNoRng+0x44>
    7286:	4b0f      	ldr	r3, [pc, #60]	; (72c4 <CC_LibInitNoRng+0x5c>)
    7288:	681b      	ldr	r3, [r3, #0]
    728a:	0e1b      	lsrs	r3, r3, #24
    728c:	2bf0      	cmp	r3, #240	; 0xf0
    728e:	d108      	bne.n	72a2 <CC_LibInitNoRng+0x3a>
    7290:	4a0d      	ldr	r2, [pc, #52]	; (72c8 <CC_LibInitNoRng+0x60>)
    7292:	4b0e      	ldr	r3, [pc, #56]	; (72cc <CC_LibInitNoRng+0x64>)
    7294:	6812      	ldr	r2, [r2, #0]
    7296:	429a      	cmp	r2, r3
    7298:	d00a      	beq.n	72b0 <CC_LibInitNoRng+0x48>
    729a:	2407      	movs	r4, #7
    729c:	f000 f81c 	bl	72d8 <CC_HalTerminate>
    72a0:	e7e7      	b.n	7272 <CC_LibInitNoRng+0xa>
    72a2:	2406      	movs	r4, #6
    72a4:	e7fa      	b.n	729c <CC_LibInitNoRng+0x34>
    72a6:	2404      	movs	r4, #4
    72a8:	4620      	mov	r0, r4
    72aa:	bd10      	pop	{r4, pc}
    72ac:	2400      	movs	r4, #0
    72ae:	e7f5      	b.n	729c <CC_LibInitNoRng+0x34>
    72b0:	2001      	movs	r0, #1
    72b2:	f000 f897 	bl	73e4 <CC_PalPowerSaveModeSelect>
    72b6:	4604      	mov	r4, r0
    72b8:	2800      	cmp	r0, #0
    72ba:	d1f7      	bne.n	72ac <CC_LibInitNoRng+0x44>
    72bc:	4b04      	ldr	r3, [pc, #16]	; (72d0 <CC_LibInitNoRng+0x68>)
    72be:	6018      	str	r0, [r3, #0]
    72c0:	e7d9      	b.n	7276 <CC_LibInitNoRng+0xe>
    72c2:	bf00      	nop
    72c4:	5002b928 	.word	0x5002b928
    72c8:	5002ba24 	.word	0x5002ba24
    72cc:	20e00000 	.word	0x20e00000
    72d0:	5002ba0c 	.word	0x5002ba0c

000072d4 <CC_HalInit>:
    72d4:	2000      	movs	r0, #0
    72d6:	4770      	bx	lr

000072d8 <CC_HalTerminate>:
    72d8:	2000      	movs	r0, #0
    72da:	4770      	bx	lr

000072dc <CC_HalMaskInterrupt>:
    72dc:	4b01      	ldr	r3, [pc, #4]	; (72e4 <CC_HalMaskInterrupt+0x8>)
    72de:	6018      	str	r0, [r3, #0]
    72e0:	4770      	bx	lr
    72e2:	bf00      	nop
    72e4:	5002ba04 	.word	0x5002ba04

000072e8 <CC_PalInit>:
    72e8:	b510      	push	{r4, lr}
    72ea:	4811      	ldr	r0, [pc, #68]	; (7330 <CC_PalInit+0x48>)
    72ec:	f000 f848 	bl	7380 <CC_PalMutexCreate>
    72f0:	b100      	cbz	r0, 72f4 <CC_PalInit+0xc>
    72f2:	bd10      	pop	{r4, pc}
    72f4:	480f      	ldr	r0, [pc, #60]	; (7334 <CC_PalInit+0x4c>)
    72f6:	f000 f843 	bl	7380 <CC_PalMutexCreate>
    72fa:	2800      	cmp	r0, #0
    72fc:	d1f9      	bne.n	72f2 <CC_PalInit+0xa>
    72fe:	4c0e      	ldr	r4, [pc, #56]	; (7338 <CC_PalInit+0x50>)
    7300:	4620      	mov	r0, r4
    7302:	f000 f83d 	bl	7380 <CC_PalMutexCreate>
    7306:	2800      	cmp	r0, #0
    7308:	d1f3      	bne.n	72f2 <CC_PalInit+0xa>
    730a:	4b0c      	ldr	r3, [pc, #48]	; (733c <CC_PalInit+0x54>)
    730c:	480c      	ldr	r0, [pc, #48]	; (7340 <CC_PalInit+0x58>)
    730e:	601c      	str	r4, [r3, #0]
    7310:	f000 f836 	bl	7380 <CC_PalMutexCreate>
    7314:	4601      	mov	r1, r0
    7316:	2800      	cmp	r0, #0
    7318:	d1eb      	bne.n	72f2 <CC_PalInit+0xa>
    731a:	f000 f82d 	bl	7378 <CC_PalDmaInit>
    731e:	4604      	mov	r4, r0
    7320:	b108      	cbz	r0, 7326 <CC_PalInit+0x3e>
    7322:	4620      	mov	r0, r4
    7324:	bd10      	pop	{r4, pc}
    7326:	f000 f83f 	bl	73a8 <CC_PalPowerSaveModeInit>
    732a:	4620      	mov	r0, r4
    732c:	e7fa      	b.n	7324 <CC_PalInit+0x3c>
    732e:	bf00      	nop
    7330:	20000138 	.word	0x20000138
    7334:	2000012c 	.word	0x2000012c
    7338:	20000134 	.word	0x20000134
    733c:	2000013c 	.word	0x2000013c
    7340:	20000130 	.word	0x20000130

00007344 <CC_PalTerminate>:
    7344:	b508      	push	{r3, lr}
    7346:	4808      	ldr	r0, [pc, #32]	; (7368 <CC_PalTerminate+0x24>)
    7348:	f000 f824 	bl	7394 <CC_PalMutexDestroy>
    734c:	4807      	ldr	r0, [pc, #28]	; (736c <CC_PalTerminate+0x28>)
    734e:	f000 f821 	bl	7394 <CC_PalMutexDestroy>
    7352:	4807      	ldr	r0, [pc, #28]	; (7370 <CC_PalTerminate+0x2c>)
    7354:	f000 f81e 	bl	7394 <CC_PalMutexDestroy>
    7358:	4806      	ldr	r0, [pc, #24]	; (7374 <CC_PalTerminate+0x30>)
    735a:	f000 f81b 	bl	7394 <CC_PalMutexDestroy>
    735e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7362:	f000 b80b 	b.w	737c <CC_PalDmaTerminate>
    7366:	bf00      	nop
    7368:	20000138 	.word	0x20000138
    736c:	2000012c 	.word	0x2000012c
    7370:	20000134 	.word	0x20000134
    7374:	20000130 	.word	0x20000130

00007378 <CC_PalDmaInit>:
    7378:	2000      	movs	r0, #0
    737a:	4770      	bx	lr

0000737c <CC_PalDmaTerminate>:
    737c:	4770      	bx	lr
    737e:	bf00      	nop

00007380 <CC_PalMutexCreate>:
    7380:	b508      	push	{r3, lr}
    7382:	4b03      	ldr	r3, [pc, #12]	; (7390 <CC_PalMutexCreate+0x10>)
    7384:	6802      	ldr	r2, [r0, #0]
    7386:	681b      	ldr	r3, [r3, #0]
    7388:	6810      	ldr	r0, [r2, #0]
    738a:	4798      	blx	r3
    738c:	2000      	movs	r0, #0
    738e:	bd08      	pop	{r3, pc}
    7390:	200000f0 	.word	0x200000f0

00007394 <CC_PalMutexDestroy>:
    7394:	b508      	push	{r3, lr}
    7396:	4b03      	ldr	r3, [pc, #12]	; (73a4 <CC_PalMutexDestroy+0x10>)
    7398:	6802      	ldr	r2, [r0, #0]
    739a:	685b      	ldr	r3, [r3, #4]
    739c:	6810      	ldr	r0, [r2, #0]
    739e:	4798      	blx	r3
    73a0:	2000      	movs	r0, #0
    73a2:	bd08      	pop	{r3, pc}
    73a4:	200000f0 	.word	0x200000f0

000073a8 <CC_PalPowerSaveModeInit>:
    73a8:	b570      	push	{r4, r5, r6, lr}
    73aa:	4c09      	ldr	r4, [pc, #36]	; (73d0 <CC_PalPowerSaveModeInit+0x28>)
    73ac:	4d09      	ldr	r5, [pc, #36]	; (73d4 <CC_PalPowerSaveModeInit+0x2c>)
    73ae:	6920      	ldr	r0, [r4, #16]
    73b0:	68ab      	ldr	r3, [r5, #8]
    73b2:	4798      	blx	r3
    73b4:	b118      	cbz	r0, 73be <CC_PalPowerSaveModeInit+0x16>
    73b6:	4b08      	ldr	r3, [pc, #32]	; (73d8 <CC_PalPowerSaveModeInit+0x30>)
    73b8:	4808      	ldr	r0, [pc, #32]	; (73dc <CC_PalPowerSaveModeInit+0x34>)
    73ba:	685b      	ldr	r3, [r3, #4]
    73bc:	4798      	blx	r3
    73be:	4a08      	ldr	r2, [pc, #32]	; (73e0 <CC_PalPowerSaveModeInit+0x38>)
    73c0:	68eb      	ldr	r3, [r5, #12]
    73c2:	6920      	ldr	r0, [r4, #16]
    73c4:	2100      	movs	r1, #0
    73c6:	6011      	str	r1, [r2, #0]
    73c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    73cc:	4718      	bx	r3
    73ce:	bf00      	nop
    73d0:	20000100 	.word	0x20000100
    73d4:	200000f0 	.word	0x200000f0
    73d8:	200000e0 	.word	0x200000e0
    73dc:	00009f8c 	.word	0x00009f8c
    73e0:	20000fdc 	.word	0x20000fdc

000073e4 <CC_PalPowerSaveModeSelect>:
    73e4:	b570      	push	{r4, r5, r6, lr}
    73e6:	4d1a      	ldr	r5, [pc, #104]	; (7450 <CC_PalPowerSaveModeSelect+0x6c>)
    73e8:	4e1a      	ldr	r6, [pc, #104]	; (7454 <CC_PalPowerSaveModeSelect+0x70>)
    73ea:	4604      	mov	r4, r0
    73ec:	68b2      	ldr	r2, [r6, #8]
    73ee:	6928      	ldr	r0, [r5, #16]
    73f0:	4790      	blx	r2
    73f2:	b9f0      	cbnz	r0, 7432 <CC_PalPowerSaveModeSelect+0x4e>
    73f4:	b15c      	cbz	r4, 740e <CC_PalPowerSaveModeSelect+0x2a>
    73f6:	4c18      	ldr	r4, [pc, #96]	; (7458 <CC_PalPowerSaveModeSelect+0x74>)
    73f8:	6823      	ldr	r3, [r4, #0]
    73fa:	b1ab      	cbz	r3, 7428 <CC_PalPowerSaveModeSelect+0x44>
    73fc:	2b01      	cmp	r3, #1
    73fe:	d01a      	beq.n	7436 <CC_PalPowerSaveModeSelect+0x52>
    7400:	3b01      	subs	r3, #1
    7402:	6023      	str	r3, [r4, #0]
    7404:	6928      	ldr	r0, [r5, #16]
    7406:	68f3      	ldr	r3, [r6, #12]
    7408:	4798      	blx	r3
    740a:	2000      	movs	r0, #0
    740c:	bd70      	pop	{r4, r5, r6, pc}
    740e:	4c12      	ldr	r4, [pc, #72]	; (7458 <CC_PalPowerSaveModeSelect+0x74>)
    7410:	6821      	ldr	r1, [r4, #0]
    7412:	b939      	cbnz	r1, 7424 <CC_PalPowerSaveModeSelect+0x40>
    7414:	4b11      	ldr	r3, [pc, #68]	; (745c <CC_PalPowerSaveModeSelect+0x78>)
    7416:	4a12      	ldr	r2, [pc, #72]	; (7460 <CC_PalPowerSaveModeSelect+0x7c>)
    7418:	2001      	movs	r0, #1
    741a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    741e:	6813      	ldr	r3, [r2, #0]
    7420:	2b00      	cmp	r3, #0
    7422:	d1fc      	bne.n	741e <CC_PalPowerSaveModeSelect+0x3a>
    7424:	3101      	adds	r1, #1
    7426:	6021      	str	r1, [r4, #0]
    7428:	68f3      	ldr	r3, [r6, #12]
    742a:	6928      	ldr	r0, [r5, #16]
    742c:	4798      	blx	r3
    742e:	2000      	movs	r0, #0
    7430:	bd70      	pop	{r4, r5, r6, pc}
    7432:	480c      	ldr	r0, [pc, #48]	; (7464 <CC_PalPowerSaveModeSelect+0x80>)
    7434:	bd70      	pop	{r4, r5, r6, pc}
    7436:	4a0a      	ldr	r2, [pc, #40]	; (7460 <CC_PalPowerSaveModeSelect+0x7c>)
    7438:	6813      	ldr	r3, [r2, #0]
    743a:	2b00      	cmp	r3, #0
    743c:	d1fc      	bne.n	7438 <CC_PalPowerSaveModeSelect+0x54>
    743e:	4a07      	ldr	r2, [pc, #28]	; (745c <CC_PalPowerSaveModeSelect+0x78>)
    7440:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    7444:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    7448:	f7ff ff48 	bl	72dc <CC_HalMaskInterrupt>
    744c:	6823      	ldr	r3, [r4, #0]
    744e:	e7d7      	b.n	7400 <CC_PalPowerSaveModeSelect+0x1c>
    7450:	20000100 	.word	0x20000100
    7454:	200000f0 	.word	0x200000f0
    7458:	20000fdc 	.word	0x20000fdc
    745c:	5002a000 	.word	0x5002a000
    7460:	5002b910 	.word	0x5002b910
    7464:	ffff8fe9 	.word	0xffff8fe9

00007468 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    7468:	4602      	mov	r2, r0
    746a:	b158      	cbz	r0, 7484 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    746c:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    746e:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    7472:	2b01      	cmp	r3, #1
    7474:	d003      	beq.n	747e <sys_notify_validate+0x16>
    7476:	2b03      	cmp	r3, #3
    7478:	d107      	bne.n	748a <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    747a:	6803      	ldr	r3, [r0, #0]
    747c:	b143      	cbz	r3, 7490 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    747e:	2000      	movs	r0, #0
    7480:	6090      	str	r0, [r2, #8]
    7482:	4770      	bx	lr
		return -EINVAL;
    7484:	f06f 0015 	mvn.w	r0, #21
    7488:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    748a:	f06f 0015 	mvn.w	r0, #21
    748e:	4770      	bx	lr
			rv = -EINVAL;
    7490:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    7494:	4770      	bx	lr

00007496 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    7496:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7498:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    749a:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    749e:	6081      	str	r1, [r0, #8]
	switch (method) {
    74a0:	2a03      	cmp	r2, #3
    74a2:	d103      	bne.n	74ac <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    74a4:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    74a6:	2200      	movs	r2, #0
    74a8:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    74aa:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    74ac:	2000      	movs	r0, #0
    74ae:	e7fa      	b.n	74a6 <sys_notify_finalize+0x10>

000074b0 <arch_printk_char_out>:
}
    74b0:	2000      	movs	r0, #0
    74b2:	4770      	bx	lr

000074b4 <str_out>:
{
    74b4:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    74b6:	680c      	ldr	r4, [r1, #0]
    74b8:	b154      	cbz	r4, 74d0 <str_out+0x1c>
    74ba:	688a      	ldr	r2, [r1, #8]
    74bc:	684b      	ldr	r3, [r1, #4]
    74be:	429a      	cmp	r2, r3
    74c0:	da06      	bge.n	74d0 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    74c2:	3b01      	subs	r3, #1
    74c4:	429a      	cmp	r2, r3
    74c6:	d008      	beq.n	74da <str_out+0x26>
		ctx->str[ctx->count++] = c;
    74c8:	1c53      	adds	r3, r2, #1
    74ca:	608b      	str	r3, [r1, #8]
    74cc:	54a0      	strb	r0, [r4, r2]
    74ce:	e002      	b.n	74d6 <str_out+0x22>
		ctx->count++;
    74d0:	688b      	ldr	r3, [r1, #8]
    74d2:	3301      	adds	r3, #1
    74d4:	608b      	str	r3, [r1, #8]
}
    74d6:	bc10      	pop	{r4}
    74d8:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    74da:	1c53      	adds	r3, r2, #1
    74dc:	608b      	str	r3, [r1, #8]
    74de:	2300      	movs	r3, #0
    74e0:	54a3      	strb	r3, [r4, r2]
    74e2:	e7f8      	b.n	74d6 <str_out+0x22>

000074e4 <printk>:
{
    74e4:	b40f      	push	{r0, r1, r2, r3}
    74e6:	b500      	push	{lr}
    74e8:	b083      	sub	sp, #12
    74ea:	a904      	add	r1, sp, #16
    74ec:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    74f0:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    74f2:	f7f9 f9ab 	bl	84c <vprintk>
}
    74f6:	b003      	add	sp, #12
    74f8:	f85d eb04 	ldr.w	lr, [sp], #4
    74fc:	b004      	add	sp, #16
    74fe:	4770      	bx	lr

00007500 <snprintk>:
{
    7500:	b40c      	push	{r2, r3}
    7502:	b500      	push	{lr}
    7504:	b083      	sub	sp, #12
    7506:	ab04      	add	r3, sp, #16
    7508:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    750c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    750e:	f7f9 f9ad 	bl	86c <vsnprintk>
}
    7512:	b003      	add	sp, #12
    7514:	f85d eb04 	ldr.w	lr, [sp], #4
    7518:	b002      	add	sp, #8
    751a:	4770      	bx	lr

0000751c <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    751c:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    7520:	8b01      	ldrh	r1, [r0, #24]
    7522:	f021 0107 	bic.w	r1, r1, #7
    7526:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    7528:	8301      	strh	r1, [r0, #24]
}
    752a:	4770      	bx	lr

0000752c <notify_monitors>:
{
    752c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7530:	4606      	mov	r6, r0
    7532:	460f      	mov	r7, r1
    7534:	4690      	mov	r8, r2
	return list->head;
    7536:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    7538:	b119      	cbz	r1, 7542 <notify_monitors+0x16>
    753a:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    753c:	b131      	cbz	r1, 754c <notify_monitors+0x20>
	return node->next;
    753e:	680c      	ldr	r4, [r1, #0]
    7540:	e004      	b.n	754c <notify_monitors+0x20>
    7542:	460c      	mov	r4, r1
    7544:	e002      	b.n	754c <notify_monitors+0x20>
    7546:	4623      	mov	r3, r4
    7548:	4621      	mov	r1, r4
    754a:	461c      	mov	r4, r3
    754c:	b159      	cbz	r1, 7566 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    754e:	684d      	ldr	r5, [r1, #4]
    7550:	4643      	mov	r3, r8
    7552:	463a      	mov	r2, r7
    7554:	4630      	mov	r0, r6
    7556:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    7558:	2c00      	cmp	r4, #0
    755a:	d0f4      	beq.n	7546 <notify_monitors+0x1a>
    755c:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    755e:	2c00      	cmp	r4, #0
    7560:	d0f2      	beq.n	7548 <notify_monitors+0x1c>
	return node->next;
    7562:	6823      	ldr	r3, [r4, #0]
    7564:	e7f0      	b.n	7548 <notify_monitors+0x1c>
}
    7566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000756a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    756a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    756c:	f013 0307 	ands.w	r3, r3, #7
    7570:	d103      	bne.n	757a <process_recheck+0x10>
	return list->head;
    7572:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    7574:	b10a      	cbz	r2, 757a <process_recheck+0x10>
		evt = EVT_START;
    7576:	2003      	movs	r0, #3
    7578:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    757a:	2b02      	cmp	r3, #2
    757c:	d003      	beq.n	7586 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    757e:	2b01      	cmp	r3, #1
    7580:	d006      	beq.n	7590 <process_recheck+0x26>
	int evt = EVT_NOP;
    7582:	2000      	movs	r0, #0
    7584:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    7586:	8b42      	ldrh	r2, [r0, #26]
    7588:	2a00      	cmp	r2, #0
    758a:	d1f8      	bne.n	757e <process_recheck+0x14>
		evt = EVT_STOP;
    758c:	2004      	movs	r0, #4
    758e:	4770      	bx	lr
    7590:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    7592:	b10b      	cbz	r3, 7598 <process_recheck+0x2e>
		evt = EVT_RESET;
    7594:	2005      	movs	r0, #5
}
    7596:	4770      	bx	lr
	int evt = EVT_NOP;
    7598:	2000      	movs	r0, #0
    759a:	4770      	bx	lr

0000759c <process_complete>:
{
    759c:	b538      	push	{r3, r4, r5, lr}
    759e:	4604      	mov	r4, r0
    75a0:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    75a2:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    75a4:	2a00      	cmp	r2, #0
    75a6:	db07      	blt.n	75b8 <process_complete+0x1c>
    75a8:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    75ac:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    75ae:	2a01      	cmp	r2, #1
    75b0:	d90e      	bls.n	75d0 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    75b2:	2b04      	cmp	r3, #4
    75b4:	d032      	beq.n	761c <process_complete+0x80>
}
    75b6:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    75b8:	e9d0 0100 	ldrd	r0, r1, [r0]
    75bc:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    75c0:	2300      	movs	r3, #0
    75c2:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    75c4:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    75c6:	2101      	movs	r1, #1
    75c8:	4620      	mov	r0, r4
    75ca:	f7ff ffa7 	bl	751c <set_state>
    75ce:	e7f2      	b.n	75b6 <process_complete+0x1a>
		*clients = mgr->clients;
    75d0:	e9d0 0100 	ldrd	r0, r1, [r0]
    75d4:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    75d8:	2200      	movs	r2, #0
    75da:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    75dc:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    75de:	2b06      	cmp	r3, #6
    75e0:	d117      	bne.n	7612 <process_complete+0x76>
	return list->head;
    75e2:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    75e4:	b13b      	cbz	r3, 75f6 <process_complete+0x5a>
				mgr->refs += 1U;
    75e6:	8b62      	ldrh	r2, [r4, #26]
    75e8:	3201      	adds	r2, #1
    75ea:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    75ec:	2b00      	cmp	r3, #0
    75ee:	d0f9      	beq.n	75e4 <process_complete+0x48>
	return node->next;
    75f0:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    75f2:	2b00      	cmp	r3, #0
    75f4:	d1f6      	bne.n	75e4 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
    75f6:	2102      	movs	r1, #2
    75f8:	4620      	mov	r0, r4
    75fa:	f7ff ff8f 	bl	751c <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    75fe:	4620      	mov	r0, r4
    7600:	f7ff ffb3 	bl	756a <process_recheck>
    7604:	2800      	cmp	r0, #0
    7606:	d0d6      	beq.n	75b6 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    7608:	8b23      	ldrh	r3, [r4, #24]
    760a:	f043 0320 	orr.w	r3, r3, #32
    760e:	8323      	strh	r3, [r4, #24]
    7610:	e7d1      	b.n	75b6 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    7612:	2100      	movs	r1, #0
    7614:	4620      	mov	r0, r4
    7616:	f7ff ff81 	bl	751c <set_state>
    761a:	e7f0      	b.n	75fe <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
    761c:	2100      	movs	r1, #0
    761e:	f7ff ff7d 	bl	751c <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    7622:	4620      	mov	r0, r4
    7624:	f7ff ffa1 	bl	756a <process_recheck>
    7628:	2800      	cmp	r0, #0
    762a:	d0c4      	beq.n	75b6 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    762c:	8b23      	ldrh	r3, [r4, #24]
    762e:	f043 0320 	orr.w	r3, r3, #32
    7632:	8323      	strh	r3, [r4, #24]
}
    7634:	e7bf      	b.n	75b6 <process_complete+0x1a>

00007636 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    7636:	b158      	cbz	r0, 7650 <validate_args+0x1a>
{
    7638:	b510      	push	{r4, lr}
    763a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    763c:	b159      	cbz	r1, 7656 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    763e:	1d08      	adds	r0, r1, #4
    7640:	f7ff ff12 	bl	7468 <sys_notify_validate>
	if ((rv == 0)
    7644:	b918      	cbnz	r0, 764e <validate_args+0x18>
	    && ((cli->notify.flags
    7646:	68a3      	ldr	r3, [r4, #8]
    7648:	f033 0303 	bics.w	r3, r3, #3
    764c:	d106      	bne.n	765c <validate_args+0x26>
}
    764e:	bd10      	pop	{r4, pc}
		return -EINVAL;
    7650:	f06f 0015 	mvn.w	r0, #21
}
    7654:	4770      	bx	lr
		return -EINVAL;
    7656:	f06f 0015 	mvn.w	r0, #21
    765a:	e7f8      	b.n	764e <validate_args+0x18>
		rv = -EINVAL;
    765c:	f06f 0015 	mvn.w	r0, #21
    7660:	e7f5      	b.n	764e <validate_args+0x18>

00007662 <notify_one>:
{
    7662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7666:	4607      	mov	r7, r0
    7668:	460c      	mov	r4, r1
    766a:	4616      	mov	r6, r2
    766c:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    766e:	4619      	mov	r1, r3
    7670:	1d20      	adds	r0, r4, #4
    7672:	f7ff ff10 	bl	7496 <sys_notify_finalize>
	if (cb) {
    7676:	b128      	cbz	r0, 7684 <notify_one+0x22>
    7678:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    767a:	462b      	mov	r3, r5
    767c:	4632      	mov	r2, r6
    767e:	4621      	mov	r1, r4
    7680:	4638      	mov	r0, r7
    7682:	47c0      	blx	r8
}
    7684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007688 <notify_all>:
{
    7688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    768c:	4681      	mov	r9, r0
    768e:	460c      	mov	r4, r1
    7690:	4690      	mov	r8, r2
    7692:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    7694:	e005      	b.n	76a2 <notify_all+0x1a>
	list->tail = node;
    7696:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    7698:	463b      	mov	r3, r7
    769a:	4642      	mov	r2, r8
    769c:	4648      	mov	r0, r9
    769e:	f7ff ffe0 	bl	7662 <notify_one>
	return list->head;
    76a2:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    76a4:	b129      	cbz	r1, 76b2 <notify_all+0x2a>
	return node->next;
    76a6:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    76a8:	6025      	str	r5, [r4, #0]
	return list->tail;
    76aa:	6866      	ldr	r6, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    76ac:	428e      	cmp	r6, r1
    76ae:	d1f3      	bne.n	7698 <notify_all+0x10>
    76b0:	e7f1      	b.n	7696 <notify_all+0xe>
}
    76b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000076b6 <transition_complete>:
{
    76b6:	b510      	push	{r4, lr}
	__asm__ volatile(
    76b8:	f04f 0420 	mov.w	r4, #32
    76bc:	f3ef 8211 	mrs	r2, BASEPRI
    76c0:	f384 8812 	msr	BASEPRI_MAX, r4
    76c4:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    76c8:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    76ca:	2101      	movs	r1, #1
    76cc:	f7f9 f8e4 	bl	898 <process_event>
}
    76d0:	bd10      	pop	{r4, pc}

000076d2 <onoff_manager_init>:
	if ((mgr == NULL)
    76d2:	4603      	mov	r3, r0
    76d4:	b168      	cbz	r0, 76f2 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    76d6:	b179      	cbz	r1, 76f8 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    76d8:	680a      	ldr	r2, [r1, #0]
    76da:	b182      	cbz	r2, 76fe <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    76dc:	684a      	ldr	r2, [r1, #4]
    76de:	b18a      	cbz	r2, 7704 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    76e0:	2000      	movs	r0, #0
    76e2:	6018      	str	r0, [r3, #0]
    76e4:	6058      	str	r0, [r3, #4]
    76e6:	6098      	str	r0, [r3, #8]
    76e8:	60d8      	str	r0, [r3, #12]
    76ea:	6158      	str	r0, [r3, #20]
    76ec:	6198      	str	r0, [r3, #24]
    76ee:	6119      	str	r1, [r3, #16]
	return 0;
    76f0:	4770      	bx	lr
		return -EINVAL;
    76f2:	f06f 0015 	mvn.w	r0, #21
    76f6:	4770      	bx	lr
    76f8:	f06f 0015 	mvn.w	r0, #21
    76fc:	4770      	bx	lr
    76fe:	f06f 0015 	mvn.w	r0, #21
    7702:	4770      	bx	lr
    7704:	f06f 0015 	mvn.w	r0, #21
}
    7708:	4770      	bx	lr

0000770a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    770a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    770c:	4604      	mov	r4, r0
    770e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    7710:	f7ff ff91 	bl	7636 <validate_args>

	if (rv < 0) {
    7714:	1e06      	subs	r6, r0, #0
    7716:	db37      	blt.n	7788 <onoff_request+0x7e>
    7718:	f04f 0320 	mov.w	r3, #32
    771c:	f3ef 8211 	mrs	r2, BASEPRI
    7720:	f383 8812 	msr	BASEPRI_MAX, r3
    7724:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7728:	8b25      	ldrh	r5, [r4, #24]
    772a:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    772e:	8b63      	ldrh	r3, [r4, #26]
    7730:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7734:	428b      	cmp	r3, r1
    7736:	d02f      	beq.n	7798 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    7738:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    773a:	2d02      	cmp	r5, #2
    773c:	d00c      	beq.n	7758 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    773e:	b18d      	cbz	r5, 7764 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    7740:	2d04      	cmp	r5, #4
    7742:	d00f      	beq.n	7764 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    7744:	2d06      	cmp	r5, #6
    7746:	d00d      	beq.n	7764 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    7748:	2d05      	cmp	r5, #5
    774a:	d01f      	beq.n	778c <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    774c:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    7750:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    7752:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    7754:	4608      	mov	r0, r1
    7756:	e00a      	b.n	776e <onoff_request+0x64>
		mgr->refs += 1U;
    7758:	3301      	adds	r3, #1
    775a:	8363      	strh	r3, [r4, #26]
		notify = true;
    775c:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    775e:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    7760:	4618      	mov	r0, r3
    7762:	e004      	b.n	776e <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    7764:	fab5 f385 	clz	r3, r5
    7768:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    776a:	2100      	movs	r1, #0
		add_client = true;
    776c:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    776e:	b128      	cbz	r0, 777c <onoff_request+0x72>
	parent->next = child;
    7770:	2000      	movs	r0, #0
    7772:	6038      	str	r0, [r7, #0]
	return list->tail;
    7774:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    7776:	b1a8      	cbz	r0, 77a4 <onoff_request+0x9a>
	parent->next = child;
    7778:	6007      	str	r7, [r0, #0]
	list->tail = node;
    777a:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    777c:	b9ab      	cbnz	r3, 77aa <onoff_request+0xa0>
	__asm__ volatile(
    777e:	f382 8811 	msr	BASEPRI, r2
    7782:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    7786:	b9a9      	cbnz	r1, 77b4 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    7788:	4630      	mov	r0, r6
    778a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    778c:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    7790:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    7792:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    7794:	4608      	mov	r0, r1
    7796:	e7ea      	b.n	776e <onoff_request+0x64>
		rv = -EAGAIN;
    7798:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    779c:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    779e:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    77a0:	4608      	mov	r0, r1
    77a2:	e7e4      	b.n	776e <onoff_request+0x64>
    77a4:	6067      	str	r7, [r4, #4]
	list->head = node;
    77a6:	6027      	str	r7, [r4, #0]
}
    77a8:	e7e8      	b.n	777c <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    77aa:	2102      	movs	r1, #2
    77ac:	4620      	mov	r0, r4
    77ae:	f7f9 f873 	bl	898 <process_event>
    77b2:	e7e9      	b.n	7788 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    77b4:	2300      	movs	r3, #0
    77b6:	462a      	mov	r2, r5
    77b8:	4639      	mov	r1, r7
    77ba:	4620      	mov	r0, r4
    77bc:	f7ff ff51 	bl	7662 <notify_one>
    77c0:	e7e2      	b.n	7788 <onoff_request+0x7e>

000077c2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    77c2:	b508      	push	{r3, lr}
    77c4:	4604      	mov	r4, r0
    77c6:	4608      	mov	r0, r1
    77c8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    77ca:	461a      	mov	r2, r3
    77cc:	47a0      	blx	r4
	return z_impl_z_current_get();
    77ce:	f7ff f9e7 	bl	6ba0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    77d2:	f7fb fd33 	bl	323c <z_impl_k_thread_abort>

000077d6 <extract_decimal>:
{
    77d6:	b410      	push	{r4}
    77d8:	4604      	mov	r4, r0
	const char *sp = *str;
    77da:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    77dc:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    77de:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    77e0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    77e4:	2909      	cmp	r1, #9
    77e6:	d806      	bhi.n	77f6 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
    77e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    77ec:	3201      	adds	r2, #1
    77ee:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    77f2:	3830      	subs	r0, #48	; 0x30
    77f4:	e7f3      	b.n	77de <extract_decimal+0x8>
	*str = sp;
    77f6:	6022      	str	r2, [r4, #0]
}
    77f8:	bc10      	pop	{r4}
    77fa:	4770      	bx	lr

000077fc <encode_uint>:
{
    77fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7800:	b083      	sub	sp, #12
    7802:	4604      	mov	r4, r0
    7804:	460d      	mov	r5, r1
    7806:	9201      	str	r2, [sp, #4]
    7808:	469a      	mov	sl, r3
    780a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    780e:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    7810:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    7814:	2b6f      	cmp	r3, #111	; 0x6f
    7816:	d00f      	beq.n	7838 <encode_uint+0x3c>
    7818:	d906      	bls.n	7828 <encode_uint+0x2c>
    781a:	2b70      	cmp	r3, #112	; 0x70
    781c:	d00f      	beq.n	783e <encode_uint+0x42>
    781e:	2b78      	cmp	r3, #120	; 0x78
    7820:	d110      	bne.n	7844 <encode_uint+0x48>
		return 16;
    7822:	f04f 0910 	mov.w	r9, #16
    7826:	e026      	b.n	7876 <encode_uint+0x7a>
	switch (specifier) {
    7828:	2b58      	cmp	r3, #88	; 0x58
    782a:	d002      	beq.n	7832 <encode_uint+0x36>
    782c:	f04f 090a 	mov.w	r9, #10
    7830:	e021      	b.n	7876 <encode_uint+0x7a>
		return 16;
    7832:	f04f 0910 	mov.w	r9, #16
    7836:	e01e      	b.n	7876 <encode_uint+0x7a>
		return 8;
    7838:	f04f 0908 	mov.w	r9, #8
    783c:	e01b      	b.n	7876 <encode_uint+0x7a>
		return 16;
    783e:	f04f 0910 	mov.w	r9, #16
    7842:	e018      	b.n	7876 <encode_uint+0x7a>
	switch (specifier) {
    7844:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    7848:	e015      	b.n	7876 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    784a:	f1bb 0f19 	cmp.w	fp, #25
    784e:	d820      	bhi.n	7892 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    7850:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7852:	3237      	adds	r2, #55	; 0x37
    7854:	b2d2      	uxtb	r2, r2
    7856:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
    785a:	4632      	mov	r2, r6
    785c:	463b      	mov	r3, r7
    785e:	4620      	mov	r0, r4
    7860:	4629      	mov	r1, r5
    7862:	f7f8 fc4d 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    7866:	42bd      	cmp	r5, r7
    7868:	bf08      	it	eq
    786a:	42b4      	cmpeq	r4, r6
    786c:	d315      	bcc.n	789a <encode_uint+0x9e>
    786e:	45d0      	cmp	r8, sl
    7870:	d913      	bls.n	789a <encode_uint+0x9e>
		value /= radix;
    7872:	4604      	mov	r4, r0
    7874:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    7876:	464e      	mov	r6, r9
    7878:	2700      	movs	r7, #0
    787a:	464a      	mov	r2, r9
    787c:	463b      	mov	r3, r7
    787e:	4620      	mov	r0, r4
    7880:	4629      	mov	r1, r5
    7882:	f7f8 fc3d 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7886:	2a09      	cmp	r2, #9
    7888:	d8df      	bhi.n	784a <encode_uint+0x4e>
    788a:	b2d2      	uxtb	r2, r2
    788c:	3230      	adds	r2, #48	; 0x30
    788e:	b2d2      	uxtb	r2, r2
    7890:	e7e1      	b.n	7856 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    7892:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7894:	3257      	adds	r2, #87	; 0x57
    7896:	b2d2      	uxtb	r2, r2
    7898:	e7dd      	b.n	7856 <encode_uint+0x5a>
	if (conv->flag_hash) {
    789a:	9b01      	ldr	r3, [sp, #4]
    789c:	781b      	ldrb	r3, [r3, #0]
    789e:	f013 0f20 	tst.w	r3, #32
    78a2:	d005      	beq.n	78b0 <encode_uint+0xb4>
		if (radix == 8) {
    78a4:	f1b9 0f08 	cmp.w	r9, #8
    78a8:	d006      	beq.n	78b8 <encode_uint+0xbc>
		} else if (radix == 16) {
    78aa:	f1b9 0f10 	cmp.w	r9, #16
    78ae:	d009      	beq.n	78c4 <encode_uint+0xc8>
}
    78b0:	4640      	mov	r0, r8
    78b2:	b003      	add	sp, #12
    78b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    78b8:	9a01      	ldr	r2, [sp, #4]
    78ba:	7893      	ldrb	r3, [r2, #2]
    78bc:	f043 0308 	orr.w	r3, r3, #8
    78c0:	7093      	strb	r3, [r2, #2]
    78c2:	e7f5      	b.n	78b0 <encode_uint+0xb4>
			conv->altform_0c = true;
    78c4:	9a01      	ldr	r2, [sp, #4]
    78c6:	7893      	ldrb	r3, [r2, #2]
    78c8:	f043 0310 	orr.w	r3, r3, #16
    78cc:	7093      	strb	r3, [r2, #2]
    78ce:	e7ef      	b.n	78b0 <encode_uint+0xb4>

000078d0 <outs>:
{
    78d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78d4:	4607      	mov	r7, r0
    78d6:	460e      	mov	r6, r1
    78d8:	4614      	mov	r4, r2
    78da:	4698      	mov	r8, r3
	size_t count = 0;
    78dc:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    78de:	e006      	b.n	78ee <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    78e0:	4631      	mov	r1, r6
    78e2:	f814 0b01 	ldrb.w	r0, [r4], #1
    78e6:	47b8      	blx	r7
		if (rc < 0) {
    78e8:	2800      	cmp	r0, #0
    78ea:	db09      	blt.n	7900 <outs+0x30>
		++count;
    78ec:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    78ee:	4544      	cmp	r4, r8
    78f0:	d3f6      	bcc.n	78e0 <outs+0x10>
    78f2:	f1b8 0f00 	cmp.w	r8, #0
    78f6:	d102      	bne.n	78fe <outs+0x2e>
    78f8:	7823      	ldrb	r3, [r4, #0]
    78fa:	2b00      	cmp	r3, #0
    78fc:	d1f0      	bne.n	78e0 <outs+0x10>
	return (int)count;
    78fe:	4628      	mov	r0, r5
}
    7900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007904 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    7904:	4770      	bx	lr

00007906 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    7906:	2300      	movs	r3, #0
    7908:	6043      	str	r3, [r0, #4]
	list->head = NULL;
    790a:	6003      	str	r3, [r0, #0]
}
    790c:	4770      	bx	lr

0000790e <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    790e:	6803      	ldr	r3, [r0, #0]
    7910:	b12b      	cbz	r3, 791e <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
    7912:	6843      	ldr	r3, [r0, #4]
    7914:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
    7916:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    7918:	2300      	movs	r3, #0
    791a:	600b      	str	r3, [r1, #0]
}
    791c:	4770      	bx	lr
		list->head = msg;
    791e:	6001      	str	r1, [r0, #0]
    7920:	e7f9      	b.n	7916 <log_list_add_tail+0x8>

00007922 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    7922:	6800      	ldr	r0, [r0, #0]
    7924:	4770      	bx	lr

00007926 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
    7926:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
    7928:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
    792a:	b108      	cbz	r0, 7930 <log_list_head_get+0xa>
		list->head = list->head->next;
    792c:	6802      	ldr	r2, [r0, #0]
    792e:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
    7930:	4770      	bx	lr

00007932 <dummy_timestamp>:
}
    7932:	2000      	movs	r0, #0
    7934:	4770      	bx	lr

00007936 <msg_filter_check>:
}
    7936:	2001      	movs	r0, #1
    7938:	4770      	bx	lr

0000793a <default_get_timestamp>:
{
    793a:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    793c:	f000 ff96 	bl	886c <sys_clock_cycle_get_32>
}
    7940:	bd08      	pop	{r3, pc}

00007942 <z_log_get_s_mask>:
{
    7942:	b470      	push	{r4, r5, r6}
    7944:	4603      	mov	r3, r0
	uint32_t mask = 0U;
    7946:	2000      	movs	r0, #0
	uint32_t arg = 0U;
    7948:	4605      	mov	r5, r0
	bool arm = false;
    794a:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
    794c:	e001      	b.n	7952 <z_log_get_s_mask+0x10>
			arm = !arm;
    794e:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
    7952:	f813 2b01 	ldrb.w	r2, [r3], #1
    7956:	b19a      	cbz	r2, 7980 <z_log_get_s_mask+0x3e>
    7958:	428d      	cmp	r5, r1
    795a:	d211      	bcs.n	7980 <z_log_get_s_mask+0x3e>
		if (curr == '%') {
    795c:	2a25      	cmp	r2, #37	; 0x25
    795e:	d0f6      	beq.n	794e <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
    7960:	2c00      	cmp	r4, #0
    7962:	d0f6      	beq.n	7952 <z_log_get_s_mask+0x10>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    7964:	f042 0620 	orr.w	r6, r2, #32
    7968:	3e61      	subs	r6, #97	; 0x61
    796a:	2e19      	cmp	r6, #25
    796c:	d8f1      	bhi.n	7952 <z_log_get_s_mask+0x10>
			if (curr == 's') {
    796e:	2a73      	cmp	r2, #115	; 0x73
    7970:	d002      	beq.n	7978 <z_log_get_s_mask+0x36>
			arg++;
    7972:	3501      	adds	r5, #1
			arm = false;
    7974:	2400      	movs	r4, #0
    7976:	e7ec      	b.n	7952 <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
    7978:	2201      	movs	r2, #1
    797a:	40aa      	lsls	r2, r5
    797c:	4310      	orrs	r0, r2
    797e:	e7f8      	b.n	7972 <z_log_get_s_mask+0x30>
}
    7980:	bc70      	pop	{r4, r5, r6}
    7982:	4770      	bx	lr

00007984 <z_log_get_tag>:
}
    7984:	2000      	movs	r0, #0
    7986:	4770      	bx	lr

00007988 <block_on_alloc>:
}
    7988:	2000      	movs	r0, #0
    798a:	4770      	bx	lr

0000798c <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    798c:	2901      	cmp	r1, #1
    798e:	d906      	bls.n	799e <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
    7990:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    7992:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
    7994:	2906      	cmp	r1, #6
    7996:	d907      	bls.n	79a8 <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
    7998:	3907      	subs	r1, #7
		cont = cont->next;
    799a:	681b      	ldr	r3, [r3, #0]
    799c:	e7fa      	b.n	7994 <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
    799e:	3104      	adds	r1, #4
    79a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    79a4:	6888      	ldr	r0, [r1, #8]
    79a6:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
    79a8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    79ac:	6848      	ldr	r0, [r1, #4]
}
    79ae:	4770      	bx	lr

000079b0 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    79b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    79b4:	461c      	mov	r4, r3
    79b6:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
    79ba:	8903      	ldrh	r3, [r0, #8]
    79bc:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
    79c0:	42a3      	cmp	r3, r4
    79c2:	d91f      	bls.n	7a04 <log_msg_hexdump_data_op+0x54>
    79c4:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
    79c6:	6811      	ldr	r1, [r2, #0]
    79c8:	4421      	add	r1, r4
    79ca:	4299      	cmp	r1, r3
    79cc:	d901      	bls.n	79d2 <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
    79ce:	1b19      	subs	r1, r3, r4
    79d0:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
    79d2:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    79d4:	2b0c      	cmp	r3, #12
    79d6:	d919      	bls.n	7a0c <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
    79d8:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
    79dc:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    79de:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
    79e0:	42a3      	cmp	r3, r4
    79e2:	d91e      	bls.n	7a22 <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    79e4:	42bb      	cmp	r3, r7
    79e6:	bf28      	it	cs
    79e8:	463b      	movcs	r3, r7
    79ea:	461d      	mov	r5, r3

		if (put_op) {
    79ec:	f1b9 0f00 	cmp.w	r9, #0
    79f0:	d010      	beq.n	7a14 <log_msg_hexdump_data_op+0x64>
			(void)memcpy(&head_data[offset], data, cpy_len);
    79f2:	461a      	mov	r2, r3
    79f4:	4641      	mov	r1, r8
    79f6:	eb0c 0004 	add.w	r0, ip, r4
    79fa:	f000 fb24 	bl	8046 <memcpy>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
    79fe:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
    7a00:	44a8      	add	r8, r5
    7a02:	e021      	b.n	7a48 <log_msg_hexdump_data_op+0x98>
		*length = 0;
    7a04:	2300      	movs	r3, #0
    7a06:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    7a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
    7a0c:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
    7a10:	2600      	movs	r6, #0
    7a12:	e7e5      	b.n	79e0 <log_msg_hexdump_data_op+0x30>
			(void)memcpy(data, &head_data[offset], cpy_len);
    7a14:	461a      	mov	r2, r3
    7a16:	eb0c 0104 	add.w	r1, ip, r4
    7a1a:	4640      	mov	r0, r8
    7a1c:	f000 fb13 	bl	8046 <memcpy>
    7a20:	e7ed      	b.n	79fe <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
    7a22:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
    7a24:	b91e      	cbnz	r6, 7a2e <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
    7a26:	6946      	ldr	r6, [r0, #20]
    7a28:	e001      	b.n	7a2e <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
    7a2a:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
    7a2c:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
    7a2e:	2c1b      	cmp	r4, #27
    7a30:	d8fb      	bhi.n	7a2a <log_msg_hexdump_data_op+0x7a>
    7a32:	e009      	b.n	7a48 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
    7a34:	1931      	adds	r1, r6, r4
    7a36:	462a      	mov	r2, r5
    7a38:	3104      	adds	r1, #4
    7a3a:	4640      	mov	r0, r8
    7a3c:	f000 fb03 	bl	8046 <memcpy>
		cont = cont->next;
    7a40:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
    7a42:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
    7a44:	44a8      	add	r8, r5
		offset = 0;
    7a46:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
    7a48:	2f00      	cmp	r7, #0
    7a4a:	d0dd      	beq.n	7a08 <log_msg_hexdump_data_op+0x58>
    7a4c:	2e00      	cmp	r6, #0
    7a4e:	d0db      	beq.n	7a08 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    7a50:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    7a54:	42bd      	cmp	r5, r7
    7a56:	bf28      	it	cs
    7a58:	463d      	movcs	r5, r7
		if (put_op) {
    7a5a:	f1b9 0f00 	cmp.w	r9, #0
    7a5e:	d0e9      	beq.n	7a34 <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
    7a60:	1930      	adds	r0, r6, r4
    7a62:	462a      	mov	r2, r5
    7a64:	4641      	mov	r1, r8
    7a66:	3004      	adds	r0, #4
    7a68:	f000 faed 	bl	8046 <memcpy>
    7a6c:	e7e8      	b.n	7a40 <log_msg_hexdump_data_op+0x90>

00007a6e <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
    7a6e:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    7a70:	f3bf 8f5b 	dmb	ish
    7a74:	e850 3f00 	ldrex	r3, [r0]
    7a78:	3301      	adds	r3, #1
    7a7a:	e840 3200 	strex	r2, r3, [r0]
    7a7e:	2a00      	cmp	r2, #0
    7a80:	d1f8      	bne.n	7a74 <log_msg_get+0x6>
    7a82:	f3bf 8f5b 	dmb	ish
}
    7a86:	4770      	bx	lr

00007a88 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    7a88:	7a40      	ldrb	r0, [r0, #9]
}
    7a8a:	0900      	lsrs	r0, r0, #4
    7a8c:	4770      	bx	lr

00007a8e <log_msg_arg_get>:
{
    7a8e:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
    7a90:	7a43      	ldrb	r3, [r0, #9]
    7a92:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
    7a96:	d20a      	bcs.n	7aae <log_msg_arg_get+0x20>
    7a98:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    7a9a:	2a03      	cmp	r2, #3
    7a9c:	d804      	bhi.n	7aa8 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
    7a9e:	3104      	adds	r1, #4
    7aa0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7aa4:	6840      	ldr	r0, [r0, #4]
    7aa6:	e003      	b.n	7ab0 <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
    7aa8:	f7ff ff70 	bl	798c <cont_arg_get>
    7aac:	e000      	b.n	7ab0 <log_msg_arg_get+0x22>
		return 0;
    7aae:	2000      	movs	r0, #0
}
    7ab0:	bd08      	pop	{r3, pc}

00007ab2 <log_msg_str_get>:
}
    7ab2:	6900      	ldr	r0, [r0, #16]
    7ab4:	4770      	bx	lr

00007ab6 <log_msg_put>:
{
    7ab6:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
    7ab8:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    7aba:	f3bf 8f5b 	dmb	ish
    7abe:	e853 2f00 	ldrex	r2, [r3]
    7ac2:	3a01      	subs	r2, #1
    7ac4:	e843 2100 	strex	r1, r2, [r3]
    7ac8:	2900      	cmp	r1, #0
    7aca:	d1f8      	bne.n	7abe <log_msg_put+0x8>
    7acc:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    7ad0:	6843      	ldr	r3, [r0, #4]
    7ad2:	b103      	cbz	r3, 7ad6 <log_msg_put+0x20>
}
    7ad4:	bd08      	pop	{r3, pc}
		msg_free(msg);
    7ad6:	f7fa f8c1 	bl	1c5c <msg_free>
}
    7ada:	e7fb      	b.n	7ad4 <log_msg_put+0x1e>

00007adc <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
    7adc:	b510      	push	{r4, lr}
    7ade:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    7ae0:	2400      	movs	r4, #0
    7ae2:	9400      	str	r4, [sp, #0]
    7ae4:	f7ff ff64 	bl	79b0 <log_msg_hexdump_data_op>
}
    7ae8:	b002      	add	sp, #8
    7aea:	bd10      	pop	{r4, pc}

00007aec <buffer_write>:
{
    7aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7aee:	4607      	mov	r7, r0
    7af0:	460d      	mov	r5, r1
    7af2:	4614      	mov	r4, r2
    7af4:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    7af6:	4632      	mov	r2, r6
    7af8:	4621      	mov	r1, r4
    7afa:	4628      	mov	r0, r5
    7afc:	47b8      	blx	r7
		buf += processed;
    7afe:	4405      	add	r5, r0
	} while (len != 0);
    7b00:	1a24      	subs	r4, r4, r0
    7b02:	d1f8      	bne.n	7af6 <buffer_write+0xa>
}
    7b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007b06 <color_prefix>:
{
    7b06:	b508      	push	{r3, lr}
    7b08:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    7b0a:	2201      	movs	r2, #1
    7b0c:	f7fa f93e 	bl	1d8c <color_print>
}
    7b10:	bd08      	pop	{r3, pc}

00007b12 <color_postfix>:
{
    7b12:	b508      	push	{r3, lr}
    7b14:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    7b16:	2200      	movs	r2, #0
    7b18:	f7fa f938 	bl	1d8c <color_print>
}
    7b1c:	bd08      	pop	{r3, pc}

00007b1e <postfix_print>:
{
    7b1e:	b538      	push	{r3, r4, r5, lr}
    7b20:	4605      	mov	r5, r0
    7b22:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    7b24:	f001 0101 	and.w	r1, r1, #1
    7b28:	f7ff fff3 	bl	7b12 <color_postfix>
	newline_print(output, flags);
    7b2c:	4621      	mov	r1, r4
    7b2e:	4628      	mov	r0, r5
    7b30:	f7fa f942 	bl	1db8 <newline_print>
}
    7b34:	bd38      	pop	{r3, r4, r5, pc}

00007b36 <std_print>:
{
    7b36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b3a:	b08e      	sub	sp, #56	; 0x38
    7b3c:	af0e      	add	r7, sp, #56	; 0x38
    7b3e:	4606      	mov	r6, r0
    7b40:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
    7b42:	f7ff ffb6 	bl	7ab2 <log_msg_str_get>
    7b46:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
    7b48:	4630      	mov	r0, r6
    7b4a:	f7ff ff9d 	bl	7a88 <log_msg_nargs_get>
    7b4e:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
    7b50:	0083      	lsls	r3, r0, #2
    7b52:	3307      	adds	r3, #7
    7b54:	f023 0307 	bic.w	r3, r3, #7
    7b58:	ebad 0d03 	sub.w	sp, sp, r3
    7b5c:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    7b5e:	2400      	movs	r4, #0
    7b60:	4544      	cmp	r4, r8
    7b62:	d207      	bcs.n	7b74 <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
    7b64:	4621      	mov	r1, r4
    7b66:	4630      	mov	r0, r6
    7b68:	f7ff ff91 	bl	7a8e <log_msg_arg_get>
    7b6c:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
    7b70:	3401      	adds	r4, #1
    7b72:	e7f5      	b.n	7b60 <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
    7b74:	4630      	mov	r0, r6
    7b76:	f7ff ff87 	bl	7a88 <log_msg_nargs_get>
    7b7a:	280f      	cmp	r0, #15
    7b7c:	d815      	bhi.n	7baa <std_print+0x74>
    7b7e:	e8df f010 	tbh	[pc, r0, lsl #1]
    7b82:	0010      	.short	0x0010
    7b84:	001d0017 	.word	0x001d0017
    7b88:	002d0024 	.word	0x002d0024
    7b8c:	00450038 	.word	0x00450038
    7b90:	00650054 	.word	0x00650054
    7b94:	008d0078 	.word	0x008d0078
    7b98:	00bd00a4 	.word	0x00bd00a4
    7b9c:	00f500d8 	.word	0x00f500d8
    7ba0:	0114      	.short	0x0114
		print_formatted(output, str);
    7ba2:	4651      	mov	r1, sl
    7ba4:	4648      	mov	r0, r9
    7ba6:	f7fa f899 	bl	1cdc <print_formatted>
}
    7baa:	46bd      	mov	sp, r7
    7bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
    7bb0:	682a      	ldr	r2, [r5, #0]
    7bb2:	4651      	mov	r1, sl
    7bb4:	4648      	mov	r0, r9
    7bb6:	f7fa f891 	bl	1cdc <print_formatted>
		break;
    7bba:	e7f6      	b.n	7baa <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
    7bbc:	686b      	ldr	r3, [r5, #4]
    7bbe:	682a      	ldr	r2, [r5, #0]
    7bc0:	4651      	mov	r1, sl
    7bc2:	4648      	mov	r0, r9
    7bc4:	f7fa f88a 	bl	1cdc <print_formatted>
		break;
    7bc8:	e7ef      	b.n	7baa <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
    7bca:	686b      	ldr	r3, [r5, #4]
    7bcc:	682a      	ldr	r2, [r5, #0]
    7bce:	68a9      	ldr	r1, [r5, #8]
    7bd0:	9100      	str	r1, [sp, #0]
    7bd2:	4651      	mov	r1, sl
    7bd4:	4648      	mov	r0, r9
    7bd6:	f7fa f881 	bl	1cdc <print_formatted>
		break;
    7bda:	e7e6      	b.n	7baa <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    7bdc:	686b      	ldr	r3, [r5, #4]
    7bde:	682a      	ldr	r2, [r5, #0]
    7be0:	68e9      	ldr	r1, [r5, #12]
    7be2:	9101      	str	r1, [sp, #4]
    7be4:	68a9      	ldr	r1, [r5, #8]
    7be6:	9100      	str	r1, [sp, #0]
    7be8:	4651      	mov	r1, sl
    7bea:	4648      	mov	r0, r9
    7bec:	f7fa f876 	bl	1cdc <print_formatted>
		break;
    7bf0:	e7db      	b.n	7baa <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    7bf2:	686b      	ldr	r3, [r5, #4]
    7bf4:	682a      	ldr	r2, [r5, #0]
    7bf6:	6929      	ldr	r1, [r5, #16]
    7bf8:	9102      	str	r1, [sp, #8]
    7bfa:	68e9      	ldr	r1, [r5, #12]
    7bfc:	9101      	str	r1, [sp, #4]
    7bfe:	68a9      	ldr	r1, [r5, #8]
    7c00:	9100      	str	r1, [sp, #0]
    7c02:	4651      	mov	r1, sl
    7c04:	4648      	mov	r0, r9
    7c06:	f7fa f869 	bl	1cdc <print_formatted>
		break;
    7c0a:	e7ce      	b.n	7baa <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    7c0c:	686b      	ldr	r3, [r5, #4]
    7c0e:	682a      	ldr	r2, [r5, #0]
    7c10:	6969      	ldr	r1, [r5, #20]
    7c12:	9103      	str	r1, [sp, #12]
    7c14:	6929      	ldr	r1, [r5, #16]
    7c16:	9102      	str	r1, [sp, #8]
    7c18:	68e9      	ldr	r1, [r5, #12]
    7c1a:	9101      	str	r1, [sp, #4]
    7c1c:	68a9      	ldr	r1, [r5, #8]
    7c1e:	9100      	str	r1, [sp, #0]
    7c20:	4651      	mov	r1, sl
    7c22:	4648      	mov	r0, r9
    7c24:	f7fa f85a 	bl	1cdc <print_formatted>
		break;
    7c28:	e7bf      	b.n	7baa <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    7c2a:	686b      	ldr	r3, [r5, #4]
    7c2c:	682a      	ldr	r2, [r5, #0]
    7c2e:	69a9      	ldr	r1, [r5, #24]
    7c30:	9104      	str	r1, [sp, #16]
    7c32:	6969      	ldr	r1, [r5, #20]
    7c34:	9103      	str	r1, [sp, #12]
    7c36:	6929      	ldr	r1, [r5, #16]
    7c38:	9102      	str	r1, [sp, #8]
    7c3a:	68e9      	ldr	r1, [r5, #12]
    7c3c:	9101      	str	r1, [sp, #4]
    7c3e:	68a9      	ldr	r1, [r5, #8]
    7c40:	9100      	str	r1, [sp, #0]
    7c42:	4651      	mov	r1, sl
    7c44:	4648      	mov	r0, r9
    7c46:	f7fa f849 	bl	1cdc <print_formatted>
		break;
    7c4a:	e7ae      	b.n	7baa <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    7c4c:	686b      	ldr	r3, [r5, #4]
    7c4e:	682a      	ldr	r2, [r5, #0]
    7c50:	69e9      	ldr	r1, [r5, #28]
    7c52:	9105      	str	r1, [sp, #20]
    7c54:	69a9      	ldr	r1, [r5, #24]
    7c56:	9104      	str	r1, [sp, #16]
    7c58:	6969      	ldr	r1, [r5, #20]
    7c5a:	9103      	str	r1, [sp, #12]
    7c5c:	6929      	ldr	r1, [r5, #16]
    7c5e:	9102      	str	r1, [sp, #8]
    7c60:	68e9      	ldr	r1, [r5, #12]
    7c62:	9101      	str	r1, [sp, #4]
    7c64:	68a9      	ldr	r1, [r5, #8]
    7c66:	9100      	str	r1, [sp, #0]
    7c68:	4651      	mov	r1, sl
    7c6a:	4648      	mov	r0, r9
    7c6c:	f7fa f836 	bl	1cdc <print_formatted>
		break;
    7c70:	e79b      	b.n	7baa <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    7c72:	686b      	ldr	r3, [r5, #4]
    7c74:	682a      	ldr	r2, [r5, #0]
    7c76:	6a29      	ldr	r1, [r5, #32]
    7c78:	9106      	str	r1, [sp, #24]
    7c7a:	69e9      	ldr	r1, [r5, #28]
    7c7c:	9105      	str	r1, [sp, #20]
    7c7e:	69a9      	ldr	r1, [r5, #24]
    7c80:	9104      	str	r1, [sp, #16]
    7c82:	6969      	ldr	r1, [r5, #20]
    7c84:	9103      	str	r1, [sp, #12]
    7c86:	6929      	ldr	r1, [r5, #16]
    7c88:	9102      	str	r1, [sp, #8]
    7c8a:	68e9      	ldr	r1, [r5, #12]
    7c8c:	9101      	str	r1, [sp, #4]
    7c8e:	68a9      	ldr	r1, [r5, #8]
    7c90:	9100      	str	r1, [sp, #0]
    7c92:	4651      	mov	r1, sl
    7c94:	4648      	mov	r0, r9
    7c96:	f7fa f821 	bl	1cdc <print_formatted>
		break;
    7c9a:	e786      	b.n	7baa <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    7c9c:	686b      	ldr	r3, [r5, #4]
    7c9e:	682a      	ldr	r2, [r5, #0]
    7ca0:	6a69      	ldr	r1, [r5, #36]	; 0x24
    7ca2:	9107      	str	r1, [sp, #28]
    7ca4:	6a29      	ldr	r1, [r5, #32]
    7ca6:	9106      	str	r1, [sp, #24]
    7ca8:	69e9      	ldr	r1, [r5, #28]
    7caa:	9105      	str	r1, [sp, #20]
    7cac:	69a9      	ldr	r1, [r5, #24]
    7cae:	9104      	str	r1, [sp, #16]
    7cb0:	6969      	ldr	r1, [r5, #20]
    7cb2:	9103      	str	r1, [sp, #12]
    7cb4:	6929      	ldr	r1, [r5, #16]
    7cb6:	9102      	str	r1, [sp, #8]
    7cb8:	68e9      	ldr	r1, [r5, #12]
    7cba:	9101      	str	r1, [sp, #4]
    7cbc:	68a9      	ldr	r1, [r5, #8]
    7cbe:	9100      	str	r1, [sp, #0]
    7cc0:	4651      	mov	r1, sl
    7cc2:	4648      	mov	r0, r9
    7cc4:	f7fa f80a 	bl	1cdc <print_formatted>
		break;
    7cc8:	e76f      	b.n	7baa <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    7cca:	686b      	ldr	r3, [r5, #4]
    7ccc:	682a      	ldr	r2, [r5, #0]
    7cce:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    7cd0:	9108      	str	r1, [sp, #32]
    7cd2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    7cd4:	9107      	str	r1, [sp, #28]
    7cd6:	6a29      	ldr	r1, [r5, #32]
    7cd8:	9106      	str	r1, [sp, #24]
    7cda:	69e9      	ldr	r1, [r5, #28]
    7cdc:	9105      	str	r1, [sp, #20]
    7cde:	69a9      	ldr	r1, [r5, #24]
    7ce0:	9104      	str	r1, [sp, #16]
    7ce2:	6969      	ldr	r1, [r5, #20]
    7ce4:	9103      	str	r1, [sp, #12]
    7ce6:	6929      	ldr	r1, [r5, #16]
    7ce8:	9102      	str	r1, [sp, #8]
    7cea:	68e9      	ldr	r1, [r5, #12]
    7cec:	9101      	str	r1, [sp, #4]
    7cee:	68a9      	ldr	r1, [r5, #8]
    7cf0:	9100      	str	r1, [sp, #0]
    7cf2:	4651      	mov	r1, sl
    7cf4:	4648      	mov	r0, r9
    7cf6:	f7f9 fff1 	bl	1cdc <print_formatted>
		break;
    7cfa:	e756      	b.n	7baa <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    7cfc:	686b      	ldr	r3, [r5, #4]
    7cfe:	682a      	ldr	r2, [r5, #0]
    7d00:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    7d02:	9109      	str	r1, [sp, #36]	; 0x24
    7d04:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    7d06:	9108      	str	r1, [sp, #32]
    7d08:	6a69      	ldr	r1, [r5, #36]	; 0x24
    7d0a:	9107      	str	r1, [sp, #28]
    7d0c:	6a29      	ldr	r1, [r5, #32]
    7d0e:	9106      	str	r1, [sp, #24]
    7d10:	69e9      	ldr	r1, [r5, #28]
    7d12:	9105      	str	r1, [sp, #20]
    7d14:	69a9      	ldr	r1, [r5, #24]
    7d16:	9104      	str	r1, [sp, #16]
    7d18:	6969      	ldr	r1, [r5, #20]
    7d1a:	9103      	str	r1, [sp, #12]
    7d1c:	6929      	ldr	r1, [r5, #16]
    7d1e:	9102      	str	r1, [sp, #8]
    7d20:	68e9      	ldr	r1, [r5, #12]
    7d22:	9101      	str	r1, [sp, #4]
    7d24:	68a9      	ldr	r1, [r5, #8]
    7d26:	9100      	str	r1, [sp, #0]
    7d28:	4651      	mov	r1, sl
    7d2a:	4648      	mov	r0, r9
    7d2c:	f7f9 ffd6 	bl	1cdc <print_formatted>
		break;
    7d30:	e73b      	b.n	7baa <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    7d32:	686b      	ldr	r3, [r5, #4]
    7d34:	682a      	ldr	r2, [r5, #0]
    7d36:	6b29      	ldr	r1, [r5, #48]	; 0x30
    7d38:	910a      	str	r1, [sp, #40]	; 0x28
    7d3a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    7d3c:	9109      	str	r1, [sp, #36]	; 0x24
    7d3e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    7d40:	9108      	str	r1, [sp, #32]
    7d42:	6a69      	ldr	r1, [r5, #36]	; 0x24
    7d44:	9107      	str	r1, [sp, #28]
    7d46:	6a29      	ldr	r1, [r5, #32]
    7d48:	9106      	str	r1, [sp, #24]
    7d4a:	69e9      	ldr	r1, [r5, #28]
    7d4c:	9105      	str	r1, [sp, #20]
    7d4e:	69a9      	ldr	r1, [r5, #24]
    7d50:	9104      	str	r1, [sp, #16]
    7d52:	6969      	ldr	r1, [r5, #20]
    7d54:	9103      	str	r1, [sp, #12]
    7d56:	6929      	ldr	r1, [r5, #16]
    7d58:	9102      	str	r1, [sp, #8]
    7d5a:	68e9      	ldr	r1, [r5, #12]
    7d5c:	9101      	str	r1, [sp, #4]
    7d5e:	68a9      	ldr	r1, [r5, #8]
    7d60:	9100      	str	r1, [sp, #0]
    7d62:	4651      	mov	r1, sl
    7d64:	4648      	mov	r0, r9
    7d66:	f7f9 ffb9 	bl	1cdc <print_formatted>
		break;
    7d6a:	e71e      	b.n	7baa <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    7d6c:	686b      	ldr	r3, [r5, #4]
    7d6e:	682a      	ldr	r2, [r5, #0]
    7d70:	6b69      	ldr	r1, [r5, #52]	; 0x34
    7d72:	910b      	str	r1, [sp, #44]	; 0x2c
    7d74:	6b29      	ldr	r1, [r5, #48]	; 0x30
    7d76:	910a      	str	r1, [sp, #40]	; 0x28
    7d78:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    7d7a:	9109      	str	r1, [sp, #36]	; 0x24
    7d7c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    7d7e:	9108      	str	r1, [sp, #32]
    7d80:	6a69      	ldr	r1, [r5, #36]	; 0x24
    7d82:	9107      	str	r1, [sp, #28]
    7d84:	6a29      	ldr	r1, [r5, #32]
    7d86:	9106      	str	r1, [sp, #24]
    7d88:	69e9      	ldr	r1, [r5, #28]
    7d8a:	9105      	str	r1, [sp, #20]
    7d8c:	69a9      	ldr	r1, [r5, #24]
    7d8e:	9104      	str	r1, [sp, #16]
    7d90:	6969      	ldr	r1, [r5, #20]
    7d92:	9103      	str	r1, [sp, #12]
    7d94:	6929      	ldr	r1, [r5, #16]
    7d96:	9102      	str	r1, [sp, #8]
    7d98:	68e9      	ldr	r1, [r5, #12]
    7d9a:	9101      	str	r1, [sp, #4]
    7d9c:	68a9      	ldr	r1, [r5, #8]
    7d9e:	9100      	str	r1, [sp, #0]
    7da0:	4651      	mov	r1, sl
    7da2:	4648      	mov	r0, r9
    7da4:	f7f9 ff9a 	bl	1cdc <print_formatted>
		break;
    7da8:	e6ff      	b.n	7baa <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    7daa:	686b      	ldr	r3, [r5, #4]
    7dac:	682a      	ldr	r2, [r5, #0]
    7dae:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    7db0:	910c      	str	r1, [sp, #48]	; 0x30
    7db2:	6b69      	ldr	r1, [r5, #52]	; 0x34
    7db4:	910b      	str	r1, [sp, #44]	; 0x2c
    7db6:	6b29      	ldr	r1, [r5, #48]	; 0x30
    7db8:	910a      	str	r1, [sp, #40]	; 0x28
    7dba:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    7dbc:	9109      	str	r1, [sp, #36]	; 0x24
    7dbe:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    7dc0:	9108      	str	r1, [sp, #32]
    7dc2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    7dc4:	9107      	str	r1, [sp, #28]
    7dc6:	6a29      	ldr	r1, [r5, #32]
    7dc8:	9106      	str	r1, [sp, #24]
    7dca:	69e9      	ldr	r1, [r5, #28]
    7dcc:	9105      	str	r1, [sp, #20]
    7dce:	69a9      	ldr	r1, [r5, #24]
    7dd0:	9104      	str	r1, [sp, #16]
    7dd2:	6969      	ldr	r1, [r5, #20]
    7dd4:	9103      	str	r1, [sp, #12]
    7dd6:	6929      	ldr	r1, [r5, #16]
    7dd8:	9102      	str	r1, [sp, #8]
    7dda:	68e9      	ldr	r1, [r5, #12]
    7ddc:	9101      	str	r1, [sp, #4]
    7dde:	68a9      	ldr	r1, [r5, #8]
    7de0:	9100      	str	r1, [sp, #0]
    7de2:	4651      	mov	r1, sl
    7de4:	4648      	mov	r0, r9
    7de6:	f7f9 ff79 	bl	1cdc <print_formatted>
}
    7dea:	e6de      	b.n	7baa <std_print+0x74>

00007dec <log_output_flush>:
{
    7dec:	b510      	push	{r4, lr}
    7dee:	4604      	mov	r4, r0
		     output->control_block->offset,
    7df0:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    7df2:	6853      	ldr	r3, [r2, #4]
    7df4:	6812      	ldr	r2, [r2, #0]
    7df6:	6881      	ldr	r1, [r0, #8]
    7df8:	6800      	ldr	r0, [r0, #0]
    7dfa:	f7ff fe77 	bl	7aec <buffer_write>
	output->control_block->offset = 0;
    7dfe:	6863      	ldr	r3, [r4, #4]
    7e00:	2200      	movs	r2, #0
    7e02:	601a      	str	r2, [r3, #0]
}
    7e04:	bd10      	pop	{r4, pc}

00007e06 <out_func>:
{
    7e06:	b538      	push	{r3, r4, r5, lr}
    7e08:	4605      	mov	r5, r0
    7e0a:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    7e0c:	684b      	ldr	r3, [r1, #4]
    7e0e:	681a      	ldr	r2, [r3, #0]
    7e10:	68cb      	ldr	r3, [r1, #12]
    7e12:	429a      	cmp	r2, r3
    7e14:	d00f      	beq.n	7e36 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
    7e16:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    7e18:	f3bf 8f5b 	dmb	ish
    7e1c:	e853 2f00 	ldrex	r2, [r3]
    7e20:	1c51      	adds	r1, r2, #1
    7e22:	e843 1000 	strex	r0, r1, [r3]
    7e26:	2800      	cmp	r0, #0
    7e28:	d1f8      	bne.n	7e1c <out_func+0x16>
    7e2a:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    7e2e:	68a3      	ldr	r3, [r4, #8]
    7e30:	549d      	strb	r5, [r3, r2]
}
    7e32:	2000      	movs	r0, #0
    7e34:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
    7e36:	4608      	mov	r0, r1
    7e38:	f7ff ffd8 	bl	7dec <log_output_flush>
    7e3c:	e7eb      	b.n	7e16 <out_func+0x10>

00007e3e <log_output_msg_process>:
{
    7e3e:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e40:	b085      	sub	sp, #20
    7e42:	4606      	mov	r6, r0
    7e44:	460c      	mov	r4, r1
    7e46:	4617      	mov	r7, r2
    7e48:	7a0b      	ldrb	r3, [r1, #8]
    7e4a:	f083 0301 	eor.w	r3, r3, #1
    7e4e:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
    7e52:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
    7e54:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
    7e56:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
    7e5a:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
    7e5c:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
    7e60:	f011 0507 	ands.w	r5, r1, #7
    7e64:	d10f      	bne.n	7e86 <log_output_msg_process+0x48>
    7e66:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    7e68:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
    7e6a:	f013 0f01 	tst.w	r3, #1
    7e6e:	d014      	beq.n	7e9a <log_output_msg_process+0x5c>
	} else if (raw_string) {
    7e70:	b9c5      	cbnz	r5, 7ea4 <log_output_msg_process+0x66>
		raw_string_print(msg, output);
    7e72:	4631      	mov	r1, r6
    7e74:	4620      	mov	r0, r4
    7e76:	f7fa f8ad 	bl	1fd4 <raw_string_print>
	if (!raw_string) {
    7e7a:	b9cd      	cbnz	r5, 7eb0 <log_output_msg_process+0x72>
	log_output_flush(output);
    7e7c:	4630      	mov	r0, r6
    7e7e:	f7ff ffb5 	bl	7dec <log_output_flush>
}
    7e82:	b005      	add	sp, #20
    7e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
    7e86:	9002      	str	r0, [sp, #8]
    7e88:	f8cd c004 	str.w	ip, [sp, #4]
    7e8c:	9500      	str	r5, [sp, #0]
    7e8e:	4639      	mov	r1, r7
    7e90:	4630      	mov	r0, r6
    7e92:	f7fa f839 	bl	1f08 <prefix_print>
    7e96:	4602      	mov	r2, r0
    7e98:	e7e6      	b.n	7e68 <log_output_msg_process+0x2a>
		std_print(msg, output);
    7e9a:	4631      	mov	r1, r6
    7e9c:	4620      	mov	r0, r4
    7e9e:	f7ff fe4a 	bl	7b36 <std_print>
    7ea2:	e7ea      	b.n	7e7a <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
    7ea4:	463b      	mov	r3, r7
    7ea6:	4631      	mov	r1, r6
    7ea8:	4620      	mov	r0, r4
    7eaa:	f7fa f869 	bl	1f80 <hexdump_print>
    7eae:	e7e4      	b.n	7e7a <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
    7eb0:	462a      	mov	r2, r5
    7eb2:	4639      	mov	r1, r7
    7eb4:	4630      	mov	r0, r6
    7eb6:	f7ff fe32 	bl	7b1e <postfix_print>
    7eba:	e7df      	b.n	7e7c <log_output_msg_process+0x3e>

00007ebc <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    7ebc:	2200      	movs	r2, #0
    7ebe:	6002      	str	r2, [r0, #0]
    7ec0:	6042      	str	r2, [r0, #4]
    7ec2:	6082      	str	r2, [r0, #8]
}
    7ec4:	4770      	bx	lr

00007ec6 <abort_function>:
{
    7ec6:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    7ec8:	2000      	movs	r0, #0
    7eca:	f7f9 fa7b 	bl	13c4 <sys_reboot>

00007ece <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7ece:	b538      	push	{r3, r4, r5, lr}
    7ed0:	4604      	mov	r4, r0

	if (esf != NULL) {
    7ed2:	460d      	mov	r5, r1
    7ed4:	b111      	cbz	r1, 7edc <z_arm_fatal_error+0xe>
		esf_dump(esf);
    7ed6:	4608      	mov	r0, r1
    7ed8:	f7fa fbe0 	bl	269c <esf_dump>
	}
	z_fatal_error(reason, esf);
    7edc:	4629      	mov	r1, r5
    7ede:	4620      	mov	r0, r4
    7ee0:	f7fd fecc 	bl	5c7c <z_fatal_error>
}
    7ee4:	bd38      	pop	{r3, r4, r5, pc}

00007ee6 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    7ee6:	b508      	push	{r3, lr}
    7ee8:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    7eea:	6800      	ldr	r0, [r0, #0]
    7eec:	f7ff ffef 	bl	7ece <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    7ef0:	bd08      	pop	{r3, pc}

00007ef2 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    7ef2:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    7ef4:	2100      	movs	r1, #0
    7ef6:	2001      	movs	r0, #1
    7ef8:	f7ff ffe9 	bl	7ece <z_arm_fatal_error>
}
    7efc:	bd08      	pop	{r3, pc}

00007efe <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    7efe:	b508      	push	{r3, lr}
	handler();
    7f00:	f7fa fc4e 	bl	27a0 <z_SysNmiOnReset>
	z_arm_int_exit();
    7f04:	f7fa fd4a 	bl	299c <z_arm_exc_exit>
}
    7f08:	bd08      	pop	{r3, pc}

00007f0a <memory_fault_recoverable>:
}
    7f0a:	2000      	movs	r0, #0
    7f0c:	4770      	bx	lr

00007f0e <fault_handle>:
{
    7f0e:	b508      	push	{r3, lr}
	*recoverable = false;
    7f10:	2300      	movs	r3, #0
    7f12:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    7f14:	1ecb      	subs	r3, r1, #3
    7f16:	2b09      	cmp	r3, #9
    7f18:	d81a      	bhi.n	7f50 <fault_handle+0x42>
    7f1a:	e8df f003 	tbb	[pc, r3]
    7f1e:	0905      	.short	0x0905
    7f20:	1919110d 	.word	0x1919110d
    7f24:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    7f28:	4611      	mov	r1, r2
    7f2a:	f7fa ffcb 	bl	2ec4 <hard_fault>
}
    7f2e:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    7f30:	2100      	movs	r1, #0
    7f32:	f7fa fee5 	bl	2d00 <mem_manage_fault>
		break;
    7f36:	e7fa      	b.n	7f2e <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    7f38:	2100      	movs	r1, #0
    7f3a:	f7fa fe09 	bl	2b50 <bus_fault>
		break;
    7f3e:	e7f6      	b.n	7f2e <fault_handle+0x20>
		reason = usage_fault(esf);
    7f40:	f7fa fd3a 	bl	29b8 <usage_fault>
		break;
    7f44:	e7f3      	b.n	7f2e <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    7f46:	4611      	mov	r1, r2
    7f48:	f7fa fde8 	bl	2b1c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    7f4c:	2000      	movs	r0, #0
		break;
    7f4e:	e7ee      	b.n	7f2e <fault_handle+0x20>
		reserved_exception(esf, fault);
    7f50:	f7fb f85e 	bl	3010 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    7f54:	2000      	movs	r0, #0
	return reason;
    7f56:	e7ea      	b.n	7f2e <fault_handle+0x20>

00007f58 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    7f58:	6843      	ldr	r3, [r0, #4]
    7f5a:	1e5a      	subs	r2, r3, #1
		&&
    7f5c:	4213      	tst	r3, r2
    7f5e:	d106      	bne.n	7f6e <mpu_partition_is_valid+0x16>
		&&
    7f60:	2b1f      	cmp	r3, #31
    7f62:	d906      	bls.n	7f72 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    7f64:	6803      	ldr	r3, [r0, #0]
		&&
    7f66:	421a      	tst	r2, r3
    7f68:	d005      	beq.n	7f76 <mpu_partition_is_valid+0x1e>
    7f6a:	2000      	movs	r0, #0
    7f6c:	4770      	bx	lr
    7f6e:	2000      	movs	r0, #0
    7f70:	4770      	bx	lr
    7f72:	2000      	movs	r0, #0
    7f74:	4770      	bx	lr
    7f76:	2001      	movs	r0, #1
}
    7f78:	4770      	bx	lr

00007f7a <mpu_configure_region>:
{
    7f7a:	b500      	push	{lr}
    7f7c:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    7f7e:	680b      	ldr	r3, [r1, #0]
    7f80:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    7f82:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7f84:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    7f86:	2b20      	cmp	r3, #32
    7f88:	d912      	bls.n	7fb0 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    7f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    7f8e:	d811      	bhi.n	7fb4 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    7f90:	3b01      	subs	r3, #1
    7f92:	fab3 f383 	clz	r3, r3
    7f96:	f1c3 031f 	rsb	r3, r3, #31
    7f9a:	005b      	lsls	r3, r3, #1
    7f9c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7fa0:	4313      	orrs	r3, r2
    7fa2:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    7fa4:	a901      	add	r1, sp, #4
    7fa6:	f7fb f98f 	bl	32c8 <region_allocate_and_init>
}
    7faa:	b005      	add	sp, #20
    7fac:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    7fb0:	2308      	movs	r3, #8
    7fb2:	e7f5      	b.n	7fa0 <mpu_configure_region+0x26>
		return REGION_4G;
    7fb4:	233e      	movs	r3, #62	; 0x3e
    7fb6:	e7f3      	b.n	7fa0 <mpu_configure_region+0x26>

00007fb8 <arm_core_mpu_configure_static_mpu_regions>:
{
    7fb8:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    7fba:	f7fb f9e7 	bl	338c <mpu_configure_static_mpu_regions>
}
    7fbe:	bd08      	pop	{r3, pc}

00007fc0 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    7fc0:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    7fc2:	f7fb f9ed 	bl	33a0 <mpu_configure_dynamic_mpu_regions>
}
    7fc6:	bd08      	pop	{r3, pc}

00007fc8 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    7fc8:	4602      	mov	r2, r0
    7fca:	780b      	ldrb	r3, [r1, #0]
    7fcc:	b11b      	cbz	r3, 7fd6 <strcpy+0xe>
		*d = *s;
    7fce:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    7fd2:	3101      	adds	r1, #1
    7fd4:	e7f9      	b.n	7fca <strcpy+0x2>
	}

	*d = '\0';
    7fd6:	7013      	strb	r3, [r2, #0]

	return dest;
}
    7fd8:	4770      	bx	lr

00007fda <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    7fda:	4603      	mov	r3, r0
    7fdc:	b1a2      	cbz	r2, 8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>
{
    7fde:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    7fe0:	780c      	ldrb	r4, [r1, #0]
    7fe2:	b12c      	cbz	r4, 7ff0 <strncpy+0x16>
		*d = *s;
    7fe4:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    7fe8:	3101      	adds	r1, #1
		d++;
		n--;
    7fea:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    7fec:	2a00      	cmp	r2, #0
    7fee:	d1f7      	bne.n	7fe0 <strncpy+0x6>
	}

	while (n > 0) {
    7ff0:	b122      	cbz	r2, 7ffc <strncpy+0x22>
		*d = '\0';
    7ff2:	2100      	movs	r1, #0
    7ff4:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    7ff8:	3a01      	subs	r2, #1
    7ffa:	e7f9      	b.n	7ff0 <strncpy+0x16>
	}

	return dest;
}
    7ffc:	bc10      	pop	{r4}
    7ffe:	4770      	bx	lr
		*d = '\0';
    8000:	2100      	movs	r1, #0
    8002:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    8006:	3a01      	subs	r2, #1
	while (n > 0) {
    8008:	2a00      	cmp	r2, #0
    800a:	d1f9      	bne.n	8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>
    800c:	4770      	bx	lr

0000800e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    800e:	4603      	mov	r3, r0
	size_t n = 0;
    8010:	2000      	movs	r0, #0

	while (*s != '\0') {
    8012:	781a      	ldrb	r2, [r3, #0]
    8014:	b112      	cbz	r2, 801c <strlen+0xe>
		s++;
    8016:	3301      	adds	r3, #1
		n++;
    8018:	3001      	adds	r0, #1
    801a:	e7fa      	b.n	8012 <strlen+0x4>
	}

	return n;
}
    801c:	4770      	bx	lr

0000801e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    801e:	4603      	mov	r3, r0
	size_t n = 0;
    8020:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    8022:	781a      	ldrb	r2, [r3, #0]
    8024:	b122      	cbz	r2, 8030 <strnlen+0x12>
    8026:	4288      	cmp	r0, r1
    8028:	d202      	bcs.n	8030 <strnlen+0x12>
		s++;
    802a:	3301      	adds	r3, #1
		n++;
    802c:	3001      	adds	r0, #1
    802e:	e7f8      	b.n	8022 <strnlen+0x4>
	}

	return n;
}
    8030:	4770      	bx	lr

00008032 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    8032:	7803      	ldrb	r3, [r0, #0]
    8034:	780a      	ldrb	r2, [r1, #0]
    8036:	4293      	cmp	r3, r2
    8038:	d103      	bne.n	8042 <strcmp+0x10>
    803a:	b113      	cbz	r3, 8042 <strcmp+0x10>
		s1++;
    803c:	3001      	adds	r0, #1
		s2++;
    803e:	3101      	adds	r1, #1
    8040:	e7f7      	b.n	8032 <strcmp>
	}

	return *s1 - *s2;
}
    8042:	1a98      	subs	r0, r3, r2
    8044:	4770      	bx	lr

00008046 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    8046:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    8048:	ea80 0301 	eor.w	r3, r0, r1
    804c:	f013 0f03 	tst.w	r3, #3
    8050:	d001      	beq.n	8056 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
    8052:	4603      	mov	r3, r0
    8054:	e017      	b.n	8086 <memcpy+0x40>
    8056:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    8058:	f013 0f03 	tst.w	r3, #3
    805c:	d00b      	beq.n	8076 <memcpy+0x30>
			if (n == 0) {
    805e:	b1a2      	cbz	r2, 808a <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    8060:	f811 4b01 	ldrb.w	r4, [r1], #1
    8064:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    8068:	3a01      	subs	r2, #1
    806a:	e7f5      	b.n	8058 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
    806c:	f851 4b04 	ldr.w	r4, [r1], #4
    8070:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    8074:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    8076:	2a03      	cmp	r2, #3
    8078:	d8f8      	bhi.n	806c <memcpy+0x26>
    807a:	e004      	b.n	8086 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    807c:	f811 4b01 	ldrb.w	r4, [r1], #1
    8080:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    8084:	3a01      	subs	r2, #1
	while (n > 0) {
    8086:	2a00      	cmp	r2, #0
    8088:	d1f8      	bne.n	807c <memcpy+0x36>
	}

	return d;
}
    808a:	bc10      	pop	{r4}
    808c:	4770      	bx	lr

0000808e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    808e:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    8090:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
    8092:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    8094:	f013 0f03 	tst.w	r3, #3
    8098:	d004      	beq.n	80a4 <memset+0x16>
		if (n == 0) {
    809a:	b19a      	cbz	r2, 80c4 <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
    809c:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    80a0:	3a01      	subs	r2, #1
    80a2:	e7f7      	b.n	8094 <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    80a4:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    80a6:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    80aa:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    80ae:	2a03      	cmp	r2, #3
    80b0:	d906      	bls.n	80c0 <memset+0x32>
		*(d_word++) = c_word;
    80b2:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    80b6:	3a04      	subs	r2, #4
    80b8:	e7f9      	b.n	80ae <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    80ba:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    80be:	3a01      	subs	r2, #1
	while (n > 0) {
    80c0:	2a00      	cmp	r2, #0
    80c2:	d1fa      	bne.n	80ba <memset+0x2c>
	}

	return buf;
}
    80c4:	bc10      	pop	{r4}
    80c6:	4770      	bx	lr

000080c8 <_stdout_hook_default>:
}
    80c8:	f04f 30ff 	mov.w	r0, #4294967295
    80cc:	4770      	bx	lr

000080ce <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    80ce:	b084      	sub	sp, #16
    80d0:	ab04      	add	r3, sp, #16
    80d2:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    80d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    80da:	2b06      	cmp	r3, #6
    80dc:	d001      	beq.n	80e2 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    80de:	b004      	add	sp, #16
    80e0:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    80e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    80e6:	2201      	movs	r2, #1
    80e8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    80ec:	f3bf 8f4f 	dsb	sy
        __WFE();
    80f0:	bf20      	wfe
    while (true)
    80f2:	e7fd      	b.n	80f0 <pm_power_state_set+0x22>

000080f4 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    80f4:	b084      	sub	sp, #16
    80f6:	ab04      	add	r3, sp, #16
    80f8:	e903 0007 	stmdb	r3, {r0, r1, r2}
    80fc:	2300      	movs	r3, #0
    80fe:	f383 8811 	msr	BASEPRI, r3
    8102:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    8106:	b004      	add	sp, #16
    8108:	4770      	bx	lr

0000810a <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    810a:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    810c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    8110:	0089      	lsls	r1, r1, #2
    8112:	3138      	adds	r1, #56	; 0x38
}
    8114:	4408      	add	r0, r1
    8116:	4770      	bx	lr

00008118 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    8118:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    811a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    811e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    8122:	4770      	bx	lr

00008124 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    8124:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    8126:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    812a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    812e:	4770      	bx	lr

00008130 <get_status>:
{
    8130:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    8132:	b2c9      	uxtb	r1, r1
    8134:	f7ff ffe9 	bl	810a <get_sub_data>
    8138:	6880      	ldr	r0, [r0, #8]
}
    813a:	f000 0007 	and.w	r0, r0, #7
    813e:	bd08      	pop	{r3, pc}

00008140 <set_off_state>:
	__asm__ volatile(
    8140:	f04f 0320 	mov.w	r3, #32
    8144:	f3ef 8211 	mrs	r2, BASEPRI
    8148:	f383 8812 	msr	BASEPRI_MAX, r3
    814c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    8150:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    8152:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    8156:	d001      	beq.n	815c <set_off_state+0x1c>
    8158:	428b      	cmp	r3, r1
    815a:	d107      	bne.n	816c <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    815c:	2301      	movs	r3, #1
    815e:	6003      	str	r3, [r0, #0]
	int err = 0;
    8160:	2000      	movs	r0, #0
	__asm__ volatile(
    8162:	f382 8811 	msr	BASEPRI, r2
    8166:	f3bf 8f6f 	isb	sy
}
    816a:	4770      	bx	lr
		err = -EPERM;
    816c:	f04f 30ff 	mov.w	r0, #4294967295
    8170:	e7f7      	b.n	8162 <set_off_state+0x22>

00008172 <set_starting_state>:
{
    8172:	b410      	push	{r4}
	__asm__ volatile(
    8174:	f04f 0320 	mov.w	r3, #32
    8178:	f3ef 8211 	mrs	r2, BASEPRI
    817c:	f383 8812 	msr	BASEPRI_MAX, r3
    8180:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    8184:	6803      	ldr	r3, [r0, #0]
    8186:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    818a:	f003 0307 	and.w	r3, r3, #7
    818e:	2b01      	cmp	r3, #1
    8190:	d009      	beq.n	81a6 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
    8192:	428c      	cmp	r4, r1
    8194:	d00a      	beq.n	81ac <set_starting_state+0x3a>
		err = -EPERM;
    8196:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    819a:	f382 8811 	msr	BASEPRI, r2
    819e:	f3bf 8f6f 	isb	sy
}
    81a2:	bc10      	pop	{r4}
    81a4:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    81a6:	6001      	str	r1, [r0, #0]
	int err = 0;
    81a8:	2000      	movs	r0, #0
    81aa:	e7f6      	b.n	819a <set_starting_state+0x28>
		err = -EALREADY;
    81ac:	f06f 0077 	mvn.w	r0, #119	; 0x77
    81b0:	e7f3      	b.n	819a <set_starting_state+0x28>

000081b2 <set_on_state>:
	__asm__ volatile(
    81b2:	f04f 0320 	mov.w	r3, #32
    81b6:	f3ef 8211 	mrs	r2, BASEPRI
    81ba:	f383 8812 	msr	BASEPRI_MAX, r3
    81be:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    81c2:	6803      	ldr	r3, [r0, #0]
    81c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    81c8:	f043 0302 	orr.w	r3, r3, #2
    81cc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    81ce:	f382 8811 	msr	BASEPRI, r2
    81d2:	f3bf 8f6f 	isb	sy
}
    81d6:	4770      	bx	lr

000081d8 <clkstarted_handle>:
{
    81d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81da:	4606      	mov	r6, r0
    81dc:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    81de:	f7ff ff94 	bl	810a <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    81e2:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    81e4:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    81e6:	2300      	movs	r3, #0
    81e8:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    81ec:	f7ff ffe1 	bl	81b2 <set_on_state>
	if (callback) {
    81f0:	b11d      	cbz	r5, 81fa <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    81f2:	463a      	mov	r2, r7
    81f4:	4621      	mov	r1, r4
    81f6:	4630      	mov	r0, r6
    81f8:	47a8      	blx	r5
}
    81fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000081fc <stop>:
{
    81fc:	b570      	push	{r4, r5, r6, lr}
    81fe:	4606      	mov	r6, r0
    8200:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    8202:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    8204:	4621      	mov	r1, r4
    8206:	f7ff ff80 	bl	810a <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    820a:	4629      	mov	r1, r5
    820c:	3008      	adds	r0, #8
    820e:	f7ff ff97 	bl	8140 <set_off_state>
	if (err < 0) {
    8212:	2800      	cmp	r0, #0
    8214:	db06      	blt.n	8224 <stop+0x28>
	get_sub_config(dev, type)->stop();
    8216:	4621      	mov	r1, r4
    8218:	4630      	mov	r0, r6
    821a:	f7ff ff7d 	bl	8118 <get_sub_config>
    821e:	6843      	ldr	r3, [r0, #4]
    8220:	4798      	blx	r3
	return 0;
    8222:	2000      	movs	r0, #0
}
    8224:	bd70      	pop	{r4, r5, r6, pc}

00008226 <api_stop>:
{
    8226:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    8228:	2280      	movs	r2, #128	; 0x80
    822a:	f7ff ffe7 	bl	81fc <stop>
}
    822e:	bd08      	pop	{r3, pc}

00008230 <async_start>:
{
    8230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8234:	4606      	mov	r6, r0
    8236:	4690      	mov	r8, r2
    8238:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    823a:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    823c:	4629      	mov	r1, r5
    823e:	f7ff ff64 	bl	810a <get_sub_data>
    8242:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    8244:	9906      	ldr	r1, [sp, #24]
    8246:	3008      	adds	r0, #8
    8248:	f7ff ff93 	bl	8172 <set_starting_state>
	if (err < 0) {
    824c:	2800      	cmp	r0, #0
    824e:	db09      	blt.n	8264 <async_start+0x34>
	subdata->cb = cb;
    8250:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    8254:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    8256:	4629      	mov	r1, r5
    8258:	4630      	mov	r0, r6
    825a:	f7ff ff5d 	bl	8118 <get_sub_config>
    825e:	6803      	ldr	r3, [r0, #0]
    8260:	4798      	blx	r3
	return 0;
    8262:	2000      	movs	r0, #0
}
    8264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008268 <api_start>:
{
    8268:	b510      	push	{r4, lr}
    826a:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    826c:	2480      	movs	r4, #128	; 0x80
    826e:	9400      	str	r4, [sp, #0]
    8270:	f7ff ffde 	bl	8230 <async_start>
}
    8274:	b002      	add	sp, #8
    8276:	bd10      	pop	{r4, pc}

00008278 <onoff_started_callback>:
{
    8278:	b510      	push	{r4, lr}
    827a:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    827c:	b2c9      	uxtb	r1, r1
    827e:	f7ff ff51 	bl	8124 <get_onoff_manager>
	notify(mgr, 0);
    8282:	2100      	movs	r1, #0
    8284:	47a0      	blx	r4
}
    8286:	bd10      	pop	{r4, pc}

00008288 <hfclk_start>:
{
    8288:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    828a:	2001      	movs	r0, #1
    828c:	f7fc fcbe 	bl	4c0c <nrfx_clock_start>
}
    8290:	bd08      	pop	{r3, pc}

00008292 <lfclk_start>:
{
    8292:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    8294:	2000      	movs	r0, #0
    8296:	f7fc fcb9 	bl	4c0c <nrfx_clock_start>
}
    829a:	bd08      	pop	{r3, pc}

0000829c <hfclk_stop>:
{
    829c:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    829e:	2001      	movs	r0, #1
    82a0:	f7fc fcec 	bl	4c7c <nrfx_clock_stop>
}
    82a4:	bd08      	pop	{r3, pc}

000082a6 <lfclk_stop>:
{
    82a6:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    82a8:	2000      	movs	r0, #0
    82aa:	f7fc fce7 	bl	4c7c <nrfx_clock_stop>
}
    82ae:	bd08      	pop	{r3, pc}

000082b0 <blocking_start_callback>:
{
    82b0:	b508      	push	{r3, lr}
    82b2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    82b4:	f7fe f86a 	bl	638c <z_impl_k_sem_give>
}
    82b8:	bd08      	pop	{r3, pc}

000082ba <get_pull>:
	if (flags & GPIO_PULL_UP) {
    82ba:	f010 0f10 	tst.w	r0, #16
    82be:	d104      	bne.n	82ca <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    82c0:	f010 0f20 	tst.w	r0, #32
    82c4:	d103      	bne.n	82ce <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    82c6:	2000      	movs	r0, #0
    82c8:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    82ca:	2003      	movs	r0, #3
    82cc:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    82ce:	2001      	movs	r0, #1
}
    82d0:	4770      	bx	lr

000082d2 <gpio_nrfx_port_get_raw>:
	return port->config;
    82d2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    82d4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    82d6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    82da:	600b      	str	r3, [r1, #0]
}
    82dc:	2000      	movs	r0, #0
    82de:	4770      	bx	lr

000082e0 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    82e0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    82e2:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    82e4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    82e8:	4042      	eors	r2, r0
    82ea:	400a      	ands	r2, r1
    82ec:	4042      	eors	r2, r0
    p_reg->OUT = value;
    82ee:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    82f2:	2000      	movs	r0, #0
    82f4:	4770      	bx	lr

000082f6 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    82f6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    82f8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    82fa:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr

00008302 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    8302:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8304:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    8306:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    830a:	2000      	movs	r0, #0
    830c:	4770      	bx	lr

0000830e <gpio_nrfx_port_toggle_bits>:
	return port->config;
    830e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8310:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    8312:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    8316:	404b      	eors	r3, r1
    p_reg->OUT = value;
    8318:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    831c:	2000      	movs	r0, #0
    831e:	4770      	bx	lr

00008320 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    8320:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    8324:	d007      	beq.n	8336 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    8326:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
    832a:	d00d      	beq.n	8348 <get_trigger+0x28>
    832c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    8330:	d008      	beq.n	8344 <get_trigger+0x24>
    8332:	2001      	movs	r0, #1
}
    8334:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    8336:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    833a:	d001      	beq.n	8340 <get_trigger+0x20>
    833c:	2005      	movs	r0, #5
    833e:	4770      	bx	lr
    8340:	2004      	movs	r0, #4
    8342:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    8344:	2002      	movs	r0, #2
    8346:	4770      	bx	lr
    8348:	2003      	movs	r0, #3
    834a:	4770      	bx	lr

0000834c <gpio_nrfx_manage_callback>:
{
    834c:	b470      	push	{r4, r5, r6}
	return port->data;
    834e:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    8350:	1d05      	adds	r5, r0, #4
	return list->head;
    8352:	6843      	ldr	r3, [r0, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    8354:	b1db      	cbz	r3, 838e <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    8356:	460e      	mov	r6, r1
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8358:	2400      	movs	r4, #0
    835a:	e00a      	b.n	8372 <gpio_nrfx_manage_callback+0x26>
	return node->next;
    835c:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    835e:	6043      	str	r3, [r0, #4]
	return list->tail;
    8360:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    8362:	42a1      	cmp	r1, r4
    8364:	d10f      	bne.n	8386 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    8366:	606b      	str	r3, [r5, #4]
}
    8368:	e00d      	b.n	8386 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    836a:	606c      	str	r4, [r5, #4]
}
    836c:	e00b      	b.n	8386 <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    836e:	461c      	mov	r4, r3
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	b15b      	cbz	r3, 838c <gpio_nrfx_manage_callback+0x40>
    8374:	429e      	cmp	r6, r3
    8376:	d1fa      	bne.n	836e <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
    8378:	2c00      	cmp	r4, #0
    837a:	d0ef      	beq.n	835c <gpio_nrfx_manage_callback+0x10>
	return node->next;
    837c:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    837e:	6023      	str	r3, [r4, #0]
	return list->tail;
    8380:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    8382:	4299      	cmp	r1, r3
    8384:	d0f1      	beq.n	836a <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
    8386:	2300      	movs	r3, #0
    8388:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    838a:	e000      	b.n	838e <gpio_nrfx_manage_callback+0x42>
			if (!set) {
    838c:	b152      	cbz	r2, 83a4 <gpio_nrfx_manage_callback+0x58>
				return -EINVAL;
			}
		}
	}

	if (set) {
    838e:	b162      	cbz	r2, 83aa <gpio_nrfx_manage_callback+0x5e>
	return list->head;
    8390:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
    8392:	600b      	str	r3, [r1, #0]
	list->head = node;
    8394:	6041      	str	r1, [r0, #4]
	return list->tail;
    8396:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    8398:	b10b      	cbz	r3, 839e <gpio_nrfx_manage_callback+0x52>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    839a:	2000      	movs	r0, #0
    839c:	e006      	b.n	83ac <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    839e:	6069      	str	r1, [r5, #4]
    83a0:	2000      	movs	r0, #0
}
    83a2:	e003      	b.n	83ac <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
    83a4:	f06f 0015 	mvn.w	r0, #21
    83a8:	e000      	b.n	83ac <gpio_nrfx_manage_callback+0x60>
	return 0;
    83aa:	2000      	movs	r0, #0
}
    83ac:	bc70      	pop	{r4, r5, r6}
    83ae:	4770      	bx	lr

000083b0 <nrfx_gpio_handler>:
{
    83b0:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
    83b2:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    83b6:	0940      	lsrs	r0, r0, #5
    83b8:	f7fb faa6 	bl	3908 <get_dev>
	if (port == NULL) {
    83bc:	b1d8      	cbz	r0, 83f6 <nrfx_gpio_handler+0x46>
    83be:	4606      	mov	r6, r0
	return port->data;
    83c0:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    83c2:	2501      	movs	r5, #1
    83c4:	40a5      	lsls	r5, r4
	return list->head;
    83c6:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    83c8:	b119      	cbz	r1, 83d2 <nrfx_gpio_handler+0x22>
    83ca:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    83cc:	b149      	cbz	r1, 83e2 <nrfx_gpio_handler+0x32>
	return node->next;
    83ce:	680c      	ldr	r4, [r1, #0]
    83d0:	e007      	b.n	83e2 <nrfx_gpio_handler+0x32>
    83d2:	460c      	mov	r4, r1
    83d4:	e005      	b.n	83e2 <nrfx_gpio_handler+0x32>
    83d6:	b164      	cbz	r4, 83f2 <nrfx_gpio_handler+0x42>
    83d8:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    83da:	b104      	cbz	r4, 83de <nrfx_gpio_handler+0x2e>
	return node->next;
    83dc:	6823      	ldr	r3, [r4, #0]
    83de:	4621      	mov	r1, r4
    83e0:	461c      	mov	r4, r3
    83e2:	b141      	cbz	r1, 83f6 <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
    83e4:	688a      	ldr	r2, [r1, #8]
    83e6:	402a      	ands	r2, r5
    83e8:	d0f5      	beq.n	83d6 <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    83ea:	684b      	ldr	r3, [r1, #4]
    83ec:	4630      	mov	r0, r6
    83ee:	4798      	blx	r3
    83f0:	e7f1      	b.n	83d6 <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    83f2:	4623      	mov	r3, r4
    83f4:	e7f3      	b.n	83de <nrfx_gpio_handler+0x2e>
}
    83f6:	bd70      	pop	{r4, r5, r6, pc}

000083f8 <led_pwm_on>:
{
    83f8:	b508      	push	{r3, lr}
	return led_pwm_set_brightness(dev, led, 100);
    83fa:	2264      	movs	r2, #100	; 0x64
    83fc:	f7f7 fffc 	bl	3f8 <led_pwm_set_brightness>
}
    8400:	bd08      	pop	{r3, pc}

00008402 <led_pwm_off>:
{
    8402:	b508      	push	{r3, lr}
	return led_pwm_set_brightness(dev, led, 0);
    8404:	2200      	movs	r2, #0
    8406:	f7f7 fff7 	bl	3f8 <led_pwm_set_brightness>
}
    840a:	bd08      	pop	{r3, pc}

0000840c <pwm_channel_map>:
{
    840c:	4602      	mov	r2, r0
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    840e:	2000      	movs	r0, #0
    8410:	e001      	b.n	8416 <pwm_channel_map+0xa>
    8412:	3001      	adds	r0, #1
    8414:	b2c0      	uxtb	r0, r0
    8416:	2803      	cmp	r0, #3
    8418:	d807      	bhi.n	842a <pwm_channel_map+0x1e>
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
    841a:	5c13      	ldrb	r3, [r2, r0]
    841c:	2bff      	cmp	r3, #255	; 0xff
    841e:	d0f8      	beq.n	8412 <pwm_channel_map+0x6>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
    8420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8424:	428b      	cmp	r3, r1
    8426:	d1f4      	bne.n	8412 <pwm_channel_map+0x6>
    8428:	e000      	b.n	842c <pwm_channel_map+0x20>
	return NRF_PWM_CHANNEL_COUNT;
    842a:	2004      	movs	r0, #4
}
    842c:	4770      	bx	lr

0000842e <pwm_channel_is_active>:
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    842e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8432:	8883      	ldrh	r3, [r0, #4]
	uint16_t pulse_cycle =
    8434:	f3c3 030e 	ubfx	r3, r3, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    8438:	b123      	cbz	r3, 8444 <pwm_channel_is_active+0x16>
    843a:	898a      	ldrh	r2, [r1, #12]
    843c:	429a      	cmp	r2, r3
    843e:	d803      	bhi.n	8448 <pwm_channel_is_active+0x1a>
    8440:	2000      	movs	r0, #0
    8442:	4770      	bx	lr
    8444:	2000      	movs	r0, #0
    8446:	4770      	bx	lr
    8448:	2001      	movs	r0, #1
}
    844a:	4770      	bx	lr

0000844c <any_other_channel_is_active>:
{
    844c:	b570      	push	{r4, r5, r6, lr}
    844e:	4605      	mov	r5, r0
    8450:	460e      	mov	r6, r1
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    8452:	2400      	movs	r4, #0
    8454:	e001      	b.n	845a <any_other_channel_is_active+0xe>
    8456:	3401      	adds	r4, #1
    8458:	b2e4      	uxtb	r4, r4
    845a:	2c03      	cmp	r4, #3
    845c:	d809      	bhi.n	8472 <any_other_channel_is_active+0x26>
		if (i != channel && pwm_channel_is_active(i, data)) {
    845e:	42ac      	cmp	r4, r5
    8460:	d0f9      	beq.n	8456 <any_other_channel_is_active+0xa>
    8462:	4631      	mov	r1, r6
    8464:	4620      	mov	r0, r4
    8466:	f7ff ffe2 	bl	842e <pwm_channel_is_active>
    846a:	4603      	mov	r3, r0
    846c:	2800      	cmp	r0, #0
    846e:	d0f2      	beq.n	8456 <any_other_channel_is_active+0xa>
    8470:	e000      	b.n	8474 <any_other_channel_is_active+0x28>
	return false;
    8472:	2300      	movs	r3, #0
}
    8474:	4618      	mov	r0, r3
    8476:	bd70      	pop	{r4, r5, r6, pc}

00008478 <endtx_isr>:
	return dev->config;
    8478:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    847a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    847c:	f04f 0120 	mov.w	r1, #32
    8480:	f3ef 8211 	mrs	r2, BASEPRI
    8484:	f381 8812 	msr	BASEPRI_MAX, r1
    8488:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    848c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    8490:	b131      	cbz	r1, 84a0 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8492:	2100      	movs	r1, #0
    8494:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    8498:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    849c:	2101      	movs	r1, #1
    849e:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    84a0:	f382 8811 	msr	BASEPRI, r2
    84a4:	f3bf 8f6f 	isb	sy
}
    84a8:	4770      	bx	lr

000084aa <uarte_nrfx_isr_int>:
{
    84aa:	b538      	push	{r3, r4, r5, lr}
    84ac:	4604      	mov	r4, r0
	return dev->config;
    84ae:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    84b0:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    84b2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    84b6:	f413 7f80 	tst.w	r3, #256	; 0x100
    84ba:	d002      	beq.n	84c2 <uarte_nrfx_isr_int+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    84bc:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    84c0:	b9db      	cbnz	r3, 84fa <uarte_nrfx_isr_int+0x50>
	return dev->config;
    84c2:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    84c4:	685b      	ldr	r3, [r3, #4]
    84c6:	f013 0f10 	tst.w	r3, #16
    84ca:	d015      	beq.n	84f8 <uarte_nrfx_isr_int+0x4e>
	__asm__ volatile(
    84cc:	f04f 0220 	mov.w	r2, #32
    84d0:	f3ef 8311 	mrs	r3, BASEPRI
    84d4:	f382 8812 	msr	BASEPRI_MAX, r2
    84d8:	f3bf 8f6f 	isb	sy
    84dc:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    84e0:	b112      	cbz	r2, 84e8 <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    84e2:	2200      	movs	r2, #0
    84e4:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    84e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    84ec:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
    84f0:	f383 8811 	msr	BASEPRI, r3
    84f4:	f3bf 8f6f 	isb	sy
}
    84f8:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    84fa:	f7ff ffbd 	bl	8478 <endtx_isr>
    84fe:	e7e0      	b.n	84c2 <uarte_nrfx_isr_int+0x18>

00008500 <uarte_nrfx_configure>:
{
    8500:	b570      	push	{r4, r5, r6, lr}
    8502:	b082      	sub	sp, #8
    8504:	4605      	mov	r5, r0
    8506:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
    8508:	794b      	ldrb	r3, [r1, #5]
    850a:	2b01      	cmp	r3, #1
    850c:	d006      	beq.n	851c <uarte_nrfx_configure+0x1c>
    850e:	2b03      	cmp	r3, #3
    8510:	d011      	beq.n	8536 <uarte_nrfx_configure+0x36>
    8512:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    8516:	4618      	mov	r0, r3
    8518:	b002      	add	sp, #8
    851a:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    851c:	2300      	movs	r3, #0
    851e:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    8522:	79a3      	ldrb	r3, [r4, #6]
    8524:	2b03      	cmp	r3, #3
    8526:	d138      	bne.n	859a <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    8528:	79e3      	ldrb	r3, [r4, #7]
    852a:	b143      	cbz	r3, 853e <uarte_nrfx_configure+0x3e>
    852c:	2b01      	cmp	r3, #1
    852e:	d010      	beq.n	8552 <uarte_nrfx_configure+0x52>
    8530:	f06f 0385 	mvn.w	r3, #133	; 0x85
    8534:	e7ef      	b.n	8516 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    8536:	2310      	movs	r3, #16
    8538:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    853c:	e7f1      	b.n	8522 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    853e:	2300      	movs	r3, #0
    8540:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    8544:	7923      	ldrb	r3, [r4, #4]
    8546:	b143      	cbz	r3, 855a <uarte_nrfx_configure+0x5a>
    8548:	2b02      	cmp	r3, #2
    854a:	d022      	beq.n	8592 <uarte_nrfx_configure+0x92>
    854c:	f06f 0385 	mvn.w	r3, #133	; 0x85
    8550:	e7e1      	b.n	8516 <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    8552:	2301      	movs	r3, #1
    8554:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    8558:	e7f4      	b.n	8544 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    855a:	2300      	movs	r3, #0
    855c:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    8560:	6821      	ldr	r1, [r4, #0]
    8562:	4628      	mov	r0, r5
    8564:	f7fb fdfe 	bl	4164 <baudrate_set>
    8568:	4603      	mov	r3, r0
    856a:	b9c8      	cbnz	r0, 85a0 <uarte_nrfx_configure+0xa0>
	return dev->config;
    856c:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    856e:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    8570:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    8574:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    8578:	f89d 2004 	ldrb.w	r2, [sp, #4]
    857c:	4331      	orrs	r1, r6
    857e:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    8580:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
    8584:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
    8586:	3204      	adds	r2, #4
    8588:	e894 0003 	ldmia.w	r4, {r0, r1}
    858c:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
    8590:	e7c1      	b.n	8516 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    8592:	230e      	movs	r3, #14
    8594:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    8598:	e7e2      	b.n	8560 <uarte_nrfx_configure+0x60>
		return -ENOTSUP;
    859a:	f06f 0385 	mvn.w	r3, #133	; 0x85
    859e:	e7ba      	b.n	8516 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
    85a0:	f06f 0385 	mvn.w	r3, #133	; 0x85
    85a4:	e7b7      	b.n	8516 <uarte_nrfx_configure+0x16>

000085a6 <uarte_nrfx_config_get>:
{
    85a6:	460b      	mov	r3, r1
	return dev->data;
    85a8:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
    85aa:	6891      	ldr	r1, [r2, #8]
    85ac:	6850      	ldr	r0, [r2, #4]
    85ae:	e883 0003 	stmia.w	r3, {r0, r1}
}
    85b2:	2000      	movs	r0, #0
    85b4:	4770      	bx	lr

000085b6 <uarte_nrfx_err_check>:
	return dev->config;
    85b6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    85b8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    85ba:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    85be:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    85c2:	4770      	bx	lr

000085c4 <is_tx_ready>:
	return dev->config;
    85c4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    85c6:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    85c8:	685b      	ldr	r3, [r3, #4]
    85ca:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    85ce:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    85d2:	b929      	cbnz	r1, 85e0 <is_tx_ready+0x1c>
    85d4:	b933      	cbnz	r3, 85e4 <is_tx_ready+0x20>
    85d6:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    85da:	b92b      	cbnz	r3, 85e8 <is_tx_ready+0x24>
    85dc:	2000      	movs	r0, #0
    85de:	4770      	bx	lr
    85e0:	2001      	movs	r0, #1
    85e2:	4770      	bx	lr
    85e4:	2000      	movs	r0, #0
    85e6:	4770      	bx	lr
    85e8:	2001      	movs	r0, #1
}
    85ea:	4770      	bx	lr

000085ec <uarte_enable>:
	return dev->config;
    85ec:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    85ee:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    85f0:	2208      	movs	r2, #8
    85f2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    85f6:	4770      	bx	lr

000085f8 <tx_start>:
{
    85f8:	b510      	push	{r4, lr}
	return dev->config;
    85fa:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    85fc:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    85fe:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    8602:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8606:	2300      	movs	r3, #0
    8608:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    860c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    8610:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
    8614:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
    8618:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    861a:	685b      	ldr	r3, [r3, #4]
    861c:	f013 0f10 	tst.w	r3, #16
    8620:	d102      	bne.n	8628 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8622:	2301      	movs	r3, #1
    8624:	60a3      	str	r3, [r4, #8]
}
    8626:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    8628:	2101      	movs	r1, #1
    862a:	f7ff ffdf 	bl	85ec <uarte_enable>
    p_reg->INTENSET = mask;
    862e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    8632:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    8636:	e7f4      	b.n	8622 <tx_start+0x2a>

00008638 <uarte_nrfx_poll_in>:
{
    8638:	b410      	push	{r4}
	return dev->data;
    863a:	6904      	ldr	r4, [r0, #16]
	return dev->config;
    863c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    863e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8640:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8644:	b152      	cbz	r2, 865c <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    8646:	7c62      	ldrb	r2, [r4, #17]
    8648:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    864a:	2000      	movs	r0, #0
    864c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    8650:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8654:	2201      	movs	r2, #1
    8656:	601a      	str	r2, [r3, #0]
}
    8658:	bc10      	pop	{r4}
    865a:	4770      	bx	lr
		return -1;
    865c:	f04f 30ff 	mov.w	r0, #4294967295
    8660:	e7fa      	b.n	8658 <uarte_nrfx_poll_in+0x20>

00008662 <wait_tx_ready>:
{
    8662:	b570      	push	{r4, r5, r6, lr}
    8664:	4606      	mov	r6, r0
    8666:	e014      	b.n	8692 <wait_tx_ready+0x30>
		if (res) {
    8668:	b17d      	cbz	r5, 868a <wait_tx_ready+0x28>
	__asm__ volatile(
    866a:	f04f 0320 	mov.w	r3, #32
    866e:	f3ef 8411 	mrs	r4, BASEPRI
    8672:	f383 8812 	msr	BASEPRI_MAX, r3
    8676:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    867a:	4630      	mov	r0, r6
    867c:	f7ff ffa2 	bl	85c4 <is_tx_ready>
    8680:	b9a0      	cbnz	r0, 86ac <wait_tx_ready+0x4a>
	__asm__ volatile(
    8682:	f384 8811 	msr	BASEPRI, r4
    8686:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    868a:	2021      	movs	r0, #33	; 0x21
    868c:	2100      	movs	r1, #0
    868e:	f7fe fa5b 	bl	6b48 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    8692:	2464      	movs	r4, #100	; 0x64
    8694:	4630      	mov	r0, r6
    8696:	f7ff ff95 	bl	85c4 <is_tx_ready>
    869a:	4605      	mov	r5, r0
    869c:	2800      	cmp	r0, #0
    869e:	d1e3      	bne.n	8668 <wait_tx_ready+0x6>
    86a0:	2001      	movs	r0, #1
    86a2:	f000 f8f8 	bl	8896 <nrfx_busy_wait>
    86a6:	3c01      	subs	r4, #1
    86a8:	d1f4      	bne.n	8694 <wait_tx_ready+0x32>
    86aa:	e7dd      	b.n	8668 <wait_tx_ready+0x6>
}
    86ac:	4620      	mov	r0, r4
    86ae:	bd70      	pop	{r4, r5, r6, pc}

000086b0 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    86b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    86b2:	4604      	mov	r4, r0
	return dev->config;
    86b4:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
    86b6:	6835      	ldr	r5, [r6, #0]
	return dev->data;
    86b8:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    86ba:	2100      	movs	r1, #0
    86bc:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    86c0:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
    86c2:	f7fb fc81 	bl	3fc8 <uarte_nrfx_pins_configure>
	return dev->data;
    86c6:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    86c8:	3104      	adds	r1, #4
    86ca:	4620      	mov	r0, r4
    86cc:	f7ff ff18 	bl	8500 <uarte_nrfx_configure>
	if (err) {
    86d0:	4604      	mov	r4, r0
    86d2:	bb68      	cbnz	r0, 8730 <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    86d4:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    86d6:	f013 0f02 	tst.w	r3, #2
    86da:	d12b      	bne.n	8734 <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    86dc:	2308      	movs	r3, #8
    86de:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    86e2:	7a33      	ldrb	r3, [r6, #8]
    86e4:	b95b      	cbnz	r3, 86fe <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    86e6:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    86ea:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    86ee:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    86f2:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    86f6:	2301      	movs	r3, #1
    86f8:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    86fc:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    86fe:	6873      	ldr	r3, [r6, #4]
    8700:	f013 0f02 	tst.w	r3, #2
    8704:	d103      	bne.n	870e <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
    8706:	f44f 7380 	mov.w	r3, #256	; 0x100
    870a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    870e:	6873      	ldr	r3, [r6, #4]
    8710:	f013 0f10 	tst.w	r3, #16
    8714:	d003      	beq.n	871e <uarte_instance_init+0x6e>
    8716:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    871a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    871e:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8720:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    8724:	2300      	movs	r3, #0
    8726:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    872a:	2301      	movs	r3, #1
    872c:	60ab      	str	r3, [r5, #8]
    872e:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    8730:	4620      	mov	r0, r4
    8732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    8734:	4639      	mov	r1, r7
    8736:	4628      	mov	r0, r5
    8738:	f7fb fdf4 	bl	4324 <endtx_stoptx_ppi_init>
		if (err < 0) {
    873c:	2800      	cmp	r0, #0
    873e:	dacd      	bge.n	86dc <uarte_instance_init+0x2c>
			return err;
    8740:	4604      	mov	r4, r0
    8742:	e7f5      	b.n	8730 <uarte_instance_init+0x80>

00008744 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    8744:	b510      	push	{r4, lr}
    8746:	4604      	mov	r4, r0
    8748:	2200      	movs	r2, #0
    874a:	2101      	movs	r1, #1
    874c:	2002      	movs	r0, #2
    874e:	f7fa f811 	bl	2774 <z_arm_irq_priority_set>
    8752:	2002      	movs	r0, #2
    8754:	f7f9 fff0 	bl	2738 <arch_irq_enable>
    8758:	2100      	movs	r1, #0
    875a:	4620      	mov	r0, r4
    875c:	f7ff ffa8 	bl	86b0 <uarte_instance_init>
    8760:	bd10      	pop	{r4, pc}

00008762 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    8762:	b510      	push	{r4, lr}
    8764:	4604      	mov	r4, r0
    8766:	2200      	movs	r2, #0
    8768:	2101      	movs	r1, #1
    876a:	2028      	movs	r0, #40	; 0x28
    876c:	f7fa f802 	bl	2774 <z_arm_irq_priority_set>
    8770:	2028      	movs	r0, #40	; 0x28
    8772:	f7f9 ffe1 	bl	2738 <arch_irq_enable>
    8776:	2100      	movs	r1, #0
    8778:	4620      	mov	r0, r4
    877a:	f7ff ff99 	bl	86b0 <uarte_instance_init>
    877e:	bd10      	pop	{r4, pc}

00008780 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    8780:	4770      	bx	lr

00008782 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    8782:	1a40      	subs	r0, r0, r1
}
    8784:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8788:	4770      	bx	lr

0000878a <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    878a:	f100 0350 	add.w	r3, r0, #80	; 0x50
    878e:	009b      	lsls	r3, r3, #2
    8790:	b29b      	uxth	r3, r3
    8792:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8796:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    879a:	2200      	movs	r2, #0
    879c:	601a      	str	r2, [r3, #0]
    879e:	681b      	ldr	r3, [r3, #0]
}
    87a0:	4770      	bx	lr

000087a2 <absolute_time_to_cc>:
}
    87a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    87a6:	4770      	bx	lr

000087a8 <full_int_lock>:
	__asm__ volatile(
    87a8:	f04f 0320 	mov.w	r3, #32
    87ac:	f3ef 8011 	mrs	r0, BASEPRI
    87b0:	f383 8812 	msr	BASEPRI_MAX, r3
    87b4:	f3bf 8f6f 	isb	sy
}
    87b8:	4770      	bx	lr

000087ba <full_int_unlock>:
	__asm__ volatile(
    87ba:	f380 8811 	msr	BASEPRI, r0
    87be:	f3bf 8f6f 	isb	sy
}
    87c2:	4770      	bx	lr

000087c4 <set_absolute_alarm>:
{
    87c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87c6:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    87c8:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    87cc:	f7fb fdee 	bl	43ac <get_comparator>
    87d0:	4607      	mov	r7, r0
    87d2:	e019      	b.n	8808 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    87d4:	2013      	movs	r0, #19
    87d6:	f000 fb5c 	bl	8e92 <z_impl_k_busy_wait>
}
    87da:	e022      	b.n	8822 <set_absolute_alarm+0x5e>
		event_clear(chan);
    87dc:	4630      	mov	r0, r6
    87de:	f7ff ffd4 	bl	878a <event_clear>
		event_enable(chan);
    87e2:	4630      	mov	r0, r6
    87e4:	f7fb fdea 	bl	43bc <event_enable>
		set_comparator(chan, cc_val);
    87e8:	4629      	mov	r1, r5
    87ea:	4630      	mov	r0, r6
    87ec:	f7fb fdd4 	bl	4398 <set_comparator>
		now2 = counter();
    87f0:	f7fb fdf8 	bl	43e4 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    87f4:	4284      	cmp	r4, r0
    87f6:	d01e      	beq.n	8836 <set_absolute_alarm+0x72>
    87f8:	1c81      	adds	r1, r0, #2
    87fa:	4628      	mov	r0, r5
    87fc:	f7ff ffc1 	bl	8782 <counter_sub>
	} while ((now2 != now) &&
    8800:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8804:	d917      	bls.n	8836 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    8806:	462f      	mov	r7, r5
		now = counter();
    8808:	f7fb fdec 	bl	43e4 <counter>
    880c:	4604      	mov	r4, r0
		set_comparator(chan, now);
    880e:	4601      	mov	r1, r0
    8810:	4630      	mov	r0, r6
    8812:	f7fb fdc1 	bl	4398 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    8816:	4621      	mov	r1, r4
    8818:	4638      	mov	r0, r7
    881a:	f7ff ffb2 	bl	8782 <counter_sub>
    881e:	2801      	cmp	r0, #1
    8820:	d0d8      	beq.n	87d4 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    8822:	1ca7      	adds	r7, r4, #2
    8824:	4639      	mov	r1, r7
    8826:	4628      	mov	r0, r5
    8828:	f7ff ffab 	bl	8782 <counter_sub>
    882c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8830:	d9d4      	bls.n	87dc <set_absolute_alarm+0x18>
			cc_val = now + 2;
    8832:	463d      	mov	r5, r7
    8834:	e7d2      	b.n	87dc <set_absolute_alarm+0x18>
}
    8836:	4628      	mov	r0, r5
    8838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000883a <compare_set>:
{
    883a:	b5f0      	push	{r4, r5, r6, r7, lr}
    883c:	b083      	sub	sp, #12
    883e:	4604      	mov	r4, r0
    8840:	4617      	mov	r7, r2
    8842:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    8844:	f7fb fdd4 	bl	43f0 <compare_int_lock>
    8848:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    884a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    884c:	9301      	str	r3, [sp, #4]
    884e:	9b08      	ldr	r3, [sp, #32]
    8850:	9300      	str	r3, [sp, #0]
    8852:	463a      	mov	r2, r7
    8854:	462b      	mov	r3, r5
    8856:	4620      	mov	r0, r4
    8858:	f7fb feb8 	bl	45cc <compare_set_nolocks>
    885c:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    885e:	4631      	mov	r1, r6
    8860:	4620      	mov	r0, r4
    8862:	f7fb fe29 	bl	44b8 <compare_int_unlock>
}
    8866:	4628      	mov	r0, r5
    8868:	b003      	add	sp, #12
    886a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000886c <sys_clock_cycle_get_32>:
{
    886c:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    886e:	f7fb fe8d 	bl	458c <z_nrf_rtc_timer_read>
}
    8872:	bd08      	pop	{r3, pc}

00008874 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    8874:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    8876:	f7fe fc17 	bl	70a8 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    887a:	bd08      	pop	{r3, pc}

0000887c <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    887c:	b510      	push	{r4, lr}
    887e:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    8880:	f7f9 fe1c 	bl	24bc <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    8884:	f7f9 fed8 	bl	2638 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    8888:	4620      	mov	r0, r4
    888a:	f7ff fff3 	bl	8874 <hw_cc3xx_init_internal>
	return res;
}
    888e:	bd10      	pop	{r4, pc}

00008890 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    8890:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    8892:	4780      	blx	r0
}
    8894:	bd08      	pop	{r3, pc}

00008896 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    8896:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    8898:	f000 fafb 	bl	8e92 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    889c:	bd08      	pop	{r3, pc}

0000889e <nrfx_clock_enable>:
{
    889e:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    88a0:	2000      	movs	r0, #0
    88a2:	f7f9 ff59 	bl	2758 <arch_irq_is_enabled>
    88a6:	b100      	cbz	r0, 88aa <nrfx_clock_enable+0xc>
}
    88a8:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    88aa:	f7f9 ff45 	bl	2738 <arch_irq_enable>
    88ae:	e7fb      	b.n	88a8 <nrfx_clock_enable+0xa>

000088b0 <pin_is_task_output>:
{
    88b0:	b510      	push	{r4, lr}
    88b2:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    88b4:	f7fc facc 	bl	4e50 <pin_is_output>
    88b8:	b128      	cbz	r0, 88c6 <pin_is_task_output+0x16>
    88ba:	4620      	mov	r0, r4
    88bc:	f7fc fab2 	bl	4e24 <pin_in_use_by_te>
    88c0:	b118      	cbz	r0, 88ca <pin_is_task_output+0x1a>
    88c2:	2001      	movs	r0, #1
    88c4:	e000      	b.n	88c8 <pin_is_task_output+0x18>
    88c6:	2000      	movs	r0, #0
}
    88c8:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    88ca:	2000      	movs	r0, #0
    88cc:	e7fc      	b.n	88c8 <pin_is_task_output+0x18>

000088ce <pin_is_input>:
{
    88ce:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    88d0:	f7fc fabe 	bl	4e50 <pin_is_output>
    88d4:	f080 0001 	eor.w	r0, r0, #1
}
    88d8:	b2c0      	uxtb	r0, r0
    88da:	bd08      	pop	{r3, pc}

000088dc <gpiote_polarity_to_trigger>:
}
    88dc:	4770      	bx	lr

000088de <gpiote_trigger_to_polarity>:
}
    88de:	4770      	bx	lr

000088e0 <is_level>:
}
    88e0:	2803      	cmp	r0, #3
    88e2:	bf94      	ite	ls
    88e4:	2000      	movls	r0, #0
    88e6:	2001      	movhi	r0, #1
    88e8:	4770      	bx	lr

000088ea <start_playback>:
{
    88ea:	b410      	push	{r4}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    88ec:	2402      	movs	r4, #2
    88ee:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
    88f0:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
    88f2:	6809      	ldr	r1, [r1, #0]
    88f4:	b181      	cbz	r1, 8918 <start_playback+0x2e>
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ0)
    88f6:	f012 0f04 	tst.w	r2, #4
    88fa:	d11c      	bne.n	8936 <start_playback+0x4c>
        uint32_t int_mask = NRF_PWM_INT_LOOPSDONE_MASK |
    88fc:	2182      	movs	r1, #130	; 0x82
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    88fe:	f012 0f08 	tst.w	r2, #8
    8902:	d001      	beq.n	8908 <start_playback+0x1e>
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    8904:	f041 0120 	orr.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    8908:	f012 0f10 	tst.w	r2, #16
    890c:	d001      	beq.n	8912 <start_playback+0x28>
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    890e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
        nrf_pwm_int_set(p_instance->p_registers, int_mask);
    8912:	6804      	ldr	r4, [r0, #0]
    p_reg->INTEN = mask;
    8914:	f8c4 1300 	str.w	r1, [r4, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
    8918:	6801      	ldr	r1, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    891a:	2400      	movs	r4, #0
    891c:	f8c1 4104 	str.w	r4, [r1, #260]	; 0x104
    8920:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    8924:	f012 0f80 	tst.w	r2, #128	; 0x80
    8928:	d107      	bne.n	893a <start_playback+0x50>
    nrf_pwm_task_trigger(p_instance->p_registers, starting_task);
    892a:	6802      	ldr	r2, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    892c:	2101      	movs	r1, #1
    892e:	50d1      	str	r1, [r2, r3]
    return 0;
    8930:	2000      	movs	r0, #0
}
    8932:	bc10      	pop	{r4}
    8934:	4770      	bx	lr
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    8936:	2192      	movs	r1, #146	; 0x92
    8938:	e7e1      	b.n	88fe <start_playback+0x14>
            nrf_pwm_task_address_get(p_instance->p_registers, starting_task);
    893a:	6800      	ldr	r0, [r0, #0]
    return ((uint32_t)p_reg + (uint32_t)task);
    893c:	4418      	add	r0, r3
        return starting_task_address;
    893e:	e7f8      	b.n	8932 <start_playback+0x48>

00008940 <nrfx_pwm_stop>:
{
    8940:	b538      	push	{r3, r4, r5, lr}
    8942:	4604      	mov	r4, r0
    8944:	460d      	mov	r5, r1
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    8946:	6803      	ldr	r3, [r0, #0]
    p_reg->SHORTS = mask;
    8948:	2200      	movs	r2, #0
    894a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    nrf_pwm_task_trigger(p_instance->p_registers, NRF_PWM_TASK_STOP);
    894e:	6803      	ldr	r3, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8950:	2201      	movs	r2, #1
    8952:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
    8954:	f7fd f83c 	bl	59d0 <nrfx_pwm_is_stopped>
    8958:	4603      	mov	r3, r0
    895a:	b938      	cbnz	r0, 896c <nrfx_pwm_stop+0x2c>
            if (nrfx_pwm_is_stopped(p_instance))
    895c:	4620      	mov	r0, r4
    895e:	f7fd f837 	bl	59d0 <nrfx_pwm_is_stopped>
    8962:	4603      	mov	r3, r0
    8964:	b910      	cbnz	r0, 896c <nrfx_pwm_stop+0x2c>
        } while (wait_until_stopped);
    8966:	2d00      	cmp	r5, #0
    8968:	d1f8      	bne.n	895c <nrfx_pwm_stop+0x1c>
    bool ret_val = false;
    896a:	462b      	mov	r3, r5
}
    896c:	4618      	mov	r0, r3
    896e:	bd38      	pop	{r3, r4, r5, pc}

00008970 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    8970:	b508      	push	{r3, lr}
  _DoInit();
    8972:	f7fd f849 	bl	5a08 <_DoInit>
}
    8976:	bd08      	pop	{r3, pc}

00008978 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    8978:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    897a:	f7ff fff9 	bl	8970 <SEGGER_RTT_Init>

	return 0;
}
    897e:	2000      	movs	r0, #0
    8980:	bd08      	pop	{r3, pc}

00008982 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    8982:	b148      	cbz	r0, 8998 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    8984:	68c3      	ldr	r3, [r0, #12]
    8986:	8818      	ldrh	r0, [r3, #0]
    8988:	f3c0 0008 	ubfx	r0, r0, #0, #9
    898c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    8990:	bf14      	ite	ne
    8992:	2000      	movne	r0, #0
    8994:	2001      	moveq	r0, #1
    8996:	4770      	bx	lr
		return false;
    8998:	2000      	movs	r0, #0
}
    899a:	4770      	bx	lr

0000899c <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    899c:	68c2      	ldr	r2, [r0, #12]
    899e:	6903      	ldr	r3, [r0, #16]
    89a0:	431a      	orrs	r2, r3
    89a2:	f012 0203 	ands.w	r2, r2, #3
    89a6:	d10d      	bne.n	89c4 <create_free_list+0x28>
	slab->free_list = NULL;
    89a8:	2100      	movs	r1, #0
    89aa:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    89ac:	e005      	b.n	89ba <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    89ae:	6941      	ldr	r1, [r0, #20]
    89b0:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    89b2:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    89b4:	68c1      	ldr	r1, [r0, #12]
    89b6:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    89b8:	3201      	adds	r2, #1
    89ba:	6881      	ldr	r1, [r0, #8]
    89bc:	4291      	cmp	r1, r2
    89be:	d8f6      	bhi.n	89ae <create_free_list+0x12>
	return 0;
    89c0:	2000      	movs	r0, #0
    89c2:	4770      	bx	lr
		return -EINVAL;
    89c4:	f06f 0015 	mvn.w	r0, #21
}
    89c8:	4770      	bx	lr

000089ca <k_mem_slab_init>:
{
    89ca:	b510      	push	{r4, lr}
    89cc:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    89ce:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    89d0:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    89d2:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    89d4:	2300      	movs	r3, #0
    89d6:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    89d8:	f7ff ffe0 	bl	899c <create_free_list>
	if (rc < 0) {
    89dc:	2800      	cmp	r0, #0
    89de:	db01      	blt.n	89e4 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    89e0:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    89e2:	6064      	str	r4, [r4, #4]
}
    89e4:	bd10      	pop	{r4, pc}

000089e6 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    89e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    89e8:	4604      	mov	r4, r0
    89ea:	460d      	mov	r5, r1
	__asm__ volatile(
    89ec:	f04f 0320 	mov.w	r3, #32
    89f0:	f3ef 8611 	mrs	r6, BASEPRI
    89f4:	f383 8812 	msr	BASEPRI_MAX, r3
    89f8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    89fc:	6943      	ldr	r3, [r0, #20]
    89fe:	b163      	cbz	r3, 8a1a <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    8a00:	682b      	ldr	r3, [r5, #0]
    8a02:	6962      	ldr	r2, [r4, #20]
    8a04:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    8a06:	682b      	ldr	r3, [r5, #0]
    8a08:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    8a0a:	69a3      	ldr	r3, [r4, #24]
    8a0c:	3b01      	subs	r3, #1
    8a0e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    8a10:	f386 8811 	msr	BASEPRI, r6
    8a14:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    8a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a1a:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    8a1e:	f000 f98f 	bl	8d40 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    8a22:	2800      	cmp	r0, #0
    8a24:	d0ec      	beq.n	8a00 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    8a26:	682a      	ldr	r2, [r5, #0]
    8a28:	2100      	movs	r1, #0
    8a2a:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    8a2e:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    8a30:	f000 f8c4 	bl	8bbc <z_ready_thread>
			z_reschedule(&slab->lock, key);
    8a34:	4631      	mov	r1, r6
    8a36:	4638      	mov	r0, r7
    8a38:	f7fd fd58 	bl	64ec <z_reschedule>
			return;
    8a3c:	e7ec      	b.n	8a18 <k_mem_slab_free+0x32>

00008a3e <setup_thread_stack>:
{
    8a3e:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    8a40:	3207      	adds	r2, #7
    8a42:	f022 0207 	bic.w	r2, r2, #7
    8a46:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    8a4a:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    8a4e:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    8a52:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    8a56:	2200      	movs	r2, #0
    8a58:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    8a5c:	18c8      	adds	r0, r1, r3
    8a5e:	bc10      	pop	{r4}
    8a60:	4770      	bx	lr

00008a62 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8a62:	f3ef 8005 	mrs	r0, IPSR
}
    8a66:	3800      	subs	r0, #0
    8a68:	bf18      	it	ne
    8a6a:	2001      	movne	r0, #1
    8a6c:	4770      	bx	lr

00008a6e <k_thread_name_get>:
}
    8a6e:	3074      	adds	r0, #116	; 0x74
    8a70:	4770      	bx	lr

00008a72 <z_impl_k_thread_start>:
{
    8a72:	b508      	push	{r3, lr}
	z_sched_start(thread);
    8a74:	f7fd fe64 	bl	6740 <z_sched_start>
}
    8a78:	bd08      	pop	{r3, pc}

00008a7a <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    8a7a:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    8a7c:	2400      	movs	r4, #0
    8a7e:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    8a80:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    8a82:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    8a84:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    8a86:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    8a88:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    8a8a:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    8a8c:	bc10      	pop	{r4}
    8a8e:	4770      	bx	lr

00008a90 <z_impl_k_thread_create>:
{
    8a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a92:	b087      	sub	sp, #28
    8a94:	4604      	mov	r4, r0
    8a96:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8a9a:	2500      	movs	r5, #0
    8a9c:	9505      	str	r5, [sp, #20]
    8a9e:	9d10      	ldr	r5, [sp, #64]	; 0x40
    8aa0:	9504      	str	r5, [sp, #16]
    8aa2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    8aa4:	9503      	str	r5, [sp, #12]
    8aa6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    8aa8:	9502      	str	r5, [sp, #8]
    8aaa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    8aac:	9501      	str	r5, [sp, #4]
    8aae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    8ab0:	9500      	str	r5, [sp, #0]
    8ab2:	f7fd fad3 	bl	605c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    8ab6:	f1b7 3fff 	cmp.w	r7, #4294967295
    8aba:	bf08      	it	eq
    8abc:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    8ac0:	d102      	bne.n	8ac8 <z_impl_k_thread_create+0x38>
}
    8ac2:	4620      	mov	r0, r4
    8ac4:	b007      	add	sp, #28
    8ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
    8ac8:	4632      	mov	r2, r6
    8aca:	463b      	mov	r3, r7
    8acc:	4620      	mov	r0, r4
    8ace:	f7fd fab3 	bl	6038 <schedule_new_thread>
    8ad2:	e7f6      	b.n	8ac2 <z_impl_k_thread_create+0x32>

00008ad4 <z_pm_save_idle_exit>:
{
    8ad4:	b508      	push	{r3, lr}
	pm_system_resume();
    8ad6:	f7f9 fbcd 	bl	2274 <pm_system_resume>
	sys_clock_idle_exit();
    8ada:	f7ff fe51 	bl	8780 <sys_clock_idle_exit>
}
    8ade:	bd08      	pop	{r3, pc}

00008ae0 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    8ae0:	4288      	cmp	r0, r1
    8ae2:	da00      	bge.n	8ae6 <new_prio_for_inheritance+0x6>
    8ae4:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    8ae6:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    8aea:	db01      	blt.n	8af0 <new_prio_for_inheritance+0x10>
    8aec:	4608      	mov	r0, r1
    8aee:	4770      	bx	lr
    8af0:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    8af4:	4770      	bx	lr

00008af6 <adjust_owner_prio>:
{
    8af6:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    8af8:	6880      	ldr	r0, [r0, #8]
    8afa:	f990 300e 	ldrsb.w	r3, [r0, #14]
    8afe:	428b      	cmp	r3, r1
    8b00:	d101      	bne.n	8b06 <adjust_owner_prio+0x10>
	return false;
    8b02:	2000      	movs	r0, #0
}
    8b04:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    8b06:	f7fd fe69 	bl	67dc <z_set_prio>
    8b0a:	e7fb      	b.n	8b04 <adjust_owner_prio+0xe>

00008b0c <z_impl_k_mutex_init>:
{
    8b0c:	4603      	mov	r3, r0
	mutex->owner = NULL;
    8b0e:	2000      	movs	r0, #0
    8b10:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    8b12:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    8b14:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    8b16:	605b      	str	r3, [r3, #4]
}
    8b18:	4770      	bx	lr

00008b1a <thread_active_elsewhere>:
}
    8b1a:	2000      	movs	r0, #0
    8b1c:	4770      	bx	lr

00008b1e <pended_on_thread>:
}
    8b1e:	6880      	ldr	r0, [r0, #8]
    8b20:	4770      	bx	lr

00008b22 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    8b22:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    8b26:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    8b2a:	4283      	cmp	r3, r0
    8b2c:	d001      	beq.n	8b32 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    8b2e:	1ac0      	subs	r0, r0, r3
    8b30:	4770      	bx	lr
	return 0;
    8b32:	2000      	movs	r0, #0
}
    8b34:	4770      	bx	lr

00008b36 <z_unpend_thread_no_timeout>:
{
    8b36:	b538      	push	{r3, r4, r5, lr}
    8b38:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    8b3a:	2300      	movs	r3, #0
	__asm__ volatile(
    8b3c:	f04f 0220 	mov.w	r2, #32
    8b40:	f3ef 8511 	mrs	r5, BASEPRI
    8b44:	f382 8812 	msr	BASEPRI_MAX, r2
    8b48:	f3bf 8f6f 	isb	sy
    8b4c:	b98b      	cbnz	r3, 8b72 <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8b4e:	4620      	mov	r0, r4
    8b50:	f7ff ffe5 	bl	8b1e <pended_on_thread>
    8b54:	4621      	mov	r1, r4
    8b56:	f000 f822 	bl	8b9e <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8b5a:	7b63      	ldrb	r3, [r4, #13]
    8b5c:	f023 0302 	bic.w	r3, r3, #2
    8b60:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    8b62:	2300      	movs	r3, #0
    8b64:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    8b66:	f385 8811 	msr	BASEPRI, r5
    8b6a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8b6e:	2301      	movs	r3, #1
    8b70:	e7ec      	b.n	8b4c <z_unpend_thread_no_timeout+0x16>
}
    8b72:	bd38      	pop	{r3, r4, r5, pc}

00008b74 <z_reschedule_irqlock>:
{
    8b74:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8b76:	4603      	mov	r3, r0
    8b78:	b920      	cbnz	r0, 8b84 <z_reschedule_irqlock+0x10>
    8b7a:	f3ef 8205 	mrs	r2, IPSR
    8b7e:	b942      	cbnz	r2, 8b92 <z_reschedule_irqlock+0x1e>
    8b80:	2201      	movs	r2, #1
    8b82:	e000      	b.n	8b86 <z_reschedule_irqlock+0x12>
    8b84:	2200      	movs	r2, #0
	if (resched(key)) {
    8b86:	b932      	cbnz	r2, 8b96 <z_reschedule_irqlock+0x22>
    8b88:	f383 8811 	msr	BASEPRI, r3
    8b8c:	f3bf 8f6f 	isb	sy
}
    8b90:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8b92:	2200      	movs	r2, #0
    8b94:	e7f7      	b.n	8b86 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    8b96:	4618      	mov	r0, r3
    8b98:	f7f9 fe22 	bl	27e0 <arch_swap>
	return ret;
    8b9c:	e7f8      	b.n	8b90 <z_reschedule_irqlock+0x1c>

00008b9e <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    8b9e:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    8ba0:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    8ba2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8ba4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8ba6:	2300      	movs	r3, #0
    8ba8:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    8baa:	604b      	str	r3, [r1, #4]
}
    8bac:	4770      	bx	lr

00008bae <z_priq_dumb_best>:
{
    8bae:	4603      	mov	r3, r0
	return list->head == list;
    8bb0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8bb2:	4283      	cmp	r3, r0
    8bb4:	d000      	beq.n	8bb8 <z_priq_dumb_best+0xa>
}
    8bb6:	4770      	bx	lr
	struct k_thread *thread = NULL;
    8bb8:	2000      	movs	r0, #0
	return thread;
    8bba:	e7fc      	b.n	8bb6 <z_priq_dumb_best+0x8>

00008bbc <z_ready_thread>:
{
    8bbc:	b538      	push	{r3, r4, r5, lr}
    8bbe:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    8bc0:	2300      	movs	r3, #0
	__asm__ volatile(
    8bc2:	f04f 0220 	mov.w	r2, #32
    8bc6:	f3ef 8511 	mrs	r5, BASEPRI
    8bca:	f382 8812 	msr	BASEPRI_MAX, r2
    8bce:	f3bf 8f6f 	isb	sy
    8bd2:	e007      	b.n	8be4 <z_ready_thread+0x28>
			ready_thread(thread);
    8bd4:	4620      	mov	r0, r4
    8bd6:	f7fd fd73 	bl	66c0 <ready_thread>
	__asm__ volatile(
    8bda:	f385 8811 	msr	BASEPRI, r5
    8bde:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8be2:	2301      	movs	r3, #1
    8be4:	b92b      	cbnz	r3, 8bf2 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    8be6:	4620      	mov	r0, r4
    8be8:	f7ff ff97 	bl	8b1a <thread_active_elsewhere>
    8bec:	2800      	cmp	r0, #0
    8bee:	d1f4      	bne.n	8bda <z_ready_thread+0x1e>
    8bf0:	e7f0      	b.n	8bd4 <z_ready_thread+0x18>
}
    8bf2:	bd38      	pop	{r3, r4, r5, pc}

00008bf4 <z_thread_timeout>:
{
    8bf4:	b570      	push	{r4, r5, r6, lr}
    8bf6:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    8bf8:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    8bfc:	2300      	movs	r3, #0
	__asm__ volatile(
    8bfe:	f04f 0220 	mov.w	r2, #32
    8c02:	f3ef 8611 	mrs	r6, BASEPRI
    8c06:	f382 8812 	msr	BASEPRI_MAX, r2
    8c0a:	f3bf 8f6f 	isb	sy
    8c0e:	e019      	b.n	8c44 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8c10:	4628      	mov	r0, r5
    8c12:	f7ff ff84 	bl	8b1e <pended_on_thread>
    8c16:	4629      	mov	r1, r5
    8c18:	f7ff ffc1 	bl	8b9e <z_priq_dumb_remove>
    8c1c:	7b6b      	ldrb	r3, [r5, #13]
    8c1e:	f023 0302 	bic.w	r3, r3, #2
    8c22:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    8c24:	2300      	movs	r3, #0
    8c26:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8c28:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    8c2c:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    8c30:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    8c34:	4628      	mov	r0, r5
    8c36:	f7fd fd43 	bl	66c0 <ready_thread>
	__asm__ volatile(
    8c3a:	f386 8811 	msr	BASEPRI, r6
    8c3e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8c42:	2301      	movs	r3, #1
    8c44:	b94b      	cbnz	r3, 8c5a <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    8c46:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    8c4a:	f013 0f28 	tst.w	r3, #40	; 0x28
    8c4e:	d1f4      	bne.n	8c3a <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
    8c50:	f854 3c10 	ldr.w	r3, [r4, #-16]
    8c54:	2b00      	cmp	r3, #0
    8c56:	d1db      	bne.n	8c10 <z_thread_timeout+0x1c>
    8c58:	e7e6      	b.n	8c28 <z_thread_timeout+0x34>
}
    8c5a:	bd70      	pop	{r4, r5, r6, pc}

00008c5c <add_to_waitq_locked>:
{
    8c5c:	b570      	push	{r4, r5, r6, lr}
    8c5e:	4605      	mov	r5, r0
    8c60:	460e      	mov	r6, r1
	unready_thread(thread);
    8c62:	f7fd fd8b 	bl	677c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    8c66:	7b6b      	ldrb	r3, [r5, #13]
    8c68:	f043 0302 	orr.w	r3, r3, #2
    8c6c:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    8c6e:	b1b6      	cbz	r6, 8c9e <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    8c70:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    8c72:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8c74:	42a6      	cmp	r6, r4
    8c76:	d019      	beq.n	8cac <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8c78:	b164      	cbz	r4, 8c94 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8c7a:	4621      	mov	r1, r4
    8c7c:	4628      	mov	r0, r5
    8c7e:	f7ff ff50 	bl	8b22 <z_sched_prio_cmp>
    8c82:	2800      	cmp	r0, #0
    8c84:	dc0c      	bgt.n	8ca0 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8c86:	b12c      	cbz	r4, 8c94 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    8c88:	6873      	ldr	r3, [r6, #4]
    8c8a:	429c      	cmp	r4, r3
    8c8c:	d002      	beq.n	8c94 <add_to_waitq_locked+0x38>
    8c8e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8c90:	2c00      	cmp	r4, #0
    8c92:	d1f1      	bne.n	8c78 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    8c94:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    8c96:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    8c98:	606b      	str	r3, [r5, #4]
	tail->next = node;
    8c9a:	601d      	str	r5, [r3, #0]
	list->tail = node;
    8c9c:	6075      	str	r5, [r6, #4]
}
    8c9e:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    8ca0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    8ca2:	606b      	str	r3, [r5, #4]
	node->next = successor;
    8ca4:	602c      	str	r4, [r5, #0]
	prev->next = node;
    8ca6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    8ca8:	6065      	str	r5, [r4, #4]
}
    8caa:	e7f8      	b.n	8c9e <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8cac:	2400      	movs	r4, #0
    8cae:	e7e3      	b.n	8c78 <add_to_waitq_locked+0x1c>

00008cb0 <pend>:
{
    8cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8cb4:	4605      	mov	r5, r0
    8cb6:	460f      	mov	r7, r1
    8cb8:	4691      	mov	r9, r2
    8cba:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    8cbc:	2400      	movs	r4, #0
	__asm__ volatile(
    8cbe:	f04f 0320 	mov.w	r3, #32
    8cc2:	f3ef 8611 	mrs	r6, BASEPRI
    8cc6:	f383 8812 	msr	BASEPRI_MAX, r3
    8cca:	f3bf 8f6f 	isb	sy
    8cce:	b94c      	cbnz	r4, 8ce4 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
    8cd0:	4639      	mov	r1, r7
    8cd2:	4628      	mov	r0, r5
    8cd4:	f7ff ffc2 	bl	8c5c <add_to_waitq_locked>
	__asm__ volatile(
    8cd8:	f386 8811 	msr	BASEPRI, r6
    8cdc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8ce0:	2401      	movs	r4, #1
    8ce2:	e7f4      	b.n	8cce <pend+0x1e>
	add_thread_timeout(thread, timeout);
    8ce4:	464a      	mov	r2, r9
    8ce6:	4643      	mov	r3, r8
    8ce8:	4628      	mov	r0, r5
    8cea:	f7fd fb9d 	bl	6428 <add_thread_timeout>
}
    8cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00008cf2 <z_unpend1_no_timeout>:
{
    8cf2:	b570      	push	{r4, r5, r6, lr}
    8cf4:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    8cf6:	2300      	movs	r3, #0
	__asm__ volatile(
    8cf8:	f04f 0220 	mov.w	r2, #32
    8cfc:	f3ef 8511 	mrs	r5, BASEPRI
    8d00:	f382 8812 	msr	BASEPRI_MAX, r2
    8d04:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    8d08:	461c      	mov	r4, r3
    8d0a:	e00f      	b.n	8d2c <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8d0c:	f7ff ff07 	bl	8b1e <pended_on_thread>
    8d10:	4621      	mov	r1, r4
    8d12:	f7ff ff44 	bl	8b9e <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8d16:	7b63      	ldrb	r3, [r4, #13]
    8d18:	f023 0302 	bic.w	r3, r3, #2
    8d1c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    8d1e:	2300      	movs	r3, #0
    8d20:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    8d22:	f385 8811 	msr	BASEPRI, r5
    8d26:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8d2a:	2301      	movs	r3, #1
    8d2c:	b933      	cbnz	r3, 8d3c <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
    8d2e:	4630      	mov	r0, r6
    8d30:	f7ff ff3d 	bl	8bae <z_priq_dumb_best>
		if (thread != NULL) {
    8d34:	4604      	mov	r4, r0
    8d36:	2800      	cmp	r0, #0
    8d38:	d1e8      	bne.n	8d0c <z_unpend1_no_timeout+0x1a>
    8d3a:	e7f2      	b.n	8d22 <z_unpend1_no_timeout+0x30>
}
    8d3c:	4620      	mov	r0, r4
    8d3e:	bd70      	pop	{r4, r5, r6, pc}

00008d40 <z_unpend_first_thread>:
{
    8d40:	b570      	push	{r4, r5, r6, lr}
    8d42:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    8d44:	2300      	movs	r3, #0
	__asm__ volatile(
    8d46:	f04f 0220 	mov.w	r2, #32
    8d4a:	f3ef 8511 	mrs	r5, BASEPRI
    8d4e:	f382 8812 	msr	BASEPRI_MAX, r2
    8d52:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    8d56:	461c      	mov	r4, r3
    8d58:	e013      	b.n	8d82 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8d5a:	f7ff fee0 	bl	8b1e <pended_on_thread>
    8d5e:	4621      	mov	r1, r4
    8d60:	f7ff ff1d 	bl	8b9e <z_priq_dumb_remove>
    8d64:	7b63      	ldrb	r3, [r4, #13]
    8d66:	f023 0302 	bic.w	r3, r3, #2
    8d6a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    8d6c:	2300      	movs	r3, #0
    8d6e:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    8d70:	f104 0018 	add.w	r0, r4, #24
    8d74:	f000 f82a 	bl	8dcc <z_abort_timeout>
	__asm__ volatile(
    8d78:	f385 8811 	msr	BASEPRI, r5
    8d7c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8d80:	2301      	movs	r3, #1
    8d82:	b933      	cbnz	r3, 8d92 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    8d84:	4630      	mov	r0, r6
    8d86:	f7ff ff12 	bl	8bae <z_priq_dumb_best>
		if (thread != NULL) {
    8d8a:	4604      	mov	r4, r0
    8d8c:	2800      	cmp	r0, #0
    8d8e:	d1e4      	bne.n	8d5a <z_unpend_first_thread+0x1a>
    8d90:	e7f2      	b.n	8d78 <z_unpend_first_thread+0x38>
}
    8d92:	4620      	mov	r0, r4
    8d94:	bd70      	pop	{r4, r5, r6, pc}

00008d96 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    8d96:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    8d98:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    8d9a:	6083      	str	r3, [r0, #8]
}
    8d9c:	4770      	bx	lr

00008d9e <remove_timeout>:
{
    8d9e:	b538      	push	{r3, r4, r5, lr}
    8da0:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    8da2:	f7fd ff4f 	bl	6c44 <next>
    8da6:	b148      	cbz	r0, 8dbc <remove_timeout+0x1e>
    8da8:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    8daa:	6920      	ldr	r0, [r4, #16]
    8dac:	6965      	ldr	r5, [r4, #20]
    8dae:	6913      	ldr	r3, [r2, #16]
    8db0:	6951      	ldr	r1, [r2, #20]
    8db2:	181b      	adds	r3, r3, r0
    8db4:	eb45 0101 	adc.w	r1, r5, r1
    8db8:	6113      	str	r3, [r2, #16]
    8dba:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    8dbc:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    8dbe:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    8dc0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8dc2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8dc4:	2300      	movs	r3, #0
    8dc6:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    8dc8:	6063      	str	r3, [r4, #4]
}
    8dca:	bd38      	pop	{r3, r4, r5, pc}

00008dcc <z_abort_timeout>:
{
    8dcc:	b570      	push	{r4, r5, r6, lr}
    8dce:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    8dd0:	2300      	movs	r3, #0
	__asm__ volatile(
    8dd2:	f04f 0220 	mov.w	r2, #32
    8dd6:	f3ef 8611 	mrs	r6, BASEPRI
    8dda:	f382 8812 	msr	BASEPRI_MAX, r2
    8dde:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    8de2:	f06f 0015 	mvn.w	r0, #21
    8de6:	e008      	b.n	8dfa <z_abort_timeout+0x2e>
			remove_timeout(to);
    8de8:	4620      	mov	r0, r4
    8dea:	f7ff ffd8 	bl	8d9e <remove_timeout>
			ret = 0;
    8dee:	4628      	mov	r0, r5
	__asm__ volatile(
    8df0:	f386 8811 	msr	BASEPRI, r6
    8df4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    8df8:	2301      	movs	r3, #1
    8dfa:	461d      	mov	r5, r3
    8dfc:	b91b      	cbnz	r3, 8e06 <z_abort_timeout+0x3a>
	return node->next != NULL;
    8dfe:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    8e00:	2b00      	cmp	r3, #0
    8e02:	d1f1      	bne.n	8de8 <z_abort_timeout+0x1c>
    8e04:	e7f4      	b.n	8df0 <z_abort_timeout+0x24>
}
    8e06:	bd70      	pop	{r4, r5, r6, pc}

00008e08 <z_get_next_timeout_expiry>:
{
    8e08:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    8e0a:	2300      	movs	r3, #0
	__asm__ volatile(
    8e0c:	f04f 0220 	mov.w	r2, #32
    8e10:	f3ef 8411 	mrs	r4, BASEPRI
    8e14:	f382 8812 	msr	BASEPRI_MAX, r2
    8e18:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    8e1c:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
    8e20:	b93b      	cbnz	r3, 8e32 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
    8e22:	f7fd ff27 	bl	6c74 <next_timeout>
	__asm__ volatile(
    8e26:	f384 8811 	msr	BASEPRI, r4
    8e2a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    8e2e:	2301      	movs	r3, #1
    8e30:	e7f6      	b.n	8e20 <z_get_next_timeout_expiry+0x18>
}
    8e32:	bd10      	pop	{r4, pc}

00008e34 <z_set_timeout_expiry>:
{
    8e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e36:	4606      	mov	r6, r0
    8e38:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    8e3a:	2300      	movs	r3, #0
	__asm__ volatile(
    8e3c:	f04f 0220 	mov.w	r2, #32
    8e40:	f3ef 8511 	mrs	r5, BASEPRI
    8e44:	f382 8812 	msr	BASEPRI_MAX, r2
    8e48:	f3bf 8f6f 	isb	sy
    8e4c:	e00a      	b.n	8e64 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    8e4e:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    8e50:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    8e54:	2801      	cmp	r0, #1
    8e56:	dd00      	ble.n	8e5a <z_set_timeout_expiry+0x26>
    8e58:	b97c      	cbnz	r4, 8e7a <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    8e5a:	f385 8811 	msr	BASEPRI, r5
    8e5e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    8e62:	2301      	movs	r3, #1
    8e64:	461c      	mov	r4, r3
    8e66:	b97b      	cbnz	r3, 8e88 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    8e68:	f7fd ff04 	bl	6c74 <next_timeout>
			      || (ticks <= next_to);
    8e6c:	f1b0 3fff 	cmp.w	r0, #4294967295
    8e70:	d0ed      	beq.n	8e4e <z_set_timeout_expiry+0x1a>
    8e72:	42b0      	cmp	r0, r6
    8e74:	dbec      	blt.n	8e50 <z_set_timeout_expiry+0x1c>
    8e76:	2401      	movs	r4, #1
    8e78:	e7ea      	b.n	8e50 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    8e7a:	4639      	mov	r1, r7
    8e7c:	42b0      	cmp	r0, r6
    8e7e:	bfa8      	it	ge
    8e80:	4630      	movge	r0, r6
    8e82:	f7fb fc9f 	bl	47c4 <sys_clock_set_timeout>
    8e86:	e7e8      	b.n	8e5a <z_set_timeout_expiry+0x26>
}
    8e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008e8a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    8e8a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    8e8c:	f7fe f824 	bl	6ed8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    8e90:	bd08      	pop	{r3, pc}

00008e92 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8e92:	b900      	cbnz	r0, 8e96 <z_impl_k_busy_wait+0x4>
    8e94:	4770      	bx	lr
{
    8e96:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    8e98:	f7fa fb22 	bl	34e0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    8e9c:	bd08      	pop	{r3, pc}

00008e9e <k_timer_init>:
	timer->expiry_fn = expiry_fn;
    8e9e:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
    8ea0:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
    8ea2:	2300      	movs	r3, #0
    8ea4:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
    8ea6:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
    8eaa:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
    8eac:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
    8eae:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    8eb0:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
    8eb2:	6343      	str	r3, [r0, #52]	; 0x34
}
    8eb4:	4770      	bx	lr

00008eb6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    8eb6:	b510      	push	{r4, lr}
    8eb8:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    8eba:	f7ff ff87 	bl	8dcc <z_abort_timeout>

	if (inactive) {
    8ebe:	b9a0      	cbnz	r0, 8eea <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
    8ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8ec2:	b10b      	cbz	r3, 8ec8 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    8ec4:	4620      	mov	r0, r4
    8ec6:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    8ec8:	f104 0018 	add.w	r0, r4, #24
    8ecc:	f7ff ff11 	bl	8cf2 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    8ed0:	b158      	cbz	r0, 8eea <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
    8ed2:	f7ff fe73 	bl	8bbc <z_ready_thread>
	__asm__ volatile(
    8ed6:	f04f 0320 	mov.w	r3, #32
    8eda:	f3ef 8011 	mrs	r0, BASEPRI
    8ede:	f383 8812 	msr	BASEPRI_MAX, r3
    8ee2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8ee6:	f7ff fe45 	bl	8b74 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
    8eea:	bd10      	pop	{r4, pc}

00008eec <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8eec:	4770      	bx	lr
	...

00008ef0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    8ef0:	f7fb bd5c 	b.w	49ac <SystemInit>
