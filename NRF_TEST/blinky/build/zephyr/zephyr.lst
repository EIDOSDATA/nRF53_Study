
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20000f58 	.word	0x20000f58
}
   4:	00001a31 	.word	0x00001a31
   8:	0000575f 	.word	0x0000575f
   c:	000019e9 	.word	0x000019e9
  10:	000019e9 	.word	0x000019e9
  14:	000019e9 	.word	0x000019e9
  18:	000019e9 	.word	0x000019e9
  1c:	000019e9 	.word	0x000019e9
	...
  2c:	000016f5 	.word	0x000016f5
  30:	000019e9 	.word	0x000019e9
  34:	00000000 	.word	0x00000000
  38:	00001699 	.word	0x00001699
  3c:	000019e9 	.word	0x000019e9

00000040 <_irq_vector_table>:
  40:	00001781 00001781 00001781 00001781     ................
  50:	00001781 00001781 00001781 00001781     ................
  60:	00001781 00001781 00001781 00001781     ................
  70:	00001781 00001781 00001781 00001781     ................
  80:	00001781 00001781 00001781 00001781     ................
  90:	00001781 00001781 00001781 00001781     ................
  a0:	00001781 00001781 00001781 00001781     ................
  b0:	00001781 00001781 00001781 00001781     ................
  c0:	00001781 00001781 00001781 00001781     ................
  d0:	00001781 00001781 00001781 00001781     ................
  e0:	00001781 00001781 00001781 00001781     ................
  f0:	00001781 00001781 00001781 00001781     ................
 100:	00001781 00001781 00001781 00001781     ................
 110:	00001781 00001781 00001781 00001781     ................
 120:	00001781 00001781 00001781 00001781     ................
 130:	00001781 00001781 00001781 00001781     ................
 140:	00001781 00001781 00001781 00001781     ................
 150:	00001781                                ....

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
     164:	f04f 30ff 	movne.w	r0, #4294967295
     168:	f000 b970 	b.w	44c <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f806 	bl	184 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__udivmoddi4>:
     184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     188:	9e08      	ldr	r6, [sp, #32]
     18a:	460d      	mov	r5, r1
     18c:	4604      	mov	r4, r0
     18e:	468a      	mov	sl, r1
     190:	2b00      	cmp	r3, #0
     192:	d17f      	bne.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     194:	428a      	cmp	r2, r1
     196:	4617      	mov	r7, r2
     198:	d941      	bls.n	21e <CONFIG_SRAM_SIZE+0x5e>
     19a:	fab2 f282 	clz	r2, r2
     19e:	b14a      	cbz	r2, 1b4 <__udivmoddi4+0x30>
     1a0:	f1c2 0120 	rsb	r1, r2, #32
     1a4:	fa05 f302 	lsl.w	r3, r5, r2
     1a8:	4097      	lsls	r7, r2
     1aa:	4094      	lsls	r4, r2
     1ac:	fa20 f101 	lsr.w	r1, r0, r1
     1b0:	ea41 0a03 	orr.w	sl, r1, r3
     1b4:	ea4f 4817 	mov.w	r8, r7, lsr #16
     1b8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     1bc:	fa1f f987 	uxth.w	r9, r7
     1c0:	fbba fef8 	udiv	lr, sl, r8
     1c4:	fb08 a31e 	mls	r3, r8, lr, sl
     1c8:	fb0e f109 	mul.w	r1, lr, r9
     1cc:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     1d0:	4299      	cmp	r1, r3
     1d2:	d906      	bls.n	1e2 <CONFIG_SRAM_SIZE+0x22>
     1d4:	18fb      	adds	r3, r7, r3
     1d6:	d202      	bcs.n	1de <CONFIG_SRAM_SIZE+0x1e>
     1d8:	4299      	cmp	r1, r3
     1da:	f200 8124 	bhi.w	426 <CONFIG_FLASH_SIZE+0x26>
     1de:	f10e 3eff 	add.w	lr, lr, #4294967295
     1e2:	1a59      	subs	r1, r3, r1
     1e4:	b2a3      	uxth	r3, r4
     1e6:	fbb1 f0f8 	udiv	r0, r1, r8
     1ea:	fb08 1110 	mls	r1, r8, r0, r1
     1ee:	fb00 f909 	mul.w	r9, r0, r9
     1f2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1f6:	45a1      	cmp	r9, r4
     1f8:	d905      	bls.n	206 <CONFIG_SRAM_SIZE+0x46>
     1fa:	193c      	adds	r4, r7, r4
     1fc:	d202      	bcs.n	204 <CONFIG_SRAM_SIZE+0x44>
     1fe:	45a1      	cmp	r9, r4
     200:	f200 810e 	bhi.w	420 <CONFIG_FLASH_SIZE+0x20>
     204:	3801      	subs	r0, #1
     206:	eba4 0409 	sub.w	r4, r4, r9
     20a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     20e:	2100      	movs	r1, #0
     210:	b11e      	cbz	r6, 21a <CONFIG_SRAM_SIZE+0x5a>
     212:	40d4      	lsrs	r4, r2
     214:	2300      	movs	r3, #0
     216:	e9c6 4300 	strd	r4, r3, [r6]
     21a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     21e:	b902      	cbnz	r2, 222 <CONFIG_SRAM_SIZE+0x62>
     220:	deff      	udf	#255	; 0xff
     222:	fab2 f282 	clz	r2, r2
     226:	2a00      	cmp	r2, #0
     228:	d14f      	bne.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     22a:	1bcb      	subs	r3, r1, r7
     22c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     230:	fa1f f887 	uxth.w	r8, r7
     234:	2101      	movs	r1, #1
     236:	0c25      	lsrs	r5, r4, #16
     238:	fbb3 fcfe 	udiv	ip, r3, lr
     23c:	fb0e 301c 	mls	r0, lr, ip, r3
     240:	462b      	mov	r3, r5
     242:	fb08 f90c 	mul.w	r9, r8, ip
     246:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     24a:	45a9      	cmp	r9, r5
     24c:	d90a      	bls.n	264 <CONFIG_SRAM_SIZE+0xa4>
     24e:	197d      	adds	r5, r7, r5
     250:	bf2c      	ite	cs
     252:	2301      	movcs	r3, #1
     254:	2300      	movcc	r3, #0
     256:	45a9      	cmp	r9, r5
     258:	d902      	bls.n	260 <CONFIG_SRAM_SIZE+0xa0>
     25a:	2b00      	cmp	r3, #0
     25c:	f000 80d9 	beq.w	412 <CONFIG_FLASH_SIZE+0x12>
     260:	f10c 3cff 	add.w	ip, ip, #4294967295
     264:	eba5 0509 	sub.w	r5, r5, r9
     268:	b2a3      	uxth	r3, r4
     26a:	fbb5 f0fe 	udiv	r0, r5, lr
     26e:	fb0e 5510 	mls	r5, lr, r0, r5
     272:	fb08 f800 	mul.w	r8, r8, r0
     276:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     27a:	45a0      	cmp	r8, r4
     27c:	d905      	bls.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     27e:	193c      	adds	r4, r7, r4
     280:	d202      	bcs.n	288 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8>
     282:	45a0      	cmp	r8, r4
     284:	f200 80c9 	bhi.w	41a <CONFIG_FLASH_SIZE+0x1a>
     288:	3801      	subs	r0, #1
     28a:	eba4 0408 	sub.w	r4, r4, r8
     28e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     292:	e7bd      	b.n	210 <CONFIG_SRAM_SIZE+0x50>
     294:	428b      	cmp	r3, r1
     296:	d908      	bls.n	2aa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x2a>
     298:	2e00      	cmp	r6, #0
     29a:	f000 80b1 	beq.w	400 <CONFIG_FLASH_SIZE>
     29e:	2100      	movs	r1, #0
     2a0:	e9c6 0500 	strd	r0, r5, [r6]
     2a4:	4608      	mov	r0, r1
     2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2aa:	fab3 f183 	clz	r1, r3
     2ae:	2900      	cmp	r1, #0
     2b0:	d146      	bne.n	340 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc0>
     2b2:	42ab      	cmp	r3, r5
     2b4:	f0c0 80a7 	bcc.w	406 <CONFIG_FLASH_SIZE+0x6>
     2b8:	4282      	cmp	r2, r0
     2ba:	f240 80a4 	bls.w	406 <CONFIG_FLASH_SIZE+0x6>
     2be:	4608      	mov	r0, r1
     2c0:	2e00      	cmp	r6, #0
     2c2:	d0aa      	beq.n	21a <CONFIG_SRAM_SIZE+0x5a>
     2c4:	e9c6 4a00 	strd	r4, sl, [r6]
     2c8:	e7a7      	b.n	21a <CONFIG_SRAM_SIZE+0x5a>
     2ca:	f1c2 0020 	rsb	r0, r2, #32
     2ce:	4097      	lsls	r7, r2
     2d0:	fa01 f302 	lsl.w	r3, r1, r2
     2d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2d8:	40c1      	lsrs	r1, r0
     2da:	fa24 f500 	lsr.w	r5, r4, r0
     2de:	fa1f f887 	uxth.w	r8, r7
     2e2:	4094      	lsls	r4, r2
     2e4:	431d      	orrs	r5, r3
     2e6:	fbb1 f0fe 	udiv	r0, r1, lr
     2ea:	0c2b      	lsrs	r3, r5, #16
     2ec:	fb0e 1110 	mls	r1, lr, r0, r1
     2f0:	fb00 fc08 	mul.w	ip, r0, r8
     2f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f8:	459c      	cmp	ip, r3
     2fa:	d909      	bls.n	310 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x90>
     2fc:	18fb      	adds	r3, r7, r3
     2fe:	bf2c      	ite	cs
     300:	2101      	movcs	r1, #1
     302:	2100      	movcc	r1, #0
     304:	459c      	cmp	ip, r3
     306:	d902      	bls.n	30e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8e>
     308:	2900      	cmp	r1, #0
     30a:	f000 8095 	beq.w	438 <CONFIG_FLASH_SIZE+0x38>
     30e:	3801      	subs	r0, #1
     310:	eba3 030c 	sub.w	r3, r3, ip
     314:	b2ad      	uxth	r5, r5
     316:	fbb3 f1fe 	udiv	r1, r3, lr
     31a:	fb0e 3311 	mls	r3, lr, r1, r3
     31e:	fb01 fc08 	mul.w	ip, r1, r8
     322:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     326:	45ac      	cmp	ip, r5
     328:	d905      	bls.n	336 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb6>
     32a:	197d      	adds	r5, r7, r5
     32c:	d202      	bcs.n	334 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb4>
     32e:	45ac      	cmp	ip, r5
     330:	f200 8089 	bhi.w	446 <CONFIG_FLASH_SIZE+0x46>
     334:	3901      	subs	r1, #1
     336:	eba5 030c 	sub.w	r3, r5, ip
     33a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     33e:	e77a      	b.n	236 <CONFIG_SRAM_SIZE+0x76>
     340:	f1c1 0420 	rsb	r4, r1, #32
     344:	408b      	lsls	r3, r1
     346:	fa02 f701 	lsl.w	r7, r2, r1
     34a:	fa05 fc01 	lsl.w	ip, r5, r1
     34e:	40e2      	lsrs	r2, r4
     350:	fa20 f804 	lsr.w	r8, r0, r4
     354:	40e5      	lsrs	r5, r4
     356:	fa00 fe01 	lsl.w	lr, r0, r1
     35a:	4313      	orrs	r3, r2
     35c:	ea48 020c 	orr.w	r2, r8, ip
     360:	ea4f 4813 	mov.w	r8, r3, lsr #16
     364:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     368:	fa1f f983 	uxth.w	r9, r3
     36c:	fbb5 faf8 	udiv	sl, r5, r8
     370:	fb08 551a 	mls	r5, r8, sl, r5
     374:	fb0a f009 	mul.w	r0, sl, r9
     378:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     37c:	4560      	cmp	r0, ip
     37e:	d90a      	bls.n	396 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x116>
     380:	eb13 0c0c 	adds.w	ip, r3, ip
     384:	bf2c      	ite	cs
     386:	2501      	movcs	r5, #1
     388:	2500      	movcc	r5, #0
     38a:	4560      	cmp	r0, ip
     38c:	d901      	bls.n	392 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x112>
     38e:	2d00      	cmp	r5, #0
     390:	d055      	beq.n	43e <CONFIG_FLASH_SIZE+0x3e>
     392:	f10a 3aff 	add.w	sl, sl, #4294967295
     396:	ebac 0c00 	sub.w	ip, ip, r0
     39a:	b292      	uxth	r2, r2
     39c:	fbbc f0f8 	udiv	r0, ip, r8
     3a0:	fb08 cc10 	mls	ip, r8, r0, ip
     3a4:	fb00 f909 	mul.w	r9, r0, r9
     3a8:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     3ac:	45e1      	cmp	r9, ip
     3ae:	d905      	bls.n	3bc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x13c>
     3b0:	eb13 0c0c 	adds.w	ip, r3, ip
     3b4:	d201      	bcs.n	3ba <CONFIG_PM_PARTITION_SIZE_PROVISION+0x13a>
     3b6:	45e1      	cmp	r9, ip
     3b8:	d83b      	bhi.n	432 <CONFIG_FLASH_SIZE+0x32>
     3ba:	3801      	subs	r0, #1
     3bc:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     3c0:	ebac 0c09 	sub.w	ip, ip, r9
     3c4:	fba0 8907 	umull	r8, r9, r0, r7
     3c8:	45cc      	cmp	ip, r9
     3ca:	4645      	mov	r5, r8
     3cc:	464a      	mov	r2, r9
     3ce:	d302      	bcc.n	3d6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x156>
     3d0:	d106      	bne.n	3e0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x160>
     3d2:	45c6      	cmp	lr, r8
     3d4:	d204      	bcs.n	3e0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x160>
     3d6:	3801      	subs	r0, #1
     3d8:	ebb8 0507 	subs.w	r5, r8, r7
     3dc:	eb69 0203 	sbc.w	r2, r9, r3
     3e0:	b32e      	cbz	r6, 42e <CONFIG_FLASH_SIZE+0x2e>
     3e2:	ebbe 0305 	subs.w	r3, lr, r5
     3e6:	eb6c 0c02 	sbc.w	ip, ip, r2
     3ea:	fa23 f201 	lsr.w	r2, r3, r1
     3ee:	fa0c f404 	lsl.w	r4, ip, r4
     3f2:	fa2c f301 	lsr.w	r3, ip, r1
     3f6:	2100      	movs	r1, #0
     3f8:	4314      	orrs	r4, r2
     3fa:	e9c6 4300 	strd	r4, r3, [r6]
     3fe:	e70c      	b.n	21a <CONFIG_SRAM_SIZE+0x5a>
     400:	4631      	mov	r1, r6
     402:	4630      	mov	r0, r6
     404:	e709      	b.n	21a <CONFIG_SRAM_SIZE+0x5a>
     406:	1a84      	subs	r4, r0, r2
     408:	eb65 0303 	sbc.w	r3, r5, r3
     40c:	2001      	movs	r0, #1
     40e:	469a      	mov	sl, r3
     410:	e756      	b.n	2c0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x40>
     412:	f1ac 0c02 	sub.w	ip, ip, #2
     416:	443d      	add	r5, r7
     418:	e724      	b.n	264 <CONFIG_SRAM_SIZE+0xa4>
     41a:	3802      	subs	r0, #2
     41c:	443c      	add	r4, r7
     41e:	e734      	b.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     420:	3802      	subs	r0, #2
     422:	443c      	add	r4, r7
     424:	e6ef      	b.n	206 <CONFIG_SRAM_SIZE+0x46>
     426:	f1ae 0e02 	sub.w	lr, lr, #2
     42a:	443b      	add	r3, r7
     42c:	e6d9      	b.n	1e2 <CONFIG_SRAM_SIZE+0x22>
     42e:	4631      	mov	r1, r6
     430:	e6f3      	b.n	21a <CONFIG_SRAM_SIZE+0x5a>
     432:	3802      	subs	r0, #2
     434:	449c      	add	ip, r3
     436:	e7c1      	b.n	3bc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x13c>
     438:	3802      	subs	r0, #2
     43a:	443b      	add	r3, r7
     43c:	e768      	b.n	310 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x90>
     43e:	f1aa 0a02 	sub.w	sl, sl, #2
     442:	449c      	add	ip, r3
     444:	e7a7      	b.n	396 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x116>
     446:	3902      	subs	r1, #2
     448:	443d      	add	r5, r7
     44a:	e774      	b.n	336 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb6>

0000044c <__aeabi_idiv0>:
     44c:	4770      	bx	lr
     44e:	bf00      	nop

00000450 <main>:
#define PIN 0
#define FLAGS 0
#endif

void main(void)
{
     450:	b570      	push	{r4, r5, r6, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     452:	482c      	ldr	r0, [pc, #176]	; (504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>)
     454:	f003 fc96 	bl	3d84 <z_impl_device_get_binding>
	int ret;
	int ret1;

	dev = device_get_binding(LED0);
	//dev1 = device_get_binding(LED1);
	if (dev == NULL)
     458:	2800      	cmp	r0, #0
     45a:	d051      	beq.n	500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>
     45c:	4604      	mov	r4, r0

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
     45e:	6881      	ldr	r1, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     460:	6902      	ldr	r2, [r0, #16]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
     462:	6813      	ldr	r3, [r2, #0]
     464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     468:	6013      	str	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     46a:	680b      	ldr	r3, [r1, #0]
     46c:	f240 6201 	movw	r2, #1537	; 0x601
     470:	211c      	movs	r1, #28
     472:	4798      	blx	r3
     474:	4605      	mov	r5, r0
	const struct gpio_driver_api *api =
     476:	68a1      	ldr	r1, [r4, #8]
	struct gpio_driver_data *data =
     478:	6922      	ldr	r2, [r4, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
     47a:	6813      	ldr	r3, [r2, #0]
     47c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     480:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
     482:	680b      	ldr	r3, [r1, #0]
     484:	f240 6201 	movw	r2, #1537	; 0x601
     488:	211d      	movs	r1, #29
     48a:	4620      	mov	r0, r4
     48c:	4798      	blx	r3
		return;
	}	

	ret = gpio_pin_configure(dev, PIN, GPIO_OUTPUT_ACTIVE | FLAGS);
	ret1 = gpio_pin_configure(dev, PIN1, GPIO_OUTPUT_ACTIVE | FLAGS1);
	if (ret < 0)
     48e:	2d00      	cmp	r5, #0
     490:	db36      	blt.n	500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>
	{
		return;
	}
	if (ret1 < 0)
     492:	2800      	cmp	r0, #0
     494:	db34      	blt.n	500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>
	bool led_is_on = true;
     496:	2501      	movs	r5, #1
     498:	e01b      	b.n	4d2 <main+0x82>
     49a:	462b      	mov	r3, r5

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (value != 0)	{
     49c:	b313      	cbz	r3, 4e4 <main+0x94>
	const struct gpio_driver_api *api =
     49e:	68a3      	ldr	r3, [r4, #8]
	return api->port_set_bits_raw(port, pins);
     4a0:	68db      	ldr	r3, [r3, #12]
     4a2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     4a6:	4620      	mov	r0, r4
     4a8:	4798      	blx	r3
	}

	while (1)
	{
		gpio_pin_set(dev, PIN, (int)led_is_on);
		gpio_pin_set(dev, PIN1, !((int)led_is_on));
     4aa:	f085 0501 	eor.w	r5, r5, #1
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
     4ae:	6923      	ldr	r3, [r4, #16]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     4b0:	681b      	ldr	r3, [r3, #0]
     4b2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
     4b6:	d100      	bne.n	4ba <main+0x6a>
     4b8:	462e      	mov	r6, r5
	if (value != 0)	{
     4ba:	b1d6      	cbz	r6, 4f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa>
	const struct gpio_driver_api *api =
     4bc:	68a3      	ldr	r3, [r4, #8]
	return api->port_set_bits_raw(port, pins);
     4be:	68db      	ldr	r3, [r3, #12]
     4c0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     4c4:	4620      	mov	r0, r4
     4c6:	4798      	blx	r3
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     4c8:	f240 6067 	movw	r0, #1639	; 0x667
     4cc:	2100      	movs	r1, #0
     4ce:	f004 fb6d 	bl	4bac <z_impl_k_sleep>
		gpio_pin_set(dev, PIN, (int)led_is_on);
     4d2:	462e      	mov	r6, r5
	const struct gpio_driver_data *const data =
     4d4:	6923      	ldr	r3, [r4, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     4d6:	681b      	ldr	r3, [r3, #0]
     4d8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
     4dc:	d0dd      	beq.n	49a <main+0x4a>
		value = (value != 0) ? 0 : 1;
     4de:	f085 0301 	eor.w	r3, r5, #1
     4e2:	e7db      	b.n	49c <main+0x4c>
	const struct gpio_driver_api *api =
     4e4:	68a3      	ldr	r3, [r4, #8]
	return api->port_clear_bits_raw(port, pins);
     4e6:	691b      	ldr	r3, [r3, #16]
     4e8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     4ec:	4620      	mov	r0, r4
     4ee:	4798      	blx	r3
     4f0:	e7db      	b.n	4aa <main+0x5a>
	const struct gpio_driver_api *api =
     4f2:	68a3      	ldr	r3, [r4, #8]
	return api->port_clear_bits_raw(port, pins);
     4f4:	691b      	ldr	r3, [r3, #16]
     4f6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     4fa:	4620      	mov	r0, r4
     4fc:	4798      	blx	r3
     4fe:	e7e3      	b.n	4c8 <main+0x78>
		k_msleep(SLEEP_TIME_MS);
		led_is_on = !led_is_on;
	}
}
     500:	bd70      	pop	{r4, r5, r6, pc}
     502:	bf00      	nop
     504:	00006898 	.word	0x00006898

00000508 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     508:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     50a:	680b      	ldr	r3, [r1, #0]
     50c:	3301      	adds	r3, #1
     50e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     510:	4b01      	ldr	r3, [pc, #4]	; (518 <char_out+0x10>)
     512:	681b      	ldr	r3, [r3, #0]
     514:	4798      	blx	r3
}
     516:	bd08      	pop	{r3, pc}
     518:	20000000 	.word	0x20000000

0000051c <__printk_hook_install>:
	_char_out = fn;
     51c:	4b01      	ldr	r3, [pc, #4]	; (524 <__printk_hook_install+0x8>)
     51e:	6018      	str	r0, [r3, #0]
}
     520:	4770      	bx	lr
     522:	bf00      	nop
     524:	20000000 	.word	0x20000000

00000528 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     528:	b500      	push	{lr}
     52a:	b083      	sub	sp, #12
     52c:	4602      	mov	r2, r0
     52e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     530:	2100      	movs	r1, #0
     532:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     534:	a901      	add	r1, sp, #4
     536:	4803      	ldr	r0, [pc, #12]	; (544 <vprintk+0x1c>)
     538:	f000 f8c8 	bl	6cc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     53c:	b003      	add	sp, #12
     53e:	f85d fb04 	ldr.w	pc, [sp], #4
     542:	bf00      	nop
     544:	00000509 	.word	0x00000509

00000548 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     548:	b510      	push	{r4, lr}
     54a:	b084      	sub	sp, #16
     54c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     54e:	9001      	str	r0, [sp, #4]
     550:	9102      	str	r1, [sp, #8]
     552:	2100      	movs	r1, #0
     554:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
     556:	a901      	add	r1, sp, #4
     558:	4805      	ldr	r0, [pc, #20]	; (570 <vsnprintk+0x28>)
     55a:	f000 f8b7 	bl	6cc <cbvprintf>

	if (ctx.count < ctx.max) {
     55e:	9b03      	ldr	r3, [sp, #12]
     560:	9a02      	ldr	r2, [sp, #8]
     562:	4293      	cmp	r3, r2
     564:	da01      	bge.n	56a <vsnprintk+0x22>
		str[ctx.count] = '\0';
     566:	2200      	movs	r2, #0
     568:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
     56a:	9803      	ldr	r0, [sp, #12]
     56c:	b004      	add	sp, #16
     56e:	bd10      	pop	{r4, pc}
     570:	000052c5 	.word	0x000052c5

00000574 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     578:	b083      	sub	sp, #12
     57a:	4604      	mov	r4, r0
     57c:	4608      	mov	r0, r1
     57e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     580:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     582:	f013 0f08 	tst.w	r3, #8
     586:	d105      	bne.n	594 <process_event+0x20>
     588:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     58c:	2300      	movs	r3, #0
     58e:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     590:	9301      	str	r3, [sp, #4]
}
     592:	e069      	b.n	668 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
     594:	2901      	cmp	r1, #1
     596:	d009      	beq.n	5ac <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     598:	f043 0320 	orr.w	r3, r3, #32
     59c:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     59e:	f385 8811 	msr	BASEPRI, r5
     5a2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     5a6:	b003      	add	sp, #12
     5a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     5ac:	f043 0310 	orr.w	r3, r3, #16
     5b0:	8323      	strh	r3, [r4, #24]
     5b2:	e7f4      	b.n	59e <process_event+0x2a>
			evt = process_recheck(mgr);
     5b4:	4620      	mov	r0, r4
     5b6:	f004 fee0 	bl	537a <process_recheck>
     5ba:	e057      	b.n	66c <process_event+0xf8>
			res = mgr->last_res;
     5bc:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     5c0:	464a      	mov	r2, r9
     5c2:	4669      	mov	r1, sp
     5c4:	4620      	mov	r0, r4
     5c6:	f004 fef1 	bl	53ac <process_complete>
		onoff_transition_fn transit = NULL;
     5ca:	2700      	movs	r7, #0
     5cc:	e05a      	b.n	684 <process_event+0x110>
			transit = mgr->transitions->start;
     5ce:	6923      	ldr	r3, [r4, #16]
     5d0:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
     5d2:	2106      	movs	r1, #6
     5d4:	4620      	mov	r0, r4
     5d6:	f004 fea9 	bl	532c <set_state>
		res = 0;
     5da:	f04f 0900 	mov.w	r9, #0
     5de:	e051      	b.n	684 <process_event+0x110>
			transit = mgr->transitions->stop;
     5e0:	6923      	ldr	r3, [r4, #16]
     5e2:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     5e4:	2104      	movs	r1, #4
     5e6:	4620      	mov	r0, r4
     5e8:	f004 fea0 	bl	532c <set_state>
		res = 0;
     5ec:	f04f 0900 	mov.w	r9, #0
     5f0:	e048      	b.n	684 <process_event+0x110>
			transit = mgr->transitions->reset;
     5f2:	6923      	ldr	r3, [r4, #16]
     5f4:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     5f6:	2105      	movs	r1, #5
     5f8:	4620      	mov	r0, r4
     5fa:	f004 fe97 	bl	532c <set_state>
		res = 0;
     5fe:	f04f 0900 	mov.w	r9, #0
     602:	e03f      	b.n	684 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
     604:	2200      	movs	r2, #0
     606:	e046      	b.n	696 <process_event+0x122>
     608:	2200      	movs	r2, #0
     60a:	e044      	b.n	696 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     60c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     610:	8323      	strh	r3, [r4, #24]
     612:	f385 8811 	msr	BASEPRI, r5
     616:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     61a:	2900      	cmp	r1, #0
     61c:	d144      	bne.n	6a8 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     61e:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     620:	b12b      	cbz	r3, 62e <process_event+0xba>
				notify_all(mgr, &clients, state, res);
     622:	464b      	mov	r3, r9
     624:	4642      	mov	r2, r8
     626:	4669      	mov	r1, sp
     628:	4620      	mov	r0, r4
     62a:	f004 ff35 	bl	5498 <notify_all>
			if (transit != NULL) {
     62e:	b117      	cbz	r7, 636 <process_event+0xc2>
				transit(mgr, transition_complete);
     630:	4925      	ldr	r1, [pc, #148]	; (6c8 <process_event+0x154>)
     632:	4620      	mov	r0, r4
     634:	47b8      	blx	r7
	__asm__ volatile(
     636:	f04f 0320 	mov.w	r3, #32
     63a:	f3ef 8511 	mrs	r5, BASEPRI
     63e:	f383 8812 	msr	BASEPRI_MAX, r3
     642:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     646:	8b23      	ldrh	r3, [r4, #24]
     648:	f023 0308 	bic.w	r3, r3, #8
     64c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     64e:	8b23      	ldrh	r3, [r4, #24]
     650:	f013 0f10 	tst.w	r3, #16
     654:	d02e      	beq.n	6b4 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     656:	f023 0310 	bic.w	r3, r3, #16
     65a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     65c:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     65e:	8b26      	ldrh	r6, [r4, #24]
     660:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     664:	2800      	cmp	r0, #0
     666:	d09a      	beq.n	59e <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     668:	2802      	cmp	r0, #2
     66a:	d0a3      	beq.n	5b4 <process_event+0x40>
		if (evt == EVT_NOP) {
     66c:	2800      	cmp	r0, #0
     66e:	d096      	beq.n	59e <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     670:	2801      	cmp	r0, #1
     672:	d0a3      	beq.n	5bc <process_event+0x48>
		} else if (evt == EVT_START) {
     674:	2803      	cmp	r0, #3
     676:	d0aa      	beq.n	5ce <process_event+0x5a>
		} else if (evt == EVT_STOP) {
     678:	2804      	cmp	r0, #4
     67a:	d0b1      	beq.n	5e0 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
     67c:	2805      	cmp	r0, #5
     67e:	d0b8      	beq.n	5f2 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
     680:	2700      	movs	r7, #0
		res = 0;
     682:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     684:	8b23      	ldrh	r3, [r4, #24]
     686:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     68a:	45b0      	cmp	r8, r6
     68c:	d0ba      	beq.n	604 <process_event+0x90>
     68e:	68a2      	ldr	r2, [r4, #8]
     690:	2a00      	cmp	r2, #0
     692:	d0b9      	beq.n	608 <process_event+0x94>
     694:	2201      	movs	r2, #1
		if (do_monitors
     696:	4611      	mov	r1, r2
     698:	2a00      	cmp	r2, #0
     69a:	d1b7      	bne.n	60c <process_event+0x98>
     69c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     69e:	2a00      	cmp	r2, #0
     6a0:	d1b4      	bne.n	60c <process_event+0x98>
		    || (transit != NULL)) {
     6a2:	2f00      	cmp	r7, #0
     6a4:	d1b2      	bne.n	60c <process_event+0x98>
     6a6:	e7d2      	b.n	64e <process_event+0xda>
				notify_monitors(mgr, state, res);
     6a8:	464a      	mov	r2, r9
     6aa:	4641      	mov	r1, r8
     6ac:	4620      	mov	r0, r4
     6ae:	f004 fe45 	bl	533c <notify_monitors>
     6b2:	e7b4      	b.n	61e <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     6b4:	f013 0f20 	tst.w	r3, #32
     6b8:	d004      	beq.n	6c4 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     6ba:	f023 0320 	bic.w	r3, r3, #32
     6be:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     6c0:	2002      	movs	r0, #2
     6c2:	e7cc      	b.n	65e <process_event+0xea>
		evt = EVT_NOP;
     6c4:	2000      	movs	r0, #0
     6c6:	e7ca      	b.n	65e <process_event+0xea>
     6c8:	000054c7 	.word	0x000054c7

000006cc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6d0:	b093      	sub	sp, #76	; 0x4c
     6d2:	4606      	mov	r6, r0
     6d4:	460d      	mov	r5, r1
     6d6:	4692      	mov	sl, r2
     6d8:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     6da:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     6dc:	f89a 0000 	ldrb.w	r0, [sl]
     6e0:	2800      	cmp	r0, #0
     6e2:	f000 84d6 	beq.w	1092 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x92>
		if (*fp != '%') {
     6e6:	2825      	cmp	r0, #37	; 0x25
     6e8:	d008      	beq.n	6fc <cbvprintf+0x30>
			OUTC(*fp++);
     6ea:	f10a 0a01 	add.w	sl, sl, #1
     6ee:	4629      	mov	r1, r5
     6f0:	47b0      	blx	r6
     6f2:	2800      	cmp	r0, #0
     6f4:	f2c0 84ce 	blt.w	1094 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x94>
     6f8:	3401      	adds	r4, #1
			continue;
     6fa:	e7ef      	b.n	6dc <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     6fc:	2300      	movs	r3, #0
     6fe:	9306      	str	r3, [sp, #24]
     700:	9307      	str	r3, [sp, #28]
     702:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
     704:	9308      	str	r3, [sp, #32]
     706:	9309      	str	r3, [sp, #36]	; 0x24
     708:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
     70a:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
     70e:	f89a 3001 	ldrb.w	r3, [sl, #1]
     712:	2b25      	cmp	r3, #37	; 0x25
     714:	d001      	beq.n	71a <cbvprintf+0x4e>
	bool loop = true;
     716:	2701      	movs	r7, #1
     718:	e02c      	b.n	774 <cbvprintf+0xa8>
		conv->specifier = *sp++;
     71a:	f10a 0802 	add.w	r8, sl, #2
     71e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
     722:	e1a8      	b.n	a76 <CONFIG_ISR_STACK_SIZE+0x276>
			conv->flag_dash = true;
     724:	f89d 3020 	ldrb.w	r3, [sp, #32]
     728:	f043 0304 	orr.w	r3, r3, #4
     72c:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
     730:	b1ff      	cbz	r7, 772 <cbvprintf+0xa6>
			++sp;
     732:	f108 0801 	add.w	r8, r8, #1
     736:	e01c      	b.n	772 <cbvprintf+0xa6>
			conv->flag_plus = true;
     738:	f89d 3020 	ldrb.w	r3, [sp, #32]
     73c:	f043 0308 	orr.w	r3, r3, #8
     740:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     744:	e7f4      	b.n	730 <cbvprintf+0x64>
			conv->flag_space = true;
     746:	f89d 3020 	ldrb.w	r3, [sp, #32]
     74a:	f043 0310 	orr.w	r3, r3, #16
     74e:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     752:	e7ed      	b.n	730 <cbvprintf+0x64>
			conv->flag_hash = true;
     754:	f89d 3020 	ldrb.w	r3, [sp, #32]
     758:	f043 0320 	orr.w	r3, r3, #32
     75c:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     760:	e7e6      	b.n	730 <cbvprintf+0x64>
			conv->flag_zero = true;
     762:	f89d 3020 	ldrb.w	r3, [sp, #32]
     766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     76a:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     76e:	e7df      	b.n	730 <cbvprintf+0x64>
		switch (*sp) {
     770:	2700      	movs	r7, #0
	} while (loop);
     772:	b34f      	cbz	r7, 7c8 <cbvprintf+0xfc>
		switch (*sp) {
     774:	f898 3000 	ldrb.w	r3, [r8]
     778:	3b20      	subs	r3, #32
     77a:	2b10      	cmp	r3, #16
     77c:	d8f8      	bhi.n	770 <cbvprintf+0xa4>
     77e:	a201      	add	r2, pc, #4	; (adr r2, 784 <cbvprintf+0xb8>)
     780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     784:	00000747 	.word	0x00000747
     788:	00000771 	.word	0x00000771
     78c:	00000771 	.word	0x00000771
     790:	00000755 	.word	0x00000755
     794:	00000771 	.word	0x00000771
     798:	00000771 	.word	0x00000771
     79c:	00000771 	.word	0x00000771
     7a0:	00000771 	.word	0x00000771
     7a4:	00000771 	.word	0x00000771
     7a8:	00000771 	.word	0x00000771
     7ac:	00000771 	.word	0x00000771
     7b0:	00000739 	.word	0x00000739
     7b4:	00000771 	.word	0x00000771
     7b8:	00000725 	.word	0x00000725
     7bc:	00000771 	.word	0x00000771
     7c0:	00000771 	.word	0x00000771
     7c4:	00000763 	.word	0x00000763
	if (conv->flag_zero && conv->flag_dash) {
     7c8:	f89d 3020 	ldrb.w	r3, [sp, #32]
     7cc:	f003 0344 	and.w	r3, r3, #68	; 0x44
     7d0:	2b44      	cmp	r3, #68	; 0x44
     7d2:	d06d      	beq.n	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
	sp = extract_width(conv, sp);
     7d4:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
     7d8:	f89d 3020 	ldrb.w	r3, [sp, #32]
     7dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     7e0:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
     7e4:	f898 3000 	ldrb.w	r3, [r8]
     7e8:	2b2a      	cmp	r3, #42	; 0x2a
     7ea:	d068      	beq.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
	size_t width = extract_decimal(&sp);
     7ec:	a805      	add	r0, sp, #20
     7ee:	f004 fefa 	bl	55e6 <extract_decimal>
	if (sp != wp) {
     7f2:	9b05      	ldr	r3, [sp, #20]
     7f4:	4598      	cmp	r8, r3
     7f6:	d012      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		conv->width_present = true;
     7f8:	f89d 3020 	ldrb.w	r3, [sp, #32]
     7fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     800:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
     804:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
     806:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     80a:	2800      	cmp	r0, #0
     80c:	db60      	blt.n	8d0 <CONFIG_ISR_STACK_SIZE+0xd0>
     80e:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     810:	4313      	orrs	r3, r2
     812:	f89d 2020 	ldrb.w	r2, [sp, #32]
     816:	f363 0241 	bfi	r2, r3, #1, #1
     81a:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     81e:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
     820:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
     822:	781b      	ldrb	r3, [r3, #0]
     824:	2b2e      	cmp	r3, #46	; 0x2e
     826:	bf14      	ite	ne
     828:	2300      	movne	r3, #0
     82a:	2301      	moveq	r3, #1
     82c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     830:	f363 0241 	bfi	r2, r3, #1, #1
     834:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
     838:	2b00      	cmp	r3, #0
     83a:	d04b      	beq.n	8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
	++sp;
     83c:	9b05      	ldr	r3, [sp, #20]
     83e:	1c5a      	adds	r2, r3, #1
     840:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
     842:	785b      	ldrb	r3, [r3, #1]
     844:	2b2a      	cmp	r3, #42	; 0x2a
     846:	d048      	beq.n	8da <CONFIG_ISR_STACK_SIZE+0xda>
	size_t prec = extract_decimal(&sp);
     848:	a805      	add	r0, sp, #20
     84a:	f004 fecc 	bl	55e6 <extract_decimal>
	conv->prec_value = prec;
     84e:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
     850:	f89d 3020 	ldrb.w	r3, [sp, #32]
     854:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     858:	2800      	cmp	r0, #0
     85a:	db47      	blt.n	8ec <CONFIG_ISR_STACK_SIZE+0xec>
     85c:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     85e:	4313      	orrs	r3, r2
     860:	f89d 2020 	ldrb.w	r2, [sp, #32]
     864:	f363 0241 	bfi	r2, r3, #1, #1
     868:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     86c:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
     870:	f898 3000 	ldrb.w	r3, [r8]
     874:	3b4c      	subs	r3, #76	; 0x4c
     876:	2b2e      	cmp	r3, #46	; 0x2e
     878:	f200 80dc 	bhi.w	a34 <CONFIG_ISR_STACK_SIZE+0x234>
     87c:	e8df f003 	tbb	[pc, r3]
     880:	dadadaca 	.word	0xdadadaca
     884:	dadadada 	.word	0xdadadada
     888:	dadadada 	.word	0xdadadada
     88c:	dadadada 	.word	0xdadadada
     890:	dadadada 	.word	0xdadadada
     894:	dadadada 	.word	0xdadadada
     898:	dadadada 	.word	0xdadadada
     89c:	da6ada38 	.word	0xda6ada38
     8a0:	dadada51 	.word	0xdadada51
     8a4:	dadadada 	.word	0xdadadada
     8a8:	dadadac0 	.word	0xdadadac0
     8ac:	dada      	.short	0xdada
     8ae:	b6          	.byte	0xb6
     8af:	00          	.byte	0x00
		conv->flag_zero = false;
     8b0:	f89d 3020 	ldrb.w	r3, [sp, #32]
     8b4:	f36f 1386 	bfc	r3, #6, #1
     8b8:	f88d 3020 	strb.w	r3, [sp, #32]
     8bc:	e78a      	b.n	7d4 <cbvprintf+0x108>
		conv->width_star = true;
     8be:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     8c2:	f043 0301 	orr.w	r3, r3, #1
     8c6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     8ca:	4643      	mov	r3, r8
     8cc:	3301      	adds	r3, #1
     8ce:	e7a7      	b.n	820 <CONFIG_ISR_STACK_SIZE+0x20>
				      || (width != (size_t)conv->width_value));
     8d0:	2201      	movs	r2, #1
     8d2:	e79d      	b.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
		return sp;
     8d4:	f8dd 8014 	ldr.w	r8, [sp, #20]
     8d8:	e7ca      	b.n	870 <CONFIG_ISR_STACK_SIZE+0x70>
		conv->prec_star = true;
     8da:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     8de:	f043 0304 	orr.w	r3, r3, #4
     8e2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     8e6:	f102 0801 	add.w	r8, r2, #1
     8ea:	e7c1      	b.n	870 <CONFIG_ISR_STACK_SIZE+0x70>
			      || (prec != (size_t)conv->prec_value));
     8ec:	2201      	movs	r2, #1
     8ee:	e7b6      	b.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>
		if (*++sp == 'h') {
     8f0:	f108 0201 	add.w	r2, r8, #1
     8f4:	f898 3001 	ldrb.w	r3, [r8, #1]
     8f8:	2b68      	cmp	r3, #104	; 0x68
     8fa:	d008      	beq.n	90e <CONFIG_ISR_STACK_SIZE+0x10e>
			conv->length_mod = LENGTH_H;
     8fc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     900:	2102      	movs	r1, #2
     902:	f361 03c6 	bfi	r3, r1, #3, #4
     906:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
     90a:	4690      	mov	r8, r2
     90c:	e02b      	b.n	966 <CONFIG_ISR_STACK_SIZE+0x166>
			conv->length_mod = LENGTH_HH;
     90e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     912:	2201      	movs	r2, #1
     914:	f362 03c6 	bfi	r3, r2, #3, #4
     918:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     91c:	f108 0802 	add.w	r8, r8, #2
     920:	e021      	b.n	966 <CONFIG_ISR_STACK_SIZE+0x166>
		if (*++sp == 'l') {
     922:	f108 0201 	add.w	r2, r8, #1
     926:	f898 3001 	ldrb.w	r3, [r8, #1]
     92a:	2b6c      	cmp	r3, #108	; 0x6c
     92c:	d008      	beq.n	940 <CONFIG_ISR_STACK_SIZE+0x140>
			conv->length_mod = LENGTH_L;
     92e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     932:	2103      	movs	r1, #3
     934:	f361 03c6 	bfi	r3, r1, #3, #4
     938:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
     93c:	4690      	mov	r8, r2
     93e:	e012      	b.n	966 <CONFIG_ISR_STACK_SIZE+0x166>
			conv->length_mod = LENGTH_LL;
     940:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     944:	2204      	movs	r2, #4
     946:	f362 03c6 	bfi	r3, r2, #3, #4
     94a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     94e:	f108 0802 	add.w	r8, r8, #2
     952:	e008      	b.n	966 <CONFIG_ISR_STACK_SIZE+0x166>
		conv->length_mod = LENGTH_J;
     954:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     958:	2205      	movs	r2, #5
     95a:	f362 03c6 	bfi	r3, r2, #3, #4
     95e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     962:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
     966:	f818 3b01 	ldrb.w	r3, [r8], #1
     96a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
     96e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     972:	2a37      	cmp	r2, #55	; 0x37
     974:	f200 8150 	bhi.w	c18 <CONFIG_ISR_STACK_SIZE+0x418>
     978:	e8df f012 	tbh	[pc, r2, lsl #1]
     97c:	014e0126 	.word	0x014e0126
     980:	014e014e 	.word	0x014e014e
     984:	01260126 	.word	0x01260126
     988:	014e0126 	.word	0x014e0126
     98c:	014e014e 	.word	0x014e014e
     990:	014e014e 	.word	0x014e014e
     994:	014e014e 	.word	0x014e014e
     998:	014e014e 	.word	0x014e014e
     99c:	014e014e 	.word	0x014e014e
     9a0:	014e014e 	.word	0x014e014e
     9a4:	014e014e 	.word	0x014e014e
     9a8:	0113014e 	.word	0x0113014e
     9ac:	014e014e 	.word	0x014e014e
     9b0:	014e014e 	.word	0x014e014e
     9b4:	014e014e 	.word	0x014e014e
     9b8:	014e014e 	.word	0x014e014e
     9bc:	014e0126 	.word	0x014e0126
     9c0:	00630113 	.word	0x00630113
     9c4:	01260126 	.word	0x01260126
     9c8:	014e0126 	.word	0x014e0126
     9cc:	014e0063 	.word	0x014e0063
     9d0:	014e014e 	.word	0x014e014e
     9d4:	012f014e 	.word	0x012f014e
     9d8:	013f0113 	.word	0x013f0113
     9dc:	014e014e 	.word	0x014e014e
     9e0:	014e013f 	.word	0x014e013f
     9e4:	014e0113 	.word	0x014e0113
     9e8:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
     9ec:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     9f0:	2206      	movs	r2, #6
     9f2:	f362 03c6 	bfi	r3, r2, #3, #4
     9f6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     9fa:	f108 0801 	add.w	r8, r8, #1
		break;
     9fe:	e7b2      	b.n	966 <CONFIG_ISR_STACK_SIZE+0x166>
		conv->length_mod = LENGTH_T;
     a00:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     a04:	2207      	movs	r2, #7
     a06:	f362 03c6 	bfi	r3, r2, #3, #4
     a0a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     a0e:	f108 0801 	add.w	r8, r8, #1
		break;
     a12:	e7a8      	b.n	966 <CONFIG_ISR_STACK_SIZE+0x166>
		conv->length_mod = LENGTH_UPPER_L;
     a14:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     a18:	2208      	movs	r2, #8
     a1a:	f362 03c6 	bfi	r3, r2, #3, #4
     a1e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     a22:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
     a26:	f89d 3020 	ldrb.w	r3, [sp, #32]
     a2a:	f043 0302 	orr.w	r3, r3, #2
     a2e:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     a32:	e798      	b.n	966 <CONFIG_ISR_STACK_SIZE+0x166>
		conv->length_mod = LENGTH_NONE;
     a34:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     a38:	f36f 03c6 	bfc	r3, #3, #4
     a3c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
     a40:	e791      	b.n	966 <CONFIG_ISR_STACK_SIZE+0x166>
		conv->specifier_cat = SPECIFIER_SINT;
     a42:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     a46:	2101      	movs	r1, #1
     a48:	f361 0202 	bfi	r2, r1, #0, #3
     a4c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     a50:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     a54:	f002 0278 	and.w	r2, r2, #120	; 0x78
     a58:	2a40      	cmp	r2, #64	; 0x40
     a5a:	f000 80aa 	beq.w	bb2 <CONFIG_ISR_STACK_SIZE+0x3b2>
		if (conv->specifier == 'c') {
     a5e:	2b63      	cmp	r3, #99	; 0x63
     a60:	f000 80ae 	beq.w	bc0 <CONFIG_ISR_STACK_SIZE+0x3c0>
	conv->unsupported |= unsupported;
     a64:	f89d 3020 	ldrb.w	r3, [sp, #32]
     a68:	f3c3 0240 	ubfx	r2, r3, #1, #1
     a6c:	4317      	orrs	r7, r2
     a6e:	f367 0341 	bfi	r3, r7, #1, #1
     a72:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     a76:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     a7a:	f013 0f01 	tst.w	r3, #1
     a7e:	f000 80da 	beq.w	c36 <CONFIG_ISR_STACK_SIZE+0x436>
			width = va_arg(ap, int);
     a82:	9b03      	ldr	r3, [sp, #12]
     a84:	1d1a      	adds	r2, r3, #4
     a86:	9203      	str	r2, [sp, #12]
     a88:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     a8a:	2f00      	cmp	r7, #0
     a8c:	f2c0 80cb 	blt.w	c26 <CONFIG_ISR_STACK_SIZE+0x426>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     a90:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     a94:	f013 0f04 	tst.w	r3, #4
     a98:	f000 80df 	beq.w	c5a <CONFIG_ISR_STACK_SIZE+0x45a>
			int arg = va_arg(ap, int);
     a9c:	9b03      	ldr	r3, [sp, #12]
     a9e:	1d1a      	adds	r2, r3, #4
     aa0:	9203      	str	r2, [sp, #12]
     aa2:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
     aa6:	f1bb 0f00 	cmp.w	fp, #0
     aaa:	f2c0 80cd 	blt.w	c48 <CONFIG_ISR_STACK_SIZE+0x448>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     aae:	2300      	movs	r3, #0
     ab0:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
     ab2:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     ab4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     ab8:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     abc:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
     ac0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     ac4:	2b01      	cmp	r3, #1
     ac6:	f000 80d1 	beq.w	c6c <CONFIG_ISR_STACK_SIZE+0x46c>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     aca:	2b02      	cmp	r3, #2
     acc:	f000 8116 	beq.w	cfc <CONFIG_ISR_STACK_SIZE+0x4fc>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     ad0:	2b04      	cmp	r3, #4
     ad2:	f000 8167 	beq.w	da4 <CONFIG_ISR_STACK_SIZE+0x5a4>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     ad6:	2b03      	cmp	r3, #3
     ad8:	f000 817e 	beq.w	dd8 <CONFIG_ISR_STACK_SIZE+0x5d8>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     adc:	f89d 9020 	ldrb.w	r9, [sp, #32]
     ae0:	f019 0303 	ands.w	r3, r9, #3
     ae4:	9302      	str	r3, [sp, #8]
     ae6:	f040 817d 	bne.w	de4 <CONFIG_ISR_STACK_SIZE+0x5e4>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     aea:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
     aee:	3b25      	subs	r3, #37	; 0x25
     af0:	2b53      	cmp	r3, #83	; 0x53
     af2:	f200 8233 	bhi.w	f5c <CONFIG_ISR_STACK_SIZE+0x75c>
     af6:	e8df f013 	tbh	[pc, r3, lsl #1]
     afa:	0181      	.short	0x0181
     afc:	02310231 	.word	0x02310231
     b00:	02310231 	.word	0x02310231
     b04:	02310231 	.word	0x02310231
     b08:	02310231 	.word	0x02310231
     b0c:	02310231 	.word	0x02310231
     b10:	02310231 	.word	0x02310231
     b14:	02310231 	.word	0x02310231
     b18:	02310231 	.word	0x02310231
     b1c:	02310231 	.word	0x02310231
     b20:	02310231 	.word	0x02310231
     b24:	02310231 	.word	0x02310231
     b28:	02310231 	.word	0x02310231
     b2c:	02310231 	.word	0x02310231
     b30:	02310231 	.word	0x02310231
     b34:	02310231 	.word	0x02310231
     b38:	02310231 	.word	0x02310231
     b3c:	02310231 	.word	0x02310231
     b40:	02310231 	.word	0x02310231
     b44:	02310231 	.word	0x02310231
     b48:	02310231 	.word	0x02310231
     b4c:	02310231 	.word	0x02310231
     b50:	02310231 	.word	0x02310231
     b54:	02310231 	.word	0x02310231
     b58:	02310231 	.word	0x02310231
     b5c:	02310231 	.word	0x02310231
     b60:	023101c7 	.word	0x023101c7
     b64:	02310231 	.word	0x02310231
     b68:	02310231 	.word	0x02310231
     b6c:	02310231 	.word	0x02310231
     b70:	02310231 	.word	0x02310231
     b74:	01a10231 	.word	0x01a10231
     b78:	023101ab 	.word	0x023101ab
     b7c:	02310231 	.word	0x02310231
     b80:	01ab0231 	.word	0x01ab0231
     b84:	02310231 	.word	0x02310231
     b88:	02310231 	.word	0x02310231
     b8c:	01c70208 	.word	0x01c70208
     b90:	023101ea 	.word	0x023101ea
     b94:	018f0231 	.word	0x018f0231
     b98:	01c70231 	.word	0x01c70231
     b9c:	02310231 	.word	0x02310231
     ba0:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
     ba2:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     ba6:	2102      	movs	r1, #2
     ba8:	f361 0202 	bfi	r2, r1, #0, #3
     bac:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
     bb0:	e74e      	b.n	a50 <CONFIG_ISR_STACK_SIZE+0x250>
			conv->invalid = true;
     bb2:	f89d 1020 	ldrb.w	r1, [sp, #32]
     bb6:	f041 0101 	orr.w	r1, r1, #1
     bba:	f88d 1020 	strb.w	r1, [sp, #32]
     bbe:	e74e      	b.n	a5e <CONFIG_ISR_STACK_SIZE+0x25e>
			unsupported = (conv->length_mod != LENGTH_NONE);
     bc0:	1e17      	subs	r7, r2, #0
     bc2:	bf18      	it	ne
     bc4:	2701      	movne	r7, #1
     bc6:	e74d      	b.n	a64 <CONFIG_ISR_STACK_SIZE+0x264>
		conv->specifier_cat = SPECIFIER_FP;
     bc8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     bcc:	2204      	movs	r2, #4
     bce:	f362 0302 	bfi	r3, r2, #0, #3
     bd2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
     bd6:	2701      	movs	r7, #1
			break;
     bd8:	e744      	b.n	a64 <CONFIG_ISR_STACK_SIZE+0x264>
		conv->specifier_cat = SPECIFIER_PTR;
     bda:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     bde:	2203      	movs	r2, #3
     be0:	f362 0302 	bfi	r3, r2, #0, #3
     be4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     be8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     bec:	f003 0378 	and.w	r3, r3, #120	; 0x78
     bf0:	2b40      	cmp	r3, #64	; 0x40
     bf2:	f47f af37 	bne.w	a64 <CONFIG_ISR_STACK_SIZE+0x264>
			unsupported = true;
     bf6:	2701      	movs	r7, #1
     bf8:	e734      	b.n	a64 <CONFIG_ISR_STACK_SIZE+0x264>
		conv->specifier_cat = SPECIFIER_PTR;
     bfa:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     bfe:	2203      	movs	r2, #3
     c00:	f362 0302 	bfi	r3, r2, #0, #3
     c04:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
     c08:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     c0c:	f013 0f78 	tst.w	r3, #120	; 0x78
     c10:	f43f af28 	beq.w	a64 <CONFIG_ISR_STACK_SIZE+0x264>
			unsupported = true;
     c14:	2701      	movs	r7, #1
     c16:	e725      	b.n	a64 <CONFIG_ISR_STACK_SIZE+0x264>
		conv->invalid = true;
     c18:	f89d 3020 	ldrb.w	r3, [sp, #32]
     c1c:	f043 0301 	orr.w	r3, r3, #1
     c20:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     c24:	e71e      	b.n	a64 <CONFIG_ISR_STACK_SIZE+0x264>
				conv->flag_dash = true;
     c26:	f89d 3020 	ldrb.w	r3, [sp, #32]
     c2a:	f043 0304 	orr.w	r3, r3, #4
     c2e:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
     c32:	427f      	negs	r7, r7
     c34:	e72c      	b.n	a90 <CONFIG_ISR_STACK_SIZE+0x290>
		} else if (conv->width_present) {
     c36:	f99d 3020 	ldrsb.w	r3, [sp, #32]
     c3a:	2b00      	cmp	r3, #0
     c3c:	db02      	blt.n	c44 <CONFIG_ISR_STACK_SIZE+0x444>
		int width = -1;
     c3e:	f04f 37ff 	mov.w	r7, #4294967295
     c42:	e725      	b.n	a90 <CONFIG_ISR_STACK_SIZE+0x290>
			width = conv->width_value;
     c44:	9f09      	ldr	r7, [sp, #36]	; 0x24
     c46:	e723      	b.n	a90 <CONFIG_ISR_STACK_SIZE+0x290>
				conv->prec_present = false;
     c48:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     c4c:	f36f 0341 	bfc	r3, #1, #1
     c50:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
     c54:	f04f 3bff 	mov.w	fp, #4294967295
     c58:	e729      	b.n	aae <CONFIG_ISR_STACK_SIZE+0x2ae>
		} else if (conv->prec_present) {
     c5a:	f013 0f02 	tst.w	r3, #2
     c5e:	d002      	beq.n	c66 <CONFIG_ISR_STACK_SIZE+0x466>
			precision = conv->prec_value;
     c60:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
     c64:	e723      	b.n	aae <CONFIG_ISR_STACK_SIZE+0x2ae>
		int precision = -1;
     c66:	f04f 3bff 	mov.w	fp, #4294967295
     c6a:	e720      	b.n	aae <CONFIG_ISR_STACK_SIZE+0x2ae>
			switch (length_mod) {
     c6c:	1ecb      	subs	r3, r1, #3
     c6e:	2b04      	cmp	r3, #4
     c70:	d804      	bhi.n	c7c <CONFIG_ISR_STACK_SIZE+0x47c>
     c72:	e8df f003 	tbb	[pc, r3]
     c76:	1d0b      	.short	0x1d0b
     c78:	3529      	.short	0x3529
     c7a:	35          	.byte	0x35
     c7b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     c7c:	9b03      	ldr	r3, [sp, #12]
     c7e:	1d1a      	adds	r2, r3, #4
     c80:	9203      	str	r2, [sp, #12]
     c82:	681a      	ldr	r2, [r3, #0]
     c84:	17d3      	asrs	r3, r2, #31
     c86:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     c8a:	e006      	b.n	c9a <CONFIG_ISR_STACK_SIZE+0x49a>
					value->sint = va_arg(ap, long);
     c8c:	9b03      	ldr	r3, [sp, #12]
     c8e:	1d1a      	adds	r2, r3, #4
     c90:	9203      	str	r2, [sp, #12]
     c92:	681a      	ldr	r2, [r3, #0]
     c94:	17d3      	asrs	r3, r2, #31
     c96:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
     c9a:	2901      	cmp	r1, #1
     c9c:	d028      	beq.n	cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>
			} else if (length_mod == LENGTH_H) {
     c9e:	2902      	cmp	r1, #2
     ca0:	f47f af1c 	bne.w	adc <CONFIG_ISR_STACK_SIZE+0x2dc>
				value->sint = (short)value->sint;
     ca4:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
     ca8:	17d3      	asrs	r3, r2, #31
     caa:	e9cd 2306 	strd	r2, r3, [sp, #24]
     cae:	e715      	b.n	adc <CONFIG_ISR_STACK_SIZE+0x2dc>
					(sint_value_type)va_arg(ap, long long);
     cb0:	9b03      	ldr	r3, [sp, #12]
     cb2:	3307      	adds	r3, #7
     cb4:	f023 0307 	bic.w	r3, r3, #7
     cb8:	f103 0208 	add.w	r2, r3, #8
     cbc:	9203      	str	r2, [sp, #12]
     cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     cc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     cc6:	e7e8      	b.n	c9a <CONFIG_ISR_STACK_SIZE+0x49a>
					(sint_value_type)va_arg(ap, intmax_t);
     cc8:	9b03      	ldr	r3, [sp, #12]
     cca:	3307      	adds	r3, #7
     ccc:	f023 0307 	bic.w	r3, r3, #7
     cd0:	f103 0208 	add.w	r2, r3, #8
     cd4:	9203      	str	r2, [sp, #12]
     cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     cda:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     cde:	e7dc      	b.n	c9a <CONFIG_ISR_STACK_SIZE+0x49a>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     ce0:	9b03      	ldr	r3, [sp, #12]
     ce2:	1d1a      	adds	r2, r3, #4
     ce4:	9203      	str	r2, [sp, #12]
     ce6:	681a      	ldr	r2, [r3, #0]
     ce8:	17d3      	asrs	r3, r2, #31
				value->sint =
     cea:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     cee:	e7d4      	b.n	c9a <CONFIG_ISR_STACK_SIZE+0x49a>
				value->sint = (char)value->sint;
     cf0:	f89d 3018 	ldrb.w	r3, [sp, #24]
     cf4:	9306      	str	r3, [sp, #24]
     cf6:	2300      	movs	r3, #0
     cf8:	9307      	str	r3, [sp, #28]
     cfa:	e6ef      	b.n	adc <CONFIG_ISR_STACK_SIZE+0x2dc>
			switch (length_mod) {
     cfc:	1ecb      	subs	r3, r1, #3
     cfe:	2b04      	cmp	r3, #4
     d00:	d804      	bhi.n	d0c <CONFIG_ISR_STACK_SIZE+0x50c>
     d02:	e8df f003 	tbb	[pc, r3]
     d06:	1f0b      	.short	0x1f0b
     d08:	4135      	.short	0x4135
     d0a:	41          	.byte	0x41
     d0b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     d0c:	9b03      	ldr	r3, [sp, #12]
     d0e:	1d1a      	adds	r2, r3, #4
     d10:	9203      	str	r2, [sp, #12]
     d12:	681b      	ldr	r3, [r3, #0]
     d14:	9306      	str	r3, [sp, #24]
     d16:	2300      	movs	r3, #0
     d18:	9307      	str	r3, [sp, #28]
				break;
     d1a:	e01e      	b.n	d5a <CONFIG_ISR_STACK_SIZE+0x55a>
				    && (conv->specifier == 'c')) {
     d1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
     d20:	2b63      	cmp	r3, #99	; 0x63
     d22:	d007      	beq.n	d34 <CONFIG_ISR_STACK_SIZE+0x534>
					value->uint = va_arg(ap, unsigned long);
     d24:	9b03      	ldr	r3, [sp, #12]
     d26:	1d1a      	adds	r2, r3, #4
     d28:	9203      	str	r2, [sp, #12]
     d2a:	681b      	ldr	r3, [r3, #0]
     d2c:	9306      	str	r3, [sp, #24]
     d2e:	2300      	movs	r3, #0
     d30:	9307      	str	r3, [sp, #28]
     d32:	e012      	b.n	d5a <CONFIG_ISR_STACK_SIZE+0x55a>
					value->uint = (wchar_t)va_arg(ap,
     d34:	9b03      	ldr	r3, [sp, #12]
     d36:	1d1a      	adds	r2, r3, #4
     d38:	9203      	str	r2, [sp, #12]
     d3a:	681b      	ldr	r3, [r3, #0]
     d3c:	9306      	str	r3, [sp, #24]
     d3e:	2300      	movs	r3, #0
     d40:	9307      	str	r3, [sp, #28]
     d42:	e00a      	b.n	d5a <CONFIG_ISR_STACK_SIZE+0x55a>
					(uint_value_type)va_arg(ap,
     d44:	9b03      	ldr	r3, [sp, #12]
     d46:	3307      	adds	r3, #7
     d48:	f023 0307 	bic.w	r3, r3, #7
     d4c:	f103 0208 	add.w	r2, r3, #8
     d50:	9203      	str	r2, [sp, #12]
     d52:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     d56:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
     d5a:	2901      	cmp	r1, #1
     d5c:	d01c      	beq.n	d98 <CONFIG_ISR_STACK_SIZE+0x598>
			} else if (length_mod == LENGTH_H) {
     d5e:	2902      	cmp	r1, #2
     d60:	f47f aebc 	bne.w	adc <CONFIG_ISR_STACK_SIZE+0x2dc>
				value->uint = (unsigned short)value->uint;
     d64:	f8bd 3018 	ldrh.w	r3, [sp, #24]
     d68:	9306      	str	r3, [sp, #24]
     d6a:	2300      	movs	r3, #0
     d6c:	9307      	str	r3, [sp, #28]
     d6e:	e6b5      	b.n	adc <CONFIG_ISR_STACK_SIZE+0x2dc>
					(uint_value_type)va_arg(ap,
     d70:	9b03      	ldr	r3, [sp, #12]
     d72:	3307      	adds	r3, #7
     d74:	f023 0307 	bic.w	r3, r3, #7
     d78:	f103 0208 	add.w	r2, r3, #8
     d7c:	9203      	str	r2, [sp, #12]
     d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     d82:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     d86:	e7e8      	b.n	d5a <CONFIG_ISR_STACK_SIZE+0x55a>
					(uint_value_type)va_arg(ap, size_t);
     d88:	9b03      	ldr	r3, [sp, #12]
     d8a:	1d1a      	adds	r2, r3, #4
     d8c:	9203      	str	r2, [sp, #12]
     d8e:	681b      	ldr	r3, [r3, #0]
				value->uint =
     d90:	9306      	str	r3, [sp, #24]
     d92:	2300      	movs	r3, #0
     d94:	9307      	str	r3, [sp, #28]
				break;
     d96:	e7e0      	b.n	d5a <CONFIG_ISR_STACK_SIZE+0x55a>
				value->uint = (unsigned char)value->uint;
     d98:	f89d 3018 	ldrb.w	r3, [sp, #24]
     d9c:	9306      	str	r3, [sp, #24]
     d9e:	2300      	movs	r3, #0
     da0:	9307      	str	r3, [sp, #28]
     da2:	e69b      	b.n	adc <CONFIG_ISR_STACK_SIZE+0x2dc>
			if (length_mod == LENGTH_UPPER_L) {
     da4:	2908      	cmp	r1, #8
     da6:	d00b      	beq.n	dc0 <CONFIG_ISR_STACK_SIZE+0x5c0>
				value->dbl = va_arg(ap, double);
     da8:	9b03      	ldr	r3, [sp, #12]
     daa:	3307      	adds	r3, #7
     dac:	f023 0307 	bic.w	r3, r3, #7
     db0:	f103 0208 	add.w	r2, r3, #8
     db4:	9203      	str	r2, [sp, #12]
     db6:	e9d3 2300 	ldrd	r2, r3, [r3]
     dba:	e9cd 2306 	strd	r2, r3, [sp, #24]
     dbe:	e68d      	b.n	adc <CONFIG_ISR_STACK_SIZE+0x2dc>
				value->ldbl = va_arg(ap, long double);
     dc0:	9b03      	ldr	r3, [sp, #12]
     dc2:	3307      	adds	r3, #7
     dc4:	f023 0307 	bic.w	r3, r3, #7
     dc8:	f103 0208 	add.w	r2, r3, #8
     dcc:	9203      	str	r2, [sp, #12]
     dce:	e9d3 2300 	ldrd	r2, r3, [r3]
     dd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
     dd6:	e681      	b.n	adc <CONFIG_ISR_STACK_SIZE+0x2dc>
			value->ptr = va_arg(ap, void *);
     dd8:	9b03      	ldr	r3, [sp, #12]
     dda:	1d1a      	adds	r2, r3, #4
     ddc:	9203      	str	r2, [sp, #12]
     dde:	681b      	ldr	r3, [r3, #0]
     de0:	9306      	str	r3, [sp, #24]
     de2:	e67b      	b.n	adc <CONFIG_ISR_STACK_SIZE+0x2dc>
			OUTS(sp, fp);
     de4:	4643      	mov	r3, r8
     de6:	4652      	mov	r2, sl
     de8:	4629      	mov	r1, r5
     dea:	4630      	mov	r0, r6
     dec:	f004 fc78 	bl	56e0 <outs>
     df0:	2800      	cmp	r0, #0
     df2:	f2c0 814f 	blt.w	1094 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x94>
     df6:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
     df8:	46c2      	mov	sl, r8
			continue;
     dfa:	e46f      	b.n	6dc <cbvprintf+0x10>
		case '%':
			OUTC('%');
     dfc:	4629      	mov	r1, r5
     dfe:	2025      	movs	r0, #37	; 0x25
     e00:	47b0      	blx	r6
     e02:	2800      	cmp	r0, #0
     e04:	f2c0 8146 	blt.w	1094 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x94>
     e08:	3401      	adds	r4, #1
		char sign = 0;
     e0a:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
     e0e:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
     e12:	f04f 0a00 	mov.w	sl, #0
			break;
     e16:	e0a7      	b.n	f68 <CONFIG_ISR_STACK_SIZE+0x768>
		case 's': {
			bps = (const char *)value->ptr;
     e18:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
     e1c:	f1bb 0f00 	cmp.w	fp, #0
     e20:	db08      	blt.n	e34 <CONFIG_ISR_STACK_SIZE+0x634>
				len = strnlen(bps, precision);
     e22:	4659      	mov	r1, fp
     e24:	4650      	mov	r0, sl
     e26:	f004 fd39 	bl	589c <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
     e2a:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
     e2e:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
     e32:	e099      	b.n	f68 <CONFIG_ISR_STACK_SIZE+0x768>
				len = strlen(bps);
     e34:	4650      	mov	r0, sl
     e36:	f004 fd29 	bl	588c <strlen>
     e3a:	e7f6      	b.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     e3c:	9b06      	ldr	r3, [sp, #24]
     e3e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
     e42:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
     e46:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
     e4a:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
     e4e:	e08b      	b.n	f68 <CONFIG_ISR_STACK_SIZE+0x768>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
     e50:	f019 0f08 	tst.w	r9, #8
     e54:	d105      	bne.n	e62 <CONFIG_ISR_STACK_SIZE+0x662>
				sign = '+';
			} else if (conv->flag_space) {
     e56:	f019 0910 	ands.w	r9, r9, #16
     e5a:	d004      	beq.n	e66 <CONFIG_ISR_STACK_SIZE+0x666>
				sign = ' ';
     e5c:	f04f 0920 	mov.w	r9, #32
     e60:	e001      	b.n	e66 <CONFIG_ISR_STACK_SIZE+0x666>
				sign = '+';
     e62:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
     e66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
     e6a:	2a00      	cmp	r2, #0
     e6c:	f173 0100 	sbcs.w	r1, r3, #0
     e70:	db02      	blt.n	e78 <CONFIG_ISR_STACK_SIZE+0x678>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
     e72:	e9cd 2306 	strd	r2, r3, [sp, #24]
     e76:	e009      	b.n	e8c <CONFIG_ISR_STACK_SIZE+0x68c>
				value->uint = (uint_value_type)-sint;
     e78:	4252      	negs	r2, r2
     e7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     e7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
     e82:	f04f 092d 	mov.w	r9, #45	; 0x2d
     e86:	e001      	b.n	e8c <CONFIG_ISR_STACK_SIZE+0x68c>
		switch (conv->specifier) {
     e88:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
     e8c:	f10d 0346 	add.w	r3, sp, #70	; 0x46
     e90:	9300      	str	r3, [sp, #0]
     e92:	ab0c      	add	r3, sp, #48	; 0x30
     e94:	aa08      	add	r2, sp, #32
     e96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
     e9a:	f004 fbb7 	bl	560c <encode_uint>
     e9e:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
     ea0:	f1bb 0f00 	cmp.w	fp, #0
     ea4:	f2c0 8090 	blt.w	fc8 <CONFIG_ISR_STACK_SIZE+0x7c8>
				size_t len = bpe - bps;
     ea8:	f10d 0346 	add.w	r3, sp, #70	; 0x46
     eac:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
     eb0:	f89d 2020 	ldrb.w	r2, [sp, #32]
     eb4:	f36f 1286 	bfc	r2, #6, #1
     eb8:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
     ebc:	459b      	cmp	fp, r3
     ebe:	f240 8086 	bls.w	fce <CONFIG_ISR_STACK_SIZE+0x7ce>
					conv->pad0_value = precision - (int)len;
     ec2:	ebab 0303 	sub.w	r3, fp, r3
     ec6:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
     ec8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
     ecc:	e04c      	b.n	f68 <CONFIG_ISR_STACK_SIZE+0x768>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
     ece:	9806      	ldr	r0, [sp, #24]
     ed0:	b930      	cbnz	r0, ee0 <CONFIG_ISR_STACK_SIZE+0x6e0>
		char sign = 0;
     ed2:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
     ed6:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 109c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x9c>
			bps = "(nil)";
     eda:	f1ab 0a05 	sub.w	sl, fp, #5
     ede:	e043      	b.n	f68 <CONFIG_ISR_STACK_SIZE+0x768>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     ee0:	f10d 0346 	add.w	r3, sp, #70	; 0x46
     ee4:	9300      	str	r3, [sp, #0]
     ee6:	ab0c      	add	r3, sp, #48	; 0x30
     ee8:	aa08      	add	r2, sp, #32
     eea:	2100      	movs	r1, #0
     eec:	f004 fb8e 	bl	560c <encode_uint>
     ef0:	4682      	mov	sl, r0
				conv->altform_0c = true;
     ef2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     ef6:	f043 0310 	orr.w	r3, r3, #16
     efa:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
     efe:	2378      	movs	r3, #120	; 0x78
     f00:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
     f04:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
     f08:	e7ca      	b.n	ea0 <CONFIG_ISR_STACK_SIZE+0x6a0>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
     f0a:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
     f0c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     f10:	f3c3 03c3 	ubfx	r3, r3, #3, #4
     f14:	2b07      	cmp	r3, #7
     f16:	d806      	bhi.n	f26 <CONFIG_ISR_STACK_SIZE+0x726>
     f18:	e8df f003 	tbb	[pc, r3]
     f1c:	100e0c04 	.word	0x100e0c04
     f20:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
     f24:	6014      	str	r4, [r2, #0]
		char sign = 0;
     f26:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
     f2a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
     f2e:	f04f 0a00 	mov.w	sl, #0
}
     f32:	e019      	b.n	f68 <CONFIG_ISR_STACK_SIZE+0x768>
		*(signed char *)dp = (signed char)count;
     f34:	7014      	strb	r4, [r2, #0]
		break;
     f36:	e7f6      	b.n	f26 <CONFIG_ISR_STACK_SIZE+0x726>
		*(short *)dp = (short)count;
     f38:	8014      	strh	r4, [r2, #0]
		break;
     f3a:	e7f4      	b.n	f26 <CONFIG_ISR_STACK_SIZE+0x726>
		*(long *)dp = (long)count;
     f3c:	6014      	str	r4, [r2, #0]
		break;
     f3e:	e7f2      	b.n	f26 <CONFIG_ISR_STACK_SIZE+0x726>
		*(long long *)dp = (long long)count;
     f40:	4620      	mov	r0, r4
     f42:	17e1      	asrs	r1, r4, #31
     f44:	e9c2 0100 	strd	r0, r1, [r2]
		break;
     f48:	e7ed      	b.n	f26 <CONFIG_ISR_STACK_SIZE+0x726>
		*(intmax_t *)dp = (intmax_t)count;
     f4a:	4620      	mov	r0, r4
     f4c:	17e1      	asrs	r1, r4, #31
     f4e:	e9c2 0100 	strd	r0, r1, [r2]
		break;
     f52:	e7e8      	b.n	f26 <CONFIG_ISR_STACK_SIZE+0x726>
		*(size_t *)dp = (size_t)count;
     f54:	6014      	str	r4, [r2, #0]
		break;
     f56:	e7e6      	b.n	f26 <CONFIG_ISR_STACK_SIZE+0x726>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     f58:	6014      	str	r4, [r2, #0]
		break;
     f5a:	e7e4      	b.n	f26 <CONFIG_ISR_STACK_SIZE+0x726>
		switch (conv->specifier) {
     f5c:	f8dd 9008 	ldr.w	r9, [sp, #8]
     f60:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
     f64:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
     f68:	f1ba 0f00 	cmp.w	sl, #0
     f6c:	f000 808e 	beq.w	108c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x8c>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
     f70:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
     f74:	f1b9 0f00 	cmp.w	r9, #0
     f78:	d000      	beq.n	f7c <CONFIG_ISR_STACK_SIZE+0x77c>
			nj_len += 1U;
     f7a:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
     f7c:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
     f80:	f011 0f10 	tst.w	r1, #16
     f84:	d026      	beq.n	fd4 <CONFIG_ISR_STACK_SIZE+0x7d4>
			nj_len += 2U;
     f86:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
     f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f8a:	4413      	add	r3, r2
		if (conv->pad_fp) {
     f8c:	f011 0f40 	tst.w	r1, #64	; 0x40
     f90:	d001      	beq.n	f96 <CONFIG_ISR_STACK_SIZE+0x796>
			nj_len += conv->pad0_pre_exp;
     f92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     f94:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
     f96:	2f00      	cmp	r7, #0
     f98:	dd32      	ble.n	1000 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE>
			width -= (int)nj_len;
     f9a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
     f9c:	f89d 3020 	ldrb.w	r3, [sp, #32]
     fa0:	f013 0f04 	tst.w	r3, #4
     fa4:	d12c      	bne.n	1000 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
     fa6:	f013 0f40 	tst.w	r3, #64	; 0x40
     faa:	d018      	beq.n	fde <CONFIG_ISR_STACK_SIZE+0x7de>
					if (sign != 0) {
     fac:	f1b9 0f00 	cmp.w	r9, #0
     fb0:	d018      	beq.n	fe4 <CONFIG_ISR_STACK_SIZE+0x7e4>
						OUTC(sign);
     fb2:	4629      	mov	r1, r5
     fb4:	4648      	mov	r0, r9
     fb6:	47b0      	blx	r6
     fb8:	2800      	cmp	r0, #0
     fba:	db6b      	blt.n	1094 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x94>
     fbc:	3401      	adds	r4, #1
						sign = 0;
     fbe:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
     fc2:	2330      	movs	r3, #48	; 0x30
     fc4:	9302      	str	r3, [sp, #8]
     fc6:	e00f      	b.n	fe8 <CONFIG_ISR_STACK_SIZE+0x7e8>
		const char *bpe = buf + sizeof(buf);
     fc8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
     fcc:	e7cc      	b.n	f68 <CONFIG_ISR_STACK_SIZE+0x768>
     fce:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
     fd2:	e7c9      	b.n	f68 <CONFIG_ISR_STACK_SIZE+0x768>
		} else if (conv->altform_0) {
     fd4:	f011 0f08 	tst.w	r1, #8
     fd8:	d0d6      	beq.n	f88 <CONFIG_ISR_STACK_SIZE+0x788>
			nj_len += 1U;
     fda:	3201      	adds	r2, #1
     fdc:	e7d4      	b.n	f88 <CONFIG_ISR_STACK_SIZE+0x788>
				char pad = ' ';
     fde:	2320      	movs	r3, #32
     fe0:	9302      	str	r3, [sp, #8]
     fe2:	e001      	b.n	fe8 <CONFIG_ISR_STACK_SIZE+0x7e8>
					pad = '0';
     fe4:	2330      	movs	r3, #48	; 0x30
     fe6:	9302      	str	r3, [sp, #8]
     fe8:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
     fea:	1e5f      	subs	r7, r3, #1
     fec:	2b00      	cmp	r3, #0
     fee:	dd07      	ble.n	1000 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE>
					OUTC(pad);
     ff0:	4629      	mov	r1, r5
     ff2:	9802      	ldr	r0, [sp, #8]
     ff4:	47b0      	blx	r6
     ff6:	2800      	cmp	r0, #0
     ff8:	db4c      	blt.n	1094 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x94>
     ffa:	3401      	adds	r4, #1
				while (width-- > 0) {
     ffc:	463b      	mov	r3, r7
     ffe:	e7f4      	b.n	fea <CONFIG_ISR_STACK_SIZE+0x7ea>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    1000:	f1b9 0f00 	cmp.w	r9, #0
    1004:	d005      	beq.n	1012 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x12>
			OUTC(sign);
    1006:	4629      	mov	r1, r5
    1008:	4648      	mov	r0, r9
    100a:	47b0      	blx	r6
    100c:	2800      	cmp	r0, #0
    100e:	db41      	blt.n	1094 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x94>
    1010:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    1012:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    1016:	f3c3 1200 	ubfx	r2, r3, #4, #1
    101a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    101e:	4313      	orrs	r3, r2
    1020:	d005      	beq.n	102e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2e>
				OUTC('0');
    1022:	4629      	mov	r1, r5
    1024:	2030      	movs	r0, #48	; 0x30
    1026:	47b0      	blx	r6
    1028:	2800      	cmp	r0, #0
    102a:	db33      	blt.n	1094 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x94>
    102c:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    102e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    1032:	f013 0f10 	tst.w	r3, #16
    1036:	d006      	beq.n	1046 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x46>
				OUTC(conv->specifier);
    1038:	4629      	mov	r1, r5
    103a:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    103e:	47b0      	blx	r6
    1040:	2800      	cmp	r0, #0
    1042:	db27      	blt.n	1094 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x94>
    1044:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    1046:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    1048:	f103 39ff 	add.w	r9, r3, #4294967295
    104c:	2b00      	cmp	r3, #0
    104e:	dd07      	ble.n	1060 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x60>
				OUTC('0');
    1050:	4629      	mov	r1, r5
    1052:	2030      	movs	r0, #48	; 0x30
    1054:	47b0      	blx	r6
    1056:	2800      	cmp	r0, #0
    1058:	db1c      	blt.n	1094 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x94>
    105a:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    105c:	464b      	mov	r3, r9
    105e:	e7f3      	b.n	1048 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x48>
			}

			OUTS(bps, bpe);
    1060:	465b      	mov	r3, fp
    1062:	4652      	mov	r2, sl
    1064:	4629      	mov	r1, r5
    1066:	4630      	mov	r0, r6
    1068:	f004 fb3a 	bl	56e0 <outs>
    106c:	2800      	cmp	r0, #0
    106e:	db11      	blt.n	1094 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x94>
    1070:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    1072:	2f00      	cmp	r7, #0
    1074:	dd07      	ble.n	1086 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x86>
			OUTC(' ');
    1076:	4629      	mov	r1, r5
    1078:	2020      	movs	r0, #32
    107a:	47b0      	blx	r6
    107c:	2800      	cmp	r0, #0
    107e:	db09      	blt.n	1094 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x94>
    1080:	3401      	adds	r4, #1
			--width;
    1082:	3f01      	subs	r7, #1
    1084:	e7f5      	b.n	1072 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x72>
		fp = extract_conversion(conv, sp);
    1086:	46c2      	mov	sl, r8
    1088:	f7ff bb28 	b.w	6dc <cbvprintf+0x10>
    108c:	46c2      	mov	sl, r8
    108e:	f7ff bb25 	b.w	6dc <cbvprintf+0x10>
		}
	}

	return count;
    1092:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    1094:	b013      	add	sp, #76	; 0x4c
    1096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    109a:	bf00      	nop
    109c:	000068a5 	.word	0x000068a5

000010a0 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    10a0:	b508      	push	{r3, lr}
    10a2:	f04f 0220 	mov.w	r2, #32
    10a6:	f3ef 8311 	mrs	r3, BASEPRI
    10aa:	f382 8812 	msr	BASEPRI_MAX, r2
    10ae:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    10b2:	f000 fced 	bl	1a90 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    10b6:	4803      	ldr	r0, [pc, #12]	; (10c4 <sys_reboot+0x24>)
    10b8:	f004 f91c 	bl	52f4 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    10bc:	f000 fa64 	bl	1588 <arch_cpu_idle>
    10c0:	e7fc      	b.n	10bc <sys_reboot+0x1c>
    10c2:	bf00      	nop
    10c4:	000068a8 	.word	0x000068a8

000010c8 <nordicsemi_nrf53_init>:

#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf53_init(const struct device *arg)
{
    10c8:	b410      	push	{r4}
    10ca:	f04f 0320 	mov.w	r3, #32
    10ce:	f3ef 8411 	mrs	r4, BASEPRI
    10d2:	f383 8812 	msr	BASEPRI_MAX, r3
    10d6:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    10da:	2101      	movs	r1, #1
    10dc:	4b12      	ldr	r3, [pc, #72]	; (1128 <nordicsemi_nrf53_init+0x60>)
    10de:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    10e2:	4a12      	ldr	r2, [pc, #72]	; (112c <nordicsemi_nrf53_init+0x64>)
    10e4:	2302      	movs	r3, #2
    10e6:	f8c2 36d0 	str.w	r3, [r2, #1744]	; 0x6d0

#if defined(GPIO_PIN_CNF_MCUSEL_Msk)
NRF_STATIC_INLINE void nrf_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_mcusel_t mcu)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    10ea:	4811      	ldr	r0, [pc, #68]	; (1130 <nordicsemi_nrf53_init+0x68>)
    10ec:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    10f0:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    10f4:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    10f8:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    10fc:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
    1100:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    1104:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    1108:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    110c:	f8c2 1704 	str.w	r1, [r2, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    1110:	f8c2 1904 	str.w	r1, [r2, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    1114:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
	__asm__ volatile(
    1118:	f384 8811 	msr	BASEPRI, r4
    111c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1120:	2000      	movs	r0, #0
    1122:	bc10      	pop	{r4}
    1124:	4770      	bx	lr
    1126:	bf00      	nop
    1128:	50001000 	.word	0x50001000
    112c:	50004000 	.word	0x50004000
    1130:	50842500 	.word	0x50842500

00001134 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1134:	b170      	cbz	r0, 1154 <arch_busy_wait+0x20>

void arch_busy_wait(uint32_t time_us)
{
    1136:	b508      	push	{r3, lr}
    1138:	4602      	mov	r2, r0

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    113a:	4b07      	ldr	r3, [pc, #28]	; (1158 <arch_busy_wait+0x24>)
    113c:	681b      	ldr	r3, [r3, #0]
    113e:	4807      	ldr	r0, [pc, #28]	; (115c <arch_busy_wait+0x28>)
    1140:	fba0 1303 	umull	r1, r3, r0, r3
    1144:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
    1146:	fb03 f002 	mul.w	r0, r3, r2
    114a:	4b05      	ldr	r3, [pc, #20]	; (1160 <arch_busy_wait+0x2c>)
    114c:	f043 0301 	orr.w	r3, r3, #1
    1150:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    1152:	bd08      	pop	{r3, pc}
    1154:	4770      	bx	lr
    1156:	bf00      	nop
    1158:	2000003c 	.word	0x2000003c
    115c:	431bde83 	.word	0x431bde83
    1160:	00006890 	.word	0x00006890

00001164 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    1164:	b084      	sub	sp, #16
    1166:	ab04      	add	r3, sp, #16
    1168:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    116c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    1170:	2b06      	cmp	r3, #6
    1172:	d001      	beq.n	1178 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    1174:	b004      	add	sp, #16
    1176:	4770      	bx	lr
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    1178:	4b03      	ldr	r3, [pc, #12]	; (1188 <pm_power_state_set+0x24>)
    117a:	2201      	movs	r2, #1
    117c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1180:	f3bf 8f4f 	dsb	sy
        __WFE();
    1184:	bf20      	wfe
    while (true)
    1186:	e7fd      	b.n	1184 <pm_power_state_set+0x20>
    1188:	50004000 	.word	0x50004000

0000118c <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    118c:	b570      	push	{r4, r5, r6, lr}
    118e:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
    1190:	4b2a      	ldr	r3, [pc, #168]	; (123c <pm_system_resume+0xb0>)
    1192:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1194:	f004 031f 	and.w	r3, r4, #31
    1198:	2201      	movs	r2, #1
    119a:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    119c:	0961      	lsrs	r1, r4, #5
    119e:	4b28      	ldr	r3, [pc, #160]	; (1240 <pm_system_resume+0xb4>)
    11a0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    11a4:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    11a6:	e8d3 1fef 	ldaex	r1, [r3]
    11aa:	ea01 0500 	and.w	r5, r1, r0
    11ae:	e8c3 5fe6 	stlex	r6, r5, [r3]
    11b2:	2e00      	cmp	r6, #0
    11b4:	d1f7      	bne.n	11a6 <pm_system_resume+0x1a>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    11b6:	420a      	tst	r2, r1
    11b8:	d03d      	beq.n	1236 <pm_system_resume+0xaa>
		exit_pos_ops(z_power_states[id]);
    11ba:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    11be:	009a      	lsls	r2, r3, #2
    11c0:	4b20      	ldr	r3, [pc, #128]	; (1244 <pm_system_resume+0xb8>)
    11c2:	4413      	add	r3, r2
    11c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    11c8:	ab04      	add	r3, sp, #16
    11ca:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    11ce:	4b1e      	ldr	r3, [pc, #120]	; (1248 <pm_system_resume+0xbc>)
    11d0:	b163      	cbz	r3, 11ec <pm_system_resume+0x60>
		pm_power_state_exit_post_ops(info);
    11d2:	f004 faa0 	bl	5716 <pm_power_state_exit_post_ops>
	__asm__ volatile(
    11d6:	f04f 0320 	mov.w	r3, #32
    11da:	f3ef 8611 	mrs	r6, BASEPRI
    11de:	f383 8812 	msr	BASEPRI_MAX, r3
    11e2:	f3bf 8f6f 	isb	sy
    11e6:	4b19      	ldr	r3, [pc, #100]	; (124c <pm_system_resume+0xc0>)
    11e8:	681d      	ldr	r5, [r3, #0]
    11ea:	e00a      	b.n	1202 <pm_system_resume+0x76>
	__asm__ volatile(
    11ec:	2300      	movs	r3, #0
    11ee:	f383 8811 	msr	BASEPRI, r3
    11f2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    11f6:	e7ee      	b.n	11d6 <pm_system_resume+0x4a>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    11f8:	462b      	mov	r3, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    11fa:	b10d      	cbz	r5, 1200 <pm_system_resume+0x74>
	return node->next;
    11fc:	682b      	ldr	r3, [r5, #0]
    11fe:	b16b      	cbz	r3, 121c <pm_system_resume+0x90>
{
    1200:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1202:	b15d      	cbz	r5, 121c <pm_system_resume+0x90>
			callback = notifier->state_exit;
    1204:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
    1206:	2a00      	cmp	r2, #0
    1208:	d0f6      	beq.n	11f8 <pm_system_resume+0x6c>
			callback(z_power_states[_current_cpu->id].state);
    120a:	4b0c      	ldr	r3, [pc, #48]	; (123c <pm_system_resume+0xb0>)
    120c:	7d1b      	ldrb	r3, [r3, #20]
    120e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1212:	0099      	lsls	r1, r3, #2
    1214:	4b0b      	ldr	r3, [pc, #44]	; (1244 <pm_system_resume+0xb8>)
    1216:	5c58      	ldrb	r0, [r3, r1]
    1218:	4790      	blx	r2
    121a:	e7ed      	b.n	11f8 <pm_system_resume+0x6c>
	__asm__ volatile(
    121c:	f386 8811 	msr	BASEPRI, r6
    1220:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1224:	4807      	ldr	r0, [pc, #28]	; (1244 <pm_system_resume+0xb8>)
    1226:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    122a:	00a2      	lsls	r2, r4, #2
    122c:	1881      	adds	r1, r0, r2
    122e:	2300      	movs	r3, #0
    1230:	5083      	str	r3, [r0, r2]
    1232:	604b      	str	r3, [r1, #4]
    1234:	608b      	str	r3, [r1, #8]
			0, 0};
	}
}
    1236:	b004      	add	sp, #16
    1238:	bd70      	pop	{r4, r5, r6, pc}
    123a:	bf00      	nop
    123c:	20000944 	.word	0x20000944
    1240:	20000318 	.word	0x20000318
    1244:	2000031c 	.word	0x2000031c
    1248:	00005717 	.word	0x00005717
    124c:	20000310 	.word	0x20000310

00001250 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1250:	b5f0      	push	{r4, r5, r6, r7, lr}
    1252:	b089      	sub	sp, #36	; 0x24
    1254:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1256:	4b4e      	ldr	r3, [pc, #312]	; (1390 <pm_system_suspend+0x140>)
    1258:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    125a:	f004 031f 	and.w	r3, r4, #31
    125e:	2201      	movs	r2, #1
    1260:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    1262:	0961      	lsrs	r1, r4, #5
    1264:	4b4b      	ldr	r3, [pc, #300]	; (1394 <pm_system_suspend+0x144>)
    1266:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    126a:	e8d3 1fef 	ldaex	r1, [r3]
    126e:	ea41 0002 	orr.w	r0, r1, r2
    1272:	e8c3 0fe6 	stlex	r6, r0, [r3]
    1276:	2e00      	cmp	r6, #0
    1278:	d1f7      	bne.n	126a <pm_system_suspend+0x1a>

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    127a:	420a      	tst	r2, r1
    127c:	d016      	beq.n	12ac <pm_system_suspend+0x5c>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    127e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1282:	4a45      	ldr	r2, [pc, #276]	; (1398 <pm_system_suspend+0x148>)
    1284:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    1288:	2b00      	cmp	r3, #0
    128a:	d07f      	beq.n	138c <pm_system_suspend+0x13c>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    128c:	f1b5 3fff 	cmp.w	r5, #4294967295
    1290:	d11c      	bne.n	12cc <pm_system_suspend+0x7c>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1292:	f003 f979 	bl	4588 <k_sched_lock>
	__asm__ volatile(
    1296:	f04f 0320 	mov.w	r3, #32
    129a:	f3ef 8611 	mrs	r6, BASEPRI
    129e:	f383 8812 	msr	BASEPRI_MAX, r3
    12a2:	f3bf 8f6f 	isb	sy
	return list->head;
    12a6:	4b3d      	ldr	r3, [pc, #244]	; (139c <pm_system_suspend+0x14c>)
    12a8:	681d      	ldr	r5, [r3, #0]
    12aa:	e02a      	b.n	1302 <pm_system_suspend+0xb2>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    12ac:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    12b0:	4b39      	ldr	r3, [pc, #228]	; (1398 <pm_system_suspend+0x148>)
    12b2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    12b6:	466f      	mov	r7, sp
    12b8:	462a      	mov	r2, r5
    12ba:	4621      	mov	r1, r4
    12bc:	4638      	mov	r0, r7
    12be:	f004 fa35 	bl	572c <pm_policy_next_state>
    12c2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    12c6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    12ca:	e7d8      	b.n	127e <pm_system_suspend+0x2e>
		     k_us_to_ticks_ceil32(
    12cc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    12d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    12d4:	689b      	ldr	r3, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    12d6:	0c59      	lsrs	r1, r3, #17
    12d8:	03d8      	lsls	r0, r3, #15
    12da:	4e31      	ldr	r6, [pc, #196]	; (13a0 <pm_system_suspend+0x150>)
    12dc:	4a31      	ldr	r2, [pc, #196]	; (13a4 <pm_system_suspend+0x154>)
    12de:	2300      	movs	r3, #0
    12e0:	1980      	adds	r0, r0, r6
    12e2:	f04f 0600 	mov.w	r6, #0
    12e6:	eb46 0101 	adc.w	r1, r6, r1
    12ea:	f7fe ff33 	bl	154 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    12ee:	2101      	movs	r1, #1
    12f0:	1a28      	subs	r0, r5, r0
    12f2:	f005 f8f1 	bl	64d8 <z_set_timeout_expiry>
    12f6:	e7cc      	b.n	1292 <pm_system_suspend+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    12f8:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    12fa:	b10d      	cbz	r5, 1300 <pm_system_suspend+0xb0>
	return node->next;
    12fc:	682b      	ldr	r3, [r5, #0]
    12fe:	b16b      	cbz	r3, 131c <pm_system_suspend+0xcc>
{
    1300:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1302:	b15d      	cbz	r5, 131c <pm_system_suspend+0xcc>
			callback = notifier->state_entry;
    1304:	686a      	ldr	r2, [r5, #4]
		if (callback) {
    1306:	2a00      	cmp	r2, #0
    1308:	d0f6      	beq.n	12f8 <pm_system_suspend+0xa8>
			callback(z_power_states[_current_cpu->id].state);
    130a:	4b21      	ldr	r3, [pc, #132]	; (1390 <pm_system_suspend+0x140>)
    130c:	7d1b      	ldrb	r3, [r3, #20]
    130e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1312:	4921      	ldr	r1, [pc, #132]	; (1398 <pm_system_suspend+0x148>)
    1314:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    1318:	4790      	blx	r2
    131a:	e7ed      	b.n	12f8 <pm_system_suspend+0xa8>
	__asm__ volatile(
    131c:	f386 8811 	msr	BASEPRI, r6
    1320:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1324:	f004 031f 	and.w	r3, r4, #31
    1328:	2101      	movs	r1, #1
    132a:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    132c:	0963      	lsrs	r3, r4, #5
    132e:	4a1e      	ldr	r2, [pc, #120]	; (13a8 <pm_system_suspend+0x158>)
    1330:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1334:	e8d3 2fef 	ldaex	r2, [r3]
    1338:	430a      	orrs	r2, r1
    133a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    133e:	2800      	cmp	r0, #0
    1340:	d1f8      	bne.n	1334 <pm_system_suspend+0xe4>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    1342:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1346:	4a14      	ldr	r2, [pc, #80]	; (1398 <pm_system_suspend+0x148>)
    1348:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    134c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1350:	ab08      	add	r3, sp, #32
    1352:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    1356:	4b15      	ldr	r3, [pc, #84]	; (13ac <pm_system_suspend+0x15c>)
    1358:	b10b      	cbz	r3, 135e <pm_system_suspend+0x10e>
		pm_power_state_set(info);
    135a:	f7ff ff03 	bl	1164 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    135e:	f7ff ff15 	bl	118c <pm_system_resume>
	k_sched_unlock();
    1362:	f003 fb0f 	bl	4984 <k_sched_unlock>
	bool ret = true;
    1366:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    1368:	f004 021f 	and.w	r2, r4, #31
    136c:	2301      	movs	r3, #1
    136e:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1370:	0964      	lsrs	r4, r4, #5
    1372:	4a08      	ldr	r2, [pc, #32]	; (1394 <pm_system_suspend+0x144>)
    1374:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    1378:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    137a:	e8d4 2fef 	ldaex	r2, [r4]
    137e:	401a      	ands	r2, r3
    1380:	e8c4 2fe1 	stlex	r1, r2, [r4]
    1384:	2900      	cmp	r1, #0
    1386:	d1f8      	bne.n	137a <pm_system_suspend+0x12a>
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    1388:	b009      	add	sp, #36	; 0x24
    138a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = false;
    138c:	2000      	movs	r0, #0
    138e:	e7eb      	b.n	1368 <pm_system_suspend+0x118>
    1390:	20000944 	.word	0x20000944
    1394:	20000328 	.word	0x20000328
    1398:	2000031c 	.word	0x2000031c
    139c:	20000310 	.word	0x20000310
    13a0:	000f423f 	.word	0x000f423f
    13a4:	000f4240 	.word	0x000f4240
    13a8:	20000318 	.word	0x20000318
    13ac:	00001165 	.word	0x00001165

000013b0 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    13b0:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    13b2:	4802      	ldr	r0, [pc, #8]	; (13bc <nrf_cc3xx_platform_abort_init+0xc>)
    13b4:	f003 fe3e 	bl	5034 <nrf_cc3xx_platform_set_abort>
}
    13b8:	bd08      	pop	{r3, pc}
    13ba:	bf00      	nop
    13bc:	000068d4 	.word	0x000068d4

000013c0 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    13c0:	b308      	cbz	r0, 1406 <mutex_unlock_platform+0x46>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    13c2:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    13c4:	6843      	ldr	r3, [r0, #4]
    13c6:	2b04      	cmp	r3, #4
    13c8:	d007      	beq.n	13da <mutex_unlock_platform+0x1a>
    13ca:	2b08      	cmp	r3, #8
    13cc:	d012      	beq.n	13f4 <mutex_unlock_platform+0x34>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    13ce:	b1fb      	cbz	r3, 1410 <mutex_unlock_platform+0x50>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    13d0:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    13d2:	f002 ffc9 	bl	4368 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    13d6:	2000      	movs	r0, #0
    13d8:	e014      	b.n	1404 <mutex_unlock_platform+0x44>
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    13da:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    13dc:	2200      	movs	r2, #0
    13de:	e8d3 1fef 	ldaex	r1, [r3]
    13e2:	2901      	cmp	r1, #1
    13e4:	d103      	bne.n	13ee <mutex_unlock_platform+0x2e>
    13e6:	e8c3 2fe0 	stlex	r0, r2, [r3]
    13ea:	2800      	cmp	r0, #0
    13ec:	d1f7      	bne.n	13de <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    13ee:	d10d      	bne.n	140c <mutex_unlock_platform+0x4c>
    13f0:	4610      	mov	r0, r2
    13f2:	e007      	b.n	1404 <mutex_unlock_platform+0x44>
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    13f4:	6803      	ldr	r3, [r0, #0]
    13f6:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    13f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
    13fc:	2000      	movs	r0, #0
    13fe:	4a05      	ldr	r2, [pc, #20]	; (1414 <mutex_unlock_platform+0x54>)
    1400:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    }
}
    1404:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1406:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    140a:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    140c:	4802      	ldr	r0, [pc, #8]	; (1418 <mutex_unlock_platform+0x58>)
    140e:	e7f9      	b.n	1404 <mutex_unlock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1410:	4802      	ldr	r0, [pc, #8]	; (141c <mutex_unlock_platform+0x5c>)
    1412:	e7f7      	b.n	1404 <mutex_unlock_platform+0x44>
    1414:	50030000 	.word	0x50030000
    1418:	ffff8fe9 	.word	0xffff8fe9
    141c:	ffff8fea 	.word	0xffff8fea

00001420 <mutex_lock_platform>:
    if(mutex == NULL) {
    1420:	b370      	cbz	r0, 1480 <mutex_lock_platform+0x60>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1422:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    1424:	6843      	ldr	r3, [r0, #4]
    1426:	2b04      	cmp	r3, #4
    1428:	d004      	beq.n	1434 <mutex_lock_platform+0x14>
    142a:	2b08      	cmp	r3, #8
    142c:	d00f      	beq.n	144e <mutex_lock_platform+0x2e>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    142e:	b9c3      	cbnz	r3, 1462 <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1430:	4815      	ldr	r0, [pc, #84]	; (1488 <mutex_lock_platform+0x68>)
    1432:	e00b      	b.n	144c <mutex_lock_platform+0x2c>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    1434:	6803      	ldr	r3, [r0, #0]
    1436:	2201      	movs	r2, #1
    1438:	e8d3 1fef 	ldaex	r1, [r3]
    143c:	2900      	cmp	r1, #0
    143e:	d103      	bne.n	1448 <mutex_lock_platform+0x28>
    1440:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1444:	2800      	cmp	r0, #0
    1446:	d1f7      	bne.n	1438 <mutex_lock_platform+0x18>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1448:	d116      	bne.n	1478 <mutex_lock_platform+0x58>
    144a:	2000      	movs	r0, #0
}
    144c:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    144e:	6803      	ldr	r3, [r0, #0]
    1450:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    1452:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1456:	4a0d      	ldr	r2, [pc, #52]	; (148c <mutex_lock_platform+0x6c>)
    1458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    145c:	b973      	cbnz	r3, 147c <mutex_lock_platform+0x5c>
    145e:	2000      	movs	r0, #0
    1460:	e7f4      	b.n	144c <mutex_lock_platform+0x2c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1462:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1464:	f04f 32ff 	mov.w	r2, #4294967295
    1468:	f04f 33ff 	mov.w	r3, #4294967295
    146c:	f002 fef2 	bl	4254 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1470:	2800      	cmp	r0, #0
    1472:	d0eb      	beq.n	144c <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    1474:	4806      	ldr	r0, [pc, #24]	; (1490 <mutex_lock_platform+0x70>)
    1476:	e7e9      	b.n	144c <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1478:	4805      	ldr	r0, [pc, #20]	; (1490 <mutex_lock_platform+0x70>)
    147a:	e7e7      	b.n	144c <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    147c:	4804      	ldr	r0, [pc, #16]	; (1490 <mutex_lock_platform+0x70>)
    147e:	e7e5      	b.n	144c <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1480:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    1484:	4770      	bx	lr
    1486:	bf00      	nop
    1488:	ffff8fea 	.word	0xffff8fea
    148c:	50030000 	.word	0x50030000
    1490:	ffff8fe9 	.word	0xffff8fe9

00001494 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1494:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1496:	4604      	mov	r4, r0
    1498:	b188      	cbz	r0, 14be <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    149a:	6863      	ldr	r3, [r4, #4]
    149c:	2b04      	cmp	r3, #4
    149e:	d00d      	beq.n	14bc <mutex_free_platform+0x28>
    14a0:	2b08      	cmp	r3, #8
    14a2:	d00b      	beq.n	14bc <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    14a4:	b153      	cbz	r3, 14bc <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    14a6:	f013 0f02 	tst.w	r3, #2
    14aa:	d00d      	beq.n	14c8 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    14ac:	4621      	mov	r1, r4
    14ae:	4809      	ldr	r0, [pc, #36]	; (14d4 <mutex_free_platform+0x40>)
    14b0:	f004 fe5b 	bl	616a <k_mem_slab_free>
        mutex->mutex = NULL;
    14b4:	2300      	movs	r3, #0
    14b6:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    14b8:	2300      	movs	r3, #0
    14ba:	6063      	str	r3, [r4, #4]
}
    14bc:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    14be:	4b06      	ldr	r3, [pc, #24]	; (14d8 <mutex_free_platform+0x44>)
    14c0:	685b      	ldr	r3, [r3, #4]
    14c2:	4806      	ldr	r0, [pc, #24]	; (14dc <mutex_free_platform+0x48>)
    14c4:	4798      	blx	r3
    14c6:	e7e8      	b.n	149a <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    14c8:	2214      	movs	r2, #20
    14ca:	2100      	movs	r1, #0
    14cc:	6820      	ldr	r0, [r4, #0]
    14ce:	f004 fa1d 	bl	590c <memset>
    14d2:	e7f1      	b.n	14b8 <mutex_free_platform+0x24>
    14d4:	2000032c 	.word	0x2000032c
    14d8:	200000c8 	.word	0x200000c8
    14dc:	000068dc 	.word	0x000068dc

000014e0 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    14e0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    14e2:	4604      	mov	r4, r0
    14e4:	b178      	cbz	r0, 1506 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    14e6:	6863      	ldr	r3, [r4, #4]
    14e8:	2b04      	cmp	r3, #4
    14ea:	d00b      	beq.n	1504 <mutex_init_platform+0x24>
    14ec:	2b08      	cmp	r3, #8
    14ee:	d009      	beq.n	1504 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    14f0:	b90b      	cbnz	r3, 14f6 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    14f2:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    14f4:	b163      	cbz	r3, 1510 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    14f6:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    14f8:	f004 fea0 	bl	623c <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    14fc:	6863      	ldr	r3, [r4, #4]
    14fe:	f043 0301 	orr.w	r3, r3, #1
    1502:	6063      	str	r3, [r4, #4]
}
    1504:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    1506:	4b0f      	ldr	r3, [pc, #60]	; (1544 <mutex_init_platform+0x64>)
    1508:	685b      	ldr	r3, [r3, #4]
    150a:	480f      	ldr	r0, [pc, #60]	; (1548 <mutex_init_platform+0x68>)
    150c:	4798      	blx	r3
    150e:	e7ea      	b.n	14e6 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1510:	f04f 32ff 	mov.w	r2, #4294967295
    1514:	f04f 33ff 	mov.w	r3, #4294967295
    1518:	4621      	mov	r1, r4
    151a:	480c      	ldr	r0, [pc, #48]	; (154c <mutex_init_platform+0x6c>)
    151c:	f002 fd68 	bl	3ff0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1520:	b908      	cbnz	r0, 1526 <mutex_init_platform+0x46>
    1522:	6823      	ldr	r3, [r4, #0]
    1524:	b91b      	cbnz	r3, 152e <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    1526:	4b07      	ldr	r3, [pc, #28]	; (1544 <mutex_init_platform+0x64>)
    1528:	685b      	ldr	r3, [r3, #4]
    152a:	4809      	ldr	r0, [pc, #36]	; (1550 <mutex_init_platform+0x70>)
    152c:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    152e:	2214      	movs	r2, #20
    1530:	2100      	movs	r1, #0
    1532:	6820      	ldr	r0, [r4, #0]
    1534:	f004 f9ea 	bl	590c <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1538:	6863      	ldr	r3, [r4, #4]
    153a:	f043 0302 	orr.w	r3, r3, #2
    153e:	6063      	str	r3, [r4, #4]
    1540:	e7d9      	b.n	14f6 <mutex_init_platform+0x16>
    1542:	bf00      	nop
    1544:	200000c8 	.word	0x200000c8
    1548:	000068dc 	.word	0x000068dc
    154c:	2000032c 	.word	0x2000032c
    1550:	00006904 	.word	0x00006904

00001554 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1554:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1556:	2340      	movs	r3, #64	; 0x40
    1558:	2214      	movs	r2, #20
    155a:	4904      	ldr	r1, [pc, #16]	; (156c <nrf_cc3xx_platform_mutex_init+0x18>)
    155c:	4804      	ldr	r0, [pc, #16]	; (1570 <nrf_cc3xx_platform_mutex_init+0x1c>)
    155e:	f004 fdf6 	bl	614e <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1562:	4904      	ldr	r1, [pc, #16]	; (1574 <nrf_cc3xx_platform_mutex_init+0x20>)
    1564:	4804      	ldr	r0, [pc, #16]	; (1578 <nrf_cc3xx_platform_mutex_init+0x24>)
    1566:	f003 fdc3 	bl	50f0 <nrf_cc3xx_platform_set_mutexes>
}
    156a:	bd08      	pop	{r3, pc}
    156c:	20000348 	.word	0x20000348
    1570:	2000032c 	.word	0x2000032c
    1574:	00006944 	.word	0x00006944
    1578:	00006934 	.word	0x00006934

0000157c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    157c:	4901      	ldr	r1, [pc, #4]	; (1584 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    157e:	2210      	movs	r2, #16
	str	r2, [r1]
    1580:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1582:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1584:	e000ed10 	.word	0xe000ed10

00001588 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1588:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    158a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    158c:	f380 8811 	msr	BASEPRI, r0
	isb
    1590:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1594:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1598:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    159a:	b662      	cpsie	i
	isb
    159c:	f3bf 8f6f 	isb	sy

	bx	lr
    15a0:	4770      	bx	lr
    15a2:	bf00      	nop

000015a4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    15a4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    15a6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    15a8:	f381 8811 	msr	BASEPRI, r1

	wfe
    15ac:	bf20      	wfe

	msr	BASEPRI, r0
    15ae:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    15b2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    15b4:	4770      	bx	lr
    15b6:	bf00      	nop

000015b8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    15b8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    15ba:	2b00      	cmp	r3, #0
    15bc:	db08      	blt.n	15d0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15be:	f000 001f 	and.w	r0, r0, #31
    15c2:	095b      	lsrs	r3, r3, #5
    15c4:	2201      	movs	r2, #1
    15c6:	fa02 f000 	lsl.w	r0, r2, r0
    15ca:	4a02      	ldr	r2, [pc, #8]	; (15d4 <arch_irq_enable+0x1c>)
    15cc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    15d0:	4770      	bx	lr
    15d2:	bf00      	nop
    15d4:	e000e100 	.word	0xe000e100

000015d8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    15d8:	0942      	lsrs	r2, r0, #5
    15da:	4b05      	ldr	r3, [pc, #20]	; (15f0 <arch_irq_is_enabled+0x18>)
    15dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    15e0:	f000 001f 	and.w	r0, r0, #31
    15e4:	2301      	movs	r3, #1
    15e6:	fa03 f000 	lsl.w	r0, r3, r0
}
    15ea:	4010      	ands	r0, r2
    15ec:	4770      	bx	lr
    15ee:	bf00      	nop
    15f0:	e000e100 	.word	0xe000e100

000015f4 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    15f4:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    15f6:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    15f8:	2b00      	cmp	r3, #0
    15fa:	db08      	blt.n	160e <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    15fc:	0149      	lsls	r1, r1, #5
    15fe:	b2c9      	uxtb	r1, r1
    1600:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1604:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1608:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    160c:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    160e:	f000 000f 	and.w	r0, r0, #15
    1612:	0149      	lsls	r1, r1, #5
    1614:	b2c9      	uxtb	r1, r1
    1616:	4b01      	ldr	r3, [pc, #4]	; (161c <z_arm_irq_priority_set+0x28>)
    1618:	5419      	strb	r1, [r3, r0]
}
    161a:	4770      	bx	lr
    161c:	e000ed14 	.word	0xe000ed14

00001620 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1620:	bf30      	wfi
    b z_SysNmiOnReset
    1622:	f7ff bffd 	b.w	1620 <z_SysNmiOnReset>
    1626:	bf00      	nop

00001628 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1628:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    162a:	4b0b      	ldr	r3, [pc, #44]	; (1658 <z_arm_prep_c+0x30>)
    162c:	4a0b      	ldr	r2, [pc, #44]	; (165c <z_arm_prep_c+0x34>)
    162e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1632:	609a      	str	r2, [r3, #8]
    1634:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1638:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    163c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1640:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1648:	f002 fc72 	bl	3f30 <z_bss_zero>
	z_data_copy();
    164c:	f003 fb08 	bl	4c60 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1650:	f000 f9d4 	bl	19fc <z_arm_interrupt_init>
	z_cstart();
    1654:	f002 fc78 	bl	3f48 <z_cstart>
    1658:	e000ed00 	.word	0xe000ed00
    165c:	00000000 	.word	0x00000000

00001660 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1660:	4a0a      	ldr	r2, [pc, #40]	; (168c <arch_swap+0x2c>)
    1662:	6893      	ldr	r3, [r2, #8]
    1664:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    1668:	4909      	ldr	r1, [pc, #36]	; (1690 <arch_swap+0x30>)
    166a:	6809      	ldr	r1, [r1, #0]
    166c:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1670:	4908      	ldr	r1, [pc, #32]	; (1694 <arch_swap+0x34>)
    1672:	684b      	ldr	r3, [r1, #4]
    1674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1678:	604b      	str	r3, [r1, #4]
    167a:	2300      	movs	r3, #0
    167c:	f383 8811 	msr	BASEPRI, r3
    1680:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1684:	6893      	ldr	r3, [r2, #8]
}
    1686:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    168a:	4770      	bx	lr
    168c:	20000944 	.word	0x20000944
    1690:	00006a84 	.word	0x00006a84
    1694:	e000ed00 	.word	0xe000ed00

00001698 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1698:	4914      	ldr	r1, [pc, #80]	; (16ec <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    169a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    169c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    16a0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    16a2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    16a6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    16aa:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    16ac:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    16b0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    16b4:	4f0e      	ldr	r7, [pc, #56]	; (16f0 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    16b6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    16ba:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    16bc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    16be:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    16c0:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    16c4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    16c6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    16ca:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    16ce:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    16d2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    16d6:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    16da:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    16de:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    16e0:	f004 f843 	bl	576a <configure_builtin_stack_guard>
    pop {r2, lr}
    16e4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    16e8:	4770      	bx	lr
    16ea:	0000      	.short	0x0000
    ldr r1, =_kernel
    16ec:	20000944 	.word	0x20000944
    ldr v4, =_SCS_ICSR
    16f0:	e000ed04 	.word	0xe000ed04

000016f4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    16f4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    16f8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    16fa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    16fe:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1702:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1704:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1708:	2902      	cmp	r1, #2
    beq _oops
    170a:	d0ff      	beq.n	170c <_oops>

0000170c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    170c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    170e:	f004 f81a 	bl	5746 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1712:	bd01      	pop	{r0, pc}

00001714 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    1714:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1716:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    171a:	490d      	ldr	r1, [pc, #52]	; (1750 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    171c:	f021 0101 	bic.w	r1, r1, #1
    1720:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    1724:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1728:	9b01      	ldr	r3, [sp, #4]
    172a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    172e:	9b02      	ldr	r3, [sp, #8]
    1730:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1734:	9b03      	ldr	r3, [sp, #12]
    1736:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    173a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    173e:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    1742:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1744:	2300      	movs	r3, #0
    1746:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    174a:	bc10      	pop	{r4}
    174c:	4770      	bx	lr
    174e:	bf00      	nop
    1750:	000055d3 	.word	0x000055d3

00001754 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1754:	4b09      	ldr	r3, [pc, #36]	; (177c <arch_switch_to_main_thread+0x28>)
    1756:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    1758:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    175c:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1760:	4610      	mov	r0, r2
    1762:	f381 8809 	msr	PSP, r1
    1766:	2100      	movs	r1, #0
    1768:	b663      	cpsie	if
    176a:	f381 8811 	msr	BASEPRI, r1
    176e:	f3bf 8f6f 	isb	sy
    1772:	2200      	movs	r2, #0
    1774:	2300      	movs	r3, #0
    1776:	f003 ff2c 	bl	55d2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    177a:	bf00      	nop
    177c:	20000944 	.word	0x20000944

00001780 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1780:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1782:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1784:	4a0b      	ldr	r2, [pc, #44]	; (17b4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1786:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1788:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    178a:	bf1e      	ittt	ne
	movne	r1, #0
    178c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    178e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1790:	f004 fd38 	blne	6204 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1794:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1796:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    179a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    179e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    17a2:	4905      	ldr	r1, [pc, #20]	; (17b8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    17a4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    17a6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    17a8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    17aa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    17ae:	4903      	ldr	r1, [pc, #12]	; (17bc <_isr_wrapper+0x3c>)
	bx r1
    17b0:	4708      	bx	r1
    17b2:	0000      	.short	0x0000
	ldr r2, =_kernel
    17b4:	20000944 	.word	0x20000944
	ldr r1, =_sw_isr_table
    17b8:	00006600 	.word	0x00006600
	ldr r1, =z_arm_int_exit
    17bc:	000017c1 	.word	0x000017c1

000017c0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    17c0:	4b04      	ldr	r3, [pc, #16]	; (17d4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    17c2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    17c4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    17c6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    17c8:	d003      	beq.n	17d2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    17ca:	4903      	ldr	r1, [pc, #12]	; (17d8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    17cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    17d0:	600a      	str	r2, [r1, #0]

000017d2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    17d2:	4770      	bx	lr
	ldr r3, =_kernel
    17d4:	20000944 	.word	0x20000944
	ldr r1, =_SCS_ICSR
    17d8:	e000ed04 	.word	0xe000ed04

000017dc <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    17dc:	b510      	push	{r4, lr}
    17de:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    17e0:	4b13      	ldr	r3, [pc, #76]	; (1830 <mem_manage_fault+0x54>)
    17e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    17e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    17e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17e8:	f013 0f02 	tst.w	r3, #2
    17ec:	d00b      	beq.n	1806 <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    17ee:	4b10      	ldr	r3, [pc, #64]	; (1830 <mem_manage_fault+0x54>)
    17f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    17f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17f4:	f013 0f80 	tst.w	r3, #128	; 0x80
    17f8:	d005      	beq.n	1806 <mem_manage_fault+0x2a>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    17fa:	b121      	cbz	r1, 1806 <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    17fc:	4a0c      	ldr	r2, [pc, #48]	; (1830 <mem_manage_fault+0x54>)
    17fe:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1804:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1806:	4b0a      	ldr	r3, [pc, #40]	; (1830 <mem_manage_fault+0x54>)
    1808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    180a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    180e:	f013 0f10 	tst.w	r3, #16
    1812:	d101      	bne.n	1818 <mem_manage_fault+0x3c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1814:	4b06      	ldr	r3, [pc, #24]	; (1830 <mem_manage_fault+0x54>)
    1816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1818:	4a05      	ldr	r2, [pc, #20]	; (1830 <mem_manage_fault+0x54>)
    181a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    181c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1820:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1822:	2101      	movs	r1, #1
    1824:	f003 ffa6 	bl	5774 <memory_fault_recoverable>
    1828:	7020      	strb	r0, [r4, #0]

	return reason;
}
    182a:	2000      	movs	r0, #0
    182c:	bd10      	pop	{r4, pc}
    182e:	bf00      	nop
    1830:	e000ed00 	.word	0xe000ed00

00001834 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    1834:	b510      	push	{r4, lr}
    1836:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1838:	4b12      	ldr	r3, [pc, #72]	; (1884 <bus_fault+0x50>)
    183a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    183c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1840:	f413 7f00 	tst.w	r3, #512	; 0x200
    1844:	d00b      	beq.n	185e <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1846:	4b0f      	ldr	r3, [pc, #60]	; (1884 <bus_fault+0x50>)
    1848:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    184c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1850:	d005      	beq.n	185e <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1852:	b121      	cbz	r1, 185e <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1854:	4a0b      	ldr	r2, [pc, #44]	; (1884 <bus_fault+0x50>)
    1856:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1858:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    185c:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    185e:	4b09      	ldr	r3, [pc, #36]	; (1884 <bus_fault+0x50>)
    1860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1864:	f413 7f80 	tst.w	r3, #256	; 0x100
    1868:	d101      	bne.n	186e <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    186a:	4b06      	ldr	r3, [pc, #24]	; (1884 <bus_fault+0x50>)
    186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    186e:	4a05      	ldr	r2, [pc, #20]	; (1884 <bus_fault+0x50>)
    1870:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1872:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1876:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1878:	2101      	movs	r1, #1
    187a:	f003 ff7b 	bl	5774 <memory_fault_recoverable>
    187e:	7020      	strb	r0, [r4, #0]

	return reason;
}
    1880:	2000      	movs	r0, #0
    1882:	bd10      	pop	{r4, pc}
    1884:	e000ed00 	.word	0xe000ed00

00001888 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1888:	4b0a      	ldr	r3, [pc, #40]	; (18b4 <usage_fault+0x2c>)
    188a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    188c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    188e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1890:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
    1894:	d10b      	bne.n	18ae <usage_fault+0x26>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1896:	4b07      	ldr	r3, [pc, #28]	; (18b4 <usage_fault+0x2c>)
    1898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    189a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    189c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    189e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    18a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18a2:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    18a6:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    18aa:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    18ac:	4770      	bx	lr
		reason = K_ERR_STACK_CHK_FAIL;
    18ae:	2002      	movs	r0, #2
    18b0:	e7f1      	b.n	1896 <usage_fault+0xe>
    18b2:	bf00      	nop
    18b4:	e000ed00 	.word	0xe000ed00

000018b8 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    18b8:	b510      	push	{r4, lr}
    18ba:	4604      	mov	r4, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    18bc:	2300      	movs	r3, #0
    18be:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    18c0:	4b1b      	ldr	r3, [pc, #108]	; (1930 <hard_fault+0x78>)
    18c2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    18c4:	f010 0002 	ands.w	r0, r0, #2
    18c8:	d12d      	bne.n	1926 <hard_fault+0x6e>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    18ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    18cc:	2b00      	cmp	r3, #0
    18ce:	db2b      	blt.n	1928 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    18d0:	4b17      	ldr	r3, [pc, #92]	; (1930 <hard_fault+0x78>)
    18d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    18d4:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    18d8:	d027      	beq.n	192a <hard_fault+0x72>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    18da:	69a3      	ldr	r3, [r4, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    18dc:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    18e0:	f64d 7302 	movw	r3, #57090	; 0xdf02
    18e4:	429a      	cmp	r2, r3
    18e6:	d010      	beq.n	190a <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    18e8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    18ec:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    18f0:	781b      	ldrb	r3, [r3, #0]
    18f2:	b963      	cbnz	r3, 190e <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    18f4:	4b0f      	ldr	r3, [pc, #60]	; (1934 <hard_fault+0x7c>)
    18f6:	781b      	ldrb	r3, [r3, #0]
    18f8:	b97b      	cbnz	r3, 191a <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    18fa:	4b0f      	ldr	r3, [pc, #60]	; (1938 <hard_fault+0x80>)
    18fc:	881b      	ldrh	r3, [r3, #0]
    18fe:	b29b      	uxth	r3, r3
    1900:	b193      	cbz	r3, 1928 <hard_fault+0x70>
			reason = usage_fault(esf);
    1902:	4620      	mov	r0, r4
    1904:	f7ff ffc0 	bl	1888 <usage_fault>
    1908:	e00e      	b.n	1928 <hard_fault+0x70>
			reason = esf->basic.r0;
    190a:	6820      	ldr	r0, [r4, #0]
    190c:	e00c      	b.n	1928 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    190e:	460a      	mov	r2, r1
    1910:	2101      	movs	r1, #1
    1912:	4620      	mov	r0, r4
    1914:	f7ff ff62 	bl	17dc <mem_manage_fault>
    1918:	e006      	b.n	1928 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    191a:	460a      	mov	r2, r1
    191c:	2101      	movs	r1, #1
    191e:	4620      	mov	r0, r4
    1920:	f7ff ff88 	bl	1834 <bus_fault>
    1924:	e000      	b.n	1928 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1926:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    1928:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    192a:	4618      	mov	r0, r3
	return reason;
    192c:	e7fc      	b.n	1928 <hard_fault+0x70>
    192e:	bf00      	nop
    1930:	e000ed00 	.word	0xe000ed00
    1934:	e000ed29 	.word	0xe000ed29
    1938:	e000ed2a 	.word	0xe000ed2a

0000193c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    193c:	b570      	push	{r4, r5, r6, lr}
    193e:	b08a      	sub	sp, #40	; 0x28
    1940:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1942:	4b22      	ldr	r3, [pc, #136]	; (19cc <z_arm_fault+0x90>)
    1944:	6859      	ldr	r1, [r3, #4]
    1946:	f3c1 0108 	ubfx	r1, r1, #0, #9
    194a:	2300      	movs	r3, #0
    194c:	f383 8811 	msr	BASEPRI, r3
    1950:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1954:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1958:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    195c:	d115      	bne.n	198a <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    195e:	f002 030c 	and.w	r3, r2, #12
    1962:	2b08      	cmp	r3, #8
    1964:	d014      	beq.n	1990 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1966:	f012 0f08 	tst.w	r2, #8
    196a:	d00b      	beq.n	1984 <z_arm_fault+0x48>
	*nested_exc = false;
    196c:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    196e:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    1972:	4620      	mov	r0, r4
    1974:	f003 ff03 	bl	577e <fault_handle>
    1978:	4605      	mov	r5, r0
	if (recoverable) {
    197a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    197e:	b153      	cbz	r3, 1996 <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    1980:	b00a      	add	sp, #40	; 0x28
    1982:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    1984:	4604      	mov	r4, r0
			*nested_exc = true;
    1986:	2601      	movs	r6, #1
    1988:	e7f1      	b.n	196e <z_arm_fault+0x32>
	*nested_exc = false;
    198a:	2600      	movs	r6, #0
		return NULL;
    198c:	4634      	mov	r4, r6
    198e:	e7ee      	b.n	196e <z_arm_fault+0x32>
	*nested_exc = false;
    1990:	2600      	movs	r6, #0
		return NULL;
    1992:	4634      	mov	r4, r6
    1994:	e7eb      	b.n	196e <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1996:	2220      	movs	r2, #32
    1998:	4621      	mov	r1, r4
    199a:	a801      	add	r0, sp, #4
    199c:	f003 ff92 	bl	58c4 <memcpy>
	if (nested_exc) {
    19a0:	b14e      	cbz	r6, 19b6 <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    19a2:	9b08      	ldr	r3, [sp, #32]
    19a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
    19a8:	b95a      	cbnz	r2, 19c2 <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    19aa:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    19ae:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    19b2:	9308      	str	r3, [sp, #32]
    19b4:	e005      	b.n	19c2 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    19b6:	9b08      	ldr	r3, [sp, #32]
    19b8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    19bc:	f023 0301 	bic.w	r3, r3, #1
    19c0:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    19c2:	a901      	add	r1, sp, #4
    19c4:	4628      	mov	r0, r5
    19c6:	f003 feba 	bl	573e <z_arm_fatal_error>
    19ca:	e7d9      	b.n	1980 <z_arm_fault+0x44>
    19cc:	e000ed00 	.word	0xe000ed00

000019d0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    19d0:	4b04      	ldr	r3, [pc, #16]	; (19e4 <z_arm_fault_init+0x14>)
    19d2:	695a      	ldr	r2, [r3, #20]
    19d4:	f042 0210 	orr.w	r2, r2, #16
    19d8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    19da:	695a      	ldr	r2, [r3, #20]
    19dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    19e0:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    19e2:	4770      	bx	lr
    19e4:	e000ed00 	.word	0xe000ed00

000019e8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    19e8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    19ec:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    19f0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    19f2:	4672      	mov	r2, lr
	bl z_arm_fault
    19f4:	f7ff ffa2 	bl	193c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    19f8:	bd01      	pop	{r0, pc}
    19fa:	bf00      	nop

000019fc <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    19fc:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    19fe:	e006      	b.n	1a0e <z_arm_interrupt_init+0x12>
    1a00:	f002 010f 	and.w	r1, r2, #15
    1a04:	4b09      	ldr	r3, [pc, #36]	; (1a2c <z_arm_interrupt_init+0x30>)
    1a06:	440b      	add	r3, r1
    1a08:	2120      	movs	r1, #32
    1a0a:	7619      	strb	r1, [r3, #24]
    1a0c:	3201      	adds	r2, #1
    1a0e:	2a44      	cmp	r2, #68	; 0x44
    1a10:	dc0a      	bgt.n	1a28 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    1a12:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    1a14:	2b00      	cmp	r3, #0
    1a16:	dbf3      	blt.n	1a00 <z_arm_interrupt_init+0x4>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a18:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1a1c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1a20:	2120      	movs	r1, #32
    1a22:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    1a26:	e7f1      	b.n	1a0c <z_arm_interrupt_init+0x10>
	}
}
    1a28:	4770      	bx	lr
    1a2a:	bf00      	nop
    1a2c:	e000ecfc 	.word	0xe000ecfc

00001a30 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1a30:	2000      	movs	r0, #0
    msr CONTROL, r0
    1a32:	f380 8814 	msr	CONTROL, r0
    isb
    1a36:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    1a3a:	2000      	movs	r0, #0
    msr MSPLIM, r0
    1a3c:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    1a40:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1a44:	f004 fd7e 	bl	6544 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1a48:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1a4a:	490e      	ldr	r1, [pc, #56]	; (1a84 <__start+0x54>)
    str r0, [r1]
    1a4c:	6008      	str	r0, [r1, #0]
    dsb
    1a4e:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1a52:	480d      	ldr	r0, [pc, #52]	; (1a88 <__start+0x58>)
    msr msp, r0
    1a54:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1a58:	f000 f83c 	bl	1ad4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1a5c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1a5e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1a62:	480a      	ldr	r0, [pc, #40]	; (1a8c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1a64:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1a68:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1a6a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1a6e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1a72:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1a74:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1a76:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1a7a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1a7e:	f7ff fdd3 	bl	1628 <z_arm_prep_c>
    1a82:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    1a84:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1a88:	20000f58 	.word	0x20000f58
    ldr r0, =z_interrupt_stacks
    1a8c:	20001098 	.word	0x20001098

00001a90 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    1a90:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1a94:	4905      	ldr	r1, [pc, #20]	; (1aac <sys_arch_reboot+0x1c>)
    1a96:	68ca      	ldr	r2, [r1, #12]
    1a98:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1a9c:	4b04      	ldr	r3, [pc, #16]	; (1ab0 <sys_arch_reboot+0x20>)
    1a9e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1aa0:	60cb      	str	r3, [r1, #12]
    1aa2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1aa6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1aa8:	e7fd      	b.n	1aa6 <sys_arch_reboot+0x16>
    1aaa:	bf00      	nop
    1aac:	e000ed00 	.word	0xe000ed00
    1ab0:	05fa0004 	.word	0x05fa0004

00001ab4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1ab4:	4b06      	ldr	r3, [pc, #24]	; (1ad0 <z_arm_clear_arm_mpu_config+0x1c>)
    1ab6:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    1ab8:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    1abc:	2300      	movs	r3, #0
    1abe:	4283      	cmp	r3, r0
    1ac0:	da05      	bge.n	1ace <z_arm_clear_arm_mpu_config+0x1a>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
    1ac2:	4a03      	ldr	r2, [pc, #12]	; (1ad0 <z_arm_clear_arm_mpu_config+0x1c>)
    1ac4:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    1ac6:	2100      	movs	r1, #0
    1ac8:	6111      	str	r1, [r2, #16]
    1aca:	3301      	adds	r3, #1
    1acc:	e7f7      	b.n	1abe <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    1ace:	4770      	bx	lr
    1ad0:	e000ed90 	.word	0xe000ed90

00001ad4 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1ad4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1ad6:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1ad8:	2400      	movs	r4, #0
    1ada:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1ade:	f7ff ffe9 	bl	1ab4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1ae2:	4623      	mov	r3, r4
    1ae4:	2b0f      	cmp	r3, #15
    1ae6:	d809      	bhi.n	1afc <z_arm_init_arch_hw_at_boot+0x28>
		NVIC->ICER[i] = 0xFFFFFFFF;
    1ae8:	f103 0120 	add.w	r1, r3, #32
    1aec:	4a0d      	ldr	r2, [pc, #52]	; (1b24 <z_arm_init_arch_hw_at_boot+0x50>)
    1aee:	f04f 30ff 	mov.w	r0, #4294967295
    1af2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1af6:	3301      	adds	r3, #1
    1af8:	b2db      	uxtb	r3, r3
    1afa:	e7f3      	b.n	1ae4 <z_arm_init_arch_hw_at_boot+0x10>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1afc:	2300      	movs	r3, #0
    1afe:	2b0f      	cmp	r3, #15
    1b00:	d809      	bhi.n	1b16 <z_arm_init_arch_hw_at_boot+0x42>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1b02:	f103 0160 	add.w	r1, r3, #96	; 0x60
    1b06:	4a07      	ldr	r2, [pc, #28]	; (1b24 <z_arm_init_arch_hw_at_boot+0x50>)
    1b08:	f04f 30ff 	mov.w	r0, #4294967295
    1b0c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1b10:	3301      	adds	r3, #1
    1b12:	b2db      	uxtb	r3, r3
    1b14:	e7f3      	b.n	1afe <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
    1b16:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1b18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b1c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1b20:	bd10      	pop	{r4, pc}
    1b22:	bf00      	nop
    1b24:	e000e100 	.word	0xe000e100

00001b28 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    1b28:	b508      	push	{r3, lr}
	if (_current == thread) {
    1b2a:	4b08      	ldr	r3, [pc, #32]	; (1b4c <z_impl_k_thread_abort+0x24>)
    1b2c:	689b      	ldr	r3, [r3, #8]
    1b2e:	4283      	cmp	r3, r0
    1b30:	d002      	beq.n	1b38 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    1b32:	f003 f86d 	bl	4c10 <z_thread_abort>
}
    1b36:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1b38:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1b3c:	2b00      	cmp	r3, #0
    1b3e:	d0f8      	beq.n	1b32 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1b40:	4a03      	ldr	r2, [pc, #12]	; (1b50 <z_impl_k_thread_abort+0x28>)
    1b42:	6853      	ldr	r3, [r2, #4]
    1b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1b48:	6053      	str	r3, [r2, #4]
    1b4a:	e7f2      	b.n	1b32 <z_impl_k_thread_abort+0xa>
    1b4c:	20000944 	.word	0x20000944
    1b50:	e000ed00 	.word	0xe000ed00

00001b54 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1b54:	b510      	push	{r4, lr}
    1b56:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1b58:	4c09      	ldr	r4, [pc, #36]	; (1b80 <z_arm_configure_static_mpu_regions+0x2c>)
    1b5a:	4623      	mov	r3, r4
    1b5c:	4a09      	ldr	r2, [pc, #36]	; (1b84 <z_arm_configure_static_mpu_regions+0x30>)
    1b5e:	2101      	movs	r1, #1
    1b60:	4809      	ldr	r0, [pc, #36]	; (1b88 <z_arm_configure_static_mpu_regions+0x34>)
    1b62:	f003 fe71 	bl	5848 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1b66:	2300      	movs	r3, #0
    1b68:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    1b6a:	4b08      	ldr	r3, [pc, #32]	; (1b8c <z_arm_configure_static_mpu_regions+0x38>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1b6c:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    1b6e:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1b70:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1b72:	2101      	movs	r1, #1
    1b74:	a801      	add	r0, sp, #4
    1b76:	f003 fe6b 	bl	5850 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1b7a:	b004      	add	sp, #16
    1b7c:	bd10      	pop	{r4, pc}
    1b7e:	bf00      	nop
    1b80:	20070000 	.word	0x20070000
    1b84:	20000000 	.word	0x20000000
    1b88:	00006958 	.word	0x00006958
    1b8c:	20000188 	.word	0x20000188

00001b90 <mpu_init>:

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
    1b90:	4b01      	ldr	r3, [pc, #4]	; (1b98 <mpu_init+0x8>)
    1b92:	4a02      	ldr	r2, [pc, #8]	; (1b9c <mpu_init+0xc>)
    1b94:	631a      	str	r2, [r3, #48]	; 0x30
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
    1b96:	4770      	bx	lr
    1b98:	e000ed90 	.word	0xe000ed90
    1b9c:	0044ffaa 	.word	0x0044ffaa

00001ba0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    1ba0:	b410      	push	{r4}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1ba2:	680b      	ldr	r3, [r1, #0]
    1ba4:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    1ba8:	7a0c      	ldrb	r4, [r1, #8]
    1baa:	f004 031f 	and.w	r3, r4, #31
    1bae:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1bb0:	68cb      	ldr	r3, [r1, #12]
    1bb2:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1bb6:	0964      	lsrs	r4, r4, #5
    1bb8:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    1bbc:	f043 0301 	orr.w	r3, r3, #1
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    1bc0:	4902      	ldr	r1, [pc, #8]	; (1bcc <region_init+0x2c>)
    1bc2:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    1bc4:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    1bc6:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    1bc8:	bc10      	pop	{r4}
    1bca:	4770      	bx	lr
    1bcc:	e000ed90 	.word	0xe000ed90

00001bd0 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1bd4:	b087      	sub	sp, #28
    1bd6:	4681      	mov	r9, r0
    1bd8:	9100      	str	r1, [sp, #0]
    1bda:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    1bdc:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    1bde:	2700      	movs	r7, #0
    1be0:	e034      	b.n	1c4c <mpu_configure_regions_and_partition+0x7c>
	return -EINVAL;
    1be2:	f06f 0615 	mvn.w	r6, #21
    1be6:	e053      	b.n	1c90 <mpu_configure_regions_and_partition+0xc0>
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;

		if ((regions[i].start == u_reg_base) &&
    1be8:	45d8      	cmp	r8, fp
    1bea:	d169      	bne.n	1cc0 <mpu_configure_regions_and_partition+0xf0>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    1bec:	4629      	mov	r1, r5
    1bee:	b2f0      	uxtb	r0, r6
    1bf0:	f003 fe0f 	bl	5812 <mpu_configure_region>
    1bf4:	e029      	b.n	1c4a <mpu_configure_regions_and_partition+0x7a>
	MPU->RNR = index;
    1bf6:	4b58      	ldr	r3, [pc, #352]	; (1d58 <mpu_configure_regions_and_partition+0x188>)
    1bf8:	6098      	str	r0, [r3, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1bfa:	68d9      	ldr	r1, [r3, #12]
    1bfc:	f001 011f 	and.w	r1, r1, #31
		| (base & MPU_RBAR_BASE_Msk);
    1c00:	f022 021f 	bic.w	r2, r2, #31
    1c04:	430a      	orrs	r2, r1
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1c06:	60da      	str	r2, [r3, #12]
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1c08:	4629      	mov	r1, r5
    1c0a:	b2e0      	uxtb	r0, r4
    1c0c:	f003 fe01 	bl	5812 <mpu_configure_region>
    1c10:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    1c12:	f110 0f16 	cmn.w	r0, #22
    1c16:	f000 8097 	beq.w	1d48 <mpu_configure_regions_and_partition+0x178>
				return reg_index;
			}

			reg_index++;
    1c1a:	3401      	adds	r4, #1
    1c1c:	e015      	b.n	1c4a <mpu_configure_regions_and_partition+0x7a>
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    1c1e:	3b01      	subs	r3, #1
	MPU->RNR = index;
    1c20:	494d      	ldr	r1, [pc, #308]	; (1d58 <mpu_configure_regions_and_partition+0x188>)
    1c22:	6088      	str	r0, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1c24:	690a      	ldr	r2, [r1, #16]
    1c26:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    1c2a:	f023 031f 	bic.w	r3, r3, #31
    1c2e:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1c30:	610b      	str	r3, [r1, #16]

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1c32:	4629      	mov	r1, r5
    1c34:	b2e0      	uxtb	r0, r4
    1c36:	f003 fdec 	bl	5812 <mpu_configure_region>
    1c3a:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    1c3c:	f110 0f16 	cmn.w	r0, #22
    1c40:	f000 8082 	beq.w	1d48 <mpu_configure_regions_and_partition+0x178>
				return reg_index;
			}

			reg_index++;
    1c44:	3401      	adds	r4, #1
    1c46:	e000      	b.n	1c4a <mpu_configure_regions_and_partition+0x7a>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    1c48:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    1c4a:	3701      	adds	r7, #1
    1c4c:	9b00      	ldr	r3, [sp, #0]
    1c4e:	429f      	cmp	r7, r3
    1c50:	da7a      	bge.n	1d48 <mpu_configure_regions_and_partition+0x178>
		if (regions[i].size == 0U) {
    1c52:	eb07 0547 	add.w	r5, r7, r7, lsl #1
    1c56:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    1c5a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    1c5e:	f8d5 8004 	ldr.w	r8, [r5, #4]
    1c62:	f1b8 0f00 	cmp.w	r8, #0
    1c66:	d0f0      	beq.n	1c4a <mpu_configure_regions_and_partition+0x7a>
		if (do_sanity_check &&
    1c68:	9b01      	ldr	r3, [sp, #4]
    1c6a:	b123      	cbz	r3, 1c76 <mpu_configure_regions_and_partition+0xa6>
			(!mpu_partition_is_valid(&regions[i]))) {
    1c6c:	4628      	mov	r0, r5
    1c6e:	f003 fdb3 	bl	57d8 <mpu_partition_is_valid>
		if (do_sanity_check &&
    1c72:	2800      	cmp	r0, #0
    1c74:	d064      	beq.n	1d40 <mpu_configure_regions_and_partition+0x170>
			get_region_index(regions[i].start, regions[i].size);
    1c76:	f859 b00a 	ldr.w	fp, [r9, sl]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1c7a:	4658      	mov	r0, fp
    1c7c:	f003 fda2 	bl	57c4 <arm_cmse_mpu_region_get>
    1c80:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1c82:	eb08 000b 	add.w	r0, r8, fp
    1c86:	3801      	subs	r0, #1
    1c88:	f003 fd9c 	bl	57c4 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1c8c:	4286      	cmp	r6, r0
    1c8e:	d1a8      	bne.n	1be2 <mpu_configure_regions_and_partition+0x12>
		if ((u_reg_index == -EINVAL) ||
    1c90:	f116 0f16 	cmn.w	r6, #22
    1c94:	d057      	beq.n	1d46 <mpu_configure_regions_and_partition+0x176>
			(u_reg_index > (reg_index - 1))) {
    1c96:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    1c98:	42b3      	cmp	r3, r6
    1c9a:	db59      	blt.n	1d50 <mpu_configure_regions_and_partition+0x180>
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
    1c9c:	4630      	mov	r0, r6
	MPU->RNR = index;
    1c9e:	4b2e      	ldr	r3, [pc, #184]	; (1d58 <mpu_configure_regions_and_partition+0x188>)
    1ca0:	609e      	str	r6, [r3, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    1ca2:	68d9      	ldr	r1, [r3, #12]
    1ca4:	f021 011f 	bic.w	r1, r1, #31
	MPU->RNR = index;
    1ca8:	609e      	str	r6, [r3, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1caa:	691b      	ldr	r3, [r3, #16]
    1cac:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1cb0:	f859 300a 	ldr.w	r3, [r9, sl]
    1cb4:	686a      	ldr	r2, [r5, #4]
    1cb6:	441a      	add	r2, r3
    1cb8:	f102 3bff 	add.w	fp, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    1cbc:	4299      	cmp	r1, r3
    1cbe:	d093      	beq.n	1be8 <mpu_configure_regions_and_partition+0x18>
		} else if (regions[i].start == u_reg_base) {
    1cc0:	4299      	cmp	r1, r3
    1cc2:	d098      	beq.n	1bf6 <mpu_configure_regions_and_partition+0x26>
		} else if (reg_last == u_reg_last) {
    1cc4:	45d8      	cmp	r8, fp
    1cc6:	d0aa      	beq.n	1c1e <mpu_configure_regions_and_partition+0x4e>
				regions[i].start - 1);
    1cc8:	3b01      	subs	r3, #1
	MPU->RNR = index;
    1cca:	4923      	ldr	r1, [pc, #140]	; (1d58 <mpu_configure_regions_and_partition+0x188>)
    1ccc:	4606      	mov	r6, r0
    1cce:	6088      	str	r0, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1cd0:	690a      	ldr	r2, [r1, #16]
    1cd2:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    1cd6:	f023 031f 	bic.w	r3, r3, #31
    1cda:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1cdc:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, &regions[i]);
    1cde:	4629      	mov	r1, r5
    1ce0:	b2e0      	uxtb	r0, r4
    1ce2:	f003 fd96 	bl	5812 <mpu_configure_region>
    1ce6:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    1ce8:	f110 0f16 	cmn.w	r0, #22
    1cec:	d02c      	beq.n	1d48 <mpu_configure_regions_and_partition+0x178>
			reg_index++;
    1cee:	3001      	adds	r0, #1
	MPU->RNR = index;
    1cf0:	4b19      	ldr	r3, [pc, #100]	; (1d58 <mpu_configure_regions_and_partition+0x188>)
    1cf2:	609e      	str	r6, [r3, #8]
	attr->rbar = MPU->RBAR &
    1cf4:	68d9      	ldr	r1, [r3, #12]
    1cf6:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1cfa:	f361 0204 	bfi	r2, r1, #0, #5
    1cfe:	f88d 2010 	strb.w	r2, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1d02:	691b      	ldr	r3, [r3, #16]
    1d04:	f3c3 0342 	ubfx	r3, r3, #1, #3
    1d08:	b2d2      	uxtb	r2, r2
    1d0a:	f363 1247 	bfi	r2, r3, #5, #3
    1d0e:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i].start +
    1d12:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
    1d16:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
    1d18:	4413      	add	r3, r2
    1d1a:	9302      	str	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    1d1c:	f023 031f 	bic.w	r3, r3, #31
    1d20:	eba8 080b 	sub.w	r8, r8, fp
    1d24:	4443      	add	r3, r8
    1d26:	3b01      	subs	r3, #1
    1d28:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    1d2c:	9305      	str	r3, [sp, #20]
				region_allocate_and_init(reg_index,
    1d2e:	a902      	add	r1, sp, #8
    1d30:	b2c0      	uxtb	r0, r0
    1d32:	f003 fd63 	bl	57fc <region_allocate_and_init>
    1d36:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    1d38:	f110 0f16 	cmn.w	r0, #22
    1d3c:	d184      	bne.n	1c48 <mpu_configure_regions_and_partition+0x78>
    1d3e:	e003      	b.n	1d48 <mpu_configure_regions_and_partition+0x178>
			return -EINVAL;
    1d40:	f06f 0415 	mvn.w	r4, #21
    1d44:	e000      	b.n	1d48 <mpu_configure_regions_and_partition+0x178>
			return -EINVAL;
    1d46:	4634      	mov	r4, r6
		}
	}

	return reg_index;
}
    1d48:	4620      	mov	r0, r4
    1d4a:	b007      	add	sp, #28
    1d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    1d50:	f06f 0415 	mvn.w	r4, #21
    1d54:	e7f8      	b.n	1d48 <mpu_configure_regions_and_partition+0x178>
    1d56:	bf00      	nop
    1d58:	e000ed90 	.word	0xe000ed90

00001d5c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    1d5c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    1d5e:	4c03      	ldr	r4, [pc, #12]	; (1d6c <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1d60:	2301      	movs	r3, #1
    1d62:	7822      	ldrb	r2, [r4, #0]
    1d64:	f7ff ff34 	bl	1bd0 <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1d68:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    1d6a:	bd10      	pop	{r4, pc}
    1d6c:	20000998 	.word	0x20000998

00001d70 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    1d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1d74:	4607      	mov	r7, r0
    1d76:	4688      	mov	r8, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1d78:	2400      	movs	r4, #0
    1d7a:	e003      	b.n	1d84 <mpu_mark_areas_for_dynamic_regions+0x14>
	return -EINVAL;
    1d7c:	f06f 0515 	mvn.w	r5, #21
    1d80:	e017      	b.n	1db2 <mpu_mark_areas_for_dynamic_regions+0x42>
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1d82:	3401      	adds	r4, #1
    1d84:	45a0      	cmp	r8, r4
    1d86:	dd3c      	ble.n	1e02 <mpu_mark_areas_for_dynamic_regions+0x92>
		if (dyn_region_areas[i].size == 0U) {
    1d88:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1d8c:	009a      	lsls	r2, r3, #2
    1d8e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    1d92:	685e      	ldr	r6, [r3, #4]
    1d94:	2e00      	cmp	r6, #0
    1d96:	d0f4      	beq.n	1d82 <mpu_mark_areas_for_dynamic_regions+0x12>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1d98:	f857 9002 	ldr.w	r9, [r7, r2]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1d9c:	4648      	mov	r0, r9
    1d9e:	f003 fd11 	bl	57c4 <arm_cmse_mpu_region_get>
    1da2:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1da4:	eb06 0009 	add.w	r0, r6, r9
    1da8:	3801      	subs	r0, #1
    1daa:	f003 fd0b 	bl	57c4 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1dae:	4285      	cmp	r5, r0
    1db0:	d1e4      	bne.n	1d7c <mpu_mark_areas_for_dynamic_regions+0xc>
		dyn_reg_info[i].index =
    1db2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1db6:	4a16      	ldr	r2, [pc, #88]	; (1e10 <mpu_mark_areas_for_dynamic_regions+0xa0>)
    1db8:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1dbc:	f115 0f16 	cmn.w	r5, #22
    1dc0:	d020      	beq.n	1e04 <mpu_mark_areas_for_dynamic_regions+0x94>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1dc2:	4b14      	ldr	r3, [pc, #80]	; (1e14 <mpu_mark_areas_for_dynamic_regions+0xa4>)
    1dc4:	781b      	ldrb	r3, [r3, #0]
    1dc6:	42ab      	cmp	r3, r5
    1dc8:	dd1f      	ble.n	1e0a <mpu_mark_areas_for_dynamic_regions+0x9a>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    1dca:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1dce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	MPU->RNR = index;
    1dd2:	4a11      	ldr	r2, [pc, #68]	; (1e18 <mpu_mark_areas_for_dynamic_regions+0xa8>)
    1dd4:	6095      	str	r5, [r2, #8]
	MPU->RNR = index;
    1dd6:	6095      	str	r5, [r2, #8]
	attr->rbar = MPU->RBAR &
    1dd8:	68d5      	ldr	r5, [r2, #12]
    1dda:	7b18      	ldrb	r0, [r3, #12]
    1ddc:	f365 0004 	bfi	r0, r5, #0, #5
    1de0:	7318      	strb	r0, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1de2:	6910      	ldr	r0, [r2, #16]
    1de4:	f3c0 0042 	ubfx	r0, r0, #1, #3
    1de8:	7b1d      	ldrb	r5, [r3, #12]
    1dea:	f360 1547 	bfi	r5, r0, #5, #3
    1dee:	731d      	strb	r5, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    1df0:	68d1      	ldr	r1, [r2, #12]
    1df2:	f021 011f 	bic.w	r1, r1, #31
    1df6:	6059      	str	r1, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    1df8:	6912      	ldr	r2, [r2, #16]
    1dfa:	f022 021f 	bic.w	r2, r2, #31
    1dfe:	611a      	str	r2, [r3, #16]
}
    1e00:	e7bf      	b.n	1d82 <mpu_mark_areas_for_dynamic_regions+0x12>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    1e02:	2500      	movs	r5, #0
}
    1e04:	4628      	mov	r0, r5
    1e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    1e0a:	f06f 0515 	mvn.w	r5, #21
    1e0e:	e7f9      	b.n	1e04 <mpu_mark_areas_for_dynamic_regions+0x94>
    1e10:	20000848 	.word	0x20000848
    1e14:	20000998 	.word	0x20000998
    1e18:	e000ed90 	.word	0xe000ed90

00001e1c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1e1c:	4b03      	ldr	r3, [pc, #12]	; (1e2c <arm_core_mpu_enable+0x10>)
    1e1e:	2205      	movs	r2, #5
    1e20:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1e22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e26:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1e2a:	4770      	bx	lr
    1e2c:	e000ed90 	.word	0xe000ed90

00001e30 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1e30:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1e34:	4b01      	ldr	r3, [pc, #4]	; (1e3c <arm_core_mpu_disable+0xc>)
    1e36:	2200      	movs	r2, #0
    1e38:	605a      	str	r2, [r3, #4]
}
    1e3a:	4770      	bx	lr
    1e3c:	e000ed90 	.word	0xe000ed90

00001e40 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1e40:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1e42:	4b0e      	ldr	r3, [pc, #56]	; (1e7c <z_arm_mpu_init+0x3c>)
    1e44:	681d      	ldr	r5, [r3, #0]
    1e46:	2d08      	cmp	r5, #8
    1e48:	d815      	bhi.n	1e76 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1e4a:	f7ff fff1 	bl	1e30 <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    1e4e:	f7ff fe9f 	bl	1b90 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1e52:	2400      	movs	r4, #0
    1e54:	42a5      	cmp	r5, r4
    1e56:	d908      	bls.n	1e6a <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1e58:	4b08      	ldr	r3, [pc, #32]	; (1e7c <z_arm_mpu_init+0x3c>)
    1e5a:	6859      	ldr	r1, [r3, #4]
    1e5c:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    1e60:	4620      	mov	r0, r4
    1e62:	f7ff fe9d 	bl	1ba0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1e66:	3401      	adds	r4, #1
    1e68:	e7f4      	b.n	1e54 <z_arm_mpu_init+0x14>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1e6a:	4b05      	ldr	r3, [pc, #20]	; (1e80 <z_arm_mpu_init+0x40>)
    1e6c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    1e6e:	f7ff ffd5 	bl	1e1c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1e72:	2000      	movs	r0, #0
}
    1e74:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    1e76:	f04f 30ff 	mov.w	r0, #4294967295
    1e7a:	e7fb      	b.n	1e74 <z_arm_mpu_init+0x34>
    1e7c:	00006974 	.word	0x00006974
    1e80:	20000998 	.word	0x20000998

00001e84 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1e84:	4b01      	ldr	r3, [pc, #4]	; (1e8c <__stdout_hook_install+0x8>)
    1e86:	6018      	str	r0, [r3, #0]
}
    1e88:	4770      	bx	lr
    1e8a:	bf00      	nop
    1e8c:	20000024 	.word	0x20000024

00001e90 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    1e90:	4800      	ldr	r0, [pc, #0]	; (1e94 <get_hf_flags+0x4>)
    1e92:	4770      	bx	lr
    1e94:	200008e4 	.word	0x200008e4

00001e98 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1e98:	4b03      	ldr	r3, [pc, #12]	; (1ea8 <get_subsys+0x10>)
    1e9a:	1ac0      	subs	r0, r0, r3
    1e9c:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    1e9e:	4b03      	ldr	r3, [pc, #12]	; (1eac <get_subsys+0x14>)
    1ea0:	fb03 f000 	mul.w	r0, r3, r0
    1ea4:	4770      	bx	lr
    1ea6:	bf00      	nop
    1ea8:	2000086c 	.word	0x2000086c
    1eac:	b6db6db7 	.word	0xb6db6db7

00001eb0 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1eb0:	b538      	push	{r3, r4, r5, lr}
    1eb2:	4605      	mov	r5, r0
    1eb4:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1eb6:	f7ff ffef 	bl	1e98 <get_subsys>
    1eba:	4601      	mov	r1, r0
    1ebc:	2240      	movs	r2, #64	; 0x40
    1ebe:	4803      	ldr	r0, [pc, #12]	; (1ecc <onoff_stop+0x1c>)
    1ec0:	f003 fdbb 	bl	5a3a <stop>
    1ec4:	4601      	mov	r1, r0
	notify(mgr, res);
    1ec6:	4628      	mov	r0, r5
    1ec8:	47a0      	blx	r4
}
    1eca:	bd38      	pop	{r3, r4, r5, pc}
    1ecc:	000065a0 	.word	0x000065a0

00001ed0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1ed0:	b530      	push	{r4, r5, lr}
    1ed2:	b083      	sub	sp, #12
    1ed4:	4605      	mov	r5, r0
    1ed6:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1ed8:	f7ff ffde 	bl	1e98 <get_subsys>
    1edc:	4601      	mov	r1, r0
    1ede:	2340      	movs	r3, #64	; 0x40
    1ee0:	9300      	str	r3, [sp, #0]
    1ee2:	4623      	mov	r3, r4
    1ee4:	4a05      	ldr	r2, [pc, #20]	; (1efc <onoff_start+0x2c>)
    1ee6:	4806      	ldr	r0, [pc, #24]	; (1f00 <onoff_start+0x30>)
    1ee8:	f003 fdc1 	bl	5a6e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1eec:	1e01      	subs	r1, r0, #0
    1eee:	db01      	blt.n	1ef4 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    1ef0:	b003      	add	sp, #12
    1ef2:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    1ef4:	4628      	mov	r0, r5
    1ef6:	47a0      	blx	r4
}
    1ef8:	e7fa      	b.n	1ef0 <onoff_start+0x20>
    1efa:	bf00      	nop
    1efc:	00005ab7 	.word	0x00005ab7
    1f00:	000065a0 	.word	0x000065a0

00001f04 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    1f04:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    1f06:	2805      	cmp	r0, #5
    1f08:	d815      	bhi.n	1f36 <clock_event_handler+0x32>
    1f0a:	e8df f000 	tbb	[pc, r0]
    1f0e:	1a03      	.short	0x1a03
    1f10:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1f14:	2100      	movs	r1, #0
    1f16:	480d      	ldr	r0, [pc, #52]	; (1f4c <clock_event_handler+0x48>)
    1f18:	f003 fd18 	bl	594c <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1f1c:	6883      	ldr	r3, [r0, #8]
    1f1e:	f013 0f07 	tst.w	r3, #7
    1f22:	d108      	bne.n	1f36 <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1f24:	2100      	movs	r1, #0
    1f26:	4809      	ldr	r0, [pc, #36]	; (1f4c <clock_event_handler+0x48>)
    1f28:	f003 fd75 	bl	5a16 <clkstarted_handle>
    1f2c:	e003      	b.n	1f36 <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    1f2e:	2102      	movs	r1, #2
    1f30:	4806      	ldr	r0, [pc, #24]	; (1f4c <clock_event_handler+0x48>)
    1f32:	f003 fd70 	bl	5a16 <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    1f36:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    1f38:	2103      	movs	r1, #3
    1f3a:	4804      	ldr	r0, [pc, #16]	; (1f4c <clock_event_handler+0x48>)
    1f3c:	f003 fd6b 	bl	5a16 <clkstarted_handle>
		break;
    1f40:	e7f9      	b.n	1f36 <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1f42:	2101      	movs	r1, #1
    1f44:	4801      	ldr	r0, [pc, #4]	; (1f4c <clock_event_handler+0x48>)
    1f46:	f003 fd66 	bl	5a16 <clkstarted_handle>
}
    1f4a:	e7f4      	b.n	1f36 <clock_event_handler+0x32>
    1f4c:	000065a0 	.word	0x000065a0

00001f50 <generic_hfclk_start>:
{
    1f50:	b510      	push	{r4, lr}
	__asm__ volatile(
    1f52:	f04f 0320 	mov.w	r3, #32
    1f56:	f3ef 8411 	mrs	r4, BASEPRI
    1f5a:	f383 8812 	msr	BASEPRI_MAX, r3
    1f5e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1f62:	4a13      	ldr	r2, [pc, #76]	; (1fb0 <generic_hfclk_start+0x60>)
    1f64:	6813      	ldr	r3, [r2, #0]
    1f66:	f043 0302 	orr.w	r3, r3, #2
    1f6a:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1f6c:	f013 0f01 	tst.w	r3, #1
    1f70:	d108      	bne.n	1f84 <generic_hfclk_start+0x34>
	bool already_started = false;
    1f72:	2300      	movs	r3, #0
	__asm__ volatile(
    1f74:	f384 8811 	msr	BASEPRI, r4
    1f78:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1f7c:	b99b      	cbnz	r3, 1fa6 <generic_hfclk_start+0x56>
	hfclk_start();
    1f7e:	f003 fda2 	bl	5ac6 <hfclk_start>
}
    1f82:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1f84:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1f88:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1f8c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1f90:	f012 0f01 	tst.w	r2, #1
    1f94:	d101      	bne.n	1f9a <generic_hfclk_start+0x4a>
	bool already_started = false;
    1f96:	2300      	movs	r3, #0
    1f98:	e7ec      	b.n	1f74 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    1f9a:	f7ff ff79 	bl	1e90 <get_hf_flags>
    1f9e:	f003 fd27 	bl	59f0 <set_on_state>
			already_started = true;
    1fa2:	2301      	movs	r3, #1
    1fa4:	e7e6      	b.n	1f74 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    1fa6:	2100      	movs	r1, #0
    1fa8:	4802      	ldr	r0, [pc, #8]	; (1fb4 <generic_hfclk_start+0x64>)
    1faa:	f003 fd34 	bl	5a16 <clkstarted_handle>
		return;
    1fae:	e7e8      	b.n	1f82 <generic_hfclk_start+0x32>
    1fb0:	2000090c 	.word	0x2000090c
    1fb4:	000065a0 	.word	0x000065a0

00001fb8 <generic_hfclk_stop>:
{
    1fb8:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1fba:	4b08      	ldr	r3, [pc, #32]	; (1fdc <generic_hfclk_stop+0x24>)
    1fbc:	e8d3 2fef 	ldaex	r2, [r3]
    1fc0:	f022 0102 	bic.w	r1, r2, #2
    1fc4:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1fc8:	2800      	cmp	r0, #0
    1fca:	d1f7      	bne.n	1fbc <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1fcc:	f012 0f01 	tst.w	r2, #1
    1fd0:	d000      	beq.n	1fd4 <generic_hfclk_stop+0x1c>
}
    1fd2:	bd08      	pop	{r3, pc}
	hfclk_stop();
    1fd4:	f003 fd8b 	bl	5aee <hfclk_stop>
    1fd8:	e7fb      	b.n	1fd2 <generic_hfclk_stop+0x1a>
    1fda:	bf00      	nop
    1fdc:	2000090c 	.word	0x2000090c

00001fe0 <api_blocking_start>:
{
    1fe0:	b500      	push	{lr}
    1fe2:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1fe4:	f8cd d000 	str.w	sp, [sp]
    1fe8:	f8cd d004 	str.w	sp, [sp, #4]
    1fec:	2300      	movs	r3, #0
    1fee:	9302      	str	r3, [sp, #8]
    1ff0:	2301      	movs	r3, #1
    1ff2:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1ff4:	466b      	mov	r3, sp
    1ff6:	4a07      	ldr	r2, [pc, #28]	; (2014 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x14>)
    1ff8:	f003 fd55 	bl	5aa6 <api_start>
	if (err < 0) {
    1ffc:	2800      	cmp	r0, #0
    1ffe:	db05      	blt.n	200c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2000:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2004:	2300      	movs	r3, #0
    2006:	4668      	mov	r0, sp
    2008:	f002 fa16 	bl	4438 <z_impl_k_sem_take>
}
    200c:	b005      	add	sp, #20
    200e:	f85d fb04 	ldr.w	pc, [sp], #4
    2012:	bf00      	nop
    2014:	00005b17 	.word	0x00005b17

00002018 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    2018:	b570      	push	{r4, r5, r6, lr}
    201a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    201c:	2200      	movs	r2, #0
    201e:	2101      	movs	r1, #1
    2020:	2005      	movs	r0, #5
    2022:	f7ff fae7 	bl	15f4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2026:	2005      	movs	r0, #5
    2028:	f7ff fac6 	bl	15b8 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    202c:	4811      	ldr	r0, [pc, #68]	; (2074 <clk_init+0x5c>)
    202e:	f000 ffff 	bl	3030 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2032:	4b11      	ldr	r3, [pc, #68]	; (2078 <clk_init+0x60>)
    2034:	4298      	cmp	r0, r3
    2036:	d119      	bne.n	206c <clk_init+0x54>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2038:	f004 f81d 	bl	6076 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    203c:	2400      	movs	r4, #0
    203e:	2c03      	cmp	r4, #3
    2040:	d812      	bhi.n	2068 <clk_init+0x50>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2042:	4621      	mov	r1, r4
    2044:	4630      	mov	r0, r6
    2046:	f003 fc81 	bl	594c <get_sub_data>
    204a:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    204c:	4621      	mov	r1, r4
    204e:	4630      	mov	r0, r6
    2050:	f003 fc87 	bl	5962 <get_onoff_manager>
    2054:	4909      	ldr	r1, [pc, #36]	; (207c <clk_init+0x64>)
    2056:	f003 fa44 	bl	54e2 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    205a:	2800      	cmp	r0, #0
    205c:	db05      	blt.n	206a <clk_init+0x52>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    205e:	2301      	movs	r3, #1
    2060:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    2062:	441c      	add	r4, r3
    2064:	b2e4      	uxtb	r4, r4
    2066:	e7ea      	b.n	203e <clk_init+0x26>
	}

	return 0;
    2068:	2000      	movs	r0, #0
}
    206a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    206c:	f06f 0004 	mvn.w	r0, #4
    2070:	e7fb      	b.n	206a <clk_init+0x52>
    2072:	bf00      	nop
    2074:	00001f05 	.word	0x00001f05
    2078:	0bad0000 	.word	0x0bad0000
    207c:	000069dc 	.word	0x000069dc

00002080 <lfclk_spinwait>:
{
    2080:	b570      	push	{r4, r5, r6, lr}
    2082:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2084:	2801      	cmp	r0, #1
    2086:	d107      	bne.n	2098 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2088:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    208c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2090:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2094:	2b02      	cmp	r3, #2
    2096:	d03f      	beq.n	2118 <lfclk_spinwait+0x98>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2098:	f004 f89f 	bl	61da <k_is_in_isr>
    209c:	b920      	cbnz	r0, 20a8 <lfclk_spinwait+0x28>
	return !z_sys_post_kernel;
    209e:	4b30      	ldr	r3, [pc, #192]	; (2160 <lfclk_spinwait+0xe0>)
    20a0:	781b      	ldrb	r3, [r3, #0]
    20a2:	b19b      	cbz	r3, 20cc <lfclk_spinwait+0x4c>
    20a4:	2300      	movs	r3, #0
    20a6:	e000      	b.n	20aa <lfclk_spinwait+0x2a>
    20a8:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    20aa:	461c      	mov	r4, r3
    20ac:	b183      	cbz	r3, 20d0 <lfclk_spinwait+0x50>
	__asm__ volatile(
    20ae:	f04f 0320 	mov.w	r3, #32
    20b2:	f3ef 8611 	mrs	r6, BASEPRI
    20b6:	f383 8812 	msr	BASEPRI_MAX, r3
    20ba:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    20be:	b9a4      	cbnz	r4, 20ea <lfclk_spinwait+0x6a>
    p_reg->INTENCLR = mask;
    20c0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    20c4:	2202      	movs	r2, #2
    20c6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    20ca:	e00e      	b.n	20ea <lfclk_spinwait+0x6a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    20cc:	2301      	movs	r3, #1
    20ce:	e7ec      	b.n	20aa <lfclk_spinwait+0x2a>
	int key = isr_mode ? irq_lock() : 0;
    20d0:	2600      	movs	r6, #0
    20d2:	e7f4      	b.n	20be <lfclk_spinwait+0x3e>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    20d4:	b30c      	cbz	r4, 211a <lfclk_spinwait+0x9a>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    20d6:	4630      	mov	r0, r6
    20d8:	f7ff fa64 	bl	15a4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    20dc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    20e0:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    20e4:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    20e6:	2b01      	cmp	r3, #1
    20e8:	d01c      	beq.n	2124 <lfclk_spinwait+0xa4>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    20ea:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    20ee:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    20f2:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    20f6:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    20fa:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    20fe:	d126      	bne.n	214e <lfclk_spinwait+0xce>
    return false;
    2100:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2102:	2a00      	cmp	r2, #0
    2104:	d0e6      	beq.n	20d4 <lfclk_spinwait+0x54>
    2106:	2b02      	cmp	r3, #2
    2108:	d001      	beq.n	210e <lfclk_spinwait+0x8e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    210a:	2d01      	cmp	r5, #1
    210c:	d1e2      	bne.n	20d4 <lfclk_spinwait+0x54>
	if (isr_mode) {
    210e:	b304      	cbz	r4, 2152 <lfclk_spinwait+0xd2>
	__asm__ volatile(
    2110:	f386 8811 	msr	BASEPRI, r6
    2114:	f3bf 8f6f 	isb	sy
}
    2118:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
    211a:	2021      	movs	r0, #33	; 0x21
    211c:	2100      	movs	r1, #0
    211e:	f002 fd45 	bl	4bac <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2122:	e7db      	b.n	20dc <lfclk_spinwait+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2124:	4b0f      	ldr	r3, [pc, #60]	; (2164 <lfclk_spinwait+0xe4>)
    2126:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    2128:	2b00      	cmp	r3, #0
    212a:	d0de      	beq.n	20ea <lfclk_spinwait+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    212c:	4b0d      	ldr	r3, [pc, #52]	; (2164 <lfclk_spinwait+0xe4>)
    212e:	2200      	movs	r2, #0
    2130:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2132:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    2134:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2138:	2202      	movs	r2, #2
    213a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    213e:	4b0a      	ldr	r3, [pc, #40]	; (2168 <lfclk_spinwait+0xe8>)
    2140:	2220      	movs	r2, #32
    2142:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2146:	4b09      	ldr	r3, [pc, #36]	; (216c <lfclk_spinwait+0xec>)
    2148:	2201      	movs	r2, #1
    214a:	601a      	str	r2, [r3, #0]
}
    214c:	e7cd      	b.n	20ea <lfclk_spinwait+0x6a>
                return true;
    214e:	2201      	movs	r2, #1
    2150:	e7d7      	b.n	2102 <lfclk_spinwait+0x82>
    p_reg->INTENSET = mask;
    2152:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2156:	2202      	movs	r2, #2
    2158:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    215c:	e7dc      	b.n	2118 <lfclk_spinwait+0x98>
    215e:	bf00      	nop
    2160:	20000999 	.word	0x20000999
    2164:	50005104 	.word	0x50005104
    2168:	e000e100 	.word	0xe000e100
    216c:	50005008 	.word	0x50005008

00002170 <z_nrf_clock_control_lf_on>:
{
    2170:	b510      	push	{r4, lr}
    2172:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2174:	4b0e      	ldr	r3, [pc, #56]	; (21b0 <z_nrf_clock_control_lf_on+0x40>)
    2176:	2101      	movs	r1, #1
    2178:	e8d3 2fef 	ldaex	r2, [r3]
    217c:	e8c3 1fe0 	stlex	r0, r1, [r3]
    2180:	2800      	cmp	r0, #0
    2182:	d1f9      	bne.n	2178 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    2184:	b11a      	cbz	r2, 218e <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    2186:	1e63      	subs	r3, r4, #1
    2188:	2b01      	cmp	r3, #1
    218a:	d90c      	bls.n	21a6 <z_nrf_clock_control_lf_on+0x36>
}
    218c:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    218e:	4809      	ldr	r0, [pc, #36]	; (21b4 <z_nrf_clock_control_lf_on+0x44>)
    2190:	f003 fbe7 	bl	5962 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2194:	4908      	ldr	r1, [pc, #32]	; (21b8 <z_nrf_clock_control_lf_on+0x48>)
    2196:	2300      	movs	r3, #0
    2198:	604b      	str	r3, [r1, #4]
    219a:	60cb      	str	r3, [r1, #12]
    219c:	2301      	movs	r3, #1
    219e:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    21a0:	f003 f9bb 	bl	551a <onoff_request>
    21a4:	e7ef      	b.n	2186 <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    21a6:	4620      	mov	r0, r4
    21a8:	f7ff ff6a 	bl	2080 <lfclk_spinwait>
		break;
    21ac:	e7ee      	b.n	218c <z_nrf_clock_control_lf_on+0x1c>
    21ae:	bf00      	nop
    21b0:	20000910 	.word	0x20000910
    21b4:	000065a0 	.word	0x000065a0
    21b8:	2000085c 	.word	0x2000085c

000021bc <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    21bc:	b510      	push	{r4, lr}
    21be:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    21c0:	280a      	cmp	r0, #10
    21c2:	d007      	beq.n	21d4 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    21c4:	4b07      	ldr	r3, [pc, #28]	; (21e4 <console_out+0x28>)
    21c6:	6818      	ldr	r0, [r3, #0]
    21c8:	b2e1      	uxtb	r1, r4
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
    21ca:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    21cc:	685b      	ldr	r3, [r3, #4]
    21ce:	4798      	blx	r3

	return c;
}
    21d0:	4620      	mov	r0, r4
    21d2:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    21d4:	4b03      	ldr	r3, [pc, #12]	; (21e4 <console_out+0x28>)
    21d6:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    21d8:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    21da:	685b      	ldr	r3, [r3, #4]
    21dc:	210d      	movs	r1, #13
    21de:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    21e0:	e7f0      	b.n	21c4 <console_out+0x8>
    21e2:	bf00      	nop
    21e4:	20000914 	.word	0x20000914

000021e8 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    21e8:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    21ea:	4c04      	ldr	r4, [pc, #16]	; (21fc <uart_console_hook_install+0x14>)
    21ec:	4620      	mov	r0, r4
    21ee:	f7ff fe49 	bl	1e84 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    21f2:	4620      	mov	r0, r4
    21f4:	f7fe f992 	bl	51c <__printk_hook_install>
#endif
}
    21f8:	bd10      	pop	{r4, pc}
    21fa:	bf00      	nop
    21fc:	000021bd 	.word	0x000021bd

00002200 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2200:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2202:	4806      	ldr	r0, [pc, #24]	; (221c <uart_console_init+0x1c>)
    2204:	4b06      	ldr	r3, [pc, #24]	; (2220 <uart_console_init+0x20>)
    2206:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    2208:	f003 ff63 	bl	60d2 <z_device_ready>
    220c:	b118      	cbz	r0, 2216 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    220e:	f7ff ffeb 	bl	21e8 <uart_console_hook_install>

	return 0;
    2212:	2000      	movs	r0, #0
}
    2214:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2216:	f06f 0012 	mvn.w	r0, #18
    221a:	e7fb      	b.n	2214 <uart_console_init+0x14>
    221c:	000065e8 	.word	0x000065e8
    2220:	20000914 	.word	0x20000914

00002224 <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2224:	4b1f      	ldr	r3, [pc, #124]	; (22a4 <get_drive+0x80>)
    2226:	4003      	ands	r3, r0
    2228:	4a1f      	ldr	r2, [pc, #124]	; (22a8 <get_drive+0x84>)
    222a:	4293      	cmp	r3, r2
    222c:	d032      	beq.n	2294 <get_drive+0x70>
    222e:	d816      	bhi.n	225e <get_drive+0x3a>
    2230:	2b06      	cmp	r3, #6
    2232:	d02b      	beq.n	228c <get_drive+0x68>
    2234:	d906      	bls.n	2244 <get_drive+0x20>
    2236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    223a:	d10d      	bne.n	2258 <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
    223c:	2301      	movs	r3, #1
    223e:	700b      	strb	r3, [r1, #0]
	int err = 0;
    2240:	2000      	movs	r0, #0
		break;
    2242:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2244:	b1fb      	cbz	r3, 2286 <get_drive+0x62>
    2246:	2b02      	cmp	r3, #2
    2248:	d103      	bne.n	2252 <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
    224a:	2304      	movs	r3, #4
    224c:	700b      	strb	r3, [r1, #0]
	int err = 0;
    224e:	2000      	movs	r0, #0
		break;
    2250:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2252:	f06f 0015 	mvn.w	r0, #21
    2256:	4770      	bx	lr
    2258:	f06f 0015 	mvn.w	r0, #21
    225c:	4770      	bx	lr
    225e:	4a13      	ldr	r2, [pc, #76]	; (22ac <get_drive+0x88>)
    2260:	4293      	cmp	r3, r2
    2262:	d01b      	beq.n	229c <get_drive+0x78>
    2264:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2268:	d103      	bne.n	2272 <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
    226a:	2303      	movs	r3, #3
    226c:	700b      	strb	r3, [r1, #0]
	int err = 0;
    226e:	2000      	movs	r0, #0
		break;
    2270:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2276:	d103      	bne.n	2280 <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
    2278:	2302      	movs	r3, #2
    227a:	700b      	strb	r3, [r1, #0]
	int err = 0;
    227c:	2000      	movs	r0, #0
		break;
    227e:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2280:	f06f 0015 	mvn.w	r0, #21
    2284:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    2286:	2000      	movs	r0, #0
    2288:	7008      	strb	r0, [r1, #0]
		break;
    228a:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    228c:	2306      	movs	r3, #6
    228e:	700b      	strb	r3, [r1, #0]
	int err = 0;
    2290:	2000      	movs	r0, #0
		break;
    2292:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    2294:	2307      	movs	r3, #7
    2296:	700b      	strb	r3, [r1, #0]
	int err = 0;
    2298:	2000      	movs	r0, #0
		break;
    229a:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
    229c:	2305      	movs	r3, #5
    229e:	700b      	strb	r3, [r1, #0]
	int err = 0;
    22a0:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
    22a2:	4770      	bx	lr
    22a4:	00f00006 	.word	0x00f00006
    22a8:	00100006 	.word	0x00100006
    22ac:	00400002 	.word	0x00400002

000022b0 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    22b0:	b128      	cbz	r0, 22be <get_dev+0xe>
    22b2:	2801      	cmp	r0, #1
    22b4:	d101      	bne.n	22ba <get_dev+0xa>
    22b6:	4803      	ldr	r0, [pc, #12]	; (22c4 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    22b8:	4770      	bx	lr
	const struct device *dev = NULL;
    22ba:	2000      	movs	r0, #0
    22bc:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    22be:	4802      	ldr	r0, [pc, #8]	; (22c8 <get_dev+0x18>)
    22c0:	4770      	bx	lr
    22c2:	bf00      	nop
    22c4:	000065b8 	.word	0x000065b8
    22c8:	000065d0 	.word	0x000065d0

000022cc <gpio_nrfx_pin_interrupt_configure>:
{
    22cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    22ce:	b085      	sub	sp, #20
    22d0:	460e      	mov	r6, r1
    22d2:	4619      	mov	r1, r3
	return port->config;
    22d4:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    22d6:	7b1b      	ldrb	r3, [r3, #12]
    22d8:	f006 051f 	and.w	r5, r6, #31
    22dc:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    22e0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    22e4:	d022      	beq.n	232c <gpio_nrfx_pin_interrupt_configure+0x60>
    22e6:	4607      	mov	r7, r0
    22e8:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    22ea:	2300      	movs	r3, #0
    22ec:	9302      	str	r3, [sp, #8]
    22ee:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    22f0:	4610      	mov	r0, r2
    22f2:	f003 fc41 	bl	5b78 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    22f6:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    22fa:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    22fc:	6899      	ldr	r1, [r3, #8]
    22fe:	40f1      	lsrs	r1, r6
    2300:	f011 0f01 	tst.w	r1, #1
    2304:	d102      	bne.n	230c <gpio_nrfx_pin_interrupt_configure+0x40>
    2306:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
    230a:	d014      	beq.n	2336 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    230c:	2300      	movs	r3, #0
    230e:	aa02      	add	r2, sp, #8
    2310:	4619      	mov	r1, r3
    2312:	4628      	mov	r0, r5
    2314:	f001 fa3c 	bl	3790 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2318:	4b1a      	ldr	r3, [pc, #104]	; (2384 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    231a:	4298      	cmp	r0, r3
    231c:	d12f      	bne.n	237e <gpio_nrfx_pin_interrupt_configure+0xb2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    231e:	2101      	movs	r1, #1
    2320:	4628      	mov	r0, r5
    2322:	f001 fc11 	bl	3b48 <nrfx_gpiote_trigger_enable>
	return 0;
    2326:	2000      	movs	r0, #0
}
    2328:	b005      	add	sp, #20
    232a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    232c:	4628      	mov	r0, r5
    232e:	f001 fc6d 	bl	3c0c <nrfx_gpiote_trigger_disable>
		return 0;
    2332:	2000      	movs	r0, #0
    2334:	e7f8      	b.n	2328 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2336:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    233a:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    233c:	2a01      	cmp	r2, #1
    233e:	d012      	beq.n	2366 <gpio_nrfx_pin_interrupt_configure+0x9a>
        case 0: return NRF_P0;
    2340:	4a11      	ldr	r2, [pc, #68]	; (2388 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2342:	3380      	adds	r3, #128	; 0x80
    2344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2348:	f013 0f01 	tst.w	r3, #1
    234c:	d1de      	bne.n	230c <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    234e:	f10d 0107 	add.w	r1, sp, #7
    2352:	4628      	mov	r0, r5
    2354:	f001 fb9c 	bl	3a90 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2358:	4b0c      	ldr	r3, [pc, #48]	; (238c <gpio_nrfx_pin_interrupt_configure+0xc0>)
    235a:	4298      	cmp	r0, r3
    235c:	d005      	beq.n	236a <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    235e:	f10d 0307 	add.w	r3, sp, #7
    2362:	9303      	str	r3, [sp, #12]
    2364:	e7d2      	b.n	230c <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    2366:	4a0a      	ldr	r2, [pc, #40]	; (2390 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    2368:	e7eb      	b.n	2342 <gpio_nrfx_pin_interrupt_configure+0x76>
			err = nrfx_gpiote_channel_alloc(&ch);
    236a:	f10d 0007 	add.w	r0, sp, #7
    236e:	f001 fbe3 	bl	3b38 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2372:	4b04      	ldr	r3, [pc, #16]	; (2384 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    2374:	4298      	cmp	r0, r3
    2376:	d0f2      	beq.n	235e <gpio_nrfx_pin_interrupt_configure+0x92>
				return -ENOMEM;
    2378:	f06f 000b 	mvn.w	r0, #11
    237c:	e7d4      	b.n	2328 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    237e:	f06f 0004 	mvn.w	r0, #4
    2382:	e7d1      	b.n	2328 <gpio_nrfx_pin_interrupt_configure+0x5c>
    2384:	0bad0000 	.word	0x0bad0000
    2388:	50842500 	.word	0x50842500
    238c:	0bad0004 	.word	0x0bad0004
    2390:	50842800 	.word	0x50842800

00002394 <pin_uninit>:
{
    2394:	b530      	push	{r4, r5, lr}
    2396:	b083      	sub	sp, #12
    2398:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    239a:	f10d 0107 	add.w	r1, sp, #7
    239e:	f001 fb77 	bl	3a90 <nrfx_gpiote_channel_get>
    23a2:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    23a4:	4620      	mov	r0, r4
    23a6:	f001 fc61 	bl	3c6c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    23aa:	4b0b      	ldr	r3, [pc, #44]	; (23d8 <pin_uninit+0x44>)
    23ac:	4298      	cmp	r0, r3
    23ae:	d10f      	bne.n	23d0 <pin_uninit+0x3c>
	if (free_ch) {
    23b0:	429d      	cmp	r5, r3
    23b2:	d005      	beq.n	23c0 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    23b4:	4b08      	ldr	r3, [pc, #32]	; (23d8 <pin_uninit+0x44>)
    23b6:	4298      	cmp	r0, r3
    23b8:	d107      	bne.n	23ca <pin_uninit+0x36>
    23ba:	2000      	movs	r0, #0
}
    23bc:	b003      	add	sp, #12
    23be:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    23c0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    23c4:	f001 fbb0 	bl	3b28 <nrfx_gpiote_channel_free>
    23c8:	e7f4      	b.n	23b4 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    23ca:	f06f 0004 	mvn.w	r0, #4
    23ce:	e7f5      	b.n	23bc <pin_uninit+0x28>
		return -EIO;
    23d0:	f06f 0004 	mvn.w	r0, #4
    23d4:	e7f2      	b.n	23bc <pin_uninit+0x28>
    23d6:	bf00      	nop
    23d8:	0bad0000 	.word	0x0bad0000

000023dc <gpio_nrfx_pin_configure>:
{
    23dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    23e0:	b087      	sub	sp, #28
	return port->config;
    23e2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    23e6:	f898 300c 	ldrb.w	r3, [r8, #12]
    23ea:	f001 051f 	and.w	r5, r1, #31
    23ee:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    23f2:	2a00      	cmp	r2, #0
    23f4:	d043      	beq.n	247e <gpio_nrfx_pin_configure+0xa2>
    23f6:	460c      	mov	r4, r1
    23f8:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    23fa:	2600      	movs	r6, #0
    23fc:	9603      	str	r6, [sp, #12]
    23fe:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2400:	f10d 0117 	add.w	r1, sp, #23
    2404:	4620      	mov	r0, r4
    2406:	f001 fb43 	bl	3a90 <nrfx_gpiote_channel_get>
    240a:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    240c:	4633      	mov	r3, r6
    240e:	aa03      	add	r2, sp, #12
    2410:	4631      	mov	r1, r6
    2412:	4628      	mov	r0, r5
    2414:	f001 f9bc 	bl	3790 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2418:	4b2f      	ldr	r3, [pc, #188]	; (24d8 <gpio_nrfx_pin_configure+0xfc>)
    241a:	4298      	cmp	r0, r3
    241c:	d159      	bne.n	24d2 <gpio_nrfx_pin_configure+0xf6>
	if (free_ch) {
    241e:	4599      	cmp	r9, r3
    2420:	d035      	beq.n	248e <gpio_nrfx_pin_configure+0xb2>
	if (flags & GPIO_OUTPUT) {
    2422:	f417 7f00 	tst.w	r7, #512	; 0x200
    2426:	d041      	beq.n	24ac <gpio_nrfx_pin_configure+0xd0>
		int rv = get_drive(flags, &drive);
    2428:	f10d 0103 	add.w	r1, sp, #3
    242c:	4638      	mov	r0, r7
    242e:	f7ff fef9 	bl	2224 <get_drive>
		if (rv != 0) {
    2432:	4606      	mov	r6, r0
    2434:	bb38      	cbnz	r0, 2486 <gpio_nrfx_pin_configure+0xaa>
		nrfx_gpiote_output_config_t output_config = {
    2436:	f89d 3003 	ldrb.w	r3, [sp, #3]
    243a:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    243e:	f417 7f80 	tst.w	r7, #256	; 0x100
    2442:	bf0c      	ite	eq
    2444:	2301      	moveq	r3, #1
    2446:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    2448:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    244c:	4638      	mov	r0, r7
    244e:	f003 fb67 	bl	5b20 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    2452:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2456:	f417 6f00 	tst.w	r7, #2048	; 0x800
    245a:	d01d      	beq.n	2498 <gpio_nrfx_pin_configure+0xbc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    245c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2460:	2101      	movs	r1, #1
    2462:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    2466:	609c      	str	r4, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2468:	2200      	movs	r2, #0
    246a:	a901      	add	r1, sp, #4
    246c:	4628      	mov	r0, r5
    246e:	f001 fa47 	bl	3900 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2472:	4b19      	ldr	r3, [pc, #100]	; (24d8 <gpio_nrfx_pin_configure+0xfc>)
    2474:	4298      	cmp	r0, r3
    2476:	d006      	beq.n	2486 <gpio_nrfx_pin_configure+0xaa>
    2478:	f06f 0615 	mvn.w	r6, #21
    247c:	e003      	b.n	2486 <gpio_nrfx_pin_configure+0xaa>
		return pin_uninit(abs_pin);
    247e:	4628      	mov	r0, r5
    2480:	f7ff ff88 	bl	2394 <pin_uninit>
    2484:	4606      	mov	r6, r0
}
    2486:	4630      	mov	r0, r6
    2488:	b007      	add	sp, #28
    248a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    248e:	f89d 0017 	ldrb.w	r0, [sp, #23]
    2492:	f001 fb49 	bl	3b28 <nrfx_gpiote_channel_free>
    2496:	e7c4      	b.n	2422 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2498:	f417 6f80 	tst.w	r7, #1024	; 0x400
    249c:	d0e4      	beq.n	2468 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    249e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    24a2:	2301      	movs	r3, #1
    24a4:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    24a8:	60d4      	str	r4, [r2, #12]
}
    24aa:	e7dd      	b.n	2468 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
    24ac:	4638      	mov	r0, r7
    24ae:	f003 fb37 	bl	5b20 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    24b2:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    24b6:	2300      	movs	r3, #0
    24b8:	461a      	mov	r2, r3
    24ba:	a902      	add	r1, sp, #8
    24bc:	4628      	mov	r0, r5
    24be:	f001 f967 	bl	3790 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    24c2:	4b05      	ldr	r3, [pc, #20]	; (24d8 <gpio_nrfx_pin_configure+0xfc>)
    24c4:	4298      	cmp	r0, r3
    24c6:	d101      	bne.n	24cc <gpio_nrfx_pin_configure+0xf0>
    24c8:	2600      	movs	r6, #0
    24ca:	e7dc      	b.n	2486 <gpio_nrfx_pin_configure+0xaa>
    24cc:	f06f 0615 	mvn.w	r6, #21
    24d0:	e7d9      	b.n	2486 <gpio_nrfx_pin_configure+0xaa>
		return -EINVAL;
    24d2:	f06f 0615 	mvn.w	r6, #21
    24d6:	e7d6      	b.n	2486 <gpio_nrfx_pin_configure+0xaa>
    24d8:	0bad0000 	.word	0x0bad0000

000024dc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    24dc:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    24de:	f001 fb19 	bl	3b14 <nrfx_gpiote_is_init>
    24e2:	b108      	cbz	r0, 24e8 <gpio_nrfx_init+0xc>
		return 0;
    24e4:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    24e6:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    24e8:	f001 faea 	bl	3ac0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    24ec:	4b08      	ldr	r3, [pc, #32]	; (2510 <gpio_nrfx_init+0x34>)
    24ee:	4298      	cmp	r0, r3
    24f0:	d10a      	bne.n	2508 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    24f2:	2100      	movs	r1, #0
    24f4:	4807      	ldr	r0, [pc, #28]	; (2514 <gpio_nrfx_init+0x38>)
    24f6:	f001 fac5 	bl	3a84 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    24fa:	2200      	movs	r2, #0
    24fc:	2105      	movs	r1, #5
    24fe:	200d      	movs	r0, #13
    2500:	f7ff f878 	bl	15f4 <z_arm_irq_priority_set>
	return 0;
    2504:	2000      	movs	r0, #0
    2506:	e7ee      	b.n	24e6 <gpio_nrfx_init+0xa>
		return -EIO;
    2508:	f06f 0004 	mvn.w	r0, #4
    250c:	e7eb      	b.n	24e6 <gpio_nrfx_init+0xa>
    250e:	bf00      	nop
    2510:	0bad0000 	.word	0x0bad0000
    2514:	00005c09 	.word	0x00005c09

00002518 <uarte_nrfx_pins_configure>:
	return config->uarte_regs;
}

#ifndef CONFIG_PINCTRL
static void uarte_nrfx_pins_configure(const struct device *dev, bool sleep)
{
    2518:	b410      	push	{r4}
	return dev->config;
    251a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	if (!sleep) {
    251c:	2900      	cmp	r1, #0
    251e:	f040 8087 	bne.w	2630 <uarte_nrfx_pins_configure+0x118>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    2522:	68da      	ldr	r2, [r3, #12]
    2524:	f1b2 3fff 	cmp.w	r2, #4294967295
    2528:	d018      	beq.n	255c <uarte_nrfx_pins_configure+0x44>
    *p_pin = pin_number & 0x1F;
    252a:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    252e:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2530:	2a01      	cmp	r2, #1
    2532:	d06d      	beq.n	2610 <uarte_nrfx_pins_configure+0xf8>
        case 0: return NRF_P0;
    2534:	4869      	ldr	r0, [pc, #420]	; (26dc <uarte_nrfx_pins_configure+0x1c4>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2536:	2201      	movs	r2, #1
    2538:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    253a:	6082      	str	r2, [r0, #8]
			nrf_gpio_pin_write(cfg->tx_pin, 1);
			nrf_gpio_cfg_output(cfg->tx_pin);
    253c:	68da      	ldr	r2, [r3, #12]
    *p_pin = pin_number & 0x1F;
    253e:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    2542:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2544:	2a01      	cmp	r2, #1
    2546:	d065      	beq.n	2614 <uarte_nrfx_pins_configure+0xfc>
        case 0: return NRF_P0;
    2548:	4864      	ldr	r0, [pc, #400]	; (26dc <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    254a:	3180      	adds	r1, #128	; 0x80
    254c:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    2550:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2554:	f042 0203 	orr.w	r2, r2, #3
    reg->PIN_CNF[pin_number] = cnf;
    2558:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		}

		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    255c:	691a      	ldr	r2, [r3, #16]
    255e:	f1b2 3fff 	cmp.w	r2, #4294967295
    2562:	d012      	beq.n	258a <uarte_nrfx_pins_configure+0x72>
			nrf_gpio_cfg_input(cfg->rx_pin,
					   (cfg->rx_pull_up ?
    2564:	7f19      	ldrb	r1, [r3, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
    2566:	2900      	cmp	r1, #0
    2568:	d056      	beq.n	2618 <uarte_nrfx_pins_configure+0x100>
    256a:	2403      	movs	r4, #3
    *p_pin = pin_number & 0x1F;
    256c:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    2570:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2572:	2a01      	cmp	r2, #1
    2574:	d052      	beq.n	261c <uarte_nrfx_pins_configure+0x104>
        case 0: return NRF_P0;
    2576:	4859      	ldr	r0, [pc, #356]	; (26dc <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    2578:	3180      	adds	r1, #128	; 0x80
    257a:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    257e:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2582:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    2586:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
					    NRF_GPIO_PIN_PULLUP :
					    NRF_GPIO_PIN_NOPULL));
		}

		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    258a:	695a      	ldr	r2, [r3, #20]
    258c:	f1b2 3fff 	cmp.w	r2, #4294967295
    2590:	d018      	beq.n	25c4 <uarte_nrfx_pins_configure+0xac>
    *p_pin = pin_number & 0x1F;
    2592:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    2596:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2598:	2a01      	cmp	r2, #1
    259a:	d041      	beq.n	2620 <uarte_nrfx_pins_configure+0x108>
        case 0: return NRF_P0;
    259c:	484f      	ldr	r0, [pc, #316]	; (26dc <uarte_nrfx_pins_configure+0x1c4>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    259e:	2201      	movs	r2, #1
    25a0:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    25a2:	6082      	str	r2, [r0, #8]
			nrf_gpio_pin_write(cfg->rts_pin, 1);
			nrf_gpio_cfg_output(cfg->rts_pin);
    25a4:	695a      	ldr	r2, [r3, #20]
    *p_pin = pin_number & 0x1F;
    25a6:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    25aa:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    25ac:	2a01      	cmp	r2, #1
    25ae:	d039      	beq.n	2624 <uarte_nrfx_pins_configure+0x10c>
        case 0: return NRF_P0;
    25b0:	484a      	ldr	r0, [pc, #296]	; (26dc <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    25b2:	3180      	adds	r1, #128	; 0x80
    25b4:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    25b8:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    25bc:	f042 0203 	orr.w	r2, r2, #3
    reg->PIN_CNF[pin_number] = cnf;
    25c0:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		}

		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    25c4:	699a      	ldr	r2, [r3, #24]
    25c6:	f1b2 3fff 	cmp.w	r2, #4294967295
    25ca:	d011      	beq.n	25f0 <uarte_nrfx_pins_configure+0xd8>
			nrf_gpio_cfg_input(cfg->cts_pin,
					   (cfg->cts_pull_up ?
    25cc:	7f59      	ldrb	r1, [r3, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
    25ce:	b359      	cbz	r1, 2628 <uarte_nrfx_pins_configure+0x110>
    25d0:	2403      	movs	r4, #3
    *p_pin = pin_number & 0x1F;
    25d2:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    25d6:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    25d8:	2a01      	cmp	r2, #1
    25da:	d027      	beq.n	262c <uarte_nrfx_pins_configure+0x114>
        case 0: return NRF_P0;
    25dc:	483f      	ldr	r0, [pc, #252]	; (26dc <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    25de:	3180      	adds	r1, #128	; 0x80
    25e0:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    25e4:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    25e8:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    25ec:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
			nrf_gpio_cfg_default(cfg->cts_pin);
		}
	}

	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    25f0:	681a      	ldr	r2, [r3, #0]
    25f2:	68d8      	ldr	r0, [r3, #12]
    25f4:	6919      	ldr	r1, [r3, #16]

NRF_STATIC_INLINE void nrf_uarte_txrx_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pseltxd,
                                               uint32_t         pselrxd)
{
    p_reg->PSEL.TXD = pseltxd;
    25f6:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    25fa:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    25fe:	681a      	ldr	r2, [r3, #0]
    2600:	6959      	ldr	r1, [r3, #20]
    2602:	699b      	ldr	r3, [r3, #24]

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
    p_reg->PSEL.RTS = pselrts;
    2604:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    2608:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
    260c:	bc10      	pop	{r4}
    260e:	4770      	bx	lr
        case 1: return NRF_P1;
    2610:	4833      	ldr	r0, [pc, #204]	; (26e0 <uarte_nrfx_pins_configure+0x1c8>)
    2612:	e790      	b.n	2536 <uarte_nrfx_pins_configure+0x1e>
    2614:	4832      	ldr	r0, [pc, #200]	; (26e0 <uarte_nrfx_pins_configure+0x1c8>)
    2616:	e798      	b.n	254a <uarte_nrfx_pins_configure+0x32>
			nrf_gpio_cfg_input(cfg->rx_pin,
    2618:	2400      	movs	r4, #0
    261a:	e7a7      	b.n	256c <uarte_nrfx_pins_configure+0x54>
    261c:	4830      	ldr	r0, [pc, #192]	; (26e0 <uarte_nrfx_pins_configure+0x1c8>)
    261e:	e7ab      	b.n	2578 <uarte_nrfx_pins_configure+0x60>
    2620:	482f      	ldr	r0, [pc, #188]	; (26e0 <uarte_nrfx_pins_configure+0x1c8>)
    2622:	e7bc      	b.n	259e <uarte_nrfx_pins_configure+0x86>
    2624:	482e      	ldr	r0, [pc, #184]	; (26e0 <uarte_nrfx_pins_configure+0x1c8>)
    2626:	e7c4      	b.n	25b2 <uarte_nrfx_pins_configure+0x9a>
			nrf_gpio_cfg_input(cfg->cts_pin,
    2628:	2400      	movs	r4, #0
    262a:	e7d2      	b.n	25d2 <uarte_nrfx_pins_configure+0xba>
    262c:	482c      	ldr	r0, [pc, #176]	; (26e0 <uarte_nrfx_pins_configure+0x1c8>)
    262e:	e7d6      	b.n	25de <uarte_nrfx_pins_configure+0xc6>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    2630:	68da      	ldr	r2, [r3, #12]
    2632:	f1b2 3fff 	cmp.w	r2, #4294967295
    2636:	d00e      	beq.n	2656 <uarte_nrfx_pins_configure+0x13e>
    *p_pin = pin_number & 0x1F;
    2638:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    263c:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    263e:	2a01      	cmp	r2, #1
    2640:	d043      	beq.n	26ca <uarte_nrfx_pins_configure+0x1b2>
        case 0: return NRF_P0;
    2642:	4826      	ldr	r0, [pc, #152]	; (26dc <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    2644:	3180      	adds	r1, #128	; 0x80
    2646:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    264a:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    264e:	f042 0202 	orr.w	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    2652:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    2656:	691a      	ldr	r2, [r3, #16]
    2658:	f1b2 3fff 	cmp.w	r2, #4294967295
    265c:	d00e      	beq.n	267c <uarte_nrfx_pins_configure+0x164>
    *p_pin = pin_number & 0x1F;
    265e:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    2662:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2664:	2a01      	cmp	r2, #1
    2666:	d032      	beq.n	26ce <uarte_nrfx_pins_configure+0x1b6>
        case 0: return NRF_P0;
    2668:	481c      	ldr	r0, [pc, #112]	; (26dc <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    266a:	3180      	adds	r1, #128	; 0x80
    266c:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    2670:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2674:	f042 0202 	orr.w	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    2678:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    267c:	695a      	ldr	r2, [r3, #20]
    267e:	f1b2 3fff 	cmp.w	r2, #4294967295
    2682:	d00e      	beq.n	26a2 <uarte_nrfx_pins_configure+0x18a>
    *p_pin = pin_number & 0x1F;
    2684:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    2688:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    268a:	2a01      	cmp	r2, #1
    268c:	d021      	beq.n	26d2 <uarte_nrfx_pins_configure+0x1ba>
        case 0: return NRF_P0;
    268e:	4813      	ldr	r0, [pc, #76]	; (26dc <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    2690:	3180      	adds	r1, #128	; 0x80
    2692:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    2696:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    269a:	f042 0202 	orr.w	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    269e:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    26a2:	699a      	ldr	r2, [r3, #24]
    26a4:	f1b2 3fff 	cmp.w	r2, #4294967295
    26a8:	d0a2      	beq.n	25f0 <uarte_nrfx_pins_configure+0xd8>
    *p_pin = pin_number & 0x1F;
    26aa:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    26ae:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    26b0:	2a01      	cmp	r2, #1
    26b2:	d010      	beq.n	26d6 <uarte_nrfx_pins_configure+0x1be>
        case 0: return NRF_P0;
    26b4:	4809      	ldr	r0, [pc, #36]	; (26dc <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    26b6:	3180      	adds	r1, #128	; 0x80
    26b8:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    26bc:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    26c0:	f042 0202 	orr.w	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    26c4:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
}
    26c8:	e792      	b.n	25f0 <uarte_nrfx_pins_configure+0xd8>
        case 1: return NRF_P1;
    26ca:	4805      	ldr	r0, [pc, #20]	; (26e0 <uarte_nrfx_pins_configure+0x1c8>)
    26cc:	e7ba      	b.n	2644 <uarte_nrfx_pins_configure+0x12c>
    26ce:	4804      	ldr	r0, [pc, #16]	; (26e0 <uarte_nrfx_pins_configure+0x1c8>)
    26d0:	e7cb      	b.n	266a <uarte_nrfx_pins_configure+0x152>
    26d2:	4803      	ldr	r0, [pc, #12]	; (26e0 <uarte_nrfx_pins_configure+0x1c8>)
    26d4:	e7dc      	b.n	2690 <uarte_nrfx_pins_configure+0x178>
    26d6:	4802      	ldr	r0, [pc, #8]	; (26e0 <uarte_nrfx_pins_configure+0x1c8>)
    26d8:	e7ed      	b.n	26b6 <uarte_nrfx_pins_configure+0x19e>
    26da:	bf00      	nop
    26dc:	50842500 	.word	0x50842500
    26e0:	50842800 	.word	0x50842800

000026e4 <baudrate_set>:
	return dev->config;
    26e4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    26e6:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    26e8:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    26ec:	d06f      	beq.n	27ce <baudrate_set+0xea>
    26ee:	d83a      	bhi.n	2766 <baudrate_set+0x82>
    26f0:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    26f4:	d06e      	beq.n	27d4 <baudrate_set+0xf0>
    26f6:	d90a      	bls.n	270e <baudrate_set+0x2a>
    26f8:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    26fc:	d075      	beq.n	27ea <baudrate_set+0x106>
    26fe:	d924      	bls.n	274a <baudrate_set+0x66>
    2700:	f647 2312 	movw	r3, #31250	; 0x7a12
    2704:	4299      	cmp	r1, r3
    2706:	d12b      	bne.n	2760 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2708:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    270c:	e013      	b.n	2736 <baudrate_set+0x52>
	switch (baudrate) {
    270e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    2712:	d061      	beq.n	27d8 <baudrate_set+0xf4>
    2714:	d907      	bls.n	2726 <baudrate_set+0x42>
    2716:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    271a:	d063      	beq.n	27e4 <baudrate_set+0x100>
    271c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    2720:	d110      	bne.n	2744 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2722:	4b3c      	ldr	r3, [pc, #240]	; (2814 <baudrate_set+0x130>)
    2724:	e007      	b.n	2736 <baudrate_set+0x52>
	switch (baudrate) {
    2726:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    272a:	d058      	beq.n	27de <baudrate_set+0xfa>
    272c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    2730:	d105      	bne.n	273e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    2732:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2736:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    273a:	2000      	movs	r0, #0
    273c:	4770      	bx	lr
	switch (baudrate) {
    273e:	f06f 0015 	mvn.w	r0, #21
    2742:	4770      	bx	lr
    2744:	f06f 0015 	mvn.w	r0, #21
    2748:	4770      	bx	lr
    274a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    274e:	d04e      	beq.n	27ee <baudrate_set+0x10a>
    2750:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    2754:	d101      	bne.n	275a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2756:	4b30      	ldr	r3, [pc, #192]	; (2818 <baudrate_set+0x134>)
    2758:	e7ed      	b.n	2736 <baudrate_set+0x52>
	switch (baudrate) {
    275a:	f06f 0015 	mvn.w	r0, #21
    275e:	4770      	bx	lr
    2760:	f06f 0015 	mvn.w	r0, #21
    2764:	4770      	bx	lr
    2766:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    276a:	d042      	beq.n	27f2 <baudrate_set+0x10e>
    276c:	d909      	bls.n	2782 <baudrate_set+0x9e>
    276e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    2772:	d046      	beq.n	2802 <baudrate_set+0x11e>
    2774:	d91f      	bls.n	27b6 <baudrate_set+0xd2>
    2776:	4b29      	ldr	r3, [pc, #164]	; (281c <baudrate_set+0x138>)
    2778:	4299      	cmp	r1, r3
    277a:	d148      	bne.n	280e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    277c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2780:	e7d9      	b.n	2736 <baudrate_set+0x52>
	switch (baudrate) {
    2782:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    2786:	d037      	beq.n	27f8 <baudrate_set+0x114>
    2788:	d905      	bls.n	2796 <baudrate_set+0xb2>
    278a:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    278e:	d10f      	bne.n	27b0 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2790:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2794:	e7cf      	b.n	2736 <baudrate_set+0x52>
	switch (baudrate) {
    2796:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    279a:	4299      	cmp	r1, r3
    279c:	d02e      	beq.n	27fc <baudrate_set+0x118>
    279e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    27a2:	d102      	bne.n	27aa <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    27a4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    27a8:	e7c5      	b.n	2736 <baudrate_set+0x52>
	switch (baudrate) {
    27aa:	f06f 0015 	mvn.w	r0, #21
    27ae:	4770      	bx	lr
    27b0:	f06f 0015 	mvn.w	r0, #21
    27b4:	4770      	bx	lr
    27b6:	4b1a      	ldr	r3, [pc, #104]	; (2820 <baudrate_set+0x13c>)
    27b8:	4299      	cmp	r1, r3
    27ba:	d025      	beq.n	2808 <baudrate_set+0x124>
    27bc:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    27c0:	d102      	bne.n	27c8 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    27c2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    27c6:	e7b6      	b.n	2736 <baudrate_set+0x52>
	switch (baudrate) {
    27c8:	f06f 0015 	mvn.w	r0, #21
    27cc:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    27ce:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    27d2:	e7b0      	b.n	2736 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    27d4:	4b13      	ldr	r3, [pc, #76]	; (2824 <baudrate_set+0x140>)
    27d6:	e7ae      	b.n	2736 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    27d8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    27dc:	e7ab      	b.n	2736 <baudrate_set+0x52>
	switch (baudrate) {
    27de:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    27e2:	e7a8      	b.n	2736 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    27e4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    27e8:	e7a5      	b.n	2736 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    27ea:	4b0f      	ldr	r3, [pc, #60]	; (2828 <baudrate_set+0x144>)
    27ec:	e7a3      	b.n	2736 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    27ee:	4b0f      	ldr	r3, [pc, #60]	; (282c <baudrate_set+0x148>)
    27f0:	e7a1      	b.n	2736 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    27f2:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    27f6:	e79e      	b.n	2736 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    27f8:	4b0d      	ldr	r3, [pc, #52]	; (2830 <baudrate_set+0x14c>)
    27fa:	e79c      	b.n	2736 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    27fc:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2800:	e799      	b.n	2736 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2802:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2806:	e796      	b.n	2736 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2808:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    280c:	e793      	b.n	2736 <baudrate_set+0x52>
	switch (baudrate) {
    280e:	f06f 0015 	mvn.w	r0, #21
}
    2812:	4770      	bx	lr
    2814:	0013b000 	.word	0x0013b000
    2818:	004ea000 	.word	0x004ea000
    281c:	000f4240 	.word	0x000f4240
    2820:	0003d090 	.word	0x0003d090
    2824:	00275000 	.word	0x00275000
    2828:	0075c000 	.word	0x0075c000
    282c:	003af000 	.word	0x003af000
    2830:	013a9000 	.word	0x013a9000

00002834 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2838:	4605      	mov	r5, r0
    283a:	460f      	mov	r7, r1
	return dev->data;
    283c:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2840:	f003 fccb 	bl	61da <k_is_in_isr>
    2844:	b920      	cbnz	r0, 2850 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    2846:	4b16      	ldr	r3, [pc, #88]	; (28a0 <uarte_nrfx_poll_out+0x6c>)
    2848:	781b      	ldrb	r3, [r3, #0]
    284a:	b1ab      	cbz	r3, 2878 <uarte_nrfx_poll_out+0x44>
    284c:	2300      	movs	r3, #0
    284e:	e000      	b.n	2852 <uarte_nrfx_poll_out+0x1e>
    2850:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    2852:	b19b      	cbz	r3, 287c <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    2854:	f04f 0320 	mov.w	r3, #32
    2858:	f3ef 8411 	mrs	r4, BASEPRI
    285c:	f383 8812 	msr	BASEPRI_MAX, r3
    2860:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    2864:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    2866:	4628      	mov	r0, r5
    2868:	f003 faa7 	bl	5dba <is_tx_ready>
    286c:	b950      	cbnz	r0, 2884 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    286e:	f384 8811 	msr	BASEPRI, r4
    2872:	f3bf 8f6f 	isb	sy
}
    2876:	e7ed      	b.n	2854 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2878:	2301      	movs	r3, #1
    287a:	e7ea      	b.n	2852 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    287c:	4628      	mov	r0, r5
    287e:	f003 faeb 	bl	5e58 <wait_tx_ready>
    2882:	4606      	mov	r6, r0
	}

	data->char_out = c;
    2884:	4641      	mov	r1, r8
    2886:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    288a:	2201      	movs	r2, #1
    288c:	4628      	mov	r0, r5
    288e:	f003 faae 	bl	5dee <tx_start>
	__asm__ volatile(
    2892:	f386 8811 	msr	BASEPRI, r6
    2896:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    289a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    289e:	bf00      	nop
    28a0:	20000999 	.word	0x20000999

000028a4 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    28a4:	b538      	push	{r3, r4, r5, lr}
    28a6:	4605      	mov	r5, r0
    28a8:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    28aa:	f101 0012 	add.w	r0, r1, #18
    28ae:	f000 fd67 	bl	3380 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    28b2:	4b0a      	ldr	r3, [pc, #40]	; (28dc <endtx_stoptx_ppi_init+0x38>)
    28b4:	4298      	cmp	r0, r3
    28b6:	d10e      	bne.n	28d6 <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    28b8:	7ca3      	ldrb	r3, [r4, #18]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    28ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    28be:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    28c2:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    28c6:	7ca2      	ldrb	r2, [r4, #18]
    28c8:	2301      	movs	r3, #1
    28ca:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    28cc:	4a04      	ldr	r2, [pc, #16]	; (28e0 <endtx_stoptx_ppi_init+0x3c>)
    28ce:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    28d2:	2000      	movs	r0, #0
}
    28d4:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    28d6:	f06f 0004 	mvn.w	r0, #4
    28da:	e7fb      	b.n	28d4 <endtx_stoptx_ppi_init+0x30>
    28dc:	0bad0000 	.word	0x0bad0000
    28e0:	50017000 	.word	0x50017000

000028e4 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    28e4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    28e8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    28ec:	4b01      	ldr	r3, [pc, #4]	; (28f4 <set_comparator+0x10>)
    28ee:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    28f2:	4770      	bx	lr
    28f4:	50015000 	.word	0x50015000

000028f8 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    28f8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    28fc:	4b01      	ldr	r3, [pc, #4]	; (2904 <get_comparator+0xc>)
    28fe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    2902:	4770      	bx	lr
    2904:	50015000 	.word	0x50015000

00002908 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2908:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    290c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    290e:	4a02      	ldr	r2, [pc, #8]	; (2918 <event_enable+0x10>)
    2910:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    2914:	4770      	bx	lr
    2916:	bf00      	nop
    2918:	50015000 	.word	0x50015000

0000291c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    291c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2920:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    2922:	4a02      	ldr	r2, [pc, #8]	; (292c <event_disable+0x10>)
    2924:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    2928:	4770      	bx	lr
    292a:	bf00      	nop
    292c:	50015000 	.word	0x50015000

00002930 <counter>:
     return p_reg->COUNTER;
    2930:	4b01      	ldr	r3, [pc, #4]	; (2938 <counter+0x8>)
    2932:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    2936:	4770      	bx	lr
    2938:	50015000 	.word	0x50015000

0000293c <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    293c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    293e:	2301      	movs	r3, #1
    2940:	4083      	lsls	r3, r0
    2942:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2944:	4a0d      	ldr	r2, [pc, #52]	; (297c <compare_int_lock+0x40>)
    2946:	e8d2 1fef 	ldaex	r1, [r2]
    294a:	ea01 0c04 	and.w	ip, r1, r4
    294e:	e8c2 cfee 	stlex	lr, ip, [r2]
    2952:	f1be 0f00 	cmp.w	lr, #0
    2956:	d1f6      	bne.n	2946 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2958:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    295c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    2960:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    2964:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    2968:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    296c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2970:	420b      	tst	r3, r1
}
    2972:	bf14      	ite	ne
    2974:	2001      	movne	r0, #1
    2976:	2000      	moveq	r0, #0
    2978:	bd10      	pop	{r4, pc}
    297a:	bf00      	nop
    297c:	20000934 	.word	0x20000934

00002980 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    2980:	b570      	push	{r4, r5, r6, lr}
    2982:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    2984:	f003 fafc 	bl	5f80 <full_int_lock>
    2988:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    298a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    298e:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    2990:	4a15      	ldr	r2, [pc, #84]	; (29e8 <channel_processing_check_and_clear+0x68>)
    2992:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    2996:	4213      	tst	r3, r2
    2998:	d105      	bne.n	29a6 <channel_processing_check_and_clear+0x26>
	bool result = false;
    299a:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    299c:	4628      	mov	r0, r5
    299e:	f003 faf8 	bl	5f92 <full_int_unlock>

	return result;
}
    29a2:	4630      	mov	r0, r6
    29a4:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    29a6:	2301      	movs	r3, #1
    29a8:	40a3      	lsls	r3, r4
    29aa:	43db      	mvns	r3, r3
    29ac:	4a0f      	ldr	r2, [pc, #60]	; (29ec <channel_processing_check_and_clear+0x6c>)
    29ae:	e8d2 1fef 	ldaex	r1, [r2]
    29b2:	ea01 0003 	and.w	r0, r1, r3
    29b6:	e8c2 0fe6 	stlex	r6, r0, [r2]
    29ba:	2e00      	cmp	r6, #0
    29bc:	d1f7      	bne.n	29ae <channel_processing_check_and_clear+0x2e>
    29be:	b959      	cbnz	r1, 29d8 <channel_processing_check_and_clear+0x58>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    29c0:	f104 0350 	add.w	r3, r4, #80	; 0x50
    29c4:	009b      	lsls	r3, r3, #2
    29c6:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    29c8:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    29cc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    29d0:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    29d2:	b113      	cbz	r3, 29da <channel_processing_check_and_clear+0x5a>
    29d4:	2301      	movs	r3, #1
    29d6:	e000      	b.n	29da <channel_processing_check_and_clear+0x5a>
    29d8:	2301      	movs	r3, #1
		if (result) {
    29da:	461e      	mov	r6, r3
    29dc:	2b00      	cmp	r3, #0
    29de:	d0dd      	beq.n	299c <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    29e0:	4620      	mov	r0, r4
    29e2:	f003 fabe 	bl	5f62 <event_clear>
    29e6:	e7d9      	b.n	299c <channel_processing_check_and_clear+0x1c>
    29e8:	50015000 	.word	0x50015000
    29ec:	20000930 	.word	0x20000930

000029f0 <compare_int_unlock>:
	if (key) {
    29f0:	b901      	cbnz	r1, 29f4 <compare_int_unlock+0x4>
}
    29f2:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    29f4:	2301      	movs	r3, #1
    29f6:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    29f8:	4a0e      	ldr	r2, [pc, #56]	; (2a34 <compare_int_unlock+0x44>)
    29fa:	e8d2 1fef 	ldaex	r1, [r2]
    29fe:	4319      	orrs	r1, r3
    2a00:	e8c2 1fec 	stlex	ip, r1, [r2]
    2a04:	f1bc 0f00 	cmp.w	ip, #0
    2a08:	d1f7      	bne.n	29fa <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2a0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2a0e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    2a10:	4a09      	ldr	r2, [pc, #36]	; (2a38 <compare_int_unlock+0x48>)
    2a12:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2a16:	4b09      	ldr	r3, [pc, #36]	; (2a3c <compare_int_unlock+0x4c>)
    2a18:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2a1c:	fa23 f000 	lsr.w	r0, r3, r0
    2a20:	f010 0f01 	tst.w	r0, #1
    2a24:	d0e5      	beq.n	29f2 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a26:	4b06      	ldr	r3, [pc, #24]	; (2a40 <compare_int_unlock+0x50>)
    2a28:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2a2c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    2a30:	e7df      	b.n	29f2 <compare_int_unlock+0x2>
    2a32:	bf00      	nop
    2a34:	20000934 	.word	0x20000934
    2a38:	50015000 	.word	0x50015000
    2a3c:	20000930 	.word	0x20000930
    2a40:	e000e100 	.word	0xe000e100

00002a44 <sys_clock_timeout_handler>:
{
    2a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a46:	4607      	mov	r7, r0
    2a48:	4614      	mov	r4, r2
    2a4a:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    2a4c:	4610      	mov	r0, r2
    2a4e:	4619      	mov	r1, r3
    2a50:	f003 fa93 	bl	5f7a <absolute_time_to_cc>
    2a54:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2a56:	4b15      	ldr	r3, [pc, #84]	; (2aac <sys_clock_timeout_handler+0x68>)
    2a58:	681a      	ldr	r2, [r3, #0]
    2a5a:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    2a5c:	601c      	str	r4, [r3, #0]
    2a5e:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2a60:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    2a64:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2a68:	d308      	bcc.n	2a7c <sys_clock_timeout_handler+0x38>
	return false;
    2a6a:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2a6c:	f002 fa04 	bl	4e78 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    2a70:	4638      	mov	r0, r7
    2a72:	f7ff ff41 	bl	28f8 <get_comparator>
    2a76:	42a8      	cmp	r0, r5
    2a78:	d00c      	beq.n	2a94 <sys_clock_timeout_handler+0x50>
}
    2a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2a7c:	4b0c      	ldr	r3, [pc, #48]	; (2ab0 <sys_clock_timeout_handler+0x6c>)
    2a7e:	6819      	ldr	r1, [r3, #0]
    2a80:	0a0b      	lsrs	r3, r1, #8
    2a82:	060a      	lsls	r2, r1, #24
    2a84:	1952      	adds	r2, r2, r5
    2a86:	f143 0300 	adc.w	r3, r3, #0
    2a8a:	490a      	ldr	r1, [pc, #40]	; (2ab4 <sys_clock_timeout_handler+0x70>)
    2a8c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    2a90:	2401      	movs	r4, #1
    2a92:	e7eb      	b.n	2a6c <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    2a94:	b11c      	cbz	r4, 2a9e <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    2a96:	4638      	mov	r0, r7
    2a98:	f7ff ff36 	bl	2908 <event_enable>
}
    2a9c:	e7ed      	b.n	2a7a <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    2a9e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    2aa2:	4638      	mov	r0, r7
    2aa4:	f7ff ff1e 	bl	28e4 <set_comparator>
    2aa8:	e7f5      	b.n	2a96 <sys_clock_timeout_handler+0x52>
    2aaa:	bf00      	nop
    2aac:	200001a0 	.word	0x200001a0
    2ab0:	20000938 	.word	0x20000938
    2ab4:	20000188 	.word	0x20000188

00002ab8 <z_nrf_rtc_timer_read>:
{
    2ab8:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    2aba:	4b0d      	ldr	r3, [pc, #52]	; (2af0 <z_nrf_rtc_timer_read+0x38>)
    2abc:	681b      	ldr	r3, [r3, #0]
    2abe:	0a1d      	lsrs	r5, r3, #8
    2ac0:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2ac2:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    2ac6:	f7ff ff33 	bl	2930 <counter>
    2aca:	4603      	mov	r3, r0
	val += cntr;
    2acc:	1820      	adds	r0, r4, r0
    2ace:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2ad6:	d20a      	bcs.n	2aee <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    2ad8:	4b06      	ldr	r3, [pc, #24]	; (2af4 <z_nrf_rtc_timer_read+0x3c>)
    2ada:	e9d3 2300 	ldrd	r2, r3, [r3]
    2ade:	4299      	cmp	r1, r3
    2ae0:	bf08      	it	eq
    2ae2:	4290      	cmpeq	r0, r2
    2ae4:	d203      	bcs.n	2aee <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    2ae6:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2aea:	f141 0100 	adc.w	r1, r1, #0
}
    2aee:	bd38      	pop	{r3, r4, r5, pc}
    2af0:	20000938 	.word	0x20000938
    2af4:	20000188 	.word	0x20000188

00002af8 <compare_set_nolocks>:
{
    2af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2afc:	4606      	mov	r6, r0
    2afe:	4614      	mov	r4, r2
    2b00:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    2b02:	4610      	mov	r0, r2
    2b04:	4619      	mov	r1, r3
    2b06:	f003 fa38 	bl	5f7a <absolute_time_to_cc>
    2b0a:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2b0c:	f7ff ffd4 	bl	2ab8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2b10:	42a9      	cmp	r1, r5
    2b12:	bf08      	it	eq
    2b14:	42a0      	cmpeq	r0, r4
    2b16:	d21e      	bcs.n	2b56 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    2b18:	ebb4 0800 	subs.w	r8, r4, r0
    2b1c:	eb65 0901 	sbc.w	r9, r5, r1
    2b20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    2b24:	2300      	movs	r3, #0
    2b26:	454b      	cmp	r3, r9
    2b28:	bf08      	it	eq
    2b2a:	4542      	cmpeq	r2, r8
    2b2c:	d32a      	bcc.n	2b84 <compare_set_nolocks+0x8c>
		if (target_time != cc_data[chan].target_time) {
    2b2e:	4b17      	ldr	r3, [pc, #92]	; (2b8c <compare_set_nolocks+0x94>)
    2b30:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    2b34:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2b38:	42ab      	cmp	r3, r5
    2b3a:	bf08      	it	eq
    2b3c:	42a2      	cmpeq	r2, r4
    2b3e:	d014      	beq.n	2b6a <compare_set_nolocks+0x72>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    2b40:	4639      	mov	r1, r7
    2b42:	4630      	mov	r0, r6
    2b44:	f003 fa2a 	bl	5f9c <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    2b48:	4639      	mov	r1, r7
    2b4a:	f003 fa06 	bl	5f5a <counter_sub>
    2b4e:	1824      	adds	r4, r4, r0
    2b50:	f145 0500 	adc.w	r5, r5, #0
    2b54:	e009      	b.n	2b6a <compare_set_nolocks+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    2b56:	2301      	movs	r3, #1
    2b58:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2b5a:	4a0d      	ldr	r2, [pc, #52]	; (2b90 <compare_set_nolocks+0x98>)
    2b5c:	e8d2 1fef 	ldaex	r1, [r2]
    2b60:	4319      	orrs	r1, r3
    2b62:	e8c2 1fe0 	stlex	r0, r1, [r2]
    2b66:	2800      	cmp	r0, #0
    2b68:	d1f8      	bne.n	2b5c <compare_set_nolocks+0x64>
	cc_data[chan].target_time = target_time;
    2b6a:	4b08      	ldr	r3, [pc, #32]	; (2b8c <compare_set_nolocks+0x94>)
    2b6c:	0132      	lsls	r2, r6, #4
    2b6e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    2b72:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    2b76:	9908      	ldr	r1, [sp, #32]
    2b78:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    2b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2b7c:	6073      	str	r3, [r6, #4]
	return ret;
    2b7e:	2000      	movs	r0, #0
}
    2b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    2b84:	f06f 0015 	mvn.w	r0, #21
    2b88:	e7fa      	b.n	2b80 <compare_set_nolocks+0x88>
    2b8a:	bf00      	nop
    2b8c:	20000190 	.word	0x20000190
    2b90:	20000930 	.word	0x20000930

00002b94 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    2b94:	b530      	push	{r4, r5, lr}
    2b96:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    2b98:	2300      	movs	r3, #0
    2b9a:	4a1e      	ldr	r2, [pc, #120]	; (2c14 <sys_clock_driver_init+0x80>)
    2b9c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	dd25      	ble.n	2bf0 <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
    2ba4:	4c1b      	ldr	r4, [pc, #108]	; (2c14 <sys_clock_driver_init+0x80>)
    2ba6:	2502      	movs	r5, #2
    2ba8:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2bac:	4b1a      	ldr	r3, [pc, #104]	; (2c18 <sys_clock_driver_init+0x84>)
    2bae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2bb2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2bb6:	2200      	movs	r2, #0
    2bb8:	2101      	movs	r1, #1
    2bba:	2015      	movs	r0, #21
    2bbc:	f7fe fd1a 	bl	15f4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2bc0:	2015      	movs	r0, #21
    2bc2:	f7fe fcf9 	bl	15b8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2bc6:	2301      	movs	r3, #1
    2bc8:	4a14      	ldr	r2, [pc, #80]	; (2c1c <sys_clock_driver_init+0x88>)
    2bca:	6013      	str	r3, [r2, #0]
    2bcc:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2bce:	4a14      	ldr	r2, [pc, #80]	; (2c20 <sys_clock_driver_init+0x8c>)
    2bd0:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2bd2:	2400      	movs	r4, #0
    2bd4:	9401      	str	r4, [sp, #4]
    2bd6:	4b13      	ldr	r3, [pc, #76]	; (2c24 <sys_clock_driver_init+0x90>)
    2bd8:	9300      	str	r3, [sp, #0]
    2bda:	4a13      	ldr	r2, [pc, #76]	; (2c28 <sys_clock_driver_init+0x94>)
    2bdc:	2300      	movs	r3, #0
    2bde:	4620      	mov	r0, r4
    2be0:	f003 fa17 	bl	6012 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2be4:	4628      	mov	r0, r5
    2be6:	f7ff fac3 	bl	2170 <z_nrf_clock_control_lf_on>

	return 0;
}
    2bea:	4620      	mov	r0, r4
    2bec:	b003      	add	sp, #12
    2bee:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2bf0:	4a0e      	ldr	r2, [pc, #56]	; (2c2c <sys_clock_driver_init+0x98>)
    2bf2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2bf6:	f04f 30ff 	mov.w	r0, #4294967295
    2bfa:	f04f 31ff 	mov.w	r1, #4294967295
    2bfe:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2c02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2c06:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    2c08:	4902      	ldr	r1, [pc, #8]	; (2c14 <sys_clock_driver_init+0x80>)
    2c0a:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2c0e:	3301      	adds	r3, #1
    2c10:	e7c6      	b.n	2ba0 <sys_clock_driver_init+0xc>
    2c12:	bf00      	nop
    2c14:	50015000 	.word	0x50015000
    2c18:	e000e100 	.word	0xe000e100
    2c1c:	50015008 	.word	0x50015008
    2c20:	20000934 	.word	0x20000934
    2c24:	00002a45 	.word	0x00002a45
    2c28:	007fffff 	.word	0x007fffff
    2c2c:	20000190 	.word	0x20000190

00002c30 <process_channel>:
{
    2c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2c34:	b082      	sub	sp, #8
    2c36:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    2c38:	f7ff fea2 	bl	2980 <channel_processing_check_and_clear>
    2c3c:	b910      	cbnz	r0, 2c44 <process_channel+0x14>
}
    2c3e:	b002      	add	sp, #8
    2c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    2c44:	f7ff ff38 	bl	2ab8 <z_nrf_rtc_timer_read>
    2c48:	4606      	mov	r6, r0
    2c4a:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    2c4c:	f003 f998 	bl	5f80 <full_int_lock>
    2c50:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    2c52:	4b13      	ldr	r3, [pc, #76]	; (2ca0 <process_channel+0x70>)
    2c54:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2c58:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    2c5c:	454f      	cmp	r7, r9
    2c5e:	bf08      	it	eq
    2c60:	4546      	cmpeq	r6, r8
    2c62:	d20b      	bcs.n	2c7c <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    2c64:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    2c66:	4650      	mov	r0, sl
    2c68:	f003 f993 	bl	5f92 <full_int_unlock>
		if (handler) {
    2c6c:	2e00      	cmp	r6, #0
    2c6e:	d0e6      	beq.n	2c3e <process_channel+0xe>
			handler(chan, expire_time, user_context);
    2c70:	9500      	str	r5, [sp, #0]
    2c72:	4642      	mov	r2, r8
    2c74:	464b      	mov	r3, r9
    2c76:	4620      	mov	r0, r4
    2c78:	47b0      	blx	r6
}
    2c7a:	e7e0      	b.n	2c3e <process_channel+0xe>
			handler = cc_data[chan].callback;
    2c7c:	4a08      	ldr	r2, [pc, #32]	; (2ca0 <process_channel+0x70>)
    2c7e:	0123      	lsls	r3, r4, #4
    2c80:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    2c84:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    2c86:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    2c88:	2000      	movs	r0, #0
    2c8a:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2c8c:	f04f 32ff 	mov.w	r2, #4294967295
    2c90:	f04f 33ff 	mov.w	r3, #4294967295
    2c94:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    2c98:	4620      	mov	r0, r4
    2c9a:	f7ff fe3f 	bl	291c <event_disable>
    2c9e:	e7e2      	b.n	2c66 <process_channel+0x36>
    2ca0:	20000190 	.word	0x20000190

00002ca4 <rtc_nrf_isr>:
{
    2ca4:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    2ca6:	4b0d      	ldr	r3, [pc, #52]	; (2cdc <rtc_nrf_isr+0x38>)
    2ca8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2cac:	f013 0f02 	tst.w	r3, #2
    2cb0:	d00a      	beq.n	2cc8 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2cb2:	4b0b      	ldr	r3, [pc, #44]	; (2ce0 <rtc_nrf_isr+0x3c>)
    2cb4:	681b      	ldr	r3, [r3, #0]
    2cb6:	b13b      	cbz	r3, 2cc8 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2cb8:	4b09      	ldr	r3, [pc, #36]	; (2ce0 <rtc_nrf_isr+0x3c>)
    2cba:	2200      	movs	r2, #0
    2cbc:	601a      	str	r2, [r3, #0]
    2cbe:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
    2cc0:	4a08      	ldr	r2, [pc, #32]	; (2ce4 <rtc_nrf_isr+0x40>)
    2cc2:	6813      	ldr	r3, [r2, #0]
    2cc4:	3301      	adds	r3, #1
    2cc6:	6013      	str	r3, [r2, #0]
{
    2cc8:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2cca:	2c00      	cmp	r4, #0
    2ccc:	dd00      	ble.n	2cd0 <rtc_nrf_isr+0x2c>
}
    2cce:	bd10      	pop	{r4, pc}
		process_channel(chan);
    2cd0:	4620      	mov	r0, r4
    2cd2:	f7ff ffad 	bl	2c30 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2cd6:	3401      	adds	r4, #1
    2cd8:	e7f7      	b.n	2cca <rtc_nrf_isr+0x26>
    2cda:	bf00      	nop
    2cdc:	50015000 	.word	0x50015000
    2ce0:	50015104 	.word	0x50015104
    2ce4:	20000938 	.word	0x20000938

00002ce8 <sys_clock_set_timeout>:
{
    2ce8:	b510      	push	{r4, lr}
    2cea:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2cec:	f1b0 3fff 	cmp.w	r0, #4294967295
    2cf0:	d007      	beq.n	2d02 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2cf2:	1e44      	subs	r4, r0, #1
    2cf4:	2c00      	cmp	r4, #0
    2cf6:	dd07      	ble.n	2d08 <sys_clock_set_timeout+0x20>
    2cf8:	4b11      	ldr	r3, [pc, #68]	; (2d40 <sys_clock_set_timeout+0x58>)
    2cfa:	429c      	cmp	r4, r3
    2cfc:	dd05      	ble.n	2d0a <sys_clock_set_timeout+0x22>
    2cfe:	4c11      	ldr	r4, [pc, #68]	; (2d44 <sys_clock_set_timeout+0x5c>)
    2d00:	e003      	b.n	2d0a <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2d02:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    2d06:	e7f4      	b.n	2cf2 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2d08:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2d0a:	f7ff fed5 	bl	2ab8 <z_nrf_rtc_timer_read>
    2d0e:	4b0e      	ldr	r3, [pc, #56]	; (2d48 <sys_clock_set_timeout+0x60>)
    2d10:	e9d3 2300 	ldrd	r2, r3, [r3]
    2d14:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    2d16:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2d1a:	d300      	bcc.n	2d1e <sys_clock_set_timeout+0x36>
		ticks = 0;
    2d1c:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2d1e:	4404      	add	r4, r0
    2d20:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
    2d22:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    2d26:	d300      	bcc.n	2d2a <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    2d28:	4c06      	ldr	r4, [pc, #24]	; (2d44 <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2d2a:	2000      	movs	r0, #0
    2d2c:	9001      	str	r0, [sp, #4]
    2d2e:	4907      	ldr	r1, [pc, #28]	; (2d4c <sys_clock_set_timeout+0x64>)
    2d30:	9100      	str	r1, [sp, #0]
    2d32:	1912      	adds	r2, r2, r4
    2d34:	f143 0300 	adc.w	r3, r3, #0
    2d38:	f003 f96b 	bl	6012 <compare_set>
}
    2d3c:	b002      	add	sp, #8
    2d3e:	bd10      	pop	{r4, pc}
    2d40:	007ffffe 	.word	0x007ffffe
    2d44:	007fffff 	.word	0x007fffff
    2d48:	200001a0 	.word	0x200001a0
    2d4c:	00002a45 	.word	0x00002a45

00002d50 <sys_clock_elapsed>:
{
    2d50:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2d52:	f7ff feb1 	bl	2ab8 <z_nrf_rtc_timer_read>
    2d56:	4b02      	ldr	r3, [pc, #8]	; (2d60 <sys_clock_elapsed+0x10>)
    2d58:	681b      	ldr	r3, [r3, #0]
}
    2d5a:	1ac0      	subs	r0, r0, r3
    2d5c:	bd08      	pop	{r3, pc}
    2d5e:	bf00      	nop
    2d60:	200001a0 	.word	0x200001a0

00002d64 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2d64:	4b08      	ldr	r3, [pc, #32]	; (2d88 <nrf53_errata_42+0x24>)
    2d66:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2d68:	3304      	adds	r3, #4
    2d6a:	681b      	ldr	r3, [r3, #0]
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    2d6c:	2a07      	cmp	r2, #7
    2d6e:	d001      	beq.n	2d74 <nrf53_errata_42+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    2d70:	2000      	movs	r0, #0
    2d72:	4770      	bx	lr
                    switch(var2)
    2d74:	3b02      	subs	r3, #2
    2d76:	2b00      	cmp	r3, #0
    2d78:	d804      	bhi.n	2d84 <nrf53_errata_42+0x20>
    2d7a:	e8df f003 	tbb	[pc, r3]
    2d7e:	01          	.byte	0x01
    2d7f:	00          	.byte	0x00
                if (var1 == 0x07)
    2d80:	2001      	movs	r0, #1
    2d82:	4770      	bx	lr
                            return false;
    2d84:	2000      	movs	r0, #0
    #endif
}
    2d86:	4770      	bx	lr
    2d88:	00ff0130 	.word	0x00ff0130

00002d8c <nrf53_errata_46>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2d8c:	4b0a      	ldr	r3, [pc, #40]	; (2db8 <nrf53_errata_46+0x2c>)
    2d8e:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2d90:	3304      	adds	r3, #4
    2d92:	681b      	ldr	r3, [r3, #0]
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    2d94:	2a07      	cmp	r2, #7
    2d96:	d001      	beq.n	2d9c <nrf53_errata_46+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    2d98:	2000      	movs	r0, #0
    2d9a:	4770      	bx	lr
                    switch(var2)
    2d9c:	2b04      	cmp	r3, #4
    2d9e:	d007      	beq.n	2db0 <nrf53_errata_46+0x24>
    2da0:	d808      	bhi.n	2db4 <nrf53_errata_46+0x28>
    2da2:	3b02      	subs	r3, #2
    2da4:	2b01      	cmp	r3, #1
    2da6:	d801      	bhi.n	2dac <nrf53_errata_46+0x20>
    2da8:	2001      	movs	r0, #1
    #endif
}
    2daa:	4770      	bx	lr
                            return false;
    2dac:	2000      	movs	r0, #0
    2dae:	4770      	bx	lr
                            return false;
    2db0:	2000      	movs	r0, #0
    2db2:	4770      	bx	lr
                            return false;
    2db4:	2000      	movs	r0, #0
    2db6:	4770      	bx	lr
    2db8:	00ff0130 	.word	0x00ff0130

00002dbc <nrf53_errata_49>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2dbc:	4b08      	ldr	r3, [pc, #32]	; (2de0 <nrf53_errata_49+0x24>)
    2dbe:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2dc0:	3304      	adds	r3, #4
    2dc2:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    2dc4:	2a07      	cmp	r2, #7
    2dc6:	d001      	beq.n	2dcc <nrf53_errata_49+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    2dc8:	2000      	movs	r0, #0
    2dca:	4770      	bx	lr
                    switch(var2)
    2dcc:	3b02      	subs	r3, #2
    2dce:	2b00      	cmp	r3, #0
    2dd0:	d804      	bhi.n	2ddc <nrf53_errata_49+0x20>
    2dd2:	e8df f003 	tbb	[pc, r3]
    2dd6:	01          	.byte	0x01
    2dd7:	00          	.byte	0x00
                if (var1 == 0x07)
    2dd8:	2001      	movs	r0, #1
    2dda:	4770      	bx	lr
                            return false;
    2ddc:	2000      	movs	r0, #0
    #endif
}
    2dde:	4770      	bx	lr
    2de0:	00ff0130 	.word	0x00ff0130

00002de4 <nrf53_errata_55>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2de4:	4b04      	ldr	r3, [pc, #16]	; (2df8 <nrf53_errata_55+0x14>)
    2de6:	681b      	ldr	r3, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2de8:	4a04      	ldr	r2, [pc, #16]	; (2dfc <nrf53_errata_55+0x18>)
    2dea:	6812      	ldr	r2, [r2, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    2dec:	2b07      	cmp	r3, #7
    2dee:	d001      	beq.n	2df4 <nrf53_errata_55+0x10>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    2df0:	2000      	movs	r0, #0
    2df2:	4770      	bx	lr
                            return true;
    2df4:	2001      	movs	r0, #1
    #endif
}
    2df6:	4770      	bx	lr
    2df8:	00ff0130 	.word	0x00ff0130
    2dfc:	00ff0134 	.word	0x00ff0134

00002e00 <nrf53_errata_64>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2e00:	4b08      	ldr	r3, [pc, #32]	; (2e24 <nrf53_errata_64+0x24>)
    2e02:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2e04:	3304      	adds	r3, #4
    2e06:	681b      	ldr	r3, [r3, #0]
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    2e08:	2a07      	cmp	r2, #7
    2e0a:	d001      	beq.n	2e10 <nrf53_errata_64+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    2e0c:	2000      	movs	r0, #0
    2e0e:	4770      	bx	lr
                    switch(var2)
    2e10:	3b02      	subs	r3, #2
    2e12:	2b00      	cmp	r3, #0
    2e14:	d804      	bhi.n	2e20 <nrf53_errata_64+0x20>
    2e16:	e8df f003 	tbb	[pc, r3]
    2e1a:	01          	.byte	0x01
    2e1b:	00          	.byte	0x00
                if (var1 == 0x07)
    2e1c:	2001      	movs	r0, #1
    2e1e:	4770      	bx	lr
                            return false;
    2e20:	2000      	movs	r0, #0
    #endif
}
    2e22:	4770      	bx	lr
    2e24:	00ff0130 	.word	0x00ff0130

00002e28 <nrf53_errata_69>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2e28:	4b08      	ldr	r3, [pc, #32]	; (2e4c <nrf53_errata_69+0x24>)
    2e2a:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2e2c:	3304      	adds	r3, #4
    2e2e:	681b      	ldr	r3, [r3, #0]
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    2e30:	2a07      	cmp	r2, #7
    2e32:	d001      	beq.n	2e38 <nrf53_errata_69+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    2e34:	2000      	movs	r0, #0
    2e36:	4770      	bx	lr
                    switch(var2)
    2e38:	3b02      	subs	r3, #2
    2e3a:	2b00      	cmp	r3, #0
    2e3c:	d804      	bhi.n	2e48 <nrf53_errata_69+0x20>
    2e3e:	e8df f003 	tbb	[pc, r3]
    2e42:	01          	.byte	0x01
    2e43:	00          	.byte	0x00
                if (var1 == 0x07)
    2e44:	2001      	movs	r0, #1
    2e46:	4770      	bx	lr
                            return false;
    2e48:	2000      	movs	r0, #0
    #endif
}
    2e4a:	4770      	bx	lr
    2e4c:	00ff0130 	.word	0x00ff0130

00002e50 <nrf53_errata_97>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2e50:	4b08      	ldr	r3, [pc, #32]	; (2e74 <nrf53_errata_97+0x24>)
    2e52:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2e54:	3304      	adds	r3, #4
    2e56:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    2e58:	2a07      	cmp	r2, #7
    2e5a:	d001      	beq.n	2e60 <nrf53_errata_97+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    2e5c:	2000      	movs	r0, #0
    2e5e:	4770      	bx	lr
                    switch(var2)
    2e60:	3b02      	subs	r3, #2
    2e62:	2b00      	cmp	r3, #0
    2e64:	d804      	bhi.n	2e70 <nrf53_errata_97+0x20>
    2e66:	e8df f003 	tbb	[pc, r3]
    2e6a:	01          	.byte	0x01
    2e6b:	00          	.byte	0x00
                if (var1 == 0x07)
    2e6c:	2001      	movs	r0, #1
    2e6e:	4770      	bx	lr
                            return false;
    2e70:	2000      	movs	r0, #0
    #endif
}
    2e72:	4770      	bx	lr
    2e74:	00ff0130 	.word	0x00ff0130

00002e78 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    2e78:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2e7c:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    2e80:	f002 0203 	and.w	r2, r2, #3
    2e84:	4b02      	ldr	r3, [pc, #8]	; (2e90 <SystemCoreClockUpdate+0x18>)
    2e86:	40d3      	lsrs	r3, r2
    2e88:	4a02      	ldr	r2, [pc, #8]	; (2e94 <SystemCoreClockUpdate+0x1c>)
    2e8a:	6013      	str	r3, [r2, #0]
#endif
}
    2e8c:	4770      	bx	lr
    2e8e:	bf00      	nop
    2e90:	07a12000 	.word	0x07a12000
    2e94:	2000003c 	.word	0x2000003c

00002e98 <SystemInit>:

void SystemInit(void)
{
    2e98:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    2e9a:	f7ff ffd9 	bl	2e50 <nrf53_errata_97>
    2e9e:	b158      	cbz	r0, 2eb8 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    2ea0:	4b3b      	ldr	r3, [pc, #236]	; (2f90 <SystemInit+0xf8>)
    2ea2:	681b      	ldr	r3, [r3, #0]
    2ea4:	b943      	cbnz	r3, 2eb8 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    2ea6:	4b3a      	ldr	r3, [pc, #232]	; (2f90 <SystemInit+0xf8>)
    2ea8:	220d      	movs	r2, #13
    2eaa:	601a      	str	r2, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    2eac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    2eb0:	2201      	movs	r2, #1
    2eb2:	601a      	str	r2, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    2eb4:	2200      	movs	r2, #0
    2eb6:	601a      	str	r2, [r3, #0]
{
    2eb8:	2200      	movs	r2, #0
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    2eba:	2a1f      	cmp	r2, #31
    2ebc:	d815      	bhi.n	2eea <SystemInit+0x52>
    2ebe:	f102 0360 	add.w	r3, r2, #96	; 0x60
    2ec2:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2ec6:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    2eca:	f1b3 3fff 	cmp.w	r3, #4294967295
    2ece:	d00c      	beq.n	2eea <SystemInit+0x52>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2ed0:	f102 0360 	add.w	r3, r2, #96	; 0x60
    2ed4:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2ed8:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    2edc:	00db      	lsls	r3, r3, #3
    2ede:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    2ee2:	685b      	ldr	r3, [r3, #4]
    2ee4:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    2ee6:	3201      	adds	r2, #1
    2ee8:	e7e7      	b.n	2eba <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    2eea:	f7ff ff89 	bl	2e00 <nrf53_errata_64>
    2eee:	b128      	cbz	r0, 2efc <SystemInit+0x64>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    2ef0:	4b28      	ldr	r3, [pc, #160]	; (2f94 <SystemInit+0xfc>)
    2ef2:	2229      	movs	r2, #41	; 0x29
    2ef4:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    2ef6:	3330      	adds	r3, #48	; 0x30
    2ef8:	2203      	movs	r2, #3
    2efa:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    2efc:	f7ff ff32 	bl	2d64 <nrf53_errata_42>
    2f00:	b138      	cbz	r0, 2f12 <SystemInit+0x7a>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    2f02:	4b25      	ldr	r3, [pc, #148]	; (2f98 <SystemInit+0x100>)
    2f04:	4a25      	ldr	r2, [pc, #148]	; (2f9c <SystemInit+0x104>)
    2f06:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    2f08:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2f0c:	2201      	movs	r2, #1
    2f0e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    2f12:	f7ff ff3b 	bl	2d8c <nrf53_errata_46>
    2f16:	b110      	cbz	r0, 2f1e <SystemInit+0x86>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    2f18:	4b21      	ldr	r3, [pc, #132]	; (2fa0 <SystemInit+0x108>)
    2f1a:	2200      	movs	r2, #0
    2f1c:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    2f1e:	f7ff ff4d 	bl	2dbc <nrf53_errata_49>
    2f22:	b168      	cbz	r0, 2f40 <SystemInit+0xa8>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    2f24:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2f28:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2f2c:	f013 0f01 	tst.w	r3, #1
    2f30:	d006      	beq.n	2f40 <SystemInit+0xa8>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    2f32:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2f36:	2200      	movs	r2, #0
    2f38:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    2f3c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
    2f40:	f7ff ff50 	bl	2de4 <nrf53_errata_55>
    2f44:	b160      	cbz	r0, 2f60 <SystemInit+0xc8>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    2f46:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2f4a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2f4e:	f013 0f01 	tst.w	r3, #1
    2f52:	d005      	beq.n	2f60 <SystemInit+0xc8>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    2f54:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2f58:	f06f 0201 	mvn.w	r2, #1
    2f5c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    2f60:	f7ff ff62 	bl	2e28 <nrf53_errata_69>
    2f64:	b110      	cbz	r0, 2f6c <SystemInit+0xd4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    2f66:	4b0b      	ldr	r3, [pc, #44]	; (2f94 <SystemInit+0xfc>)
    2f68:	2265      	movs	r2, #101	; 0x65
    2f6a:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    2f6c:	4a0d      	ldr	r2, [pc, #52]	; (2fa4 <SystemInit+0x10c>)
    2f6e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2f72:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2f76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    2f7a:	4a0b      	ldr	r2, [pc, #44]	; (2fa8 <SystemInit+0x110>)
    2f7c:	6811      	ldr	r1, [r2, #0]
    2f7e:	4b0b      	ldr	r3, [pc, #44]	; (2fac <SystemInit+0x114>)
    2f80:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    2f84:	69d2      	ldr	r2, [r2, #28]
    2f86:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
    2f8a:	f7ff ff75 	bl	2e78 <SystemCoreClockUpdate>
}
    2f8e:	bd08      	pop	{r3, pc}
    2f90:	50004a20 	.word	0x50004a20
    2f94:	5000470c 	.word	0x5000470c
    2f98:	50039530 	.word	0x50039530
    2f9c:	beef0044 	.word	0xbeef0044
    2fa0:	5003254c 	.word	0x5003254c
    2fa4:	e000ed00 	.word	0xe000ed00
    2fa8:	00ff8000 	.word	0x00ff8000
    2fac:	50006000 	.word	0x50006000

00002fb0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2fb0:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    2fb2:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    2fb4:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
    2fb8:	f1d3 031f 	rsbs	r3, r3, #31
    2fbc:	d411      	bmi.n	2fe2 <nrfx_flag32_alloc+0x32>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2fbe:	2201      	movs	r2, #1
    2fc0:	409a      	lsls	r2, r3
    2fc2:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2fc6:	e8d0 5fef 	ldaex	r5, [r0]
    2fca:	42a5      	cmp	r5, r4
    2fcc:	d104      	bne.n	2fd8 <nrfx_flag32_alloc+0x28>
    2fce:	e8c0 2fec 	stlex	ip, r2, [r0]
    2fd2:	f1bc 0f00 	cmp.w	ip, #0
    2fd6:	d1f6      	bne.n	2fc6 <nrfx_flag32_alloc+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2fd8:	d1eb      	bne.n	2fb2 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    2fda:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
    2fdc:	4802      	ldr	r0, [pc, #8]	; (2fe8 <nrfx_flag32_alloc+0x38>)
}
    2fde:	bc30      	pop	{r4, r5}
    2fe0:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
    2fe2:	4802      	ldr	r0, [pc, #8]	; (2fec <nrfx_flag32_alloc+0x3c>)
    2fe4:	e7fb      	b.n	2fde <nrfx_flag32_alloc+0x2e>
    2fe6:	bf00      	nop
    2fe8:	0bad0000 	.word	0x0bad0000
    2fec:	0bad0002 	.word	0x0bad0002

00002ff0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    2ff0:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2ff2:	6803      	ldr	r3, [r0, #0]
    2ff4:	460c      	mov	r4, r1
    2ff6:	fa23 f101 	lsr.w	r1, r3, r1
    2ffa:	f011 0f01 	tst.w	r1, #1
    2ffe:	d110      	bne.n	3022 <nrfx_flag32_free+0x32>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    3000:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    3002:	2301      	movs	r3, #1
    3004:	40a3      	lsls	r3, r4
    3006:	4313      	orrs	r3, r2
    3008:	e8d0 1fef 	ldaex	r1, [r0]
    300c:	4291      	cmp	r1, r2
    300e:	d104      	bne.n	301a <nrfx_flag32_free+0x2a>
    3010:	e8c0 3fec 	stlex	ip, r3, [r0]
    3014:	f1bc 0f00 	cmp.w	ip, #0
    3018:	d1f6      	bne.n	3008 <nrfx_flag32_free+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    301a:	d1f1      	bne.n	3000 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    301c:	4802      	ldr	r0, [pc, #8]	; (3028 <nrfx_flag32_free+0x38>)
}
    301e:	bc10      	pop	{r4}
    3020:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
    3022:	4802      	ldr	r0, [pc, #8]	; (302c <nrfx_flag32_free+0x3c>)
    3024:	e7fb      	b.n	301e <nrfx_flag32_free+0x2e>
    3026:	bf00      	nop
    3028:	0bad0000 	.word	0x0bad0000
    302c:	0bad0004 	.word	0x0bad0004

00003030 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3030:	4b05      	ldr	r3, [pc, #20]	; (3048 <nrfx_clock_init+0x18>)
    3032:	791b      	ldrb	r3, [r3, #4]
    3034:	b92b      	cbnz	r3, 3042 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    3036:	4b04      	ldr	r3, [pc, #16]	; (3048 <nrfx_clock_init+0x18>)
    3038:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    303a:	2201      	movs	r2, #1
    303c:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    303e:	4803      	ldr	r0, [pc, #12]	; (304c <nrfx_clock_init+0x1c>)
    3040:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3042:	4803      	ldr	r0, [pc, #12]	; (3050 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3044:	4770      	bx	lr
    3046:	bf00      	nop
    3048:	2000093c 	.word	0x2000093c
    304c:	0bad0000 	.word	0x0bad0000
    3050:	0bad000c 	.word	0x0bad000c

00003054 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    3054:	2803      	cmp	r0, #3
    3056:	d84e      	bhi.n	30f6 <nrfx_clock_start+0xa2>
    3058:	e8df f000 	tbb	[pc, r0]
    305c:	40322702 	.word	0x40322702
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3060:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    3064:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    3068:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    306c:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    3070:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    3074:	d111      	bne.n	309a <nrfx_clock_start+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3076:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    307a:	2201      	movs	r2, #1
    307c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3080:	4b1d      	ldr	r3, [pc, #116]	; (30f8 <nrfx_clock_start+0xa4>)
    3082:	2200      	movs	r2, #0
    3084:	601a      	str	r2, [r3, #0]
    3086:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3088:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    308c:	2202      	movs	r2, #2
    308e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3092:	3308      	adds	r3, #8
    3094:	2201      	movs	r2, #1
    3096:	601a      	str	r2, [r3, #0]
}
    3098:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    309a:	2b02      	cmp	r3, #2
    309c:	d1eb      	bne.n	3076 <nrfx_clock_start+0x22>
    p_reg->LFCLKSRC = (uint32_t)(source);
    309e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30a2:	2202      	movs	r2, #2
    30a4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    30a8:	e7ea      	b.n	3080 <nrfx_clock_start+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30aa:	4b14      	ldr	r3, [pc, #80]	; (30fc <nrfx_clock_start+0xa8>)
    30ac:	2200      	movs	r2, #0
    30ae:	601a      	str	r2, [r3, #0]
    30b0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    30b2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30b6:	2201      	movs	r2, #1
    30b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30bc:	601a      	str	r2, [r3, #0]
}
    30be:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30c0:	4b0f      	ldr	r3, [pc, #60]	; (3100 <nrfx_clock_start+0xac>)
    30c2:	2200      	movs	r2, #0
    30c4:	601a      	str	r2, [r3, #0]
    30c6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    30c8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30cc:	f44f 7200 	mov.w	r2, #512	; 0x200
    30d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30d4:	3320      	adds	r3, #32
    30d6:	2201      	movs	r2, #1
    30d8:	601a      	str	r2, [r3, #0]
}
    30da:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30dc:	4b09      	ldr	r3, [pc, #36]	; (3104 <nrfx_clock_start+0xb0>)
    30de:	2200      	movs	r2, #0
    30e0:	601a      	str	r2, [r3, #0]
    30e2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    30e4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30e8:	f44f 7280 	mov.w	r2, #256	; 0x100
    30ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30f0:	3318      	adds	r3, #24
    30f2:	2201      	movs	r2, #1
    30f4:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    30f6:	4770      	bx	lr
    30f8:	50005104 	.word	0x50005104
    30fc:	50005100 	.word	0x50005100
    3100:	50005124 	.word	0x50005124
    3104:	50005120 	.word	0x50005120

00003108 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    3108:	b570      	push	{r4, r5, r6, lr}
    310a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    310c:	2803      	cmp	r0, #3
    310e:	f200 80cd 	bhi.w	32ac <nrfx_clock_stop+0x1a4>
    3112:	e8df f000 	tbb	[pc, r0]
    3116:	1402      	.short	0x1402
    3118:	3021      	.short	0x3021
    p_reg->INTENCLR = mask;
    311a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    311e:	2202      	movs	r2, #2
    3120:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3124:	f503 7382 	add.w	r3, r3, #260	; 0x104
    3128:	2200      	movs	r2, #0
    312a:	601a      	str	r2, [r3, #0]
    312c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    312e:	4b60      	ldr	r3, [pc, #384]	; (32b0 <nrfx_clock_stop+0x1a8>)
    3130:	2201      	movs	r2, #1
    3132:	601a      	str	r2, [r3, #0]
            NRFX_ASSERT(0);
            return;
    }

    bool stopped;
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    3134:	2c01      	cmp	r4, #1
    3136:	d02d      	beq.n	3194 <nrfx_clock_stop+0x8c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3138:	f242 7510 	movw	r5, #10000	; 0x2710
    313c:	e0a1      	b.n	3282 <nrfx_clock_stop+0x17a>
    p_reg->INTENCLR = mask;
    313e:	2301      	movs	r3, #1
    3140:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    3144:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3148:	f502 7280 	add.w	r2, r2, #256	; 0x100
    314c:	2100      	movs	r1, #0
    314e:	6011      	str	r1, [r2, #0]
    3150:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3152:	4a58      	ldr	r2, [pc, #352]	; (32b4 <nrfx_clock_stop+0x1ac>)
    3154:	6013      	str	r3, [r2, #0]
}
    3156:	e7ed      	b.n	3134 <nrfx_clock_stop+0x2c>
    p_reg->INTENCLR = mask;
    3158:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    315c:	f44f 7200 	mov.w	r2, #512	; 0x200
    3160:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3164:	f503 7392 	add.w	r3, r3, #292	; 0x124
    3168:	2200      	movs	r2, #0
    316a:	601a      	str	r2, [r3, #0]
    316c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    316e:	4b52      	ldr	r3, [pc, #328]	; (32b8 <nrfx_clock_stop+0x1b0>)
    3170:	2201      	movs	r2, #1
    3172:	601a      	str	r2, [r3, #0]
}
    3174:	e7de      	b.n	3134 <nrfx_clock_stop+0x2c>
    p_reg->INTENCLR = mask;
    3176:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    317a:	f44f 7280 	mov.w	r2, #256	; 0x100
    317e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3182:	f503 7390 	add.w	r3, r3, #288	; 0x120
    3186:	2200      	movs	r2, #0
    3188:	601a      	str	r2, [r3, #0]
    318a:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    318c:	4b4b      	ldr	r3, [pc, #300]	; (32bc <nrfx_clock_stop+0x1b4>)
    318e:	2201      	movs	r2, #1
    3190:	601a      	str	r2, [r3, #0]
}
    3192:	e7cf      	b.n	3134 <nrfx_clock_stop+0x2c>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3194:	4626      	mov	r6, r4
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3196:	f242 7510 	movw	r5, #10000	; 0x2710
    319a:	e035      	b.n	3208 <nrfx_clock_stop+0x100>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    319c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    31a0:	f8d3 6418 	ldr.w	r6, [r3, #1048]	; 0x418
    31a4:	f006 0603 	and.w	r6, r6, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    31a8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    31ac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    31b0:	d13a      	bne.n	3228 <nrfx_clock_stop+0x120>
    return false;
    31b2:	2300      	movs	r3, #0
    31b4:	e01f      	b.n	31f6 <nrfx_clock_stop+0xee>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    31b6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    31ba:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
    31be:	f006 0601 	and.w	r6, r6, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    31c2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    31c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    31ca:	d12f      	bne.n	322c <nrfx_clock_stop+0x124>
    return false;
    31cc:	2300      	movs	r3, #0
    31ce:	e012      	b.n	31f6 <nrfx_clock_stop+0xee>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    31d0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    31d4:	f8d3 645c 	ldr.w	r6, [r3, #1116]	; 0x45c
    31d8:	f006 0601 	and.w	r6, r6, #1
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    31dc:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
    31e0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    31e4:	d124      	bne.n	3230 <nrfx_clock_stop+0x128>
    return false;
    31e6:	2300      	movs	r3, #0
    31e8:	e005      	b.n	31f6 <nrfx_clock_stop+0xee>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    31ea:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    31ee:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
    31f2:	f3c3 4300 	ubfx	r3, r3, #16, #1
    31f6:	2b00      	cmp	r3, #0
    31f8:	d058      	beq.n	32ac <nrfx_clock_stop+0x1a4>
    31fa:	2e01      	cmp	r6, #1
    31fc:	d156      	bne.n	32ac <nrfx_clock_stop+0x1a4>
    31fe:	2001      	movs	r0, #1
    3200:	f002 ff35 	bl	606e <nrfx_busy_wait>
    3204:	3d01      	subs	r5, #1
    3206:	d051      	beq.n	32ac <nrfx_clock_stop+0x1a4>
    switch (domain)
    3208:	2c03      	cmp	r4, #3
    320a:	d80b      	bhi.n	3224 <nrfx_clock_stop+0x11c>
    320c:	a301      	add	r3, pc, #4	; (adr r3, 3214 <nrfx_clock_stop+0x10c>)
    320e:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    3212:	bf00      	nop
    3214:	0000319d 	.word	0x0000319d
    3218:	000031b7 	.word	0x000031b7
    321c:	000031d1 	.word	0x000031d1
    3220:	000031eb 	.word	0x000031eb
    3224:	2300      	movs	r3, #0
    3226:	e7e6      	b.n	31f6 <nrfx_clock_stop+0xee>
                return true;
    3228:	2301      	movs	r3, #1
    322a:	e7e4      	b.n	31f6 <nrfx_clock_stop+0xee>
                return true;
    322c:	2301      	movs	r3, #1
    322e:	e7e2      	b.n	31f6 <nrfx_clock_stop+0xee>
                return true;
    3230:	2301      	movs	r3, #1
    3232:	e7e0      	b.n	31f6 <nrfx_clock_stop+0xee>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3234:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3238:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    323c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3240:	d12e      	bne.n	32a0 <nrfx_clock_stop+0x198>
    return false;
    3242:	2300      	movs	r3, #0
    3244:	e017      	b.n	3276 <nrfx_clock_stop+0x16e>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3246:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    324a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    324e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3252:	d127      	bne.n	32a4 <nrfx_clock_stop+0x19c>
    return false;
    3254:	2300      	movs	r3, #0
    3256:	e00e      	b.n	3276 <nrfx_clock_stop+0x16e>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    3258:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    325c:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
    3260:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3264:	d120      	bne.n	32a8 <nrfx_clock_stop+0x1a0>
    return false;
    3266:	2300      	movs	r3, #0
    3268:	e005      	b.n	3276 <nrfx_clock_stop+0x16e>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    326a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    326e:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
    3272:	f3c3 4300 	ubfx	r3, r3, #16, #1
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3276:	b1cb      	cbz	r3, 32ac <nrfx_clock_stop+0x1a4>
    3278:	2001      	movs	r0, #1
    327a:	f002 fef8 	bl	606e <nrfx_busy_wait>
    327e:	3d01      	subs	r5, #1
    3280:	d014      	beq.n	32ac <nrfx_clock_stop+0x1a4>
    switch (domain)
    3282:	2c03      	cmp	r4, #3
    3284:	d80a      	bhi.n	329c <nrfx_clock_stop+0x194>
    3286:	a301      	add	r3, pc, #4	; (adr r3, 328c <nrfx_clock_stop+0x184>)
    3288:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    328c:	00003235 	.word	0x00003235
    3290:	00003247 	.word	0x00003247
    3294:	00003259 	.word	0x00003259
    3298:	0000326b 	.word	0x0000326b
    329c:	2300      	movs	r3, #0
    329e:	e7ea      	b.n	3276 <nrfx_clock_stop+0x16e>
                return true;
    32a0:	2301      	movs	r3, #1
    32a2:	e7e8      	b.n	3276 <nrfx_clock_stop+0x16e>
                return true;
    32a4:	2301      	movs	r3, #1
    32a6:	e7e6      	b.n	3276 <nrfx_clock_stop+0x16e>
                return true;
    32a8:	2301      	movs	r3, #1
    32aa:	e7e4      	b.n	3276 <nrfx_clock_stop+0x16e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    32ac:	bd70      	pop	{r4, r5, r6, pc}
    32ae:	bf00      	nop
    32b0:	5000500c 	.word	0x5000500c
    32b4:	50005004 	.word	0x50005004
    32b8:	50005024 	.word	0x50005024
    32bc:	5000501c 	.word	0x5000501c

000032c0 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    32c0:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    32c2:	4b2a      	ldr	r3, [pc, #168]	; (336c <nrfx_power_clock_irq_handler+0xac>)
    32c4:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    32c6:	b15b      	cbz	r3, 32e0 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    32c8:	4b28      	ldr	r3, [pc, #160]	; (336c <nrfx_power_clock_irq_handler+0xac>)
    32ca:	2000      	movs	r0, #0
    32cc:	6018      	str	r0, [r3, #0]
    32ce:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    32d0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    32d4:	2201      	movs	r2, #1
    32d6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    32da:	4b25      	ldr	r3, [pc, #148]	; (3370 <nrfx_power_clock_irq_handler+0xb0>)
    32dc:	681b      	ldr	r3, [r3, #0]
    32de:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    32e0:	4b24      	ldr	r3, [pc, #144]	; (3374 <nrfx_power_clock_irq_handler+0xb4>)
    32e2:	681b      	ldr	r3, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    32e4:	b1b3      	cbz	r3, 3314 <nrfx_power_clock_irq_handler+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    32e6:	4b23      	ldr	r3, [pc, #140]	; (3374 <nrfx_power_clock_irq_handler+0xb4>)
    32e8:	2200      	movs	r2, #0
    32ea:	601a      	str	r2, [r3, #0]
    32ec:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    32ee:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    32f2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    32f6:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    32fa:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    32fe:	2b01      	cmp	r3, #1
    3300:	d02b      	beq.n	335a <nrfx_power_clock_irq_handler+0x9a>
    p_reg->INTENCLR = mask;
    3302:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3306:	2202      	movs	r2, #2
    3308:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    330c:	4b18      	ldr	r3, [pc, #96]	; (3370 <nrfx_power_clock_irq_handler+0xb0>)
    330e:	681b      	ldr	r3, [r3, #0]
    3310:	2001      	movs	r0, #1
    3312:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3314:	4b18      	ldr	r3, [pc, #96]	; (3378 <nrfx_power_clock_irq_handler+0xb8>)
    3316:	681b      	ldr	r3, [r3, #0]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    3318:	b16b      	cbz	r3, 3336 <nrfx_power_clock_irq_handler+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    331a:	4b17      	ldr	r3, [pc, #92]	; (3378 <nrfx_power_clock_irq_handler+0xb8>)
    331c:	2200      	movs	r2, #0
    331e:	601a      	str	r2, [r3, #0]
    3320:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    3322:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3326:	f44f 7280 	mov.w	r2, #256	; 0x100
    332a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    332e:	4b10      	ldr	r3, [pc, #64]	; (3370 <nrfx_power_clock_irq_handler+0xb0>)
    3330:	681b      	ldr	r3, [r3, #0]
    3332:	2004      	movs	r0, #4
    3334:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3336:	4b11      	ldr	r3, [pc, #68]	; (337c <nrfx_power_clock_irq_handler+0xbc>)
    3338:	681b      	ldr	r3, [r3, #0]
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    333a:	b16b      	cbz	r3, 3358 <nrfx_power_clock_irq_handler+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    333c:	4b0f      	ldr	r3, [pc, #60]	; (337c <nrfx_power_clock_irq_handler+0xbc>)
    333e:	2200      	movs	r2, #0
    3340:	601a      	str	r2, [r3, #0]
    3342:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    3344:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3348:	f44f 7200 	mov.w	r2, #512	; 0x200
    334c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    3350:	4b07      	ldr	r3, [pc, #28]	; (3370 <nrfx_power_clock_irq_handler+0xb0>)
    3352:	681b      	ldr	r3, [r3, #0]
    3354:	2005      	movs	r0, #5
    3356:	4798      	blx	r3
    }
#endif
}
    3358:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    335a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    335e:	2202      	movs	r2, #2
    3360:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3364:	3308      	adds	r3, #8
    3366:	2201      	movs	r2, #1
    3368:	601a      	str	r2, [r3, #0]
}
    336a:	e7d3      	b.n	3314 <nrfx_power_clock_irq_handler+0x54>
    336c:	50005100 	.word	0x50005100
    3370:	2000093c 	.word	0x2000093c
    3374:	50005104 	.word	0x50005104
    3378:	50005120 	.word	0x50005120
    337c:	50005124 	.word	0x50005124

00003380 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    3380:	b508      	push	{r3, lr}
    3382:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    3384:	4801      	ldr	r0, [pc, #4]	; (338c <nrfx_dppi_channel_alloc+0xc>)
    3386:	f7ff fe13 	bl	2fb0 <nrfx_flag32_alloc>
}
    338a:	bd08      	pop	{r3, pc}
    338c:	20000040 	.word	0x20000040

00003390 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3390:	3008      	adds	r0, #8
    3392:	4b03      	ldr	r3, [pc, #12]	; (33a0 <pin_in_use+0x10>)
    3394:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3398:	f000 0001 	and.w	r0, r0, #1
    339c:	4770      	bx	lr
    339e:	bf00      	nop
    33a0:	20000044 	.word	0x20000044

000033a4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    33a4:	3008      	adds	r0, #8
    33a6:	4b03      	ldr	r3, [pc, #12]	; (33b4 <pin_in_use_by_te+0x10>)
    33a8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    33ac:	f3c0 1040 	ubfx	r0, r0, #5, #1
    33b0:	4770      	bx	lr
    33b2:	bf00      	nop
    33b4:	20000044 	.word	0x20000044

000033b8 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    33b8:	3008      	adds	r0, #8
    33ba:	4b04      	ldr	r3, [pc, #16]	; (33cc <pin_has_trigger+0x14>)
    33bc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    33c0:	f010 001c 	ands.w	r0, r0, #28
    33c4:	bf18      	it	ne
    33c6:	2001      	movne	r0, #1
    33c8:	4770      	bx	lr
    33ca:	bf00      	nop
    33cc:	20000044 	.word	0x20000044

000033d0 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    33d0:	3008      	adds	r0, #8
    33d2:	4b03      	ldr	r3, [pc, #12]	; (33e0 <pin_is_output+0x10>)
    33d4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    33d8:	f3c0 0040 	ubfx	r0, r0, #1, #1
    33dc:	4770      	bx	lr
    33de:	bf00      	nop
    33e0:	20000044 	.word	0x20000044

000033e4 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    33e4:	3008      	adds	r0, #8
    33e6:	4b02      	ldr	r3, [pc, #8]	; (33f0 <pin_te_get+0xc>)
    33e8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    33ec:	0b40      	lsrs	r0, r0, #13
    33ee:	4770      	bx	lr
    33f0:	20000044 	.word	0x20000044

000033f4 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    33f4:	2200      	movs	r2, #0
    33f6:	e004      	b.n	3402 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    33f8:	f04f 33ff 	mov.w	r3, #4294967295
    33fc:	4283      	cmp	r3, r0
    33fe:	d00f      	beq.n	3420 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3400:	3201      	adds	r2, #1
    3402:	2a2f      	cmp	r2, #47	; 0x2f
    3404:	d80a      	bhi.n	341c <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3406:	f102 0308 	add.w	r3, r2, #8
    340a:	4906      	ldr	r1, [pc, #24]	; (3424 <handler_in_use+0x30>)
    340c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    3410:	f413 7f80 	tst.w	r3, #256	; 0x100
    3414:	d0f0      	beq.n	33f8 <handler_in_use+0x4>
    3416:	f3c3 2343 	ubfx	r3, r3, #9, #4
    341a:	e7ef      	b.n	33fc <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    341c:	2000      	movs	r0, #0
    341e:	4770      	bx	lr
            return true;
    3420:	2001      	movs	r0, #1
}
    3422:	4770      	bx	lr
    3424:	20000044 	.word	0x20000044

00003428 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    3428:	2300      	movs	r3, #0
    342a:	b113      	cbz	r3, 3432 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    342c:	f04f 30ff 	mov.w	r0, #4294967295
}
    3430:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3432:	4a07      	ldr	r2, [pc, #28]	; (3450 <find_handler+0x28>)
    3434:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    3438:	4282      	cmp	r2, r0
    343a:	d001      	beq.n	3440 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    343c:	3301      	adds	r3, #1
    343e:	e7f4      	b.n	342a <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3440:	4a03      	ldr	r2, [pc, #12]	; (3450 <find_handler+0x28>)
    3442:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    3446:	6852      	ldr	r2, [r2, #4]
    3448:	428a      	cmp	r2, r1
    344a:	d1f7      	bne.n	343c <find_handler+0x14>
            return i;
    344c:	4618      	mov	r0, r3
    344e:	4770      	bx	lr
    3450:	20000044 	.word	0x20000044

00003454 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3454:	3008      	adds	r0, #8
    3456:	4b06      	ldr	r3, [pc, #24]	; (3470 <channel_handler_get+0x1c>)
    3458:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    345c:	f410 7f80 	tst.w	r0, #256	; 0x100
    3460:	d004      	beq.n	346c <channel_handler_get+0x18>
    3462:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    3466:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    346a:	4770      	bx	lr
        return NULL;
    346c:	2000      	movs	r0, #0
}
    346e:	4770      	bx	lr
    3470:	20000044 	.word	0x20000044

00003474 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3474:	b570      	push	{r4, r5, r6, lr}
    3476:	4604      	mov	r4, r0
    3478:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    347a:	f7ff ffeb 	bl	3454 <channel_handler_get>

    if (handler)
    347e:	b120      	cbz	r0, 348a <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    3480:	6806      	ldr	r6, [r0, #0]
    3482:	6842      	ldr	r2, [r0, #4]
    3484:	4629      	mov	r1, r5
    3486:	4620      	mov	r0, r4
    3488:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    348a:	4b04      	ldr	r3, [pc, #16]	; (349c <call_handler+0x28>)
    348c:	689b      	ldr	r3, [r3, #8]
    348e:	b123      	cbz	r3, 349a <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3490:	4a02      	ldr	r2, [pc, #8]	; (349c <call_handler+0x28>)
    3492:	68d2      	ldr	r2, [r2, #12]
    3494:	4629      	mov	r1, r5
    3496:	4620      	mov	r0, r4
    3498:	4798      	blx	r3
    }
}
    349a:	bd70      	pop	{r4, r5, r6, pc}
    349c:	20000044 	.word	0x20000044

000034a0 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    34a0:	b570      	push	{r4, r5, r6, lr}
    34a2:	4604      	mov	r4, r0
    34a4:	460d      	mov	r5, r1
    34a6:	4616      	mov	r6, r2
    if (is_level(trigger))
    34a8:	4608      	mov	r0, r1
    34aa:	f002 fe0d 	bl	60c8 <is_level>
    34ae:	b9c0      	cbnz	r0, 34e2 <next_sense_cond_call_handler+0x42>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    34b0:	2e02      	cmp	r6, #2
    34b2:	d03a      	beq.n	352a <next_sense_cond_call_handler+0x8a>
    34b4:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
    34b6:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    34ba:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    34bc:	2901      	cmp	r1, #1
    34be:	d036      	beq.n	352e <next_sense_cond_call_handler+0x8e>
        case 0: return NRF_P0;
    34c0:	4921      	ldr	r1, [pc, #132]	; (3548 <next_sense_cond_call_handler+0xa8>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    34c2:	3280      	adds	r2, #128	; 0x80
    34c4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    34c8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    34cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    34d0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        nrf_gpio_cfg_sense_set(pin, next_sense);

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    34d4:	2d03      	cmp	r5, #3
    34d6:	d02e      	beq.n	3536 <next_sense_cond_call_handler+0x96>
    34d8:	2e02      	cmp	r6, #2
    34da:	d02a      	beq.n	3532 <next_sense_cond_call_handler+0x92>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    34dc:	2e03      	cmp	r6, #3
    34de:	d02f      	beq.n	3540 <next_sense_cond_call_handler+0xa0>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    34e0:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    34e2:	4629      	mov	r1, r5
    34e4:	4620      	mov	r0, r4
    34e6:	f7ff ffc5 	bl	3474 <call_handler>
    *p_pin = pin_number & 0x1F;
    34ea:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    34ee:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    34f0:	2c01      	cmp	r4, #1
    34f2:	d018      	beq.n	3526 <next_sense_cond_call_handler+0x86>
        case 0: return NRF_P0;
    34f4:	4914      	ldr	r1, [pc, #80]	; (3548 <next_sense_cond_call_handler+0xa8>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    34f6:	f103 0280 	add.w	r2, r3, #128	; 0x80
    34fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    34fe:	f3c2 4201 	ubfx	r2, r2, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3502:	4296      	cmp	r6, r2
    3504:	d1ec      	bne.n	34e0 <next_sense_cond_call_handler+0x40>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3506:	3380      	adds	r3, #128	; 0x80
    3508:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    350c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    3510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3514:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    3518:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    351c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    3520:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
}
    3524:	e7dc      	b.n	34e0 <next_sense_cond_call_handler+0x40>
        case 1: return NRF_P1;
    3526:	4909      	ldr	r1, [pc, #36]	; (354c <next_sense_cond_call_handler+0xac>)
    3528:	e7e5      	b.n	34f6 <next_sense_cond_call_handler+0x56>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    352a:	2003      	movs	r0, #3
    352c:	e7c3      	b.n	34b6 <next_sense_cond_call_handler+0x16>
    352e:	4907      	ldr	r1, [pc, #28]	; (354c <next_sense_cond_call_handler+0xac>)
    3530:	e7c7      	b.n	34c2 <next_sense_cond_call_handler+0x22>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3532:	2d01      	cmp	r5, #1
    3534:	d1d2      	bne.n	34dc <next_sense_cond_call_handler+0x3c>
            call_handler(pin, trigger);
    3536:	4629      	mov	r1, r5
    3538:	4620      	mov	r0, r4
    353a:	f7ff ff9b 	bl	3474 <call_handler>
}
    353e:	e7cf      	b.n	34e0 <next_sense_cond_call_handler+0x40>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3540:	2d02      	cmp	r5, #2
    3542:	d1cd      	bne.n	34e0 <next_sense_cond_call_handler+0x40>
    3544:	e7f7      	b.n	3536 <next_sense_cond_call_handler+0x96>
    3546:	bf00      	nop
    3548:	50842500 	.word	0x50842500
    354c:	50842800 	.word	0x50842800

00003550 <latch_pending_read_and_check>:

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
    3550:	b410      	push	{r4}
    3552:	b083      	sub	sp, #12
    3554:	4604      	mov	r4, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    3556:	4b11      	ldr	r3, [pc, #68]	; (359c <latch_pending_read_and_check+0x4c>)
    3558:	e893 0003 	ldmia.w	r3, {r0, r1}
    355c:	ab02      	add	r3, sp, #8
    355e:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    3562:	4620      	mov	r0, r4
    3564:	2300      	movs	r3, #0
    3566:	e009      	b.n	357c <latch_pending_read_and_check+0x2c>
        *p_masks = gpio_regs[i]->LATCH;
    3568:	aa02      	add	r2, sp, #8
    356a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    356e:	f852 2c08 	ldr.w	r2, [r2, #-8]
    3572:	6a11      	ldr	r1, [r2, #32]
    3574:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    3578:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
    357a:	3301      	adds	r3, #1
    357c:	2b01      	cmp	r3, #1
    357e:	d9f3      	bls.n	3568 <latch_pending_read_and_check+0x18>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    3580:	2300      	movs	r3, #0
    3582:	2b01      	cmp	r3, #1
    3584:	d804      	bhi.n	3590 <latch_pending_read_and_check+0x40>
    {
        if (latch[port_idx])
    3586:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    358a:	b92a      	cbnz	r2, 3598 <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    358c:	3301      	adds	r3, #1
    358e:	e7f8      	b.n	3582 <latch_pending_read_and_check+0x32>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
    3590:	2000      	movs	r0, #0
}
    3592:	b003      	add	sp, #12
    3594:	bc10      	pop	{r4}
    3596:	4770      	bx	lr
            return true;
    3598:	2001      	movs	r0, #1
    359a:	e7fa      	b.n	3592 <latch_pending_read_and_check+0x42>
    359c:	00006880 	.word	0x00006880

000035a0 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    35a0:	f100 0208 	add.w	r2, r0, #8
    35a4:	4b0e      	ldr	r3, [pc, #56]	; (35e0 <release_handler+0x40>)
    35a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    35aa:	f413 7f80 	tst.w	r3, #256	; 0x100
    35ae:	d016      	beq.n	35de <release_handler+0x3e>
{
    35b0:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    35b2:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    35b6:	4610      	mov	r0, r2
    35b8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    35bc:	4a08      	ldr	r2, [pc, #32]	; (35e0 <release_handler+0x40>)
    35be:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    35c2:	4620      	mov	r0, r4
    35c4:	f7ff ff16 	bl	33f4 <handler_in_use>
    35c8:	b100      	cbz	r0, 35cc <release_handler+0x2c>
}
    35ca:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    35cc:	4804      	ldr	r0, [pc, #16]	; (35e0 <release_handler+0x40>)
    35ce:	2300      	movs	r3, #0
    35d0:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    35d4:	4621      	mov	r1, r4
    35d6:	3074      	adds	r0, #116	; 0x74
    35d8:	f7ff fd0a 	bl	2ff0 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    35dc:	e7f5      	b.n	35ca <release_handler+0x2a>
    35de:	4770      	bx	lr
    35e0:	20000044 	.word	0x20000044

000035e4 <pin_handler_trigger_uninit>:
{
    35e4:	b510      	push	{r4, lr}
    35e6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    35e8:	f7ff fedc 	bl	33a4 <pin_in_use_by_te>
    35ec:	b150      	cbz	r0, 3604 <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    35ee:	4620      	mov	r0, r4
    35f0:	f7ff fef8 	bl	33e4 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    35f4:	4b08      	ldr	r3, [pc, #32]	; (3618 <pin_handler_trigger_uninit+0x34>)
    35f6:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    35fa:	2200      	movs	r2, #0
    35fc:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    3600:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    3604:	4620      	mov	r0, r4
    3606:	f7ff ffcb 	bl	35a0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    360a:	3408      	adds	r4, #8
    360c:	4b03      	ldr	r3, [pc, #12]	; (361c <pin_handler_trigger_uninit+0x38>)
    360e:	2200      	movs	r2, #0
    3610:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    3614:	bd10      	pop	{r4, pc}
    3616:	bf00      	nop
    3618:	5000d000 	.word	0x5000d000
    361c:	20000044 	.word	0x20000044

00003620 <pin_handler_set>:
{
    3620:	b570      	push	{r4, r5, r6, lr}
    3622:	b082      	sub	sp, #8
    3624:	4606      	mov	r6, r0
    3626:	460c      	mov	r4, r1
    3628:	4615      	mov	r5, r2
    release_handler(pin);
    362a:	f7ff ffb9 	bl	35a0 <release_handler>
    if (!handler)
    362e:	b324      	cbz	r4, 367a <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    3630:	4629      	mov	r1, r5
    3632:	4620      	mov	r0, r4
    3634:	f7ff fef8 	bl	3428 <find_handler>
    if (handler_id < 0)
    3638:	1e03      	subs	r3, r0, #0
    363a:	db13      	blt.n	3664 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    363c:	4a10      	ldr	r2, [pc, #64]	; (3680 <pin_handler_set+0x60>)
    363e:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3642:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    3646:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3648:	025b      	lsls	r3, r3, #9
    364a:	b29b      	uxth	r3, r3
    364c:	f106 0008 	add.w	r0, r6, #8
    3650:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    3654:	430b      	orrs	r3, r1
    3656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    365a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    365e:	4809      	ldr	r0, [pc, #36]	; (3684 <pin_handler_set+0x64>)
}
    3660:	b002      	add	sp, #8
    3662:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3664:	f10d 0107 	add.w	r1, sp, #7
    3668:	4807      	ldr	r0, [pc, #28]	; (3688 <pin_handler_set+0x68>)
    366a:	f7ff fca1 	bl	2fb0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    366e:	4b05      	ldr	r3, [pc, #20]	; (3684 <pin_handler_set+0x64>)
    3670:	4298      	cmp	r0, r3
    3672:	d1f5      	bne.n	3660 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    3674:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3678:	e7e0      	b.n	363c <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    367a:	4802      	ldr	r0, [pc, #8]	; (3684 <pin_handler_set+0x64>)
    367c:	e7f0      	b.n	3660 <pin_handler_set+0x40>
    367e:	bf00      	nop
    3680:	20000044 	.word	0x20000044
    3684:	0bad0000 	.word	0x0bad0000
    3688:	200000b8 	.word	0x200000b8

0000368c <port_event_handle>:

static void port_event_handle(void)
{
    368c:	b570      	push	{r4, r5, r6, lr}
    368e:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    3690:	4a2a      	ldr	r2, [pc, #168]	; (373c <port_event_handle+0xb0>)
    3692:	466b      	mov	r3, sp
    3694:	e892 0003 	ldmia.w	r2, {r0, r1}
    3698:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    369c:	2300      	movs	r3, #0
    369e:	a802      	add	r0, sp, #8
    36a0:	e009      	b.n	36b6 <port_event_handle+0x2a>
        *p_masks = gpio_regs[i]->LATCH;
    36a2:	aa04      	add	r2, sp, #16
    36a4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    36a8:	f852 2c10 	ldr.w	r2, [r2, #-16]
    36ac:	6a11      	ldr	r1, [r2, #32]
    36ae:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    36b2:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
    36b4:	3301      	adds	r3, #1
    36b6:	2b01      	cmp	r3, #1
    36b8:	d9f3      	bls.n	36a2 <port_event_handle+0x16>
    36ba:	e03b      	b.n	3734 <port_event_handle+0xa8>
        case 1: return NRF_P1;
    36bc:	4e20      	ldr	r6, [pc, #128]	; (3740 <port_event_handle+0xb4>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    36be:	f105 0380 	add.w	r3, r5, #128	; 0x80
    36c2:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    36c6:	f3c2 4201 	ubfx	r2, r2, #16, #2
    36ca:	f7ff fee9 	bl	34a0 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    36ce:	2301      	movs	r3, #1
    36d0:	40ab      	lsls	r3, r5
    36d2:	6233      	str	r3, [r6, #32]
            while (latch[i])
    36d4:	ab04      	add	r3, sp, #16
    36d6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    36da:	f853 0c08 	ldr.w	r0, [r3, #-8]
    36de:	b1f0      	cbz	r0, 371e <port_event_handle+0x92>
                uint32_t pin = NRF_CTZ(latch[i]);
    36e0:	fa90 f0a0 	rbit	r0, r0
    36e4:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    36e8:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    36ec:	f100 0208 	add.w	r2, r0, #8
    36f0:	4b14      	ldr	r3, [pc, #80]	; (3744 <port_event_handle+0xb8>)
    36f2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    36f6:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    36fa:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    36fc:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3700:	ae02      	add	r6, sp, #8
    3702:	2301      	movs	r3, #1
    3704:	fa03 f202 	lsl.w	r2, r3, r2
    3708:	5d73      	ldrb	r3, [r6, r5]
    370a:	ea23 0302 	bic.w	r3, r3, r2
    370e:	5573      	strb	r3, [r6, r5]
    *p_pin = pin_number & 0x1F;
    3710:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    3714:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3716:	2b01      	cmp	r3, #1
    3718:	d0d0      	beq.n	36bc <port_event_handle+0x30>
        case 0: return NRF_P0;
    371a:	4e0b      	ldr	r6, [pc, #44]	; (3748 <port_event_handle+0xbc>)
    371c:	e7cf      	b.n	36be <port_event_handle+0x32>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    371e:	3401      	adds	r4, #1
    3720:	2c01      	cmp	r4, #1
    3722:	d9d7      	bls.n	36d4 <port_event_handle+0x48>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3724:	4b09      	ldr	r3, [pc, #36]	; (374c <port_event_handle+0xc0>)
    3726:	2200      	movs	r2, #0
    3728:	601a      	str	r2, [r3, #0]
    372a:	681b      	ldr	r3, [r3, #0]
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    372c:	a802      	add	r0, sp, #8
    372e:	f7ff ff0f 	bl	3550 <latch_pending_read_and_check>
    3732:	b108      	cbz	r0, 3738 <port_event_handle+0xac>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3734:	2400      	movs	r4, #0
    3736:	e7f3      	b.n	3720 <port_event_handle+0x94>
}
    3738:	b004      	add	sp, #16
    373a:	bd70      	pop	{r4, r5, r6, pc}
    373c:	00006880 	.word	0x00006880
    3740:	50842800 	.word	0x50842800
    3744:	20000044 	.word	0x20000044
    3748:	50842500 	.word	0x50842500
    374c:	5000d17c 	.word	0x5000d17c

00003750 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    3750:	b538      	push	{r3, r4, r5, lr}
    3752:	4604      	mov	r4, r0
    while (mask)
    3754:	b1cc      	cbz	r4, 378a <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
    3756:	fa94 f3a4 	rbit	r3, r4
    375a:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    375e:	2201      	movs	r2, #1
    3760:	409a      	lsls	r2, r3
    3762:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3766:	4a09      	ldr	r2, [pc, #36]	; (378c <gpiote_evt_handle+0x3c>)
    3768:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    376c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    3770:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3774:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3778:	f3c0 4001 	ubfx	r0, r0, #16, #2
    377c:	f002 fca2 	bl	60c4 <gpiote_polarity_to_trigger>
    3780:	4601      	mov	r1, r0
    3782:	4628      	mov	r0, r5
    3784:	f7ff fe76 	bl	3474 <call_handler>
    3788:	e7e4      	b.n	3754 <gpiote_evt_handle+0x4>
    }
}
    378a:	bd38      	pop	{r3, r4, r5, pc}
    378c:	5000d000 	.word	0x5000d000

00003790 <nrfx_gpiote_input_configure>:
{
    3790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3794:	4604      	mov	r4, r0
    3796:	4615      	mov	r5, r2
    3798:	461e      	mov	r6, r3
    if (p_input_config)
    379a:	b351      	cbz	r1, 37f2 <nrfx_gpiote_input_configure+0x62>
    379c:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    379e:	f002 fc7b 	bl	6098 <pin_is_task_output>
    37a2:	2800      	cmp	r0, #0
    37a4:	f040 8097 	bne.w	38d6 <nrfx_gpiote_input_configure+0x146>
    *p_pin = pin_number & 0x1F;
    37a8:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    37ac:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    37ae:	2b01      	cmp	r3, #1
    37b0:	d040      	beq.n	3834 <nrfx_gpiote_input_configure+0xa4>
        case 0: return NRF_P0;
    37b2:	484d      	ldr	r0, [pc, #308]	; (38e8 <nrfx_gpiote_input_configure+0x158>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    37b4:	f102 0380 	add.w	r3, r2, #128	; 0x80
    37b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    37bc:	2f00      	cmp	r7, #0
    37be:	d03b      	beq.n	3838 <nrfx_gpiote_input_configure+0xa8>
    37c0:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    37c2:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
    37c6:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    37ca:	2f00      	cmp	r7, #0
    37cc:	d036      	beq.n	383c <nrfx_gpiote_input_configure+0xac>
    37ce:	7839      	ldrb	r1, [r7, #0]
    37d0:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    37d2:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    37d4:	3280      	adds	r2, #128	; 0x80
    37d6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    37da:	4a44      	ldr	r2, [pc, #272]	; (38ec <nrfx_gpiote_input_configure+0x15c>)
    37dc:	f104 0108 	add.w	r1, r4, #8
    37e0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    37e4:	f023 0302 	bic.w	r3, r3, #2
    37e8:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    37ea:	f043 0301 	orr.w	r3, r3, #1
    37ee:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    37f2:	b1b5      	cbz	r5, 3822 <nrfx_gpiote_input_configure+0x92>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    37f4:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    37f8:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
    37fc:	4620      	mov	r0, r4
    37fe:	f7ff fde7 	bl	33d0 <pin_is_output>
    3802:	b1e8      	cbz	r0, 3840 <nrfx_gpiote_input_configure+0xb0>
            if (use_evt)
    3804:	f1b9 0f00 	cmp.w	r9, #0
    3808:	d167      	bne.n	38da <nrfx_gpiote_input_configure+0x14a>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    380a:	4b38      	ldr	r3, [pc, #224]	; (38ec <nrfx_gpiote_input_configure+0x15c>)
    380c:	f104 0208 	add.w	r2, r4, #8
    3810:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
    3814:	f020 001c 	bic.w	r0, r0, #28
    3818:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    381a:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
    381e:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
    3822:	2e00      	cmp	r6, #0
    3824:	d05d      	beq.n	38e2 <nrfx_gpiote_input_configure+0x152>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3826:	6872      	ldr	r2, [r6, #4]
    3828:	6831      	ldr	r1, [r6, #0]
    382a:	4620      	mov	r0, r4
    382c:	f7ff fef8 	bl	3620 <pin_handler_set>
}
    3830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        case 1: return NRF_P1;
    3834:	482e      	ldr	r0, [pc, #184]	; (38f0 <nrfx_gpiote_input_configure+0x160>)
    3836:	e7bd      	b.n	37b4 <nrfx_gpiote_input_configure+0x24>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3838:	2100      	movs	r1, #0
    383a:	e7c2      	b.n	37c2 <nrfx_gpiote_input_configure+0x32>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    383c:	2100      	movs	r1, #0
    383e:	e7c8      	b.n	37d2 <nrfx_gpiote_input_configure+0x42>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3840:	4b2a      	ldr	r3, [pc, #168]	; (38ec <nrfx_gpiote_input_configure+0x15c>)
    3842:	f104 0208 	add.w	r2, r4, #8
    3846:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
    384a:	f027 0720 	bic.w	r7, r7, #32
    384e:	04ff      	lsls	r7, r7, #19
    3850:	0cff      	lsrs	r7, r7, #19
    3852:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
    3856:	f1b9 0f00 	cmp.w	r9, #0
    385a:	d0d6      	beq.n	380a <nrfx_gpiote_input_configure+0x7a>
                if (!edge)
    385c:	f1b8 0f03 	cmp.w	r8, #3
    3860:	d83d      	bhi.n	38de <nrfx_gpiote_input_configure+0x14e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3862:	686b      	ldr	r3, [r5, #4]
    3864:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3866:	f1b8 0f00 	cmp.w	r8, #0
    386a:	d108      	bne.n	387e <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
    386c:	4b21      	ldr	r3, [pc, #132]	; (38f4 <nrfx_gpiote_input_configure+0x164>)
    386e:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    3872:	2200      	movs	r2, #0
    3874:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
    3878:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
    387c:	e7c5      	b.n	380a <nrfx_gpiote_input_configure+0x7a>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    387e:	4640      	mov	r0, r8
    3880:	f002 fc21 	bl	60c6 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3884:	4b1b      	ldr	r3, [pc, #108]	; (38f4 <nrfx_gpiote_input_configure+0x164>)
    3886:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    388a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    388e:	f021 0103 	bic.w	r1, r1, #3
    3892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3896:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    389a:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    389e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    38a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    38a6:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    38aa:	0221      	lsls	r1, r4, #8
    38ac:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    38b0:	0400      	lsls	r0, r0, #16
    38b2:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    38b6:	4301      	orrs	r1, r0
    38b8:	ea4c 0101 	orr.w	r1, ip, r1
    38bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    38c0:	036d      	lsls	r5, r5, #13
    38c2:	b2ad      	uxth	r5, r5
    38c4:	f104 0308 	add.w	r3, r4, #8
    38c8:	432f      	orrs	r7, r5
    38ca:	f047 0720 	orr.w	r7, r7, #32
    38ce:	4a07      	ldr	r2, [pc, #28]	; (38ec <nrfx_gpiote_input_configure+0x15c>)
    38d0:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
    38d4:	e799      	b.n	380a <nrfx_gpiote_input_configure+0x7a>
            return NRFX_ERROR_INVALID_PARAM;
    38d6:	4808      	ldr	r0, [pc, #32]	; (38f8 <nrfx_gpiote_input_configure+0x168>)
    38d8:	e7aa      	b.n	3830 <nrfx_gpiote_input_configure+0xa0>
                return NRFX_ERROR_INVALID_PARAM;
    38da:	4807      	ldr	r0, [pc, #28]	; (38f8 <nrfx_gpiote_input_configure+0x168>)
    38dc:	e7a8      	b.n	3830 <nrfx_gpiote_input_configure+0xa0>
                    return NRFX_ERROR_INVALID_PARAM;
    38de:	4806      	ldr	r0, [pc, #24]	; (38f8 <nrfx_gpiote_input_configure+0x168>)
    38e0:	e7a6      	b.n	3830 <nrfx_gpiote_input_configure+0xa0>
        err = NRFX_SUCCESS;
    38e2:	4806      	ldr	r0, [pc, #24]	; (38fc <nrfx_gpiote_input_configure+0x16c>)
    38e4:	e7a4      	b.n	3830 <nrfx_gpiote_input_configure+0xa0>
    38e6:	bf00      	nop
    38e8:	50842500 	.word	0x50842500
    38ec:	20000044 	.word	0x20000044
    38f0:	50842800 	.word	0x50842800
    38f4:	5000d000 	.word	0x5000d000
    38f8:	0bad0004 	.word	0x0bad0004
    38fc:	0bad0000 	.word	0x0bad0000

00003900 <nrfx_gpiote_output_configure>:
{
    3900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3902:	4604      	mov	r4, r0
    3904:	4615      	mov	r5, r2
    if (p_config)
    3906:	2900      	cmp	r1, #0
    3908:	d050      	beq.n	39ac <nrfx_gpiote_output_configure+0xac>
    390a:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    390c:	f002 fbd3 	bl	60b6 <pin_is_input>
    3910:	b128      	cbz	r0, 391e <nrfx_gpiote_output_configure+0x1e>
    3912:	4620      	mov	r0, r4
    3914:	f7ff fd46 	bl	33a4 <pin_in_use_by_te>
    3918:	2800      	cmp	r0, #0
    391a:	f040 809d 	bne.w	3a58 <nrfx_gpiote_output_configure+0x158>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    391e:	4620      	mov	r0, r4
    3920:	f7ff fd4a 	bl	33b8 <pin_has_trigger>
    3924:	b118      	cbz	r0, 392e <nrfx_gpiote_output_configure+0x2e>
    3926:	7873      	ldrb	r3, [r6, #1]
    3928:	2b01      	cmp	r3, #1
    392a:	f000 8097 	beq.w	3a5c <nrfx_gpiote_output_configure+0x15c>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    392e:	f106 0c01 	add.w	ip, r6, #1
    3932:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
    3934:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    3938:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    393a:	2b01      	cmp	r3, #1
    393c:	d07c      	beq.n	3a38 <nrfx_gpiote_output_configure+0x138>
        case 0: return NRF_P0;
    393e:	494b      	ldr	r1, [pc, #300]	; (3a6c <nrfx_gpiote_output_configure+0x16c>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3940:	f102 0380 	add.w	r3, r2, #128	; 0x80
    3944:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3948:	f1bc 0f00 	cmp.w	ip, #0
    394c:	d076      	beq.n	3a3c <nrfx_gpiote_output_configure+0x13c>
    394e:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    3950:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3954:	2f00      	cmp	r7, #0
    3956:	d073      	beq.n	3a40 <nrfx_gpiote_output_configure+0x140>
    3958:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    395c:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    3960:	2e00      	cmp	r6, #0
    3962:	d070      	beq.n	3a46 <nrfx_gpiote_output_configure+0x146>
    3964:	f44f 6e70 	mov.w	lr, #3840	; 0xf00
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3968:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
    396c:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3970:	f1bc 0f00 	cmp.w	ip, #0
    3974:	d06a      	beq.n	3a4c <nrfx_gpiote_output_configure+0x14c>
    3976:	7873      	ldrb	r3, [r6, #1]
    3978:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    397a:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    397e:	2f00      	cmp	r7, #0
    3980:	d066      	beq.n	3a50 <nrfx_gpiote_output_configure+0x150>
    3982:	78b7      	ldrb	r7, [r6, #2]
    3984:	00bf      	lsls	r7, r7, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3986:	433b      	orrs	r3, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3988:	2e00      	cmp	r6, #0
    398a:	d063      	beq.n	3a54 <nrfx_gpiote_output_configure+0x154>
    398c:	7836      	ldrb	r6, [r6, #0]
    398e:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3990:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3992:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    3994:	3280      	adds	r2, #128	; 0x80
    3996:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    399a:	4a35      	ldr	r2, [pc, #212]	; (3a70 <nrfx_gpiote_output_configure+0x170>)
    399c:	f104 0108 	add.w	r1, r4, #8
    39a0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    39a4:	f043 0303 	orr.w	r3, r3, #3
    39a8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    39ac:	2d00      	cmp	r5, #0
    39ae:	d057      	beq.n	3a60 <nrfx_gpiote_output_configure+0x160>
        if (pin_is_input(pin))
    39b0:	4620      	mov	r0, r4
    39b2:	f002 fb80 	bl	60b6 <pin_is_input>
    39b6:	2800      	cmp	r0, #0
    39b8:	d154      	bne.n	3a64 <nrfx_gpiote_output_configure+0x164>
        uint32_t ch = p_task_config->task_ch;
    39ba:	782a      	ldrb	r2, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    39bc:	4b2d      	ldr	r3, [pc, #180]	; (3a74 <nrfx_gpiote_output_configure+0x174>)
    39be:	f502 71a2 	add.w	r1, r2, #324	; 0x144
    39c2:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    p_reg->CONFIG[idx] = 0;
    39c6:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    39ca:	4929      	ldr	r1, [pc, #164]	; (3a70 <nrfx_gpiote_output_configure+0x170>)
    39cc:	f104 0008 	add.w	r0, r4, #8
    39d0:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
    39d4:	f023 0320 	bic.w	r3, r3, #32
    39d8:	04db      	lsls	r3, r3, #19
    39da:	0cdb      	lsrs	r3, r3, #19
    39dc:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    39e0:	7869      	ldrb	r1, [r5, #1]
    39e2:	2900      	cmp	r1, #0
    39e4:	d040      	beq.n	3a68 <nrfx_gpiote_output_configure+0x168>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    39e6:	f895 c002 	ldrb.w	ip, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    39ea:	4d22      	ldr	r5, [pc, #136]	; (3a74 <nrfx_gpiote_output_configure+0x174>)
    39ec:	f502 76a2 	add.w	r6, r2, #324	; 0x144
    39f0:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
    39f4:	f420 1099 	bic.w	r0, r0, #1253376	; 0x132000
    39f8:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
    39fc:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3a00:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
    3a04:	0220      	lsls	r0, r4, #8
    3a06:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3a0a:	0409      	lsls	r1, r1, #16
    3a0c:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3a10:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3a12:	ea4f 500c 	mov.w	r0, ip, lsl #20
    3a16:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3a1a:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3a1c:	4339      	orrs	r1, r7
    3a1e:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3a22:	0352      	lsls	r2, r2, #13
    3a24:	b292      	uxth	r2, r2
    3a26:	3408      	adds	r4, #8
    3a28:	431a      	orrs	r2, r3
    3a2a:	f042 0220 	orr.w	r2, r2, #32
    3a2e:	4b10      	ldr	r3, [pc, #64]	; (3a70 <nrfx_gpiote_output_configure+0x170>)
    3a30:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
    3a34:	4810      	ldr	r0, [pc, #64]	; (3a78 <nrfx_gpiote_output_configure+0x178>)
    3a36:	e014      	b.n	3a62 <nrfx_gpiote_output_configure+0x162>
        case 1: return NRF_P1;
    3a38:	4910      	ldr	r1, [pc, #64]	; (3a7c <nrfx_gpiote_output_configure+0x17c>)
    3a3a:	e781      	b.n	3940 <nrfx_gpiote_output_configure+0x40>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3a3c:	2300      	movs	r3, #0
    3a3e:	e787      	b.n	3950 <nrfx_gpiote_output_configure+0x50>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3a40:	f04f 0e00 	mov.w	lr, #0
    3a44:	e78a      	b.n	395c <nrfx_gpiote_output_configure+0x5c>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    3a46:	f04f 0e00 	mov.w	lr, #0
    3a4a:	e78d      	b.n	3968 <nrfx_gpiote_output_configure+0x68>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3a4c:	2300      	movs	r3, #0
    3a4e:	e794      	b.n	397a <nrfx_gpiote_output_configure+0x7a>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3a50:	2700      	movs	r7, #0
    3a52:	e798      	b.n	3986 <nrfx_gpiote_output_configure+0x86>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3a54:	2600      	movs	r6, #0
    3a56:	e79b      	b.n	3990 <nrfx_gpiote_output_configure+0x90>
    3a58:	4809      	ldr	r0, [pc, #36]	; (3a80 <nrfx_gpiote_output_configure+0x180>)
    3a5a:	e002      	b.n	3a62 <nrfx_gpiote_output_configure+0x162>
    3a5c:	4808      	ldr	r0, [pc, #32]	; (3a80 <nrfx_gpiote_output_configure+0x180>)
    3a5e:	e000      	b.n	3a62 <nrfx_gpiote_output_configure+0x162>
    3a60:	4805      	ldr	r0, [pc, #20]	; (3a78 <nrfx_gpiote_output_configure+0x178>)
}
    3a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NRFX_ERROR_INVALID_PARAM;
    3a64:	4806      	ldr	r0, [pc, #24]	; (3a80 <nrfx_gpiote_output_configure+0x180>)
    3a66:	e7fc      	b.n	3a62 <nrfx_gpiote_output_configure+0x162>
    return NRFX_SUCCESS;
    3a68:	4803      	ldr	r0, [pc, #12]	; (3a78 <nrfx_gpiote_output_configure+0x178>)
    3a6a:	e7fa      	b.n	3a62 <nrfx_gpiote_output_configure+0x162>
    3a6c:	50842500 	.word	0x50842500
    3a70:	20000044 	.word	0x20000044
    3a74:	5000d000 	.word	0x5000d000
    3a78:	0bad0000 	.word	0x0bad0000
    3a7c:	50842800 	.word	0x50842800
    3a80:	0bad0004 	.word	0x0bad0004

00003a84 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3a84:	4b01      	ldr	r3, [pc, #4]	; (3a8c <nrfx_gpiote_global_callback_set+0x8>)
    3a86:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    3a88:	60d9      	str	r1, [r3, #12]
}
    3a8a:	4770      	bx	lr
    3a8c:	20000044 	.word	0x20000044

00003a90 <nrfx_gpiote_channel_get>:
{
    3a90:	b538      	push	{r3, r4, r5, lr}
    3a92:	4604      	mov	r4, r0
    3a94:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    3a96:	f7ff fc85 	bl	33a4 <pin_in_use_by_te>
    3a9a:	b140      	cbz	r0, 3aae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3a9c:	f104 0008 	add.w	r0, r4, #8
    3aa0:	4b04      	ldr	r3, [pc, #16]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    3aa2:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    3aa6:	0b5b      	lsrs	r3, r3, #13
    3aa8:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    3aaa:	4803      	ldr	r0, [pc, #12]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
}
    3aac:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3aae:	4803      	ldr	r0, [pc, #12]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3ab0:	e7fc      	b.n	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
    3ab2:	bf00      	nop
    3ab4:	20000044 	.word	0x20000044
    3ab8:	0bad0000 	.word	0x0bad0000
    3abc:	0bad0004 	.word	0x0bad0004

00003ac0 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3ac0:	4b0f      	ldr	r3, [pc, #60]	; (3b00 <nrfx_gpiote_init+0x40>)
    3ac2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3ac6:	b10b      	cbz	r3, 3acc <nrfx_gpiote_init+0xc>
        return err_code;
    3ac8:	480e      	ldr	r0, [pc, #56]	; (3b04 <nrfx_gpiote_init+0x44>)
}
    3aca:	4770      	bx	lr
{
    3acc:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3ace:	4c0c      	ldr	r4, [pc, #48]	; (3b00 <nrfx_gpiote_init+0x40>)
    3ad0:	2260      	movs	r2, #96	; 0x60
    3ad2:	2100      	movs	r1, #0
    3ad4:	f104 0010 	add.w	r0, r4, #16
    3ad8:	f001 ff18 	bl	590c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3adc:	200d      	movs	r0, #13
    3ade:	f7fd fd6b 	bl	15b8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3ae2:	4b09      	ldr	r3, [pc, #36]	; (3b08 <nrfx_gpiote_init+0x48>)
    3ae4:	2200      	movs	r2, #0
    3ae6:	601a      	str	r2, [r3, #0]
    3ae8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3aea:	4b08      	ldr	r3, [pc, #32]	; (3b0c <nrfx_gpiote_init+0x4c>)
    3aec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3af0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3af4:	2301      	movs	r3, #1
    3af6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3afa:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    3afc:	4804      	ldr	r0, [pc, #16]	; (3b10 <nrfx_gpiote_init+0x50>)
}
    3afe:	bd10      	pop	{r4, pc}
    3b00:	20000044 	.word	0x20000044
    3b04:	0bad0005 	.word	0x0bad0005
    3b08:	5000d17c 	.word	0x5000d17c
    3b0c:	5000d000 	.word	0x5000d000
    3b10:	0bad0000 	.word	0x0bad0000

00003b14 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3b14:	4b03      	ldr	r3, [pc, #12]	; (3b24 <nrfx_gpiote_is_init+0x10>)
    3b16:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3b1a:	3800      	subs	r0, #0
    3b1c:	bf18      	it	ne
    3b1e:	2001      	movne	r0, #1
    3b20:	4770      	bx	lr
    3b22:	bf00      	nop
    3b24:	20000044 	.word	0x20000044

00003b28 <nrfx_gpiote_channel_free>:
{
    3b28:	b508      	push	{r3, lr}
    3b2a:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3b2c:	4801      	ldr	r0, [pc, #4]	; (3b34 <nrfx_gpiote_channel_free+0xc>)
    3b2e:	f7ff fa5f 	bl	2ff0 <nrfx_flag32_free>
}
    3b32:	bd08      	pop	{r3, pc}
    3b34:	200000b4 	.word	0x200000b4

00003b38 <nrfx_gpiote_channel_alloc>:
{
    3b38:	b508      	push	{r3, lr}
    3b3a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3b3c:	4801      	ldr	r0, [pc, #4]	; (3b44 <nrfx_gpiote_channel_alloc+0xc>)
    3b3e:	f7ff fa37 	bl	2fb0 <nrfx_flag32_alloc>
}
    3b42:	bd08      	pop	{r3, pc}
    3b44:	200000b4 	.word	0x200000b4

00003b48 <nrfx_gpiote_trigger_enable>:
{
    3b48:	b538      	push	{r3, r4, r5, lr}
    3b4a:	4604      	mov	r4, r0
    3b4c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3b4e:	f7ff fc29 	bl	33a4 <pin_in_use_by_te>
    3b52:	b308      	cbz	r0, 3b98 <nrfx_gpiote_trigger_enable+0x50>
    3b54:	4620      	mov	r0, r4
    3b56:	f002 faae 	bl	60b6 <pin_is_input>
    3b5a:	b1e8      	cbz	r0, 3b98 <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
    3b5c:	4620      	mov	r0, r4
    3b5e:	f7ff fc41 	bl	33e4 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3b62:	0083      	lsls	r3, r0, #2
    3b64:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    3b68:	b29b      	uxth	r3, r3
    3b6a:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3b6e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3b72:	2200      	movs	r2, #0
    3b74:	601a      	str	r2, [r3, #0]
    3b76:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3b78:	4a20      	ldr	r2, [pc, #128]	; (3bfc <nrfx_gpiote_trigger_enable+0xb4>)
    3b7a:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    3b7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    3b82:	f043 0301 	orr.w	r3, r3, #1
    3b86:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    3b8a:	b37d      	cbz	r5, 3bec <nrfx_gpiote_trigger_enable+0xa4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3b8c:	2301      	movs	r3, #1
    3b8e:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
    3b92:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
    3b96:	e029      	b.n	3bec <nrfx_gpiote_trigger_enable+0xa4>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3b98:	f104 0308 	add.w	r3, r4, #8
    3b9c:	4a18      	ldr	r2, [pc, #96]	; (3c00 <nrfx_gpiote_trigger_enable+0xb8>)
    3b9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    3ba2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3ba6:	2b04      	cmp	r3, #4
    3ba8:	d010      	beq.n	3bcc <nrfx_gpiote_trigger_enable+0x84>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3baa:	2b05      	cmp	r3, #5
    3bac:	d01f      	beq.n	3bee <nrfx_gpiote_trigger_enable+0xa6>
    *p_pin = pin_number & 0x1F;
    3bae:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    3bb2:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3bb4:	2b01      	cmp	r3, #1
    3bb6:	d007      	beq.n	3bc8 <nrfx_gpiote_trigger_enable+0x80>
        case 0: return NRF_P0;
    3bb8:	4b12      	ldr	r3, [pc, #72]	; (3c04 <nrfx_gpiote_trigger_enable+0xbc>)
    return p_reg->IN;
    3bba:	691b      	ldr	r3, [r3, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3bbc:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3bbe:	f013 0f01 	tst.w	r3, #1
    3bc2:	d016      	beq.n	3bf2 <nrfx_gpiote_trigger_enable+0xaa>
    3bc4:	2003      	movs	r0, #3
    3bc6:	e002      	b.n	3bce <nrfx_gpiote_trigger_enable+0x86>
        case 1: return NRF_P1;
    3bc8:	4b0f      	ldr	r3, [pc, #60]	; (3c08 <nrfx_gpiote_trigger_enable+0xc0>)
    3bca:	e7f6      	b.n	3bba <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3bcc:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    3bce:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    3bd2:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3bd4:	2c01      	cmp	r4, #1
    3bd6:	d00e      	beq.n	3bf6 <nrfx_gpiote_trigger_enable+0xae>
        case 0: return NRF_P0;
    3bd8:	490a      	ldr	r1, [pc, #40]	; (3c04 <nrfx_gpiote_trigger_enable+0xbc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3bda:	3280      	adds	r2, #128	; 0x80
    3bdc:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    3be0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3be4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    3be8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3bec:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3bee:	2002      	movs	r0, #2
    3bf0:	e7ed      	b.n	3bce <nrfx_gpiote_trigger_enable+0x86>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3bf2:	2002      	movs	r0, #2
    3bf4:	e7eb      	b.n	3bce <nrfx_gpiote_trigger_enable+0x86>
        case 1: return NRF_P1;
    3bf6:	4904      	ldr	r1, [pc, #16]	; (3c08 <nrfx_gpiote_trigger_enable+0xc0>)
    3bf8:	e7ef      	b.n	3bda <nrfx_gpiote_trigger_enable+0x92>
    3bfa:	bf00      	nop
    3bfc:	5000d000 	.word	0x5000d000
    3c00:	20000044 	.word	0x20000044
    3c04:	50842500 	.word	0x50842500
    3c08:	50842800 	.word	0x50842800

00003c0c <nrfx_gpiote_trigger_disable>:
{
    3c0c:	b510      	push	{r4, lr}
    3c0e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3c10:	f7ff fbc8 	bl	33a4 <pin_in_use_by_te>
    3c14:	b1a0      	cbz	r0, 3c40 <nrfx_gpiote_trigger_disable+0x34>
    3c16:	4620      	mov	r0, r4
    3c18:	f002 fa4d 	bl	60b6 <pin_is_input>
    3c1c:	b180      	cbz	r0, 3c40 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    3c1e:	4620      	mov	r0, r4
    3c20:	f7ff fbe0 	bl	33e4 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3c24:	2201      	movs	r2, #1
    3c26:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    3c28:	4b0d      	ldr	r3, [pc, #52]	; (3c60 <nrfx_gpiote_trigger_disable+0x54>)
    3c2a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3c2e:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    3c32:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    3c36:	f022 0203 	bic.w	r2, r2, #3
    3c3a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    3c3e:	e00c      	b.n	3c5a <nrfx_gpiote_trigger_disable+0x4e>
    *p_pin = pin_number & 0x1F;
    3c40:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    3c44:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3c46:	2c01      	cmp	r4, #1
    3c48:	d008      	beq.n	3c5c <nrfx_gpiote_trigger_disable+0x50>
        case 0: return NRF_P0;
    3c4a:	4906      	ldr	r1, [pc, #24]	; (3c64 <nrfx_gpiote_trigger_disable+0x58>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3c4c:	3380      	adds	r3, #128	; 0x80
    3c4e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    3c52:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    3c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3c5a:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    3c5c:	4902      	ldr	r1, [pc, #8]	; (3c68 <nrfx_gpiote_trigger_disable+0x5c>)
    3c5e:	e7f5      	b.n	3c4c <nrfx_gpiote_trigger_disable+0x40>
    3c60:	5000d000 	.word	0x5000d000
    3c64:	50842500 	.word	0x50842500
    3c68:	50842800 	.word	0x50842800

00003c6c <nrfx_gpiote_pin_uninit>:
{
    3c6c:	b510      	push	{r4, lr}
    3c6e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3c70:	f7ff fb8e 	bl	3390 <pin_in_use>
    3c74:	b908      	cbnz	r0, 3c7a <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    3c76:	480d      	ldr	r0, [pc, #52]	; (3cac <nrfx_gpiote_pin_uninit+0x40>)
}
    3c78:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    3c7a:	4620      	mov	r0, r4
    3c7c:	f7ff ffc6 	bl	3c0c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3c80:	4620      	mov	r0, r4
    3c82:	f7ff fcaf 	bl	35e4 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    3c86:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    3c8a:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3c8c:	2c01      	cmp	r4, #1
    3c8e:	d00b      	beq.n	3ca8 <nrfx_gpiote_pin_uninit+0x3c>
        case 0: return NRF_P0;
    3c90:	4907      	ldr	r1, [pc, #28]	; (3cb0 <nrfx_gpiote_pin_uninit+0x44>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    3c92:	3280      	adds	r2, #128	; 0x80
    3c94:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    3c98:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    3c9c:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    3ca0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    return NRFX_SUCCESS;
    3ca4:	4803      	ldr	r0, [pc, #12]	; (3cb4 <nrfx_gpiote_pin_uninit+0x48>)
    3ca6:	e7e7      	b.n	3c78 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
    3ca8:	4903      	ldr	r1, [pc, #12]	; (3cb8 <nrfx_gpiote_pin_uninit+0x4c>)
    3caa:	e7f2      	b.n	3c92 <nrfx_gpiote_pin_uninit+0x26>
    3cac:	0bad0004 	.word	0x0bad0004
    3cb0:	50842500 	.word	0x50842500
    3cb4:	0bad0000 	.word	0x0bad0000
    3cb8:	50842800 	.word	0x50842800

00003cbc <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    3cbc:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3cbe:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    3cc0:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3cc4:	2100      	movs	r1, #0
    uint32_t status = 0;
    3cc6:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3cc8:	e003      	b.n	3cd2 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    3cca:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    3ccc:	3304      	adds	r3, #4
    3cce:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3cd0:	3101      	adds	r1, #1
    3cd2:	2907      	cmp	r1, #7
    3cd4:	d814      	bhi.n	3d00 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3cd6:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    3cda:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    3cde:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3ce0:	2a00      	cmp	r2, #0
    3ce2:	d0f2      	beq.n	3cca <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    3ce4:	4a0b      	ldr	r2, [pc, #44]	; (3d14 <nrfx_gpiote_irq_handler+0x58>)
    3ce6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    3cea:	4210      	tst	r0, r2
    3cec:	d0ed      	beq.n	3cca <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    3cee:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    3cf2:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3cf6:	2400      	movs	r4, #0
    3cf8:	6014      	str	r4, [r2, #0]
    3cfa:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    3cfc:	4305      	orrs	r5, r0
    3cfe:	e7e4      	b.n	3cca <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3d00:	4b05      	ldr	r3, [pc, #20]	; (3d18 <nrfx_gpiote_irq_handler+0x5c>)
    3d02:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3d04:	b91b      	cbnz	r3, 3d0e <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    3d06:	4628      	mov	r0, r5
    3d08:	f7ff fd22 	bl	3750 <gpiote_evt_handle>
}
    3d0c:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    3d0e:	f7ff fcbd 	bl	368c <port_event_handle>
    3d12:	e7f8      	b.n	3d06 <nrfx_gpiote_irq_handler+0x4a>
    3d14:	5000d000 	.word	0x5000d000
    3d18:	5000d17c 	.word	0x5000d17c

00003d1c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    3d1c:	4b03      	ldr	r3, [pc, #12]	; (3d2c <z_device_state_init+0x10>)

	while (dev < __device_end) {
    3d1e:	4a04      	ldr	r2, [pc, #16]	; (3d30 <z_device_state_init+0x14>)
    3d20:	4293      	cmp	r3, r2
    3d22:	d201      	bcs.n	3d28 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    3d24:	3318      	adds	r3, #24
    3d26:	e7fa      	b.n	3d1e <z_device_state_init+0x2>
	}
}
    3d28:	4770      	bx	lr
    3d2a:	bf00      	nop
    3d2c:	000065a0 	.word	0x000065a0
    3d30:	00006600 	.word	0x00006600

00003d34 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    3d34:	b570      	push	{r4, r5, r6, lr}
    3d36:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3d38:	4b11      	ldr	r3, [pc, #68]	; (3d80 <z_sys_init_run_level+0x4c>)
    3d3a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3d3e:	e009      	b.n	3d54 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    3d40:	4240      	negs	r0, r0
    3d42:	e017      	b.n	3d74 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    3d44:	68eb      	ldr	r3, [r5, #12]
    3d46:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    3d48:	68ea      	ldr	r2, [r5, #12]
    3d4a:	7853      	ldrb	r3, [r2, #1]
    3d4c:	f043 0301 	orr.w	r3, r3, #1
    3d50:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3d52:	3408      	adds	r4, #8
    3d54:	1c73      	adds	r3, r6, #1
    3d56:	4a0a      	ldr	r2, [pc, #40]	; (3d80 <z_sys_init_run_level+0x4c>)
    3d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d5c:	42a3      	cmp	r3, r4
    3d5e:	d90d      	bls.n	3d7c <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    3d60:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    3d62:	6823      	ldr	r3, [r4, #0]
    3d64:	4628      	mov	r0, r5
    3d66:	4798      	blx	r3
		if (dev != NULL) {
    3d68:	2d00      	cmp	r5, #0
    3d6a:	d0f2      	beq.n	3d52 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    3d6c:	2800      	cmp	r0, #0
    3d6e:	d0eb      	beq.n	3d48 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    3d70:	2800      	cmp	r0, #0
    3d72:	dbe5      	blt.n	3d40 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    3d74:	28ff      	cmp	r0, #255	; 0xff
    3d76:	dde5      	ble.n	3d44 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    3d78:	20ff      	movs	r0, #255	; 0xff
    3d7a:	e7e3      	b.n	3d44 <z_sys_init_run_level+0x10>
		}
	}
}
    3d7c:	bd70      	pop	{r4, r5, r6, pc}
    3d7e:	bf00      	nop
    3d80:	00006a70 	.word	0x00006a70

00003d84 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    3d84:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    3d86:	4605      	mov	r5, r0
    3d88:	b328      	cbz	r0, 3dd6 <z_impl_device_get_binding+0x52>
    3d8a:	7803      	ldrb	r3, [r0, #0]
    3d8c:	b32b      	cbz	r3, 3dda <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    3d8e:	4c14      	ldr	r4, [pc, #80]	; (3de0 <z_impl_device_get_binding+0x5c>)
    3d90:	e000      	b.n	3d94 <z_impl_device_get_binding+0x10>
    3d92:	3418      	adds	r4, #24
    3d94:	4b13      	ldr	r3, [pc, #76]	; (3de4 <z_impl_device_get_binding+0x60>)
    3d96:	429c      	cmp	r4, r3
    3d98:	d008      	beq.n	3dac <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
    3d9a:	4620      	mov	r0, r4
    3d9c:	f002 f999 	bl	60d2 <z_device_ready>
    3da0:	2800      	cmp	r0, #0
    3da2:	d0f6      	beq.n	3d92 <z_impl_device_get_binding+0xe>
    3da4:	6823      	ldr	r3, [r4, #0]
    3da6:	42ab      	cmp	r3, r5
    3da8:	d1f3      	bne.n	3d92 <z_impl_device_get_binding+0xe>
    3daa:	e012      	b.n	3dd2 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    3dac:	4c0c      	ldr	r4, [pc, #48]	; (3de0 <z_impl_device_get_binding+0x5c>)
    3dae:	e000      	b.n	3db2 <z_impl_device_get_binding+0x2e>
    3db0:	3418      	adds	r4, #24
    3db2:	4b0c      	ldr	r3, [pc, #48]	; (3de4 <z_impl_device_get_binding+0x60>)
    3db4:	429c      	cmp	r4, r3
    3db6:	d00b      	beq.n	3dd0 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    3db8:	4620      	mov	r0, r4
    3dba:	f002 f98a 	bl	60d2 <z_device_ready>
    3dbe:	2800      	cmp	r0, #0
    3dc0:	d0f6      	beq.n	3db0 <z_impl_device_get_binding+0x2c>
    3dc2:	6821      	ldr	r1, [r4, #0]
    3dc4:	4628      	mov	r0, r5
    3dc6:	f001 fd73 	bl	58b0 <strcmp>
    3dca:	2800      	cmp	r0, #0
    3dcc:	d1f0      	bne.n	3db0 <z_impl_device_get_binding+0x2c>
    3dce:	e000      	b.n	3dd2 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    3dd0:	2400      	movs	r4, #0
}
    3dd2:	4620      	mov	r0, r4
    3dd4:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    3dd6:	4604      	mov	r4, r0
    3dd8:	e7fb      	b.n	3dd2 <z_impl_device_get_binding+0x4e>
    3dda:	2400      	movs	r4, #0
    3ddc:	e7f9      	b.n	3dd2 <z_impl_device_get_binding+0x4e>
    3dde:	bf00      	nop
    3de0:	000065a0 	.word	0x000065a0
    3de4:	00006600 	.word	0x00006600

00003de8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    3de8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dea:	b089      	sub	sp, #36	; 0x24
    3dec:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    3dee:	4b15      	ldr	r3, [pc, #84]	; (3e44 <init_idle_thread+0x5c>)
    3df0:	25b0      	movs	r5, #176	; 0xb0
    3df2:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    3df6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    3dfa:	4e13      	ldr	r6, [pc, #76]	; (3e48 <init_idle_thread+0x60>)
    3dfc:	eb06 1683 	add.w	r6, r6, r3, lsl #6

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    3e00:	af06      	add	r7, sp, #24
    3e02:	4603      	mov	r3, r0
    3e04:	4a11      	ldr	r2, [pc, #68]	; (3e4c <init_idle_thread+0x64>)
    3e06:	2108      	movs	r1, #8
    3e08:	4638      	mov	r0, r7
    3e0a:	f001 fa81 	bl	5310 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3e0e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3e12:	480f      	ldr	r0, [pc, #60]	; (3e50 <init_idle_thread+0x68>)
    3e14:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    3e18:	9705      	str	r7, [sp, #20]
    3e1a:	2301      	movs	r3, #1
    3e1c:	9304      	str	r3, [sp, #16]
    3e1e:	230f      	movs	r3, #15
    3e20:	9303      	str	r3, [sp, #12]
    3e22:	2300      	movs	r3, #0
    3e24:	9302      	str	r3, [sp, #8]
    3e26:	9301      	str	r3, [sp, #4]
    3e28:	9400      	str	r4, [sp, #0]
    3e2a:	4b0a      	ldr	r3, [pc, #40]	; (3e54 <init_idle_thread+0x6c>)
    3e2c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3e30:	4631      	mov	r1, r6
    3e32:	4628      	mov	r0, r5
    3e34:	f000 f944 	bl	40c0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3e38:	7b6b      	ldrb	r3, [r5, #13]
    3e3a:	f023 0304 	bic.w	r3, r3, #4
    3e3e:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    3e40:	b009      	add	sp, #36	; 0x24
    3e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e44:	200001a8 	.word	0x200001a8
    3e48:	20000f58 	.word	0x20000f58
    3e4c:	00006a88 	.word	0x00006a88
    3e50:	20000944 	.word	0x20000944
    3e54:	00004225 	.word	0x00004225

00003e58 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    3e58:	b570      	push	{r4, r5, r6, lr}
    3e5a:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    3e5c:	f000 fe06 	bl	4a6c <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    3e60:	4d1a      	ldr	r5, [pc, #104]	; (3ecc <prepare_multithreading+0x74>)
    3e62:	4b1b      	ldr	r3, [pc, #108]	; (3ed0 <prepare_multithreading+0x78>)
    3e64:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3e66:	4b1b      	ldr	r3, [pc, #108]	; (3ed4 <prepare_multithreading+0x7c>)
    3e68:	9305      	str	r3, [sp, #20]
    3e6a:	2301      	movs	r3, #1
    3e6c:	9304      	str	r3, [sp, #16]
    3e6e:	2400      	movs	r4, #0
    3e70:	9403      	str	r4, [sp, #12]
    3e72:	9402      	str	r4, [sp, #8]
    3e74:	9401      	str	r4, [sp, #4]
    3e76:	9400      	str	r4, [sp, #0]
    3e78:	4b17      	ldr	r3, [pc, #92]	; (3ed8 <prepare_multithreading+0x80>)
    3e7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3e7e:	4917      	ldr	r1, [pc, #92]	; (3edc <prepare_multithreading+0x84>)
    3e80:	4628      	mov	r0, r5
    3e82:	f000 f91d 	bl	40c0 <z_setup_new_thread>
    3e86:	4606      	mov	r6, r0
    3e88:	7b6b      	ldrb	r3, [r5, #13]
    3e8a:	f023 0304 	bic.w	r3, r3, #4
    3e8e:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    3e90:	4628      	mov	r0, r5
    3e92:	f002 fa0c 	bl	62ae <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    3e96:	2c00      	cmp	r4, #0
    3e98:	dd02      	ble.n	3ea0 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    3e9a:	4630      	mov	r0, r6
    3e9c:	b006      	add	sp, #24
    3e9e:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    3ea0:	4620      	mov	r0, r4
    3ea2:	f7ff ffa1 	bl	3de8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3ea6:	4b0e      	ldr	r3, [pc, #56]	; (3ee0 <prepare_multithreading+0x88>)
    3ea8:	22b0      	movs	r2, #176	; 0xb0
    3eaa:	fb02 3204 	mla	r2, r2, r4, r3
    3eae:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    3eb2:	4b07      	ldr	r3, [pc, #28]	; (3ed0 <prepare_multithreading+0x78>)
    3eb4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    3eb8:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    3eba:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    3ebc:	4a09      	ldr	r2, [pc, #36]	; (3ee4 <prepare_multithreading+0x8c>)
    3ebe:	eb02 22c4 	add.w	r2, r2, r4, lsl #11
    3ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
		_kernel.cpus[i].irq_stack =
    3ec6:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    3ec8:	3401      	adds	r4, #1
    3eca:	e7e4      	b.n	3e96 <prepare_multithreading+0x3e>
    3ecc:	20000258 	.word	0x20000258
    3ed0:	20000944 	.word	0x20000944
    3ed4:	00006a94 	.word	0x00006a94
    3ed8:	00003ee9 	.word	0x00003ee9
    3edc:	20000b58 	.word	0x20000b58
    3ee0:	200001a8 	.word	0x200001a8
    3ee4:	20001098 	.word	0x20001098

00003ee8 <bg_thread_main>:
{
    3ee8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3eea:	4b0a      	ldr	r3, [pc, #40]	; (3f14 <bg_thread_main+0x2c>)
    3eec:	2201      	movs	r2, #1
    3eee:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3ef0:	2002      	movs	r0, #2
    3ef2:	f7ff ff1f 	bl	3d34 <z_sys_init_run_level>
	boot_banner();
    3ef6:	f001 f841 	bl	4f7c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3efa:	2003      	movs	r0, #3
    3efc:	f7ff ff1a 	bl	3d34 <z_sys_init_run_level>
	z_init_static_threads();
    3f00:	f000 f942 	bl	4188 <z_init_static_threads>
	main();
    3f04:	f7fc faa4 	bl	450 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3f08:	4a03      	ldr	r2, [pc, #12]	; (3f18 <bg_thread_main+0x30>)
    3f0a:	7b13      	ldrb	r3, [r2, #12]
    3f0c:	f023 0301 	bic.w	r3, r3, #1
    3f10:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3f12:	bd08      	pop	{r3, pc}
    3f14:	20000999 	.word	0x20000999
    3f18:	20000258 	.word	0x20000258

00003f1c <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    3f1c:	b508      	push	{r3, lr}
    3f1e:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3f20:	4a01      	ldr	r2, [pc, #4]	; (3f28 <switch_to_main_thread+0xc>)
    3f22:	4802      	ldr	r0, [pc, #8]	; (3f2c <switch_to_main_thread+0x10>)
    3f24:	f7fd fc16 	bl	1754 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3f28:	00003ee9 	.word	0x00003ee9
    3f2c:	20000258 	.word	0x20000258

00003f30 <z_bss_zero>:
{
    3f30:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3f32:	4803      	ldr	r0, [pc, #12]	; (3f40 <z_bss_zero+0x10>)
    3f34:	4a03      	ldr	r2, [pc, #12]	; (3f44 <z_bss_zero+0x14>)
    3f36:	1a12      	subs	r2, r2, r0
    3f38:	2100      	movs	r1, #0
    3f3a:	f001 fce7 	bl	590c <memset>
}
    3f3e:	bd08      	pop	{r3, pc}
    3f40:	20000188 	.word	0x20000188
    3f44:	20000b58 	.word	0x20000b58

00003f48 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3f48:	b500      	push	{lr}
    3f4a:	b0ad      	sub	sp, #180	; 0xb4
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    3f4c:	4b1c      	ldr	r3, [pc, #112]	; (3fc0 <z_cstart+0x78>)
	uint32_t msp =
    3f4e:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3f52:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    3f56:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3f5a:	4c1a      	ldr	r4, [pc, #104]	; (3fc4 <z_cstart+0x7c>)
    3f5c:	23e0      	movs	r3, #224	; 0xe0
    3f5e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    3f62:	2500      	movs	r5, #0
    3f64:	77e5      	strb	r5, [r4, #31]
    3f66:	7625      	strb	r5, [r4, #24]
    3f68:	7665      	strb	r5, [r4, #25]
    3f6a:	76a5      	strb	r5, [r4, #26]
    3f6c:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3f72:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3f76:	6263      	str	r3, [r4, #36]	; 0x24
    3f78:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3f7c:	f7fd fd28 	bl	19d0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3f80:	f7fd fafc 	bl	157c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3f84:	f04f 33ff 	mov.w	r3, #4294967295
    3f88:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3f8a:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3f8c:	f7fd ff58 	bl	1e40 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3f90:	f7fd fde0 	bl	1b54 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    3f94:	2401      	movs	r4, #1
    3f96:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    3f9a:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    3f9e:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    3fa0:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    3fa2:	4b09      	ldr	r3, [pc, #36]	; (3fc8 <z_cstart+0x80>)
    3fa4:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3fa8:	f7ff feb8 	bl	3d1c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3fac:	4628      	mov	r0, r5
    3fae:	f7ff fec1 	bl	3d34 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3fb2:	4620      	mov	r0, r4
    3fb4:	f7ff febe 	bl	3d34 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    3fb8:	f7ff ff4e 	bl	3e58 <prepare_multithreading>
    3fbc:	f7ff ffae 	bl	3f1c <switch_to_main_thread>
    3fc0:	20001098 	.word	0x20001098
    3fc4:	e000ed00 	.word	0xe000ed00
    3fc8:	20000944 	.word	0x20000944

00003fcc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    3fcc:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3fce:	4c06      	ldr	r4, [pc, #24]	; (3fe8 <init_mem_slab_module+0x1c>)
	int rc = 0;
    3fd0:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3fd2:	4b06      	ldr	r3, [pc, #24]	; (3fec <init_mem_slab_module+0x20>)
    3fd4:	429c      	cmp	r4, r3
    3fd6:	d206      	bcs.n	3fe6 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    3fd8:	4620      	mov	r0, r4
    3fda:	f002 f8a1 	bl	6120 <create_free_list>
		if (rc < 0) {
    3fde:	2800      	cmp	r0, #0
    3fe0:	db01      	blt.n	3fe6 <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3fe2:	341c      	adds	r4, #28
    3fe4:	e7f5      	b.n	3fd2 <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    3fe6:	bd10      	pop	{r4, pc}
    3fe8:	20000138 	.word	0x20000138
    3fec:	20000138 	.word	0x20000138

00003ff0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ff2:	b083      	sub	sp, #12
    3ff4:	460c      	mov	r4, r1
    3ff6:	461f      	mov	r7, r3
	__asm__ volatile(
    3ff8:	f04f 0320 	mov.w	r3, #32
    3ffc:	f3ef 8111 	mrs	r1, BASEPRI
    4000:	f383 8812 	msr	BASEPRI_MAX, r3
    4004:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    4008:	6943      	ldr	r3, [r0, #20]
    400a:	b16b      	cbz	r3, 4028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
		/* take a free block */
		*mem = slab->free_list;
    400c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    400e:	6943      	ldr	r3, [r0, #20]
    4010:	681b      	ldr	r3, [r3, #0]
    4012:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    4014:	6983      	ldr	r3, [r0, #24]
    4016:	3301      	adds	r3, #1
    4018:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    401a:	2000      	movs	r0, #0
	__asm__ volatile(
    401c:	f381 8811 	msr	BASEPRI, r1
    4020:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    4024:	b003      	add	sp, #12
    4026:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4028:	4616      	mov	r6, r2
    402a:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    402e:	ea56 0307 	orrs.w	r3, r6, r7
    4032:	d104      	bne.n	403e <CONFIG_FPROTECT_BLOCK_SIZE+0x3e>
		*mem = NULL;
    4034:	2300      	movs	r3, #0
    4036:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    4038:	f06f 000b 	mvn.w	r0, #11
    403c:	e7ee      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    403e:	e9cd 6700 	strd	r6, r7, [sp]
    4042:	4602      	mov	r2, r0
    4044:	4628      	mov	r0, r5
    4046:	f000 fbe7 	bl	4818 <z_pend_curr>
		if (result == 0) {
    404a:	2800      	cmp	r0, #0
    404c:	d1ea      	bne.n	4024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
			*mem = _current->base.swap_data;
    404e:	4b02      	ldr	r3, [pc, #8]	; (4058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>)
    4050:	689b      	ldr	r3, [r3, #8]
    4052:	695b      	ldr	r3, [r3, #20]
    4054:	6023      	str	r3, [r4, #0]
		return result;
    4056:	e7e5      	b.n	4024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    4058:	20000944 	.word	0x20000944

0000405c <z_thread_monitor_exit>:
	__asm__ volatile(
    405c:	f04f 0320 	mov.w	r3, #32
    4060:	f3ef 8111 	mrs	r1, BASEPRI
    4064:	f383 8812 	msr	BASEPRI_MAX, r3
    4068:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    406c:	4b0a      	ldr	r3, [pc, #40]	; (4098 <z_thread_monitor_exit+0x3c>)
    406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4070:	4283      	cmp	r3, r0
    4072:	d104      	bne.n	407e <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    4074:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    4076:	4b08      	ldr	r3, [pc, #32]	; (4098 <z_thread_monitor_exit+0x3c>)
    4078:	629a      	str	r2, [r3, #40]	; 0x28
    407a:	e007      	b.n	408c <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    407c:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    407e:	b113      	cbz	r3, 4086 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    4080:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    4082:	4282      	cmp	r2, r0
    4084:	d1fa      	bne.n	407c <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    4086:	b10b      	cbz	r3, 408c <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    4088:	6f02      	ldr	r2, [r0, #112]	; 0x70
    408a:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    408c:	f381 8811 	msr	BASEPRI, r1
    4090:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    4094:	4770      	bx	lr
    4096:	bf00      	nop
    4098:	20000944 	.word	0x20000944

0000409c <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    409c:	b538      	push	{r3, r4, r5, lr}
    409e:	4614      	mov	r4, r2
    40a0:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    40a2:	ea54 0305 	orrs.w	r3, r4, r5
    40a6:	d102      	bne.n	40ae <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    40a8:	f002 f89d 	bl	61e6 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    40ac:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    40ae:	462b      	mov	r3, r5
    40b0:	4902      	ldr	r1, [pc, #8]	; (40bc <schedule_new_thread+0x20>)
    40b2:	3018      	adds	r0, #24
    40b4:	f000 fe36 	bl	4d24 <z_add_timeout>
    40b8:	e7f8      	b.n	40ac <schedule_new_thread+0x10>
    40ba:	bf00      	nop
    40bc:	000062e7 	.word	0x000062e7

000040c0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    40c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40c4:	b085      	sub	sp, #20
    40c6:	4604      	mov	r4, r0
    40c8:	460f      	mov	r7, r1
    40ca:	4615      	mov	r5, r2
    40cc:	461e      	mov	r6, r3
    40ce:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    40d2:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    40d6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    40da:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    40de:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    40e2:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    40e4:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    40e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    40e8:	2204      	movs	r2, #4
    40ea:	9911      	ldr	r1, [sp, #68]	; 0x44
    40ec:	f002 f87f 	bl	61ee <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    40f0:	462a      	mov	r2, r5
    40f2:	4639      	mov	r1, r7
    40f4:	4620      	mov	r0, r4
    40f6:	f002 f864 	bl	61c2 <setup_thread_stack>
    40fa:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    40fc:	f8cd 8008 	str.w	r8, [sp, #8]
    4100:	f8cd 9004 	str.w	r9, [sp, #4]
    4104:	f8cd a000 	str.w	sl, [sp]
    4108:	4633      	mov	r3, r6
    410a:	4602      	mov	r2, r0
    410c:	4639      	mov	r1, r7
    410e:	4620      	mov	r0, r4
    4110:	f7fd fb00 	bl	1714 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    4114:	2300      	movs	r3, #0
    4116:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    4118:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    411a:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    411e:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    4122:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    4126:	f04f 0320 	mov.w	r3, #32
    412a:	f3ef 8211 	mrs	r2, BASEPRI
    412e:	f383 8812 	msr	BASEPRI_MAX, r3
    4132:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    4136:	4b13      	ldr	r3, [pc, #76]	; (4184 <z_setup_new_thread+0xc4>)
    4138:	6a99      	ldr	r1, [r3, #40]	; 0x28
    413a:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    413c:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    413e:	f382 8811 	msr	BASEPRI, r2
    4142:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    4146:	f1bb 0f00 	cmp.w	fp, #0
    414a:	d013      	beq.n	4174 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    414c:	221f      	movs	r2, #31
    414e:	4659      	mov	r1, fp
    4150:	f104 0074 	add.w	r0, r4, #116	; 0x74
    4154:	f001 fb80 	bl	5858 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    4158:	2300      	movs	r3, #0
    415a:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    415e:	4b09      	ldr	r3, [pc, #36]	; (4184 <z_setup_new_thread+0xc4>)
    4160:	689b      	ldr	r3, [r3, #8]
    4162:	b15b      	cbz	r3, 417c <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    4164:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    4168:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    416c:	4628      	mov	r0, r5
    416e:	b005      	add	sp, #20
    4170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    4174:	2300      	movs	r3, #0
    4176:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    417a:	e7f0      	b.n	415e <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    417c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    4180:	e7f4      	b.n	416c <z_setup_new_thread+0xac>
    4182:	bf00      	nop
    4184:	20000944 	.word	0x20000944

00004188 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    4188:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    418c:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    418e:	4c23      	ldr	r4, [pc, #140]	; (421c <z_init_static_threads+0x94>)
    4190:	4b23      	ldr	r3, [pc, #140]	; (4220 <z_init_static_threads+0x98>)
    4192:	429c      	cmp	r4, r3
    4194:	d215      	bcs.n	41c2 <z_init_static_threads+0x3a>
		z_setup_new_thread(
    4196:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4198:	9305      	str	r3, [sp, #20]
    419a:	6a23      	ldr	r3, [r4, #32]
    419c:	9304      	str	r3, [sp, #16]
    419e:	69e3      	ldr	r3, [r4, #28]
    41a0:	9303      	str	r3, [sp, #12]
    41a2:	69a3      	ldr	r3, [r4, #24]
    41a4:	9302      	str	r3, [sp, #8]
    41a6:	6963      	ldr	r3, [r4, #20]
    41a8:	9301      	str	r3, [sp, #4]
    41aa:	6923      	ldr	r3, [r4, #16]
    41ac:	9300      	str	r3, [sp, #0]
    41ae:	68e3      	ldr	r3, [r4, #12]
    41b0:	68a2      	ldr	r2, [r4, #8]
    41b2:	6861      	ldr	r1, [r4, #4]
    41b4:	6820      	ldr	r0, [r4, #0]
    41b6:	f7ff ff83 	bl	40c0 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    41ba:	6823      	ldr	r3, [r4, #0]
    41bc:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    41be:	3430      	adds	r4, #48	; 0x30
    41c0:	e7e6      	b.n	4190 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    41c2:	f000 f9e1 	bl	4588 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    41c6:	4c15      	ldr	r4, [pc, #84]	; (421c <z_init_static_threads+0x94>)
    41c8:	e01b      	b.n	4202 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    41ca:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    41cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    41d0:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
    41d4:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    41d8:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    41dc:	03d8      	lsls	r0, r3, #15
    41de:	f240 35e7 	movw	r5, #999	; 0x3e7
    41e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    41e6:	2300      	movs	r3, #0
    41e8:	1940      	adds	r0, r0, r5
    41ea:	f04f 0500 	mov.w	r5, #0
    41ee:	eb45 0101 	adc.w	r1, r5, r1
    41f2:	f7fb ffaf 	bl	154 <__aeabi_uldivmod>
    41f6:	4602      	mov	r2, r0
    41f8:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    41fa:	4630      	mov	r0, r6
    41fc:	f7ff ff4e 	bl	409c <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    4200:	3430      	adds	r4, #48	; 0x30
    4202:	4b07      	ldr	r3, [pc, #28]	; (4220 <z_init_static_threads+0x98>)
    4204:	429c      	cmp	r4, r3
    4206:	d204      	bcs.n	4212 <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4208:	6a63      	ldr	r3, [r4, #36]	; 0x24
    420a:	f1b3 3fff 	cmp.w	r3, #4294967295
    420e:	d0f7      	beq.n	4200 <z_init_static_threads+0x78>
    4210:	e7db      	b.n	41ca <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    4212:	f000 fbb7 	bl	4984 <k_sched_unlock>
}
    4216:	b006      	add	sp, #24
    4218:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    421c:	20000138 	.word	0x20000138
    4220:	20000138 	.word	0x20000138

00004224 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    4224:	b508      	push	{r3, lr}
    4226:	e001      	b.n	422c <idle+0x8>
	arch_cpu_idle();
    4228:	f7fd f9ae 	bl	1588 <arch_cpu_idle>
	__asm__ volatile(
    422c:	f04f 0220 	mov.w	r2, #32
    4230:	f3ef 8311 	mrs	r3, BASEPRI
    4234:	f382 8812 	msr	BASEPRI_MAX, r2
    4238:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    423c:	f002 f936 	bl	64ac <z_get_next_timeout_expiry>
    4240:	4b03      	ldr	r3, [pc, #12]	; (4250 <idle+0x2c>)
    4242:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    4244:	f7fd f804 	bl	1250 <pm_system_suspend>
    4248:	2800      	cmp	r0, #0
    424a:	d1ef      	bne.n	422c <idle+0x8>
    424c:	e7ec      	b.n	4228 <idle+0x4>
    424e:	bf00      	nop
    4250:	20000944 	.word	0x20000944

00004254 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4258:	b083      	sub	sp, #12
    425a:	4604      	mov	r4, r0
    425c:	461d      	mov	r5, r3
    425e:	f04f 0320 	mov.w	r3, #32
    4262:	f3ef 8711 	mrs	r7, BASEPRI
    4266:	f383 8812 	msr	BASEPRI_MAX, r3
    426a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    426e:	68c1      	ldr	r1, [r0, #12]
    4270:	b999      	cbnz	r1, 429a <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    4272:	2900      	cmp	r1, #0
    4274:	d14f      	bne.n	4316 <z_impl_k_mutex_lock+0xc2>
    4276:	4b3a      	ldr	r3, [pc, #232]	; (4360 <z_impl_k_mutex_lock+0x10c>)
    4278:	689b      	ldr	r3, [r3, #8]
    427a:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    427e:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    4280:	3101      	adds	r1, #1
    4282:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    4284:	4b36      	ldr	r3, [pc, #216]	; (4360 <z_impl_k_mutex_lock+0x10c>)
    4286:	689b      	ldr	r3, [r3, #8]
    4288:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    428a:	f387 8811 	msr	BASEPRI, r7
    428e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    4292:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4294:	b003      	add	sp, #12
    4296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    429a:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    429c:	6882      	ldr	r2, [r0, #8]
    429e:	4b30      	ldr	r3, [pc, #192]	; (4360 <z_impl_k_mutex_lock+0x10c>)
    42a0:	689b      	ldr	r3, [r3, #8]
    42a2:	429a      	cmp	r2, r3
    42a4:	d0e5      	beq.n	4272 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    42a6:	ea55 0106 	orrs.w	r1, r5, r6
    42aa:	bf0c      	ite	eq
    42ac:	f04f 0801 	moveq.w	r8, #1
    42b0:	f04f 0800 	movne.w	r8, #0
    42b4:	d031      	beq.n	431a <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    42b6:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    42ba:	4649      	mov	r1, r9
    42bc:	f993 000e 	ldrsb.w	r0, [r3, #14]
    42c0:	f001 ffa6 	bl	6210 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    42c4:	4581      	cmp	r9, r0
    42c6:	dc2f      	bgt.n	4328 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    42c8:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    42cc:	9600      	str	r6, [sp, #0]
    42ce:	9501      	str	r5, [sp, #4]
    42d0:	4622      	mov	r2, r4
    42d2:	4639      	mov	r1, r7
    42d4:	4823      	ldr	r0, [pc, #140]	; (4364 <z_impl_k_mutex_lock+0x110>)
    42d6:	f000 fa9f 	bl	4818 <z_pend_curr>
	if (got_mutex == 0) {
    42da:	2800      	cmp	r0, #0
    42dc:	d0da      	beq.n	4294 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    42de:	f04f 0320 	mov.w	r3, #32
    42e2:	f3ef 8511 	mrs	r5, BASEPRI
    42e6:	f383 8812 	msr	BASEPRI_MAX, r3
    42ea:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    42ee:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    42f0:	429c      	cmp	r4, r3
    42f2:	d01f      	beq.n	4334 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    42f4:	b1f3      	cbz	r3, 4334 <z_impl_k_mutex_lock+0xe0>
    42f6:	6921      	ldr	r1, [r4, #16]
    42f8:	f993 000e 	ldrsb.w	r0, [r3, #14]
    42fc:	f001 ff88 	bl	6210 <new_prio_for_inheritance>
    4300:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4302:	4620      	mov	r0, r4
    4304:	f001 ff8f 	bl	6226 <adjust_owner_prio>
    4308:	b9b0      	cbnz	r0, 4338 <z_impl_k_mutex_lock+0xe4>
    430a:	f1b9 0f00 	cmp.w	r9, #0
    430e:	d015      	beq.n	433c <z_impl_k_mutex_lock+0xe8>
    4310:	f04f 0801 	mov.w	r8, #1
    4314:	e012      	b.n	433c <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    4316:	6923      	ldr	r3, [r4, #16]
    4318:	e7b1      	b.n	427e <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    431a:	f387 8811 	msr	BASEPRI, r7
    431e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    4322:	f06f 000f 	mvn.w	r0, #15
    4326:	e7b5      	b.n	4294 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    4328:	4601      	mov	r1, r0
    432a:	4620      	mov	r0, r4
    432c:	f001 ff7b 	bl	6226 <adjust_owner_prio>
    4330:	4681      	mov	r9, r0
    4332:	e7cb      	b.n	42cc <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4334:	6921      	ldr	r1, [r4, #16]
    4336:	e7e4      	b.n	4302 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4338:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    433c:	f1b8 0f00 	cmp.w	r8, #0
    4340:	d106      	bne.n	4350 <z_impl_k_mutex_lock+0xfc>
    4342:	f385 8811 	msr	BASEPRI, r5
    4346:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    434a:	f06f 000a 	mvn.w	r0, #10
    434e:	e7a1      	b.n	4294 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    4350:	4629      	mov	r1, r5
    4352:	4804      	ldr	r0, [pc, #16]	; (4364 <z_impl_k_mutex_lock+0x110>)
    4354:	f000 f8fc 	bl	4550 <z_reschedule>
	return -EAGAIN;
    4358:	f06f 000a 	mvn.w	r0, #10
    435c:	e79a      	b.n	4294 <z_impl_k_mutex_lock+0x40>
    435e:	bf00      	nop
    4360:	20000944 	.word	0x20000944
    4364:	20000970 	.word	0x20000970

00004368 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    4368:	6882      	ldr	r2, [r0, #8]
    436a:	2a00      	cmp	r2, #0
    436c:	d035      	beq.n	43da <z_impl_k_mutex_unlock+0x72>
{
    436e:	b538      	push	{r3, r4, r5, lr}
    4370:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4372:	4b1d      	ldr	r3, [pc, #116]	; (43e8 <z_impl_k_mutex_unlock+0x80>)
    4374:	689b      	ldr	r3, [r3, #8]
    4376:	429a      	cmp	r2, r3
    4378:	d132      	bne.n	43e0 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    437a:	7bda      	ldrb	r2, [r3, #15]
    437c:	3a01      	subs	r2, #1
    437e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    4380:	68c3      	ldr	r3, [r0, #12]
    4382:	2b01      	cmp	r3, #1
    4384:	d905      	bls.n	4392 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    4386:	3b01      	subs	r3, #1
    4388:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    438a:	f000 fafb 	bl	4984 <k_sched_unlock>

	return 0;
    438e:	2000      	movs	r0, #0
}
    4390:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4392:	f04f 0320 	mov.w	r3, #32
    4396:	f3ef 8511 	mrs	r5, BASEPRI
    439a:	f383 8812 	msr	BASEPRI_MAX, r3
    439e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    43a2:	6901      	ldr	r1, [r0, #16]
    43a4:	f001 ff3f 	bl	6226 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    43a8:	4620      	mov	r0, r4
    43aa:	f002 f81b 	bl	63e4 <z_unpend_first_thread>
	mutex->owner = new_owner;
    43ae:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    43b0:	b160      	cbz	r0, 43cc <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    43b2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    43b6:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    43b8:	2300      	movs	r3, #0
    43ba:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    43be:	f001 ff76 	bl	62ae <z_ready_thread>
		z_reschedule(&lock, key);
    43c2:	4629      	mov	r1, r5
    43c4:	4809      	ldr	r0, [pc, #36]	; (43ec <z_impl_k_mutex_unlock+0x84>)
    43c6:	f000 f8c3 	bl	4550 <z_reschedule>
    43ca:	e7de      	b.n	438a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    43cc:	2300      	movs	r3, #0
    43ce:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    43d0:	f385 8811 	msr	BASEPRI, r5
    43d4:	f3bf 8f6f 	isb	sy
    43d8:	e7d7      	b.n	438a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    43da:	f06f 0015 	mvn.w	r0, #21
}
    43de:	4770      	bx	lr
		return -EPERM;
    43e0:	f04f 30ff 	mov.w	r0, #4294967295
    43e4:	e7d4      	b.n	4390 <z_impl_k_mutex_unlock+0x28>
    43e6:	bf00      	nop
    43e8:	20000944 	.word	0x20000944
    43ec:	20000970 	.word	0x20000970

000043f0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    43f0:	b538      	push	{r3, r4, r5, lr}
    43f2:	4604      	mov	r4, r0
	__asm__ volatile(
    43f4:	f04f 0320 	mov.w	r3, #32
    43f8:	f3ef 8511 	mrs	r5, BASEPRI
    43fc:	f383 8812 	msr	BASEPRI_MAX, r3
    4400:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4404:	f001 ffee 	bl	63e4 <z_unpend_first_thread>

	if (thread != NULL) {
    4408:	b148      	cbz	r0, 441e <z_impl_k_sem_give+0x2e>
    440a:	2200      	movs	r2, #0
    440c:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4410:	f001 ff4d 	bl	62ae <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    4414:	4629      	mov	r1, r5
    4416:	4807      	ldr	r0, [pc, #28]	; (4434 <z_impl_k_sem_give+0x44>)
    4418:	f000 f89a 	bl	4550 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    441c:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    441e:	68a3      	ldr	r3, [r4, #8]
    4420:	68e2      	ldr	r2, [r4, #12]
    4422:	4293      	cmp	r3, r2
    4424:	d003      	beq.n	442e <z_impl_k_sem_give+0x3e>
    4426:	2201      	movs	r2, #1
    4428:	4413      	add	r3, r2
    442a:	60a3      	str	r3, [r4, #8]
}
    442c:	e7f2      	b.n	4414 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    442e:	2200      	movs	r2, #0
    4430:	e7fa      	b.n	4428 <z_impl_k_sem_give+0x38>
    4432:	bf00      	nop
    4434:	20000970 	.word	0x20000970

00004438 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4438:	b530      	push	{r4, r5, lr}
    443a:	b083      	sub	sp, #12
    443c:	461d      	mov	r5, r3
    443e:	f04f 0320 	mov.w	r3, #32
    4442:	f3ef 8111 	mrs	r1, BASEPRI
    4446:	f383 8812 	msr	BASEPRI_MAX, r3
    444a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    444e:	6883      	ldr	r3, [r0, #8]
    4450:	b143      	cbz	r3, 4464 <z_impl_k_sem_take+0x2c>
		sem->count--;
    4452:	3b01      	subs	r3, #1
    4454:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    4456:	f381 8811 	msr	BASEPRI, r1
    445a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    445e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    4460:	b003      	add	sp, #12
    4462:	bd30      	pop	{r4, r5, pc}
    4464:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4466:	ea54 0305 	orrs.w	r3, r4, r5
    446a:	d006      	beq.n	447a <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    446c:	e9cd 4500 	strd	r4, r5, [sp]
    4470:	4602      	mov	r2, r0
    4472:	4805      	ldr	r0, [pc, #20]	; (4488 <z_impl_k_sem_take+0x50>)
    4474:	f000 f9d0 	bl	4818 <z_pend_curr>
	return ret;
    4478:	e7f2      	b.n	4460 <z_impl_k_sem_take+0x28>
    447a:	f381 8811 	msr	BASEPRI, r1
    447e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    4482:	f06f 000f 	mvn.w	r0, #15
    4486:	e7eb      	b.n	4460 <z_impl_k_sem_take+0x28>
    4488:	20000970 	.word	0x20000970

0000448c <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    448c:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    448e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4492:	bf08      	it	eq
    4494:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    4498:	d100      	bne.n	449c <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    449a:	bd38      	pop	{r3, r4, r5, pc}
    449c:	4902      	ldr	r1, [pc, #8]	; (44a8 <add_thread_timeout+0x1c>)
    449e:	3018      	adds	r0, #24
    44a0:	f000 fc40 	bl	4d24 <z_add_timeout>
    44a4:	e7f9      	b.n	449a <add_thread_timeout+0xe>
    44a6:	bf00      	nop
    44a8:	000062e7 	.word	0x000062e7

000044ac <z_reset_time_slice>:
{
    44ac:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    44ae:	4b08      	ldr	r3, [pc, #32]	; (44d0 <z_reset_time_slice+0x24>)
    44b0:	681b      	ldr	r3, [r3, #0]
    44b2:	b903      	cbnz	r3, 44b6 <z_reset_time_slice+0xa>
}
    44b4:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    44b6:	f7fe fc4b 	bl	2d50 <sys_clock_elapsed>
    44ba:	4603      	mov	r3, r0
    44bc:	4a04      	ldr	r2, [pc, #16]	; (44d0 <z_reset_time_slice+0x24>)
    44be:	6810      	ldr	r0, [r2, #0]
    44c0:	4403      	add	r3, r0
    44c2:	4a04      	ldr	r2, [pc, #16]	; (44d4 <z_reset_time_slice+0x28>)
    44c4:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    44c6:	2100      	movs	r1, #0
    44c8:	f002 f806 	bl	64d8 <z_set_timeout_expiry>
}
    44cc:	e7f2      	b.n	44b4 <z_reset_time_slice+0x8>
    44ce:	bf00      	nop
    44d0:	20000978 	.word	0x20000978
    44d4:	20000944 	.word	0x20000944

000044d8 <k_sched_time_slice_set>:
{
    44d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44dc:	4606      	mov	r6, r0
    44de:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    44e0:	2300      	movs	r3, #0
	__asm__ volatile(
    44e2:	f04f 0220 	mov.w	r2, #32
    44e6:	f3ef 8711 	mrs	r7, BASEPRI
    44ea:	f382 8812 	msr	BASEPRI_MAX, r2
    44ee:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    44f2:	e009      	b.n	4508 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
    44f4:	4b13      	ldr	r3, [pc, #76]	; (4544 <k_sched_time_slice_set+0x6c>)
    44f6:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    44fa:	f7ff ffd7 	bl	44ac <z_reset_time_slice>
	__asm__ volatile(
    44fe:	f387 8811 	msr	BASEPRI, r7
    4502:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4506:	2301      	movs	r3, #1
    4508:	b9cb      	cbnz	r3, 453e <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
    450a:	2300      	movs	r3, #0
    450c:	4a0e      	ldr	r2, [pc, #56]	; (4548 <k_sched_time_slice_set+0x70>)
    450e:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    4510:	0c75      	lsrs	r5, r6, #17
    4512:	03f4      	lsls	r4, r6, #15
    4514:	f240 30e7 	movw	r0, #999	; 0x3e7
    4518:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    451c:	2300      	movs	r3, #0
    451e:	1820      	adds	r0, r4, r0
    4520:	f04f 0100 	mov.w	r1, #0
    4524:	eb45 0101 	adc.w	r1, r5, r1
    4528:	f7fb fe14 	bl	154 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    452c:	4b07      	ldr	r3, [pc, #28]	; (454c <k_sched_time_slice_set+0x74>)
    452e:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4530:	2e00      	cmp	r6, #0
    4532:	dddf      	ble.n	44f4 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
    4534:	2802      	cmp	r0, #2
    4536:	bfb8      	it	lt
    4538:	2002      	movlt	r0, #2
    453a:	6018      	str	r0, [r3, #0]
    453c:	e7da      	b.n	44f4 <k_sched_time_slice_set+0x1c>
}
    453e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4542:	bf00      	nop
    4544:	20000974 	.word	0x20000974
    4548:	20000944 	.word	0x20000944
    454c:	20000978 	.word	0x20000978

00004550 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    4550:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    4552:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4554:	b921      	cbnz	r1, 4560 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4556:	f3ef 8305 	mrs	r3, IPSR
    455a:	b913      	cbnz	r3, 4562 <z_reschedule+0x12>
    455c:	2101      	movs	r1, #1
    455e:	e000      	b.n	4562 <z_reschedule+0x12>
    4560:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    4562:	f011 0f01 	tst.w	r1, #1
    4566:	d007      	beq.n	4578 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    4568:	4b06      	ldr	r3, [pc, #24]	; (4584 <z_reschedule+0x34>)
    456a:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    456c:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    456e:	429a      	cmp	r2, r3
    4570:	d002      	beq.n	4578 <z_reschedule+0x28>
	ret = arch_swap(key);
    4572:	f7fd f875 	bl	1660 <arch_swap>
		z_swap(lock, key);
    4576:	e003      	b.n	4580 <z_reschedule+0x30>
    4578:	f380 8811 	msr	BASEPRI, r0
    457c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    4580:	bd08      	pop	{r3, pc}
    4582:	bf00      	nop
    4584:	20000944 	.word	0x20000944

00004588 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    4588:	2300      	movs	r3, #0
	__asm__ volatile(
    458a:	f04f 0220 	mov.w	r2, #32
    458e:	f3ef 8111 	mrs	r1, BASEPRI
    4592:	f382 8812 	msr	BASEPRI_MAX, r2
    4596:	f3bf 8f6f 	isb	sy
    459a:	b953      	cbnz	r3, 45b2 <k_sched_lock+0x2a>
    459c:	4b05      	ldr	r3, [pc, #20]	; (45b4 <k_sched_lock+0x2c>)
    459e:	689a      	ldr	r2, [r3, #8]
    45a0:	7bd3      	ldrb	r3, [r2, #15]
    45a2:	3b01      	subs	r3, #1
    45a4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    45a6:	f381 8811 	msr	BASEPRI, r1
    45aa:	f3bf 8f6f 	isb	sy
    45ae:	2301      	movs	r3, #1
    45b0:	e7f3      	b.n	459a <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    45b2:	4770      	bx	lr
    45b4:	20000944 	.word	0x20000944

000045b8 <update_cache>:
{
    45b8:	b538      	push	{r3, r4, r5, lr}
    45ba:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    45bc:	480f      	ldr	r0, [pc, #60]	; (45fc <update_cache+0x44>)
    45be:	f001 fe6f 	bl	62a0 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    45c2:	4605      	mov	r5, r0
    45c4:	b170      	cbz	r0, 45e4 <update_cache+0x2c>
	if (preempt_ok != 0) {
    45c6:	b984      	cbnz	r4, 45ea <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    45c8:	4b0d      	ldr	r3, [pc, #52]	; (4600 <update_cache+0x48>)
    45ca:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    45cc:	7b5a      	ldrb	r2, [r3, #13]
    45ce:	f012 0f1f 	tst.w	r2, #31
    45d2:	d10a      	bne.n	45ea <update_cache+0x32>
	return node->next != NULL;
    45d4:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    45d6:	b942      	cbnz	r2, 45ea <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    45d8:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    45da:	2a7f      	cmp	r2, #127	; 0x7f
    45dc:	d905      	bls.n	45ea <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    45de:	4a08      	ldr	r2, [pc, #32]	; (4600 <update_cache+0x48>)
    45e0:	61d3      	str	r3, [r2, #28]
    45e2:	e00a      	b.n	45fa <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    45e4:	4b06      	ldr	r3, [pc, #24]	; (4600 <update_cache+0x48>)
    45e6:	68dd      	ldr	r5, [r3, #12]
    45e8:	e7ed      	b.n	45c6 <update_cache+0xe>
		if (thread != _current) {
    45ea:	4b05      	ldr	r3, [pc, #20]	; (4600 <update_cache+0x48>)
    45ec:	689b      	ldr	r3, [r3, #8]
    45ee:	42ab      	cmp	r3, r5
    45f0:	d001      	beq.n	45f6 <update_cache+0x3e>
			z_reset_time_slice();
    45f2:	f7ff ff5b 	bl	44ac <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    45f6:	4b02      	ldr	r3, [pc, #8]	; (4600 <update_cache+0x48>)
    45f8:	61dd      	str	r5, [r3, #28]
}
    45fa:	bd38      	pop	{r3, r4, r5, pc}
    45fc:	20000964 	.word	0x20000964
    4600:	20000944 	.word	0x20000944

00004604 <move_thread_to_end_of_prio_q>:
{
    4604:	b538      	push	{r3, r4, r5, lr}
    4606:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    4608:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    460a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    460e:	2b00      	cmp	r3, #0
    4610:	db28      	blt.n	4664 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    4612:	7b6b      	ldrb	r3, [r5, #13]
    4614:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4618:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    461a:	4b1a      	ldr	r3, [pc, #104]	; (4684 <move_thread_to_end_of_prio_q+0x80>)
    461c:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4620:	429c      	cmp	r4, r3
    4622:	d02d      	beq.n	4680 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4624:	b16c      	cbz	r4, 4642 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4626:	4621      	mov	r1, r4
    4628:	4628      	mov	r0, r5
    462a:	f001 fe12 	bl	6252 <z_sched_prio_cmp>
    462e:	2800      	cmp	r0, #0
    4630:	dc20      	bgt.n	4674 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4632:	b134      	cbz	r4, 4642 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    4634:	4b13      	ldr	r3, [pc, #76]	; (4684 <move_thread_to_end_of_prio_q+0x80>)
    4636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4638:	429c      	cmp	r4, r3
    463a:	d002      	beq.n	4642 <move_thread_to_end_of_prio_q+0x3e>
    463c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    463e:	2c00      	cmp	r4, #0
    4640:	d1f0      	bne.n	4624 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    4642:	4b10      	ldr	r3, [pc, #64]	; (4684 <move_thread_to_end_of_prio_q+0x80>)
    4644:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    4646:	f103 0120 	add.w	r1, r3, #32
    464a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    464c:	606a      	str	r2, [r5, #4]

	tail->next = node;
    464e:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4650:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    4652:	4b0c      	ldr	r3, [pc, #48]	; (4684 <move_thread_to_end_of_prio_q+0x80>)
    4654:	6898      	ldr	r0, [r3, #8]
    4656:	42a8      	cmp	r0, r5
    4658:	bf14      	ite	ne
    465a:	2000      	movne	r0, #0
    465c:	2001      	moveq	r0, #1
    465e:	f7ff ffab 	bl	45b8 <update_cache>
}
    4662:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4664:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4668:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    466a:	4601      	mov	r1, r0
    466c:	4806      	ldr	r0, [pc, #24]	; (4688 <move_thread_to_end_of_prio_q+0x84>)
    466e:	f001 fe0f 	bl	6290 <z_priq_dumb_remove>
}
    4672:	e7ce      	b.n	4612 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    4674:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    4676:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4678:	602c      	str	r4, [r5, #0]
	prev->next = node;
    467a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    467c:	6065      	str	r5, [r4, #4]
}
    467e:	e7e8      	b.n	4652 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4680:	2400      	movs	r4, #0
    4682:	e7cf      	b.n	4624 <move_thread_to_end_of_prio_q+0x20>
    4684:	20000944 	.word	0x20000944
    4688:	20000964 	.word	0x20000964

0000468c <z_time_slice>:
{
    468c:	b510      	push	{r4, lr}
	__asm__ volatile(
    468e:	f04f 0320 	mov.w	r3, #32
    4692:	f3ef 8411 	mrs	r4, BASEPRI
    4696:	f383 8812 	msr	BASEPRI_MAX, r3
    469a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    469e:	4b1c      	ldr	r3, [pc, #112]	; (4710 <z_time_slice+0x84>)
    46a0:	689b      	ldr	r3, [r3, #8]
    46a2:	4a1c      	ldr	r2, [pc, #112]	; (4714 <z_time_slice+0x88>)
    46a4:	6812      	ldr	r2, [r2, #0]
    46a6:	4293      	cmp	r3, r2
    46a8:	d01d      	beq.n	46e6 <z_time_slice+0x5a>
	pending_current = NULL;
    46aa:	4a1a      	ldr	r2, [pc, #104]	; (4714 <z_time_slice+0x88>)
    46ac:	2100      	movs	r1, #0
    46ae:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    46b0:	4a19      	ldr	r2, [pc, #100]	; (4718 <z_time_slice+0x8c>)
    46b2:	6812      	ldr	r2, [r2, #0]
    46b4:	b322      	cbz	r2, 4700 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    46b6:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    46b8:	2a7f      	cmp	r2, #127	; 0x7f
    46ba:	d821      	bhi.n	4700 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
    46bc:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    46be:	f012 0f1f 	tst.w	r2, #31
    46c2:	d11d      	bne.n	4700 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    46c4:	f993 100e 	ldrsb.w	r1, [r3, #14]
    46c8:	4a14      	ldr	r2, [pc, #80]	; (471c <z_time_slice+0x90>)
    46ca:	6812      	ldr	r2, [r2, #0]
    46cc:	4291      	cmp	r1, r2
    46ce:	db17      	blt.n	4700 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    46d0:	4a13      	ldr	r2, [pc, #76]	; (4720 <z_time_slice+0x94>)
    46d2:	4293      	cmp	r3, r2
    46d4:	d014      	beq.n	4700 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    46d6:	4a0e      	ldr	r2, [pc, #56]	; (4710 <z_time_slice+0x84>)
    46d8:	6912      	ldr	r2, [r2, #16]
    46da:	4282      	cmp	r2, r0
    46dc:	dd0a      	ble.n	46f4 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
    46de:	1a10      	subs	r0, r2, r0
    46e0:	4b0b      	ldr	r3, [pc, #44]	; (4710 <z_time_slice+0x84>)
    46e2:	6118      	str	r0, [r3, #16]
    46e4:	e00f      	b.n	4706 <z_time_slice+0x7a>
		z_reset_time_slice();
    46e6:	f7ff fee1 	bl	44ac <z_reset_time_slice>
	__asm__ volatile(
    46ea:	f384 8811 	msr	BASEPRI, r4
    46ee:	f3bf 8f6f 	isb	sy
		return;
    46f2:	e00c      	b.n	470e <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
    46f4:	4618      	mov	r0, r3
    46f6:	f7ff ff85 	bl	4604 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    46fa:	f7ff fed7 	bl	44ac <z_reset_time_slice>
    46fe:	e002      	b.n	4706 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
    4700:	4b03      	ldr	r3, [pc, #12]	; (4710 <z_time_slice+0x84>)
    4702:	2200      	movs	r2, #0
    4704:	611a      	str	r2, [r3, #16]
    4706:	f384 8811 	msr	BASEPRI, r4
    470a:	f3bf 8f6f 	isb	sy
}
    470e:	bd10      	pop	{r4, pc}
    4710:	20000944 	.word	0x20000944
    4714:	20000970 	.word	0x20000970
    4718:	20000978 	.word	0x20000978
    471c:	20000974 	.word	0x20000974
    4720:	200001a8 	.word	0x200001a8

00004724 <ready_thread>:
{
    4724:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    4726:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4728:	f990 200d 	ldrsb.w	r2, [r0, #13]
    472c:	2a00      	cmp	r2, #0
    472e:	db2d      	blt.n	478c <ready_thread+0x68>
    4730:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4732:	f013 0f1f 	tst.w	r3, #31
    4736:	d105      	bne.n	4744 <ready_thread+0x20>
	return node->next != NULL;
    4738:	6982      	ldr	r2, [r0, #24]
    473a:	b10a      	cbz	r2, 4740 <ready_thread+0x1c>
    473c:	2200      	movs	r2, #0
    473e:	e002      	b.n	4746 <ready_thread+0x22>
    4740:	2201      	movs	r2, #1
    4742:	e000      	b.n	4746 <ready_thread+0x22>
    4744:	2200      	movs	r2, #0
    4746:	b30a      	cbz	r2, 478c <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    4748:	f063 037f 	orn	r3, r3, #127	; 0x7f
    474c:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    474e:	4b14      	ldr	r3, [pc, #80]	; (47a0 <ready_thread+0x7c>)
    4750:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4754:	429d      	cmp	r5, r3
    4756:	d020      	beq.n	479a <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4758:	b16d      	cbz	r5, 4776 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    475a:	4629      	mov	r1, r5
    475c:	4620      	mov	r0, r4
    475e:	f001 fd78 	bl	6252 <z_sched_prio_cmp>
    4762:	2800      	cmp	r0, #0
    4764:	dc13      	bgt.n	478e <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4766:	b135      	cbz	r5, 4776 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    4768:	4b0d      	ldr	r3, [pc, #52]	; (47a0 <ready_thread+0x7c>)
    476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    476c:	429d      	cmp	r5, r3
    476e:	d002      	beq.n	4776 <ready_thread+0x52>
    4770:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4772:	2d00      	cmp	r5, #0
    4774:	d1f0      	bne.n	4758 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    4776:	4b0a      	ldr	r3, [pc, #40]	; (47a0 <ready_thread+0x7c>)
    4778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    477a:	f103 0120 	add.w	r1, r3, #32
    477e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    4780:	6062      	str	r2, [r4, #4]
	tail->next = node;
    4782:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4784:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    4786:	2000      	movs	r0, #0
    4788:	f7ff ff16 	bl	45b8 <update_cache>
}
    478c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    478e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    4790:	6063      	str	r3, [r4, #4]
	node->next = successor;
    4792:	6025      	str	r5, [r4, #0]
	prev->next = node;
    4794:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4796:	606c      	str	r4, [r5, #4]
}
    4798:	e7f5      	b.n	4786 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    479a:	2500      	movs	r5, #0
    479c:	e7dc      	b.n	4758 <ready_thread+0x34>
    479e:	bf00      	nop
    47a0:	20000944 	.word	0x20000944

000047a4 <z_sched_start>:
{
    47a4:	b510      	push	{r4, lr}
	__asm__ volatile(
    47a6:	f04f 0320 	mov.w	r3, #32
    47aa:	f3ef 8411 	mrs	r4, BASEPRI
    47ae:	f383 8812 	msr	BASEPRI_MAX, r3
    47b2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    47b6:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    47b8:	f013 0f04 	tst.w	r3, #4
    47bc:	d104      	bne.n	47c8 <z_sched_start+0x24>
	__asm__ volatile(
    47be:	f384 8811 	msr	BASEPRI, r4
    47c2:	f3bf 8f6f 	isb	sy
}
    47c6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    47c8:	f023 0304 	bic.w	r3, r3, #4
    47cc:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    47ce:	f7ff ffa9 	bl	4724 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    47d2:	4621      	mov	r1, r4
    47d4:	4801      	ldr	r0, [pc, #4]	; (47dc <z_sched_start+0x38>)
    47d6:	f7ff febb 	bl	4550 <z_reschedule>
    47da:	e7f4      	b.n	47c6 <z_sched_start+0x22>
    47dc:	20000974 	.word	0x20000974

000047e0 <unready_thread>:
{
    47e0:	b510      	push	{r4, lr}
    47e2:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    47e4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    47e6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    47ea:	2b00      	cmp	r3, #0
    47ec:	db08      	blt.n	4800 <unready_thread+0x20>
	update_cache(thread == _current);
    47ee:	4b08      	ldr	r3, [pc, #32]	; (4810 <unready_thread+0x30>)
    47f0:	6898      	ldr	r0, [r3, #8]
    47f2:	42a0      	cmp	r0, r4
    47f4:	bf14      	ite	ne
    47f6:	2000      	movne	r0, #0
    47f8:	2001      	moveq	r0, #1
    47fa:	f7ff fedd 	bl	45b8 <update_cache>
}
    47fe:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4800:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4804:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4806:	4601      	mov	r1, r0
    4808:	4802      	ldr	r0, [pc, #8]	; (4814 <unready_thread+0x34>)
    480a:	f001 fd41 	bl	6290 <z_priq_dumb_remove>
}
    480e:	e7ee      	b.n	47ee <unready_thread+0xe>
    4810:	20000944 	.word	0x20000944
    4814:	20000964 	.word	0x20000964

00004818 <z_pend_curr>:
{
    4818:	b510      	push	{r4, lr}
    481a:	460c      	mov	r4, r1
    481c:	4611      	mov	r1, r2
	pending_current = _current;
    481e:	4b06      	ldr	r3, [pc, #24]	; (4838 <z_pend_curr+0x20>)
    4820:	6898      	ldr	r0, [r3, #8]
    4822:	4b06      	ldr	r3, [pc, #24]	; (483c <z_pend_curr+0x24>)
    4824:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    4826:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    482a:	f001 fdba 	bl	63a2 <pend>
    482e:	4620      	mov	r0, r4
    4830:	f7fc ff16 	bl	1660 <arch_swap>
}
    4834:	bd10      	pop	{r4, pc}
    4836:	bf00      	nop
    4838:	20000944 	.word	0x20000944
    483c:	20000970 	.word	0x20000970

00004840 <z_set_prio>:
{
    4840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4844:	4604      	mov	r4, r0
    4846:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    4848:	2300      	movs	r3, #0
	__asm__ volatile(
    484a:	f04f 0220 	mov.w	r2, #32
    484e:	f3ef 8611 	mrs	r6, BASEPRI
    4852:	f382 8812 	msr	BASEPRI_MAX, r2
    4856:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    485a:	4698      	mov	r8, r3
    485c:	e008      	b.n	4870 <z_set_prio+0x30>
		if (need_sched) {
    485e:	f012 0801 	ands.w	r8, r2, #1
    4862:	d111      	bne.n	4888 <z_set_prio+0x48>
			thread->base.prio = prio;
    4864:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
    4866:	f386 8811 	msr	BASEPRI, r6
    486a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    486e:	2301      	movs	r3, #1
    4870:	461a      	mov	r2, r3
    4872:	2b00      	cmp	r3, #0
    4874:	d13d      	bne.n	48f2 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    4876:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4878:	f013 0f1f 	tst.w	r3, #31
    487c:	d1ef      	bne.n	485e <z_set_prio+0x1e>
	return node->next != NULL;
    487e:	69a1      	ldr	r1, [r4, #24]
    4880:	2900      	cmp	r1, #0
    4882:	d1ec      	bne.n	485e <z_set_prio+0x1e>
    4884:	2201      	movs	r2, #1
    4886:	e7ea      	b.n	485e <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    488c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    488e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 48fc <z_set_prio+0xbc>
    4892:	4621      	mov	r1, r4
    4894:	4648      	mov	r0, r9
    4896:	f001 fcfb 	bl	6290 <z_priq_dumb_remove>
				thread->base.prio = prio;
    489a:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    489c:	7b63      	ldrb	r3, [r4, #13]
    489e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    48a2:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    48a4:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    48a8:	454d      	cmp	r5, r9
    48aa:	d020      	beq.n	48ee <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    48ac:	b16d      	cbz	r5, 48ca <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    48ae:	4629      	mov	r1, r5
    48b0:	4620      	mov	r0, r4
    48b2:	f001 fcce 	bl	6252 <z_sched_prio_cmp>
    48b6:	2800      	cmp	r0, #0
    48b8:	dc13      	bgt.n	48e2 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    48ba:	b135      	cbz	r5, 48ca <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    48bc:	4b0e      	ldr	r3, [pc, #56]	; (48f8 <z_set_prio+0xb8>)
    48be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    48c0:	429d      	cmp	r5, r3
    48c2:	d002      	beq.n	48ca <z_set_prio+0x8a>
    48c4:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    48c6:	2d00      	cmp	r5, #0
    48c8:	d1f0      	bne.n	48ac <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    48ca:	4b0b      	ldr	r3, [pc, #44]	; (48f8 <z_set_prio+0xb8>)
    48cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    48ce:	f103 0120 	add.w	r1, r3, #32
    48d2:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    48d4:	6062      	str	r2, [r4, #4]
	tail->next = node;
    48d6:	6014      	str	r4, [r2, #0]
	list->tail = node;
    48d8:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    48da:	2001      	movs	r0, #1
    48dc:	f7ff fe6c 	bl	45b8 <update_cache>
    48e0:	e7c1      	b.n	4866 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    48e2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    48e4:	6063      	str	r3, [r4, #4]
	node->next = successor;
    48e6:	6025      	str	r5, [r4, #0]
	prev->next = node;
    48e8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    48ea:	606c      	str	r4, [r5, #4]
}
    48ec:	e7f5      	b.n	48da <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    48ee:	2500      	movs	r5, #0
    48f0:	e7dc      	b.n	48ac <z_set_prio+0x6c>
}
    48f2:	4640      	mov	r0, r8
    48f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    48f8:	20000944 	.word	0x20000944
    48fc:	20000964 	.word	0x20000964

00004900 <z_impl_k_thread_suspend>:
{
    4900:	b538      	push	{r3, r4, r5, lr}
    4902:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4904:	3018      	adds	r0, #24
    4906:	f001 fdb3 	bl	6470 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    490a:	2300      	movs	r3, #0
	__asm__ volatile(
    490c:	f04f 0220 	mov.w	r2, #32
    4910:	f3ef 8511 	mrs	r5, BASEPRI
    4914:	f382 8812 	msr	BASEPRI_MAX, r2
    4918:	f3bf 8f6f 	isb	sy
    491c:	e010      	b.n	4940 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    491e:	7b63      	ldrb	r3, [r4, #13]
    4920:	f043 0310 	orr.w	r3, r3, #16
    4924:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    4926:	4b15      	ldr	r3, [pc, #84]	; (497c <z_impl_k_thread_suspend+0x7c>)
    4928:	6898      	ldr	r0, [r3, #8]
    492a:	42a0      	cmp	r0, r4
    492c:	bf14      	ite	ne
    492e:	2000      	movne	r0, #0
    4930:	2001      	moveq	r0, #1
    4932:	f7ff fe41 	bl	45b8 <update_cache>
	__asm__ volatile(
    4936:	f385 8811 	msr	BASEPRI, r5
    493a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    493e:	2301      	movs	r3, #1
    4940:	b963      	cbnz	r3, 495c <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    4942:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    4944:	f994 300d 	ldrsb.w	r3, [r4, #13]
    4948:	2b00      	cmp	r3, #0
    494a:	dae8      	bge.n	491e <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    494c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4950:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4952:	4621      	mov	r1, r4
    4954:	480a      	ldr	r0, [pc, #40]	; (4980 <z_impl_k_thread_suspend+0x80>)
    4956:	f001 fc9b 	bl	6290 <z_priq_dumb_remove>
}
    495a:	e7e0      	b.n	491e <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    495c:	4b07      	ldr	r3, [pc, #28]	; (497c <z_impl_k_thread_suspend+0x7c>)
    495e:	689b      	ldr	r3, [r3, #8]
    4960:	42a3      	cmp	r3, r4
    4962:	d000      	beq.n	4966 <z_impl_k_thread_suspend+0x66>
}
    4964:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4966:	f04f 0320 	mov.w	r3, #32
    496a:	f3ef 8011 	mrs	r0, BASEPRI
    496e:	f383 8812 	msr	BASEPRI_MAX, r3
    4972:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4976:	f001 fc76 	bl	6266 <z_reschedule_irqlock>
    497a:	e7f3      	b.n	4964 <z_impl_k_thread_suspend+0x64>
    497c:	20000944 	.word	0x20000944
    4980:	20000964 	.word	0x20000964

00004984 <k_sched_unlock>:

void k_sched_unlock(void)
{
    4984:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    4986:	2300      	movs	r3, #0
    4988:	f04f 0220 	mov.w	r2, #32
    498c:	f3ef 8411 	mrs	r4, BASEPRI
    4990:	f382 8812 	msr	BASEPRI_MAX, r2
    4994:	f3bf 8f6f 	isb	sy
    4998:	b96b      	cbnz	r3, 49b6 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    499a:	4b0c      	ldr	r3, [pc, #48]	; (49cc <k_sched_unlock+0x48>)
    499c:	689a      	ldr	r2, [r3, #8]
    499e:	7bd3      	ldrb	r3, [r2, #15]
    49a0:	3301      	adds	r3, #1
    49a2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    49a4:	2000      	movs	r0, #0
    49a6:	f7ff fe07 	bl	45b8 <update_cache>
	__asm__ volatile(
    49aa:	f384 8811 	msr	BASEPRI, r4
    49ae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    49b2:	2301      	movs	r3, #1
    49b4:	e7f0      	b.n	4998 <k_sched_unlock+0x14>
	__asm__ volatile(
    49b6:	f04f 0320 	mov.w	r3, #32
    49ba:	f3ef 8011 	mrs	r0, BASEPRI
    49be:	f383 8812 	msr	BASEPRI_MAX, r3
    49c2:	f3bf 8f6f 	isb	sy
    49c6:	f001 fc4e 	bl	6266 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    49ca:	bd10      	pop	{r4, pc}
    49cc:	20000944 	.word	0x20000944

000049d0 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    49d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    49d2:	7b43      	ldrb	r3, [r0, #13]
    49d4:	f013 0f08 	tst.w	r3, #8
    49d8:	d145      	bne.n	4a66 <end_thread+0x96>
    49da:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    49dc:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    49e0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    49e4:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    49e6:	f013 0f80 	tst.w	r3, #128	; 0x80
    49ea:	d114      	bne.n	4a16 <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    49ec:	68ab      	ldr	r3, [r5, #8]
    49ee:	b15b      	cbz	r3, 4a08 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    49f0:	4628      	mov	r0, r5
    49f2:	f001 fc2c 	bl	624e <pended_on_thread>
    49f6:	4629      	mov	r1, r5
    49f8:	f001 fc4a 	bl	6290 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    49fc:	7b6b      	ldrb	r3, [r5, #13]
    49fe:	f023 0302 	bic.w	r3, r3, #2
    4a02:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    4a04:	2300      	movs	r3, #0
    4a06:	60ab      	str	r3, [r5, #8]
    4a08:	f105 0018 	add.w	r0, r5, #24
    4a0c:	f001 fd30 	bl	6470 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    4a10:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    4a14:	e01c      	b.n	4a50 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4a1a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4a1c:	4601      	mov	r1, r0
    4a1e:	4812      	ldr	r0, [pc, #72]	; (4a68 <end_thread+0x98>)
    4a20:	f001 fc36 	bl	6290 <z_priq_dumb_remove>
}
    4a24:	e7e2      	b.n	49ec <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    4a26:	4620      	mov	r0, r4
    4a28:	f001 fc11 	bl	624e <pended_on_thread>
    4a2c:	4621      	mov	r1, r4
    4a2e:	f001 fc2f 	bl	6290 <z_priq_dumb_remove>
    4a32:	7b63      	ldrb	r3, [r4, #13]
    4a34:	f023 0302 	bic.w	r3, r3, #2
    4a38:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    4a3a:	2600      	movs	r6, #0
    4a3c:	60a6      	str	r6, [r4, #8]
    4a3e:	f104 0018 	add.w	r0, r4, #24
    4a42:	f001 fd15 	bl	6470 <z_abort_timeout>
    4a46:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    4a4a:	4620      	mov	r0, r4
    4a4c:	f7ff fe6a 	bl	4724 <ready_thread>
	return list->head == list;
    4a50:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4a52:	42bc      	cmp	r4, r7
    4a54:	d001      	beq.n	4a5a <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    4a56:	2c00      	cmp	r4, #0
    4a58:	d1e5      	bne.n	4a26 <end_thread+0x56>
		update_cache(1);
    4a5a:	2001      	movs	r0, #1
    4a5c:	f7ff fdac 	bl	45b8 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    4a60:	4628      	mov	r0, r5
    4a62:	f7ff fafb 	bl	405c <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    4a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a68:	20000964 	.word	0x20000964

00004a6c <z_sched_init>:
{
    4a6c:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    4a6e:	4804      	ldr	r0, [pc, #16]	; (4a80 <z_sched_init+0x14>)
    4a70:	f001 fce3 	bl	643a <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4a74:	2100      	movs	r1, #0
    4a76:	4608      	mov	r0, r1
    4a78:	f7ff fd2e 	bl	44d8 <k_sched_time_slice_set>
}
    4a7c:	bd08      	pop	{r3, pc}
    4a7e:	bf00      	nop
    4a80:	20000960 	.word	0x20000960

00004a84 <z_impl_k_yield>:
{
    4a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a86:	f04f 0320 	mov.w	r3, #32
    4a8a:	f3ef 8611 	mrs	r6, BASEPRI
    4a8e:	f383 8812 	msr	BASEPRI_MAX, r3
    4a92:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    4a96:	4c1c      	ldr	r4, [pc, #112]	; (4b08 <z_impl_k_yield+0x84>)
    4a98:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4a9a:	7b4b      	ldrb	r3, [r1, #13]
    4a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4aa0:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4aa2:	f104 0720 	add.w	r7, r4, #32
    4aa6:	4638      	mov	r0, r7
    4aa8:	f001 fbf2 	bl	6290 <z_priq_dumb_remove>
	queue_thread(_current);
    4aac:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4aae:	7b6b      	ldrb	r3, [r5, #13]
    4ab0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4ab4:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    4ab6:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ab8:	42bc      	cmp	r4, r7
    4aba:	d023      	beq.n	4b04 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4abc:	b16c      	cbz	r4, 4ada <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4abe:	4621      	mov	r1, r4
    4ac0:	4628      	mov	r0, r5
    4ac2:	f001 fbc6 	bl	6252 <z_sched_prio_cmp>
    4ac6:	2800      	cmp	r0, #0
    4ac8:	dc16      	bgt.n	4af8 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4aca:	b134      	cbz	r4, 4ada <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    4acc:	4b0e      	ldr	r3, [pc, #56]	; (4b08 <z_impl_k_yield+0x84>)
    4ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4ad0:	429c      	cmp	r4, r3
    4ad2:	d002      	beq.n	4ada <z_impl_k_yield+0x56>
    4ad4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4ad6:	2c00      	cmp	r4, #0
    4ad8:	d1f0      	bne.n	4abc <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    4ada:	4b0b      	ldr	r3, [pc, #44]	; (4b08 <z_impl_k_yield+0x84>)
    4adc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    4ade:	f103 0120 	add.w	r1, r3, #32
    4ae2:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    4ae4:	606a      	str	r2, [r5, #4]
	tail->next = node;
    4ae6:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4ae8:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    4aea:	2001      	movs	r0, #1
    4aec:	f7ff fd64 	bl	45b8 <update_cache>
    4af0:	4630      	mov	r0, r6
    4af2:	f7fc fdb5 	bl	1660 <arch_swap>
}
    4af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    4af8:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    4afa:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4afc:	602c      	str	r4, [r5, #0]
	prev->next = node;
    4afe:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4b00:	6065      	str	r5, [r4, #4]
}
    4b02:	e7f2      	b.n	4aea <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4b04:	2400      	movs	r4, #0
    4b06:	e7d9      	b.n	4abc <z_impl_k_yield+0x38>
    4b08:	20000944 	.word	0x20000944

00004b0c <z_tick_sleep>:
{
    4b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b10:	4604      	mov	r4, r0
    4b12:	460d      	mov	r5, r1
	if (ticks == 0) {
    4b14:	ea54 0105 	orrs.w	r1, r4, r5
    4b18:	d037      	beq.n	4b8a <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    4b1a:	f06f 0101 	mvn.w	r1, #1
    4b1e:	1a0a      	subs	r2, r1, r0
    4b20:	f04f 31ff 	mov.w	r1, #4294967295
    4b24:	eb61 0305 	sbc.w	r3, r1, r5
    4b28:	2a01      	cmp	r2, #1
    4b2a:	f173 0300 	sbcs.w	r3, r3, #0
    4b2e:	db30      	blt.n	4b92 <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    4b30:	f06f 0601 	mvn.w	r6, #1
    4b34:	1a36      	subs	r6, r6, r0
    4b36:	f04f 0320 	mov.w	r3, #32
    4b3a:	f3ef 8811 	mrs	r8, BASEPRI
    4b3e:	f383 8812 	msr	BASEPRI_MAX, r3
    4b42:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    4b46:	4f16      	ldr	r7, [pc, #88]	; (4ba0 <z_tick_sleep+0x94>)
    4b48:	68b8      	ldr	r0, [r7, #8]
    4b4a:	4b16      	ldr	r3, [pc, #88]	; (4ba4 <z_tick_sleep+0x98>)
    4b4c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    4b4e:	f7ff fe47 	bl	47e0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4b52:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4b54:	4622      	mov	r2, r4
    4b56:	462b      	mov	r3, r5
    4b58:	4913      	ldr	r1, [pc, #76]	; (4ba8 <z_tick_sleep+0x9c>)
    4b5a:	3018      	adds	r0, #24
    4b5c:	f000 f8e2 	bl	4d24 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4b60:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4b62:	7b53      	ldrb	r3, [r2, #13]
    4b64:	f043 0310 	orr.w	r3, r3, #16
    4b68:	7353      	strb	r3, [r2, #13]
    4b6a:	4640      	mov	r0, r8
    4b6c:	f7fc fd78 	bl	1660 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4b70:	2500      	movs	r5, #0
    4b72:	f001 fcdc 	bl	652e <sys_clock_tick_get_32>
    4b76:	1a34      	subs	r4, r6, r0
    4b78:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    4b7c:	2c01      	cmp	r4, #1
    4b7e:	f175 0300 	sbcs.w	r3, r5, #0
    4b82:	da0a      	bge.n	4b9a <z_tick_sleep+0x8e>
	return 0;
    4b84:	2000      	movs	r0, #0
}
    4b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    4b8a:	f7ff ff7b 	bl	4a84 <z_impl_k_yield>
		return 0;
    4b8e:	2000      	movs	r0, #0
    4b90:	e7f9      	b.n	4b86 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4b92:	f001 fccc 	bl	652e <sys_clock_tick_get_32>
    4b96:	1906      	adds	r6, r0, r4
    4b98:	e7cd      	b.n	4b36 <z_tick_sleep+0x2a>
		return ticks;
    4b9a:	4620      	mov	r0, r4
    4b9c:	e7f3      	b.n	4b86 <z_tick_sleep+0x7a>
    4b9e:	bf00      	nop
    4ba0:	20000944 	.word	0x20000944
    4ba4:	20000970 	.word	0x20000970
    4ba8:	000062e7 	.word	0x000062e7

00004bac <z_impl_k_sleep>:
{
    4bac:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4bae:	f1b1 3fff 	cmp.w	r1, #4294967295
    4bb2:	bf08      	it	eq
    4bb4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    4bb8:	d01a      	beq.n	4bf0 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    4bba:	f7ff ffa7 	bl	4b0c <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    4bbe:	4604      	mov	r4, r0
    4bc0:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    4bc2:	0169      	lsls	r1, r5, #5
    4bc4:	0143      	lsls	r3, r0, #5
    4bc6:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    4bca:	1a18      	subs	r0, r3, r0
    4bcc:	eb62 0305 	sbc.w	r3, r2, r5
    4bd0:	009a      	lsls	r2, r3, #2
    4bd2:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    4bd6:	0081      	lsls	r1, r0, #2
    4bd8:	4613      	mov	r3, r2
    4bda:	1908      	adds	r0, r1, r4
    4bdc:	eb45 0303 	adc.w	r3, r5, r3
    4be0:	00da      	lsls	r2, r3, #3
    4be2:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    4be6:	00c1      	lsls	r1, r0, #3
    4be8:	0bc8      	lsrs	r0, r1, #15
    4bea:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    4bee:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    4bf0:	4b03      	ldr	r3, [pc, #12]	; (4c00 <z_impl_k_sleep+0x54>)
    4bf2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4bf4:	f7ff fe84 	bl	4900 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    4bf8:	f04f 30ff 	mov.w	r0, #4294967295
    4bfc:	e7f7      	b.n	4bee <z_impl_k_sleep+0x42>
    4bfe:	bf00      	nop
    4c00:	20000944 	.word	0x20000944

00004c04 <z_impl_z_current_get>:
}
    4c04:	4b01      	ldr	r3, [pc, #4]	; (4c0c <z_impl_z_current_get+0x8>)
    4c06:	6898      	ldr	r0, [r3, #8]
    4c08:	4770      	bx	lr
    4c0a:	bf00      	nop
    4c0c:	20000944 	.word	0x20000944

00004c10 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    4c10:	b538      	push	{r3, r4, r5, lr}
    4c12:	f04f 0320 	mov.w	r3, #32
    4c16:	f3ef 8511 	mrs	r5, BASEPRI
    4c1a:	f383 8812 	msr	BASEPRI_MAX, r3
    4c1e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4c22:	7b43      	ldrb	r3, [r0, #13]
    4c24:	f013 0f08 	tst.w	r3, #8
    4c28:	d004      	beq.n	4c34 <z_thread_abort+0x24>
	__asm__ volatile(
    4c2a:	f385 8811 	msr	BASEPRI, r5
    4c2e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4c32:	bd38      	pop	{r3, r4, r5, pc}
    4c34:	4604      	mov	r4, r0
	end_thread(thread);
    4c36:	f7ff fecb 	bl	49d0 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    4c3a:	4b08      	ldr	r3, [pc, #32]	; (4c5c <z_thread_abort+0x4c>)
    4c3c:	689b      	ldr	r3, [r3, #8]
    4c3e:	42a3      	cmp	r3, r4
    4c40:	d004      	beq.n	4c4c <z_thread_abort+0x3c>
    4c42:	f385 8811 	msr	BASEPRI, r5
    4c46:	f3bf 8f6f 	isb	sy
    4c4a:	e7f2      	b.n	4c32 <z_thread_abort+0x22>
    4c4c:	f3ef 8305 	mrs	r3, IPSR
    4c50:	2b00      	cmp	r3, #0
    4c52:	d1f6      	bne.n	4c42 <z_thread_abort+0x32>
    4c54:	4628      	mov	r0, r5
    4c56:	f7fc fd03 	bl	1660 <arch_swap>
	return ret;
    4c5a:	e7f2      	b.n	4c42 <z_thread_abort+0x32>
    4c5c:	20000944 	.word	0x20000944

00004c60 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    4c60:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    4c62:	4806      	ldr	r0, [pc, #24]	; (4c7c <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    4c64:	4a06      	ldr	r2, [pc, #24]	; (4c80 <z_data_copy+0x20>)
    4c66:	1a12      	subs	r2, r2, r0
    4c68:	4906      	ldr	r1, [pc, #24]	; (4c84 <z_data_copy+0x24>)
    4c6a:	f000 fe2b 	bl	58c4 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    4c6e:	4a06      	ldr	r2, [pc, #24]	; (4c88 <z_data_copy+0x28>)
    4c70:	4906      	ldr	r1, [pc, #24]	; (4c8c <z_data_copy+0x2c>)
    4c72:	4807      	ldr	r0, [pc, #28]	; (4c90 <z_data_copy+0x30>)
    4c74:	f000 fe26 	bl	58c4 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4c78:	bd08      	pop	{r3, pc}
    4c7a:	bf00      	nop
    4c7c:	20000000 	.word	0x20000000
    4c80:	20000188 	.word	0x20000188
    4c84:	00006b60 	.word	0x00006b60
    4c88:	00000000 	.word	0x00000000
    4c8c:	00006b60 	.word	0x00006b60
    4c90:	20000000 	.word	0x20000000

00004c94 <first>:
	return list->head == list;
    4c94:	4b03      	ldr	r3, [pc, #12]	; (4ca4 <first+0x10>)
    4c96:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4c98:	4298      	cmp	r0, r3
    4c9a:	d000      	beq.n	4c9e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    4c9c:	4770      	bx	lr
    4c9e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    4ca0:	e7fc      	b.n	4c9c <first+0x8>
    4ca2:	bf00      	nop
    4ca4:	200000c0 	.word	0x200000c0

00004ca8 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4ca8:	b130      	cbz	r0, 4cb8 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    4caa:	4a04      	ldr	r2, [pc, #16]	; (4cbc <next+0x14>)
    4cac:	6852      	ldr	r2, [r2, #4]
    4cae:	4290      	cmp	r0, r2
    4cb0:	d001      	beq.n	4cb6 <next+0xe>
    4cb2:	6800      	ldr	r0, [r0, #0]
    4cb4:	4770      	bx	lr
    4cb6:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    4cb8:	4770      	bx	lr
    4cba:	bf00      	nop
    4cbc:	200000c0 	.word	0x200000c0

00004cc0 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    4cc0:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4cc2:	4b04      	ldr	r3, [pc, #16]	; (4cd4 <elapsed+0x14>)
    4cc4:	681b      	ldr	r3, [r3, #0]
    4cc6:	b10b      	cbz	r3, 4ccc <elapsed+0xc>
    4cc8:	2000      	movs	r0, #0
}
    4cca:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4ccc:	f7fe f840 	bl	2d50 <sys_clock_elapsed>
    4cd0:	e7fb      	b.n	4cca <elapsed+0xa>
    4cd2:	bf00      	nop
    4cd4:	2000097c 	.word	0x2000097c

00004cd8 <next_timeout>:

static int32_t next_timeout(void)
{
    4cd8:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    4cda:	f7ff ffdb 	bl	4c94 <first>
    4cde:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    4ce0:	f7ff ffee 	bl	4cc0 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    4ce4:	b18c      	cbz	r4, 4d0a <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4ce6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    4cea:	1a12      	subs	r2, r2, r0
    4cec:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    4cf0:	2a01      	cmp	r2, #1
    4cf2:	f173 0100 	sbcs.w	r1, r3, #0
    4cf6:	db11      	blt.n	4d1c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4cf8:	4610      	mov	r0, r2
    4cfa:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    4cfe:	f173 0300 	sbcs.w	r3, r3, #0
    4d02:	db04      	blt.n	4d0e <next_timeout+0x36>
    4d04:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4d08:	e001      	b.n	4d0e <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    4d0a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4d0e:	4b04      	ldr	r3, [pc, #16]	; (4d20 <next_timeout+0x48>)
    4d10:	691b      	ldr	r3, [r3, #16]
    4d12:	b113      	cbz	r3, 4d1a <next_timeout+0x42>
    4d14:	4283      	cmp	r3, r0
    4d16:	da00      	bge.n	4d1a <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    4d18:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    4d1a:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    4d1c:	2000      	movs	r0, #0
    4d1e:	e7f6      	b.n	4d0e <next_timeout+0x36>
    4d20:	20000944 	.word	0x20000944

00004d24 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    4d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d28:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
    4d2e:	bf08      	it	eq
    4d30:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    4d34:	f000 8096 	beq.w	4e64 <z_add_timeout+0x140>
    4d38:	4682      	mov	sl, r0
    4d3a:	4614      	mov	r4, r2
    4d3c:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4d3e:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    4d40:	2300      	movs	r3, #0
	__asm__ volatile(
    4d42:	f04f 0220 	mov.w	r2, #32
    4d46:	f3ef 8b11 	mrs	fp, BASEPRI
    4d4a:	f382 8812 	msr	BASEPRI_MAX, r2
    4d4e:	f3bf 8f6f 	isb	sy
    4d52:	e02e      	b.n	4db2 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    4d54:	2201      	movs	r2, #1
    4d56:	2300      	movs	r3, #0
    4d58:	e04b      	b.n	4df2 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    4d5a:	f7ff ffb1 	bl	4cc0 <elapsed>
    4d5e:	1822      	adds	r2, r4, r0
    4d60:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
    4d64:	3201      	adds	r2, #1
    4d66:	f143 0300 	adc.w	r3, r3, #0
    4d6a:	f8ca 2010 	str.w	r2, [sl, #16]
    4d6e:	f8ca 3014 	str.w	r3, [sl, #20]
    4d72:	e042      	b.n	4dfa <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    4d74:	9b00      	ldr	r3, [sp, #0]
    4d76:	1ac2      	subs	r2, r0, r3
    4d78:	9b01      	ldr	r3, [sp, #4]
    4d7a:	eb61 0303 	sbc.w	r3, r1, r3
    4d7e:	f8cc 2010 	str.w	r2, [ip, #16]
    4d82:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
    4d86:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
    4d8a:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
    4d8e:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
    4d92:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
    4d96:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    4d9a:	f1bc 0f00 	cmp.w	ip, #0
    4d9e:	d049      	beq.n	4e34 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4da0:	f7ff ff78 	bl	4c94 <first>
    4da4:	4582      	cmp	sl, r0
    4da6:	d050      	beq.n	4e4a <z_add_timeout+0x126>
	__asm__ volatile(
    4da8:	f38b 8811 	msr	BASEPRI, fp
    4dac:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4db0:	2301      	movs	r3, #1
    4db2:	2b00      	cmp	r3, #0
    4db4:	d156      	bne.n	4e64 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    4db6:	f06f 0301 	mvn.w	r3, #1
    4dba:	ebb3 0804 	subs.w	r8, r3, r4
    4dbe:	f04f 30ff 	mov.w	r0, #4294967295
    4dc2:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4dc6:	f1b8 0f00 	cmp.w	r8, #0
    4dca:	f179 0300 	sbcs.w	r3, r9, #0
    4dce:	dbc4      	blt.n	4d5a <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4dd0:	4a26      	ldr	r2, [pc, #152]	; (4e6c <z_add_timeout+0x148>)
    4dd2:	6813      	ldr	r3, [r2, #0]
    4dd4:	6852      	ldr	r2, [r2, #4]
    4dd6:	18e3      	adds	r3, r4, r3
    4dd8:	eb45 0202 	adc.w	r2, r5, r2
    4ddc:	f06f 0101 	mvn.w	r1, #1
    4de0:	1ace      	subs	r6, r1, r3
    4de2:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
    4de6:	4632      	mov	r2, r6
    4de8:	463b      	mov	r3, r7
    4dea:	2e01      	cmp	r6, #1
    4dec:	f177 0100 	sbcs.w	r1, r7, #0
    4df0:	dbb0      	blt.n	4d54 <z_add_timeout+0x30>
    4df2:	f8ca 2010 	str.w	r2, [sl, #16]
    4df6:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    4dfa:	f7ff ff4b 	bl	4c94 <first>
    4dfe:	4684      	mov	ip, r0
    4e00:	f1bc 0f00 	cmp.w	ip, #0
    4e04:	d0c9      	beq.n	4d9a <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
    4e06:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
    4e0a:	e9da 2304 	ldrd	r2, r3, [sl, #16]
    4e0e:	e9cd 2300 	strd	r2, r3, [sp]
    4e12:	4282      	cmp	r2, r0
    4e14:	418b      	sbcs	r3, r1
    4e16:	dbad      	blt.n	4d74 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
    4e18:	9b00      	ldr	r3, [sp, #0]
    4e1a:	1a1a      	subs	r2, r3, r0
    4e1c:	9b01      	ldr	r3, [sp, #4]
    4e1e:	eb63 0301 	sbc.w	r3, r3, r1
    4e22:	f8ca 2010 	str.w	r2, [sl, #16]
    4e26:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    4e2a:	4660      	mov	r0, ip
    4e2c:	f7ff ff3c 	bl	4ca8 <next>
    4e30:	4684      	mov	ip, r0
    4e32:	e7e5      	b.n	4e00 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
    4e34:	4b0e      	ldr	r3, [pc, #56]	; (4e70 <z_add_timeout+0x14c>)
    4e36:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    4e38:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
    4e3c:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
    4e40:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    4e44:	f8c3 a004 	str.w	sl, [r3, #4]
}
    4e48:	e7aa      	b.n	4da0 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    4e4a:	f7ff ff45 	bl	4cd8 <next_timeout>

			if (next_time == 0 ||
    4e4e:	4603      	mov	r3, r0
    4e50:	b118      	cbz	r0, 4e5a <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
    4e52:	4a08      	ldr	r2, [pc, #32]	; (4e74 <z_add_timeout+0x150>)
    4e54:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    4e56:	4282      	cmp	r2, r0
    4e58:	d0a6      	beq.n	4da8 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
    4e5a:	2100      	movs	r1, #0
    4e5c:	4618      	mov	r0, r3
    4e5e:	f7fd ff43 	bl	2ce8 <sys_clock_set_timeout>
    4e62:	e7a1      	b.n	4da8 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    4e64:	b003      	add	sp, #12
    4e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e6a:	bf00      	nop
    4e6c:	20000308 	.word	0x20000308
    4e70:	200000c0 	.word	0x200000c0
    4e74:	20000944 	.word	0x20000944

00004e78 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    4e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e7a:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    4e7c:	f7ff fc06 	bl	468c <z_time_slice>
	__asm__ volatile(
    4e80:	f04f 0320 	mov.w	r3, #32
    4e84:	f3ef 8511 	mrs	r5, BASEPRI
    4e88:	f383 8812 	msr	BASEPRI_MAX, r3
    4e8c:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    4e90:	4b28      	ldr	r3, [pc, #160]	; (4f34 <sys_clock_announce+0xbc>)
    4e92:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    4e94:	f7ff fefe 	bl	4c94 <first>
    4e98:	4604      	mov	r4, r0
    4e9a:	b350      	cbz	r0, 4ef2 <sys_clock_announce+0x7a>
    4e9c:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    4ea0:	4b24      	ldr	r3, [pc, #144]	; (4f34 <sys_clock_announce+0xbc>)
    4ea2:	681b      	ldr	r3, [r3, #0]
    4ea4:	17d9      	asrs	r1, r3, #31
    4ea6:	42b3      	cmp	r3, r6
    4ea8:	eb71 0207 	sbcs.w	r2, r1, r7
    4eac:	db21      	blt.n	4ef2 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4eae:	4a22      	ldr	r2, [pc, #136]	; (4f38 <sys_clock_announce+0xc0>)
    4eb0:	e9d2 0100 	ldrd	r0, r1, [r2]
    4eb4:	1980      	adds	r0, r0, r6
    4eb6:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    4eba:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
    4ebe:	1b9b      	subs	r3, r3, r6
    4ec0:	4a1c      	ldr	r2, [pc, #112]	; (4f34 <sys_clock_announce+0xbc>)
    4ec2:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    4ec4:	2200      	movs	r2, #0
    4ec6:	2300      	movs	r3, #0
    4ec8:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    4ecc:	4620      	mov	r0, r4
    4ece:	f001 fab8 	bl	6442 <remove_timeout>
	__asm__ volatile(
    4ed2:	f385 8811 	msr	BASEPRI, r5
    4ed6:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    4eda:	68a3      	ldr	r3, [r4, #8]
    4edc:	4620      	mov	r0, r4
    4ede:	4798      	blx	r3
	__asm__ volatile(
    4ee0:	f04f 0320 	mov.w	r3, #32
    4ee4:	f3ef 8511 	mrs	r5, BASEPRI
    4ee8:	f383 8812 	msr	BASEPRI_MAX, r3
    4eec:	f3bf 8f6f 	isb	sy
    4ef0:	e7d0      	b.n	4e94 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    4ef2:	b144      	cbz	r4, 4f06 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    4ef4:	4b0f      	ldr	r3, [pc, #60]	; (4f34 <sys_clock_announce+0xbc>)
    4ef6:	6819      	ldr	r1, [r3, #0]
    4ef8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    4efc:	1a52      	subs	r2, r2, r1
    4efe:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    4f02:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
    4f06:	480c      	ldr	r0, [pc, #48]	; (4f38 <sys_clock_announce+0xc0>)
    4f08:	490a      	ldr	r1, [pc, #40]	; (4f34 <sys_clock_announce+0xbc>)
    4f0a:	680c      	ldr	r4, [r1, #0]
    4f0c:	e9d0 2300 	ldrd	r2, r3, [r0]
    4f10:	1912      	adds	r2, r2, r4
    4f12:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    4f16:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    4f1a:	2400      	movs	r4, #0
    4f1c:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
    4f1e:	f7ff fedb 	bl	4cd8 <next_timeout>
    4f22:	4621      	mov	r1, r4
    4f24:	f7fd fee0 	bl	2ce8 <sys_clock_set_timeout>
	__asm__ volatile(
    4f28:	f385 8811 	msr	BASEPRI, r5
    4f2c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f32:	bf00      	nop
    4f34:	2000097c 	.word	0x2000097c
    4f38:	20000308 	.word	0x20000308

00004f3c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    4f3c:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    4f3e:	2100      	movs	r1, #0
	__asm__ volatile(
    4f40:	f04f 0320 	mov.w	r3, #32
    4f44:	f3ef 8411 	mrs	r4, BASEPRI
    4f48:	f383 8812 	msr	BASEPRI_MAX, r3
    4f4c:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    4f50:	2200      	movs	r2, #0
    4f52:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
    4f54:	b969      	cbnz	r1, 4f72 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
    4f56:	f7fd fefb 	bl	2d50 <sys_clock_elapsed>
    4f5a:	4b07      	ldr	r3, [pc, #28]	; (4f78 <sys_clock_tick_get+0x3c>)
    4f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4f60:	1812      	adds	r2, r2, r0
    4f62:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    4f66:	f384 8811 	msr	BASEPRI, r4
    4f6a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4f6e:	2101      	movs	r1, #1
    4f70:	e7f0      	b.n	4f54 <sys_clock_tick_get+0x18>
	}
	return t;
}
    4f72:	4610      	mov	r0, r2
    4f74:	4619      	mov	r1, r3
    4f76:	bd10      	pop	{r4, pc}
    4f78:	20000308 	.word	0x20000308

00004f7c <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    4f7c:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    4f7e:	4a03      	ldr	r2, [pc, #12]	; (4f8c <boot_banner+0x10>)
    4f80:	4903      	ldr	r1, [pc, #12]	; (4f90 <boot_banner+0x14>)
    4f82:	4804      	ldr	r0, [pc, #16]	; (4f94 <boot_banner+0x18>)
    4f84:	f000 f9b6 	bl	52f4 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    4f88:	bd08      	pop	{r3, pc}
    4f8a:	bf00      	nop
    4f8c:	000068d0 	.word	0x000068d0
    4f90:	00006a9c 	.word	0x00006a9c
    4f94:	00006aac 	.word	0x00006aac

00004f98 <nrf_cc3xx_platform_init_no_rng>:
    4f98:	b510      	push	{r4, lr}
    4f9a:	4c0a      	ldr	r4, [pc, #40]	; (4fc4 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    4f9c:	6823      	ldr	r3, [r4, #0]
    4f9e:	b11b      	cbz	r3, 4fa8 <nrf_cc3xx_platform_init_no_rng+0x10>
    4fa0:	2301      	movs	r3, #1
    4fa2:	2000      	movs	r0, #0
    4fa4:	6023      	str	r3, [r4, #0]
    4fa6:	bd10      	pop	{r4, pc}
    4fa8:	f000 f8d4 	bl	5154 <CC_LibInitNoRng>
    4fac:	2800      	cmp	r0, #0
    4fae:	d0f7      	beq.n	4fa0 <nrf_cc3xx_platform_init_no_rng+0x8>
    4fb0:	3801      	subs	r0, #1
    4fb2:	2807      	cmp	r0, #7
    4fb4:	d803      	bhi.n	4fbe <nrf_cc3xx_platform_init_no_rng+0x26>
    4fb6:	4b04      	ldr	r3, [pc, #16]	; (4fc8 <nrf_cc3xx_platform_init_no_rng+0x30>)
    4fb8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4fbc:	bd10      	pop	{r4, pc}
    4fbe:	4803      	ldr	r0, [pc, #12]	; (4fcc <nrf_cc3xx_platform_init_no_rng+0x34>)
    4fc0:	bd10      	pop	{r4, pc}
    4fc2:	bf00      	nop
    4fc4:	20000980 	.word	0x20000980
    4fc8:	00006ad4 	.word	0x00006ad4
    4fcc:	ffff8ffe 	.word	0xffff8ffe

00004fd0 <nrf_cc3xx_platform_abort>:
    4fd0:	f3bf 8f4f 	dsb	sy
    4fd4:	4905      	ldr	r1, [pc, #20]	; (4fec <nrf_cc3xx_platform_abort+0x1c>)
    4fd6:	4b06      	ldr	r3, [pc, #24]	; (4ff0 <nrf_cc3xx_platform_abort+0x20>)
    4fd8:	68ca      	ldr	r2, [r1, #12]
    4fda:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4fde:	4313      	orrs	r3, r2
    4fe0:	60cb      	str	r3, [r1, #12]
    4fe2:	f3bf 8f4f 	dsb	sy
    4fe6:	bf00      	nop
    4fe8:	e7fd      	b.n	4fe6 <nrf_cc3xx_platform_abort+0x16>
    4fea:	bf00      	nop
    4fec:	e000ed00 	.word	0xe000ed00
    4ff0:	05fa0004 	.word	0x05fa0004

00004ff4 <CC_PalAbort>:
    4ff4:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    4ff8:	2100      	movs	r1, #0
    4ffa:	b430      	push	{r4, r5}
    4ffc:	4a08      	ldr	r2, [pc, #32]	; (5020 <CC_PalAbort+0x2c>)
    4ffe:	4c09      	ldr	r4, [pc, #36]	; (5024 <CC_PalAbort+0x30>)
    5000:	4d09      	ldr	r5, [pc, #36]	; (5028 <CC_PalAbort+0x34>)
    5002:	6023      	str	r3, [r4, #0]
    5004:	602b      	str	r3, [r5, #0]
    5006:	6013      	str	r3, [r2, #0]
    5008:	60e3      	str	r3, [r4, #12]
    500a:	60eb      	str	r3, [r5, #12]
    500c:	60d3      	str	r3, [r2, #12]
    500e:	61a3      	str	r3, [r4, #24]
    5010:	4a06      	ldr	r2, [pc, #24]	; (502c <CC_PalAbort+0x38>)
    5012:	4c07      	ldr	r4, [pc, #28]	; (5030 <CC_PalAbort+0x3c>)
    5014:	61ab      	str	r3, [r5, #24]
    5016:	6863      	ldr	r3, [r4, #4]
    5018:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    501c:	bc30      	pop	{r4, r5}
    501e:	4718      	bx	r3
    5020:	50845408 	.word	0x50845408
    5024:	50845400 	.word	0x50845400
    5028:	50845404 	.word	0x50845404
    502c:	50844000 	.word	0x50844000
    5030:	200000c8 	.word	0x200000c8

00005034 <nrf_cc3xx_platform_set_abort>:
    5034:	4b02      	ldr	r3, [pc, #8]	; (5040 <nrf_cc3xx_platform_set_abort+0xc>)
    5036:	e9d0 1200 	ldrd	r1, r2, [r0]
    503a:	e9c3 1200 	strd	r1, r2, [r3]
    503e:	4770      	bx	lr
    5040:	200000c8 	.word	0x200000c8

00005044 <mutex_free>:
    5044:	b510      	push	{r4, lr}
    5046:	4604      	mov	r4, r0
    5048:	b130      	cbz	r0, 5058 <mutex_free+0x14>
    504a:	6863      	ldr	r3, [r4, #4]
    504c:	06db      	lsls	r3, r3, #27
    504e:	d502      	bpl.n	5056 <mutex_free+0x12>
    5050:	2300      	movs	r3, #0
    5052:	6023      	str	r3, [r4, #0]
    5054:	6063      	str	r3, [r4, #4]
    5056:	bd10      	pop	{r4, pc}
    5058:	4b02      	ldr	r3, [pc, #8]	; (5064 <mutex_free+0x20>)
    505a:	4803      	ldr	r0, [pc, #12]	; (5068 <mutex_free+0x24>)
    505c:	685b      	ldr	r3, [r3, #4]
    505e:	4798      	blx	r3
    5060:	e7f3      	b.n	504a <mutex_free+0x6>
    5062:	bf00      	nop
    5064:	200000c8 	.word	0x200000c8
    5068:	00006af4 	.word	0x00006af4

0000506c <mutex_unlock>:
    506c:	b168      	cbz	r0, 508a <mutex_unlock+0x1e>
    506e:	6843      	ldr	r3, [r0, #4]
    5070:	b13b      	cbz	r3, 5082 <mutex_unlock+0x16>
    5072:	06db      	lsls	r3, r3, #27
    5074:	d507      	bpl.n	5086 <mutex_unlock+0x1a>
    5076:	f3bf 8f5f 	dmb	sy
    507a:	2300      	movs	r3, #0
    507c:	6003      	str	r3, [r0, #0]
    507e:	4618      	mov	r0, r3
    5080:	4770      	bx	lr
    5082:	4803      	ldr	r0, [pc, #12]	; (5090 <mutex_unlock+0x24>)
    5084:	4770      	bx	lr
    5086:	4803      	ldr	r0, [pc, #12]	; (5094 <mutex_unlock+0x28>)
    5088:	4770      	bx	lr
    508a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    508e:	4770      	bx	lr
    5090:	ffff8fea 	.word	0xffff8fea
    5094:	ffff8fe9 	.word	0xffff8fe9

00005098 <mutex_init>:
    5098:	b510      	push	{r4, lr}
    509a:	4604      	mov	r4, r0
    509c:	b120      	cbz	r0, 50a8 <mutex_init+0x10>
    509e:	2200      	movs	r2, #0
    50a0:	2311      	movs	r3, #17
    50a2:	6022      	str	r2, [r4, #0]
    50a4:	6063      	str	r3, [r4, #4]
    50a6:	bd10      	pop	{r4, pc}
    50a8:	4801      	ldr	r0, [pc, #4]	; (50b0 <mutex_init+0x18>)
    50aa:	f7ff ffa3 	bl	4ff4 <CC_PalAbort>
    50ae:	e7f6      	b.n	509e <mutex_init+0x6>
    50b0:	00006b1c 	.word	0x00006b1c

000050b4 <mutex_lock>:
    50b4:	b1a0      	cbz	r0, 50e0 <mutex_lock+0x2c>
    50b6:	6843      	ldr	r3, [r0, #4]
    50b8:	b183      	cbz	r3, 50dc <mutex_lock+0x28>
    50ba:	06db      	lsls	r3, r3, #27
    50bc:	d50c      	bpl.n	50d8 <mutex_lock+0x24>
    50be:	2201      	movs	r2, #1
    50c0:	e8d0 3fef 	ldaex	r3, [r0]
    50c4:	e8c0 2fe1 	stlex	r1, r2, [r0]
    50c8:	2900      	cmp	r1, #0
    50ca:	d1f9      	bne.n	50c0 <mutex_lock+0xc>
    50cc:	2b01      	cmp	r3, #1
    50ce:	d0f7      	beq.n	50c0 <mutex_lock+0xc>
    50d0:	f3bf 8f5f 	dmb	sy
    50d4:	2000      	movs	r0, #0
    50d6:	4770      	bx	lr
    50d8:	4803      	ldr	r0, [pc, #12]	; (50e8 <mutex_lock+0x34>)
    50da:	4770      	bx	lr
    50dc:	4803      	ldr	r0, [pc, #12]	; (50ec <mutex_lock+0x38>)
    50de:	4770      	bx	lr
    50e0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    50e4:	4770      	bx	lr
    50e6:	bf00      	nop
    50e8:	ffff8fe9 	.word	0xffff8fe9
    50ec:	ffff8fea 	.word	0xffff8fea

000050f0 <nrf_cc3xx_platform_set_mutexes>:
    50f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50f4:	4c14      	ldr	r4, [pc, #80]	; (5148 <nrf_cc3xx_platform_set_mutexes+0x58>)
    50f6:	6802      	ldr	r2, [r0, #0]
    50f8:	68c3      	ldr	r3, [r0, #12]
    50fa:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
    50fe:	e9c4 6302 	strd	r6, r3, [r4, #8]
    5102:	e9c4 2500 	strd	r2, r5, [r4]
    5106:	4b11      	ldr	r3, [pc, #68]	; (514c <nrf_cc3xx_platform_set_mutexes+0x5c>)
    5108:	680e      	ldr	r6, [r1, #0]
    510a:	6848      	ldr	r0, [r1, #4]
    510c:	4d10      	ldr	r5, [pc, #64]	; (5150 <nrf_cc3xx_platform_set_mutexes+0x60>)
    510e:	e9c3 6000 	strd	r6, r0, [r3]
    5112:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
    5116:	6908      	ldr	r0, [r1, #16]
    5118:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    511c:	e9c3 7602 	strd	r7, r6, [r3, #8]
    5120:	6118      	str	r0, [r3, #16]
    5122:	06cb      	lsls	r3, r1, #27
    5124:	d50d      	bpl.n	5142 <nrf_cc3xx_platform_set_mutexes+0x52>
    5126:	2300      	movs	r3, #0
    5128:	f505 7088 	add.w	r0, r5, #272	; 0x110
    512c:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    5130:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    5134:	4790      	blx	r2
    5136:	6823      	ldr	r3, [r4, #0]
    5138:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    513c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5140:	4718      	bx	r3
    5142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5146:	bf00      	nop
    5148:	200000d8 	.word	0x200000d8
    514c:	200000e8 	.word	0x200000e8
    5150:	2000099c 	.word	0x2000099c

00005154 <CC_LibInitNoRng>:
    5154:	b508      	push	{r3, lr}
    5156:	f000 f80f 	bl	5178 <CC_HalInit>
    515a:	b928      	cbnz	r0, 5168 <CC_LibInitNoRng+0x14>
    515c:	f000 f80e 	bl	517c <CC_PalInit>
    5160:	b930      	cbnz	r0, 5170 <CC_LibInitNoRng+0x1c>
    5162:	4a04      	ldr	r2, [pc, #16]	; (5174 <CC_LibInitNoRng+0x20>)
    5164:	6010      	str	r0, [r2, #0]
    5166:	bd08      	pop	{r3, pc}
    5168:	f000 f836 	bl	51d8 <CC_PalTerminate>
    516c:	2003      	movs	r0, #3
    516e:	bd08      	pop	{r3, pc}
    5170:	2004      	movs	r0, #4
    5172:	bd08      	pop	{r3, pc}
    5174:	50845a0c 	.word	0x50845a0c

00005178 <CC_HalInit>:
    5178:	2000      	movs	r0, #0
    517a:	4770      	bx	lr

0000517c <CC_PalInit>:
    517c:	b510      	push	{r4, lr}
    517e:	4811      	ldr	r0, [pc, #68]	; (51c4 <CC_PalInit+0x48>)
    5180:	f000 f848 	bl	5214 <CC_PalMutexCreate>
    5184:	b100      	cbz	r0, 5188 <CC_PalInit+0xc>
    5186:	bd10      	pop	{r4, pc}
    5188:	480f      	ldr	r0, [pc, #60]	; (51c8 <CC_PalInit+0x4c>)
    518a:	f000 f843 	bl	5214 <CC_PalMutexCreate>
    518e:	2800      	cmp	r0, #0
    5190:	d1f9      	bne.n	5186 <CC_PalInit+0xa>
    5192:	4c0e      	ldr	r4, [pc, #56]	; (51cc <CC_PalInit+0x50>)
    5194:	4620      	mov	r0, r4
    5196:	f000 f83d 	bl	5214 <CC_PalMutexCreate>
    519a:	2800      	cmp	r0, #0
    519c:	d1f3      	bne.n	5186 <CC_PalInit+0xa>
    519e:	4b0c      	ldr	r3, [pc, #48]	; (51d0 <CC_PalInit+0x54>)
    51a0:	480c      	ldr	r0, [pc, #48]	; (51d4 <CC_PalInit+0x58>)
    51a2:	601c      	str	r4, [r3, #0]
    51a4:	f000 f836 	bl	5214 <CC_PalMutexCreate>
    51a8:	4601      	mov	r1, r0
    51aa:	2800      	cmp	r0, #0
    51ac:	d1eb      	bne.n	5186 <CC_PalInit+0xa>
    51ae:	f000 f82d 	bl	520c <CC_PalDmaInit>
    51b2:	4604      	mov	r4, r0
    51b4:	b108      	cbz	r0, 51ba <CC_PalInit+0x3e>
    51b6:	4620      	mov	r0, r4
    51b8:	bd10      	pop	{r4, pc}
    51ba:	f000 f83f 	bl	523c <CC_PalPowerSaveModeInit>
    51be:	4620      	mov	r0, r4
    51c0:	e7fa      	b.n	51b8 <CC_PalInit+0x3c>
    51c2:	bf00      	nop
    51c4:	20000120 	.word	0x20000120
    51c8:	20000114 	.word	0x20000114
    51cc:	2000011c 	.word	0x2000011c
    51d0:	20000124 	.word	0x20000124
    51d4:	20000118 	.word	0x20000118

000051d8 <CC_PalTerminate>:
    51d8:	b508      	push	{r3, lr}
    51da:	4808      	ldr	r0, [pc, #32]	; (51fc <CC_PalTerminate+0x24>)
    51dc:	f000 f824 	bl	5228 <CC_PalMutexDestroy>
    51e0:	4807      	ldr	r0, [pc, #28]	; (5200 <CC_PalTerminate+0x28>)
    51e2:	f000 f821 	bl	5228 <CC_PalMutexDestroy>
    51e6:	4807      	ldr	r0, [pc, #28]	; (5204 <CC_PalTerminate+0x2c>)
    51e8:	f000 f81e 	bl	5228 <CC_PalMutexDestroy>
    51ec:	4806      	ldr	r0, [pc, #24]	; (5208 <CC_PalTerminate+0x30>)
    51ee:	f000 f81b 	bl	5228 <CC_PalMutexDestroy>
    51f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    51f6:	f000 b80b 	b.w	5210 <CC_PalDmaTerminate>
    51fa:	bf00      	nop
    51fc:	20000120 	.word	0x20000120
    5200:	20000114 	.word	0x20000114
    5204:	2000011c 	.word	0x2000011c
    5208:	20000118 	.word	0x20000118

0000520c <CC_PalDmaInit>:
    520c:	2000      	movs	r0, #0
    520e:	4770      	bx	lr

00005210 <CC_PalDmaTerminate>:
    5210:	4770      	bx	lr
    5212:	bf00      	nop

00005214 <CC_PalMutexCreate>:
    5214:	b508      	push	{r3, lr}
    5216:	4b03      	ldr	r3, [pc, #12]	; (5224 <CC_PalMutexCreate+0x10>)
    5218:	6802      	ldr	r2, [r0, #0]
    521a:	681b      	ldr	r3, [r3, #0]
    521c:	6810      	ldr	r0, [r2, #0]
    521e:	4798      	blx	r3
    5220:	2000      	movs	r0, #0
    5222:	bd08      	pop	{r3, pc}
    5224:	200000d8 	.word	0x200000d8

00005228 <CC_PalMutexDestroy>:
    5228:	b508      	push	{r3, lr}
    522a:	4b03      	ldr	r3, [pc, #12]	; (5238 <CC_PalMutexDestroy+0x10>)
    522c:	6802      	ldr	r2, [r0, #0]
    522e:	685b      	ldr	r3, [r3, #4]
    5230:	6810      	ldr	r0, [r2, #0]
    5232:	4798      	blx	r3
    5234:	2000      	movs	r0, #0
    5236:	bd08      	pop	{r3, pc}
    5238:	200000d8 	.word	0x200000d8

0000523c <CC_PalPowerSaveModeInit>:
    523c:	b570      	push	{r4, r5, r6, lr}
    523e:	4c09      	ldr	r4, [pc, #36]	; (5264 <CC_PalPowerSaveModeInit+0x28>)
    5240:	4d09      	ldr	r5, [pc, #36]	; (5268 <CC_PalPowerSaveModeInit+0x2c>)
    5242:	6920      	ldr	r0, [r4, #16]
    5244:	68ab      	ldr	r3, [r5, #8]
    5246:	4798      	blx	r3
    5248:	b118      	cbz	r0, 5252 <CC_PalPowerSaveModeInit+0x16>
    524a:	4b08      	ldr	r3, [pc, #32]	; (526c <CC_PalPowerSaveModeInit+0x30>)
    524c:	4808      	ldr	r0, [pc, #32]	; (5270 <CC_PalPowerSaveModeInit+0x34>)
    524e:	685b      	ldr	r3, [r3, #4]
    5250:	4798      	blx	r3
    5252:	2100      	movs	r1, #0
    5254:	4a07      	ldr	r2, [pc, #28]	; (5274 <CC_PalPowerSaveModeInit+0x38>)
    5256:	68eb      	ldr	r3, [r5, #12]
    5258:	6011      	str	r1, [r2, #0]
    525a:	6920      	ldr	r0, [r4, #16]
    525c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5260:	4718      	bx	r3
    5262:	bf00      	nop
    5264:	200000e8 	.word	0x200000e8
    5268:	200000d8 	.word	0x200000d8
    526c:	200000c8 	.word	0x200000c8
    5270:	00006b40 	.word	0x00006b40
    5274:	20000994 	.word	0x20000994

00005278 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    5278:	4602      	mov	r2, r0
    527a:	b158      	cbz	r0, 5294 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    527c:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    527e:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5282:	2b01      	cmp	r3, #1
    5284:	d003      	beq.n	528e <sys_notify_validate+0x16>
    5286:	2b03      	cmp	r3, #3
    5288:	d107      	bne.n	529a <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    528a:	6803      	ldr	r3, [r0, #0]
    528c:	b143      	cbz	r3, 52a0 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    528e:	2000      	movs	r0, #0
    5290:	6090      	str	r0, [r2, #8]
    5292:	4770      	bx	lr
		return -EINVAL;
    5294:	f06f 0015 	mvn.w	r0, #21
    5298:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    529a:	f06f 0015 	mvn.w	r0, #21
    529e:	4770      	bx	lr
			rv = -EINVAL;
    52a0:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    52a4:	4770      	bx	lr

000052a6 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    52a6:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    52a8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    52aa:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    52ae:	6081      	str	r1, [r0, #8]
	switch (method) {
    52b0:	2a03      	cmp	r2, #3
    52b2:	d103      	bne.n	52bc <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    52b4:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    52b6:	2200      	movs	r2, #0
    52b8:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    52ba:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    52bc:	2000      	movs	r0, #0
    52be:	e7fa      	b.n	52b6 <sys_notify_finalize+0x10>

000052c0 <arch_printk_char_out>:
}
    52c0:	2000      	movs	r0, #0
    52c2:	4770      	bx	lr

000052c4 <str_out>:
{
    52c4:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    52c6:	680c      	ldr	r4, [r1, #0]
    52c8:	b154      	cbz	r4, 52e0 <str_out+0x1c>
    52ca:	688a      	ldr	r2, [r1, #8]
    52cc:	684b      	ldr	r3, [r1, #4]
    52ce:	429a      	cmp	r2, r3
    52d0:	da06      	bge.n	52e0 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    52d2:	3b01      	subs	r3, #1
    52d4:	429a      	cmp	r2, r3
    52d6:	d008      	beq.n	52ea <str_out+0x26>
		ctx->str[ctx->count++] = c;
    52d8:	1c53      	adds	r3, r2, #1
    52da:	608b      	str	r3, [r1, #8]
    52dc:	54a0      	strb	r0, [r4, r2]
    52de:	e002      	b.n	52e6 <str_out+0x22>
		ctx->count++;
    52e0:	688b      	ldr	r3, [r1, #8]
    52e2:	3301      	adds	r3, #1
    52e4:	608b      	str	r3, [r1, #8]
}
    52e6:	bc10      	pop	{r4}
    52e8:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    52ea:	1c53      	adds	r3, r2, #1
    52ec:	608b      	str	r3, [r1, #8]
    52ee:	2300      	movs	r3, #0
    52f0:	54a3      	strb	r3, [r4, r2]
    52f2:	e7f8      	b.n	52e6 <str_out+0x22>

000052f4 <printk>:
{
    52f4:	b40f      	push	{r0, r1, r2, r3}
    52f6:	b500      	push	{lr}
    52f8:	b083      	sub	sp, #12
    52fa:	a904      	add	r1, sp, #16
    52fc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    5300:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    5302:	f7fb f911 	bl	528 <vprintk>
}
    5306:	b003      	add	sp, #12
    5308:	f85d eb04 	ldr.w	lr, [sp], #4
    530c:	b004      	add	sp, #16
    530e:	4770      	bx	lr

00005310 <snprintk>:
{
    5310:	b40c      	push	{r2, r3}
    5312:	b500      	push	{lr}
    5314:	b083      	sub	sp, #12
    5316:	ab04      	add	r3, sp, #16
    5318:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    531c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    531e:	f7fb f913 	bl	548 <vsnprintk>
}
    5322:	b003      	add	sp, #12
    5324:	f85d eb04 	ldr.w	lr, [sp], #4
    5328:	b002      	add	sp, #8
    532a:	4770      	bx	lr

0000532c <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    532c:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5330:	8b01      	ldrh	r1, [r0, #24]
    5332:	f021 0107 	bic.w	r1, r1, #7
    5336:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    5338:	8301      	strh	r1, [r0, #24]
}
    533a:	4770      	bx	lr

0000533c <notify_monitors>:
{
    533c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5340:	4606      	mov	r6, r0
    5342:	460f      	mov	r7, r1
    5344:	4690      	mov	r8, r2
	return list->head;
    5346:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    5348:	b119      	cbz	r1, 5352 <notify_monitors+0x16>
    534a:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    534c:	b131      	cbz	r1, 535c <notify_monitors+0x20>
	return node->next;
    534e:	680c      	ldr	r4, [r1, #0]
    5350:	e004      	b.n	535c <notify_monitors+0x20>
    5352:	460c      	mov	r4, r1
    5354:	e002      	b.n	535c <notify_monitors+0x20>
    5356:	4623      	mov	r3, r4
    5358:	4621      	mov	r1, r4
    535a:	461c      	mov	r4, r3
    535c:	b159      	cbz	r1, 5376 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    535e:	684d      	ldr	r5, [r1, #4]
    5360:	4643      	mov	r3, r8
    5362:	463a      	mov	r2, r7
    5364:	4630      	mov	r0, r6
    5366:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    5368:	2c00      	cmp	r4, #0
    536a:	d0f4      	beq.n	5356 <notify_monitors+0x1a>
    536c:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    536e:	2c00      	cmp	r4, #0
    5370:	d0f2      	beq.n	5358 <notify_monitors+0x1c>
	return node->next;
    5372:	6823      	ldr	r3, [r4, #0]
    5374:	e7f0      	b.n	5358 <notify_monitors+0x1c>
}
    5376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000537a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    537a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    537c:	f013 0307 	ands.w	r3, r3, #7
    5380:	d103      	bne.n	538a <process_recheck+0x10>
	return list->head;
    5382:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    5384:	b10a      	cbz	r2, 538a <process_recheck+0x10>
		evt = EVT_START;
    5386:	2003      	movs	r0, #3
    5388:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    538a:	2b02      	cmp	r3, #2
    538c:	d003      	beq.n	5396 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    538e:	2b01      	cmp	r3, #1
    5390:	d006      	beq.n	53a0 <process_recheck+0x26>
	int evt = EVT_NOP;
    5392:	2000      	movs	r0, #0
    5394:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    5396:	8b42      	ldrh	r2, [r0, #26]
    5398:	2a00      	cmp	r2, #0
    539a:	d1f8      	bne.n	538e <process_recheck+0x14>
		evt = EVT_STOP;
    539c:	2004      	movs	r0, #4
    539e:	4770      	bx	lr
    53a0:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    53a2:	b10b      	cbz	r3, 53a8 <process_recheck+0x2e>
		evt = EVT_RESET;
    53a4:	2005      	movs	r0, #5
}
    53a6:	4770      	bx	lr
	int evt = EVT_NOP;
    53a8:	2000      	movs	r0, #0
    53aa:	4770      	bx	lr

000053ac <process_complete>:
{
    53ac:	b538      	push	{r3, r4, r5, lr}
    53ae:	4604      	mov	r4, r0
    53b0:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    53b2:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    53b4:	2a00      	cmp	r2, #0
    53b6:	db07      	blt.n	53c8 <process_complete+0x1c>
    53b8:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    53bc:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    53be:	2a01      	cmp	r2, #1
    53c0:	d90e      	bls.n	53e0 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    53c2:	2b04      	cmp	r3, #4
    53c4:	d032      	beq.n	542c <process_complete+0x80>
}
    53c6:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    53c8:	e9d0 0100 	ldrd	r0, r1, [r0]
    53cc:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    53d0:	2300      	movs	r3, #0
    53d2:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    53d4:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    53d6:	2101      	movs	r1, #1
    53d8:	4620      	mov	r0, r4
    53da:	f7ff ffa7 	bl	532c <set_state>
    53de:	e7f2      	b.n	53c6 <process_complete+0x1a>
		*clients = mgr->clients;
    53e0:	e9d0 0100 	ldrd	r0, r1, [r0]
    53e4:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    53e8:	2200      	movs	r2, #0
    53ea:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    53ec:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    53ee:	2b06      	cmp	r3, #6
    53f0:	d117      	bne.n	5422 <process_complete+0x76>
	return list->head;
    53f2:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    53f4:	b13b      	cbz	r3, 5406 <process_complete+0x5a>
				mgr->refs += 1U;
    53f6:	8b62      	ldrh	r2, [r4, #26]
    53f8:	3201      	adds	r2, #1
    53fa:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    53fc:	2b00      	cmp	r3, #0
    53fe:	d0f9      	beq.n	53f4 <process_complete+0x48>
	return node->next;
    5400:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    5402:	2b00      	cmp	r3, #0
    5404:	d1f6      	bne.n	53f4 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
    5406:	2102      	movs	r1, #2
    5408:	4620      	mov	r0, r4
    540a:	f7ff ff8f 	bl	532c <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    540e:	4620      	mov	r0, r4
    5410:	f7ff ffb3 	bl	537a <process_recheck>
    5414:	2800      	cmp	r0, #0
    5416:	d0d6      	beq.n	53c6 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    5418:	8b23      	ldrh	r3, [r4, #24]
    541a:	f043 0320 	orr.w	r3, r3, #32
    541e:	8323      	strh	r3, [r4, #24]
    5420:	e7d1      	b.n	53c6 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    5422:	2100      	movs	r1, #0
    5424:	4620      	mov	r0, r4
    5426:	f7ff ff81 	bl	532c <set_state>
    542a:	e7f0      	b.n	540e <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
    542c:	2100      	movs	r1, #0
    542e:	f7ff ff7d 	bl	532c <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    5432:	4620      	mov	r0, r4
    5434:	f7ff ffa1 	bl	537a <process_recheck>
    5438:	2800      	cmp	r0, #0
    543a:	d0c4      	beq.n	53c6 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    543c:	8b23      	ldrh	r3, [r4, #24]
    543e:	f043 0320 	orr.w	r3, r3, #32
    5442:	8323      	strh	r3, [r4, #24]
}
    5444:	e7bf      	b.n	53c6 <process_complete+0x1a>

00005446 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    5446:	b158      	cbz	r0, 5460 <validate_args+0x1a>
{
    5448:	b510      	push	{r4, lr}
    544a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    544c:	b159      	cbz	r1, 5466 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    544e:	1d08      	adds	r0, r1, #4
    5450:	f7ff ff12 	bl	5278 <sys_notify_validate>
	if ((rv == 0)
    5454:	b918      	cbnz	r0, 545e <validate_args+0x18>
	    && ((cli->notify.flags
    5456:	68a3      	ldr	r3, [r4, #8]
    5458:	f033 0303 	bics.w	r3, r3, #3
    545c:	d106      	bne.n	546c <validate_args+0x26>
}
    545e:	bd10      	pop	{r4, pc}
		return -EINVAL;
    5460:	f06f 0015 	mvn.w	r0, #21
}
    5464:	4770      	bx	lr
		return -EINVAL;
    5466:	f06f 0015 	mvn.w	r0, #21
    546a:	e7f8      	b.n	545e <validate_args+0x18>
		rv = -EINVAL;
    546c:	f06f 0015 	mvn.w	r0, #21
    5470:	e7f5      	b.n	545e <validate_args+0x18>

00005472 <notify_one>:
{
    5472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5476:	4607      	mov	r7, r0
    5478:	460c      	mov	r4, r1
    547a:	4616      	mov	r6, r2
    547c:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    547e:	4619      	mov	r1, r3
    5480:	1d20      	adds	r0, r4, #4
    5482:	f7ff ff10 	bl	52a6 <sys_notify_finalize>
	if (cb) {
    5486:	b128      	cbz	r0, 5494 <notify_one+0x22>
    5488:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    548a:	462b      	mov	r3, r5
    548c:	4632      	mov	r2, r6
    548e:	4621      	mov	r1, r4
    5490:	4638      	mov	r0, r7
    5492:	47c0      	blx	r8
}
    5494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005498 <notify_all>:
{
    5498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    549c:	4681      	mov	r9, r0
    549e:	460c      	mov	r4, r1
    54a0:	4690      	mov	r8, r2
    54a2:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    54a4:	e005      	b.n	54b2 <notify_all+0x1a>
	list->tail = node;
    54a6:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    54a8:	463b      	mov	r3, r7
    54aa:	4642      	mov	r2, r8
    54ac:	4648      	mov	r0, r9
    54ae:	f7ff ffe0 	bl	5472 <notify_one>
	return list->head;
    54b2:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    54b4:	b129      	cbz	r1, 54c2 <notify_all+0x2a>
	return node->next;
    54b6:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    54b8:	6025      	str	r5, [r4, #0]
	return list->tail;
    54ba:	6866      	ldr	r6, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    54bc:	428e      	cmp	r6, r1
    54be:	d1f3      	bne.n	54a8 <notify_all+0x10>
    54c0:	e7f1      	b.n	54a6 <notify_all+0xe>
}
    54c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000054c6 <transition_complete>:
{
    54c6:	b510      	push	{r4, lr}
	__asm__ volatile(
    54c8:	f04f 0420 	mov.w	r4, #32
    54cc:	f3ef 8211 	mrs	r2, BASEPRI
    54d0:	f384 8812 	msr	BASEPRI_MAX, r4
    54d4:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    54d8:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    54da:	2101      	movs	r1, #1
    54dc:	f7fb f84a 	bl	574 <process_event>
}
    54e0:	bd10      	pop	{r4, pc}

000054e2 <onoff_manager_init>:
	if ((mgr == NULL)
    54e2:	4603      	mov	r3, r0
    54e4:	b168      	cbz	r0, 5502 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    54e6:	b179      	cbz	r1, 5508 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    54e8:	680a      	ldr	r2, [r1, #0]
    54ea:	b182      	cbz	r2, 550e <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    54ec:	684a      	ldr	r2, [r1, #4]
    54ee:	b18a      	cbz	r2, 5514 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    54f0:	2000      	movs	r0, #0
    54f2:	6018      	str	r0, [r3, #0]
    54f4:	6058      	str	r0, [r3, #4]
    54f6:	6098      	str	r0, [r3, #8]
    54f8:	60d8      	str	r0, [r3, #12]
    54fa:	6158      	str	r0, [r3, #20]
    54fc:	6198      	str	r0, [r3, #24]
    54fe:	6119      	str	r1, [r3, #16]
	return 0;
    5500:	4770      	bx	lr
		return -EINVAL;
    5502:	f06f 0015 	mvn.w	r0, #21
    5506:	4770      	bx	lr
    5508:	f06f 0015 	mvn.w	r0, #21
    550c:	4770      	bx	lr
    550e:	f06f 0015 	mvn.w	r0, #21
    5512:	4770      	bx	lr
    5514:	f06f 0015 	mvn.w	r0, #21
}
    5518:	4770      	bx	lr

0000551a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    551a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    551c:	4604      	mov	r4, r0
    551e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5520:	f7ff ff91 	bl	5446 <validate_args>

	if (rv < 0) {
    5524:	1e06      	subs	r6, r0, #0
    5526:	db37      	blt.n	5598 <onoff_request+0x7e>
    5528:	f04f 0320 	mov.w	r3, #32
    552c:	f3ef 8211 	mrs	r2, BASEPRI
    5530:	f383 8812 	msr	BASEPRI_MAX, r3
    5534:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5538:	8b25      	ldrh	r5, [r4, #24]
    553a:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    553e:	8b63      	ldrh	r3, [r4, #26]
    5540:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5544:	428b      	cmp	r3, r1
    5546:	d02f      	beq.n	55a8 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    5548:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    554a:	2d02      	cmp	r5, #2
    554c:	d00c      	beq.n	5568 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    554e:	b18d      	cbz	r5, 5574 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    5550:	2d04      	cmp	r5, #4
    5552:	d00f      	beq.n	5574 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    5554:	2d06      	cmp	r5, #6
    5556:	d00d      	beq.n	5574 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    5558:	2d05      	cmp	r5, #5
    555a:	d01f      	beq.n	559c <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    555c:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    5560:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    5562:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    5564:	4608      	mov	r0, r1
    5566:	e00a      	b.n	557e <onoff_request+0x64>
		mgr->refs += 1U;
    5568:	3301      	adds	r3, #1
    556a:	8363      	strh	r3, [r4, #26]
		notify = true;
    556c:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    556e:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    5570:	4618      	mov	r0, r3
    5572:	e004      	b.n	557e <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    5574:	fab5 f385 	clz	r3, r5
    5578:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    557a:	2100      	movs	r1, #0
		add_client = true;
    557c:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    557e:	b128      	cbz	r0, 558c <onoff_request+0x72>
	parent->next = child;
    5580:	2000      	movs	r0, #0
    5582:	6038      	str	r0, [r7, #0]
	return list->tail;
    5584:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    5586:	b1a8      	cbz	r0, 55b4 <onoff_request+0x9a>
	parent->next = child;
    5588:	6007      	str	r7, [r0, #0]
	list->tail = node;
    558a:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    558c:	b9ab      	cbnz	r3, 55ba <onoff_request+0xa0>
	__asm__ volatile(
    558e:	f382 8811 	msr	BASEPRI, r2
    5592:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    5596:	b9a9      	cbnz	r1, 55c4 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    5598:	4630      	mov	r0, r6
    559a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    559c:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    55a0:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    55a2:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    55a4:	4608      	mov	r0, r1
    55a6:	e7ea      	b.n	557e <onoff_request+0x64>
		rv = -EAGAIN;
    55a8:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    55ac:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    55ae:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    55b0:	4608      	mov	r0, r1
    55b2:	e7e4      	b.n	557e <onoff_request+0x64>
    55b4:	6067      	str	r7, [r4, #4]
	list->head = node;
    55b6:	6027      	str	r7, [r4, #0]
}
    55b8:	e7e8      	b.n	558c <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    55ba:	2102      	movs	r1, #2
    55bc:	4620      	mov	r0, r4
    55be:	f7fa ffd9 	bl	574 <process_event>
    55c2:	e7e9      	b.n	5598 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    55c4:	2300      	movs	r3, #0
    55c6:	462a      	mov	r2, r5
    55c8:	4639      	mov	r1, r7
    55ca:	4620      	mov	r0, r4
    55cc:	f7ff ff51 	bl	5472 <notify_one>
    55d0:	e7e2      	b.n	5598 <onoff_request+0x7e>

000055d2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    55d2:	b508      	push	{r3, lr}
    55d4:	4604      	mov	r4, r0
    55d6:	4608      	mov	r0, r1
    55d8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    55da:	461a      	mov	r2, r3
    55dc:	47a0      	blx	r4
	return z_impl_z_current_get();
    55de:	f7ff fb11 	bl	4c04 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    55e2:	f7fc faa1 	bl	1b28 <z_impl_k_thread_abort>

000055e6 <extract_decimal>:
{
    55e6:	b410      	push	{r4}
    55e8:	4604      	mov	r4, r0
	const char *sp = *str;
    55ea:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    55ec:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    55ee:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    55f0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    55f4:	2909      	cmp	r1, #9
    55f6:	d806      	bhi.n	5606 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
    55f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    55fc:	3201      	adds	r2, #1
    55fe:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    5602:	3830      	subs	r0, #48	; 0x30
    5604:	e7f3      	b.n	55ee <extract_decimal+0x8>
	*str = sp;
    5606:	6022      	str	r2, [r4, #0]
}
    5608:	bc10      	pop	{r4}
    560a:	4770      	bx	lr

0000560c <encode_uint>:
{
    560c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5610:	b083      	sub	sp, #12
    5612:	4604      	mov	r4, r0
    5614:	460d      	mov	r5, r1
    5616:	9201      	str	r2, [sp, #4]
    5618:	469a      	mov	sl, r3
    561a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    561e:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    5620:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    5624:	2b6f      	cmp	r3, #111	; 0x6f
    5626:	d00f      	beq.n	5648 <encode_uint+0x3c>
    5628:	d906      	bls.n	5638 <encode_uint+0x2c>
    562a:	2b70      	cmp	r3, #112	; 0x70
    562c:	d00f      	beq.n	564e <encode_uint+0x42>
    562e:	2b78      	cmp	r3, #120	; 0x78
    5630:	d110      	bne.n	5654 <encode_uint+0x48>
		return 16;
    5632:	f04f 0910 	mov.w	r9, #16
    5636:	e026      	b.n	5686 <encode_uint+0x7a>
	switch (specifier) {
    5638:	2b58      	cmp	r3, #88	; 0x58
    563a:	d002      	beq.n	5642 <encode_uint+0x36>
    563c:	f04f 090a 	mov.w	r9, #10
    5640:	e021      	b.n	5686 <encode_uint+0x7a>
		return 16;
    5642:	f04f 0910 	mov.w	r9, #16
    5646:	e01e      	b.n	5686 <encode_uint+0x7a>
		return 8;
    5648:	f04f 0908 	mov.w	r9, #8
    564c:	e01b      	b.n	5686 <encode_uint+0x7a>
		return 16;
    564e:	f04f 0910 	mov.w	r9, #16
    5652:	e018      	b.n	5686 <encode_uint+0x7a>
	switch (specifier) {
    5654:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    5658:	e015      	b.n	5686 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    565a:	f1bb 0f19 	cmp.w	fp, #25
    565e:	d820      	bhi.n	56a2 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    5660:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5662:	3237      	adds	r2, #55	; 0x37
    5664:	b2d2      	uxtb	r2, r2
    5666:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
    566a:	4632      	mov	r2, r6
    566c:	463b      	mov	r3, r7
    566e:	4620      	mov	r0, r4
    5670:	4629      	mov	r1, r5
    5672:	f7fa fd6f 	bl	154 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    5676:	42bd      	cmp	r5, r7
    5678:	bf08      	it	eq
    567a:	42b4      	cmpeq	r4, r6
    567c:	d315      	bcc.n	56aa <encode_uint+0x9e>
    567e:	45d0      	cmp	r8, sl
    5680:	d913      	bls.n	56aa <encode_uint+0x9e>
		value /= radix;
    5682:	4604      	mov	r4, r0
    5684:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    5686:	464e      	mov	r6, r9
    5688:	2700      	movs	r7, #0
    568a:	464a      	mov	r2, r9
    568c:	463b      	mov	r3, r7
    568e:	4620      	mov	r0, r4
    5690:	4629      	mov	r1, r5
    5692:	f7fa fd5f 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5696:	2a09      	cmp	r2, #9
    5698:	d8df      	bhi.n	565a <encode_uint+0x4e>
    569a:	b2d2      	uxtb	r2, r2
    569c:	3230      	adds	r2, #48	; 0x30
    569e:	b2d2      	uxtb	r2, r2
    56a0:	e7e1      	b.n	5666 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    56a2:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    56a4:	3257      	adds	r2, #87	; 0x57
    56a6:	b2d2      	uxtb	r2, r2
    56a8:	e7dd      	b.n	5666 <encode_uint+0x5a>
	if (conv->flag_hash) {
    56aa:	9b01      	ldr	r3, [sp, #4]
    56ac:	781b      	ldrb	r3, [r3, #0]
    56ae:	f013 0f20 	tst.w	r3, #32
    56b2:	d005      	beq.n	56c0 <encode_uint+0xb4>
		if (radix == 8) {
    56b4:	f1b9 0f08 	cmp.w	r9, #8
    56b8:	d006      	beq.n	56c8 <encode_uint+0xbc>
		} else if (radix == 16) {
    56ba:	f1b9 0f10 	cmp.w	r9, #16
    56be:	d009      	beq.n	56d4 <encode_uint+0xc8>
}
    56c0:	4640      	mov	r0, r8
    56c2:	b003      	add	sp, #12
    56c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    56c8:	9a01      	ldr	r2, [sp, #4]
    56ca:	7893      	ldrb	r3, [r2, #2]
    56cc:	f043 0308 	orr.w	r3, r3, #8
    56d0:	7093      	strb	r3, [r2, #2]
    56d2:	e7f5      	b.n	56c0 <encode_uint+0xb4>
			conv->altform_0c = true;
    56d4:	9a01      	ldr	r2, [sp, #4]
    56d6:	7893      	ldrb	r3, [r2, #2]
    56d8:	f043 0310 	orr.w	r3, r3, #16
    56dc:	7093      	strb	r3, [r2, #2]
    56de:	e7ef      	b.n	56c0 <encode_uint+0xb4>

000056e0 <outs>:
{
    56e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    56e4:	4607      	mov	r7, r0
    56e6:	460e      	mov	r6, r1
    56e8:	4614      	mov	r4, r2
    56ea:	4698      	mov	r8, r3
	size_t count = 0;
    56ec:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    56ee:	e006      	b.n	56fe <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    56f0:	4631      	mov	r1, r6
    56f2:	f814 0b01 	ldrb.w	r0, [r4], #1
    56f6:	47b8      	blx	r7
		if (rc < 0) {
    56f8:	2800      	cmp	r0, #0
    56fa:	db09      	blt.n	5710 <outs+0x30>
		++count;
    56fc:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    56fe:	4544      	cmp	r4, r8
    5700:	d3f6      	bcc.n	56f0 <outs+0x10>
    5702:	f1b8 0f00 	cmp.w	r8, #0
    5706:	d102      	bne.n	570e <outs+0x2e>
    5708:	7823      	ldrb	r3, [r4, #0]
    570a:	2b00      	cmp	r3, #0
    570c:	d1f0      	bne.n	56f0 <outs+0x10>
	return (int)count;
    570e:	4628      	mov	r0, r5
}
    5710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005714 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5714:	4770      	bx	lr

00005716 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    5716:	b084      	sub	sp, #16
    5718:	ab04      	add	r3, sp, #16
    571a:	e903 0007 	stmdb	r3, {r0, r1, r2}
    571e:	2300      	movs	r3, #0
    5720:	f383 8811 	msr	BASEPRI, r3
    5724:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    5728:	b004      	add	sp, #16
    572a:	4770      	bx	lr

0000572c <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    572c:	2200      	movs	r2, #0
    572e:	6002      	str	r2, [r0, #0]
    5730:	6042      	str	r2, [r0, #4]
    5732:	6082      	str	r2, [r0, #8]
}
    5734:	4770      	bx	lr

00005736 <abort_function>:
{
    5736:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    5738:	2000      	movs	r0, #0
    573a:	f7fb fcb1 	bl	10a0 <sys_reboot>

0000573e <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    573e:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    5740:	f000 fcd4 	bl	60ec <z_fatal_error>
}
    5744:	bd08      	pop	{r3, pc}

00005746 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    5746:	b508      	push	{r3, lr}
    5748:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    574a:	6800      	ldr	r0, [r0, #0]
    574c:	f7ff fff7 	bl	573e <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    5750:	bd08      	pop	{r3, pc}

00005752 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    5752:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5754:	2100      	movs	r1, #0
    5756:	2001      	movs	r0, #1
    5758:	f7ff fff1 	bl	573e <z_arm_fatal_error>
}
    575c:	bd08      	pop	{r3, pc}

0000575e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    575e:	b508      	push	{r3, lr}
	handler();
    5760:	f7fb ff5e 	bl	1620 <z_SysNmiOnReset>
	z_arm_int_exit();
    5764:	f7fc f82c 	bl	17c0 <z_arm_exc_exit>
}
    5768:	bd08      	pop	{r3, pc}

0000576a <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
    576a:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    576e:	f383 880b 	msr	PSPLIM, r3
}
    5772:	4770      	bx	lr

00005774 <memory_fault_recoverable>:
}
    5774:	2000      	movs	r0, #0
    5776:	4770      	bx	lr

00005778 <debug_monitor>:
	*recoverable = false;
    5778:	2300      	movs	r3, #0
    577a:	700b      	strb	r3, [r1, #0]
}
    577c:	4770      	bx	lr

0000577e <fault_handle>:
{
    577e:	b508      	push	{r3, lr}
	*recoverable = false;
    5780:	2300      	movs	r3, #0
    5782:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    5784:	1ecb      	subs	r3, r1, #3
    5786:	2b09      	cmp	r3, #9
    5788:	d81a      	bhi.n	57c0 <fault_handle+0x42>
    578a:	e8df f003 	tbb	[pc, r3]
    578e:	0905      	.short	0x0905
    5790:	1919110d 	.word	0x1919110d
    5794:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    5798:	4611      	mov	r1, r2
    579a:	f7fc f88d 	bl	18b8 <hard_fault>
		break;
    579e:	e010      	b.n	57c2 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    57a0:	2100      	movs	r1, #0
    57a2:	f7fc f81b 	bl	17dc <mem_manage_fault>
		break;
    57a6:	e00c      	b.n	57c2 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    57a8:	2100      	movs	r1, #0
    57aa:	f7fc f843 	bl	1834 <bus_fault>
		break;
    57ae:	e008      	b.n	57c2 <fault_handle+0x44>
		reason = usage_fault(esf);
    57b0:	f7fc f86a 	bl	1888 <usage_fault>
		break;
    57b4:	e005      	b.n	57c2 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    57b6:	4611      	mov	r1, r2
    57b8:	f7ff ffde 	bl	5778 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    57bc:	2000      	movs	r0, #0
		break;
    57be:	e000      	b.n	57c2 <fault_handle+0x44>
	*recoverable = false;
    57c0:	2000      	movs	r0, #0
}
    57c2:	bd08      	pop	{r3, pc}

000057c4 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    57c4:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    57c8:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    57cc:	d001      	beq.n	57d2 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
    57ce:	b2c0      	uxtb	r0, r0
    57d0:	4770      	bx	lr
	}

	return -EINVAL;
    57d2:	f06f 0015 	mvn.w	r0, #21
}
    57d6:	4770      	bx	lr

000057d8 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
    57d8:	6843      	ldr	r3, [r0, #4]
		&&
    57da:	2b1f      	cmp	r3, #31
    57dc:	d90a      	bls.n	57f4 <mpu_partition_is_valid+0x1c>
		&&
    57de:	f013 0f1f 	tst.w	r3, #31
    57e2:	d001      	beq.n	57e8 <mpu_partition_is_valid+0x10>
		&&
    57e4:	2000      	movs	r0, #0
    57e6:	4770      	bx	lr
		((part->start &
    57e8:	6803      	ldr	r3, [r0, #0]
		&&
    57ea:	f013 0f1f 	tst.w	r3, #31
    57ee:	d003      	beq.n	57f8 <mpu_partition_is_valid+0x20>
    57f0:	2000      	movs	r0, #0
    57f2:	4770      	bx	lr
    57f4:	2000      	movs	r0, #0
    57f6:	4770      	bx	lr
    57f8:	2001      	movs	r0, #1
}
    57fa:	4770      	bx	lr

000057fc <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    57fc:	2807      	cmp	r0, #7
    57fe:	d805      	bhi.n	580c <region_allocate_and_init+0x10>
{
    5800:	b510      	push	{r4, lr}
    5802:	4604      	mov	r4, r0
	region_init(index, region_conf);
    5804:	f7fc f9cc 	bl	1ba0 <region_init>
	return index;
    5808:	4620      	mov	r0, r4
}
    580a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    580c:	f06f 0015 	mvn.w	r0, #21
}
    5810:	4770      	bx	lr

00005812 <mpu_configure_region>:
{
    5812:	b530      	push	{r4, r5, lr}
    5814:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    5816:	680b      	ldr	r3, [r1, #0]
    5818:	9300      	str	r3, [sp, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    581a:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    581c:	890d      	ldrh	r5, [r1, #8]
    581e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    5822:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    5826:	7a89      	ldrb	r1, [r1, #10]
    5828:	f361 1247 	bfi	r2, r1, #5, #3
    582c:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    5830:	f023 031f 	bic.w	r3, r3, #31
    5834:	4423      	add	r3, r4
    5836:	3b01      	subs	r3, #1
    5838:	f023 031f 	bic.w	r3, r3, #31
    583c:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    583e:	4669      	mov	r1, sp
    5840:	f7ff ffdc 	bl	57fc <region_allocate_and_init>
}
    5844:	b005      	add	sp, #20
    5846:	bd30      	pop	{r4, r5, pc}

00005848 <arm_core_mpu_configure_static_mpu_regions>:
{
    5848:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    584a:	f7fc fa87 	bl	1d5c <mpu_configure_static_mpu_regions>
}
    584e:	bd08      	pop	{r3, pc}

00005850 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    5850:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    5852:	f7fc fa8d 	bl	1d70 <mpu_mark_areas_for_dynamic_regions>
}
    5856:	bd08      	pop	{r3, pc}

00005858 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    5858:	4603      	mov	r3, r0
    585a:	b1a2      	cbz	r2, 5886 <strncpy+0x2e>
{
    585c:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    585e:	780c      	ldrb	r4, [r1, #0]
    5860:	b12c      	cbz	r4, 586e <strncpy+0x16>
		*d = *s;
    5862:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    5866:	3101      	adds	r1, #1
		d++;
		n--;
    5868:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    586a:	2a00      	cmp	r2, #0
    586c:	d1f7      	bne.n	585e <strncpy+0x6>
	}

	while (n > 0) {
    586e:	b122      	cbz	r2, 587a <strncpy+0x22>
		*d = '\0';
    5870:	2100      	movs	r1, #0
    5872:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    5876:	3a01      	subs	r2, #1
    5878:	e7f9      	b.n	586e <strncpy+0x16>
	}

	return dest;
}
    587a:	bc10      	pop	{r4}
    587c:	4770      	bx	lr
		*d = '\0';
    587e:	2100      	movs	r1, #0
    5880:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5884:	3a01      	subs	r2, #1
	while (n > 0) {
    5886:	2a00      	cmp	r2, #0
    5888:	d1f9      	bne.n	587e <strncpy+0x26>
    588a:	4770      	bx	lr

0000588c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    588c:	4603      	mov	r3, r0
	size_t n = 0;
    588e:	2000      	movs	r0, #0

	while (*s != '\0') {
    5890:	781a      	ldrb	r2, [r3, #0]
    5892:	b112      	cbz	r2, 589a <strlen+0xe>
		s++;
    5894:	3301      	adds	r3, #1
		n++;
    5896:	3001      	adds	r0, #1
    5898:	e7fa      	b.n	5890 <strlen+0x4>
	}

	return n;
}
    589a:	4770      	bx	lr

0000589c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    589c:	4603      	mov	r3, r0
	size_t n = 0;
    589e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    58a0:	781a      	ldrb	r2, [r3, #0]
    58a2:	b122      	cbz	r2, 58ae <strnlen+0x12>
    58a4:	4288      	cmp	r0, r1
    58a6:	d202      	bcs.n	58ae <strnlen+0x12>
		s++;
    58a8:	3301      	adds	r3, #1
		n++;
    58aa:	3001      	adds	r0, #1
    58ac:	e7f8      	b.n	58a0 <strnlen+0x4>
	}

	return n;
}
    58ae:	4770      	bx	lr

000058b0 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    58b0:	7803      	ldrb	r3, [r0, #0]
    58b2:	780a      	ldrb	r2, [r1, #0]
    58b4:	4293      	cmp	r3, r2
    58b6:	d103      	bne.n	58c0 <strcmp+0x10>
    58b8:	b113      	cbz	r3, 58c0 <strcmp+0x10>
		s1++;
    58ba:	3001      	adds	r0, #1
		s2++;
    58bc:	3101      	adds	r1, #1
    58be:	e7f7      	b.n	58b0 <strcmp>
	}

	return *s1 - *s2;
}
    58c0:	1a98      	subs	r0, r3, r2
    58c2:	4770      	bx	lr

000058c4 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    58c4:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    58c6:	ea80 0301 	eor.w	r3, r0, r1
    58ca:	f013 0f03 	tst.w	r3, #3
    58ce:	d001      	beq.n	58d4 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
    58d0:	4603      	mov	r3, r0
    58d2:	e017      	b.n	5904 <memcpy+0x40>
    58d4:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    58d6:	f013 0f03 	tst.w	r3, #3
    58da:	d00b      	beq.n	58f4 <memcpy+0x30>
			if (n == 0) {
    58dc:	b1a2      	cbz	r2, 5908 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    58de:	f811 4b01 	ldrb.w	r4, [r1], #1
    58e2:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    58e6:	3a01      	subs	r2, #1
    58e8:	e7f5      	b.n	58d6 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
    58ea:	f851 4b04 	ldr.w	r4, [r1], #4
    58ee:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    58f2:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    58f4:	2a03      	cmp	r2, #3
    58f6:	d8f8      	bhi.n	58ea <memcpy+0x26>
    58f8:	e004      	b.n	5904 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    58fa:	f811 4b01 	ldrb.w	r4, [r1], #1
    58fe:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    5902:	3a01      	subs	r2, #1
	while (n > 0) {
    5904:	2a00      	cmp	r2, #0
    5906:	d1f8      	bne.n	58fa <memcpy+0x36>
	}

	return d;
}
    5908:	bc10      	pop	{r4}
    590a:	4770      	bx	lr

0000590c <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    590c:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    590e:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
    5910:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    5912:	f013 0f03 	tst.w	r3, #3
    5916:	d004      	beq.n	5922 <memset+0x16>
		if (n == 0) {
    5918:	b19a      	cbz	r2, 5942 <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
    591a:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    591e:	3a01      	subs	r2, #1
    5920:	e7f7      	b.n	5912 <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    5922:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    5924:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    5928:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    592c:	2a03      	cmp	r2, #3
    592e:	d906      	bls.n	593e <memset+0x32>
		*(d_word++) = c_word;
    5930:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    5934:	3a04      	subs	r2, #4
    5936:	e7f9      	b.n	592c <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    5938:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    593c:	3a01      	subs	r2, #1
	while (n > 0) {
    593e:	2a00      	cmp	r2, #0
    5940:	d1fa      	bne.n	5938 <memset+0x2c>
	}

	return buf;
}
    5942:	bc10      	pop	{r4}
    5944:	4770      	bx	lr

00005946 <_stdout_hook_default>:
}
    5946:	f04f 30ff 	mov.w	r0, #4294967295
    594a:	4770      	bx	lr

0000594c <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    594c:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    594e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5952:	0089      	lsls	r1, r1, #2
    5954:	3170      	adds	r1, #112	; 0x70
}
    5956:	4408      	add	r0, r1
    5958:	4770      	bx	lr

0000595a <get_sub_config>:
	const struct nrf_clock_control_config *config =
    595a:	6840      	ldr	r0, [r0, #4]
}
    595c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    5960:	4770      	bx	lr

00005962 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    5962:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    5964:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    5968:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    596c:	4770      	bx	lr

0000596e <get_status>:
{
    596e:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5970:	b2c9      	uxtb	r1, r1
    5972:	f7ff ffeb 	bl	594c <get_sub_data>
    5976:	6880      	ldr	r0, [r0, #8]
}
    5978:	f000 0007 	and.w	r0, r0, #7
    597c:	bd08      	pop	{r3, pc}

0000597e <set_off_state>:
	__asm__ volatile(
    597e:	f04f 0320 	mov.w	r3, #32
    5982:	f3ef 8211 	mrs	r2, BASEPRI
    5986:	f383 8812 	msr	BASEPRI_MAX, r3
    598a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    598e:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5990:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    5994:	d001      	beq.n	599a <set_off_state+0x1c>
    5996:	428b      	cmp	r3, r1
    5998:	d107      	bne.n	59aa <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    599a:	2301      	movs	r3, #1
    599c:	6003      	str	r3, [r0, #0]
	int err = 0;
    599e:	2000      	movs	r0, #0
	__asm__ volatile(
    59a0:	f382 8811 	msr	BASEPRI, r2
    59a4:	f3bf 8f6f 	isb	sy
}
    59a8:	4770      	bx	lr
		err = -EPERM;
    59aa:	f04f 30ff 	mov.w	r0, #4294967295
    59ae:	e7f7      	b.n	59a0 <set_off_state+0x22>

000059b0 <set_starting_state>:
{
    59b0:	b410      	push	{r4}
	__asm__ volatile(
    59b2:	f04f 0320 	mov.w	r3, #32
    59b6:	f3ef 8211 	mrs	r2, BASEPRI
    59ba:	f383 8812 	msr	BASEPRI_MAX, r3
    59be:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    59c2:	6803      	ldr	r3, [r0, #0]
    59c4:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    59c8:	f003 0307 	and.w	r3, r3, #7
    59cc:	2b01      	cmp	r3, #1
    59ce:	d009      	beq.n	59e4 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
    59d0:	428c      	cmp	r4, r1
    59d2:	d00a      	beq.n	59ea <set_starting_state+0x3a>
		err = -EPERM;
    59d4:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    59d8:	f382 8811 	msr	BASEPRI, r2
    59dc:	f3bf 8f6f 	isb	sy
}
    59e0:	bc10      	pop	{r4}
    59e2:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    59e4:	6001      	str	r1, [r0, #0]
	int err = 0;
    59e6:	2000      	movs	r0, #0
    59e8:	e7f6      	b.n	59d8 <set_starting_state+0x28>
		err = -EALREADY;
    59ea:	f06f 0077 	mvn.w	r0, #119	; 0x77
    59ee:	e7f3      	b.n	59d8 <set_starting_state+0x28>

000059f0 <set_on_state>:
	__asm__ volatile(
    59f0:	f04f 0320 	mov.w	r3, #32
    59f4:	f3ef 8211 	mrs	r2, BASEPRI
    59f8:	f383 8812 	msr	BASEPRI_MAX, r3
    59fc:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5a00:	6803      	ldr	r3, [r0, #0]
    5a02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5a06:	f043 0302 	orr.w	r3, r3, #2
    5a0a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    5a0c:	f382 8811 	msr	BASEPRI, r2
    5a10:	f3bf 8f6f 	isb	sy
}
    5a14:	4770      	bx	lr

00005a16 <clkstarted_handle>:
{
    5a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a18:	4606      	mov	r6, r0
    5a1a:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    5a1c:	f7ff ff96 	bl	594c <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    5a20:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    5a22:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    5a24:	2300      	movs	r3, #0
    5a26:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    5a2a:	f7ff ffe1 	bl	59f0 <set_on_state>
	if (callback) {
    5a2e:	b11d      	cbz	r5, 5a38 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    5a30:	463a      	mov	r2, r7
    5a32:	4621      	mov	r1, r4
    5a34:	4630      	mov	r0, r6
    5a36:	47a8      	blx	r5
}
    5a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005a3a <stop>:
{
    5a3a:	b570      	push	{r4, r5, r6, lr}
    5a3c:	4606      	mov	r6, r0
    5a3e:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5a40:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5a42:	4621      	mov	r1, r4
    5a44:	f7ff ff82 	bl	594c <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    5a48:	4629      	mov	r1, r5
    5a4a:	3008      	adds	r0, #8
    5a4c:	f7ff ff97 	bl	597e <set_off_state>
	if (err < 0) {
    5a50:	2800      	cmp	r0, #0
    5a52:	db06      	blt.n	5a62 <stop+0x28>
	get_sub_config(dev, type)->stop();
    5a54:	4621      	mov	r1, r4
    5a56:	4630      	mov	r0, r6
    5a58:	f7ff ff7f 	bl	595a <get_sub_config>
    5a5c:	6843      	ldr	r3, [r0, #4]
    5a5e:	4798      	blx	r3
	return 0;
    5a60:	2000      	movs	r0, #0
}
    5a62:	bd70      	pop	{r4, r5, r6, pc}

00005a64 <api_stop>:
{
    5a64:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    5a66:	2280      	movs	r2, #128	; 0x80
    5a68:	f7ff ffe7 	bl	5a3a <stop>
}
    5a6c:	bd08      	pop	{r3, pc}

00005a6e <async_start>:
{
    5a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a72:	4606      	mov	r6, r0
    5a74:	4690      	mov	r8, r2
    5a76:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5a78:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5a7a:	4629      	mov	r1, r5
    5a7c:	f7ff ff66 	bl	594c <get_sub_data>
    5a80:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    5a82:	9906      	ldr	r1, [sp, #24]
    5a84:	3008      	adds	r0, #8
    5a86:	f7ff ff93 	bl	59b0 <set_starting_state>
	if (err < 0) {
    5a8a:	2800      	cmp	r0, #0
    5a8c:	db09      	blt.n	5aa2 <async_start+0x34>
	subdata->cb = cb;
    5a8e:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    5a92:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    5a94:	4629      	mov	r1, r5
    5a96:	4630      	mov	r0, r6
    5a98:	f7ff ff5f 	bl	595a <get_sub_config>
    5a9c:	6803      	ldr	r3, [r0, #0]
    5a9e:	4798      	blx	r3
	return 0;
    5aa0:	2000      	movs	r0, #0
}
    5aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005aa6 <api_start>:
{
    5aa6:	b510      	push	{r4, lr}
    5aa8:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    5aaa:	2480      	movs	r4, #128	; 0x80
    5aac:	9400      	str	r4, [sp, #0]
    5aae:	f7ff ffde 	bl	5a6e <async_start>
}
    5ab2:	b002      	add	sp, #8
    5ab4:	bd10      	pop	{r4, pc}

00005ab6 <onoff_started_callback>:
{
    5ab6:	b510      	push	{r4, lr}
    5ab8:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    5aba:	b2c9      	uxtb	r1, r1
    5abc:	f7ff ff51 	bl	5962 <get_onoff_manager>
	notify(mgr, 0);
    5ac0:	2100      	movs	r1, #0
    5ac2:	47a0      	blx	r4
}
    5ac4:	bd10      	pop	{r4, pc}

00005ac6 <hfclk_start>:
{
    5ac6:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5ac8:	2001      	movs	r0, #1
    5aca:	f7fd fac3 	bl	3054 <nrfx_clock_start>
}
    5ace:	bd08      	pop	{r3, pc}

00005ad0 <hfclkaudio_start>:
{
    5ad0:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    5ad2:	2003      	movs	r0, #3
    5ad4:	f7fd fabe 	bl	3054 <nrfx_clock_start>
}
    5ad8:	bd08      	pop	{r3, pc}

00005ada <hfclk192m_start>:
{
    5ada:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    5adc:	2002      	movs	r0, #2
    5ade:	f7fd fab9 	bl	3054 <nrfx_clock_start>
}
    5ae2:	bd08      	pop	{r3, pc}

00005ae4 <lfclk_start>:
{
    5ae4:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    5ae6:	2000      	movs	r0, #0
    5ae8:	f7fd fab4 	bl	3054 <nrfx_clock_start>
}
    5aec:	bd08      	pop	{r3, pc}

00005aee <hfclk_stop>:
{
    5aee:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    5af0:	2001      	movs	r0, #1
    5af2:	f7fd fb09 	bl	3108 <nrfx_clock_stop>
}
    5af6:	bd08      	pop	{r3, pc}

00005af8 <hfclkaudio_stop>:
{
    5af8:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    5afa:	2003      	movs	r0, #3
    5afc:	f7fd fb04 	bl	3108 <nrfx_clock_stop>
}
    5b00:	bd08      	pop	{r3, pc}

00005b02 <hfclk192m_stop>:
{
    5b02:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    5b04:	2002      	movs	r0, #2
    5b06:	f7fd faff 	bl	3108 <nrfx_clock_stop>
}
    5b0a:	bd08      	pop	{r3, pc}

00005b0c <lfclk_stop>:
{
    5b0c:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5b0e:	2000      	movs	r0, #0
    5b10:	f7fd fafa 	bl	3108 <nrfx_clock_stop>
}
    5b14:	bd08      	pop	{r3, pc}

00005b16 <blocking_start_callback>:
{
    5b16:	b508      	push	{r3, lr}
    5b18:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5b1a:	f7fe fc69 	bl	43f0 <z_impl_k_sem_give>
}
    5b1e:	bd08      	pop	{r3, pc}

00005b20 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    5b20:	f010 0f10 	tst.w	r0, #16
    5b24:	d104      	bne.n	5b30 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    5b26:	f010 0f20 	tst.w	r0, #32
    5b2a:	d103      	bne.n	5b34 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    5b2c:	2000      	movs	r0, #0
    5b2e:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    5b30:	2003      	movs	r0, #3
    5b32:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    5b34:	2001      	movs	r0, #1
}
    5b36:	4770      	bx	lr

00005b38 <gpio_nrfx_port_get_raw>:
	return port->config;
    5b38:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5b3a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    5b3c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    5b3e:	600b      	str	r3, [r1, #0]
}
    5b40:	2000      	movs	r0, #0
    5b42:	4770      	bx	lr

00005b44 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    5b44:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5b46:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    5b48:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    5b4a:	4042      	eors	r2, r0
    5b4c:	400a      	ands	r2, r1
    5b4e:	4042      	eors	r2, r0
    p_reg->OUT = value;
    5b50:	605a      	str	r2, [r3, #4]
}
    5b52:	2000      	movs	r0, #0
    5b54:	4770      	bx	lr

00005b56 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    5b56:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5b58:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    5b5a:	6099      	str	r1, [r3, #8]
}
    5b5c:	2000      	movs	r0, #0
    5b5e:	4770      	bx	lr

00005b60 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    5b60:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5b62:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    5b64:	60d9      	str	r1, [r3, #12]
}
    5b66:	2000      	movs	r0, #0
    5b68:	4770      	bx	lr

00005b6a <gpio_nrfx_port_toggle_bits>:
	return port->config;
    5b6a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5b6c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    5b6e:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    5b70:	404b      	eors	r3, r1
    p_reg->OUT = value;
    5b72:	6053      	str	r3, [r2, #4]
}
    5b74:	2000      	movs	r0, #0
    5b76:	4770      	bx	lr

00005b78 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    5b78:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    5b7c:	d007      	beq.n	5b8e <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5b7e:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
    5b82:	d00d      	beq.n	5ba0 <get_trigger+0x28>
    5b84:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    5b88:	d008      	beq.n	5b9c <get_trigger+0x24>
    5b8a:	2001      	movs	r0, #1
}
    5b8c:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    5b8e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    5b92:	d001      	beq.n	5b98 <get_trigger+0x20>
    5b94:	2005      	movs	r0, #5
    5b96:	4770      	bx	lr
    5b98:	2004      	movs	r0, #4
    5b9a:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5b9c:	2002      	movs	r0, #2
    5b9e:	4770      	bx	lr
    5ba0:	2003      	movs	r0, #3
    5ba2:	4770      	bx	lr

00005ba4 <gpio_nrfx_manage_callback>:
{
    5ba4:	b470      	push	{r4, r5, r6}
	return port->data;
    5ba6:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5ba8:	1d05      	adds	r5, r0, #4
	return list->head;
    5baa:	6843      	ldr	r3, [r0, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    5bac:	b1db      	cbz	r3, 5be6 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    5bae:	460e      	mov	r6, r1
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5bb0:	2400      	movs	r4, #0
    5bb2:	e00a      	b.n	5bca <gpio_nrfx_manage_callback+0x26>
	return node->next;
    5bb4:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    5bb6:	6043      	str	r3, [r0, #4]
	return list->tail;
    5bb8:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    5bba:	42a1      	cmp	r1, r4
    5bbc:	d10f      	bne.n	5bde <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    5bbe:	606b      	str	r3, [r5, #4]
}
    5bc0:	e00d      	b.n	5bde <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    5bc2:	606c      	str	r4, [r5, #4]
}
    5bc4:	e00b      	b.n	5bde <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5bc6:	461c      	mov	r4, r3
    5bc8:	681b      	ldr	r3, [r3, #0]
    5bca:	b15b      	cbz	r3, 5be4 <gpio_nrfx_manage_callback+0x40>
    5bcc:	429e      	cmp	r6, r3
    5bce:	d1fa      	bne.n	5bc6 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
    5bd0:	2c00      	cmp	r4, #0
    5bd2:	d0ef      	beq.n	5bb4 <gpio_nrfx_manage_callback+0x10>
	return node->next;
    5bd4:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    5bd6:	6023      	str	r3, [r4, #0]
	return list->tail;
    5bd8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    5bda:	4299      	cmp	r1, r3
    5bdc:	d0f1      	beq.n	5bc2 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
    5bde:	2300      	movs	r3, #0
    5be0:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5be2:	e000      	b.n	5be6 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
    5be4:	b152      	cbz	r2, 5bfc <gpio_nrfx_manage_callback+0x58>
				return -EINVAL;
			}
		}
	}

	if (set) {
    5be6:	b162      	cbz	r2, 5c02 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
    5be8:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
    5bea:	600b      	str	r3, [r1, #0]
	list->head = node;
    5bec:	6041      	str	r1, [r0, #4]
	return list->tail;
    5bee:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    5bf0:	b10b      	cbz	r3, 5bf6 <gpio_nrfx_manage_callback+0x52>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    5bf2:	2000      	movs	r0, #0
    5bf4:	e006      	b.n	5c04 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    5bf6:	6069      	str	r1, [r5, #4]
    5bf8:	2000      	movs	r0, #0
}
    5bfa:	e003      	b.n	5c04 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
    5bfc:	f06f 0015 	mvn.w	r0, #21
    5c00:	e000      	b.n	5c04 <gpio_nrfx_manage_callback+0x60>
	return 0;
    5c02:	2000      	movs	r0, #0
}
    5c04:	bc70      	pop	{r4, r5, r6}
    5c06:	4770      	bx	lr

00005c08 <nrfx_gpio_handler>:
{
    5c08:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
    5c0a:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    5c0e:	0940      	lsrs	r0, r0, #5
    5c10:	f7fc fb4e 	bl	22b0 <get_dev>
	if (port == NULL) {
    5c14:	b1d8      	cbz	r0, 5c4e <nrfx_gpio_handler+0x46>
    5c16:	4606      	mov	r6, r0
	return port->data;
    5c18:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    5c1a:	2501      	movs	r5, #1
    5c1c:	40a5      	lsls	r5, r4
	return list->head;
    5c1e:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5c20:	b119      	cbz	r1, 5c2a <nrfx_gpio_handler+0x22>
    5c22:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    5c24:	b149      	cbz	r1, 5c3a <nrfx_gpio_handler+0x32>
	return node->next;
    5c26:	680c      	ldr	r4, [r1, #0]
    5c28:	e007      	b.n	5c3a <nrfx_gpio_handler+0x32>
    5c2a:	460c      	mov	r4, r1
    5c2c:	e005      	b.n	5c3a <nrfx_gpio_handler+0x32>
    5c2e:	b164      	cbz	r4, 5c4a <nrfx_gpio_handler+0x42>
    5c30:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    5c32:	b104      	cbz	r4, 5c36 <nrfx_gpio_handler+0x2e>
	return node->next;
    5c34:	6823      	ldr	r3, [r4, #0]
    5c36:	4621      	mov	r1, r4
    5c38:	461c      	mov	r4, r3
    5c3a:	b141      	cbz	r1, 5c4e <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
    5c3c:	688a      	ldr	r2, [r1, #8]
    5c3e:	402a      	ands	r2, r5
    5c40:	d0f5      	beq.n	5c2e <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5c42:	684b      	ldr	r3, [r1, #4]
    5c44:	4630      	mov	r0, r6
    5c46:	4798      	blx	r3
    5c48:	e7f1      	b.n	5c2e <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5c4a:	4623      	mov	r3, r4
    5c4c:	e7f3      	b.n	5c36 <nrfx_gpio_handler+0x2e>
}
    5c4e:	bd70      	pop	{r4, r5, r6, pc}

00005c50 <endtx_isr>:
	return dev->config;
    5c50:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5c52:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    5c54:	f04f 0120 	mov.w	r1, #32
    5c58:	f3ef 8211 	mrs	r2, BASEPRI
    5c5c:	f381 8812 	msr	BASEPRI_MAX, r1
    5c60:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5c64:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5c68:	b131      	cbz	r1, 5c78 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5c6a:	2100      	movs	r1, #0
    5c6c:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    5c70:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c74:	2101      	movs	r1, #1
    5c76:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    5c78:	f382 8811 	msr	BASEPRI, r2
    5c7c:	f3bf 8f6f 	isb	sy
}
    5c80:	4770      	bx	lr

00005c82 <uarte_nrfx_isr_int>:
{
    5c82:	b538      	push	{r3, r4, r5, lr}
    5c84:	4604      	mov	r4, r0
	return dev->config;
    5c86:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5c88:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    5c8a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5c8e:	f413 7f80 	tst.w	r3, #256	; 0x100
    5c92:	d002      	beq.n	5c9a <uarte_nrfx_isr_int+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5c94:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    5c98:	b9db      	cbnz	r3, 5cd2 <uarte_nrfx_isr_int+0x50>
	return dev->config;
    5c9a:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5c9c:	685b      	ldr	r3, [r3, #4]
    5c9e:	f013 0f10 	tst.w	r3, #16
    5ca2:	d015      	beq.n	5cd0 <uarte_nrfx_isr_int+0x4e>
	__asm__ volatile(
    5ca4:	f04f 0220 	mov.w	r2, #32
    5ca8:	f3ef 8311 	mrs	r3, BASEPRI
    5cac:	f382 8812 	msr	BASEPRI_MAX, r2
    5cb0:	f3bf 8f6f 	isb	sy
    5cb4:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    5cb8:	b112      	cbz	r2, 5cc0 <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5cba:	2200      	movs	r2, #0
    5cbc:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    5cc0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    5cc4:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
    5cc8:	f383 8811 	msr	BASEPRI, r3
    5ccc:	f3bf 8f6f 	isb	sy
}
    5cd0:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    5cd2:	f7ff ffbd 	bl	5c50 <endtx_isr>
    5cd6:	e7e0      	b.n	5c9a <uarte_nrfx_isr_int+0x18>

00005cd8 <uarte_nrfx_configure>:
{
    5cd8:	b530      	push	{r4, r5, lr}
    5cda:	b083      	sub	sp, #12
    5cdc:	4605      	mov	r5, r0
    5cde:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
    5ce0:	794b      	ldrb	r3, [r1, #5]
    5ce2:	2b01      	cmp	r3, #1
    5ce4:	d006      	beq.n	5cf4 <uarte_nrfx_configure+0x1c>
    5ce6:	2b03      	cmp	r3, #3
    5ce8:	d011      	beq.n	5d0e <uarte_nrfx_configure+0x36>
    5cea:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
    5cee:	4610      	mov	r0, r2
    5cf0:	b003      	add	sp, #12
    5cf2:	bd30      	pop	{r4, r5, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    5cf4:	2300      	movs	r3, #0
    5cf6:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    5cfa:	79a3      	ldrb	r3, [r4, #6]
    5cfc:	2b03      	cmp	r3, #3
    5cfe:	d147      	bne.n	5d90 <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
    5d00:	79e3      	ldrb	r3, [r4, #7]
    5d02:	b143      	cbz	r3, 5d16 <uarte_nrfx_configure+0x3e>
    5d04:	2b01      	cmp	r3, #1
    5d06:	d015      	beq.n	5d34 <uarte_nrfx_configure+0x5c>
    5d08:	f06f 0285 	mvn.w	r2, #133	; 0x85
    5d0c:	e7ef      	b.n	5cee <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    5d0e:	2310      	movs	r3, #16
    5d10:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    5d14:	e7f1      	b.n	5cfa <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    5d16:	2300      	movs	r3, #0
    5d18:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    5d1c:	2300      	movs	r3, #0
    5d1e:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
    5d22:	7923      	ldrb	r3, [r4, #4]
    5d24:	2b01      	cmp	r3, #1
    5d26:	d02b      	beq.n	5d80 <uarte_nrfx_configure+0xa8>
    5d28:	2b02      	cmp	r3, #2
    5d2a:	d025      	beq.n	5d78 <uarte_nrfx_configure+0xa0>
    5d2c:	b133      	cbz	r3, 5d3c <uarte_nrfx_configure+0x64>
    5d2e:	f06f 0285 	mvn.w	r2, #133	; 0x85
    5d32:	e7dc      	b.n	5cee <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    5d34:	2301      	movs	r3, #1
    5d36:	f88d 3000 	strb.w	r3, [sp]
		break;
    5d3a:	e7ef      	b.n	5d1c <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    5d3c:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    5d40:	6821      	ldr	r1, [r4, #0]
    5d42:	4628      	mov	r0, r5
    5d44:	f7fc fcce 	bl	26e4 <baudrate_set>
    5d48:	4602      	mov	r2, r0
    5d4a:	bb20      	cbnz	r0, 5d96 <uarte_nrfx_configure+0xbe>
	return dev->config;
    5d4c:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
    5d4e:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5d50:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
    5d54:	f89d 0002 	ldrb.w	r0, [sp, #2]
    5d58:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
    5d5a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    5d5e:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
    5d60:	f89d 0000 	ldrb.w	r0, [sp]
    5d64:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5d66:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	return dev->data;
    5d6a:	692b      	ldr	r3, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
    5d6c:	3304      	adds	r3, #4
    5d6e:	e894 0003 	ldmia.w	r4, {r0, r1}
    5d72:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    5d76:	e7ba      	b.n	5cee <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5d78:	230e      	movs	r3, #14
    5d7a:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
    5d7e:	e7df      	b.n	5d40 <uarte_nrfx_configure+0x68>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5d80:	230e      	movs	r3, #14
    5d82:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    5d86:	f44f 7380 	mov.w	r3, #256	; 0x100
    5d8a:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
    5d8e:	e7d7      	b.n	5d40 <uarte_nrfx_configure+0x68>
		return -ENOTSUP;
    5d90:	f06f 0285 	mvn.w	r2, #133	; 0x85
    5d94:	e7ab      	b.n	5cee <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
    5d96:	f06f 0285 	mvn.w	r2, #133	; 0x85
    5d9a:	e7a8      	b.n	5cee <uarte_nrfx_configure+0x16>

00005d9c <uarte_nrfx_config_get>:
{
    5d9c:	460b      	mov	r3, r1
	return dev->data;
    5d9e:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
    5da0:	6891      	ldr	r1, [r2, #8]
    5da2:	6850      	ldr	r0, [r2, #4]
    5da4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    5da8:	2000      	movs	r0, #0
    5daa:	4770      	bx	lr

00005dac <uarte_nrfx_err_check>:
	return dev->config;
    5dac:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5dae:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5db0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5db4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5db8:	4770      	bx	lr

00005dba <is_tx_ready>:
	return dev->config;
    5dba:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5dbc:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    5dbe:	685b      	ldr	r3, [r3, #4]
    5dc0:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5dc4:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5dc8:	b929      	cbnz	r1, 5dd6 <is_tx_ready+0x1c>
    5dca:	b933      	cbnz	r3, 5dda <is_tx_ready+0x20>
    5dcc:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    5dd0:	b92b      	cbnz	r3, 5dde <is_tx_ready+0x24>
    5dd2:	2000      	movs	r0, #0
    5dd4:	4770      	bx	lr
    5dd6:	2001      	movs	r0, #1
    5dd8:	4770      	bx	lr
    5dda:	2000      	movs	r0, #0
    5ddc:	4770      	bx	lr
    5dde:	2001      	movs	r0, #1
}
    5de0:	4770      	bx	lr

00005de2 <uarte_enable>:
	return dev->config;
    5de2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5de4:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5de6:	2208      	movs	r2, #8
    5de8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    5dec:	4770      	bx	lr

00005dee <tx_start>:
{
    5dee:	b510      	push	{r4, lr}
	return dev->config;
    5df0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5df2:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5df4:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5df8:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5dfc:	2300      	movs	r3, #0
    5dfe:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    5e02:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    5e06:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
    5e0a:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
    5e0e:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5e10:	685b      	ldr	r3, [r3, #4]
    5e12:	f013 0f10 	tst.w	r3, #16
    5e16:	d102      	bne.n	5e1e <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e18:	2301      	movs	r3, #1
    5e1a:	60a3      	str	r3, [r4, #8]
}
    5e1c:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    5e1e:	2101      	movs	r1, #1
    5e20:	f7ff ffdf 	bl	5de2 <uarte_enable>
    p_reg->INTENSET = mask;
    5e24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5e28:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    5e2c:	e7f4      	b.n	5e18 <tx_start+0x2a>

00005e2e <uarte_nrfx_poll_in>:
{
    5e2e:	b410      	push	{r4}
	return dev->data;
    5e30:	6904      	ldr	r4, [r0, #16]
	return dev->config;
    5e32:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5e34:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5e36:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5e3a:	b152      	cbz	r2, 5e52 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    5e3c:	7c62      	ldrb	r2, [r4, #17]
    5e3e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e40:	2000      	movs	r0, #0
    5e42:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5e46:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e4a:	2201      	movs	r2, #1
    5e4c:	601a      	str	r2, [r3, #0]
}
    5e4e:	bc10      	pop	{r4}
    5e50:	4770      	bx	lr
		return -1;
    5e52:	f04f 30ff 	mov.w	r0, #4294967295
    5e56:	e7fa      	b.n	5e4e <uarte_nrfx_poll_in+0x20>

00005e58 <wait_tx_ready>:
{
    5e58:	b570      	push	{r4, r5, r6, lr}
    5e5a:	4606      	mov	r6, r0
    5e5c:	e014      	b.n	5e88 <wait_tx_ready+0x30>
		if (res) {
    5e5e:	b17d      	cbz	r5, 5e80 <wait_tx_ready+0x28>
	__asm__ volatile(
    5e60:	f04f 0320 	mov.w	r3, #32
    5e64:	f3ef 8411 	mrs	r4, BASEPRI
    5e68:	f383 8812 	msr	BASEPRI_MAX, r3
    5e6c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    5e70:	4630      	mov	r0, r6
    5e72:	f7ff ffa2 	bl	5dba <is_tx_ready>
    5e76:	b9a0      	cbnz	r0, 5ea2 <wait_tx_ready+0x4a>
	__asm__ volatile(
    5e78:	f384 8811 	msr	BASEPRI, r4
    5e7c:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    5e80:	2021      	movs	r0, #33	; 0x21
    5e82:	2100      	movs	r1, #0
    5e84:	f7fe fe92 	bl	4bac <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    5e88:	2464      	movs	r4, #100	; 0x64
    5e8a:	4630      	mov	r0, r6
    5e8c:	f7ff ff95 	bl	5dba <is_tx_ready>
    5e90:	4605      	mov	r5, r0
    5e92:	2800      	cmp	r0, #0
    5e94:	d1e3      	bne.n	5e5e <wait_tx_ready+0x6>
    5e96:	2001      	movs	r0, #1
    5e98:	f000 f8e9 	bl	606e <nrfx_busy_wait>
    5e9c:	3c01      	subs	r4, #1
    5e9e:	d1f4      	bne.n	5e8a <wait_tx_ready+0x32>
    5ea0:	e7dd      	b.n	5e5e <wait_tx_ready+0x6>
}
    5ea2:	4620      	mov	r0, r4
    5ea4:	bd70      	pop	{r4, r5, r6, pc}

00005ea6 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    5ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ea8:	4604      	mov	r4, r0
	return dev->config;
    5eaa:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
    5eac:	6835      	ldr	r5, [r6, #0]
	return dev->data;
    5eae:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5eb0:	2100      	movs	r1, #0
    5eb2:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    5eb6:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
    5eb8:	f7fc fb2e 	bl	2518 <uarte_nrfx_pins_configure>
	return dev->data;
    5ebc:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    5ebe:	3104      	adds	r1, #4
    5ec0:	4620      	mov	r0, r4
    5ec2:	f7ff ff09 	bl	5cd8 <uarte_nrfx_configure>
	if (err) {
    5ec6:	4604      	mov	r4, r0
    5ec8:	bb68      	cbnz	r0, 5f26 <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    5eca:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    5ecc:	f013 0f02 	tst.w	r3, #2
    5ed0:	d12b      	bne.n	5f2a <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5ed2:	2308      	movs	r3, #8
    5ed4:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    5ed8:	7a33      	ldrb	r3, [r6, #8]
    5eda:	b95b      	cbnz	r3, 5ef4 <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5edc:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    5ee0:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    5ee4:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5ee8:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5eec:	2301      	movs	r3, #1
    5eee:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5ef2:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    5ef4:	6873      	ldr	r3, [r6, #4]
    5ef6:	f013 0f02 	tst.w	r3, #2
    5efa:	d103      	bne.n	5f04 <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
    5efc:	f44f 7380 	mov.w	r3, #256	; 0x100
    5f00:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5f04:	6873      	ldr	r3, [r6, #4]
    5f06:	f013 0f10 	tst.w	r3, #16
    5f0a:	d003      	beq.n	5f14 <uarte_instance_init+0x6e>
    5f0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5f10:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    5f14:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5f16:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5f1a:	2300      	movs	r3, #0
    5f1c:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f20:	2301      	movs	r3, #1
    5f22:	60ab      	str	r3, [r5, #8]
    5f24:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    5f26:	4620      	mov	r0, r4
    5f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    5f2a:	4639      	mov	r1, r7
    5f2c:	4628      	mov	r0, r5
    5f2e:	f7fc fcb9 	bl	28a4 <endtx_stoptx_ppi_init>
		if (err < 0) {
    5f32:	2800      	cmp	r0, #0
    5f34:	dacd      	bge.n	5ed2 <uarte_instance_init+0x2c>
			return err;
    5f36:	4604      	mov	r4, r0
    5f38:	e7f5      	b.n	5f26 <uarte_instance_init+0x80>

00005f3a <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    5f3a:	b510      	push	{r4, lr}
    5f3c:	4604      	mov	r4, r0
    5f3e:	2200      	movs	r2, #0
    5f40:	2101      	movs	r1, #1
    5f42:	2008      	movs	r0, #8
    5f44:	f7fb fb56 	bl	15f4 <z_arm_irq_priority_set>
    5f48:	2008      	movs	r0, #8
    5f4a:	f7fb fb35 	bl	15b8 <arch_irq_enable>
    5f4e:	2100      	movs	r1, #0
    5f50:	4620      	mov	r0, r4
    5f52:	f7ff ffa8 	bl	5ea6 <uarte_instance_init>
    5f56:	bd10      	pop	{r4, pc}

00005f58 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    5f58:	4770      	bx	lr

00005f5a <counter_sub>:
	return (a - b) & COUNTER_MAX;
    5f5a:	1a40      	subs	r0, r0, r1
}
    5f5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5f60:	4770      	bx	lr

00005f62 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5f62:	f100 0350 	add.w	r3, r0, #80	; 0x50
    5f66:	009b      	lsls	r3, r3, #2
    5f68:	b29b      	uxth	r3, r3
    5f6a:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    5f6e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    5f72:	2200      	movs	r2, #0
    5f74:	601a      	str	r2, [r3, #0]
    5f76:	681b      	ldr	r3, [r3, #0]
}
    5f78:	4770      	bx	lr

00005f7a <absolute_time_to_cc>:
}
    5f7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5f7e:	4770      	bx	lr

00005f80 <full_int_lock>:
	__asm__ volatile(
    5f80:	f04f 0320 	mov.w	r3, #32
    5f84:	f3ef 8011 	mrs	r0, BASEPRI
    5f88:	f383 8812 	msr	BASEPRI_MAX, r3
    5f8c:	f3bf 8f6f 	isb	sy
}
    5f90:	4770      	bx	lr

00005f92 <full_int_unlock>:
	__asm__ volatile(
    5f92:	f380 8811 	msr	BASEPRI, r0
    5f96:	f3bf 8f6f 	isb	sy
}
    5f9a:	4770      	bx	lr

00005f9c <set_absolute_alarm>:
{
    5f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f9e:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    5fa0:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    5fa4:	f7fc fca8 	bl	28f8 <get_comparator>
    5fa8:	4607      	mov	r7, r0
    5faa:	e019      	b.n	5fe0 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    5fac:	2013      	movs	r0, #19
    5fae:	f000 fac2 	bl	6536 <z_impl_k_busy_wait>
}
    5fb2:	e022      	b.n	5ffa <set_absolute_alarm+0x5e>
		event_clear(chan);
    5fb4:	4630      	mov	r0, r6
    5fb6:	f7ff ffd4 	bl	5f62 <event_clear>
		event_enable(chan);
    5fba:	4630      	mov	r0, r6
    5fbc:	f7fc fca4 	bl	2908 <event_enable>
		set_comparator(chan, cc_val);
    5fc0:	4629      	mov	r1, r5
    5fc2:	4630      	mov	r0, r6
    5fc4:	f7fc fc8e 	bl	28e4 <set_comparator>
		now2 = counter();
    5fc8:	f7fc fcb2 	bl	2930 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    5fcc:	4284      	cmp	r4, r0
    5fce:	d01e      	beq.n	600e <set_absolute_alarm+0x72>
    5fd0:	1c81      	adds	r1, r0, #2
    5fd2:	4628      	mov	r0, r5
    5fd4:	f7ff ffc1 	bl	5f5a <counter_sub>
	} while ((now2 != now) &&
    5fd8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5fdc:	d917      	bls.n	600e <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    5fde:	462f      	mov	r7, r5
		now = counter();
    5fe0:	f7fc fca6 	bl	2930 <counter>
    5fe4:	4604      	mov	r4, r0
		set_comparator(chan, now);
    5fe6:	4601      	mov	r1, r0
    5fe8:	4630      	mov	r0, r6
    5fea:	f7fc fc7b 	bl	28e4 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    5fee:	4621      	mov	r1, r4
    5ff0:	4638      	mov	r0, r7
    5ff2:	f7ff ffb2 	bl	5f5a <counter_sub>
    5ff6:	2801      	cmp	r0, #1
    5ff8:	d0d8      	beq.n	5fac <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5ffa:	1ca7      	adds	r7, r4, #2
    5ffc:	4639      	mov	r1, r7
    5ffe:	4628      	mov	r0, r5
    6000:	f7ff ffab 	bl	5f5a <counter_sub>
    6004:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6008:	d9d4      	bls.n	5fb4 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    600a:	463d      	mov	r5, r7
    600c:	e7d2      	b.n	5fb4 <set_absolute_alarm+0x18>
}
    600e:	4628      	mov	r0, r5
    6010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006012 <compare_set>:
{
    6012:	b5f0      	push	{r4, r5, r6, r7, lr}
    6014:	b083      	sub	sp, #12
    6016:	4604      	mov	r4, r0
    6018:	4617      	mov	r7, r2
    601a:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    601c:	f7fc fc8e 	bl	293c <compare_int_lock>
    6020:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    6022:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6024:	9301      	str	r3, [sp, #4]
    6026:	9b08      	ldr	r3, [sp, #32]
    6028:	9300      	str	r3, [sp, #0]
    602a:	463a      	mov	r2, r7
    602c:	462b      	mov	r3, r5
    602e:	4620      	mov	r0, r4
    6030:	f7fc fd62 	bl	2af8 <compare_set_nolocks>
    6034:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    6036:	4631      	mov	r1, r6
    6038:	4620      	mov	r0, r4
    603a:	f7fc fcd9 	bl	29f0 <compare_int_unlock>
}
    603e:	4628      	mov	r0, r5
    6040:	b003      	add	sp, #12
    6042:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006044 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    6044:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    6046:	2000      	movs	r0, #0
    6048:	f7fb fd22 	bl	1a90 <sys_arch_reboot>

0000604c <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    604c:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    604e:	f7fe ffa3 	bl	4f98 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    6052:	bd08      	pop	{r3, pc}

00006054 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    6054:	b510      	push	{r4, lr}
    6056:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6058:	f7fb f9aa 	bl	13b0 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    605c:	f7fb fa7a 	bl	1554 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    6060:	4620      	mov	r0, r4
    6062:	f7ff fff3 	bl	604c <hw_cc3xx_init_internal>
	return res;
}
    6066:	bd10      	pop	{r4, pc}

00006068 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    6068:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    606a:	4780      	blx	r0
}
    606c:	bd08      	pop	{r3, pc}

0000606e <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    606e:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    6070:	f000 fa61 	bl	6536 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    6074:	bd08      	pop	{r3, pc}

00006076 <nrfx_clock_enable>:
{
    6076:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6078:	2005      	movs	r0, #5
    607a:	f7fb faad 	bl	15d8 <arch_irq_is_enabled>
    607e:	b138      	cbz	r0, 6090 <nrfx_clock_enable+0x1a>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    6080:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6084:	2201      	movs	r2, #1
    6086:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    608a:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    608e:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6090:	2005      	movs	r0, #5
    6092:	f7fb fa91 	bl	15b8 <arch_irq_enable>
    6096:	e7f3      	b.n	6080 <nrfx_clock_enable+0xa>

00006098 <pin_is_task_output>:
{
    6098:	b510      	push	{r4, lr}
    609a:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    609c:	f7fd f998 	bl	33d0 <pin_is_output>
    60a0:	b128      	cbz	r0, 60ae <pin_is_task_output+0x16>
    60a2:	4620      	mov	r0, r4
    60a4:	f7fd f97e 	bl	33a4 <pin_in_use_by_te>
    60a8:	b118      	cbz	r0, 60b2 <pin_is_task_output+0x1a>
    60aa:	2001      	movs	r0, #1
    60ac:	e000      	b.n	60b0 <pin_is_task_output+0x18>
    60ae:	2000      	movs	r0, #0
}
    60b0:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    60b2:	2000      	movs	r0, #0
    60b4:	e7fc      	b.n	60b0 <pin_is_task_output+0x18>

000060b6 <pin_is_input>:
{
    60b6:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    60b8:	f7fd f98a 	bl	33d0 <pin_is_output>
    60bc:	f080 0001 	eor.w	r0, r0, #1
}
    60c0:	b2c0      	uxtb	r0, r0
    60c2:	bd08      	pop	{r3, pc}

000060c4 <gpiote_polarity_to_trigger>:
}
    60c4:	4770      	bx	lr

000060c6 <gpiote_trigger_to_polarity>:
}
    60c6:	4770      	bx	lr

000060c8 <is_level>:
}
    60c8:	2803      	cmp	r0, #3
    60ca:	bf94      	ite	ls
    60cc:	2000      	movls	r0, #0
    60ce:	2001      	movhi	r0, #1
    60d0:	4770      	bx	lr

000060d2 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    60d2:	b148      	cbz	r0, 60e8 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    60d4:	68c3      	ldr	r3, [r0, #12]
    60d6:	8818      	ldrh	r0, [r3, #0]
    60d8:	f3c0 0008 	ubfx	r0, r0, #0, #9
    60dc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    60e0:	bf14      	ite	ne
    60e2:	2000      	movne	r0, #0
    60e4:	2001      	moveq	r0, #1
    60e6:	4770      	bx	lr
		return false;
    60e8:	2000      	movs	r0, #0
}
    60ea:	4770      	bx	lr

000060ec <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    60ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60ee:	4605      	mov	r5, r0
    60f0:	460e      	mov	r6, r1
	__asm__ volatile(
    60f2:	f04f 0320 	mov.w	r3, #32
    60f6:	f3ef 8711 	mrs	r7, BASEPRI
    60fa:	f383 8812 	msr	BASEPRI_MAX, r3
    60fe:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    6102:	f7fe fd7f 	bl	4c04 <z_impl_z_current_get>
    6106:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    6108:	4631      	mov	r1, r6
    610a:	4628      	mov	r0, r5
    610c:	f7ff ff9a 	bl	6044 <k_sys_fatal_error_handler>
	__asm__ volatile(
    6110:	f387 8811 	msr	BASEPRI, r7
    6114:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    6118:	4620      	mov	r0, r4
    611a:	f7fb fd05 	bl	1b28 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    611e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006120 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6120:	68c2      	ldr	r2, [r0, #12]
    6122:	6903      	ldr	r3, [r0, #16]
    6124:	431a      	orrs	r2, r3
    6126:	f012 0203 	ands.w	r2, r2, #3
    612a:	d10d      	bne.n	6148 <create_free_list+0x28>
	slab->free_list = NULL;
    612c:	2100      	movs	r1, #0
    612e:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    6130:	e005      	b.n	613e <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    6132:	6941      	ldr	r1, [r0, #20]
    6134:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    6136:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    6138:	68c1      	ldr	r1, [r0, #12]
    613a:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    613c:	3201      	adds	r2, #1
    613e:	6881      	ldr	r1, [r0, #8]
    6140:	4291      	cmp	r1, r2
    6142:	d8f6      	bhi.n	6132 <create_free_list+0x12>
	return 0;
    6144:	2000      	movs	r0, #0
    6146:	4770      	bx	lr
		return -EINVAL;
    6148:	f06f 0015 	mvn.w	r0, #21
}
    614c:	4770      	bx	lr

0000614e <k_mem_slab_init>:
{
    614e:	b510      	push	{r4, lr}
    6150:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    6152:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    6154:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    6156:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    6158:	2300      	movs	r3, #0
    615a:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    615c:	f7ff ffe0 	bl	6120 <create_free_list>
	if (rc < 0) {
    6160:	2800      	cmp	r0, #0
    6162:	db01      	blt.n	6168 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    6164:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    6166:	6064      	str	r4, [r4, #4]
}
    6168:	bd10      	pop	{r4, pc}

0000616a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    616a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    616c:	4604      	mov	r4, r0
    616e:	460d      	mov	r5, r1
	__asm__ volatile(
    6170:	f04f 0320 	mov.w	r3, #32
    6174:	f3ef 8611 	mrs	r6, BASEPRI
    6178:	f383 8812 	msr	BASEPRI_MAX, r3
    617c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    6180:	6943      	ldr	r3, [r0, #20]
    6182:	b163      	cbz	r3, 619e <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    6184:	682b      	ldr	r3, [r5, #0]
    6186:	6962      	ldr	r2, [r4, #20]
    6188:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    618a:	682b      	ldr	r3, [r5, #0]
    618c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    618e:	69a3      	ldr	r3, [r4, #24]
    6190:	3b01      	subs	r3, #1
    6192:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    6194:	f386 8811 	msr	BASEPRI, r6
    6198:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    619c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    619e:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    61a2:	f000 f91f 	bl	63e4 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    61a6:	2800      	cmp	r0, #0
    61a8:	d0ec      	beq.n	6184 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    61aa:	682a      	ldr	r2, [r5, #0]
    61ac:	2100      	movs	r1, #0
    61ae:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    61b2:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    61b4:	f000 f87b 	bl	62ae <z_ready_thread>
			z_reschedule(&slab->lock, key);
    61b8:	4631      	mov	r1, r6
    61ba:	4638      	mov	r0, r7
    61bc:	f7fe f9c8 	bl	4550 <z_reschedule>
			return;
    61c0:	e7ec      	b.n	619c <k_mem_slab_free+0x32>

000061c2 <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    61c2:	3207      	adds	r2, #7
    61c4:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    61c8:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    61cc:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    61d0:	2300      	movs	r3, #0
    61d2:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
    61d6:	1888      	adds	r0, r1, r2
    61d8:	4770      	bx	lr

000061da <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    61da:	f3ef 8005 	mrs	r0, IPSR
}
    61de:	3800      	subs	r0, #0
    61e0:	bf18      	it	ne
    61e2:	2001      	movne	r0, #1
    61e4:	4770      	bx	lr

000061e6 <z_impl_k_thread_start>:
{
    61e6:	b508      	push	{r3, lr}
	z_sched_start(thread);
    61e8:	f7fe fadc 	bl	47a4 <z_sched_start>
}
    61ec:	bd08      	pop	{r3, pc}

000061ee <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    61ee:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    61f0:	2400      	movs	r4, #0
    61f2:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    61f4:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    61f6:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    61f8:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    61fa:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    61fc:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    61fe:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    6200:	bc10      	pop	{r4}
    6202:	4770      	bx	lr

00006204 <z_pm_save_idle_exit>:
{
    6204:	b508      	push	{r3, lr}
	pm_system_resume();
    6206:	f7fa ffc1 	bl	118c <pm_system_resume>
	sys_clock_idle_exit();
    620a:	f7ff fea5 	bl	5f58 <sys_clock_idle_exit>
}
    620e:	bd08      	pop	{r3, pc}

00006210 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    6210:	4288      	cmp	r0, r1
    6212:	da00      	bge.n	6216 <new_prio_for_inheritance+0x6>
    6214:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    6216:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    621a:	db01      	blt.n	6220 <new_prio_for_inheritance+0x10>
    621c:	4608      	mov	r0, r1
    621e:	4770      	bx	lr
    6220:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    6224:	4770      	bx	lr

00006226 <adjust_owner_prio>:
{
    6226:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    6228:	6880      	ldr	r0, [r0, #8]
    622a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    622e:	428b      	cmp	r3, r1
    6230:	d101      	bne.n	6236 <adjust_owner_prio+0x10>
	return false;
    6232:	2000      	movs	r0, #0
}
    6234:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    6236:	f7fe fb03 	bl	4840 <z_set_prio>
    623a:	e7fb      	b.n	6234 <adjust_owner_prio+0xe>

0000623c <z_impl_k_mutex_init>:
{
    623c:	4603      	mov	r3, r0
	mutex->owner = NULL;
    623e:	2000      	movs	r0, #0
    6240:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    6242:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    6244:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    6246:	605b      	str	r3, [r3, #4]
}
    6248:	4770      	bx	lr

0000624a <thread_active_elsewhere>:
}
    624a:	2000      	movs	r0, #0
    624c:	4770      	bx	lr

0000624e <pended_on_thread>:
}
    624e:	6880      	ldr	r0, [r0, #8]
    6250:	4770      	bx	lr

00006252 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    6252:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    6256:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    625a:	4283      	cmp	r3, r0
    625c:	d001      	beq.n	6262 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    625e:	1ac0      	subs	r0, r0, r3
    6260:	4770      	bx	lr
	return 0;
    6262:	2000      	movs	r0, #0
}
    6264:	4770      	bx	lr

00006266 <z_reschedule_irqlock>:
{
    6266:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6268:	4603      	mov	r3, r0
    626a:	b920      	cbnz	r0, 6276 <z_reschedule_irqlock+0x10>
    626c:	f3ef 8205 	mrs	r2, IPSR
    6270:	b942      	cbnz	r2, 6284 <z_reschedule_irqlock+0x1e>
    6272:	2201      	movs	r2, #1
    6274:	e000      	b.n	6278 <z_reschedule_irqlock+0x12>
    6276:	2200      	movs	r2, #0
	if (resched(key)) {
    6278:	b932      	cbnz	r2, 6288 <z_reschedule_irqlock+0x22>
    627a:	f383 8811 	msr	BASEPRI, r3
    627e:	f3bf 8f6f 	isb	sy
}
    6282:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6284:	2200      	movs	r2, #0
    6286:	e7f7      	b.n	6278 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    6288:	4618      	mov	r0, r3
    628a:	f7fb f9e9 	bl	1660 <arch_swap>
	return ret;
    628e:	e7f8      	b.n	6282 <z_reschedule_irqlock+0x1c>

00006290 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    6290:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    6292:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    6294:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6296:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6298:	2300      	movs	r3, #0
    629a:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    629c:	604b      	str	r3, [r1, #4]
}
    629e:	4770      	bx	lr

000062a0 <z_priq_dumb_best>:
{
    62a0:	4603      	mov	r3, r0
	return list->head == list;
    62a2:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    62a4:	4283      	cmp	r3, r0
    62a6:	d000      	beq.n	62aa <z_priq_dumb_best+0xa>
}
    62a8:	4770      	bx	lr
	struct k_thread *thread = NULL;
    62aa:	2000      	movs	r0, #0
	return thread;
    62ac:	e7fc      	b.n	62a8 <z_priq_dumb_best+0x8>

000062ae <z_ready_thread>:
{
    62ae:	b538      	push	{r3, r4, r5, lr}
    62b0:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    62b2:	2300      	movs	r3, #0
	__asm__ volatile(
    62b4:	f04f 0220 	mov.w	r2, #32
    62b8:	f3ef 8511 	mrs	r5, BASEPRI
    62bc:	f382 8812 	msr	BASEPRI_MAX, r2
    62c0:	f3bf 8f6f 	isb	sy
    62c4:	e007      	b.n	62d6 <z_ready_thread+0x28>
			ready_thread(thread);
    62c6:	4620      	mov	r0, r4
    62c8:	f7fe fa2c 	bl	4724 <ready_thread>
	__asm__ volatile(
    62cc:	f385 8811 	msr	BASEPRI, r5
    62d0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    62d4:	2301      	movs	r3, #1
    62d6:	b92b      	cbnz	r3, 62e4 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    62d8:	4620      	mov	r0, r4
    62da:	f7ff ffb6 	bl	624a <thread_active_elsewhere>
    62de:	2800      	cmp	r0, #0
    62e0:	d1f4      	bne.n	62cc <z_ready_thread+0x1e>
    62e2:	e7f0      	b.n	62c6 <z_ready_thread+0x18>
}
    62e4:	bd38      	pop	{r3, r4, r5, pc}

000062e6 <z_thread_timeout>:
{
    62e6:	b570      	push	{r4, r5, r6, lr}
    62e8:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    62ea:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    62ee:	2300      	movs	r3, #0
	__asm__ volatile(
    62f0:	f04f 0220 	mov.w	r2, #32
    62f4:	f3ef 8611 	mrs	r6, BASEPRI
    62f8:	f382 8812 	msr	BASEPRI_MAX, r2
    62fc:	f3bf 8f6f 	isb	sy
    6300:	e019      	b.n	6336 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6302:	4628      	mov	r0, r5
    6304:	f7ff ffa3 	bl	624e <pended_on_thread>
    6308:	4629      	mov	r1, r5
    630a:	f7ff ffc1 	bl	6290 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    630e:	7b6b      	ldrb	r3, [r5, #13]
    6310:	f023 0302 	bic.w	r3, r3, #2
    6314:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    6316:	2300      	movs	r3, #0
    6318:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    631a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    631e:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    6322:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    6326:	4628      	mov	r0, r5
    6328:	f7fe f9fc 	bl	4724 <ready_thread>
	__asm__ volatile(
    632c:	f386 8811 	msr	BASEPRI, r6
    6330:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6334:	2301      	movs	r3, #1
    6336:	b94b      	cbnz	r3, 634c <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    6338:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    633c:	f013 0f28 	tst.w	r3, #40	; 0x28
    6340:	d1f4      	bne.n	632c <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
    6342:	f854 3c10 	ldr.w	r3, [r4, #-16]
    6346:	2b00      	cmp	r3, #0
    6348:	d1db      	bne.n	6302 <z_thread_timeout+0x1c>
    634a:	e7e6      	b.n	631a <z_thread_timeout+0x34>
}
    634c:	bd70      	pop	{r4, r5, r6, pc}

0000634e <add_to_waitq_locked>:
{
    634e:	b570      	push	{r4, r5, r6, lr}
    6350:	4605      	mov	r5, r0
    6352:	460e      	mov	r6, r1
	unready_thread(thread);
    6354:	f7fe fa44 	bl	47e0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6358:	7b6b      	ldrb	r3, [r5, #13]
    635a:	f043 0302 	orr.w	r3, r3, #2
    635e:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    6360:	b1b6      	cbz	r6, 6390 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    6362:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    6364:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6366:	42a6      	cmp	r6, r4
    6368:	d019      	beq.n	639e <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    636a:	b164      	cbz	r4, 6386 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    636c:	4621      	mov	r1, r4
    636e:	4628      	mov	r0, r5
    6370:	f7ff ff6f 	bl	6252 <z_sched_prio_cmp>
    6374:	2800      	cmp	r0, #0
    6376:	dc0c      	bgt.n	6392 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6378:	b12c      	cbz	r4, 6386 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    637a:	6873      	ldr	r3, [r6, #4]
    637c:	429c      	cmp	r4, r3
    637e:	d002      	beq.n	6386 <add_to_waitq_locked+0x38>
    6380:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6382:	2c00      	cmp	r4, #0
    6384:	d1f1      	bne.n	636a <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    6386:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    6388:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    638a:	606b      	str	r3, [r5, #4]
	tail->next = node;
    638c:	601d      	str	r5, [r3, #0]
	list->tail = node;
    638e:	6075      	str	r5, [r6, #4]
}
    6390:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    6392:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    6394:	606b      	str	r3, [r5, #4]
	node->next = successor;
    6396:	602c      	str	r4, [r5, #0]
	prev->next = node;
    6398:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    639a:	6065      	str	r5, [r4, #4]
}
    639c:	e7f8      	b.n	6390 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    639e:	2400      	movs	r4, #0
    63a0:	e7e3      	b.n	636a <add_to_waitq_locked+0x1c>

000063a2 <pend>:
{
    63a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    63a6:	4605      	mov	r5, r0
    63a8:	460f      	mov	r7, r1
    63aa:	4691      	mov	r9, r2
    63ac:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    63ae:	2400      	movs	r4, #0
	__asm__ volatile(
    63b0:	f04f 0320 	mov.w	r3, #32
    63b4:	f3ef 8611 	mrs	r6, BASEPRI
    63b8:	f383 8812 	msr	BASEPRI_MAX, r3
    63bc:	f3bf 8f6f 	isb	sy
    63c0:	b94c      	cbnz	r4, 63d6 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
    63c2:	4639      	mov	r1, r7
    63c4:	4628      	mov	r0, r5
    63c6:	f7ff ffc2 	bl	634e <add_to_waitq_locked>
	__asm__ volatile(
    63ca:	f386 8811 	msr	BASEPRI, r6
    63ce:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    63d2:	2401      	movs	r4, #1
    63d4:	e7f4      	b.n	63c0 <pend+0x1e>
	add_thread_timeout(thread, timeout);
    63d6:	464a      	mov	r2, r9
    63d8:	4643      	mov	r3, r8
    63da:	4628      	mov	r0, r5
    63dc:	f7fe f856 	bl	448c <add_thread_timeout>
}
    63e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000063e4 <z_unpend_first_thread>:
{
    63e4:	b570      	push	{r4, r5, r6, lr}
    63e6:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    63e8:	2300      	movs	r3, #0
	__asm__ volatile(
    63ea:	f04f 0220 	mov.w	r2, #32
    63ee:	f3ef 8511 	mrs	r5, BASEPRI
    63f2:	f382 8812 	msr	BASEPRI_MAX, r2
    63f6:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    63fa:	461c      	mov	r4, r3
    63fc:	e013      	b.n	6426 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    63fe:	f7ff ff26 	bl	624e <pended_on_thread>
    6402:	4621      	mov	r1, r4
    6404:	f7ff ff44 	bl	6290 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6408:	7b63      	ldrb	r3, [r4, #13]
    640a:	f023 0302 	bic.w	r3, r3, #2
    640e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    6410:	2300      	movs	r3, #0
    6412:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    6414:	f104 0018 	add.w	r0, r4, #24
    6418:	f000 f82a 	bl	6470 <z_abort_timeout>
	__asm__ volatile(
    641c:	f385 8811 	msr	BASEPRI, r5
    6420:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6424:	2301      	movs	r3, #1
    6426:	b933      	cbnz	r3, 6436 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    6428:	4630      	mov	r0, r6
    642a:	f7ff ff39 	bl	62a0 <z_priq_dumb_best>
		if (thread != NULL) {
    642e:	4604      	mov	r4, r0
    6430:	2800      	cmp	r0, #0
    6432:	d1e4      	bne.n	63fe <z_unpend_first_thread+0x1a>
    6434:	e7f2      	b.n	641c <z_unpend_first_thread+0x38>
}
    6436:	4620      	mov	r0, r4
    6438:	bd70      	pop	{r4, r5, r6, pc}

0000643a <init_ready_q>:
	sys_dlist_init(&rq->runq);
    643a:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    643c:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    643e:	6083      	str	r3, [r0, #8]
}
    6440:	4770      	bx	lr

00006442 <remove_timeout>:
{
    6442:	b538      	push	{r3, r4, r5, lr}
    6444:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    6446:	f7fe fc2f 	bl	4ca8 <next>
    644a:	b148      	cbz	r0, 6460 <remove_timeout+0x1e>
    644c:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    644e:	6920      	ldr	r0, [r4, #16]
    6450:	6965      	ldr	r5, [r4, #20]
    6452:	6913      	ldr	r3, [r2, #16]
    6454:	6951      	ldr	r1, [r2, #20]
    6456:	181b      	adds	r3, r3, r0
    6458:	eb45 0101 	adc.w	r1, r5, r1
    645c:	6113      	str	r3, [r2, #16]
    645e:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    6460:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    6462:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    6464:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6466:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6468:	2300      	movs	r3, #0
    646a:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    646c:	6063      	str	r3, [r4, #4]
}
    646e:	bd38      	pop	{r3, r4, r5, pc}

00006470 <z_abort_timeout>:
{
    6470:	b570      	push	{r4, r5, r6, lr}
    6472:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    6474:	2300      	movs	r3, #0
	__asm__ volatile(
    6476:	f04f 0220 	mov.w	r2, #32
    647a:	f3ef 8611 	mrs	r6, BASEPRI
    647e:	f382 8812 	msr	BASEPRI_MAX, r2
    6482:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    6486:	f06f 0015 	mvn.w	r0, #21
    648a:	e008      	b.n	649e <z_abort_timeout+0x2e>
			remove_timeout(to);
    648c:	4620      	mov	r0, r4
    648e:	f7ff ffd8 	bl	6442 <remove_timeout>
			ret = 0;
    6492:	4628      	mov	r0, r5
	__asm__ volatile(
    6494:	f386 8811 	msr	BASEPRI, r6
    6498:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    649c:	2301      	movs	r3, #1
    649e:	461d      	mov	r5, r3
    64a0:	b91b      	cbnz	r3, 64aa <z_abort_timeout+0x3a>
	return node->next != NULL;
    64a2:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    64a4:	2b00      	cmp	r3, #0
    64a6:	d1f1      	bne.n	648c <z_abort_timeout+0x1c>
    64a8:	e7f4      	b.n	6494 <z_abort_timeout+0x24>
}
    64aa:	bd70      	pop	{r4, r5, r6, pc}

000064ac <z_get_next_timeout_expiry>:
{
    64ac:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    64ae:	2300      	movs	r3, #0
	__asm__ volatile(
    64b0:	f04f 0220 	mov.w	r2, #32
    64b4:	f3ef 8411 	mrs	r4, BASEPRI
    64b8:	f382 8812 	msr	BASEPRI_MAX, r2
    64bc:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    64c0:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
    64c4:	b93b      	cbnz	r3, 64d6 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
    64c6:	f7fe fc07 	bl	4cd8 <next_timeout>
	__asm__ volatile(
    64ca:	f384 8811 	msr	BASEPRI, r4
    64ce:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    64d2:	2301      	movs	r3, #1
    64d4:	e7f6      	b.n	64c4 <z_get_next_timeout_expiry+0x18>
}
    64d6:	bd10      	pop	{r4, pc}

000064d8 <z_set_timeout_expiry>:
{
    64d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64da:	4606      	mov	r6, r0
    64dc:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    64de:	2300      	movs	r3, #0
	__asm__ volatile(
    64e0:	f04f 0220 	mov.w	r2, #32
    64e4:	f3ef 8511 	mrs	r5, BASEPRI
    64e8:	f382 8812 	msr	BASEPRI_MAX, r2
    64ec:	f3bf 8f6f 	isb	sy
    64f0:	e00a      	b.n	6508 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    64f2:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    64f4:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    64f8:	2801      	cmp	r0, #1
    64fa:	dd00      	ble.n	64fe <z_set_timeout_expiry+0x26>
    64fc:	b97c      	cbnz	r4, 651e <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    64fe:	f385 8811 	msr	BASEPRI, r5
    6502:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    6506:	2301      	movs	r3, #1
    6508:	461c      	mov	r4, r3
    650a:	b97b      	cbnz	r3, 652c <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    650c:	f7fe fbe4 	bl	4cd8 <next_timeout>
			      || (ticks <= next_to);
    6510:	f1b0 3fff 	cmp.w	r0, #4294967295
    6514:	d0ed      	beq.n	64f2 <z_set_timeout_expiry+0x1a>
    6516:	42b0      	cmp	r0, r6
    6518:	dbec      	blt.n	64f4 <z_set_timeout_expiry+0x1c>
    651a:	2401      	movs	r4, #1
    651c:	e7ea      	b.n	64f4 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    651e:	4639      	mov	r1, r7
    6520:	42b0      	cmp	r0, r6
    6522:	bfa8      	it	ge
    6524:	4630      	movge	r0, r6
    6526:	f7fc fbdf 	bl	2ce8 <sys_clock_set_timeout>
    652a:	e7e8      	b.n	64fe <z_set_timeout_expiry+0x26>
}
    652c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000652e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    652e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    6530:	f7fe fd04 	bl	4f3c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    6534:	bd08      	pop	{r3, pc}

00006536 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    6536:	b900      	cbnz	r0, 653a <z_impl_k_busy_wait+0x4>
    6538:	4770      	bx	lr
{
    653a:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    653c:	f7fa fdfa 	bl	1134 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    6540:	bd08      	pop	{r3, pc}

00006542 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6542:	4770      	bx	lr

00006544 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    6544:	f7fc bca8 	b.w	2e98 <SystemInit>
