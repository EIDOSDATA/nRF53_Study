
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200028e0 	.word	0x200028e0
}
   4:	00002c8d 	.word	0x00002c8d
   8:	0000a9b5 	.word	0x0000a9b5
   c:	00002c45 	.word	0x00002c45
  10:	00002c45 	.word	0x00002c45
  14:	00002c45 	.word	0x00002c45
  18:	00002c45 	.word	0x00002c45
  1c:	00002c45 	.word	0x00002c45
	...
  2c:	00002951 	.word	0x00002951
  30:	00002c45 	.word	0x00002c45
  34:	00000000 	.word	0x00000000
  38:	000028f5 	.word	0x000028f5
  3c:	00002c45 	.word	0x00002c45

00000040 <_irq_vector_table>:
  40:	000029dd 000029dd 000029dd 000029dd     .)...)...)...)..
  50:	000029dd 000029dd 000029dd 000029dd     .)...)...)...)..
  60:	000029dd 000029dd 000029dd 000029dd     .)...)...)...)..
  70:	000029dd 000029dd 000029dd 000029dd     .)...)...)...)..
  80:	000029dd 000029dd 000029dd 000029dd     .)...)...)...)..
  90:	000029dd 000029dd 000029dd 000029dd     .)...)...)...)..
  a0:	000029dd 000029dd 000029dd 000029dd     .)...)...)...)..
  b0:	000029dd 000029dd 000029dd 000029dd     .)...)...)...)..
  c0:	000029dd 000029dd 000029dd 000029dd     .)...)...)...)..
  d0:	000029dd 000029dd 000029dd 000029dd     .)...)...)...)..
  e0:	000029dd 000029dd 000029dd 000029dd     .)...)...)...)..
  f0:	000029dd 000029dd 000029dd 000029dd     .)...)...)...)..
 100:	000029dd 000029dd 000029dd 000029dd     .)...)...)...)..
 110:	000029dd 000029dd 000029dd 000029dd     .)...)...)...)..
 120:	000029dd 000029dd 000029dd 000029dd     .)...)...)...)..
 130:	000029dd 000029dd 000029dd 000029dd     .)...)...)...)..
 140:	000029dd 000029dd 000029dd 000029dd     .)...)...)...)..
 150:	000029dd                                .)..

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
     164:	f04f 30ff 	movne.w	r0, #4294967295
     168:	f000 b970 	b.w	44c <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f806 	bl	184 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__udivmoddi4>:
     184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     188:	9e08      	ldr	r6, [sp, #32]
     18a:	460d      	mov	r5, r1
     18c:	4604      	mov	r4, r0
     18e:	468a      	mov	sl, r1
     190:	2b00      	cmp	r3, #0
     192:	d17f      	bne.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     194:	428a      	cmp	r2, r1
     196:	4617      	mov	r7, r2
     198:	d941      	bls.n	21e <__data_size+0x5>
     19a:	fab2 f282 	clz	r2, r2
     19e:	b14a      	cbz	r2, 1b4 <__udivmoddi4+0x30>
     1a0:	f1c2 0120 	rsb	r1, r2, #32
     1a4:	fa05 f302 	lsl.w	r3, r5, r2
     1a8:	4097      	lsls	r7, r2
     1aa:	4094      	lsls	r4, r2
     1ac:	fa20 f101 	lsr.w	r1, r0, r1
     1b0:	ea41 0a03 	orr.w	sl, r1, r3
     1b4:	ea4f 4817 	mov.w	r8, r7, lsr #16
     1b8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     1bc:	fa1f f987 	uxth.w	r9, r7
     1c0:	fbba fef8 	udiv	lr, sl, r8
     1c4:	fb08 a31e 	mls	r3, r8, lr, sl
     1c8:	fb0e f109 	mul.w	r1, lr, r9
     1cc:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     1d0:	4299      	cmp	r1, r3
     1d2:	d906      	bls.n	1e2 <CONFIG_SRAM_SIZE+0x22>
     1d4:	18fb      	adds	r3, r7, r3
     1d6:	d202      	bcs.n	1de <CONFIG_SRAM_SIZE+0x1e>
     1d8:	4299      	cmp	r1, r3
     1da:	f200 8124 	bhi.w	426 <CONFIG_FLASH_SIZE+0x26>
     1de:	f10e 3eff 	add.w	lr, lr, #4294967295
     1e2:	1a59      	subs	r1, r3, r1
     1e4:	b2a3      	uxth	r3, r4
     1e6:	fbb1 f0f8 	udiv	r0, r1, r8
     1ea:	fb08 1110 	mls	r1, r8, r0, r1
     1ee:	fb00 f909 	mul.w	r9, r0, r9
     1f2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1f6:	45a1      	cmp	r9, r4
     1f8:	d905      	bls.n	206 <CONFIG_SRAM_SIZE+0x46>
     1fa:	193c      	adds	r4, r7, r4
     1fc:	d202      	bcs.n	204 <CONFIG_SRAM_SIZE+0x44>
     1fe:	45a1      	cmp	r9, r4
     200:	f200 810e 	bhi.w	420 <CONFIG_FLASH_SIZE+0x20>
     204:	3801      	subs	r0, #1
     206:	eba4 0409 	sub.w	r4, r4, r9
     20a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     20e:	2100      	movs	r1, #0
     210:	b11e      	cbz	r6, 21a <__data_size+0x1>
     212:	40d4      	lsrs	r4, r2
     214:	2300      	movs	r3, #0
     216:	e9c6 4300 	strd	r4, r3, [r6]
     21a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     21e:	b902      	cbnz	r2, 222 <__data_size+0x9>
     220:	deff      	udf	#255	; 0xff
     222:	fab2 f282 	clz	r2, r2
     226:	2a00      	cmp	r2, #0
     228:	d14f      	bne.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     22a:	1bcb      	subs	r3, r1, r7
     22c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     230:	fa1f f887 	uxth.w	r8, r7
     234:	2101      	movs	r1, #1
     236:	0c25      	lsrs	r5, r4, #16
     238:	fbb3 fcfe 	udiv	ip, r3, lr
     23c:	fb0e 301c 	mls	r0, lr, ip, r3
     240:	462b      	mov	r3, r5
     242:	fb08 f90c 	mul.w	r9, r8, ip
     246:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     24a:	45a9      	cmp	r9, r5
     24c:	d90a      	bls.n	264 <__data_size+0x4b>
     24e:	197d      	adds	r5, r7, r5
     250:	bf2c      	ite	cs
     252:	2301      	movcs	r3, #1
     254:	2300      	movcc	r3, #0
     256:	45a9      	cmp	r9, r5
     258:	d902      	bls.n	260 <__data_size+0x47>
     25a:	2b00      	cmp	r3, #0
     25c:	f000 80d9 	beq.w	412 <CONFIG_FLASH_SIZE+0x12>
     260:	f10c 3cff 	add.w	ip, ip, #4294967295
     264:	eba5 0509 	sub.w	r5, r5, r9
     268:	b2a3      	uxth	r3, r4
     26a:	fbb5 f0fe 	udiv	r0, r5, lr
     26e:	fb0e 5510 	mls	r5, lr, r0, r5
     272:	fb08 f800 	mul.w	r8, r8, r0
     276:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     27a:	45a0      	cmp	r8, r4
     27c:	d905      	bls.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     27e:	193c      	adds	r4, r7, r4
     280:	d202      	bcs.n	288 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8>
     282:	45a0      	cmp	r8, r4
     284:	f200 80c9 	bhi.w	41a <CONFIG_FLASH_SIZE+0x1a>
     288:	3801      	subs	r0, #1
     28a:	eba4 0408 	sub.w	r4, r4, r8
     28e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     292:	e7bd      	b.n	210 <CONFIG_SRAM_SIZE+0x50>
     294:	428b      	cmp	r3, r1
     296:	d908      	bls.n	2aa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x2a>
     298:	2e00      	cmp	r6, #0
     29a:	f000 80b1 	beq.w	400 <CONFIG_FLASH_SIZE>
     29e:	2100      	movs	r1, #0
     2a0:	e9c6 0500 	strd	r0, r5, [r6]
     2a4:	4608      	mov	r0, r1
     2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2aa:	fab3 f183 	clz	r1, r3
     2ae:	2900      	cmp	r1, #0
     2b0:	d146      	bne.n	340 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc0>
     2b2:	42ab      	cmp	r3, r5
     2b4:	f0c0 80a7 	bcc.w	406 <CONFIG_FLASH_SIZE+0x6>
     2b8:	4282      	cmp	r2, r0
     2ba:	f240 80a4 	bls.w	406 <CONFIG_FLASH_SIZE+0x6>
     2be:	4608      	mov	r0, r1
     2c0:	2e00      	cmp	r6, #0
     2c2:	d0aa      	beq.n	21a <__data_size+0x1>
     2c4:	e9c6 4a00 	strd	r4, sl, [r6]
     2c8:	e7a7      	b.n	21a <__data_size+0x1>
     2ca:	f1c2 0020 	rsb	r0, r2, #32
     2ce:	4097      	lsls	r7, r2
     2d0:	fa01 f302 	lsl.w	r3, r1, r2
     2d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2d8:	40c1      	lsrs	r1, r0
     2da:	fa24 f500 	lsr.w	r5, r4, r0
     2de:	fa1f f887 	uxth.w	r8, r7
     2e2:	4094      	lsls	r4, r2
     2e4:	431d      	orrs	r5, r3
     2e6:	fbb1 f0fe 	udiv	r0, r1, lr
     2ea:	0c2b      	lsrs	r3, r5, #16
     2ec:	fb0e 1110 	mls	r1, lr, r0, r1
     2f0:	fb00 fc08 	mul.w	ip, r0, r8
     2f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f8:	459c      	cmp	ip, r3
     2fa:	d909      	bls.n	310 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x90>
     2fc:	18fb      	adds	r3, r7, r3
     2fe:	bf2c      	ite	cs
     300:	2101      	movcs	r1, #1
     302:	2100      	movcc	r1, #0
     304:	459c      	cmp	ip, r3
     306:	d902      	bls.n	30e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8e>
     308:	2900      	cmp	r1, #0
     30a:	f000 8095 	beq.w	438 <CONFIG_FLASH_SIZE+0x38>
     30e:	3801      	subs	r0, #1
     310:	eba3 030c 	sub.w	r3, r3, ip
     314:	b2ad      	uxth	r5, r5
     316:	fbb3 f1fe 	udiv	r1, r3, lr
     31a:	fb0e 3311 	mls	r3, lr, r1, r3
     31e:	fb01 fc08 	mul.w	ip, r1, r8
     322:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     326:	45ac      	cmp	ip, r5
     328:	d905      	bls.n	336 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb6>
     32a:	197d      	adds	r5, r7, r5
     32c:	d202      	bcs.n	334 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb4>
     32e:	45ac      	cmp	ip, r5
     330:	f200 8089 	bhi.w	446 <CONFIG_FLASH_SIZE+0x46>
     334:	3901      	subs	r1, #1
     336:	eba5 030c 	sub.w	r3, r5, ip
     33a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     33e:	e77a      	b.n	236 <__data_size+0x1d>
     340:	f1c1 0420 	rsb	r4, r1, #32
     344:	408b      	lsls	r3, r1
     346:	fa02 f701 	lsl.w	r7, r2, r1
     34a:	fa05 fc01 	lsl.w	ip, r5, r1
     34e:	40e2      	lsrs	r2, r4
     350:	fa20 f804 	lsr.w	r8, r0, r4
     354:	40e5      	lsrs	r5, r4
     356:	fa00 fe01 	lsl.w	lr, r0, r1
     35a:	4313      	orrs	r3, r2
     35c:	ea48 020c 	orr.w	r2, r8, ip
     360:	ea4f 4813 	mov.w	r8, r3, lsr #16
     364:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     368:	fa1f f983 	uxth.w	r9, r3
     36c:	fbb5 faf8 	udiv	sl, r5, r8
     370:	fb08 551a 	mls	r5, r8, sl, r5
     374:	fb0a f009 	mul.w	r0, sl, r9
     378:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     37c:	4560      	cmp	r0, ip
     37e:	d90a      	bls.n	396 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x116>
     380:	eb13 0c0c 	adds.w	ip, r3, ip
     384:	bf2c      	ite	cs
     386:	2501      	movcs	r5, #1
     388:	2500      	movcc	r5, #0
     38a:	4560      	cmp	r0, ip
     38c:	d901      	bls.n	392 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x112>
     38e:	2d00      	cmp	r5, #0
     390:	d055      	beq.n	43e <CONFIG_FLASH_SIZE+0x3e>
     392:	f10a 3aff 	add.w	sl, sl, #4294967295
     396:	ebac 0c00 	sub.w	ip, ip, r0
     39a:	b292      	uxth	r2, r2
     39c:	fbbc f0f8 	udiv	r0, ip, r8
     3a0:	fb08 cc10 	mls	ip, r8, r0, ip
     3a4:	fb00 f909 	mul.w	r9, r0, r9
     3a8:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     3ac:	45e1      	cmp	r9, ip
     3ae:	d905      	bls.n	3bc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x13c>
     3b0:	eb13 0c0c 	adds.w	ip, r3, ip
     3b4:	d201      	bcs.n	3ba <CONFIG_PM_PARTITION_SIZE_PROVISION+0x13a>
     3b6:	45e1      	cmp	r9, ip
     3b8:	d83b      	bhi.n	432 <CONFIG_FLASH_SIZE+0x32>
     3ba:	3801      	subs	r0, #1
     3bc:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     3c0:	ebac 0c09 	sub.w	ip, ip, r9
     3c4:	fba0 8907 	umull	r8, r9, r0, r7
     3c8:	45cc      	cmp	ip, r9
     3ca:	4645      	mov	r5, r8
     3cc:	464a      	mov	r2, r9
     3ce:	d302      	bcc.n	3d6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x156>
     3d0:	d106      	bne.n	3e0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x160>
     3d2:	45c6      	cmp	lr, r8
     3d4:	d204      	bcs.n	3e0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x160>
     3d6:	3801      	subs	r0, #1
     3d8:	ebb8 0507 	subs.w	r5, r8, r7
     3dc:	eb69 0203 	sbc.w	r2, r9, r3
     3e0:	b32e      	cbz	r6, 42e <CONFIG_FLASH_SIZE+0x2e>
     3e2:	ebbe 0305 	subs.w	r3, lr, r5
     3e6:	eb6c 0c02 	sbc.w	ip, ip, r2
     3ea:	fa23 f201 	lsr.w	r2, r3, r1
     3ee:	fa0c f404 	lsl.w	r4, ip, r4
     3f2:	fa2c f301 	lsr.w	r3, ip, r1
     3f6:	2100      	movs	r1, #0
     3f8:	4314      	orrs	r4, r2
     3fa:	e9c6 4300 	strd	r4, r3, [r6]
     3fe:	e70c      	b.n	21a <__data_size+0x1>
     400:	4631      	mov	r1, r6
     402:	4630      	mov	r0, r6
     404:	e709      	b.n	21a <__data_size+0x1>
     406:	1a84      	subs	r4, r0, r2
     408:	eb65 0303 	sbc.w	r3, r5, r3
     40c:	2001      	movs	r0, #1
     40e:	469a      	mov	sl, r3
     410:	e756      	b.n	2c0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x40>
     412:	f1ac 0c02 	sub.w	ip, ip, #2
     416:	443d      	add	r5, r7
     418:	e724      	b.n	264 <__data_size+0x4b>
     41a:	3802      	subs	r0, #2
     41c:	443c      	add	r4, r7
     41e:	e734      	b.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     420:	3802      	subs	r0, #2
     422:	443c      	add	r4, r7
     424:	e6ef      	b.n	206 <CONFIG_SRAM_SIZE+0x46>
     426:	f1ae 0e02 	sub.w	lr, lr, #2
     42a:	443b      	add	r3, r7
     42c:	e6d9      	b.n	1e2 <CONFIG_SRAM_SIZE+0x22>
     42e:	4631      	mov	r1, r6
     430:	e6f3      	b.n	21a <__data_size+0x1>
     432:	3802      	subs	r0, #2
     434:	449c      	add	ip, r3
     436:	e7c1      	b.n	3bc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x13c>
     438:	3802      	subs	r0, #2
     43a:	443b      	add	r3, r7
     43c:	e768      	b.n	310 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x90>
     43e:	f1aa 0a02 	sub.w	sl, sl, #2
     442:	449c      	add	ip, r3
     444:	e7a7      	b.n	396 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x116>
     446:	3902      	subs	r1, #2
     448:	443d      	add	r5, r7
     44a:	e774      	b.n	336 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb6>

0000044c <__aeabi_idiv0>:
     44c:	4770      	bx	lr
     44e:	bf00      	nop

00000450 <main>:

BUILD_ASSERT(DT_NODE_HAS_COMPAT(DT_CHOSEN(zephyr_console), zephyr_cdc_acm_uart),
	     "Console device is not ACM CDC UART device");

void main(void)
{
     450:	b500      	push	{lr}
     452:	b083      	sub	sp, #12
	const struct device *dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
	uint32_t dtr = 0;
     454:	2000      	movs	r0, #0
     456:	9001      	str	r0, [sp, #4]

	if (usb_enable(NULL)) {
     458:	f001 fa9e 	bl	1998 <usb_enable>
     45c:	b138      	cbz	r0, 46e <main+0x1e>

	while (1) {
		printk("Hello World! %s\n", CONFIG_ARCH);
		k_sleep(K_SECONDS(1));
	}
}
     45e:	b003      	add	sp, #12
     460:	f85d fb04 	ldr.w	pc, [sp], #4
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     464:	f640 40cd 	movw	r0, #3277	; 0xccd
     468:	2100      	movs	r1, #0
     46a:	f008 fcff 	bl	8e6c <z_impl_k_sleep>
	while (!dtr) {
     46e:	9b01      	ldr	r3, [sp, #4]
     470:	b94b      	cbnz	r3, 486 <main+0x36>

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
     472:	4b0a      	ldr	r3, [pc, #40]	; (49c <main+0x4c>)
     474:	689b      	ldr	r3, [r3, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
     476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     478:	2b00      	cmp	r3, #0
     47a:	d0f3      	beq.n	464 <main+0x14>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
     47c:	aa01      	add	r2, sp, #4
     47e:	2104      	movs	r1, #4
     480:	4806      	ldr	r0, [pc, #24]	; (49c <main+0x4c>)
     482:	4798      	blx	r3
     484:	e7ee      	b.n	464 <main+0x14>
		printk("Hello World! %s\n", CONFIG_ARCH);
     486:	4906      	ldr	r1, [pc, #24]	; (4a0 <main+0x50>)
     488:	4806      	ldr	r0, [pc, #24]	; (4a4 <main+0x54>)
     48a:	f009 f8f5 	bl	9678 <printk>
     48e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     492:	2100      	movs	r1, #0
     494:	f008 fcea 	bl	8e6c <z_impl_k_sleep>
	while (1) {
     498:	e7f5      	b.n	486 <main+0x36>
     49a:	bf00      	nop
     49c:	0000c154 	.word	0x0000c154
     4a0:	0000c428 	.word	0x0000c428
     4a4:	0000c42c 	.word	0x0000c42c

000004a8 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     4a8:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     4aa:	680b      	ldr	r3, [r1, #0]
     4ac:	3301      	adds	r3, #1
     4ae:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     4b0:	4b01      	ldr	r3, [pc, #4]	; (4b8 <char_out+0x10>)
     4b2:	681b      	ldr	r3, [r3, #0]
     4b4:	4798      	blx	r3
}
     4b6:	bd08      	pop	{r3, pc}
     4b8:	20000000 	.word	0x20000000

000004bc <__printk_hook_install>:
	_char_out = fn;
     4bc:	4b01      	ldr	r3, [pc, #4]	; (4c4 <__printk_hook_install+0x8>)
     4be:	6018      	str	r0, [r3, #0]
}
     4c0:	4770      	bx	lr
     4c2:	bf00      	nop
     4c4:	20000000 	.word	0x20000000

000004c8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     4c8:	b500      	push	{lr}
     4ca:	b083      	sub	sp, #12
     4cc:	4602      	mov	r2, r0
     4ce:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     4d0:	2100      	movs	r1, #0
     4d2:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     4d4:	a901      	add	r1, sp, #4
     4d6:	4803      	ldr	r0, [pc, #12]	; (4e4 <vprintk+0x1c>)
     4d8:	f000 f8c8 	bl	66c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     4dc:	b003      	add	sp, #12
     4de:	f85d fb04 	ldr.w	pc, [sp], #4
     4e2:	bf00      	nop
     4e4:	000004a9 	.word	0x000004a9

000004e8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     4e8:	b510      	push	{r4, lr}
     4ea:	b084      	sub	sp, #16
     4ec:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     4ee:	9001      	str	r0, [sp, #4]
     4f0:	9102      	str	r1, [sp, #8]
     4f2:	2100      	movs	r1, #0
     4f4:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
     4f6:	a901      	add	r1, sp, #4
     4f8:	4805      	ldr	r0, [pc, #20]	; (510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>)
     4fa:	f000 f8b7 	bl	66c <cbvprintf>

	if (ctx.count < ctx.max) {
     4fe:	9b03      	ldr	r3, [sp, #12]
     500:	9a02      	ldr	r2, [sp, #8]
     502:	4293      	cmp	r3, r2
     504:	da01      	bge.n	50a <vsnprintk+0x22>
		str[ctx.count] = '\0';
     506:	2200      	movs	r2, #0
     508:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
     50a:	9803      	ldr	r0, [sp, #12]
     50c:	b004      	add	sp, #16
     50e:	bd10      	pop	{r4, pc}
     510:	00009649 	.word	0x00009649

00000514 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     518:	b083      	sub	sp, #12
     51a:	4604      	mov	r4, r0
     51c:	4608      	mov	r0, r1
     51e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     520:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     522:	f013 0f08 	tst.w	r3, #8
     526:	d105      	bne.n	534 <process_event+0x20>
     528:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     52c:	2300      	movs	r3, #0
     52e:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     530:	9301      	str	r3, [sp, #4]
}
     532:	e069      	b.n	608 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
     534:	2901      	cmp	r1, #1
     536:	d009      	beq.n	54c <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     538:	f043 0320 	orr.w	r3, r3, #32
     53c:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     53e:	f385 8811 	msr	BASEPRI, r5
     542:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     546:	b003      	add	sp, #12
     548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     54c:	f043 0310 	orr.w	r3, r3, #16
     550:	8323      	strh	r3, [r4, #24]
     552:	e7f4      	b.n	53e <process_event+0x2a>
			evt = process_recheck(mgr);
     554:	4620      	mov	r0, r4
     556:	f009 f8d2 	bl	96fe <process_recheck>
     55a:	e057      	b.n	60c <process_event+0xf8>
			res = mgr->last_res;
     55c:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     560:	464a      	mov	r2, r9
     562:	4669      	mov	r1, sp
     564:	4620      	mov	r0, r4
     566:	f009 f8e3 	bl	9730 <process_complete>
		onoff_transition_fn transit = NULL;
     56a:	2700      	movs	r7, #0
     56c:	e05a      	b.n	624 <process_event+0x110>
			transit = mgr->transitions->start;
     56e:	6923      	ldr	r3, [r4, #16]
     570:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
     572:	2106      	movs	r1, #6
     574:	4620      	mov	r0, r4
     576:	f009 f89b 	bl	96b0 <set_state>
		res = 0;
     57a:	f04f 0900 	mov.w	r9, #0
     57e:	e051      	b.n	624 <process_event+0x110>
			transit = mgr->transitions->stop;
     580:	6923      	ldr	r3, [r4, #16]
     582:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     584:	2104      	movs	r1, #4
     586:	4620      	mov	r0, r4
     588:	f009 f892 	bl	96b0 <set_state>
		res = 0;
     58c:	f04f 0900 	mov.w	r9, #0
     590:	e048      	b.n	624 <process_event+0x110>
			transit = mgr->transitions->reset;
     592:	6923      	ldr	r3, [r4, #16]
     594:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     596:	2105      	movs	r1, #5
     598:	4620      	mov	r0, r4
     59a:	f009 f889 	bl	96b0 <set_state>
		res = 0;
     59e:	f04f 0900 	mov.w	r9, #0
     5a2:	e03f      	b.n	624 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
     5a4:	2200      	movs	r2, #0
     5a6:	e046      	b.n	636 <process_event+0x122>
     5a8:	2200      	movs	r2, #0
     5aa:	e044      	b.n	636 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     5ac:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     5b0:	8323      	strh	r3, [r4, #24]
     5b2:	f385 8811 	msr	BASEPRI, r5
     5b6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     5ba:	2900      	cmp	r1, #0
     5bc:	d144      	bne.n	648 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     5be:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     5c0:	b12b      	cbz	r3, 5ce <process_event+0xba>
				notify_all(mgr, &clients, state, res);
     5c2:	464b      	mov	r3, r9
     5c4:	4642      	mov	r2, r8
     5c6:	4669      	mov	r1, sp
     5c8:	4620      	mov	r0, r4
     5ca:	f009 f927 	bl	981c <notify_all>
			if (transit != NULL) {
     5ce:	b117      	cbz	r7, 5d6 <process_event+0xc2>
				transit(mgr, transition_complete);
     5d0:	4925      	ldr	r1, [pc, #148]	; (668 <process_event+0x154>)
     5d2:	4620      	mov	r0, r4
     5d4:	47b8      	blx	r7
	__asm__ volatile(
     5d6:	f04f 0320 	mov.w	r3, #32
     5da:	f3ef 8511 	mrs	r5, BASEPRI
     5de:	f383 8812 	msr	BASEPRI_MAX, r3
     5e2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     5e6:	8b23      	ldrh	r3, [r4, #24]
     5e8:	f023 0308 	bic.w	r3, r3, #8
     5ec:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     5ee:	8b23      	ldrh	r3, [r4, #24]
     5f0:	f013 0f10 	tst.w	r3, #16
     5f4:	d02e      	beq.n	654 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     5f6:	f023 0310 	bic.w	r3, r3, #16
     5fa:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     5fc:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     5fe:	8b26      	ldrh	r6, [r4, #24]
     600:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     604:	2800      	cmp	r0, #0
     606:	d09a      	beq.n	53e <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     608:	2802      	cmp	r0, #2
     60a:	d0a3      	beq.n	554 <process_event+0x40>
		if (evt == EVT_NOP) {
     60c:	2800      	cmp	r0, #0
     60e:	d096      	beq.n	53e <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     610:	2801      	cmp	r0, #1
     612:	d0a3      	beq.n	55c <process_event+0x48>
		} else if (evt == EVT_START) {
     614:	2803      	cmp	r0, #3
     616:	d0aa      	beq.n	56e <process_event+0x5a>
		} else if (evt == EVT_STOP) {
     618:	2804      	cmp	r0, #4
     61a:	d0b1      	beq.n	580 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
     61c:	2805      	cmp	r0, #5
     61e:	d0b8      	beq.n	592 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
     620:	2700      	movs	r7, #0
		res = 0;
     622:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     624:	8b23      	ldrh	r3, [r4, #24]
     626:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     62a:	45b0      	cmp	r8, r6
     62c:	d0ba      	beq.n	5a4 <process_event+0x90>
     62e:	68a2      	ldr	r2, [r4, #8]
     630:	2a00      	cmp	r2, #0
     632:	d0b9      	beq.n	5a8 <process_event+0x94>
     634:	2201      	movs	r2, #1
		if (do_monitors
     636:	4611      	mov	r1, r2
     638:	2a00      	cmp	r2, #0
     63a:	d1b7      	bne.n	5ac <process_event+0x98>
     63c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     63e:	2a00      	cmp	r2, #0
     640:	d1b4      	bne.n	5ac <process_event+0x98>
		    || (transit != NULL)) {
     642:	2f00      	cmp	r7, #0
     644:	d1b2      	bne.n	5ac <process_event+0x98>
     646:	e7d2      	b.n	5ee <process_event+0xda>
				notify_monitors(mgr, state, res);
     648:	464a      	mov	r2, r9
     64a:	4641      	mov	r1, r8
     64c:	4620      	mov	r0, r4
     64e:	f009 f837 	bl	96c0 <notify_monitors>
     652:	e7b4      	b.n	5be <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     654:	f013 0f20 	tst.w	r3, #32
     658:	d004      	beq.n	664 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     65a:	f023 0320 	bic.w	r3, r3, #32
     65e:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     660:	2002      	movs	r0, #2
     662:	e7cc      	b.n	5fe <process_event+0xea>
		evt = EVT_NOP;
     664:	2000      	movs	r0, #0
     666:	e7ca      	b.n	5fe <process_event+0xea>
     668:	0000984b 	.word	0x0000984b

0000066c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     670:	b093      	sub	sp, #76	; 0x4c
     672:	4606      	mov	r6, r0
     674:	460d      	mov	r5, r1
     676:	4692      	mov	sl, r2
     678:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     67a:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     67c:	f89a 0000 	ldrb.w	r0, [sl]
     680:	2800      	cmp	r0, #0
     682:	f000 84d6 	beq.w	1032 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x32>
		if (*fp != '%') {
     686:	2825      	cmp	r0, #37	; 0x25
     688:	d008      	beq.n	69c <cbvprintf+0x30>
			OUTC(*fp++);
     68a:	f10a 0a01 	add.w	sl, sl, #1
     68e:	4629      	mov	r1, r5
     690:	47b0      	blx	r6
     692:	2800      	cmp	r0, #0
     694:	f2c0 84ce 	blt.w	1034 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x34>
     698:	3401      	adds	r4, #1
			continue;
     69a:	e7ef      	b.n	67c <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     69c:	2300      	movs	r3, #0
     69e:	9306      	str	r3, [sp, #24]
     6a0:	9307      	str	r3, [sp, #28]
     6a2:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
     6a4:	9308      	str	r3, [sp, #32]
     6a6:	9309      	str	r3, [sp, #36]	; 0x24
     6a8:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
     6aa:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
     6ae:	f89a 3001 	ldrb.w	r3, [sl, #1]
     6b2:	2b25      	cmp	r3, #37	; 0x25
     6b4:	d001      	beq.n	6ba <cbvprintf+0x4e>
	bool loop = true;
     6b6:	2701      	movs	r7, #1
     6b8:	e02c      	b.n	714 <cbvprintf+0xa8>
		conv->specifier = *sp++;
     6ba:	f10a 0802 	add.w	r8, sl, #2
     6be:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
     6c2:	e1a8      	b.n	a16 <CONFIG_ISR_STACK_SIZE+0x216>
			conv->flag_dash = true;
     6c4:	f89d 3020 	ldrb.w	r3, [sp, #32]
     6c8:	f043 0304 	orr.w	r3, r3, #4
     6cc:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
     6d0:	b1ff      	cbz	r7, 712 <cbvprintf+0xa6>
			++sp;
     6d2:	f108 0801 	add.w	r8, r8, #1
     6d6:	e01c      	b.n	712 <cbvprintf+0xa6>
			conv->flag_plus = true;
     6d8:	f89d 3020 	ldrb.w	r3, [sp, #32]
     6dc:	f043 0308 	orr.w	r3, r3, #8
     6e0:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     6e4:	e7f4      	b.n	6d0 <cbvprintf+0x64>
			conv->flag_space = true;
     6e6:	f89d 3020 	ldrb.w	r3, [sp, #32]
     6ea:	f043 0310 	orr.w	r3, r3, #16
     6ee:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     6f2:	e7ed      	b.n	6d0 <cbvprintf+0x64>
			conv->flag_hash = true;
     6f4:	f89d 3020 	ldrb.w	r3, [sp, #32]
     6f8:	f043 0320 	orr.w	r3, r3, #32
     6fc:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     700:	e7e6      	b.n	6d0 <cbvprintf+0x64>
			conv->flag_zero = true;
     702:	f89d 3020 	ldrb.w	r3, [sp, #32]
     706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     70a:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     70e:	e7df      	b.n	6d0 <cbvprintf+0x64>
		switch (*sp) {
     710:	2700      	movs	r7, #0
	} while (loop);
     712:	b34f      	cbz	r7, 768 <cbvprintf+0xfc>
		switch (*sp) {
     714:	f898 3000 	ldrb.w	r3, [r8]
     718:	3b20      	subs	r3, #32
     71a:	2b10      	cmp	r3, #16
     71c:	d8f8      	bhi.n	710 <cbvprintf+0xa4>
     71e:	a201      	add	r2, pc, #4	; (adr r2, 724 <cbvprintf+0xb8>)
     720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     724:	000006e7 	.word	0x000006e7
     728:	00000711 	.word	0x00000711
     72c:	00000711 	.word	0x00000711
     730:	000006f5 	.word	0x000006f5
     734:	00000711 	.word	0x00000711
     738:	00000711 	.word	0x00000711
     73c:	00000711 	.word	0x00000711
     740:	00000711 	.word	0x00000711
     744:	00000711 	.word	0x00000711
     748:	00000711 	.word	0x00000711
     74c:	00000711 	.word	0x00000711
     750:	000006d9 	.word	0x000006d9
     754:	00000711 	.word	0x00000711
     758:	000006c5 	.word	0x000006c5
     75c:	00000711 	.word	0x00000711
     760:	00000711 	.word	0x00000711
     764:	00000703 	.word	0x00000703
	if (conv->flag_zero && conv->flag_dash) {
     768:	f89d 3020 	ldrb.w	r3, [sp, #32]
     76c:	f003 0344 	and.w	r3, r3, #68	; 0x44
     770:	2b44      	cmp	r3, #68	; 0x44
     772:	d06d      	beq.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
	sp = extract_width(conv, sp);
     774:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
     778:	f89d 3020 	ldrb.w	r3, [sp, #32]
     77c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     780:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
     784:	f898 3000 	ldrb.w	r3, [r8]
     788:	2b2a      	cmp	r3, #42	; 0x2a
     78a:	d068      	beq.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>
	size_t width = extract_decimal(&sp);
     78c:	a805      	add	r0, sp, #20
     78e:	f009 fcb9 	bl	a104 <extract_decimal>
	if (sp != wp) {
     792:	9b05      	ldr	r3, [sp, #20]
     794:	4598      	cmp	r8, r3
     796:	d012      	beq.n	7be <cbvprintf+0x152>
		conv->width_present = true;
     798:	f89d 3020 	ldrb.w	r3, [sp, #32]
     79c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     7a0:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
     7a4:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
     7a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     7aa:	2800      	cmp	r0, #0
     7ac:	db60      	blt.n	870 <CONFIG_ISR_STACK_SIZE+0x70>
     7ae:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     7b0:	4313      	orrs	r3, r2
     7b2:	f89d 2020 	ldrb.w	r2, [sp, #32]
     7b6:	f363 0241 	bfi	r2, r3, #1, #1
     7ba:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     7be:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
     7c0:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
     7c2:	781b      	ldrb	r3, [r3, #0]
     7c4:	2b2e      	cmp	r3, #46	; 0x2e
     7c6:	bf14      	ite	ne
     7c8:	2300      	movne	r3, #0
     7ca:	2301      	moveq	r3, #1
     7cc:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     7d0:	f363 0241 	bfi	r2, r3, #1, #1
     7d4:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
     7d8:	2b00      	cmp	r3, #0
     7da:	d04b      	beq.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
	++sp;
     7dc:	9b05      	ldr	r3, [sp, #20]
     7de:	1c5a      	adds	r2, r3, #1
     7e0:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
     7e2:	785b      	ldrb	r3, [r3, #1]
     7e4:	2b2a      	cmp	r3, #42	; 0x2a
     7e6:	d048      	beq.n	87a <CONFIG_ISR_STACK_SIZE+0x7a>
	size_t prec = extract_decimal(&sp);
     7e8:	a805      	add	r0, sp, #20
     7ea:	f009 fc8b 	bl	a104 <extract_decimal>
	conv->prec_value = prec;
     7ee:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
     7f0:	f89d 3020 	ldrb.w	r3, [sp, #32]
     7f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     7f8:	2800      	cmp	r0, #0
     7fa:	db47      	blt.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
     7fc:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     7fe:	4313      	orrs	r3, r2
     800:	f89d 2020 	ldrb.w	r2, [sp, #32]
     804:	f363 0241 	bfi	r2, r3, #1, #1
     808:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     80c:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
     810:	f898 3000 	ldrb.w	r3, [r8]
     814:	3b4c      	subs	r3, #76	; 0x4c
     816:	2b2e      	cmp	r3, #46	; 0x2e
     818:	f200 80dc 	bhi.w	9d4 <CONFIG_ISR_STACK_SIZE+0x1d4>
     81c:	e8df f003 	tbb	[pc, r3]
     820:	dadadaca 	.word	0xdadadaca
     824:	dadadada 	.word	0xdadadada
     828:	dadadada 	.word	0xdadadada
     82c:	dadadada 	.word	0xdadadada
     830:	dadadada 	.word	0xdadadada
     834:	dadadada 	.word	0xdadadada
     838:	dadadada 	.word	0xdadadada
     83c:	da6ada38 	.word	0xda6ada38
     840:	dadada51 	.word	0xdadada51
     844:	dadadada 	.word	0xdadadada
     848:	dadadac0 	.word	0xdadadac0
     84c:	dada      	.short	0xdada
     84e:	b6          	.byte	0xb6
     84f:	00          	.byte	0x00
		conv->flag_zero = false;
     850:	f89d 3020 	ldrb.w	r3, [sp, #32]
     854:	f36f 1386 	bfc	r3, #6, #1
     858:	f88d 3020 	strb.w	r3, [sp, #32]
     85c:	e78a      	b.n	774 <cbvprintf+0x108>
		conv->width_star = true;
     85e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     862:	f043 0301 	orr.w	r3, r3, #1
     866:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     86a:	4643      	mov	r3, r8
     86c:	3301      	adds	r3, #1
     86e:	e7a7      	b.n	7c0 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
     870:	2201      	movs	r2, #1
     872:	e79d      	b.n	7b0 <cbvprintf+0x144>
		return sp;
     874:	f8dd 8014 	ldr.w	r8, [sp, #20]
     878:	e7ca      	b.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
		conv->prec_star = true;
     87a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     87e:	f043 0304 	orr.w	r3, r3, #4
     882:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     886:	f102 0801 	add.w	r8, r2, #1
     88a:	e7c1      	b.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
			      || (prec != (size_t)conv->prec_value));
     88c:	2201      	movs	r2, #1
     88e:	e7b6      	b.n	7fe <cbvprintf+0x192>
		if (*++sp == 'h') {
     890:	f108 0201 	add.w	r2, r8, #1
     894:	f898 3001 	ldrb.w	r3, [r8, #1]
     898:	2b68      	cmp	r3, #104	; 0x68
     89a:	d008      	beq.n	8ae <CONFIG_ISR_STACK_SIZE+0xae>
			conv->length_mod = LENGTH_H;
     89c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     8a0:	2102      	movs	r1, #2
     8a2:	f361 03c6 	bfi	r3, r1, #3, #4
     8a6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
     8aa:	4690      	mov	r8, r2
     8ac:	e02b      	b.n	906 <CONFIG_ISR_STACK_SIZE+0x106>
			conv->length_mod = LENGTH_HH;
     8ae:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     8b2:	2201      	movs	r2, #1
     8b4:	f362 03c6 	bfi	r3, r2, #3, #4
     8b8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     8bc:	f108 0802 	add.w	r8, r8, #2
     8c0:	e021      	b.n	906 <CONFIG_ISR_STACK_SIZE+0x106>
		if (*++sp == 'l') {
     8c2:	f108 0201 	add.w	r2, r8, #1
     8c6:	f898 3001 	ldrb.w	r3, [r8, #1]
     8ca:	2b6c      	cmp	r3, #108	; 0x6c
     8cc:	d008      	beq.n	8e0 <CONFIG_ISR_STACK_SIZE+0xe0>
			conv->length_mod = LENGTH_L;
     8ce:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     8d2:	2103      	movs	r1, #3
     8d4:	f361 03c6 	bfi	r3, r1, #3, #4
     8d8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
     8dc:	4690      	mov	r8, r2
     8de:	e012      	b.n	906 <CONFIG_ISR_STACK_SIZE+0x106>
			conv->length_mod = LENGTH_LL;
     8e0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     8e4:	2204      	movs	r2, #4
     8e6:	f362 03c6 	bfi	r3, r2, #3, #4
     8ea:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     8ee:	f108 0802 	add.w	r8, r8, #2
     8f2:	e008      	b.n	906 <CONFIG_ISR_STACK_SIZE+0x106>
		conv->length_mod = LENGTH_J;
     8f4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     8f8:	2205      	movs	r2, #5
     8fa:	f362 03c6 	bfi	r3, r2, #3, #4
     8fe:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     902:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
     906:	f818 3b01 	ldrb.w	r3, [r8], #1
     90a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
     90e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     912:	2a37      	cmp	r2, #55	; 0x37
     914:	f200 8150 	bhi.w	bb8 <CONFIG_ISR_STACK_SIZE+0x3b8>
     918:	e8df f012 	tbh	[pc, r2, lsl #1]
     91c:	014e0126 	.word	0x014e0126
     920:	014e014e 	.word	0x014e014e
     924:	01260126 	.word	0x01260126
     928:	014e0126 	.word	0x014e0126
     92c:	014e014e 	.word	0x014e014e
     930:	014e014e 	.word	0x014e014e
     934:	014e014e 	.word	0x014e014e
     938:	014e014e 	.word	0x014e014e
     93c:	014e014e 	.word	0x014e014e
     940:	014e014e 	.word	0x014e014e
     944:	014e014e 	.word	0x014e014e
     948:	0113014e 	.word	0x0113014e
     94c:	014e014e 	.word	0x014e014e
     950:	014e014e 	.word	0x014e014e
     954:	014e014e 	.word	0x014e014e
     958:	014e014e 	.word	0x014e014e
     95c:	014e0126 	.word	0x014e0126
     960:	00630113 	.word	0x00630113
     964:	01260126 	.word	0x01260126
     968:	014e0126 	.word	0x014e0126
     96c:	014e0063 	.word	0x014e0063
     970:	014e014e 	.word	0x014e014e
     974:	012f014e 	.word	0x012f014e
     978:	013f0113 	.word	0x013f0113
     97c:	014e014e 	.word	0x014e014e
     980:	014e013f 	.word	0x014e013f
     984:	014e0113 	.word	0x014e0113
     988:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
     98c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     990:	2206      	movs	r2, #6
     992:	f362 03c6 	bfi	r3, r2, #3, #4
     996:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     99a:	f108 0801 	add.w	r8, r8, #1
		break;
     99e:	e7b2      	b.n	906 <CONFIG_ISR_STACK_SIZE+0x106>
		conv->length_mod = LENGTH_T;
     9a0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     9a4:	2207      	movs	r2, #7
     9a6:	f362 03c6 	bfi	r3, r2, #3, #4
     9aa:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     9ae:	f108 0801 	add.w	r8, r8, #1
		break;
     9b2:	e7a8      	b.n	906 <CONFIG_ISR_STACK_SIZE+0x106>
		conv->length_mod = LENGTH_UPPER_L;
     9b4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     9b8:	2208      	movs	r2, #8
     9ba:	f362 03c6 	bfi	r3, r2, #3, #4
     9be:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     9c2:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
     9c6:	f89d 3020 	ldrb.w	r3, [sp, #32]
     9ca:	f043 0302 	orr.w	r3, r3, #2
     9ce:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     9d2:	e798      	b.n	906 <CONFIG_ISR_STACK_SIZE+0x106>
		conv->length_mod = LENGTH_NONE;
     9d4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     9d8:	f36f 03c6 	bfc	r3, #3, #4
     9dc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
     9e0:	e791      	b.n	906 <CONFIG_ISR_STACK_SIZE+0x106>
		conv->specifier_cat = SPECIFIER_SINT;
     9e2:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     9e6:	2101      	movs	r1, #1
     9e8:	f361 0202 	bfi	r2, r1, #0, #3
     9ec:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     9f0:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     9f4:	f002 0278 	and.w	r2, r2, #120	; 0x78
     9f8:	2a40      	cmp	r2, #64	; 0x40
     9fa:	f000 80aa 	beq.w	b52 <CONFIG_ISR_STACK_SIZE+0x352>
		if (conv->specifier == 'c') {
     9fe:	2b63      	cmp	r3, #99	; 0x63
     a00:	f000 80ae 	beq.w	b60 <CONFIG_ISR_STACK_SIZE+0x360>
	conv->unsupported |= unsupported;
     a04:	f89d 3020 	ldrb.w	r3, [sp, #32]
     a08:	f3c3 0240 	ubfx	r2, r3, #1, #1
     a0c:	4317      	orrs	r7, r2
     a0e:	f367 0341 	bfi	r3, r7, #1, #1
     a12:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     a16:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     a1a:	f013 0f01 	tst.w	r3, #1
     a1e:	f000 80da 	beq.w	bd6 <CONFIG_ISR_STACK_SIZE+0x3d6>
			width = va_arg(ap, int);
     a22:	9b03      	ldr	r3, [sp, #12]
     a24:	1d1a      	adds	r2, r3, #4
     a26:	9203      	str	r2, [sp, #12]
     a28:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     a2a:	2f00      	cmp	r7, #0
     a2c:	f2c0 80cb 	blt.w	bc6 <CONFIG_ISR_STACK_SIZE+0x3c6>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     a30:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     a34:	f013 0f04 	tst.w	r3, #4
     a38:	f000 80df 	beq.w	bfa <CONFIG_ISR_STACK_SIZE+0x3fa>
			int arg = va_arg(ap, int);
     a3c:	9b03      	ldr	r3, [sp, #12]
     a3e:	1d1a      	adds	r2, r3, #4
     a40:	9203      	str	r2, [sp, #12]
     a42:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
     a46:	f1bb 0f00 	cmp.w	fp, #0
     a4a:	f2c0 80cd 	blt.w	be8 <CONFIG_ISR_STACK_SIZE+0x3e8>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     a4e:	2300      	movs	r3, #0
     a50:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
     a52:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     a54:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     a58:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     a5c:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
     a60:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     a64:	2b01      	cmp	r3, #1
     a66:	f000 80d1 	beq.w	c0c <CONFIG_ISR_STACK_SIZE+0x40c>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     a6a:	2b02      	cmp	r3, #2
     a6c:	f000 8116 	beq.w	c9c <CONFIG_ISR_STACK_SIZE+0x49c>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     a70:	2b04      	cmp	r3, #4
     a72:	f000 8167 	beq.w	d44 <CONFIG_ISR_STACK_SIZE+0x544>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     a76:	2b03      	cmp	r3, #3
     a78:	f000 817e 	beq.w	d78 <CONFIG_ISR_STACK_SIZE+0x578>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     a7c:	f89d 9020 	ldrb.w	r9, [sp, #32]
     a80:	f019 0303 	ands.w	r3, r9, #3
     a84:	9302      	str	r3, [sp, #8]
     a86:	f040 817d 	bne.w	d84 <CONFIG_ISR_STACK_SIZE+0x584>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     a8a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
     a8e:	3b25      	subs	r3, #37	; 0x25
     a90:	2b53      	cmp	r3, #83	; 0x53
     a92:	f200 8233 	bhi.w	efc <CONFIG_ISR_STACK_SIZE+0x6fc>
     a96:	e8df f013 	tbh	[pc, r3, lsl #1]
     a9a:	0181      	.short	0x0181
     a9c:	02310231 	.word	0x02310231
     aa0:	02310231 	.word	0x02310231
     aa4:	02310231 	.word	0x02310231
     aa8:	02310231 	.word	0x02310231
     aac:	02310231 	.word	0x02310231
     ab0:	02310231 	.word	0x02310231
     ab4:	02310231 	.word	0x02310231
     ab8:	02310231 	.word	0x02310231
     abc:	02310231 	.word	0x02310231
     ac0:	02310231 	.word	0x02310231
     ac4:	02310231 	.word	0x02310231
     ac8:	02310231 	.word	0x02310231
     acc:	02310231 	.word	0x02310231
     ad0:	02310231 	.word	0x02310231
     ad4:	02310231 	.word	0x02310231
     ad8:	02310231 	.word	0x02310231
     adc:	02310231 	.word	0x02310231
     ae0:	02310231 	.word	0x02310231
     ae4:	02310231 	.word	0x02310231
     ae8:	02310231 	.word	0x02310231
     aec:	02310231 	.word	0x02310231
     af0:	02310231 	.word	0x02310231
     af4:	02310231 	.word	0x02310231
     af8:	02310231 	.word	0x02310231
     afc:	02310231 	.word	0x02310231
     b00:	023101c7 	.word	0x023101c7
     b04:	02310231 	.word	0x02310231
     b08:	02310231 	.word	0x02310231
     b0c:	02310231 	.word	0x02310231
     b10:	02310231 	.word	0x02310231
     b14:	01a10231 	.word	0x01a10231
     b18:	023101ab 	.word	0x023101ab
     b1c:	02310231 	.word	0x02310231
     b20:	01ab0231 	.word	0x01ab0231
     b24:	02310231 	.word	0x02310231
     b28:	02310231 	.word	0x02310231
     b2c:	01c70208 	.word	0x01c70208
     b30:	023101ea 	.word	0x023101ea
     b34:	018f0231 	.word	0x018f0231
     b38:	01c70231 	.word	0x01c70231
     b3c:	02310231 	.word	0x02310231
     b40:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
     b42:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     b46:	2102      	movs	r1, #2
     b48:	f361 0202 	bfi	r2, r1, #0, #3
     b4c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
     b50:	e74e      	b.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
			conv->invalid = true;
     b52:	f89d 1020 	ldrb.w	r1, [sp, #32]
     b56:	f041 0101 	orr.w	r1, r1, #1
     b5a:	f88d 1020 	strb.w	r1, [sp, #32]
     b5e:	e74e      	b.n	9fe <CONFIG_ISR_STACK_SIZE+0x1fe>
			unsupported = (conv->length_mod != LENGTH_NONE);
     b60:	1e17      	subs	r7, r2, #0
     b62:	bf18      	it	ne
     b64:	2701      	movne	r7, #1
     b66:	e74d      	b.n	a04 <CONFIG_ISR_STACK_SIZE+0x204>
		conv->specifier_cat = SPECIFIER_FP;
     b68:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     b6c:	2204      	movs	r2, #4
     b6e:	f362 0302 	bfi	r3, r2, #0, #3
     b72:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
     b76:	2701      	movs	r7, #1
			break;
     b78:	e744      	b.n	a04 <CONFIG_ISR_STACK_SIZE+0x204>
		conv->specifier_cat = SPECIFIER_PTR;
     b7a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     b7e:	2203      	movs	r2, #3
     b80:	f362 0302 	bfi	r3, r2, #0, #3
     b84:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     b88:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     b8c:	f003 0378 	and.w	r3, r3, #120	; 0x78
     b90:	2b40      	cmp	r3, #64	; 0x40
     b92:	f47f af37 	bne.w	a04 <CONFIG_ISR_STACK_SIZE+0x204>
			unsupported = true;
     b96:	2701      	movs	r7, #1
     b98:	e734      	b.n	a04 <CONFIG_ISR_STACK_SIZE+0x204>
		conv->specifier_cat = SPECIFIER_PTR;
     b9a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     b9e:	2203      	movs	r2, #3
     ba0:	f362 0302 	bfi	r3, r2, #0, #3
     ba4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
     ba8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     bac:	f013 0f78 	tst.w	r3, #120	; 0x78
     bb0:	f43f af28 	beq.w	a04 <CONFIG_ISR_STACK_SIZE+0x204>
			unsupported = true;
     bb4:	2701      	movs	r7, #1
     bb6:	e725      	b.n	a04 <CONFIG_ISR_STACK_SIZE+0x204>
		conv->invalid = true;
     bb8:	f89d 3020 	ldrb.w	r3, [sp, #32]
     bbc:	f043 0301 	orr.w	r3, r3, #1
     bc0:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     bc4:	e71e      	b.n	a04 <CONFIG_ISR_STACK_SIZE+0x204>
				conv->flag_dash = true;
     bc6:	f89d 3020 	ldrb.w	r3, [sp, #32]
     bca:	f043 0304 	orr.w	r3, r3, #4
     bce:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
     bd2:	427f      	negs	r7, r7
     bd4:	e72c      	b.n	a30 <CONFIG_ISR_STACK_SIZE+0x230>
		} else if (conv->width_present) {
     bd6:	f99d 3020 	ldrsb.w	r3, [sp, #32]
     bda:	2b00      	cmp	r3, #0
     bdc:	db02      	blt.n	be4 <CONFIG_ISR_STACK_SIZE+0x3e4>
		int width = -1;
     bde:	f04f 37ff 	mov.w	r7, #4294967295
     be2:	e725      	b.n	a30 <CONFIG_ISR_STACK_SIZE+0x230>
			width = conv->width_value;
     be4:	9f09      	ldr	r7, [sp, #36]	; 0x24
     be6:	e723      	b.n	a30 <CONFIG_ISR_STACK_SIZE+0x230>
				conv->prec_present = false;
     be8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     bec:	f36f 0341 	bfc	r3, #1, #1
     bf0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
     bf4:	f04f 3bff 	mov.w	fp, #4294967295
     bf8:	e729      	b.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
		} else if (conv->prec_present) {
     bfa:	f013 0f02 	tst.w	r3, #2
     bfe:	d002      	beq.n	c06 <CONFIG_ISR_STACK_SIZE+0x406>
			precision = conv->prec_value;
     c00:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
     c04:	e723      	b.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
		int precision = -1;
     c06:	f04f 3bff 	mov.w	fp, #4294967295
     c0a:	e720      	b.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
			switch (length_mod) {
     c0c:	1ecb      	subs	r3, r1, #3
     c0e:	2b04      	cmp	r3, #4
     c10:	d804      	bhi.n	c1c <CONFIG_ISR_STACK_SIZE+0x41c>
     c12:	e8df f003 	tbb	[pc, r3]
     c16:	1d0b      	.short	0x1d0b
     c18:	3529      	.short	0x3529
     c1a:	35          	.byte	0x35
     c1b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     c1c:	9b03      	ldr	r3, [sp, #12]
     c1e:	1d1a      	adds	r2, r3, #4
     c20:	9203      	str	r2, [sp, #12]
     c22:	681a      	ldr	r2, [r3, #0]
     c24:	17d3      	asrs	r3, r2, #31
     c26:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     c2a:	e006      	b.n	c3a <CONFIG_ISR_STACK_SIZE+0x43a>
					value->sint = va_arg(ap, long);
     c2c:	9b03      	ldr	r3, [sp, #12]
     c2e:	1d1a      	adds	r2, r3, #4
     c30:	9203      	str	r2, [sp, #12]
     c32:	681a      	ldr	r2, [r3, #0]
     c34:	17d3      	asrs	r3, r2, #31
     c36:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
     c3a:	2901      	cmp	r1, #1
     c3c:	d028      	beq.n	c90 <CONFIG_ISR_STACK_SIZE+0x490>
			} else if (length_mod == LENGTH_H) {
     c3e:	2902      	cmp	r1, #2
     c40:	f47f af1c 	bne.w	a7c <CONFIG_ISR_STACK_SIZE+0x27c>
				value->sint = (short)value->sint;
     c44:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
     c48:	17d3      	asrs	r3, r2, #31
     c4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
     c4e:	e715      	b.n	a7c <CONFIG_ISR_STACK_SIZE+0x27c>
					(sint_value_type)va_arg(ap, long long);
     c50:	9b03      	ldr	r3, [sp, #12]
     c52:	3307      	adds	r3, #7
     c54:	f023 0307 	bic.w	r3, r3, #7
     c58:	f103 0208 	add.w	r2, r3, #8
     c5c:	9203      	str	r2, [sp, #12]
     c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     c62:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     c66:	e7e8      	b.n	c3a <CONFIG_ISR_STACK_SIZE+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
     c68:	9b03      	ldr	r3, [sp, #12]
     c6a:	3307      	adds	r3, #7
     c6c:	f023 0307 	bic.w	r3, r3, #7
     c70:	f103 0208 	add.w	r2, r3, #8
     c74:	9203      	str	r2, [sp, #12]
     c76:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     c7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     c7e:	e7dc      	b.n	c3a <CONFIG_ISR_STACK_SIZE+0x43a>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     c80:	9b03      	ldr	r3, [sp, #12]
     c82:	1d1a      	adds	r2, r3, #4
     c84:	9203      	str	r2, [sp, #12]
     c86:	681a      	ldr	r2, [r3, #0]
     c88:	17d3      	asrs	r3, r2, #31
				value->sint =
     c8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     c8e:	e7d4      	b.n	c3a <CONFIG_ISR_STACK_SIZE+0x43a>
				value->sint = (char)value->sint;
     c90:	f89d 3018 	ldrb.w	r3, [sp, #24]
     c94:	9306      	str	r3, [sp, #24]
     c96:	2300      	movs	r3, #0
     c98:	9307      	str	r3, [sp, #28]
     c9a:	e6ef      	b.n	a7c <CONFIG_ISR_STACK_SIZE+0x27c>
			switch (length_mod) {
     c9c:	1ecb      	subs	r3, r1, #3
     c9e:	2b04      	cmp	r3, #4
     ca0:	d804      	bhi.n	cac <CONFIG_ISR_STACK_SIZE+0x4ac>
     ca2:	e8df f003 	tbb	[pc, r3]
     ca6:	1f0b      	.short	0x1f0b
     ca8:	4135      	.short	0x4135
     caa:	41          	.byte	0x41
     cab:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     cac:	9b03      	ldr	r3, [sp, #12]
     cae:	1d1a      	adds	r2, r3, #4
     cb0:	9203      	str	r2, [sp, #12]
     cb2:	681b      	ldr	r3, [r3, #0]
     cb4:	9306      	str	r3, [sp, #24]
     cb6:	2300      	movs	r3, #0
     cb8:	9307      	str	r3, [sp, #28]
				break;
     cba:	e01e      	b.n	cfa <CONFIG_ISR_STACK_SIZE+0x4fa>
				    && (conv->specifier == 'c')) {
     cbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
     cc0:	2b63      	cmp	r3, #99	; 0x63
     cc2:	d007      	beq.n	cd4 <CONFIG_ISR_STACK_SIZE+0x4d4>
					value->uint = va_arg(ap, unsigned long);
     cc4:	9b03      	ldr	r3, [sp, #12]
     cc6:	1d1a      	adds	r2, r3, #4
     cc8:	9203      	str	r2, [sp, #12]
     cca:	681b      	ldr	r3, [r3, #0]
     ccc:	9306      	str	r3, [sp, #24]
     cce:	2300      	movs	r3, #0
     cd0:	9307      	str	r3, [sp, #28]
     cd2:	e012      	b.n	cfa <CONFIG_ISR_STACK_SIZE+0x4fa>
					value->uint = (wchar_t)va_arg(ap,
     cd4:	9b03      	ldr	r3, [sp, #12]
     cd6:	1d1a      	adds	r2, r3, #4
     cd8:	9203      	str	r2, [sp, #12]
     cda:	681b      	ldr	r3, [r3, #0]
     cdc:	9306      	str	r3, [sp, #24]
     cde:	2300      	movs	r3, #0
     ce0:	9307      	str	r3, [sp, #28]
     ce2:	e00a      	b.n	cfa <CONFIG_ISR_STACK_SIZE+0x4fa>
					(uint_value_type)va_arg(ap,
     ce4:	9b03      	ldr	r3, [sp, #12]
     ce6:	3307      	adds	r3, #7
     ce8:	f023 0307 	bic.w	r3, r3, #7
     cec:	f103 0208 	add.w	r2, r3, #8
     cf0:	9203      	str	r2, [sp, #12]
     cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     cf6:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
     cfa:	2901      	cmp	r1, #1
     cfc:	d01c      	beq.n	d38 <CONFIG_ISR_STACK_SIZE+0x538>
			} else if (length_mod == LENGTH_H) {
     cfe:	2902      	cmp	r1, #2
     d00:	f47f aebc 	bne.w	a7c <CONFIG_ISR_STACK_SIZE+0x27c>
				value->uint = (unsigned short)value->uint;
     d04:	f8bd 3018 	ldrh.w	r3, [sp, #24]
     d08:	9306      	str	r3, [sp, #24]
     d0a:	2300      	movs	r3, #0
     d0c:	9307      	str	r3, [sp, #28]
     d0e:	e6b5      	b.n	a7c <CONFIG_ISR_STACK_SIZE+0x27c>
					(uint_value_type)va_arg(ap,
     d10:	9b03      	ldr	r3, [sp, #12]
     d12:	3307      	adds	r3, #7
     d14:	f023 0307 	bic.w	r3, r3, #7
     d18:	f103 0208 	add.w	r2, r3, #8
     d1c:	9203      	str	r2, [sp, #12]
     d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     d22:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     d26:	e7e8      	b.n	cfa <CONFIG_ISR_STACK_SIZE+0x4fa>
					(uint_value_type)va_arg(ap, size_t);
     d28:	9b03      	ldr	r3, [sp, #12]
     d2a:	1d1a      	adds	r2, r3, #4
     d2c:	9203      	str	r2, [sp, #12]
     d2e:	681b      	ldr	r3, [r3, #0]
				value->uint =
     d30:	9306      	str	r3, [sp, #24]
     d32:	2300      	movs	r3, #0
     d34:	9307      	str	r3, [sp, #28]
				break;
     d36:	e7e0      	b.n	cfa <CONFIG_ISR_STACK_SIZE+0x4fa>
				value->uint = (unsigned char)value->uint;
     d38:	f89d 3018 	ldrb.w	r3, [sp, #24]
     d3c:	9306      	str	r3, [sp, #24]
     d3e:	2300      	movs	r3, #0
     d40:	9307      	str	r3, [sp, #28]
     d42:	e69b      	b.n	a7c <CONFIG_ISR_STACK_SIZE+0x27c>
			if (length_mod == LENGTH_UPPER_L) {
     d44:	2908      	cmp	r1, #8
     d46:	d00b      	beq.n	d60 <CONFIG_ISR_STACK_SIZE+0x560>
				value->dbl = va_arg(ap, double);
     d48:	9b03      	ldr	r3, [sp, #12]
     d4a:	3307      	adds	r3, #7
     d4c:	f023 0307 	bic.w	r3, r3, #7
     d50:	f103 0208 	add.w	r2, r3, #8
     d54:	9203      	str	r2, [sp, #12]
     d56:	e9d3 2300 	ldrd	r2, r3, [r3]
     d5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
     d5e:	e68d      	b.n	a7c <CONFIG_ISR_STACK_SIZE+0x27c>
				value->ldbl = va_arg(ap, long double);
     d60:	9b03      	ldr	r3, [sp, #12]
     d62:	3307      	adds	r3, #7
     d64:	f023 0307 	bic.w	r3, r3, #7
     d68:	f103 0208 	add.w	r2, r3, #8
     d6c:	9203      	str	r2, [sp, #12]
     d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
     d72:	e9cd 2306 	strd	r2, r3, [sp, #24]
     d76:	e681      	b.n	a7c <CONFIG_ISR_STACK_SIZE+0x27c>
			value->ptr = va_arg(ap, void *);
     d78:	9b03      	ldr	r3, [sp, #12]
     d7a:	1d1a      	adds	r2, r3, #4
     d7c:	9203      	str	r2, [sp, #12]
     d7e:	681b      	ldr	r3, [r3, #0]
     d80:	9306      	str	r3, [sp, #24]
     d82:	e67b      	b.n	a7c <CONFIG_ISR_STACK_SIZE+0x27c>
			OUTS(sp, fp);
     d84:	4643      	mov	r3, r8
     d86:	4652      	mov	r2, sl
     d88:	4629      	mov	r1, r5
     d8a:	4630      	mov	r0, r6
     d8c:	f009 fa37 	bl	a1fe <outs>
     d90:	2800      	cmp	r0, #0
     d92:	f2c0 814f 	blt.w	1034 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x34>
     d96:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
     d98:	46c2      	mov	sl, r8
			continue;
     d9a:	e46f      	b.n	67c <cbvprintf+0x10>
		case '%':
			OUTC('%');
     d9c:	4629      	mov	r1, r5
     d9e:	2025      	movs	r0, #37	; 0x25
     da0:	47b0      	blx	r6
     da2:	2800      	cmp	r0, #0
     da4:	f2c0 8146 	blt.w	1034 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x34>
     da8:	3401      	adds	r4, #1
		char sign = 0;
     daa:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
     dae:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
     db2:	f04f 0a00 	mov.w	sl, #0
			break;
     db6:	e0a7      	b.n	f08 <CONFIG_ISR_STACK_SIZE+0x708>
		case 's': {
			bps = (const char *)value->ptr;
     db8:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
     dbc:	f1bb 0f00 	cmp.w	fp, #0
     dc0:	db08      	blt.n	dd4 <CONFIG_ISR_STACK_SIZE+0x5d4>
				len = strnlen(bps, precision);
     dc2:	4659      	mov	r1, fp
     dc4:	4650      	mov	r0, sl
     dc6:	f009 fe94 	bl	aaf2 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
     dca:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
     dce:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
     dd2:	e099      	b.n	f08 <CONFIG_ISR_STACK_SIZE+0x708>
				len = strlen(bps);
     dd4:	4650      	mov	r0, sl
     dd6:	f009 fe84 	bl	aae2 <strlen>
     dda:	e7f6      	b.n	dca <CONFIG_ISR_STACK_SIZE+0x5ca>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     ddc:	9b06      	ldr	r3, [sp, #24]
     dde:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
     de2:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
     de6:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
     dea:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
     dee:	e08b      	b.n	f08 <CONFIG_ISR_STACK_SIZE+0x708>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
     df0:	f019 0f08 	tst.w	r9, #8
     df4:	d105      	bne.n	e02 <CONFIG_ISR_STACK_SIZE+0x602>
				sign = '+';
			} else if (conv->flag_space) {
     df6:	f019 0910 	ands.w	r9, r9, #16
     dfa:	d004      	beq.n	e06 <CONFIG_ISR_STACK_SIZE+0x606>
				sign = ' ';
     dfc:	f04f 0920 	mov.w	r9, #32
     e00:	e001      	b.n	e06 <CONFIG_ISR_STACK_SIZE+0x606>
				sign = '+';
     e02:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
     e06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
     e0a:	2a00      	cmp	r2, #0
     e0c:	f173 0100 	sbcs.w	r1, r3, #0
     e10:	db02      	blt.n	e18 <CONFIG_ISR_STACK_SIZE+0x618>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
     e12:	e9cd 2306 	strd	r2, r3, [sp, #24]
     e16:	e009      	b.n	e2c <CONFIG_ISR_STACK_SIZE+0x62c>
				value->uint = (uint_value_type)-sint;
     e18:	4252      	negs	r2, r2
     e1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     e1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
     e22:	f04f 092d 	mov.w	r9, #45	; 0x2d
     e26:	e001      	b.n	e2c <CONFIG_ISR_STACK_SIZE+0x62c>
		switch (conv->specifier) {
     e28:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
     e2c:	f10d 0346 	add.w	r3, sp, #70	; 0x46
     e30:	9300      	str	r3, [sp, #0]
     e32:	ab0c      	add	r3, sp, #48	; 0x30
     e34:	aa08      	add	r2, sp, #32
     e36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
     e3a:	f009 f976 	bl	a12a <encode_uint>
     e3e:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
     e40:	f1bb 0f00 	cmp.w	fp, #0
     e44:	f2c0 8090 	blt.w	f68 <CONFIG_ISR_STACK_SIZE+0x768>
				size_t len = bpe - bps;
     e48:	f10d 0346 	add.w	r3, sp, #70	; 0x46
     e4c:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
     e50:	f89d 2020 	ldrb.w	r2, [sp, #32]
     e54:	f36f 1286 	bfc	r2, #6, #1
     e58:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
     e5c:	459b      	cmp	fp, r3
     e5e:	f240 8086 	bls.w	f6e <CONFIG_ISR_STACK_SIZE+0x76e>
					conv->pad0_value = precision - (int)len;
     e62:	ebab 0303 	sub.w	r3, fp, r3
     e66:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
     e68:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
     e6c:	e04c      	b.n	f08 <CONFIG_ISR_STACK_SIZE+0x708>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
     e6e:	9806      	ldr	r0, [sp, #24]
     e70:	b930      	cbnz	r0, e80 <CONFIG_ISR_STACK_SIZE+0x680>
		char sign = 0;
     e72:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
     e76:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 103c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3c>
			bps = "(nil)";
     e7a:	f1ab 0a05 	sub.w	sl, fp, #5
     e7e:	e043      	b.n	f08 <CONFIG_ISR_STACK_SIZE+0x708>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     e80:	f10d 0346 	add.w	r3, sp, #70	; 0x46
     e84:	9300      	str	r3, [sp, #0]
     e86:	ab0c      	add	r3, sp, #48	; 0x30
     e88:	aa08      	add	r2, sp, #32
     e8a:	2100      	movs	r1, #0
     e8c:	f009 f94d 	bl	a12a <encode_uint>
     e90:	4682      	mov	sl, r0
				conv->altform_0c = true;
     e92:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     e96:	f043 0310 	orr.w	r3, r3, #16
     e9a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
     e9e:	2378      	movs	r3, #120	; 0x78
     ea0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
     ea4:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
     ea8:	e7ca      	b.n	e40 <CONFIG_ISR_STACK_SIZE+0x640>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
     eaa:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
     eac:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     eb0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
     eb4:	2b07      	cmp	r3, #7
     eb6:	d806      	bhi.n	ec6 <CONFIG_ISR_STACK_SIZE+0x6c6>
     eb8:	e8df f003 	tbb	[pc, r3]
     ebc:	100e0c04 	.word	0x100e0c04
     ec0:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
     ec4:	6014      	str	r4, [r2, #0]
		char sign = 0;
     ec6:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
     eca:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
     ece:	f04f 0a00 	mov.w	sl, #0
}
     ed2:	e019      	b.n	f08 <CONFIG_ISR_STACK_SIZE+0x708>
		*(signed char *)dp = (signed char)count;
     ed4:	7014      	strb	r4, [r2, #0]
		break;
     ed6:	e7f6      	b.n	ec6 <CONFIG_ISR_STACK_SIZE+0x6c6>
		*(short *)dp = (short)count;
     ed8:	8014      	strh	r4, [r2, #0]
		break;
     eda:	e7f4      	b.n	ec6 <CONFIG_ISR_STACK_SIZE+0x6c6>
		*(long *)dp = (long)count;
     edc:	6014      	str	r4, [r2, #0]
		break;
     ede:	e7f2      	b.n	ec6 <CONFIG_ISR_STACK_SIZE+0x6c6>
		*(long long *)dp = (long long)count;
     ee0:	4620      	mov	r0, r4
     ee2:	17e1      	asrs	r1, r4, #31
     ee4:	e9c2 0100 	strd	r0, r1, [r2]
		break;
     ee8:	e7ed      	b.n	ec6 <CONFIG_ISR_STACK_SIZE+0x6c6>
		*(intmax_t *)dp = (intmax_t)count;
     eea:	4620      	mov	r0, r4
     eec:	17e1      	asrs	r1, r4, #31
     eee:	e9c2 0100 	strd	r0, r1, [r2]
		break;
     ef2:	e7e8      	b.n	ec6 <CONFIG_ISR_STACK_SIZE+0x6c6>
		*(size_t *)dp = (size_t)count;
     ef4:	6014      	str	r4, [r2, #0]
		break;
     ef6:	e7e6      	b.n	ec6 <CONFIG_ISR_STACK_SIZE+0x6c6>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     ef8:	6014      	str	r4, [r2, #0]
		break;
     efa:	e7e4      	b.n	ec6 <CONFIG_ISR_STACK_SIZE+0x6c6>
		switch (conv->specifier) {
     efc:	f8dd 9008 	ldr.w	r9, [sp, #8]
     f00:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
     f04:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
     f08:	f1ba 0f00 	cmp.w	sl, #0
     f0c:	f000 808e 	beq.w	102c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2c>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
     f10:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
     f14:	f1b9 0f00 	cmp.w	r9, #0
     f18:	d000      	beq.n	f1c <CONFIG_ISR_STACK_SIZE+0x71c>
			nj_len += 1U;
     f1a:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
     f1c:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
     f20:	f011 0f10 	tst.w	r1, #16
     f24:	d026      	beq.n	f74 <CONFIG_ISR_STACK_SIZE+0x774>
			nj_len += 2U;
     f26:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
     f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f2a:	4413      	add	r3, r2
		if (conv->pad_fp) {
     f2c:	f011 0f40 	tst.w	r1, #64	; 0x40
     f30:	d001      	beq.n	f36 <CONFIG_ISR_STACK_SIZE+0x736>
			nj_len += conv->pad0_pre_exp;
     f32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     f34:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
     f36:	2f00      	cmp	r7, #0
     f38:	dd32      	ble.n	fa0 <CONFIG_ISR_STACK_SIZE+0x7a0>
			width -= (int)nj_len;
     f3a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
     f3c:	f89d 3020 	ldrb.w	r3, [sp, #32]
     f40:	f013 0f04 	tst.w	r3, #4
     f44:	d12c      	bne.n	fa0 <CONFIG_ISR_STACK_SIZE+0x7a0>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
     f46:	f013 0f40 	tst.w	r3, #64	; 0x40
     f4a:	d018      	beq.n	f7e <CONFIG_ISR_STACK_SIZE+0x77e>
					if (sign != 0) {
     f4c:	f1b9 0f00 	cmp.w	r9, #0
     f50:	d018      	beq.n	f84 <CONFIG_ISR_STACK_SIZE+0x784>
						OUTC(sign);
     f52:	4629      	mov	r1, r5
     f54:	4648      	mov	r0, r9
     f56:	47b0      	blx	r6
     f58:	2800      	cmp	r0, #0
     f5a:	db6b      	blt.n	1034 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x34>
     f5c:	3401      	adds	r4, #1
						sign = 0;
     f5e:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
     f62:	2330      	movs	r3, #48	; 0x30
     f64:	9302      	str	r3, [sp, #8]
     f66:	e00f      	b.n	f88 <CONFIG_ISR_STACK_SIZE+0x788>
		const char *bpe = buf + sizeof(buf);
     f68:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
     f6c:	e7cc      	b.n	f08 <CONFIG_ISR_STACK_SIZE+0x708>
     f6e:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
     f72:	e7c9      	b.n	f08 <CONFIG_ISR_STACK_SIZE+0x708>
		} else if (conv->altform_0) {
     f74:	f011 0f08 	tst.w	r1, #8
     f78:	d0d6      	beq.n	f28 <CONFIG_ISR_STACK_SIZE+0x728>
			nj_len += 1U;
     f7a:	3201      	adds	r2, #1
     f7c:	e7d4      	b.n	f28 <CONFIG_ISR_STACK_SIZE+0x728>
				char pad = ' ';
     f7e:	2320      	movs	r3, #32
     f80:	9302      	str	r3, [sp, #8]
     f82:	e001      	b.n	f88 <CONFIG_ISR_STACK_SIZE+0x788>
					pad = '0';
     f84:	2330      	movs	r3, #48	; 0x30
     f86:	9302      	str	r3, [sp, #8]
     f88:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
     f8a:	1e5f      	subs	r7, r3, #1
     f8c:	2b00      	cmp	r3, #0
     f8e:	dd07      	ble.n	fa0 <CONFIG_ISR_STACK_SIZE+0x7a0>
					OUTC(pad);
     f90:	4629      	mov	r1, r5
     f92:	9802      	ldr	r0, [sp, #8]
     f94:	47b0      	blx	r6
     f96:	2800      	cmp	r0, #0
     f98:	db4c      	blt.n	1034 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x34>
     f9a:	3401      	adds	r4, #1
				while (width-- > 0) {
     f9c:	463b      	mov	r3, r7
     f9e:	e7f4      	b.n	f8a <CONFIG_ISR_STACK_SIZE+0x78a>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
     fa0:	f1b9 0f00 	cmp.w	r9, #0
     fa4:	d005      	beq.n	fb2 <CONFIG_ISR_STACK_SIZE+0x7b2>
			OUTC(sign);
     fa6:	4629      	mov	r1, r5
     fa8:	4648      	mov	r0, r9
     faa:	47b0      	blx	r6
     fac:	2800      	cmp	r0, #0
     fae:	db41      	blt.n	1034 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x34>
     fb0:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
     fb2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     fb6:	f3c3 1200 	ubfx	r2, r3, #4, #1
     fba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     fbe:	4313      	orrs	r3, r2
     fc0:	d005      	beq.n	fce <CONFIG_ISR_STACK_SIZE+0x7ce>
				OUTC('0');
     fc2:	4629      	mov	r1, r5
     fc4:	2030      	movs	r0, #48	; 0x30
     fc6:	47b0      	blx	r6
     fc8:	2800      	cmp	r0, #0
     fca:	db33      	blt.n	1034 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x34>
     fcc:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
     fce:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     fd2:	f013 0f10 	tst.w	r3, #16
     fd6:	d006      	beq.n	fe6 <CONFIG_ISR_STACK_SIZE+0x7e6>
				OUTC(conv->specifier);
     fd8:	4629      	mov	r1, r5
     fda:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
     fde:	47b0      	blx	r6
     fe0:	2800      	cmp	r0, #0
     fe2:	db27      	blt.n	1034 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x34>
     fe4:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
     fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
     fe8:	f103 39ff 	add.w	r9, r3, #4294967295
     fec:	2b00      	cmp	r3, #0
     fee:	dd07      	ble.n	1000 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE>
				OUTC('0');
     ff0:	4629      	mov	r1, r5
     ff2:	2030      	movs	r0, #48	; 0x30
     ff4:	47b0      	blx	r6
     ff6:	2800      	cmp	r0, #0
     ff8:	db1c      	blt.n	1034 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x34>
     ffa:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
     ffc:	464b      	mov	r3, r9
     ffe:	e7f3      	b.n	fe8 <CONFIG_ISR_STACK_SIZE+0x7e8>
			}

			OUTS(bps, bpe);
    1000:	465b      	mov	r3, fp
    1002:	4652      	mov	r2, sl
    1004:	4629      	mov	r1, r5
    1006:	4630      	mov	r0, r6
    1008:	f009 f8f9 	bl	a1fe <outs>
    100c:	2800      	cmp	r0, #0
    100e:	db11      	blt.n	1034 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x34>
    1010:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    1012:	2f00      	cmp	r7, #0
    1014:	dd07      	ble.n	1026 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x26>
			OUTC(' ');
    1016:	4629      	mov	r1, r5
    1018:	2020      	movs	r0, #32
    101a:	47b0      	blx	r6
    101c:	2800      	cmp	r0, #0
    101e:	db09      	blt.n	1034 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x34>
    1020:	3401      	adds	r4, #1
			--width;
    1022:	3f01      	subs	r7, #1
    1024:	e7f5      	b.n	1012 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x12>
		fp = extract_conversion(conv, sp);
    1026:	46c2      	mov	sl, r8
    1028:	f7ff bb28 	b.w	67c <cbvprintf+0x10>
    102c:	46c2      	mov	sl, r8
    102e:	f7ff bb25 	b.w	67c <cbvprintf+0x10>
		}
	}

	return count;
    1032:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    1034:	b013      	add	sp, #76	; 0x4c
    1036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    103a:	bf00      	nop
    103c:	0000c445 	.word	0x0000c445

00001040 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1040:	b508      	push	{r3, lr}
    1042:	f04f 0220 	mov.w	r2, #32
    1046:	f3ef 8311 	mrs	r3, BASEPRI
    104a:	f382 8812 	msr	BASEPRI_MAX, r2
    104e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1052:	f001 fe4b 	bl	2cec <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1056:	4803      	ldr	r0, [pc, #12]	; (1064 <sys_reboot+0x24>)
    1058:	f008 fb0e 	bl	9678 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    105c:	f001 fbae 	bl	27bc <arch_cpu_idle>
    1060:	e7fc      	b.n	105c <sys_reboot+0x1c>
    1062:	bf00      	nop
    1064:	0000c448 	.word	0x0000c448

00001068 <nordicsemi_nrf53_init>:

#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf53_init(const struct device *arg)
{
    1068:	b410      	push	{r4}
    106a:	f04f 0320 	mov.w	r3, #32
    106e:	f3ef 8411 	mrs	r4, BASEPRI
    1072:	f383 8812 	msr	BASEPRI_MAX, r3
    1076:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    107a:	2101      	movs	r1, #1
    107c:	4b12      	ldr	r3, [pc, #72]	; (10c8 <nordicsemi_nrf53_init+0x60>)
    107e:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    1082:	4a12      	ldr	r2, [pc, #72]	; (10cc <nordicsemi_nrf53_init+0x64>)
    1084:	2302      	movs	r3, #2
    1086:	f8c2 36d0 	str.w	r3, [r2, #1744]	; 0x6d0

#if defined(GPIO_PIN_CNF_MCUSEL_Msk)
NRF_STATIC_INLINE void nrf_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_mcusel_t mcu)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    108a:	4811      	ldr	r0, [pc, #68]	; (10d0 <nordicsemi_nrf53_init+0x68>)
    108c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    1090:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    1094:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    1098:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    109c:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
    10a0:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    10a4:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    10a8:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    10ac:	f8c2 1704 	str.w	r1, [r2, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    10b0:	f8c2 1904 	str.w	r1, [r2, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    10b4:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
	__asm__ volatile(
    10b8:	f384 8811 	msr	BASEPRI, r4
    10bc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    10c0:	2000      	movs	r0, #0
    10c2:	bc10      	pop	{r4}
    10c4:	4770      	bx	lr
    10c6:	bf00      	nop
    10c8:	50001000 	.word	0x50001000
    10cc:	50004000 	.word	0x50004000
    10d0:	50842500 	.word	0x50842500

000010d4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    10d4:	b170      	cbz	r0, 10f4 <arch_busy_wait+0x20>

void arch_busy_wait(uint32_t time_us)
{
    10d6:	b508      	push	{r3, lr}
    10d8:	4602      	mov	r2, r0

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    10da:	4b07      	ldr	r3, [pc, #28]	; (10f8 <arch_busy_wait+0x24>)
    10dc:	681b      	ldr	r3, [r3, #0]
    10de:	4807      	ldr	r0, [pc, #28]	; (10fc <arch_busy_wait+0x28>)
    10e0:	fba0 1303 	umull	r1, r3, r0, r3
    10e4:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
    10e6:	fb03 f002 	mul.w	r0, r3, r2
    10ea:	4b05      	ldr	r3, [pc, #20]	; (1100 <arch_busy_wait+0x2c>)
    10ec:	f043 0301 	orr.w	r3, r3, #1
    10f0:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    10f2:	bd08      	pop	{r3, pc}
    10f4:	4770      	bx	lr
    10f6:	bf00      	nop
    10f8:	2000012c 	.word	0x2000012c
    10fc:	431bde83 	.word	0x431bde83
    1100:	0000c420 	.word	0x0000c420

00001104 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    1104:	b084      	sub	sp, #16
    1106:	ab04      	add	r3, sp, #16
    1108:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    110c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    1110:	2b06      	cmp	r3, #6
    1112:	d001      	beq.n	1118 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    1114:	b004      	add	sp, #16
    1116:	4770      	bx	lr
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    1118:	4b03      	ldr	r3, [pc, #12]	; (1128 <pm_power_state_set+0x24>)
    111a:	2201      	movs	r2, #1
    111c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1120:	f3bf 8f4f 	dsb	sy
        __WFE();
    1124:	bf20      	wfe
    while (true)
    1126:	e7fd      	b.n	1124 <pm_power_state_set+0x20>
    1128:	50004000 	.word	0x50004000

0000112c <usb_set_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
}

static bool usb_set_alt_setting(uint8_t iface, uint8_t alt_setting)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    112c:	2807      	cmp	r0, #7
    112e:	d901      	bls.n	1134 <usb_set_alt_setting+0x8>
		usb_dev.alt_setting[iface] = alt_setting;
		return true;
	}

	return false;
    1130:	2000      	movs	r0, #0
}
    1132:	4770      	bx	lr
		usb_dev.alt_setting[iface] = alt_setting;
    1134:	4b02      	ldr	r3, [pc, #8]	; (1140 <usb_set_alt_setting+0x14>)
    1136:	4418      	add	r0, r3
    1138:	f880 10bb 	strb.w	r1, [r0, #187]	; 0xbb
		return true;
    113c:	2001      	movs	r0, #1
    113e:	4770      	bx	lr
    1140:	200007a8 	.word	0x200007a8

00001144 <usb_get_alt_setting>:

static uint8_t usb_get_alt_setting(uint8_t iface)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    1144:	2807      	cmp	r0, #7
    1146:	d901      	bls.n	114c <usb_get_alt_setting+0x8>
		return usb_dev.alt_setting[iface];
	}

	return 0;
    1148:	2000      	movs	r0, #0
}
    114a:	4770      	bx	lr
		return usb_dev.alt_setting[iface];
    114c:	4b02      	ldr	r3, [pc, #8]	; (1158 <usb_get_alt_setting+0x14>)
    114e:	4418      	add	r0, r3
    1150:	f890 00bb 	ldrb.w	r0, [r0, #187]	; 0xbb
    1154:	4770      	bx	lr
    1156:	bf00      	nop
    1158:	200007a8 	.word	0x200007a8

0000115c <usb_handle_request>:
 *
 * @return true if the request was handles successfully
 */
static bool usb_handle_request(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
    115c:	b510      	push	{r4, lr}
	uint32_t type = setup->RequestType.type;
    115e:	7803      	ldrb	r3, [r0, #0]
    1160:	f3c3 1341 	ubfx	r3, r3, #5, #2
	if (type >= MAX_NUM_REQ_HANDLERS) {
		LOG_DBG("Error Incorrect iType %d", type);
		return false;
	}

	handler = usb_dev.req_handlers[type];
    1164:	330a      	adds	r3, #10
    1166:	4c06      	ldr	r4, [pc, #24]	; (1180 <usb_handle_request+0x24>)
    1168:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	if (handler == NULL) {
    116c:	b123      	cbz	r3, 1178 <usb_handle_request+0x1c>
		LOG_DBG("No handler for reqtype %d", type);
		return false;
	}

	if ((*handler)(setup, len, data) < 0) {
    116e:	4798      	blx	r3
    1170:	2800      	cmp	r0, #0
    1172:	db03      	blt.n	117c <usb_handle_request+0x20>
		LOG_DBG("Handler Error %d", type);
		usb_print_setup(setup);
		return false;
	}

	return true;
    1174:	2001      	movs	r0, #1
}
    1176:	bd10      	pop	{r4, pc}
		return false;
    1178:	2000      	movs	r0, #0
    117a:	e7fc      	b.n	1176 <usb_handle_request+0x1a>
		return false;
    117c:	2000      	movs	r0, #0
    117e:	e7fa      	b.n	1176 <usb_handle_request+0x1a>
    1180:	200007a8 	.word	0x200007a8

00001184 <usb_register_request_handler>:
 * @return N/A
 */
static void usb_register_request_handler(int32_t type,
					 usb_request_handler handler)
{
	usb_dev.req_handlers[type] = handler;
    1184:	300a      	adds	r0, #10
    1186:	4b02      	ldr	r3, [pc, #8]	; (1190 <usb_register_request_handler+0xc>)
    1188:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    118c:	4770      	bx	lr
    118e:	bf00      	nop
    1190:	200007a8 	.word	0x200007a8

00001194 <usb_register_descriptors>:
 *
 * @param [in] usb_descriptors The descriptor byte array
 */
static void usb_register_descriptors(const uint8_t *usb_descriptors)
{
	usb_dev.descriptors = usb_descriptors;
    1194:	4b01      	ldr	r3, [pc, #4]	; (119c <usb_register_descriptors+0x8>)
    1196:	6258      	str	r0, [r3, #36]	; 0x24
}
    1198:	4770      	bx	lr
    119a:	bf00      	nop
    119c:	200007a8 	.word	0x200007a8

000011a0 <usb_get_status>:

static bool usb_get_status(struct usb_setup_packet *setup,
			   int32_t *len, uint8_t **data_buf)
{
	uint8_t *data = *data_buf;
    11a0:	6813      	ldr	r3, [r2, #0]

	LOG_DBG("Get Status request");
	data[0] = 0U;
	data[1] = 0U;
    11a2:	2200      	movs	r2, #0
    11a4:	705a      	strb	r2, [r3, #1]

	if (IS_ENABLED(CONFIG_USB_SELF_POWERED)) {
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    11a6:	2201      	movs	r2, #1
    11a8:	701a      	strb	r2, [r3, #0]
	}

	if (IS_ENABLED(CONFIG_USB_DEVICE_REMOTE_WAKEUP)) {
		data[0] |= (usb_dev.remote_wakeup ?
    11aa:	4a07      	ldr	r2, [pc, #28]	; (11c8 <usb_get_status+0x28>)
    11ac:	f892 20c3 	ldrb.w	r2, [r2, #195]	; 0xc3
    11b0:	b13a      	cbz	r2, 11c2 <usb_get_status+0x22>
    11b2:	2202      	movs	r2, #2
    11b4:	f042 0201 	orr.w	r2, r2, #1
    11b8:	701a      	strb	r2, [r3, #0]
			    USB_GET_STATUS_REMOTE_WAKEUP : 0);
	}

	*len = 2;
    11ba:	2302      	movs	r3, #2
    11bc:	600b      	str	r3, [r1, #0]

	return true;
}
    11be:	2001      	movs	r0, #1
    11c0:	4770      	bx	lr
		data[0] |= (usb_dev.remote_wakeup ?
    11c2:	2200      	movs	r2, #0
    11c4:	e7f6      	b.n	11b4 <usb_get_status+0x14>
    11c6:	bf00      	nop
    11c8:	200007a8 	.word	0x200007a8

000011cc <usb_get_descriptor>:
 *
 * @return true if the descriptor was found, false otherwise
 */
static bool usb_get_descriptor(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
    11cc:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t *p = NULL;
	uint32_t cur_index = 0U;
	bool found = false;

	LOG_DBG("Get Descriptor request");
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    11ce:	8847      	ldrh	r7, [r0, #2]
    11d0:	0a3d      	lsrs	r5, r7, #8

	/*
	 * Invalid types of descriptors,
	 * see USB Spec. Revision 2.0, 9.4.3 Get Descriptor
	 */
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    11d2:	1f2b      	subs	r3, r5, #4
    11d4:	b2db      	uxtb	r3, r3
    11d6:	2b01      	cmp	r3, #1
    11d8:	d91e      	bls.n	1218 <usb_get_descriptor+0x4c>
    11da:	b2ff      	uxtb	r7, r7
    11dc:	2d07      	cmp	r5, #7
    11de:	d81e      	bhi.n	121e <usb_get_descriptor+0x52>
	    (type > USB_DESC_OTHER_SPEED)) {
		return false;
	}

	p = (uint8_t *)usb_dev.descriptors;
    11e0:	4b10      	ldr	r3, [pc, #64]	; (1224 <usb_get_descriptor+0x58>)
    11e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	cur_index = 0U;
    11e4:	2600      	movs	r6, #0

	while (p[DESC_bLength] != 0U) {
    11e6:	e000      	b.n	11ea <usb_get_descriptor+0x1e>
				break;
			}
			cur_index++;
		}
		/* skip to next descriptor */
		p += p[DESC_bLength];
    11e8:	4403      	add	r3, r0
	while (p[DESC_bLength] != 0U) {
    11ea:	7818      	ldrb	r0, [r3, #0]
    11ec:	b138      	cbz	r0, 11fe <usb_get_descriptor+0x32>
		if (p[DESC_bDescriptorType] == type) {
    11ee:	785c      	ldrb	r4, [r3, #1]
    11f0:	42ac      	cmp	r4, r5
    11f2:	d1f9      	bne.n	11e8 <usb_get_descriptor+0x1c>
			if (cur_index == index) {
    11f4:	42b7      	cmp	r7, r6
    11f6:	d001      	beq.n	11fc <usb_get_descriptor+0x30>
			cur_index++;
    11f8:	3601      	adds	r6, #1
    11fa:	e7f5      	b.n	11e8 <usb_get_descriptor+0x1c>
				found = true;
    11fc:	2001      	movs	r0, #1
	}

	if (found) {
    11fe:	b160      	cbz	r0, 121a <usb_get_descriptor+0x4e>
		/* set data pointer */
		*data = p;
    1200:	6013      	str	r3, [r2, #0]
		/* get length from structure */
		if (type == USB_DESC_CONFIGURATION) {
    1202:	2d02      	cmp	r5, #2
    1204:	d002      	beq.n	120c <usb_get_descriptor+0x40>
			 */
			*len = (p[CONF_DESC_wTotalLength]) |
			    (p[CONF_DESC_wTotalLength + 1] << 8);
		} else {
			/* normally length is at offset 0 */
			*len = p[DESC_bLength];
    1206:	781b      	ldrb	r3, [r3, #0]
    1208:	600b      	str	r3, [r1, #0]
    120a:	e006      	b.n	121a <usb_get_descriptor+0x4e>
			*len = (p[CONF_DESC_wTotalLength]) |
    120c:	789a      	ldrb	r2, [r3, #2]
			    (p[CONF_DESC_wTotalLength + 1] << 8);
    120e:	78db      	ldrb	r3, [r3, #3]
			*len = (p[CONF_DESC_wTotalLength]) |
    1210:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    1214:	600b      	str	r3, [r1, #0]
    1216:	e000      	b.n	121a <usb_get_descriptor+0x4e>
		return false;
    1218:	2000      	movs	r0, #0
	} else {
		/* nothing found */
		LOG_DBG("Desc %x not found!", setup->wValue);
	}
	return found;
}
    121a:	bcf0      	pop	{r4, r5, r6, r7}
    121c:	4770      	bx	lr
		return false;
    121e:	2000      	movs	r0, #0
    1220:	e7fb      	b.n	121a <usb_get_descriptor+0x4e>
    1222:	bf00      	nop
    1224:	200007a8 	.word	0x200007a8

00001228 <usb_get_interface>:
	return ret;
}

static bool usb_get_interface(struct usb_setup_packet *setup,
			      int32_t *len, uint8_t **data_buf)
{
    1228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    122a:	4684      	mov	ip, r0
    122c:	460e      	mov	r6, r1
	const uint8_t *p = usb_dev.descriptors;
    122e:	4b0c      	ldr	r3, [pc, #48]	; (1260 <usb_get_interface+0x38>)
    1230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	uint8_t *data = *data_buf;
    1232:	6817      	ldr	r7, [r2, #0]
	uint8_t cur_iface;

	while (p[DESC_bLength] != 0U) {
    1234:	e000      	b.n	1238 <usb_get_interface+0x10>
				return true;
			}
		}

		/* skip to next descriptor */
		p += p[DESC_bLength];
    1236:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
    1238:	781a      	ldrb	r2, [r3, #0]
    123a:	b172      	cbz	r2, 125a <usb_get_interface+0x32>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    123c:	785c      	ldrb	r4, [r3, #1]
    123e:	2c04      	cmp	r4, #4
    1240:	d1f9      	bne.n	1236 <usb_get_interface+0xe>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    1242:	7898      	ldrb	r0, [r3, #2]
			if (cur_iface == setup->wIndex) {
    1244:	b285      	uxth	r5, r0
    1246:	f8bc 4004 	ldrh.w	r4, [ip, #4]
    124a:	42a5      	cmp	r5, r4
    124c:	d1f3      	bne.n	1236 <usb_get_interface+0xe>
				data[0] = usb_get_alt_setting(cur_iface);
    124e:	f7ff ff79 	bl	1144 <usb_get_alt_setting>
    1252:	7038      	strb	r0, [r7, #0]
				*len = 1;
    1254:	2001      	movs	r0, #1
    1256:	6030      	str	r0, [r6, #0]
				return true;
    1258:	e000      	b.n	125c <usb_get_interface+0x34>
	}

	return false;
    125a:	2000      	movs	r0, #0
}
    125c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    125e:	bf00      	nop
    1260:	200007a8 	.word	0x200007a8

00001264 <is_device_configured>:
 *
 * @return true if Configured, false otherwise.
 */
static bool is_device_configured(void)
{
	return (usb_dev.configuration != 0);
    1264:	4b03      	ldr	r3, [pc, #12]	; (1274 <is_device_configured+0x10>)
    1266:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
}
    126a:	3800      	subs	r0, #0
    126c:	bf18      	it	ne
    126e:	2001      	movne	r0, #1
    1270:	4770      	bx	lr
    1272:	bf00      	nop
    1274:	200007a8 	.word	0x200007a8

00001278 <is_interface_valid>:
 *
 * @return true if interface exists - valid
 */
static bool is_interface_valid(uint8_t interface)
{
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    1278:	4b07      	ldr	r3, [pc, #28]	; (1298 <is_interface_valid+0x20>)
    127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	const struct usb_cfg_descriptor *cfg_descr;

	/* Search through descriptor for matching interface */
	while (p[DESC_bLength] != 0U) {
    127c:	e000      	b.n	1280 <is_interface_valid+0x8>
			cfg_descr = (const struct usb_cfg_descriptor *)p;
			if (interface < cfg_descr->bNumInterfaces) {
				return true;
			}
		}
		p += p[DESC_bLength];
    127e:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
    1280:	781a      	ldrb	r2, [r3, #0]
    1282:	b13a      	cbz	r2, 1294 <is_interface_valid+0x1c>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    1284:	7859      	ldrb	r1, [r3, #1]
    1286:	2902      	cmp	r1, #2
    1288:	d1f9      	bne.n	127e <is_interface_valid+0x6>
			if (interface < cfg_descr->bNumInterfaces) {
    128a:	7919      	ldrb	r1, [r3, #4]
    128c:	4281      	cmp	r1, r0
    128e:	d9f6      	bls.n	127e <is_interface_valid+0x6>
				return true;
    1290:	2001      	movs	r0, #1
	}

	return false;
}
    1292:	4770      	bx	lr
	return false;
    1294:	2000      	movs	r0, #0
    1296:	4770      	bx	lr
    1298:	200007a8 	.word	0x200007a8

0000129c <is_ep_valid>:
static bool is_ep_valid(uint8_t ep)
{
	const struct usb_ep_cfg_data *ep_data;

	/* Check if its Endpoint 0 */
	if (USB_EP_GET_IDX(ep) == 0) {
    129c:	f030 0380 	bics.w	r3, r0, #128	; 0x80
    12a0:	d018      	beq.n	12d4 <is_ep_valid+0x38>
		return true;
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    12a2:	4910      	ldr	r1, [pc, #64]	; (12e4 <is_ep_valid+0x48>)
    12a4:	4b10      	ldr	r3, [pc, #64]	; (12e8 <is_ep_valid+0x4c>)
    12a6:	4299      	cmp	r1, r3
    12a8:	d219      	bcs.n	12de <is_ep_valid+0x42>
{
    12aa:	b410      	push	{r4}
    12ac:	e003      	b.n	12b6 <is_ep_valid+0x1a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    12ae:	3124      	adds	r1, #36	; 0x24
    12b0:	4b0d      	ldr	r3, [pc, #52]	; (12e8 <is_ep_valid+0x4c>)
    12b2:	4299      	cmp	r1, r3
    12b4:	d20c      	bcs.n	12d0 <is_ep_valid+0x34>
		ep_data = cfg_data->endpoint;
    12b6:	6a0c      	ldr	r4, [r1, #32]

		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    12b8:	2300      	movs	r3, #0
    12ba:	7f0a      	ldrb	r2, [r1, #28]
    12bc:	429a      	cmp	r2, r3
    12be:	d9f6      	bls.n	12ae <is_ep_valid+0x12>
			if (ep_data[n].ep_addr == ep) {
    12c0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    12c4:	7912      	ldrb	r2, [r2, #4]
    12c6:	4282      	cmp	r2, r0
    12c8:	d006      	beq.n	12d8 <is_ep_valid+0x3c>
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    12ca:	3301      	adds	r3, #1
    12cc:	b2db      	uxtb	r3, r3
    12ce:	e7f4      	b.n	12ba <is_ep_valid+0x1e>
				return true;
			}
		}
	}

	return false;
    12d0:	2000      	movs	r0, #0
    12d2:	e002      	b.n	12da <is_ep_valid+0x3e>
		return true;
    12d4:	2001      	movs	r0, #1
    12d6:	4770      	bx	lr
				return true;
    12d8:	2001      	movs	r0, #1
}
    12da:	bc10      	pop	{r4}
    12dc:	4770      	bx	lr
	return false;
    12de:	2000      	movs	r0, #0
}
    12e0:	4770      	bx	lr
    12e2:	bf00      	nop
    12e4:	20000388 	.word	0x20000388
    12e8:	200003ac 	.word	0x200003ac

000012ec <usb_register_custom_req_handler>:
 *
 * @param [in] handler Callback function pointer
 */
static void usb_register_custom_req_handler(usb_request_handler handler)
{
	usb_dev.custom_req_handler = handler;
    12ec:	4b01      	ldr	r3, [pc, #4]	; (12f4 <usb_register_custom_req_handler+0x8>)
    12ee:	6198      	str	r0, [r3, #24]
}
    12f0:	4770      	bx	lr
    12f2:	bf00      	nop
    12f4:	200007a8 	.word	0x200007a8

000012f8 <usb_register_status_callback>:
 *
 * @param [in] cb Callback function pointer
 */
static void usb_register_status_callback(usb_dc_status_callback cb)
{
	usb_dev.status_callback = cb;
    12f8:	4b01      	ldr	r3, [pc, #4]	; (1300 <usb_register_status_callback+0x8>)
    12fa:	61d8      	str	r0, [r3, #28]
}
    12fc:	4770      	bx	lr
    12fe:	bf00      	nop
    1300:	200007a8 	.word	0x200007a8

00001304 <foreach_ep>:

static int foreach_ep(int (* endpoint_callback)(const struct usb_ep_cfg_data *))
{
    1304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1306:	4606      	mov	r6, r0
	struct usb_ep_cfg_data *ep_data;

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1308:	4d0a      	ldr	r5, [pc, #40]	; (1334 <foreach_ep+0x30>)
    130a:	4b0b      	ldr	r3, [pc, #44]	; (1338 <foreach_ep+0x34>)
    130c:	429d      	cmp	r5, r3
    130e:	d20e      	bcs.n	132e <foreach_ep+0x2a>
		ep_data = cfg_data->endpoint;
    1310:	6a2f      	ldr	r7, [r5, #32]

		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1312:	2400      	movs	r4, #0
    1314:	7f2b      	ldrb	r3, [r5, #28]
    1316:	42a3      	cmp	r3, r4
    1318:	d907      	bls.n	132a <foreach_ep+0x26>
			int ret;

			ret = endpoint_callback(&ep_data[n]);
    131a:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
    131e:	47b0      	blx	r6
			if (ret < 0) {
    1320:	2800      	cmp	r0, #0
    1322:	db05      	blt.n	1330 <foreach_ep+0x2c>
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1324:	3401      	adds	r4, #1
    1326:	b2e4      	uxtb	r4, r4
    1328:	e7f4      	b.n	1314 <foreach_ep+0x10>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    132a:	3524      	adds	r5, #36	; 0x24
    132c:	e7ed      	b.n	130a <foreach_ep+0x6>
				return ret;
			}
		}
	}

	return 0;
    132e:	2000      	movs	r0, #0
}
    1330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1332:	bf00      	nop
    1334:	20000388 	.word	0x20000388
    1338:	200003ac 	.word	0x200003ac

0000133c <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    133c:	b570      	push	{r4, r5, r6, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    133e:	4b0b      	ldr	r3, [pc, #44]	; (136c <class_handler+0x30>)
    1340:	e000      	b.n	1344 <class_handler+0x8>
    1342:	3324      	adds	r3, #36	; 0x24
    1344:	4c0a      	ldr	r4, [pc, #40]	; (1370 <class_handler+0x34>)
    1346:	42a3      	cmp	r3, r4
    1348:	d20d      	bcs.n	1366 <class_handler+0x2a>
		iface = &cfg_data->interface;
		if_descr = cfg_data->interface_descriptor;
    134a:	685c      	ldr	r4, [r3, #4]
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    134c:	4d09      	ldr	r5, [pc, #36]	; (1374 <class_handler+0x38>)
    134e:	6a6d      	ldr	r5, [r5, #36]	; 0x24
    1350:	42ac      	cmp	r4, r5
    1352:	d3f6      	bcc.n	1342 <class_handler+0x6>
			continue;
		}

		if (iface->class_handler &&
    1354:	691d      	ldr	r5, [r3, #16]
    1356:	2d00      	cmp	r5, #0
    1358:	d0f3      	beq.n	1342 <class_handler+0x6>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    135a:	78a6      	ldrb	r6, [r4, #2]
    135c:	7904      	ldrb	r4, [r0, #4]
		if (iface->class_handler &&
    135e:	42a6      	cmp	r6, r4
    1360:	d1ef      	bne.n	1342 <class_handler+0x6>
			return iface->class_handler(pSetup, len, data);
    1362:	47a8      	blx	r5
    1364:	e001      	b.n	136a <class_handler+0x2e>
		}
	}

	return -ENOTSUP;
    1366:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    136a:	bd70      	pop	{r4, r5, r6, pc}
    136c:	20000388 	.word	0x20000388
    1370:	200003ac 	.word	0x200003ac
    1374:	200007a8 	.word	0x200007a8

00001378 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    1378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    137c:	4606      	mov	r6, r0
    137e:	460f      	mov	r7, r1
    1380:	4690      	mov	r8, r2
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1382:	4c11      	ldr	r4, [pc, #68]	; (13c8 <custom_handler+0x50>)
    1384:	e005      	b.n	1392 <custom_handler+0x1a>
		if (iface->custom_handler == NULL) {
			continue;
		}

		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
			return iface->custom_handler(pSetup, len, data);
    1386:	4642      	mov	r2, r8
    1388:	4639      	mov	r1, r7
    138a:	4630      	mov	r0, r6
    138c:	47a8      	blx	r5
    138e:	e019      	b.n	13c4 <custom_handler+0x4c>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1390:	3424      	adds	r4, #36	; 0x24
    1392:	4b0e      	ldr	r3, [pc, #56]	; (13cc <custom_handler+0x54>)
    1394:	429c      	cmp	r4, r3
    1396:	d213      	bcs.n	13c0 <custom_handler+0x48>
		if_descr = cfg_data->interface_descriptor;
    1398:	6863      	ldr	r3, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    139a:	4d0d      	ldr	r5, [pc, #52]	; (13d0 <custom_handler+0x58>)
    139c:	6a6d      	ldr	r5, [r5, #36]	; 0x24
    139e:	42ab      	cmp	r3, r5
    13a0:	d3f6      	bcc.n	1390 <custom_handler+0x18>
		if (iface->custom_handler == NULL) {
    13a2:	69a5      	ldr	r5, [r4, #24]
    13a4:	2d00      	cmp	r5, #0
    13a6:	d0f3      	beq.n	1390 <custom_handler+0x18>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    13a8:	7899      	ldrb	r1, [r3, #2]
    13aa:	7932      	ldrb	r2, [r6, #4]
    13ac:	4291      	cmp	r1, r2
    13ae:	d0ea      	beq.n	1386 <custom_handler+0xe>
			 * the first interface, but the request may be for
			 * subsequent ones, so forward each request to audio.
			 * The class does not actively engage in request
			 * handling and therefore we can ignore return value.
			 */
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    13b0:	795b      	ldrb	r3, [r3, #5]
    13b2:	2b01      	cmp	r3, #1
    13b4:	d1ec      	bne.n	1390 <custom_handler+0x18>
				(void)iface->custom_handler(pSetup, len, data);
    13b6:	4642      	mov	r2, r8
    13b8:	4639      	mov	r1, r7
    13ba:	4630      	mov	r0, r6
    13bc:	47a8      	blx	r5
    13be:	e7e7      	b.n	1390 <custom_handler+0x18>
			}
		}
	}

	return -ENOTSUP;
    13c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    13c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    13c8:	20000388 	.word	0x20000388
    13cc:	200003ac 	.word	0x200003ac
    13d0:	200007a8 	.word	0x200007a8

000013d4 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    13d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13d6:	4607      	mov	r7, r0
    13d8:	460e      	mov	r6, r1
    13da:	4615      	mov	r5, r2
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    13dc:	4c0a      	ldr	r4, [pc, #40]	; (1408 <vendor_handler+0x34>)
    13de:	e000      	b.n	13e2 <vendor_handler+0xe>
    13e0:	3424      	adds	r4, #36	; 0x24
    13e2:	4b0a      	ldr	r3, [pc, #40]	; (140c <vendor_handler+0x38>)
    13e4:	429c      	cmp	r4, r3
    13e6:	d20a      	bcs.n	13fe <vendor_handler+0x2a>
		iface = &cfg_data->interface;
		if (iface->vendor_handler) {
    13e8:	6963      	ldr	r3, [r4, #20]
    13ea:	2b00      	cmp	r3, #0
    13ec:	d0f8      	beq.n	13e0 <vendor_handler+0xc>
			if (!iface->vendor_handler(pSetup, len, data)) {
    13ee:	462a      	mov	r2, r5
    13f0:	4631      	mov	r1, r6
    13f2:	4638      	mov	r0, r7
    13f4:	4798      	blx	r3
    13f6:	4603      	mov	r3, r0
    13f8:	2800      	cmp	r0, #0
    13fa:	d1f1      	bne.n	13e0 <vendor_handler+0xc>
    13fc:	e001      	b.n	1402 <vendor_handler+0x2e>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    13fe:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    1402:	4618      	mov	r0, r3
    1404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1406:	bf00      	nop
    1408:	20000388 	.word	0x20000388
    140c:	200003ac 	.word	0x200003ac

00001410 <usb_halt_endpoint_req>:
{
    1410:	b570      	push	{r4, r5, r6, lr}
    1412:	b082      	sub	sp, #8
    1414:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    1416:	7904      	ldrb	r4, [r0, #4]
    1418:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!is_ep_valid(ep)) {
    141c:	4620      	mov	r0, r4
    141e:	f7ff ff3d 	bl	129c <is_ep_valid>
    1422:	4606      	mov	r6, r0
    1424:	b130      	cbz	r0, 1434 <usb_halt_endpoint_req+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    1426:	f034 0380 	bics.w	r3, r4, #128	; 0x80
    142a:	d006      	beq.n	143a <usb_halt_endpoint_req+0x2a>
    142c:	f7ff ff1a 	bl	1264 <is_device_configured>
    1430:	b918      	cbnz	r0, 143a <usb_halt_endpoint_req+0x2a>
	return false;
    1432:	4606      	mov	r6, r0
}
    1434:	4630      	mov	r0, r6
    1436:	b002      	add	sp, #8
    1438:	bd70      	pop	{r4, r5, r6, pc}
		if (halt) {
    143a:	b15d      	cbz	r5, 1454 <usb_halt_endpoint_req+0x44>
			usb_dc_ep_set_stall(ep);
    143c:	4620      	mov	r0, r4
    143e:	f002 fbe1 	bl	3c04 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    1442:	4b0a      	ldr	r3, [pc, #40]	; (146c <usb_halt_endpoint_req+0x5c>)
    1444:	69db      	ldr	r3, [r3, #28]
    1446:	2b00      	cmp	r3, #0
    1448:	d0f4      	beq.n	1434 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    144a:	f10d 0107 	add.w	r1, sp, #7
    144e:	2008      	movs	r0, #8
    1450:	4798      	blx	r3
    1452:	e7ef      	b.n	1434 <usb_halt_endpoint_req+0x24>
			usb_dc_ep_clear_stall(ep);
    1454:	4620      	mov	r0, r4
    1456:	f002 fc05 	bl	3c64 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    145a:	4b04      	ldr	r3, [pc, #16]	; (146c <usb_halt_endpoint_req+0x5c>)
    145c:	69db      	ldr	r3, [r3, #28]
    145e:	2b00      	cmp	r3, #0
    1460:	d0e8      	beq.n	1434 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    1462:	f10d 0107 	add.w	r1, sp, #7
    1466:	2009      	movs	r0, #9
    1468:	4798      	blx	r3
		return true;
    146a:	e7e3      	b.n	1434 <usb_halt_endpoint_req+0x24>
    146c:	200007a8 	.word	0x200007a8

00001470 <set_endpoint>:
{
    1470:	b500      	push	{lr}
    1472:	b083      	sub	sp, #12
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    1474:	7883      	ldrb	r3, [r0, #2]
    1476:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    147a:	8883      	ldrh	r3, [r0, #4]
    147c:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    1480:	78c3      	ldrb	r3, [r0, #3]
    1482:	f003 0303 	and.w	r3, r3, #3
    1486:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
    148a:	4668      	mov	r0, sp
    148c:	f002 fb92 	bl	3bb4 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    1490:	f110 0f78 	cmn.w	r0, #120	; 0x78
    1494:	d000      	beq.n	1498 <set_endpoint+0x28>
	} else if (ret) {
    1496:	b970      	cbnz	r0, 14b6 <set_endpoint+0x46>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    1498:	f89d 0000 	ldrb.w	r0, [sp]
    149c:	f002 fc2c 	bl	3cf8 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    14a0:	f110 0f78 	cmn.w	r0, #120	; 0x78
    14a4:	d000      	beq.n	14a8 <set_endpoint+0x38>
	} else if (ret) {
    14a6:	b940      	cbnz	r0, 14ba <set_endpoint+0x4a>
	usb_dev.configured = true;
    14a8:	2001      	movs	r0, #1
    14aa:	4b05      	ldr	r3, [pc, #20]	; (14c0 <set_endpoint+0x50>)
    14ac:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
}
    14b0:	b003      	add	sp, #12
    14b2:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
    14b6:	2000      	movs	r0, #0
    14b8:	e7fa      	b.n	14b0 <set_endpoint+0x40>
		return false;
    14ba:	2000      	movs	r0, #0
    14bc:	e7f8      	b.n	14b0 <set_endpoint+0x40>
    14be:	bf00      	nop
    14c0:	200007a8 	.word	0x200007a8

000014c4 <usb_reset_alt_setting>:
{
    14c4:	b508      	push	{r3, lr}
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    14c6:	2208      	movs	r2, #8
    14c8:	2100      	movs	r1, #0
    14ca:	4802      	ldr	r0, [pc, #8]	; (14d4 <usb_reset_alt_setting+0x10>)
    14cc:	f009 fb3f 	bl	ab4e <memset>
}
    14d0:	bd08      	pop	{r3, pc}
    14d2:	bf00      	nop
    14d4:	20000863 	.word	0x20000863

000014d8 <usb_set_configuration>:
{
    14d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    14dc:	4605      	mov	r5, r0
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    14de:	4b23      	ldr	r3, [pc, #140]	; (156c <usb_set_configuration+0x94>)
    14e0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	if (setup->wValue == 0U) {
    14e2:	8843      	ldrh	r3, [r0, #2]
    14e4:	b11b      	cbz	r3, 14ee <usb_set_configuration+0x16>
	bool found = false;
    14e6:	2700      	movs	r7, #0
	uint8_t cur_config = 0xFF;
    14e8:	26ff      	movs	r6, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    14ea:	46b0      	mov	r8, r6
    14ec:	e010      	b.n	1510 <usb_set_configuration+0x38>
		usb_reset_alt_setting();
    14ee:	f7ff ffe9 	bl	14c4 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    14f2:	886a      	ldrh	r2, [r5, #2]
    14f4:	4b1d      	ldr	r3, [pc, #116]	; (156c <usb_set_configuration+0x94>)
    14f6:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
    14fa:	69db      	ldr	r3, [r3, #28]
    14fc:	b113      	cbz	r3, 1504 <usb_set_configuration+0x2c>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    14fe:	491c      	ldr	r1, [pc, #112]	; (1570 <usb_set_configuration+0x98>)
    1500:	2003      	movs	r0, #3
    1502:	4798      	blx	r3
		return true;
    1504:	2701      	movs	r7, #1
    1506:	e020      	b.n	154a <usb_set_configuration+0x72>
			cur_alt_setting =
    1508:	f894 8003 	ldrb.w	r8, [r4, #3]
		p += p[DESC_bLength];
    150c:	7823      	ldrb	r3, [r4, #0]
    150e:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    1510:	7823      	ldrb	r3, [r4, #0]
    1512:	b1cb      	cbz	r3, 1548 <usb_set_configuration+0x70>
		switch (p[DESC_bDescriptorType]) {
    1514:	7863      	ldrb	r3, [r4, #1]
    1516:	2b04      	cmp	r3, #4
    1518:	d0f6      	beq.n	1508 <usb_set_configuration+0x30>
    151a:	2b05      	cmp	r3, #5
    151c:	d008      	beq.n	1530 <usb_set_configuration+0x58>
    151e:	2b02      	cmp	r3, #2
    1520:	d1f4      	bne.n	150c <usb_set_configuration+0x34>
			cur_config = p[CONF_DESC_bConfigurationValue];
    1522:	7966      	ldrb	r6, [r4, #5]
			if (cur_config == setup->wValue) {
    1524:	b2b2      	uxth	r2, r6
    1526:	886b      	ldrh	r3, [r5, #2]
    1528:	429a      	cmp	r2, r3
    152a:	d1ef      	bne.n	150c <usb_set_configuration+0x34>
				found = true;
    152c:	2701      	movs	r7, #1
    152e:	e7ed      	b.n	150c <usb_set_configuration+0x34>
			if ((cur_config != setup->wValue) ||
    1530:	b2b3      	uxth	r3, r6
    1532:	886a      	ldrh	r2, [r5, #2]
    1534:	4293      	cmp	r3, r2
    1536:	d1e9      	bne.n	150c <usb_set_configuration+0x34>
    1538:	f1b8 0f00 	cmp.w	r8, #0
    153c:	d1e6      	bne.n	150c <usb_set_configuration+0x34>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    153e:	4620      	mov	r0, r4
    1540:	f7ff ff96 	bl	1470 <set_endpoint>
    1544:	4607      	mov	r7, r0
			break;
    1546:	e7e1      	b.n	150c <usb_set_configuration+0x34>
	if (found) {
    1548:	b917      	cbnz	r7, 1550 <usb_set_configuration+0x78>
}
    154a:	4638      	mov	r0, r7
    154c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		usb_reset_alt_setting();
    1550:	f7ff ffb8 	bl	14c4 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    1554:	886a      	ldrh	r2, [r5, #2]
    1556:	4b05      	ldr	r3, [pc, #20]	; (156c <usb_set_configuration+0x94>)
    1558:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
    155c:	69db      	ldr	r3, [r3, #28]
    155e:	2b00      	cmp	r3, #0
    1560:	d0f3      	beq.n	154a <usb_set_configuration+0x72>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    1562:	4903      	ldr	r1, [pc, #12]	; (1570 <usb_set_configuration+0x98>)
    1564:	2003      	movs	r0, #3
    1566:	4798      	blx	r3
    1568:	e7ef      	b.n	154a <usb_set_configuration+0x72>
    156a:	bf00      	nop
    156c:	200007a8 	.word	0x200007a8
    1570:	20000862 	.word	0x20000862

00001574 <usb_handle_std_device_req>:
{
    1574:	b510      	push	{r4, lr}
	uint8_t *data = *data_buf;
    1576:	6814      	ldr	r4, [r2, #0]
	if (usb_reqtype_is_to_host(setup)) {
    1578:	f990 3000 	ldrsb.w	r3, [r0]
    157c:	2b00      	cmp	r3, #0
    157e:	db0a      	blt.n	1596 <usb_handle_std_device_req+0x22>
		switch (setup->bRequest) {
    1580:	7843      	ldrb	r3, [r0, #1]
    1582:	3b01      	subs	r3, #1
    1584:	2b08      	cmp	r3, #8
    1586:	d83a      	bhi.n	15fe <usb_handle_std_device_req+0x8a>
    1588:	e8df f003 	tbb	[pc, r3]
    158c:	392f3924 	.word	0x392f3924
    1590:	3939391a 	.word	0x3939391a
    1594:	21          	.byte	0x21
    1595:	00          	.byte	0x00
		switch (setup->bRequest) {
    1596:	7843      	ldrb	r3, [r0, #1]
    1598:	2b06      	cmp	r3, #6
    159a:	d007      	beq.n	15ac <usb_handle_std_device_req+0x38>
    159c:	2b08      	cmp	r3, #8
    159e:	d008      	beq.n	15b2 <usb_handle_std_device_req+0x3e>
    15a0:	b10b      	cbz	r3, 15a6 <usb_handle_std_device_req+0x32>
    15a2:	2000      	movs	r0, #0
}
    15a4:	bd10      	pop	{r4, pc}
			return usb_get_status(setup, len, data_buf);
    15a6:	f7ff fdfb 	bl	11a0 <usb_get_status>
    15aa:	e7fb      	b.n	15a4 <usb_handle_std_device_req+0x30>
			return usb_get_descriptor(setup, len, data_buf);
    15ac:	f7ff fe0e 	bl	11cc <usb_get_descriptor>
    15b0:	e7f8      	b.n	15a4 <usb_handle_std_device_req+0x30>
			data[0] = usb_dev.configuration;
    15b2:	4b14      	ldr	r3, [pc, #80]	; (1604 <usb_handle_std_device_req+0x90>)
    15b4:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
    15b8:	7023      	strb	r3, [r4, #0]
			*len = 1;
    15ba:	2001      	movs	r0, #1
    15bc:	6008      	str	r0, [r1, #0]
			return true;
    15be:	e7f1      	b.n	15a4 <usb_handle_std_device_req+0x30>
			return !usb_dc_set_address(setup->wValue);
    15c0:	7880      	ldrb	r0, [r0, #2]
    15c2:	f002 fae5 	bl	3b90 <usb_dc_set_address>
    15c6:	fab0 f080 	clz	r0, r0
    15ca:	0940      	lsrs	r0, r0, #5
    15cc:	e7ea      	b.n	15a4 <usb_handle_std_device_req+0x30>
			return usb_set_configuration(setup);
    15ce:	f7ff ff83 	bl	14d8 <usb_set_configuration>
    15d2:	e7e7      	b.n	15a4 <usb_handle_std_device_req+0x30>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    15d4:	8843      	ldrh	r3, [r0, #2]
    15d6:	2b01      	cmp	r3, #1
    15d8:	d001      	beq.n	15de <usb_handle_std_device_req+0x6a>
	return false;
    15da:	2000      	movs	r0, #0
    15dc:	e7e2      	b.n	15a4 <usb_handle_std_device_req+0x30>
					usb_dev.remote_wakeup = false;
    15de:	4b09      	ldr	r3, [pc, #36]	; (1604 <usb_handle_std_device_req+0x90>)
    15e0:	2200      	movs	r2, #0
    15e2:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
					return true;
    15e6:	2001      	movs	r0, #1
    15e8:	e7dc      	b.n	15a4 <usb_handle_std_device_req+0x30>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    15ea:	8843      	ldrh	r3, [r0, #2]
    15ec:	2b01      	cmp	r3, #1
    15ee:	d001      	beq.n	15f4 <usb_handle_std_device_req+0x80>
	return false;
    15f0:	2000      	movs	r0, #0
    15f2:	e7d7      	b.n	15a4 <usb_handle_std_device_req+0x30>
					usb_dev.remote_wakeup = true;
    15f4:	2001      	movs	r0, #1
    15f6:	4b03      	ldr	r3, [pc, #12]	; (1604 <usb_handle_std_device_req+0x90>)
    15f8:	f883 00c3 	strb.w	r0, [r3, #195]	; 0xc3
					return true;
    15fc:	e7d2      	b.n	15a4 <usb_handle_std_device_req+0x30>
		switch (setup->bRequest) {
    15fe:	2000      	movs	r0, #0
    1600:	e7d0      	b.n	15a4 <usb_handle_std_device_req+0x30>
    1602:	bf00      	nop
    1604:	200007a8 	.word	0x200007a8

00001608 <usb_set_interface>:
{
    1608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    160c:	4606      	mov	r6, r0
	const uint8_t *p = usb_dev.descriptors;
    160e:	4b1b      	ldr	r3, [pc, #108]	; (167c <usb_set_interface+0x74>)
    1610:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	bool ret = false;
    1612:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    1614:	25ff      	movs	r5, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    1616:	46a8      	mov	r8, r5
	const uint8_t *if_desc = NULL;
    1618:	46b9      	mov	r9, r7
    161a:	e008      	b.n	162e <usb_set_interface+0x26>
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    161c:	f894 8003 	ldrb.w	r8, [r4, #3]
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    1620:	78a5      	ldrb	r5, [r4, #2]
			if (cur_iface == setup->wIndex &&
    1622:	b2ab      	uxth	r3, r5
    1624:	88b0      	ldrh	r0, [r6, #4]
    1626:	4283      	cmp	r3, r0
    1628:	d013      	beq.n	1652 <usb_set_interface+0x4a>
		p += p[DESC_bLength];
    162a:	7823      	ldrb	r3, [r4, #0]
    162c:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    162e:	7823      	ldrb	r3, [r4, #0]
    1630:	b1db      	cbz	r3, 166a <usb_set_interface+0x62>
		switch (p[DESC_bDescriptorType]) {
    1632:	7863      	ldrb	r3, [r4, #1]
    1634:	2b04      	cmp	r3, #4
    1636:	d0f1      	beq.n	161c <usb_set_interface+0x14>
    1638:	2b05      	cmp	r3, #5
    163a:	d1f6      	bne.n	162a <usb_set_interface+0x22>
			if (cur_iface == setup->wIndex) {
    163c:	b2ab      	uxth	r3, r5
    163e:	88b2      	ldrh	r2, [r6, #4]
    1640:	4293      	cmp	r3, r2
    1642:	d1f2      	bne.n	162a <usb_set_interface+0x22>
				ret = usb_eps_reconfigure(ep, cur_alt_setting,
    1644:	78b2      	ldrb	r2, [r6, #2]
    1646:	4641      	mov	r1, r8
    1648:	4620      	mov	r0, r4
    164a:	f008 ff00 	bl	a44e <usb_eps_reconfigure>
    164e:	4607      	mov	r7, r0
    1650:	e7eb      	b.n	162a <usb_set_interface+0x22>
			    cur_alt_setting == setup->wValue) {
    1652:	fa1f f388 	uxth.w	r3, r8
    1656:	8871      	ldrh	r1, [r6, #2]
			if (cur_iface == setup->wIndex &&
    1658:	428b      	cmp	r3, r1
    165a:	d1e6      	bne.n	162a <usb_set_interface+0x22>
				ret = usb_set_alt_setting(setup->wIndex,
    165c:	b2c9      	uxtb	r1, r1
    165e:	b2c0      	uxtb	r0, r0
    1660:	f7ff fd64 	bl	112c <usb_set_alt_setting>
    1664:	4607      	mov	r7, r0
				if_desc = (void *)p;
    1666:	46a1      	mov	r9, r4
    1668:	e7df      	b.n	162a <usb_set_interface+0x22>
	if (usb_dev.status_callback) {
    166a:	4b04      	ldr	r3, [pc, #16]	; (167c <usb_set_interface+0x74>)
    166c:	69db      	ldr	r3, [r3, #28]
    166e:	b113      	cbz	r3, 1676 <usb_set_interface+0x6e>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    1670:	4649      	mov	r1, r9
    1672:	2007      	movs	r0, #7
    1674:	4798      	blx	r3
}
    1676:	4638      	mov	r0, r7
    1678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    167c:	200007a8 	.word	0x200007a8

00001680 <usb_handle_standard_request>:
{
    1680:	b570      	push	{r4, r5, r6, lr}
    1682:	4604      	mov	r4, r0
    1684:	460d      	mov	r5, r1
    1686:	4616      	mov	r6, r2
	if (usb_dev.custom_req_handler &&
    1688:	4b18      	ldr	r3, [pc, #96]	; (16ec <usb_handle_standard_request+0x6c>)
    168a:	699b      	ldr	r3, [r3, #24]
    168c:	b10b      	cbz	r3, 1692 <usb_handle_standard_request+0x12>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    168e:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    1690:	b148      	cbz	r0, 16a6 <usb_handle_standard_request+0x26>
	switch (setup->RequestType.recipient) {
    1692:	7823      	ldrb	r3, [r4, #0]
    1694:	f003 031f 	and.w	r3, r3, #31
    1698:	2b01      	cmp	r3, #1
    169a:	d00d      	beq.n	16b8 <usb_handle_standard_request+0x38>
    169c:	2b02      	cmp	r3, #2
    169e:	d013      	beq.n	16c8 <usb_handle_standard_request+0x48>
    16a0:	b113      	cbz	r3, 16a8 <usb_handle_standard_request+0x28>
    16a2:	f06f 0015 	mvn.w	r0, #21
}
    16a6:	bd70      	pop	{r4, r5, r6, pc}
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    16a8:	4632      	mov	r2, r6
    16aa:	4629      	mov	r1, r5
    16ac:	4620      	mov	r0, r4
    16ae:	f7ff ff61 	bl	1574 <usb_handle_std_device_req>
    16b2:	b188      	cbz	r0, 16d8 <usb_handle_standard_request+0x58>
	int rc = 0;
    16b4:	2000      	movs	r0, #0
    16b6:	e7f6      	b.n	16a6 <usb_handle_standard_request+0x26>
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    16b8:	4632      	mov	r2, r6
    16ba:	4629      	mov	r1, r5
    16bc:	4620      	mov	r0, r4
    16be:	f008 fecf 	bl	a460 <usb_handle_std_interface_req>
    16c2:	b160      	cbz	r0, 16de <usb_handle_standard_request+0x5e>
	int rc = 0;
    16c4:	2000      	movs	r0, #0
    16c6:	e7ee      	b.n	16a6 <usb_handle_standard_request+0x26>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    16c8:	4632      	mov	r2, r6
    16ca:	4629      	mov	r1, r5
    16cc:	4620      	mov	r0, r4
    16ce:	f008 ff14 	bl	a4fa <usb_handle_std_endpoint_req>
    16d2:	b138      	cbz	r0, 16e4 <usb_handle_standard_request+0x64>
	int rc = 0;
    16d4:	2000      	movs	r0, #0
    16d6:	e7e6      	b.n	16a6 <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    16d8:	f06f 0015 	mvn.w	r0, #21
    16dc:	e7e3      	b.n	16a6 <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    16de:	f06f 0015 	mvn.w	r0, #21
    16e2:	e7e0      	b.n	16a6 <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    16e4:	f06f 0015 	mvn.w	r0, #21
    16e8:	e7dd      	b.n	16a6 <usb_handle_standard_request+0x26>
    16ea:	bf00      	nop
    16ec:	200007a8 	.word	0x200007a8

000016f0 <composite_setup_ep_cb>:

static int composite_setup_ep_cb(void)
{
    16f0:	b570      	push	{r4, r5, r6, lr}
	struct usb_ep_cfg_data *ep_data;

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    16f2:	4e0d      	ldr	r6, [pc, #52]	; (1728 <composite_setup_ep_cb+0x38>)
    16f4:	4b0d      	ldr	r3, [pc, #52]	; (172c <composite_setup_ep_cb+0x3c>)
    16f6:	429e      	cmp	r6, r3
    16f8:	d211      	bcs.n	171e <composite_setup_ep_cb+0x2e>
		ep_data = cfg_data->endpoint;
    16fa:	6a35      	ldr	r5, [r6, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    16fc:	2400      	movs	r4, #0
    16fe:	7f33      	ldrb	r3, [r6, #28]
    1700:	429c      	cmp	r4, r3
    1702:	d20a      	bcs.n	171a <composite_setup_ep_cb+0x2a>
			LOG_DBG("set cb, ep: 0x%x", ep_data[n].ep_addr);
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    1704:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
    1708:	f855 1034 	ldr.w	r1, [r5, r4, lsl #3]
    170c:	7918      	ldrb	r0, [r3, #4]
    170e:	f002 fcb3 	bl	4078 <usb_dc_ep_set_callback>
    1712:	b930      	cbnz	r0, 1722 <composite_setup_ep_cb+0x32>
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1714:	3401      	adds	r4, #1
    1716:	b2e4      	uxtb	r4, r4
    1718:	e7f1      	b.n	16fe <composite_setup_ep_cb+0xe>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    171a:	3624      	adds	r6, #36	; 0x24
    171c:	e7ea      	b.n	16f4 <composite_setup_ep_cb+0x4>
				return -1;
			}
		}
	}

	return 0;
    171e:	2000      	movs	r0, #0
    1720:	e001      	b.n	1726 <composite_setup_ep_cb+0x36>
				return -1;
    1722:	f04f 30ff 	mov.w	r0, #4294967295
}
    1726:	bd70      	pop	{r4, r5, r6, pc}
    1728:	20000388 	.word	0x20000388
    172c:	200003ac 	.word	0x200003ac

00001730 <forward_status_cb>:
{
    1730:	b570      	push	{r4, r5, r6, lr}
    1732:	4605      	mov	r5, r0
    1734:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
    1736:	2804      	cmp	r0, #4
    1738:	d005      	beq.n	1746 <forward_status_cb+0x16>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND) {
    173a:	1f2b      	subs	r3, r5, #4
    173c:	b2db      	uxtb	r3, r3
    173e:	2b01      	cmp	r3, #1
    1740:	d904      	bls.n	174c <forward_status_cb+0x1c>
{
    1742:	4c14      	ldr	r4, [pc, #80]	; (1794 <forward_status_cb+0x64>)
    1744:	e014      	b.n	1770 <forward_status_cb+0x40>
		usb_reset_alt_setting();
    1746:	f7ff febd 	bl	14c4 <usb_reset_alt_setting>
    174a:	e7f6      	b.n	173a <forward_status_cb+0xa>
		if (usb_dev.configured) {
    174c:	4b12      	ldr	r3, [pc, #72]	; (1798 <forward_status_cb+0x68>)
    174e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
    1752:	2b00      	cmp	r3, #0
    1754:	d0f5      	beq.n	1742 <forward_status_cb+0x12>
			usb_cancel_transfers();
    1756:	f000 fbd9 	bl	1f0c <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED) {
    175a:	2d04      	cmp	r5, #4
    175c:	d1f1      	bne.n	1742 <forward_status_cb+0x12>
				foreach_ep(disable_interface_ep);
    175e:	480f      	ldr	r0, [pc, #60]	; (179c <forward_status_cb+0x6c>)
    1760:	f7ff fdd0 	bl	1304 <foreach_ep>
				usb_dev.configured = false;
    1764:	4b0c      	ldr	r3, [pc, #48]	; (1798 <forward_status_cb+0x68>)
    1766:	2200      	movs	r2, #0
    1768:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    176c:	e7e9      	b.n	1742 <forward_status_cb+0x12>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    176e:	3424      	adds	r4, #36	; 0x24
    1770:	4b0b      	ldr	r3, [pc, #44]	; (17a0 <forward_status_cb+0x70>)
    1772:	429c      	cmp	r4, r3
    1774:	d207      	bcs.n	1786 <forward_status_cb+0x56>
		if (cfg_data->cb_usb_status) {
    1776:	68e3      	ldr	r3, [r4, #12]
    1778:	2b00      	cmp	r3, #0
    177a:	d0f8      	beq.n	176e <forward_status_cb+0x3e>
			cfg_data->cb_usb_status(cfg_data, status, param);
    177c:	4632      	mov	r2, r6
    177e:	4629      	mov	r1, r5
    1780:	4620      	mov	r0, r4
    1782:	4798      	blx	r3
    1784:	e7f3      	b.n	176e <forward_status_cb+0x3e>
	if (usb_dev.user_status_callback) {
    1786:	4b04      	ldr	r3, [pc, #16]	; (1798 <forward_status_cb+0x68>)
    1788:	6a1b      	ldr	r3, [r3, #32]
    178a:	b113      	cbz	r3, 1792 <forward_status_cb+0x62>
		usb_dev.user_status_callback(status, param);
    178c:	4631      	mov	r1, r6
    178e:	4628      	mov	r0, r5
    1790:	4798      	blx	r3
}
    1792:	bd70      	pop	{r4, r5, r6, pc}
    1794:	20000388 	.word	0x20000388
    1798:	200007a8 	.word	0x200007a8
    179c:	0000a4bb 	.word	0x0000a4bb
    17a0:	200003ac 	.word	0x200003ac

000017a4 <usb_data_to_host>:
{
    17a4:	b510      	push	{r4, lr}
    17a6:	b082      	sub	sp, #8
	if (usb_dev.zlp_flag == false) {
    17a8:	4b13      	ldr	r3, [pc, #76]	; (17f8 <usb_data_to_host+0x54>)
    17aa:	7d1b      	ldrb	r3, [r3, #20]
    17ac:	b9cb      	cbnz	r3, 17e2 <usb_data_to_host+0x3e>
		uint32_t chunk = usb_dev.data_buf_residue;
    17ae:	4c12      	ldr	r4, [pc, #72]	; (17f8 <usb_data_to_host+0x54>)
    17b0:	68e2      	ldr	r2, [r4, #12]
    17b2:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    17b4:	ab01      	add	r3, sp, #4
    17b6:	68a1      	ldr	r1, [r4, #8]
    17b8:	2080      	movs	r0, #128	; 0x80
    17ba:	f008 fec1 	bl	a540 <usb_write>
		usb_dev.data_buf += chunk;
    17be:	9901      	ldr	r1, [sp, #4]
    17c0:	68a2      	ldr	r2, [r4, #8]
    17c2:	440a      	add	r2, r1
    17c4:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    17c6:	68e3      	ldr	r3, [r4, #12]
    17c8:	1a5b      	subs	r3, r3, r1
    17ca:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue &&
    17cc:	b98b      	cbnz	r3, 17f2 <usb_data_to_host+0x4e>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    17ce:	88e2      	ldrh	r2, [r4, #6]
    17d0:	6923      	ldr	r3, [r4, #16]
		if (!usb_dev.data_buf_residue &&
    17d2:	429a      	cmp	r2, r3
    17d4:	dd0d      	ble.n	17f2 <usb_data_to_host+0x4e>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    17d6:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    17da:	d10a      	bne.n	17f2 <usb_data_to_host+0x4e>
				usb_dev.zlp_flag = true;
    17dc:	2201      	movs	r2, #1
    17de:	7522      	strb	r2, [r4, #20]
    17e0:	e007      	b.n	17f2 <usb_data_to_host+0x4e>
		usb_dev.zlp_flag = false;
    17e2:	2100      	movs	r1, #0
    17e4:	4b04      	ldr	r3, [pc, #16]	; (17f8 <usb_data_to_host+0x54>)
    17e6:	7519      	strb	r1, [r3, #20]
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    17e8:	460b      	mov	r3, r1
    17ea:	460a      	mov	r2, r1
    17ec:	2080      	movs	r0, #128	; 0x80
    17ee:	f002 fadb 	bl	3da8 <usb_dc_ep_write>
}
    17f2:	b002      	add	sp, #8
    17f4:	bd10      	pop	{r4, pc}
    17f6:	bf00      	nop
    17f8:	200007a8 	.word	0x200007a8

000017fc <usb_handle_control_transfer>:
{
    17fc:	b510      	push	{r4, lr}
    17fe:	b084      	sub	sp, #16
	uint32_t chunk = 0U;
    1800:	2300      	movs	r3, #0
    1802:	9303      	str	r3, [sp, #12]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    1804:	4604      	mov	r4, r0
    1806:	b900      	cbnz	r0, 180a <usb_handle_control_transfer+0xe>
    1808:	b331      	cbz	r1, 1858 <usb_handle_control_transfer+0x5c>
	} else if (ep == USB_CONTROL_EP_OUT) {
    180a:	2c00      	cmp	r4, #0
    180c:	f040 8084 	bne.w	1918 <usb_handle_control_transfer+0x11c>
		if (usb_dev.data_buf_residue <= 0) {
    1810:	4b48      	ldr	r3, [pc, #288]	; (1934 <usb_handle_control_transfer+0x138>)
    1812:	68da      	ldr	r2, [r3, #12]
    1814:	2a00      	cmp	r2, #0
    1816:	dd67      	ble.n	18e8 <usb_handle_control_transfer+0xec>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    1818:	ab03      	add	r3, sp, #12
    181a:	4946      	ldr	r1, [pc, #280]	; (1934 <usb_handle_control_transfer+0x138>)
    181c:	6889      	ldr	r1, [r1, #8]
    181e:	2000      	movs	r0, #0
    1820:	f009 fa64 	bl	acec <usb_dc_ep_read>
    1824:	2800      	cmp	r0, #0
    1826:	db6c      	blt.n	1902 <usb_handle_control_transfer+0x106>
		usb_dev.data_buf += chunk;
    1828:	9803      	ldr	r0, [sp, #12]
    182a:	4a42      	ldr	r2, [pc, #264]	; (1934 <usb_handle_control_transfer+0x138>)
    182c:	6891      	ldr	r1, [r2, #8]
    182e:	4401      	add	r1, r0
    1830:	6091      	str	r1, [r2, #8]
		usb_dev.data_buf_residue -= chunk;
    1832:	68d3      	ldr	r3, [r2, #12]
    1834:	1a1b      	subs	r3, r3, r0
    1836:	60d3      	str	r3, [r2, #12]
		if (usb_dev.data_buf_residue == 0) {
    1838:	2b00      	cmp	r3, #0
    183a:	d16f      	bne.n	191c <usb_handle_control_transfer+0x120>
			usb_dev.data_buf = usb_dev.req_data;
    183c:	4610      	mov	r0, r2
    183e:	f102 0338 	add.w	r3, r2, #56	; 0x38
    1842:	f842 3f08 	str.w	r3, [r2, #8]!
			if (!usb_handle_request(setup,
    1846:	f100 0110 	add.w	r1, r0, #16
    184a:	f7ff fc87 	bl	115c <usb_handle_request>
    184e:	2800      	cmp	r0, #0
    1850:	d05e      	beq.n	1910 <usb_handle_control_transfer+0x114>
			usb_data_to_host();
    1852:	f7ff ffa7 	bl	17a4 <usb_data_to_host>
    1856:	e061      	b.n	191c <usb_handle_control_transfer+0x120>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    1858:	2208      	movs	r2, #8
    185a:	a901      	add	r1, sp, #4
    185c:	f009 fa46 	bl	acec <usb_dc_ep_read>
    1860:	2800      	cmp	r0, #0
    1862:	db2e      	blt.n	18c2 <usb_handle_control_transfer+0xc6>
		setup->bmRequestType = setup_raw.bmRequestType;
    1864:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1868:	4b32      	ldr	r3, [pc, #200]	; (1934 <usb_handle_control_transfer+0x138>)
    186a:	7018      	strb	r0, [r3, #0]
		setup->bRequest = setup_raw.bRequest;
    186c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    1870:	705a      	strb	r2, [r3, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    1872:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    1876:	805a      	strh	r2, [r3, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    1878:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    187c:	809a      	strh	r2, [r3, #4]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    187e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1882:	80d9      	strh	r1, [r3, #6]
		usb_dev.data_buf = usb_dev.req_data;
    1884:	f103 0238 	add.w	r2, r3, #56	; 0x38
    1888:	609a      	str	r2, [r3, #8]
		usb_dev.zlp_flag = false;
    188a:	2200      	movs	r2, #0
    188c:	751a      	strb	r2, [r3, #20]
		usb_dev.data_buf_len = 0;
    188e:	611a      	str	r2, [r3, #16]
		usb_dev.data_buf_residue = 0;
    1890:	60da      	str	r2, [r3, #12]
		if (usb_reqtype_is_to_device(setup)) {
    1892:	f010 0f80 	tst.w	r0, #128	; 0x80
    1896:	d102      	bne.n	189e <usb_handle_control_transfer+0xa2>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    1898:	2980      	cmp	r1, #128	; 0x80
    189a:	d816      	bhi.n	18ca <usb_handle_control_transfer+0xce>
			if (setup->wLength) {
    189c:	b9e1      	cbnz	r1, 18d8 <usb_handle_control_transfer+0xdc>
		if (!usb_handle_request(setup,
    189e:	4825      	ldr	r0, [pc, #148]	; (1934 <usb_handle_control_transfer+0x138>)
    18a0:	f100 0208 	add.w	r2, r0, #8
    18a4:	f100 0110 	add.w	r1, r0, #16
    18a8:	f7ff fc58 	bl	115c <usb_handle_request>
    18ac:	b1c0      	cbz	r0, 18e0 <usb_handle_control_transfer+0xe4>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    18ae:	4b21      	ldr	r3, [pc, #132]	; (1934 <usb_handle_control_transfer+0x138>)
    18b0:	88da      	ldrh	r2, [r3, #6]
    18b2:	6919      	ldr	r1, [r3, #16]
    18b4:	428a      	cmp	r2, r1
    18b6:	bfa8      	it	ge
    18b8:	460a      	movge	r2, r1
    18ba:	60da      	str	r2, [r3, #12]
		usb_data_to_host();
    18bc:	f7ff ff72 	bl	17a4 <usb_data_to_host>
    18c0:	e02c      	b.n	191c <usb_handle_control_transfer+0x120>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    18c2:	2080      	movs	r0, #128	; 0x80
    18c4:	f002 f99e 	bl	3c04 <usb_dc_ep_set_stall>
			return;
    18c8:	e028      	b.n	191c <usb_handle_control_transfer+0x120>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    18ca:	2080      	movs	r0, #128	; 0x80
    18cc:	f002 f99a 	bl	3c04 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    18d0:	2000      	movs	r0, #0
    18d2:	f002 f997 	bl	3c04 <usb_dc_ep_set_stall>
				return;
    18d6:	e021      	b.n	191c <usb_handle_control_transfer+0x120>
				usb_dev.data_buf_len = setup->wLength;
    18d8:	4b16      	ldr	r3, [pc, #88]	; (1934 <usb_handle_control_transfer+0x138>)
    18da:	6119      	str	r1, [r3, #16]
				usb_dev.data_buf_residue = setup->wLength;
    18dc:	60d9      	str	r1, [r3, #12]
				return;
    18de:	e01d      	b.n	191c <usb_handle_control_transfer+0x120>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    18e0:	2080      	movs	r0, #128	; 0x80
    18e2:	f002 f98f 	bl	3c04 <usb_dc_ep_set_stall>
			return;
    18e6:	e019      	b.n	191c <usb_handle_control_transfer+0x120>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    18e8:	ab03      	add	r3, sp, #12
    18ea:	2200      	movs	r2, #0
    18ec:	4911      	ldr	r1, [pc, #68]	; (1934 <usb_handle_control_transfer+0x138>)
    18ee:	6889      	ldr	r1, [r1, #8]
    18f0:	4610      	mov	r0, r2
    18f2:	f009 f9fb 	bl	acec <usb_dc_ep_read>
    18f6:	2800      	cmp	r0, #0
    18f8:	da10      	bge.n	191c <usb_handle_control_transfer+0x120>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    18fa:	2080      	movs	r0, #128	; 0x80
    18fc:	f002 f982 	bl	3c04 <usb_dc_ep_set_stall>
			return;
    1900:	e00c      	b.n	191c <usb_handle_control_transfer+0x120>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    1902:	2080      	movs	r0, #128	; 0x80
    1904:	f002 f97e 	bl	3c04 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    1908:	2000      	movs	r0, #0
    190a:	f002 f97b 	bl	3c04 <usb_dc_ep_set_stall>
			return;
    190e:	e005      	b.n	191c <usb_handle_control_transfer+0x120>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    1910:	2080      	movs	r0, #128	; 0x80
    1912:	f002 f977 	bl	3c04 <usb_dc_ep_set_stall>
				return;
    1916:	e001      	b.n	191c <usb_handle_control_transfer+0x120>
	} else if (ep == USB_CONTROL_EP_IN) {
    1918:	2c80      	cmp	r4, #128	; 0x80
    191a:	d001      	beq.n	1920 <usb_handle_control_transfer+0x124>
}
    191c:	b004      	add	sp, #16
    191e:	bd10      	pop	{r4, pc}
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    1920:	4b04      	ldr	r3, [pc, #16]	; (1934 <usb_handle_control_transfer+0x138>)
    1922:	68db      	ldr	r3, [r3, #12]
    1924:	b91b      	cbnz	r3, 192e <usb_handle_control_transfer+0x132>
    1926:	4b03      	ldr	r3, [pc, #12]	; (1934 <usb_handle_control_transfer+0x138>)
    1928:	7d1b      	ldrb	r3, [r3, #20]
    192a:	2b00      	cmp	r3, #0
    192c:	d0f6      	beq.n	191c <usb_handle_control_transfer+0x120>
			usb_data_to_host();
    192e:	f7ff ff39 	bl	17a4 <usb_data_to_host>
		__ASSERT_NO_MSG(false);
    1932:	e7f3      	b.n	191c <usb_handle_control_transfer+0x120>
    1934:	200007a8 	.word	0x200007a8

00001938 <usb_set_config>:

int usb_set_config(const uint8_t *device_descriptor)
{
    1938:	b508      	push	{r3, lr}
	/* register descriptors */
	usb_register_descriptors(device_descriptor);
    193a:	f7ff fc2b 	bl	1194 <usb_register_descriptors>

	/* register standard request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_STANDARD,
    193e:	4908      	ldr	r1, [pc, #32]	; (1960 <usb_set_config+0x28>)
    1940:	2000      	movs	r0, #0
    1942:	f7ff fc1f 	bl	1184 <usb_register_request_handler>
				     usb_handle_standard_request);

	/* register class request handlers for each interface*/
	usb_register_request_handler(USB_REQTYPE_TYPE_CLASS, class_handler);
    1946:	4907      	ldr	r1, [pc, #28]	; (1964 <usb_set_config+0x2c>)
    1948:	2001      	movs	r0, #1
    194a:	f7ff fc1b 	bl	1184 <usb_register_request_handler>

	/* register vendor request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_VENDOR, vendor_handler);
    194e:	4906      	ldr	r1, [pc, #24]	; (1968 <usb_set_config+0x30>)
    1950:	2002      	movs	r0, #2
    1952:	f7ff fc17 	bl	1184 <usb_register_request_handler>

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);
    1956:	4805      	ldr	r0, [pc, #20]	; (196c <usb_set_config+0x34>)
    1958:	f7ff fcc8 	bl	12ec <usb_register_custom_req_handler>

	return 0;
}
    195c:	2000      	movs	r0, #0
    195e:	bd08      	pop	{r3, pc}
    1960:	00001681 	.word	0x00001681
    1964:	0000133d 	.word	0x0000133d
    1968:	000013d5 	.word	0x000013d5
    196c:	00001379 	.word	0x00001379

00001970 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
    1970:	b508      	push	{r3, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    1972:	4b08      	ldr	r3, [pc, #32]	; (1994 <usb_device_init+0x24>)
    1974:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    1978:	b10b      	cbz	r3, 197e <usb_device_init+0xe>
		return 0;
    197a:	2000      	movs	r0, #0
	}

	usb_set_config(device_descriptor);

	return 0;
}
    197c:	bd08      	pop	{r3, pc}
	device_descriptor = usb_get_device_descriptor();
    197e:	f000 f949 	bl	1c14 <usb_get_device_descriptor>
	if (!device_descriptor) {
    1982:	b118      	cbz	r0, 198c <usb_device_init+0x1c>
	usb_set_config(device_descriptor);
    1984:	f7ff ffd8 	bl	1938 <usb_set_config>
	return 0;
    1988:	2000      	movs	r0, #0
    198a:	e7f7      	b.n	197c <usb_device_init+0xc>
		return -1;
    198c:	f04f 30ff 	mov.w	r0, #4294967295
    1990:	e7f4      	b.n	197c <usb_device_init+0xc>
    1992:	bf00      	nop
    1994:	200007a8 	.word	0x200007a8

00001998 <usb_enable>:
{
    1998:	b530      	push	{r4, r5, lr}
    199a:	b083      	sub	sp, #12
    199c:	4605      	mov	r5, r0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    199e:	f04f 32ff 	mov.w	r2, #4294967295
    19a2:	f04f 33ff 	mov.w	r3, #4294967295
    19a6:	482d      	ldr	r0, [pc, #180]	; (1a5c <usb_enable+0xc4>)
    19a8:	f006 fc1a 	bl	81e0 <z_impl_k_mutex_lock>
	if (usb_dev.enabled == true) {
    19ac:	4b2c      	ldr	r3, [pc, #176]	; (1a60 <usb_enable+0xc8>)
    19ae:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    19b2:	2b00      	cmp	r3, #0
    19b4:	d14a      	bne.n	1a4c <usb_enable+0xb4>
	ret = usb_vbus_set(true);
    19b6:	2001      	movs	r0, #1
    19b8:	f008 fd35 	bl	a426 <usb_vbus_set>
	if (ret < 0) {
    19bc:	1e04      	subs	r4, r0, #0
    19be:	db46      	blt.n	1a4e <usb_enable+0xb6>
	usb_dev.user_status_callback = status_cb;
    19c0:	4b27      	ldr	r3, [pc, #156]	; (1a60 <usb_enable+0xc8>)
    19c2:	621d      	str	r5, [r3, #32]
	usb_register_status_callback(forward_status_cb);
    19c4:	4c27      	ldr	r4, [pc, #156]	; (1a64 <usb_enable+0xcc>)
    19c6:	4620      	mov	r0, r4
    19c8:	f7ff fc96 	bl	12f8 <usb_register_status_callback>
	usb_dc_set_status_callback(forward_status_cb);
    19cc:	4620      	mov	r0, r4
    19ce:	f002 fb67 	bl	40a0 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    19d2:	f002 f895 	bl	3b00 <usb_dc_attach>
	if (ret < 0) {
    19d6:	1e04      	subs	r4, r0, #0
    19d8:	db39      	blt.n	1a4e <usb_enable+0xb6>
	ret = usb_transfer_init();
    19da:	f000 fac3 	bl	1f64 <usb_transfer_init>
	if (ret < 0) {
    19de:	1e04      	subs	r4, r0, #0
    19e0:	db35      	blt.n	1a4e <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    19e2:	2340      	movs	r3, #64	; 0x40
    19e4:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    19e8:	2300      	movs	r3, #0
    19ea:	f88d 3004 	strb.w	r3, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    19ee:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    19f2:	4668      	mov	r0, sp
    19f4:	f002 f8de 	bl	3bb4 <usb_dc_ep_configure>
	if (ret < 0) {
    19f8:	1e04      	subs	r4, r0, #0
    19fa:	db28      	blt.n	1a4e <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    19fc:	2380      	movs	r3, #128	; 0x80
    19fe:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    1a02:	4668      	mov	r0, sp
    1a04:	f002 f8d6 	bl	3bb4 <usb_dc_ep_configure>
	if (ret < 0) {
    1a08:	1e04      	subs	r4, r0, #0
    1a0a:	db20      	blt.n	1a4e <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    1a0c:	4916      	ldr	r1, [pc, #88]	; (1a68 <usb_enable+0xd0>)
    1a0e:	2000      	movs	r0, #0
    1a10:	f002 fb32 	bl	4078 <usb_dc_ep_set_callback>
	if (ret < 0) {
    1a14:	1e04      	subs	r4, r0, #0
    1a16:	db1a      	blt.n	1a4e <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    1a18:	4913      	ldr	r1, [pc, #76]	; (1a68 <usb_enable+0xd0>)
    1a1a:	2080      	movs	r0, #128	; 0x80
    1a1c:	f002 fb2c 	bl	4078 <usb_dc_ep_set_callback>
	if (ret < 0) {
    1a20:	1e04      	subs	r4, r0, #0
    1a22:	db14      	blt.n	1a4e <usb_enable+0xb6>
	ret = composite_setup_ep_cb();
    1a24:	f7ff fe64 	bl	16f0 <composite_setup_ep_cb>
	if (ret < 0) {
    1a28:	1e04      	subs	r4, r0, #0
    1a2a:	db10      	blt.n	1a4e <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    1a2c:	2000      	movs	r0, #0
    1a2e:	f002 f963 	bl	3cf8 <usb_dc_ep_enable>
	if (ret < 0) {
    1a32:	1e04      	subs	r4, r0, #0
    1a34:	db0b      	blt.n	1a4e <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    1a36:	2080      	movs	r0, #128	; 0x80
    1a38:	f002 f95e 	bl	3cf8 <usb_dc_ep_enable>
	if (ret < 0) {
    1a3c:	1e04      	subs	r4, r0, #0
    1a3e:	db06      	blt.n	1a4e <usb_enable+0xb6>
	usb_dev.enabled = true;
    1a40:	4b07      	ldr	r3, [pc, #28]	; (1a60 <usb_enable+0xc8>)
    1a42:	2201      	movs	r2, #1
    1a44:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	ret = 0;
    1a48:	2400      	movs	r4, #0
    1a4a:	e000      	b.n	1a4e <usb_enable+0xb6>
		ret = 0;
    1a4c:	2400      	movs	r4, #0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1a4e:	4803      	ldr	r0, [pc, #12]	; (1a5c <usb_enable+0xc4>)
    1a50:	f006 fc50 	bl	82f4 <z_impl_k_mutex_unlock>
}
    1a54:	4620      	mov	r0, r4
    1a56:	b003      	add	sp, #12
    1a58:	bd30      	pop	{r4, r5, pc}
    1a5a:	bf00      	nop
    1a5c:	2000029c 	.word	0x2000029c
    1a60:	200007a8 	.word	0x200007a8
    1a64:	00001731 	.word	0x00001731
    1a68:	000017fd 	.word	0x000017fd

00001a6c <usb_get_cfg_data>:
 * The interface descriptor of a USB function must be assigned to the
 * usb_cfg_data so that usb_ep_cfg_data and matching endpoint descriptor
 * can be found.
 */
static struct usb_cfg_data *usb_get_cfg_data(struct usb_if_descriptor *iface)
{
    1a6c:	4602      	mov	r2, r0
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1a6e:	4805      	ldr	r0, [pc, #20]	; (1a84 <usb_get_cfg_data+0x18>)
    1a70:	4b05      	ldr	r3, [pc, #20]	; (1a88 <usb_get_cfg_data+0x1c>)
    1a72:	4298      	cmp	r0, r3
    1a74:	d204      	bcs.n	1a80 <usb_get_cfg_data+0x14>
		if (cfg_data->interface_descriptor == iface) {
    1a76:	6843      	ldr	r3, [r0, #4]
    1a78:	4293      	cmp	r3, r2
    1a7a:	d002      	beq.n	1a82 <usb_get_cfg_data+0x16>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1a7c:	3024      	adds	r0, #36	; 0x24
    1a7e:	e7f7      	b.n	1a70 <usb_get_cfg_data+0x4>
			return cfg_data;
		}
	}

	return NULL;
    1a80:	2000      	movs	r0, #0
}
    1a82:	4770      	bx	lr
    1a84:	20000388 	.word	0x20000388
    1a88:	200003ac 	.word	0x200003ac

00001a8c <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    1a8c:	b530      	push	{r4, r5, lr}
    1a8e:	b08b      	sub	sp, #44	; 0x2c
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    1a90:	ac01      	add	r4, sp, #4
    1a92:	4d1b      	ldr	r5, [pc, #108]	; (1b00 <usb_update_sn_string_descriptor+0x74>)
    1a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1a98:	682b      	ldr	r3, [r5, #0]
    1a9a:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    1a9c:	2210      	movs	r2, #16
    1a9e:	2100      	movs	r1, #0
    1aa0:	a806      	add	r0, sp, #24
    1aa2:	f009 f854 	bl	ab4e <memset>
	memset(sn, 0, sizeof(sn));
    1aa6:	2212      	movs	r2, #18
    1aa8:	2100      	movs	r1, #0
    1aaa:	4816      	ldr	r0, [pc, #88]	; (1b04 <usb_update_sn_string_descriptor+0x78>)
    1aac:	f009 f84f 	bl	ab4e <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    1ab0:	2110      	movs	r1, #16
    1ab2:	a806      	add	r0, sp, #24
    1ab4:	f009 faab 	bl	b00e <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    1ab8:	2800      	cmp	r0, #0
    1aba:	dd1d      	ble.n	1af8 <usb_update_sn_string_descriptor+0x6c>
		skip = MAX(0, hwlen - usblen);
    1abc:	3808      	subs	r0, #8
    1abe:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    1ac2:	2200      	movs	r2, #0
    1ac4:	e016      	b.n	1af4 <usb_update_sn_string_descriptor+0x68>
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    1ac6:	18a3      	adds	r3, r4, r2
    1ac8:	a90a      	add	r1, sp, #40	; 0x28
    1aca:	440b      	add	r3, r1
    1acc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    1ad0:	0051      	lsls	r1, r2, #1
    1ad2:	a80a      	add	r0, sp, #40	; 0x28
    1ad4:	eb00 1013 	add.w	r0, r0, r3, lsr #4
    1ad8:	f810 5c24 	ldrb.w	r5, [r0, #-36]
    1adc:	4809      	ldr	r0, [pc, #36]	; (1b04 <usb_update_sn_string_descriptor+0x78>)
    1ade:	f800 5012 	strb.w	r5, [r0, r2, lsl #1]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    1ae2:	f003 030f 	and.w	r3, r3, #15
    1ae6:	3101      	adds	r1, #1
    1ae8:	ad0a      	add	r5, sp, #40	; 0x28
    1aea:	442b      	add	r3, r5
    1aec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
    1af0:	5443      	strb	r3, [r0, r1]
		for (int i = 0; i < usblen; i++) {
    1af2:	3201      	adds	r2, #1
    1af4:	2a07      	cmp	r2, #7
    1af6:	dde6      	ble.n	1ac6 <usb_update_sn_string_descriptor+0x3a>
		}
	}

	return sn;
}
    1af8:	4802      	ldr	r0, [pc, #8]	; (1b04 <usb_update_sn_string_descriptor+0x78>)
    1afa:	b00b      	add	sp, #44	; 0x2c
    1afc:	bd30      	pop	{r4, r5, pc}
    1afe:	bf00      	nop
    1b00:	0000c474 	.word	0x0000c474
    1b04:	2000086c 	.word	0x2000086c

00001b08 <usb_fix_ascii_sn_string_descriptor>:

static void usb_fix_ascii_sn_string_descriptor(struct usb_sn_descriptor *sn)
{
    1b08:	b570      	push	{r4, r5, r6, lr}
    1b0a:	4604      	mov	r4, r0
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    1b0c:	f7ff ffbe 	bl	1a8c <usb_update_sn_string_descriptor>
	int runtime_sn_len, default_sn_len;

	if (!runtime_sn) {
    1b10:	b120      	cbz	r0, 1b1c <usb_fix_ascii_sn_string_descriptor+0x14>
    1b12:	4605      	mov	r5, r0
		return;
	}

	runtime_sn_len = strlen(runtime_sn);
    1b14:	f008 ffe5 	bl	aae2 <strlen>
	if (!runtime_sn_len) {
    1b18:	4606      	mov	r6, r0
    1b1a:	b900      	cbnz	r0, 1b1e <usb_fix_ascii_sn_string_descriptor+0x16>
			"length as CONFIG_USB_DEVICE_SN");
		return;
	}

	memcpy(sn->bString, runtime_sn, runtime_sn_len);
}
    1b1c:	bd70      	pop	{r4, r5, r6, pc}
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    1b1e:	4805      	ldr	r0, [pc, #20]	; (1b34 <usb_fix_ascii_sn_string_descriptor+0x2c>)
    1b20:	f008 ffdf 	bl	aae2 <strlen>
	if (runtime_sn_len != default_sn_len) {
    1b24:	4286      	cmp	r6, r0
    1b26:	d1f9      	bne.n	1b1c <usb_fix_ascii_sn_string_descriptor+0x14>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    1b28:	4632      	mov	r2, r6
    1b2a:	4629      	mov	r1, r5
    1b2c:	1ca0      	adds	r0, r4, #2
    1b2e:	f008 ffea 	bl	ab06 <memcpy>
    1b32:	e7f3      	b.n	1b1c <usb_fix_ascii_sn_string_descriptor+0x14>
    1b34:	0000c474 	.word	0x0000c474

00001b38 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    1b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b3c:	b082      	sub	sp, #8
    1b3e:	4604      	mov	r4, r0
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
	uint32_t requested_ep = BIT(16) | BIT(0);
    1b40:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1b44:	9301      	str	r3, [sp, #4]
	uint8_t str_descr_idx = 0U;
    1b46:	2500      	movs	r5, #0
	uint8_t numof_ifaces = 0U;
    1b48:	462f      	mov	r7, r5
	struct usb_cfg_data *cfg_data = NULL;
    1b4a:	46a8      	mov	r8, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
    1b4c:	462e      	mov	r6, r5

	while (head->bLength != 0U) {
    1b4e:	e02c      	b.n	1baa <usb_fix_descriptor+0x72>
			LOG_DBG("Association descriptor %p", head);
			break;
		case USB_DESC_INTERFACE:
			if_descr = (struct usb_if_descriptor *)head;
			LOG_DBG("Interface descriptor %p", head);
			if (if_descr->bAlternateSetting) {
    1b50:	78e3      	ldrb	r3, [r4, #3]
    1b52:	bb43      	cbnz	r3, 1ba6 <usb_fix_descriptor+0x6e>
				LOG_DBG("Skip alternate interface");
				break;
			}

			if (if_descr->bInterfaceNumber == 0U) {
    1b54:	78a3      	ldrb	r3, [r4, #2]
    1b56:	b953      	cbnz	r3, 1b6e <usb_fix_descriptor+0x36>
				cfg_data = usb_get_cfg_data(if_descr);
    1b58:	4620      	mov	r0, r4
    1b5a:	f7ff ff87 	bl	1a6c <usb_get_cfg_data>
				if (!cfg_data) {
    1b5e:	4680      	mov	r8, r0
    1b60:	2800      	cmp	r0, #0
    1b62:	d04c      	beq.n	1bfe <usb_fix_descriptor+0xc6>
					LOG_ERR("There is no usb_cfg_data "
						"for %p", head);
					return -1;
				}

				if (cfg_data->interface_config) {
    1b64:	6883      	ldr	r3, [r0, #8]
    1b66:	b113      	cbz	r3, 1b6e <usb_fix_descriptor+0x36>
					cfg_data->interface_config(head,
    1b68:	4639      	mov	r1, r7
    1b6a:	4620      	mov	r0, r4
    1b6c:	4798      	blx	r3
							numof_ifaces);
				}
			}

			numof_ifaces++;
    1b6e:	3701      	adds	r7, #1
    1b70:	b2ff      	uxtb	r7, r7
			break;
    1b72:	e018      	b.n	1ba6 <usb_fix_descriptor+0x6e>
		case USB_DESC_ENDPOINT:
			if (!cfg_data) {
    1b74:	f1b8 0f00 	cmp.w	r8, #0
    1b78:	d044      	beq.n	1c04 <usb_fix_descriptor+0xcc>
				return -1;
			}

			LOG_DBG("Endpoint descriptor %p", head);
			ep_descr = (struct usb_ep_descriptor *)head;
			if (usb_validate_ep_cfg_data(ep_descr,
    1b7a:	aa01      	add	r2, sp, #4
    1b7c:	4641      	mov	r1, r8
    1b7e:	4620      	mov	r0, r4
    1b80:	f008 fd11 	bl	a5a6 <usb_validate_ep_cfg_data>
    1b84:	b178      	cbz	r0, 1ba6 <usb_fix_descriptor+0x6e>
						     cfg_data,
						     &requested_ep)) {
				LOG_ERR("Failed to validate endpoints");
				return -1;
    1b86:	f04f 30ff 	mov.w	r0, #4294967295
    1b8a:	e032      	b.n	1bf2 <usb_fix_descriptor+0xba>
		case 0:
		case USB_DESC_STRING:
			/*
			 * Copy runtime SN string descriptor first, if has
			 */
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    1b8c:	2d03      	cmp	r5, #3
    1b8e:	d021      	beq.n	1bd4 <usb_fix_descriptor+0x9c>
			}
			/*
			 * Skip language descriptor but correct
			 * wTotalLength and bNumInterfaces once.
			 */
			if (str_descr_idx) {
    1b90:	bb25      	cbnz	r5, 1bdc <usb_fix_descriptor+0xa4>
				ascii7_to_utf16le(head);
			} else {
				if (!cfg_descr) {
    1b92:	2e00      	cmp	r6, #0
    1b94:	d039      	beq.n	1c0a <usb_fix_descriptor+0xd2>
					return -1;
				}

				LOG_DBG("Now the wTotalLength is %zd",
					(uint8_t *)head - (uint8_t *)cfg_descr);
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    1b96:	1ba3      	subs	r3, r4, r6
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    1b98:	70b3      	strb	r3, [r6, #2]
	dst[1] = val >> 8;
    1b9a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1b9e:	70f3      	strb	r3, [r6, #3]
					     (uint8_t *)&cfg_descr->wTotalLength);
				cfg_descr->bNumInterfaces = numof_ifaces;
    1ba0:	7137      	strb	r7, [r6, #4]
			}

			str_descr_idx += 1U;
    1ba2:	3501      	adds	r5, #1
    1ba4:	b2ed      	uxtb	r5, r5
		default:
			break;
		}

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    1ba6:	7823      	ldrb	r3, [r4, #0]
    1ba8:	441c      	add	r4, r3
	while (head->bLength != 0U) {
    1baa:	7823      	ldrb	r3, [r4, #0]
    1bac:	b1e3      	cbz	r3, 1be8 <usb_fix_descriptor+0xb0>
		switch (head->bDescriptorType) {
    1bae:	7863      	ldrb	r3, [r4, #1]
    1bb0:	2b05      	cmp	r3, #5
    1bb2:	d8f8      	bhi.n	1ba6 <usb_fix_descriptor+0x6e>
    1bb4:	a201      	add	r2, pc, #4	; (adr r2, 1bbc <usb_fix_descriptor+0x84>)
    1bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1bba:	bf00      	nop
    1bbc:	00001b8d 	.word	0x00001b8d
    1bc0:	00001ba7 	.word	0x00001ba7
    1bc4:	00001be5 	.word	0x00001be5
    1bc8:	00001b8d 	.word	0x00001b8d
    1bcc:	00001b51 	.word	0x00001b51
    1bd0:	00001b75 	.word	0x00001b75
				usb_fix_ascii_sn_string_descriptor(sn);
    1bd4:	4620      	mov	r0, r4
    1bd6:	f7ff ff97 	bl	1b08 <usb_fix_ascii_sn_string_descriptor>
    1bda:	e7d9      	b.n	1b90 <usb_fix_descriptor+0x58>
				ascii7_to_utf16le(head);
    1bdc:	4620      	mov	r0, r4
    1bde:	f008 fcce 	bl	a57e <ascii7_to_utf16le>
    1be2:	e7de      	b.n	1ba2 <usb_fix_descriptor+0x6a>
			cfg_descr = (struct usb_cfg_descriptor *)head;
    1be4:	4626      	mov	r6, r4
    1be6:	e7de      	b.n	1ba6 <usb_fix_descriptor+0x6e>
	}

	if ((head + 1) != __usb_descriptor_end) {
    1be8:	1ca0      	adds	r0, r4, #2
    1bea:	4b09      	ldr	r3, [pc, #36]	; (1c10 <usb_fix_descriptor+0xd8>)
    1bec:	4298      	cmp	r0, r3
    1bee:	d103      	bne.n	1bf8 <usb_fix_descriptor+0xc0>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
    1bf0:	2000      	movs	r0, #0
}
    1bf2:	b002      	add	sp, #8
    1bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return usb_fix_descriptor(head + 1);
    1bf8:	f7ff ff9e 	bl	1b38 <usb_fix_descriptor>
    1bfc:	e7f9      	b.n	1bf2 <usb_fix_descriptor+0xba>
					return -1;
    1bfe:	f04f 30ff 	mov.w	r0, #4294967295
    1c02:	e7f6      	b.n	1bf2 <usb_fix_descriptor+0xba>
				return -1;
    1c04:	f04f 30ff 	mov.w	r0, #4294967295
    1c08:	e7f3      	b.n	1bf2 <usb_fix_descriptor+0xba>
					return -1;
    1c0a:	f04f 30ff 	mov.w	r0, #4294967295
    1c0e:	e7f0      	b.n	1bf2 <usb_fix_descriptor+0xba>
    1c10:	20000387 	.word	0x20000387

00001c14 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    1c14:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    1c16:	4804      	ldr	r0, [pc, #16]	; (1c28 <usb_get_device_descriptor+0x14>)
    1c18:	f7ff ff8e 	bl	1b38 <usb_fix_descriptor>
    1c1c:	b908      	cbnz	r0, 1c22 <usb_get_device_descriptor+0xe>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    1c1e:	4802      	ldr	r0, [pc, #8]	; (1c28 <usb_get_device_descriptor+0x14>)
}
    1c20:	bd08      	pop	{r3, pc}
		return NULL;
    1c22:	2000      	movs	r0, #0
    1c24:	e7fc      	b.n	1c20 <usb_get_device_descriptor+0xc>
    1c26:	bf00      	nop
    1c28:	200002c0 	.word	0x200002c0

00001c2c <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    1c2c:	2300      	movs	r3, #0
    1c2e:	e000      	b.n	1c32 <usb_ep_get_transfer+0x6>
    1c30:	3301      	adds	r3, #1
    1c32:	2b03      	cmp	r3, #3
    1c34:	dc0c      	bgt.n	1c50 <usb_ep_get_transfer+0x24>
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    1c36:	019a      	lsls	r2, r3, #6
    1c38:	4906      	ldr	r1, [pc, #24]	; (1c54 <usb_ep_get_transfer+0x28>)
    1c3a:	5c8a      	ldrb	r2, [r1, r2]
    1c3c:	4282      	cmp	r2, r0
    1c3e:	d1f7      	bne.n	1c30 <usb_ep_get_transfer+0x4>
    1c40:	eb01 1283 	add.w	r2, r1, r3, lsl #6
    1c44:	6852      	ldr	r2, [r2, #4]
    1c46:	2a00      	cmp	r2, #0
    1c48:	d0f2      	beq.n	1c30 <usb_ep_get_transfer+0x4>
			return &ut_data[i];
    1c4a:	eb01 1083 	add.w	r0, r1, r3, lsl #6
    1c4e:	4770      	bx	lr
		}
	}

	return NULL;
    1c50:	2000      	movs	r0, #0
}
    1c52:	4770      	bx	lr
    1c54:	20000880 	.word	0x20000880

00001c58 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    1c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c5c:	b082      	sub	sp, #8
    1c5e:	4604      	mov	r4, r0
	int ret = 0;
	uint32_t bytes;
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;
    1c60:	f810 5c2c 	ldrb.w	r5, [r0, #-44]

	if (trans->status != -EBUSY) {
    1c64:	f850 3c28 	ldr.w	r3, [r0, #-40]
    1c68:	f113 0f10 	cmn.w	r3, #16
    1c6c:	d10c      	bne.n	1c88 <usb_transfer_work+0x30>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    1c6e:	6903      	ldr	r3, [r0, #16]
    1c70:	f013 0f02 	tst.w	r3, #2
    1c74:	d04f      	beq.n	1d16 <usb_transfer_work+0xbe>
		if (!trans->bsize) {
    1c76:	f850 2c20 	ldr.w	r2, [r0, #-32]
    1c7a:	bb7a      	cbnz	r2, 1cdc <usb_transfer_work+0x84>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    1c7c:	f013 0f04 	tst.w	r3, #4
    1c80:	d025      	beq.n	1cce <usb_transfer_work+0x76>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
			}
			trans->status = 0;
    1c82:	2300      	movs	r3, #0
    1c84:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    1c88:	f854 3c28 	ldr.w	r3, [r4, #-40]
    1c8c:	f113 0f10 	cmn.w	r3, #16
    1c90:	d01a      	beq.n	1cc8 <usb_transfer_work+0x70>
    1c92:	f854 6c18 	ldr.w	r6, [r4, #-24]
    1c96:	b1be      	cbz	r6, 1cc8 <usb_transfer_work+0x70>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    1c98:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
    1c9c:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
    1ca0:	f009 fe2a 	bl	b8f8 <k_is_in_isr>
    1ca4:	2800      	cmp	r0, #0
    1ca6:	d16a      	bne.n	1d7e <usb_transfer_work+0x126>
		}

		LOG_DBG("Transfer done, ep 0x%02x, status %d, size %zu",
			trans->ep, trans->status, trans->tsize);

		trans->cb = NULL;
    1ca8:	2300      	movs	r3, #0
    1caa:	f844 3c18 	str.w	r3, [r4, #-24]
		k_sem_give(&trans->sem);
    1cae:	f1a4 0010 	sub.w	r0, r4, #16
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1cb2:	f006 fb9f 	bl	83f4 <z_impl_k_sem_give>

		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
    1cb6:	f854 3c28 	ldr.w	r3, [r4, #-40]
    1cba:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
    1cbe:	d003      	beq.n	1cc8 <usb_transfer_work+0x70>
			cb(ep, tsize, priv);
    1cc0:	4642      	mov	r2, r8
    1cc2:	4639      	mov	r1, r7
    1cc4:	4628      	mov	r0, r5
    1cc6:	47b0      	blx	r6
		}
	}
}
    1cc8:	b002      	add	sp, #8
    1cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_write(ep, NULL, 0, NULL);
    1cce:	2300      	movs	r3, #0
    1cd0:	461a      	mov	r2, r3
    1cd2:	4619      	mov	r1, r3
    1cd4:	4628      	mov	r0, r5
    1cd6:	f008 fc33 	bl	a540 <usb_write>
    1cda:	e7d2      	b.n	1c82 <usb_transfer_work+0x2a>
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    1cdc:	ab01      	add	r3, sp, #4
    1cde:	f850 1c24 	ldr.w	r1, [r0, #-36]
    1ce2:	4628      	mov	r0, r5
    1ce4:	f008 fc2c 	bl	a540 <usb_write>
		if (ret) {
    1ce8:	b980      	cbnz	r0, 1d0c <usb_transfer_work+0xb4>
		trans->buffer += bytes;
    1cea:	f854 3c24 	ldr.w	r3, [r4, #-36]
    1cee:	9a01      	ldr	r2, [sp, #4]
    1cf0:	4413      	add	r3, r2
    1cf2:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    1cf6:	f854 3c20 	ldr.w	r3, [r4, #-32]
    1cfa:	1a9b      	subs	r3, r3, r2
    1cfc:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    1d00:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    1d04:	4413      	add	r3, r2
    1d06:	f844 3c1c 	str.w	r3, [r4, #-28]
    1d0a:	e7bd      	b.n	1c88 <usb_transfer_work+0x30>
			trans->status = -EINVAL;
    1d0c:	f06f 0315 	mvn.w	r3, #21
    1d10:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    1d14:	e7b8      	b.n	1c88 <usb_transfer_work+0x30>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    1d16:	ab01      	add	r3, sp, #4
    1d18:	f850 2c20 	ldr.w	r2, [r0, #-32]
    1d1c:	f850 1c24 	ldr.w	r1, [r0, #-36]
    1d20:	4628      	mov	r0, r5
    1d22:	f002 f8c5 	bl	3eb0 <usb_dc_ep_read_wait>
		if (ret) {
    1d26:	b9a0      	cbnz	r0, 1d52 <usb_transfer_work+0xfa>
		trans->buffer += bytes;
    1d28:	f854 3c24 	ldr.w	r3, [r4, #-36]
    1d2c:	9e01      	ldr	r6, [sp, #4]
    1d2e:	4433      	add	r3, r6
    1d30:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    1d34:	f854 3c20 	ldr.w	r3, [r4, #-32]
    1d38:	1b9b      	subs	r3, r3, r6
    1d3a:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    1d3e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    1d42:	4433      	add	r3, r6
    1d44:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    1d48:	b946      	cbnz	r6, 1d5c <usb_transfer_work+0x104>
			trans->status = 0;
    1d4a:	2300      	movs	r3, #0
    1d4c:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    1d50:	e79a      	b.n	1c88 <usb_transfer_work+0x30>
			trans->status = -EINVAL;
    1d52:	f06f 0315 	mvn.w	r3, #21
    1d56:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    1d5a:	e795      	b.n	1c88 <usb_transfer_work+0x30>
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    1d5c:	4628      	mov	r0, r5
    1d5e:	f002 f9a5 	bl	40ac <usb_dc_ep_mps>
    1d62:	fbb6 f3f0 	udiv	r3, r6, r0
    1d66:	fb00 6013 	mls	r0, r0, r3, r6
    1d6a:	2800      	cmp	r0, #0
    1d6c:	d1ed      	bne.n	1d4a <usb_transfer_work+0xf2>
    1d6e:	f854 3c20 	ldr.w	r3, [r4, #-32]
    1d72:	2b00      	cmp	r3, #0
    1d74:	d0e9      	beq.n	1d4a <usb_transfer_work+0xf2>
		usb_dc_ep_read_continue(ep);
    1d76:	4628      	mov	r0, r5
    1d78:	f002 f8f8 	bl	3f6c <usb_dc_ep_read_continue>
    1d7c:	e784      	b.n	1c88 <usb_transfer_work+0x30>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    1d7e:	4621      	mov	r1, r4
    1d80:	4801      	ldr	r0, [pc, #4]	; (1d88 <usb_transfer_work+0x130>)
    1d82:	f009 feb1 	bl	bae8 <k_work_submit_to_queue>
			return;
    1d86:	e79f      	b.n	1cc8 <usb_transfer_work+0x70>
    1d88:	200003b0 	.word	0x200003b0

00001d8c <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
    1d8c:	b570      	push	{r4, r5, r6, lr}
    1d8e:	b082      	sub	sp, #8
    1d90:	4606      	mov	r6, r0
    1d92:	460c      	mov	r4, r1
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    1d94:	f7ff ff4a 	bl	1c2c <usb_ep_get_transfer>

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    1d98:	1e63      	subs	r3, r4, #1
    1d9a:	b2db      	uxtb	r3, r3
    1d9c:	2b01      	cmp	r3, #1
    1d9e:	d80a      	bhi.n	1db6 <usb_transfer_ep_callback+0x2a>
    1da0:	4605      	mov	r5, r0
		return;
	}

	if (!trans) {
    1da2:	b150      	cbz	r0, 1dba <usb_transfer_ep_callback+0x2e>
			LOG_ERR("RX data lost, no transfer");
		}
		return;
	}

	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    1da4:	f009 fda8 	bl	b8f8 <k_is_in_isr>
    1da8:	b108      	cbz	r0, 1dae <usb_transfer_ep_callback+0x22>
    1daa:	2c01      	cmp	r4, #1
    1dac:	d112      	bne.n	1dd4 <usb_transfer_ep_callback+0x48>
		/* If we are not in IRQ context, no need to defer work */
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
    1dae:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    1db2:	f7ff ff51 	bl	1c58 <usb_transfer_work>
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    1db6:	b002      	add	sp, #8
    1db8:	bd70      	pop	{r4, r5, r6, pc}
		if (status == USB_DC_EP_DATA_OUT) {
    1dba:	2c01      	cmp	r4, #1
    1dbc:	d1fb      	bne.n	1db6 <usb_transfer_ep_callback+0x2a>
				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    1dbe:	ab01      	add	r3, sp, #4
    1dc0:	2201      	movs	r2, #1
    1dc2:	f10d 0103 	add.w	r1, sp, #3
    1dc6:	4630      	mov	r0, r6
    1dc8:	f002 f872 	bl	3eb0 <usb_dc_ep_read_wait>
			} while (bytes);
    1dcc:	9b01      	ldr	r3, [sp, #4]
    1dce:	2b00      	cmp	r3, #0
    1dd0:	d1f5      	bne.n	1dbe <usb_transfer_ep_callback+0x32>
    1dd2:	e7f0      	b.n	1db6 <usb_transfer_ep_callback+0x2a>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    1dd4:	f105 012c 	add.w	r1, r5, #44	; 0x2c
    1dd8:	4801      	ldr	r0, [pc, #4]	; (1de0 <usb_transfer_ep_callback+0x54>)
    1dda:	f009 fe85 	bl	bae8 <k_work_submit_to_queue>
    1dde:	e7ea      	b.n	1db6 <usb_transfer_ep_callback+0x2a>
    1de0:	200003b0 	.word	0x200003b0

00001de4 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    1de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1de8:	4605      	mov	r5, r0
    1dea:	4688      	mov	r8, r1
    1dec:	4617      	mov	r7, r2
    1dee:	461e      	mov	r6, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    1df0:	f008 fc83 	bl	a6fa <usb_transfer_is_busy>
    1df4:	2800      	cmp	r0, #0
    1df6:	d161      	bne.n	1ebc <usb_transfer+0xd8>
	__asm__ volatile(
    1df8:	f04f 0320 	mov.w	r3, #32
    1dfc:	f3ef 8911 	mrs	r9, BASEPRI
    1e00:	f383 8812 	msr	BASEPRI_MAX, r3
    1e04:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    1e08:	2400      	movs	r4, #0
    1e0a:	2c03      	cmp	r4, #3
    1e0c:	dc10      	bgt.n	1e30 <usb_transfer+0x4c>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    1e0e:	01a0      	lsls	r0, r4, #6
    1e10:	f100 0318 	add.w	r3, r0, #24
    1e14:	482b      	ldr	r0, [pc, #172]	; (1ec4 <usb_transfer+0xe0>)
    1e16:	4418      	add	r0, r3
    1e18:	3004      	adds	r0, #4
	return z_impl_k_sem_take(sem, timeout);
    1e1a:	2200      	movs	r2, #0
    1e1c:	2300      	movs	r3, #0
    1e1e:	f006 fb0d 	bl	843c <z_impl_k_sem_take>
    1e22:	b108      	cbz	r0, 1e28 <usb_transfer+0x44>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    1e24:	3401      	adds	r4, #1
    1e26:	e7f0      	b.n	1e0a <usb_transfer+0x26>
			trans = &ut_data[i];
    1e28:	4826      	ldr	r0, [pc, #152]	; (1ec4 <usb_transfer+0xe0>)
    1e2a:	eb00 1484 	add.w	r4, r0, r4, lsl #6
			break;
    1e2e:	e000      	b.n	1e32 <usb_transfer+0x4e>
	struct usb_transfer_data *trans = NULL;
    1e30:	2400      	movs	r4, #0
		}
	}

	if (!trans) {
    1e32:	2c00      	cmp	r4, #0
    1e34:	d03f      	beq.n	1eb6 <usb_transfer+0xd2>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    1e36:	f8d4 a004 	ldr.w	sl, [r4, #4]
    1e3a:	f11a 0f10 	cmn.w	sl, #16
    1e3e:	d022      	beq.n	1e86 <usb_transfer+0xa2>
		ret = -EBUSY;
		goto done;
	}

	/* Configure new transfer */
	trans->ep = ep;
    1e40:	7025      	strb	r5, [r4, #0]
	trans->buffer = data;
    1e42:	f8c4 8008 	str.w	r8, [r4, #8]
	trans->bsize = dlen;
    1e46:	60e7      	str	r7, [r4, #12]
	trans->tsize = 0;
    1e48:	2300      	movs	r3, #0
    1e4a:	6123      	str	r3, [r4, #16]
	trans->cb = cb;
    1e4c:	9b08      	ldr	r3, [sp, #32]
    1e4e:	6163      	str	r3, [r4, #20]
	trans->flags = flags;
    1e50:	63e6      	str	r6, [r4, #60]	; 0x3c
	trans->priv = cb_data;
    1e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1e54:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
    1e56:	f06f 030f 	mvn.w	r3, #15
    1e5a:	6063      	str	r3, [r4, #4]

	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    1e5c:	4628      	mov	r0, r5
    1e5e:	f002 f925 	bl	40ac <usb_dc_ep_mps>
    1e62:	b9a8      	cbnz	r0, 1e90 <usb_transfer+0xac>
		/* no need to send ZLP since last packet will be a short one */
		trans->flags |= USB_TRANS_NO_ZLP;
	}

	if (flags & USB_TRANS_WRITE) {
    1e64:	f016 0f02 	tst.w	r6, #2
    1e68:	d020      	beq.n	1eac <usb_transfer+0xc8>
		/* start writing first chunk */
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    1e6a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    1e6e:	4816      	ldr	r0, [pc, #88]	; (1ec8 <usb_transfer+0xe4>)
    1e70:	f009 fe3a 	bl	bae8 <k_work_submit_to_queue>
	int i, key, ret = 0;
    1e74:	f04f 0a00 	mov.w	sl, #0
	__asm__ volatile(
    1e78:	f389 8811 	msr	BASEPRI, r9
    1e7c:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    1e80:	4650      	mov	r0, sl
    1e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		k_sem_give(&trans->sem);
    1e86:	f104 001c 	add.w	r0, r4, #28
	z_impl_k_sem_give(sem);
    1e8a:	f006 fab3 	bl	83f4 <z_impl_k_sem_give>
		goto done;
    1e8e:	e7f3      	b.n	1e78 <usb_transfer+0x94>
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    1e90:	4628      	mov	r0, r5
    1e92:	f002 f90b 	bl	40ac <usb_dc_ep_mps>
    1e96:	fbb7 f3f0 	udiv	r3, r7, r0
    1e9a:	fb00 7013 	mls	r0, r0, r3, r7
    1e9e:	2800      	cmp	r0, #0
    1ea0:	d0e0      	beq.n	1e64 <usb_transfer+0x80>
		trans->flags |= USB_TRANS_NO_ZLP;
    1ea2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1ea4:	f043 0304 	orr.w	r3, r3, #4
    1ea8:	63e3      	str	r3, [r4, #60]	; 0x3c
    1eaa:	e7db      	b.n	1e64 <usb_transfer+0x80>
		ret = usb_dc_ep_read_continue(ep);
    1eac:	4628      	mov	r0, r5
    1eae:	f002 f85d 	bl	3f6c <usb_dc_ep_read_continue>
    1eb2:	4682      	mov	sl, r0
    1eb4:	e7e0      	b.n	1e78 <usb_transfer+0x94>
		ret = -ENOMEM;
    1eb6:	f06f 0a0b 	mvn.w	sl, #11
    1eba:	e7dd      	b.n	1e78 <usb_transfer+0x94>
		return -EBUSY;
    1ebc:	f06f 0a0f 	mvn.w	sl, #15
    1ec0:	e7de      	b.n	1e80 <usb_transfer+0x9c>
    1ec2:	bf00      	nop
    1ec4:	20000880 	.word	0x20000880
    1ec8:	200003b0 	.word	0x200003b0

00001ecc <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    1ecc:	b510      	push	{r4, lr}
	__asm__ volatile(
    1ece:	f04f 0320 	mov.w	r3, #32
    1ed2:	f3ef 8411 	mrs	r4, BASEPRI
    1ed6:	f383 8812 	msr	BASEPRI_MAX, r3
    1eda:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    1ede:	f7ff fea5 	bl	1c2c <usb_ep_get_transfer>
	if (!trans) {
    1ee2:	b120      	cbz	r0, 1eee <usb_cancel_transfer+0x22>
    1ee4:	4601      	mov	r1, r0
		goto done;
	}

	if (trans->status != -EBUSY) {
    1ee6:	6843      	ldr	r3, [r0, #4]
    1ee8:	f113 0f10 	cmn.w	r3, #16
    1eec:	d004      	beq.n	1ef8 <usb_cancel_transfer+0x2c>
	__asm__ volatile(
    1eee:	f384 8811 	msr	BASEPRI, r4
    1ef2:	f3bf 8f6f 	isb	sy
	trans->status = -ECANCELED;
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);

done:
	irq_unlock(key);
}
    1ef6:	bd10      	pop	{r4, pc}
	trans->status = -ECANCELED;
    1ef8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    1efc:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    1efe:	312c      	adds	r1, #44	; 0x2c
    1f00:	4801      	ldr	r0, [pc, #4]	; (1f08 <usb_cancel_transfer+0x3c>)
    1f02:	f009 fdf1 	bl	bae8 <k_work_submit_to_queue>
    1f06:	e7f2      	b.n	1eee <usb_cancel_transfer+0x22>
    1f08:	200003b0 	.word	0x200003b0

00001f0c <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    1f0c:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    1f0e:	2400      	movs	r4, #0
    1f10:	e011      	b.n	1f36 <usb_cancel_transfers+0x2a>
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
    1f12:	4b12      	ldr	r3, [pc, #72]	; (1f5c <usb_cancel_transfers+0x50>)
    1f14:	01a1      	lsls	r1, r4, #6
    1f16:	eb03 1284 	add.w	r2, r3, r4, lsl #6
    1f1a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    1f1e:	6050      	str	r0, [r2, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    1f20:	3128      	adds	r1, #40	; 0x28
    1f22:	4419      	add	r1, r3
    1f24:	3104      	adds	r1, #4
    1f26:	480e      	ldr	r0, [pc, #56]	; (1f60 <usb_cancel_transfers+0x54>)
    1f28:	f009 fdde 	bl	bae8 <k_work_submit_to_queue>
    1f2c:	f385 8811 	msr	BASEPRI, r5
    1f30:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    1f34:	3401      	adds	r4, #1
    1f36:	2c03      	cmp	r4, #3
    1f38:	dc0f      	bgt.n	1f5a <usb_cancel_transfers+0x4e>
	__asm__ volatile(
    1f3a:	f04f 0320 	mov.w	r3, #32
    1f3e:	f3ef 8511 	mrs	r5, BASEPRI
    1f42:	f383 8812 	msr	BASEPRI_MAX, r3
    1f46:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    1f4a:	4b04      	ldr	r3, [pc, #16]	; (1f5c <usb_cancel_transfers+0x50>)
    1f4c:	eb03 1384 	add.w	r3, r3, r4, lsl #6
    1f50:	685b      	ldr	r3, [r3, #4]
    1f52:	f113 0f10 	cmn.w	r3, #16
    1f56:	d1e9      	bne.n	1f2c <usb_cancel_transfers+0x20>
    1f58:	e7db      	b.n	1f12 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    1f5a:	bd38      	pop	{r3, r4, r5, pc}
    1f5c:	20000880 	.word	0x20000880
    1f60:	200003b0 	.word	0x200003b0

00001f64 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    1f64:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    1f66:	2600      	movs	r6, #0
    1f68:	e011      	b.n	1f8e <usb_transfer_init+0x2a>
		k_work_init(&ut_data[i].work, usb_transfer_work);
    1f6a:	4c0b      	ldr	r4, [pc, #44]	; (1f98 <usb_transfer_init+0x34>)
    1f6c:	01b5      	lsls	r5, r6, #6
    1f6e:	f105 0028 	add.w	r0, r5, #40	; 0x28
    1f72:	4420      	add	r0, r4
    1f74:	4909      	ldr	r1, [pc, #36]	; (1f9c <usb_transfer_init+0x38>)
    1f76:	3004      	adds	r0, #4
    1f78:	f009 fdb0 	bl	badc <k_work_init>
		k_sem_init(&ut_data[i].sem, 1, 1);
    1f7c:	f105 0018 	add.w	r0, r5, #24
    1f80:	4420      	add	r0, r4
    1f82:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
    1f84:	2201      	movs	r2, #1
    1f86:	4611      	mov	r1, r2
    1f88:	f009 fd99 	bl	babe <z_impl_k_sem_init>
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    1f8c:	3601      	adds	r6, #1
    1f8e:	2e03      	cmp	r6, #3
    1f90:	ddeb      	ble.n	1f6a <usb_transfer_init+0x6>
	}

	return 0;
}
    1f92:	2000      	movs	r0, #0
    1f94:	bd70      	pop	{r4, r5, r6, pc}
    1f96:	bf00      	nop
    1f98:	20000880 	.word	0x20000880
    1f9c:	00001c59 	.word	0x00001c59

00001fa0 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    1fa0:	b570      	push	{r4, r5, r6, lr}
    1fa2:	4604      	mov	r4, r0
    1fa4:	460e      	mov	r6, r1
    1fa6:	4615      	mov	r5, r2
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    1fa8:	7901      	ldrb	r1, [r0, #4]
    1faa:	4816      	ldr	r0, [pc, #88]	; (2004 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4>)
    1fac:	f008 fb71 	bl	a692 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    1fb0:	b308      	cbz	r0, 1ff6 <cdc_acm_class_handle_req+0x56>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    1fb2:	f994 2000 	ldrsb.w	r2, [r4]
    1fb6:	2a00      	cmp	r2, #0
    1fb8:	db13      	blt.n	1fe2 <cdc_acm_class_handle_req+0x42>
		switch (setup->bRequest) {
    1fba:	7862      	ldrb	r2, [r4, #1]
    1fbc:	2a20      	cmp	r2, #32
    1fbe:	d004      	beq.n	1fca <cdc_acm_class_handle_req+0x2a>
    1fc0:	2a22      	cmp	r2, #34	; 0x22
    1fc2:	d009      	beq.n	1fd8 <cdc_acm_class_handle_req+0x38>
    1fc4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1fc8:	e014      	b.n	1ff4 <cdc_acm_class_handle_req+0x54>
		case SET_LINE_CODING:
			rate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
			memcpy(&dev_data->line_coding, *data,
    1fca:	2207      	movs	r2, #7
    1fcc:	6829      	ldr	r1, [r5, #0]
    1fce:	380c      	subs	r0, #12
    1fd0:	f008 fd99 	bl	ab06 <memcpy>
#if defined(CONFIG_CDC_ACM_DTE_RATE_CALLBACK_SUPPORT)
			if (rate != new_rate && dev_data->rate_cb != NULL) {
				dev_data->rate_cb(common->dev, new_rate);
			}
#endif
			return 0;
    1fd4:	2000      	movs	r0, #0
    1fd6:	e00d      	b.n	1ff4 <cdc_acm_class_handle_req+0x54>

		case SET_CONTROL_LINE_STATE:
			dev_data->line_state = (uint8_t)setup->wValue;
    1fd8:	78a2      	ldrb	r2, [r4, #2]
    1fda:	f800 2c05 	strb.w	r2, [r0, #-5]
			LOG_DBG("CDC_SET_CONTROL_LINE_STATE 0x%x",
				dev_data->line_state);
			return 0;
    1fde:	2000      	movs	r0, #0
    1fe0:	e008      	b.n	1ff4 <cdc_acm_class_handle_req+0x54>

		default:
			break;
		}
	} else {
		if (setup->bRequest == GET_LINE_CODING) {
    1fe2:	7862      	ldrb	r2, [r4, #1]
    1fe4:	2a21      	cmp	r2, #33	; 0x21
    1fe6:	d109      	bne.n	1ffc <cdc_acm_class_handle_req+0x5c>
			*data = (uint8_t *)(&dev_data->line_coding);
    1fe8:	f1a0 030c 	sub.w	r3, r0, #12
    1fec:	602b      	str	r3, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    1fee:	2307      	movs	r3, #7
    1ff0:	6033      	str	r3, [r6, #0]
			LOG_DBG("CDC_GET_LINE_CODING %d %d %d %d",
				sys_le32_to_cpu(dev_data->line_coding.dwDTERate),
				dev_data->line_coding.bCharFormat,
				dev_data->line_coding.bParityType,
				dev_data->line_coding.bDataBits);
			return 0;
    1ff2:	2000      	movs	r0, #0
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
}
    1ff4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    1ff6:	f06f 0012 	mvn.w	r0, #18
    1ffa:	e7fb      	b.n	1ff4 <cdc_acm_class_handle_req+0x54>
	return -ENOTSUP;
    1ffc:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2000:	e7f8      	b.n	1ff4 <cdc_acm_class_handle_req+0x54>
    2002:	bf00      	nop
    2004:	20000980 	.word	0x20000980

00002008 <cdc_acm_int_in>:
 * @param ep_status Endpoint status code.
 *
 * @return  N/A.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    2008:	b508      	push	{r3, lr}
    200a:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    200c:	4803      	ldr	r0, [pc, #12]	; (201c <cdc_acm_int_in+0x14>)
    200e:	f008 fb54 	bl	a6ba <usb_get_dev_data_by_ep>
	if (common == NULL) {
    2012:	b110      	cbz	r0, 201a <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    2014:	2201      	movs	r2, #1
    2016:	f800 2c03 	strb.w	r2, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    201a:	bd08      	pop	{r3, pc}
    201c:	20000980 	.word	0x20000980

00002020 <cdc_acm_irq_rx_enable>:
 * @param dev CDC ACM device struct.
 *
 * @return N/A
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
    2020:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    2022:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    2024:	2301      	movs	r3, #1
    2026:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    202a:	680b      	ldr	r3, [r1, #0]
    202c:	b113      	cbz	r3, 2034 <cdc_acm_irq_rx_enable+0x14>
    202e:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    2032:	b903      	cbnz	r3, 2036 <cdc_acm_irq_rx_enable+0x16>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
	}
}
    2034:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2036:	3108      	adds	r1, #8
    2038:	4801      	ldr	r0, [pc, #4]	; (2040 <cdc_acm_irq_rx_enable+0x20>)
    203a:	f009 fd55 	bl	bae8 <k_work_submit_to_queue>
}
    203e:	e7f9      	b.n	2034 <cdc_acm_irq_rx_enable+0x14>
    2040:	200003b0 	.word	0x200003b0

00002044 <cdc_acm_irq_tx_enable>:
{
    2044:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    2046:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    2048:	2301      	movs	r3, #1
    204a:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    204e:	680b      	ldr	r3, [r1, #0]
    2050:	b113      	cbz	r3, 2058 <cdc_acm_irq_tx_enable+0x14>
    2052:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    2056:	b903      	cbnz	r3, 205a <cdc_acm_irq_tx_enable+0x16>
}
    2058:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    205a:	3108      	adds	r1, #8
    205c:	4801      	ldr	r0, [pc, #4]	; (2064 <cdc_acm_irq_tx_enable+0x20>)
    205e:	f009 fd43 	bl	bae8 <k_work_submit_to_queue>
}
    2062:	e7f9      	b.n	2058 <cdc_acm_irq_tx_enable+0x14>
    2064:	200003b0 	.word	0x200003b0

00002068 <cdc_acm_reset_port>:
{
    2068:	b510      	push	{r4, lr}
    206a:	4603      	mov	r3, r0
	dev_data->configured = false;
    206c:	2400      	movs	r4, #0
    206e:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
	dev_data->suspended = false;
    2072:	f880 407f 	strb.w	r4, [r0, #127]	; 0x7f
	dev_data->rx_ready = false;
    2076:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
	dev_data->tx_ready = false;
    207a:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    207e:	4a0a      	ldr	r2, [pc, #40]	; (20a8 <cdc_acm_reset_port+0x40>)
    2080:	e892 0003 	ldmia.w	r2, {r0, r1}
    2084:	6758      	str	r0, [r3, #116]	; 0x74
    2086:	f8a3 1078 	strh.w	r1, [r3, #120]	; 0x78
    208a:	0c09      	lsrs	r1, r1, #16
    208c:	f883 107a 	strb.w	r1, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
    2090:	f883 407c 	strb.w	r4, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
    2094:	f883 407b 	strb.w	r4, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    2098:	2240      	movs	r2, #64	; 0x40
    209a:	4621      	mov	r1, r4
    209c:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    20a0:	f008 fd55 	bl	ab4e <memset>
}
    20a4:	bd10      	pop	{r4, pc}
    20a6:	bf00      	nop
    20a8:	0000c410 	.word	0x0000c410

000020ac <cdc_acm_fifo_fill>:
{
    20ac:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    20ae:	6904      	ldr	r4, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    20b0:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    20b4:	b18b      	cbz	r3, 20da <cdc_acm_fifo_fill+0x2e>
    20b6:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    20ba:	b10b      	cbz	r3, 20c0 <cdc_acm_fifo_fill+0x14>
		return 0;
    20bc:	2000      	movs	r0, #0
    20be:	e00d      	b.n	20dc <cdc_acm_fifo_fill+0x30>
	dev_data->tx_ready = false;
    20c0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    20c4:	6f20      	ldr	r0, [r4, #112]	; 0x70
    20c6:	f008 f915 	bl	a2f4 <ring_buf_put>
    20ca:	4605      	mov	r5, r0
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    20cc:	f104 0118 	add.w	r1, r4, #24
    20d0:	4803      	ldr	r0, [pc, #12]	; (20e0 <cdc_acm_fifo_fill+0x34>)
    20d2:	f009 fd09 	bl	bae8 <k_work_submit_to_queue>
	return wrote;
    20d6:	4628      	mov	r0, r5
    20d8:	e000      	b.n	20dc <cdc_acm_fifo_fill+0x30>
		return 0;
    20da:	2000      	movs	r0, #0
}
    20dc:	bd38      	pop	{r3, r4, r5, pc}
    20de:	bf00      	nop
    20e0:	200003b0 	.word	0x200003b0

000020e4 <cdc_acm_read_cb>:
{
    20e4:	b530      	push	{r4, r5, lr}
    20e6:	b083      	sub	sp, #12
    20e8:	4605      	mov	r5, r0
    20ea:	4614      	mov	r4, r2
	if (size <= 0) {
    20ec:	1e0a      	subs	r2, r1, #0
    20ee:	dd0c      	ble.n	210a <cdc_acm_read_cb+0x26>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    20f0:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    20f4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    20f6:	f008 f8fd 	bl	a2f4 <ring_buf_put>
	dev_data->rx_ready = true;
    20fa:	2301      	movs	r3, #1
    20fc:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    2100:	6823      	ldr	r3, [r4, #0]
    2102:	b113      	cbz	r3, 210a <cdc_acm_read_cb+0x26>
    2104:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    2108:	b95b      	cbnz	r3, 2122 <cdc_acm_read_cb+0x3e>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    210a:	9401      	str	r4, [sp, #4]
    210c:	4b08      	ldr	r3, [pc, #32]	; (2130 <cdc_acm_read_cb+0x4c>)
    210e:	9300      	str	r3, [sp, #0]
    2110:	2301      	movs	r3, #1
    2112:	2240      	movs	r2, #64	; 0x40
    2114:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    2118:	4628      	mov	r0, r5
    211a:	f7ff fe63 	bl	1de4 <usb_transfer>
}
    211e:	b003      	add	sp, #12
    2120:	bd30      	pop	{r4, r5, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2122:	f104 0108 	add.w	r1, r4, #8
    2126:	4803      	ldr	r0, [pc, #12]	; (2134 <cdc_acm_read_cb+0x50>)
    2128:	f009 fcde 	bl	bae8 <k_work_submit_to_queue>
    212c:	e7ed      	b.n	210a <cdc_acm_read_cb+0x26>
    212e:	bf00      	nop
    2130:	000020e5 	.word	0x000020e5
    2134:	200003b0 	.word	0x200003b0

00002138 <cdc_acm_do_cb>:
{
    2138:	b510      	push	{r4, lr}
    213a:	4604      	mov	r4, r0
	const struct device *dev = dev_data->common.dev;
    213c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	struct usb_cfg_data *cfg = (void *)dev->config;
    2140:	685b      	ldr	r3, [r3, #4]
	switch (status) {
    2142:	3901      	subs	r1, #1
    2144:	2905      	cmp	r1, #5
    2146:	d806      	bhi.n	2156 <cdc_acm_do_cb+0x1e>
    2148:	e8df f001 	tbb	[pc, r1]
    214c:	27060503 	.word	0x27060503
    2150:	2e2a      	.short	0x2e2a
		cdc_acm_reset_port(dev_data);
    2152:	f7ff ff89 	bl	2068 <cdc_acm_reset_port>
}
    2156:	bd10      	pop	{r4, pc}
		if (!dev_data->configured) {
    2158:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    215c:	b19a      	cbz	r2, 2186 <cdc_acm_do_cb+0x4e>
		if (!dev_data->tx_ready) {
    215e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2162:	2b00      	cmp	r3, #0
    2164:	d1f7      	bne.n	2156 <cdc_acm_do_cb+0x1e>
			dev_data->tx_ready = true;
    2166:	2301      	movs	r3, #1
    2168:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    216c:	6823      	ldr	r3, [r4, #0]
    216e:	2b00      	cmp	r3, #0
    2170:	d0f1      	beq.n	2156 <cdc_acm_do_cb+0x1e>
    2172:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    2176:	2b00      	cmp	r3, #0
    2178:	d0ed      	beq.n	2156 <cdc_acm_do_cb+0x1e>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    217a:	f104 0108 	add.w	r1, r4, #8
    217e:	4813      	ldr	r0, [pc, #76]	; (21cc <cdc_acm_do_cb+0x94>)
    2180:	f009 fcb2 	bl	bae8 <k_work_submit_to_queue>
    2184:	e7e7      	b.n	2156 <cdc_acm_do_cb+0x1e>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    2186:	6a1b      	ldr	r3, [r3, #32]
    2188:	4602      	mov	r2, r0
    218a:	2100      	movs	r1, #0
    218c:	7b18      	ldrb	r0, [r3, #12]
    218e:	f7ff ffa9 	bl	20e4 <cdc_acm_read_cb>
			dev_data->configured = true;
    2192:	2301      	movs	r3, #1
    2194:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
    2198:	e7e1      	b.n	215e <cdc_acm_do_cb+0x26>
		cdc_acm_reset_port(dev_data);
    219a:	f7ff ff65 	bl	2068 <cdc_acm_reset_port>
		break;
    219e:	e7da      	b.n	2156 <cdc_acm_do_cb+0x1e>
		dev_data->suspended = true;
    21a0:	2301      	movs	r3, #1
    21a2:	f880 307f 	strb.w	r3, [r0, #127]	; 0x7f
		break;
    21a6:	e7d6      	b.n	2156 <cdc_acm_do_cb+0x1e>
		if (dev_data->suspended) {
    21a8:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    21ac:	2a00      	cmp	r2, #0
    21ae:	d0d2      	beq.n	2156 <cdc_acm_do_cb+0x1e>
			dev_data->suspended = false;
    21b0:	2200      	movs	r2, #0
    21b2:	f880 207f 	strb.w	r2, [r0, #127]	; 0x7f
			if (dev_data->configured) {
    21b6:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    21ba:	2a00      	cmp	r2, #0
    21bc:	d0cb      	beq.n	2156 <cdc_acm_do_cb+0x1e>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    21be:	6a1b      	ldr	r3, [r3, #32]
    21c0:	4602      	mov	r2, r0
    21c2:	2100      	movs	r1, #0
    21c4:	7b18      	ldrb	r0, [r3, #12]
    21c6:	f7ff ff8d 	bl	20e4 <cdc_acm_read_cb>
}
    21ca:	e7c4      	b.n	2156 <cdc_acm_do_cb+0x1e>
    21cc:	200003b0 	.word	0x200003b0

000021d0 <cdc_acm_dev_status_cb>:
{
    21d0:	b538      	push	{r3, r4, r5, lr}
    21d2:	460c      	mov	r4, r1
    21d4:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    21d6:	4601      	mov	r1, r0
    21d8:	4804      	ldr	r0, [pc, #16]	; (21ec <cdc_acm_dev_status_cb+0x1c>)
    21da:	f008 fa48 	bl	a66e <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    21de:	b120      	cbz	r0, 21ea <cdc_acm_dev_status_cb+0x1a>
	cdc_acm_do_cb(dev_data, status, param);
    21e0:	462a      	mov	r2, r5
    21e2:	4621      	mov	r1, r4
    21e4:	3880      	subs	r0, #128	; 0x80
    21e6:	f7ff ffa7 	bl	2138 <cdc_acm_do_cb>
}
    21ea:	bd38      	pop	{r3, r4, r5, pc}
    21ec:	20000980 	.word	0x20000980

000021f0 <cdc_acm_send_notification>:
 *
 * @return  N/A.
 */
static int cdc_acm_send_notification(const struct device *dev,
				     uint16_t serial_state)
{
    21f0:	b530      	push	{r4, r5, lr}
    21f2:	b085      	sub	sp, #20
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    21f4:	6905      	ldr	r5, [r0, #16]
	struct usb_cfg_data * const cfg = (void *)dev->config;
    21f6:	6843      	ldr	r3, [r0, #4]
	struct cdc_acm_notification notification;
	uint32_t cnt = 0U;

	notification.bmRequestType = 0xA1;
    21f8:	22a1      	movs	r2, #161	; 0xa1
    21fa:	f88d 2004 	strb.w	r2, [sp, #4]
	notification.bNotificationType = 0x20;
    21fe:	2220      	movs	r2, #32
    2200:	f88d 2005 	strb.w	r2, [sp, #5]
	notification.wValue = 0U;
    2204:	2400      	movs	r4, #0
    2206:	f8ad 4006 	strh.w	r4, [sp, #6]
	notification.wIndex = 0U;
    220a:	f8ad 4008 	strh.w	r4, [sp, #8]
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    220e:	2202      	movs	r2, #2
    2210:	f8ad 200a 	strh.w	r2, [sp, #10]
	notification.data = sys_cpu_to_le16(serial_state);
    2214:	f8ad 100c 	strh.w	r1, [sp, #12]

	dev_data->notification_sent = 0U;
    2218:	f885 407d 	strb.w	r4, [r5, #125]	; 0x7d

	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    221c:	6a18      	ldr	r0, [r3, #32]
    221e:	4623      	mov	r3, r4
    2220:	220a      	movs	r2, #10
    2222:	a901      	add	r1, sp, #4
    2224:	7900      	ldrb	r0, [r0, #4]
    2226:	f008 f98b 	bl	a540 <usb_write>
		  (const uint8_t *)&notification, sizeof(notification), NULL);

	/* Wait for notification to be sent */
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    222a:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    222e:	b94b      	cbnz	r3, 2244 <cdc_acm_send_notification+0x54>
	z_impl_k_busy_wait(usec_to_wait);
    2230:	2001      	movs	r0, #1
    2232:	f009 fe5a 	bl	beea <z_impl_k_busy_wait>
		k_busy_wait(1);

		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    2236:	3401      	adds	r4, #1
    2238:	4b04      	ldr	r3, [pc, #16]	; (224c <cdc_acm_send_notification+0x5c>)
    223a:	429c      	cmp	r4, r3
    223c:	d9f5      	bls.n	222a <cdc_acm_send_notification+0x3a>
			LOG_DBG("CDC ACM notification timeout!");
			return -EIO;
    223e:	f06f 0004 	mvn.w	r0, #4
    2242:	e000      	b.n	2246 <cdc_acm_send_notification+0x56>
		}
	}

	return 0;
    2244:	2000      	movs	r0, #0
}
    2246:	b005      	add	sp, #20
    2248:	bd30      	pop	{r4, r5, pc}
    224a:	bf00      	nop
    224c:	000186a0 	.word	0x000186a0

00002250 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    2250:	b510      	push	{r4, lr}
    2252:	b082      	sub	sp, #8
    2254:	f88d 1007 	strb.w	r1, [sp, #7]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2258:	6904      	ldr	r4, [r0, #16]

	if (!dev_data->configured || dev_data->suspended) {
    225a:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    225e:	b113      	cbz	r3, 2266 <cdc_acm_poll_out+0x16>
    2260:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    2264:	b10b      	cbz	r3, 226a <cdc_acm_poll_out+0x1a>
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
}
    2266:	b002      	add	sp, #8
    2268:	bd10      	pop	{r4, pc}
	dev_data->tx_ready = false;
    226a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    226e:	2201      	movs	r2, #1
    2270:	f10d 0107 	add.w	r1, sp, #7
    2274:	6f20      	ldr	r0, [r4, #112]	; 0x70
    2276:	f008 f83d 	bl	a2f4 <ring_buf_put>
    227a:	b970      	cbnz	r0, 229a <cdc_acm_poll_out+0x4a>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    227c:	2201      	movs	r2, #1
    227e:	2100      	movs	r1, #0
    2280:	6f20      	ldr	r0, [r4, #112]	; 0x70
    2282:	f008 f8a1 	bl	a3c8 <ring_buf_get>
    2286:	2800      	cmp	r0, #0
    2288:	d0ed      	beq.n	2266 <cdc_acm_poll_out+0x16>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    228a:	2201      	movs	r2, #1
    228c:	f10d 0107 	add.w	r1, sp, #7
    2290:	6f20      	ldr	r0, [r4, #112]	; 0x70
    2292:	f008 f82f 	bl	a2f4 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    2296:	2800      	cmp	r0, #0
    2298:	d0e5      	beq.n	2266 <cdc_acm_poll_out+0x16>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    229a:	f104 0118 	add.w	r1, r4, #24
    229e:	4802      	ldr	r0, [pc, #8]	; (22a8 <cdc_acm_poll_out+0x58>)
    22a0:	f009 fc22 	bl	bae8 <k_work_submit_to_queue>
    22a4:	e7df      	b.n	2266 <cdc_acm_poll_out+0x16>
    22a6:	bf00      	nop
    22a8:	200003b0 	.word	0x200003b0

000022ac <cdc_acm_write_cb>:
{
    22ac:	b510      	push	{r4, lr}
    22ae:	4614      	mov	r4, r2
	dev_data->tx_ready = true;
    22b0:	2301      	movs	r3, #1
    22b2:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    22b6:	6813      	ldr	r3, [r2, #0]
    22b8:	b113      	cbz	r3, 22c0 <cdc_acm_write_cb+0x14>
    22ba:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    22be:	b923      	cbnz	r3, 22ca <cdc_acm_write_cb+0x1e>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    22c0:	6f20      	ldr	r0, [r4, #112]	; 0x70
    22c2:	f007 ffc9 	bl	a258 <ring_buf_is_empty>
    22c6:	b130      	cbz	r0, 22d6 <cdc_acm_write_cb+0x2a>
}
    22c8:	bd10      	pop	{r4, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    22ca:	f102 0108 	add.w	r1, r2, #8
    22ce:	4805      	ldr	r0, [pc, #20]	; (22e4 <cdc_acm_write_cb+0x38>)
    22d0:	f009 fc0a 	bl	bae8 <k_work_submit_to_queue>
    22d4:	e7f4      	b.n	22c0 <cdc_acm_write_cb+0x14>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    22d6:	f104 0118 	add.w	r1, r4, #24
    22da:	4802      	ldr	r0, [pc, #8]	; (22e4 <cdc_acm_write_cb+0x38>)
    22dc:	f009 fc04 	bl	bae8 <k_work_submit_to_queue>
    22e0:	e7f2      	b.n	22c8 <cdc_acm_write_cb+0x1c>
    22e2:	bf00      	nop
    22e4:	200003b0 	.word	0x200003b0

000022e8 <cdc_acm_init>:
{
    22e8:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    22ea:	6904      	ldr	r4, [r0, #16]
	dev_data->common.dev = dev;
    22ec:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    22f0:	f104 0384 	add.w	r3, r4, #132	; 0x84
	parent->next = child;
    22f4:	2200      	movs	r2, #0
    22f6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    22fa:	4a0b      	ldr	r2, [pc, #44]	; (2328 <cdc_acm_init+0x40>)
    22fc:	6852      	ldr	r2, [r2, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    22fe:	b172      	cbz	r2, 231e <cdc_acm_init+0x36>
	parent->next = child;
    2300:	6013      	str	r3, [r2, #0]
	list->tail = node;
    2302:	4a09      	ldr	r2, [pc, #36]	; (2328 <cdc_acm_init+0x40>)
    2304:	6053      	str	r3, [r2, #4]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    2306:	4909      	ldr	r1, [pc, #36]	; (232c <cdc_acm_init+0x44>)
    2308:	f104 0008 	add.w	r0, r4, #8
    230c:	f009 fbe6 	bl	badc <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    2310:	4907      	ldr	r1, [pc, #28]	; (2330 <cdc_acm_init+0x48>)
    2312:	f104 0018 	add.w	r0, r4, #24
    2316:	f009 fbe1 	bl	badc <k_work_init>
}
    231a:	2000      	movs	r0, #0
    231c:	bd10      	pop	{r4, pc}
    231e:	4a02      	ldr	r2, [pc, #8]	; (2328 <cdc_acm_init+0x40>)
    2320:	6053      	str	r3, [r2, #4]
	list->head = node;
    2322:	6013      	str	r3, [r2, #0]
}
    2324:	e7ef      	b.n	2306 <cdc_acm_init+0x1e>
    2326:	bf00      	nop
    2328:	20000980 	.word	0x20000980
    232c:	0000a72b 	.word	0x0000a72b
    2330:	00002335 	.word	0x00002335

00002334 <tx_work_handler>:
{
    2334:	b5f0      	push	{r4, r5, r6, r7, lr}
    2336:	b085      	sub	sp, #20
    2338:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data =
    233a:	f1a0 0718 	sub.w	r7, r0, #24
	const struct device *dev = dev_data->common.dev;
    233e:	6e83      	ldr	r3, [r0, #104]	; 0x68
	struct usb_cfg_data *cfg = (void *)dev->config;
    2340:	685b      	ldr	r3, [r3, #4]
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    2342:	6a1b      	ldr	r3, [r3, #32]
    2344:	7d1d      	ldrb	r5, [r3, #20]
	if (usb_transfer_is_busy(ep)) {
    2346:	4628      	mov	r0, r5
    2348:	f008 f9d7 	bl	a6fa <usb_transfer_is_busy>
    234c:	b108      	cbz	r0, 2352 <tx_work_handler+0x1e>
}
    234e:	b005      	add	sp, #20
    2350:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    2352:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2356:	a903      	add	r1, sp, #12
    2358:	6da0      	ldr	r0, [r4, #88]	; 0x58
    235a:	f007 ffeb 	bl	a334 <ring_buf_get_claim>
	if (!len) {
    235e:	4606      	mov	r6, r0
    2360:	2800      	cmp	r0, #0
    2362:	d0f4      	beq.n	234e <tx_work_handler+0x1a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    2364:	f010 0f3f 	tst.w	r0, #63	; 0x3f
    2368:	d100      	bne.n	236c <tx_work_handler+0x38>
		len -= 1;
    236a:	1e46      	subs	r6, r0, #1
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    236c:	9701      	str	r7, [sp, #4]
    236e:	4b06      	ldr	r3, [pc, #24]	; (2388 <tx_work_handler+0x54>)
    2370:	9300      	str	r3, [sp, #0]
    2372:	2302      	movs	r3, #2
    2374:	4632      	mov	r2, r6
    2376:	9903      	ldr	r1, [sp, #12]
    2378:	4628      	mov	r0, r5
    237a:	f7ff fd33 	bl	1de4 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    237e:	4631      	mov	r1, r6
    2380:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2382:	f008 f803 	bl	a38c <ring_buf_get_finish>
    2386:	e7e2      	b.n	234e <tx_work_handler+0x1a>
    2388:	000022ad 	.word	0x000022ad

0000238c <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    238c:	b530      	push	{r4, r5, lr}
    238e:	b083      	sub	sp, #12
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    2390:	4d08      	ldr	r5, [pc, #32]	; (23b4 <z_usb_work_q_init+0x28>)
    2392:	2400      	movs	r4, #0
    2394:	9400      	str	r4, [sp, #0]
    2396:	f04f 33ff 	mov.w	r3, #4294967295
    239a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    239e:	4906      	ldr	r1, [pc, #24]	; (23b8 <z_usb_work_q_init+0x2c>)
    23a0:	4628      	mov	r0, r5
    23a2:	f006 f995 	bl	86d0 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    23a6:	4905      	ldr	r1, [pc, #20]	; (23bc <z_usb_work_q_init+0x30>)
    23a8:	4628      	mov	r0, r5
    23aa:	f005 fe2b 	bl	8004 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    23ae:	4620      	mov	r0, r4
    23b0:	b003      	add	sp, #12
    23b2:	bd30      	pop	{r4, r5, pc}
    23b4:	200003b0 	.word	0x200003b0
    23b8:	20001ce0 	.word	0x20001ce0
    23bc:	0000c4e8 	.word	0x0000c4e8

000023c0 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    23c0:	b570      	push	{r4, r5, r6, lr}
    23c2:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
    23c4:	4b2a      	ldr	r3, [pc, #168]	; (2470 <pm_system_resume+0xb0>)
    23c6:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    23c8:	f004 031f 	and.w	r3, r4, #31
    23cc:	2201      	movs	r2, #1
    23ce:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    23d0:	0961      	lsrs	r1, r4, #5
    23d2:	4b28      	ldr	r3, [pc, #160]	; (2474 <pm_system_resume+0xb4>)
    23d4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    23d8:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    23da:	e8d3 1fef 	ldaex	r1, [r3]
    23de:	ea01 0500 	and.w	r5, r1, r0
    23e2:	e8c3 5fe6 	stlex	r6, r5, [r3]
    23e6:	2e00      	cmp	r6, #0
    23e8:	d1f7      	bne.n	23da <pm_system_resume+0x1a>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    23ea:	420a      	tst	r2, r1
    23ec:	d03d      	beq.n	246a <pm_system_resume+0xaa>
		exit_pos_ops(z_power_states[id]);
    23ee:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    23f2:	009a      	lsls	r2, r3, #2
    23f4:	4b20      	ldr	r3, [pc, #128]	; (2478 <pm_system_resume+0xb8>)
    23f6:	4413      	add	r3, r2
    23f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    23fc:	ab04      	add	r3, sp, #16
    23fe:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    2402:	4b1e      	ldr	r3, [pc, #120]	; (247c <pm_system_resume+0xbc>)
    2404:	b163      	cbz	r3, 2420 <pm_system_resume+0x60>
		pm_power_state_exit_post_ops(info);
    2406:	f008 f803 	bl	a410 <pm_power_state_exit_post_ops>
    240a:	f04f 0320 	mov.w	r3, #32
    240e:	f3ef 8611 	mrs	r6, BASEPRI
    2412:	f383 8812 	msr	BASEPRI_MAX, r3
    2416:	f3bf 8f6f 	isb	sy
	return list->head;
    241a:	4b19      	ldr	r3, [pc, #100]	; (2480 <pm_system_resume+0xc0>)
    241c:	681d      	ldr	r5, [r3, #0]
    241e:	e00a      	b.n	2436 <pm_system_resume+0x76>
	__asm__ volatile(
    2420:	2300      	movs	r3, #0
    2422:	f383 8811 	msr	BASEPRI, r3
    2426:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    242a:	e7ee      	b.n	240a <pm_system_resume+0x4a>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    242c:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    242e:	b10d      	cbz	r5, 2434 <pm_system_resume+0x74>
	return node->next;
    2430:	682b      	ldr	r3, [r5, #0]
    2432:	b16b      	cbz	r3, 2450 <pm_system_resume+0x90>
{
    2434:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2436:	b15d      	cbz	r5, 2450 <pm_system_resume+0x90>
			callback = notifier->state_exit;
    2438:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
    243a:	2a00      	cmp	r2, #0
    243c:	d0f6      	beq.n	242c <pm_system_resume+0x6c>
			callback(z_power_states[_current_cpu->id].state);
    243e:	4b0c      	ldr	r3, [pc, #48]	; (2470 <pm_system_resume+0xb0>)
    2440:	7d1b      	ldrb	r3, [r3, #20]
    2442:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2446:	0099      	lsls	r1, r3, #2
    2448:	4b0b      	ldr	r3, [pc, #44]	; (2478 <pm_system_resume+0xb8>)
    244a:	5c58      	ldrb	r0, [r3, r1]
    244c:	4790      	blx	r2
    244e:	e7ed      	b.n	242c <pm_system_resume+0x6c>
	__asm__ volatile(
    2450:	f386 8811 	msr	BASEPRI, r6
    2454:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2458:	4807      	ldr	r0, [pc, #28]	; (2478 <pm_system_resume+0xb8>)
    245a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    245e:	00a2      	lsls	r2, r4, #2
    2460:	1881      	adds	r1, r0, r2
    2462:	2300      	movs	r3, #0
    2464:	5083      	str	r3, [r0, r2]
    2466:	604b      	str	r3, [r1, #4]
    2468:	608b      	str	r3, [r1, #8]
			0, 0};
	}
}
    246a:	b004      	add	sp, #16
    246c:	bd70      	pop	{r4, r5, r6, pc}
    246e:	bf00      	nop
    2470:	20001abc 	.word	0x20001abc
    2474:	20000990 	.word	0x20000990
    2478:	20000994 	.word	0x20000994
    247c:	0000a411 	.word	0x0000a411
    2480:	20000988 	.word	0x20000988

00002484 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    2484:	b5f0      	push	{r4, r5, r6, r7, lr}
    2486:	b089      	sub	sp, #36	; 0x24
    2488:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    248a:	4b4e      	ldr	r3, [pc, #312]	; (25c4 <pm_system_suspend+0x140>)
    248c:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    248e:	f004 031f 	and.w	r3, r4, #31
    2492:	2201      	movs	r2, #1
    2494:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2496:	0961      	lsrs	r1, r4, #5
    2498:	4b4b      	ldr	r3, [pc, #300]	; (25c8 <pm_system_suspend+0x144>)
    249a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    249e:	e8d3 1fef 	ldaex	r1, [r3]
    24a2:	ea41 0002 	orr.w	r0, r1, r2
    24a6:	e8c3 0fe6 	stlex	r6, r0, [r3]
    24aa:	2e00      	cmp	r6, #0
    24ac:	d1f7      	bne.n	249e <pm_system_suspend+0x1a>

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    24ae:	420a      	tst	r2, r1
    24b0:	d016      	beq.n	24e0 <pm_system_suspend+0x5c>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    24b2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    24b6:	4a45      	ldr	r2, [pc, #276]	; (25cc <pm_system_suspend+0x148>)
    24b8:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    24bc:	2b00      	cmp	r3, #0
    24be:	d07f      	beq.n	25c0 <pm_system_suspend+0x13c>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    24c0:	f1b5 3fff 	cmp.w	r5, #4294967295
    24c4:	d11c      	bne.n	2500 <pm_system_suspend+0x7c>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    24c6:	f006 f9bf 	bl	8848 <k_sched_lock>
	__asm__ volatile(
    24ca:	f04f 0320 	mov.w	r3, #32
    24ce:	f3ef 8611 	mrs	r6, BASEPRI
    24d2:	f383 8812 	msr	BASEPRI_MAX, r3
    24d6:	f3bf 8f6f 	isb	sy
	return list->head;
    24da:	4b3d      	ldr	r3, [pc, #244]	; (25d0 <pm_system_suspend+0x14c>)
    24dc:	681d      	ldr	r5, [r3, #0]
    24de:	e02a      	b.n	2536 <pm_system_suspend+0xb2>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    24e0:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    24e4:	4b39      	ldr	r3, [pc, #228]	; (25cc <pm_system_suspend+0x148>)
    24e6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    24ea:	466f      	mov	r7, sp
    24ec:	462a      	mov	r2, r5
    24ee:	4621      	mov	r1, r4
    24f0:	4638      	mov	r0, r7
    24f2:	f008 fa46 	bl	a982 <pm_policy_next_state>
    24f6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    24fa:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    24fe:	e7d8      	b.n	24b2 <pm_system_suspend+0x2e>
		     k_us_to_ticks_ceil32(
    2500:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    2504:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2508:	689b      	ldr	r3, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    250a:	0c59      	lsrs	r1, r3, #17
    250c:	03d8      	lsls	r0, r3, #15
    250e:	4e31      	ldr	r6, [pc, #196]	; (25d4 <pm_system_suspend+0x150>)
    2510:	4a31      	ldr	r2, [pc, #196]	; (25d8 <pm_system_suspend+0x154>)
    2512:	2300      	movs	r3, #0
    2514:	1980      	adds	r0, r0, r6
    2516:	f04f 0600 	mov.w	r6, #0
    251a:	eb46 0101 	adc.w	r1, r6, r1
    251e:	f7fd fe19 	bl	154 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    2522:	2101      	movs	r1, #1
    2524:	1a28      	subs	r0, r5, r0
    2526:	f009 fcb1 	bl	be8c <z_set_timeout_expiry>
    252a:	e7cc      	b.n	24c6 <pm_system_suspend+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    252c:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    252e:	b10d      	cbz	r5, 2534 <pm_system_suspend+0xb0>
	return node->next;
    2530:	682b      	ldr	r3, [r5, #0]
    2532:	b16b      	cbz	r3, 2550 <pm_system_suspend+0xcc>
{
    2534:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2536:	b15d      	cbz	r5, 2550 <pm_system_suspend+0xcc>
			callback = notifier->state_entry;
    2538:	686a      	ldr	r2, [r5, #4]
		if (callback) {
    253a:	2a00      	cmp	r2, #0
    253c:	d0f6      	beq.n	252c <pm_system_suspend+0xa8>
			callback(z_power_states[_current_cpu->id].state);
    253e:	4b21      	ldr	r3, [pc, #132]	; (25c4 <pm_system_suspend+0x140>)
    2540:	7d1b      	ldrb	r3, [r3, #20]
    2542:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2546:	4921      	ldr	r1, [pc, #132]	; (25cc <pm_system_suspend+0x148>)
    2548:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    254c:	4790      	blx	r2
    254e:	e7ed      	b.n	252c <pm_system_suspend+0xa8>
	__asm__ volatile(
    2550:	f386 8811 	msr	BASEPRI, r6
    2554:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2558:	f004 031f 	and.w	r3, r4, #31
    255c:	2101      	movs	r1, #1
    255e:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2560:	0963      	lsrs	r3, r4, #5
    2562:	4a1e      	ldr	r2, [pc, #120]	; (25dc <pm_system_suspend+0x158>)
    2564:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2568:	e8d3 2fef 	ldaex	r2, [r3]
    256c:	430a      	orrs	r2, r1
    256e:	e8c3 2fe0 	stlex	r0, r2, [r3]
    2572:	2800      	cmp	r0, #0
    2574:	d1f8      	bne.n	2568 <pm_system_suspend+0xe4>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    2576:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    257a:	4a14      	ldr	r2, [pc, #80]	; (25cc <pm_system_suspend+0x148>)
    257c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2580:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2584:	ab08      	add	r3, sp, #32
    2586:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    258a:	4b15      	ldr	r3, [pc, #84]	; (25e0 <pm_system_suspend+0x15c>)
    258c:	b10b      	cbz	r3, 2592 <pm_system_suspend+0x10e>
		pm_power_state_set(info);
    258e:	f7fe fdb9 	bl	1104 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    2592:	f7ff ff15 	bl	23c0 <pm_system_resume>
	k_sched_unlock();
    2596:	f006 fb55 	bl	8c44 <k_sched_unlock>
	bool ret = true;
    259a:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    259c:	f004 021f 	and.w	r2, r4, #31
    25a0:	2301      	movs	r3, #1
    25a2:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    25a4:	0964      	lsrs	r4, r4, #5
    25a6:	4a08      	ldr	r2, [pc, #32]	; (25c8 <pm_system_suspend+0x144>)
    25a8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    25ac:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    25ae:	e8d4 2fef 	ldaex	r2, [r4]
    25b2:	401a      	ands	r2, r3
    25b4:	e8c4 2fe1 	stlex	r1, r2, [r4]
    25b8:	2900      	cmp	r1, #0
    25ba:	d1f8      	bne.n	25ae <pm_system_suspend+0x12a>
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    25bc:	b009      	add	sp, #36	; 0x24
    25be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = false;
    25c0:	2000      	movs	r0, #0
    25c2:	e7eb      	b.n	259c <pm_system_suspend+0x118>
    25c4:	20001abc 	.word	0x20001abc
    25c8:	200009a0 	.word	0x200009a0
    25cc:	20000994 	.word	0x20000994
    25d0:	20000988 	.word	0x20000988
    25d4:	000f423f 	.word	0x000f423f
    25d8:	000f4240 	.word	0x000f4240
    25dc:	20000990 	.word	0x20000990
    25e0:	00001105 	.word	0x00001105

000025e4 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    25e4:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    25e6:	4802      	ldr	r0, [pc, #8]	; (25f0 <nrf_cc3xx_platform_abort_init+0xc>)
    25e8:	f006 fee6 	bl	93b8 <nrf_cc3xx_platform_set_abort>
}
    25ec:	bd08      	pop	{r3, pc}
    25ee:	bf00      	nop
    25f0:	0000c4f4 	.word	0x0000c4f4

000025f4 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    25f4:	b308      	cbz	r0, 263a <mutex_unlock_platform+0x46>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    25f6:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    25f8:	6843      	ldr	r3, [r0, #4]
    25fa:	2b04      	cmp	r3, #4
    25fc:	d007      	beq.n	260e <mutex_unlock_platform+0x1a>
    25fe:	2b08      	cmp	r3, #8
    2600:	d012      	beq.n	2628 <mutex_unlock_platform+0x34>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2602:	b1fb      	cbz	r3, 2644 <mutex_unlock_platform+0x50>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    2604:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    2606:	f005 fe75 	bl	82f4 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    260a:	2000      	movs	r0, #0
    260c:	e014      	b.n	2638 <mutex_unlock_platform+0x44>
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    260e:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2610:	2200      	movs	r2, #0
    2612:	e8d3 1fef 	ldaex	r1, [r3]
    2616:	2901      	cmp	r1, #1
    2618:	d103      	bne.n	2622 <mutex_unlock_platform+0x2e>
    261a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    261e:	2800      	cmp	r0, #0
    2620:	d1f7      	bne.n	2612 <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2622:	d10d      	bne.n	2640 <mutex_unlock_platform+0x4c>
    2624:	4610      	mov	r0, r2
    2626:	e007      	b.n	2638 <mutex_unlock_platform+0x44>
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    2628:	6803      	ldr	r3, [r0, #0]
    262a:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    262c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    2630:	2000      	movs	r0, #0
    2632:	4a05      	ldr	r2, [pc, #20]	; (2648 <mutex_unlock_platform+0x54>)
    2634:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    }
}
    2638:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    263a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    263e:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2640:	4802      	ldr	r0, [pc, #8]	; (264c <mutex_unlock_platform+0x58>)
    2642:	e7f9      	b.n	2638 <mutex_unlock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2644:	4802      	ldr	r0, [pc, #8]	; (2650 <mutex_unlock_platform+0x5c>)
    2646:	e7f7      	b.n	2638 <mutex_unlock_platform+0x44>
    2648:	50030000 	.word	0x50030000
    264c:	ffff8fe9 	.word	0xffff8fe9
    2650:	ffff8fea 	.word	0xffff8fea

00002654 <mutex_lock_platform>:
    if(mutex == NULL) {
    2654:	b370      	cbz	r0, 26b4 <mutex_lock_platform+0x60>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2656:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    2658:	6843      	ldr	r3, [r0, #4]
    265a:	2b04      	cmp	r3, #4
    265c:	d004      	beq.n	2668 <mutex_lock_platform+0x14>
    265e:	2b08      	cmp	r3, #8
    2660:	d00f      	beq.n	2682 <mutex_lock_platform+0x2e>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2662:	b9c3      	cbnz	r3, 2696 <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2664:	4815      	ldr	r0, [pc, #84]	; (26bc <mutex_lock_platform+0x68>)
    2666:	e00b      	b.n	2680 <mutex_lock_platform+0x2c>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    2668:	6803      	ldr	r3, [r0, #0]
    266a:	2201      	movs	r2, #1
    266c:	e8d3 1fef 	ldaex	r1, [r3]
    2670:	2900      	cmp	r1, #0
    2672:	d103      	bne.n	267c <mutex_lock_platform+0x28>
    2674:	e8c3 2fe0 	stlex	r0, r2, [r3]
    2678:	2800      	cmp	r0, #0
    267a:	d1f7      	bne.n	266c <mutex_lock_platform+0x18>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    267c:	d116      	bne.n	26ac <mutex_lock_platform+0x58>
    267e:	2000      	movs	r0, #0
}
    2680:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    2682:	6803      	ldr	r3, [r0, #0]
    2684:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    2686:	f503 7380 	add.w	r3, r3, #256	; 0x100
    268a:	4a0d      	ldr	r2, [pc, #52]	; (26c0 <mutex_lock_platform+0x6c>)
    268c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2690:	b973      	cbnz	r3, 26b0 <mutex_lock_platform+0x5c>
    2692:	2000      	movs	r0, #0
    2694:	e7f4      	b.n	2680 <mutex_lock_platform+0x2c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2696:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2698:	f04f 32ff 	mov.w	r2, #4294967295
    269c:	f04f 33ff 	mov.w	r3, #4294967295
    26a0:	f005 fd9e 	bl	81e0 <z_impl_k_mutex_lock>
        if (ret == 0) {
    26a4:	2800      	cmp	r0, #0
    26a6:	d0eb      	beq.n	2680 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    26a8:	4806      	ldr	r0, [pc, #24]	; (26c4 <mutex_lock_platform+0x70>)
    26aa:	e7e9      	b.n	2680 <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    26ac:	4805      	ldr	r0, [pc, #20]	; (26c4 <mutex_lock_platform+0x70>)
    26ae:	e7e7      	b.n	2680 <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    26b0:	4804      	ldr	r0, [pc, #16]	; (26c4 <mutex_lock_platform+0x70>)
    26b2:	e7e5      	b.n	2680 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    26b4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    26b8:	4770      	bx	lr
    26ba:	bf00      	nop
    26bc:	ffff8fea 	.word	0xffff8fea
    26c0:	50030000 	.word	0x50030000
    26c4:	ffff8fe9 	.word	0xffff8fe9

000026c8 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    26c8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    26ca:	4604      	mov	r4, r0
    26cc:	b188      	cbz	r0, 26f2 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    26ce:	6863      	ldr	r3, [r4, #4]
    26d0:	2b04      	cmp	r3, #4
    26d2:	d00d      	beq.n	26f0 <mutex_free_platform+0x28>
    26d4:	2b08      	cmp	r3, #8
    26d6:	d00b      	beq.n	26f0 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    26d8:	b153      	cbz	r3, 26f0 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    26da:	f013 0f02 	tst.w	r3, #2
    26de:	d00d      	beq.n	26fc <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    26e0:	4621      	mov	r1, r4
    26e2:	4809      	ldr	r0, [pc, #36]	; (2708 <mutex_free_platform+0x40>)
    26e4:	f009 f8d0 	bl	b888 <k_mem_slab_free>
        mutex->mutex = NULL;
    26e8:	2300      	movs	r3, #0
    26ea:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    26ec:	2300      	movs	r3, #0
    26ee:	6063      	str	r3, [r4, #4]
}
    26f0:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    26f2:	4b06      	ldr	r3, [pc, #24]	; (270c <mutex_free_platform+0x44>)
    26f4:	685b      	ldr	r3, [r3, #4]
    26f6:	4806      	ldr	r0, [pc, #24]	; (2710 <mutex_free_platform+0x48>)
    26f8:	4798      	blx	r3
    26fa:	e7e8      	b.n	26ce <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    26fc:	2214      	movs	r2, #20
    26fe:	2100      	movs	r1, #0
    2700:	6820      	ldr	r0, [r4, #0]
    2702:	f008 fa24 	bl	ab4e <memset>
    2706:	e7f1      	b.n	26ec <mutex_free_platform+0x24>
    2708:	200009a4 	.word	0x200009a4
    270c:	200001b8 	.word	0x200001b8
    2710:	0000c4fc 	.word	0x0000c4fc

00002714 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2714:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2716:	4604      	mov	r4, r0
    2718:	b178      	cbz	r0, 273a <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    271a:	6863      	ldr	r3, [r4, #4]
    271c:	2b04      	cmp	r3, #4
    271e:	d00b      	beq.n	2738 <mutex_init_platform+0x24>
    2720:	2b08      	cmp	r3, #8
    2722:	d009      	beq.n	2738 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2724:	b90b      	cbnz	r3, 272a <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    2726:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2728:	b163      	cbz	r3, 2744 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    272a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    272c:	f009 f937 	bl	b99e <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2730:	6863      	ldr	r3, [r4, #4]
    2732:	f043 0301 	orr.w	r3, r3, #1
    2736:	6063      	str	r3, [r4, #4]
}
    2738:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    273a:	4b0f      	ldr	r3, [pc, #60]	; (2778 <mutex_init_platform+0x64>)
    273c:	685b      	ldr	r3, [r3, #4]
    273e:	480f      	ldr	r0, [pc, #60]	; (277c <mutex_init_platform+0x68>)
    2740:	4798      	blx	r3
    2742:	e7ea      	b.n	271a <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2744:	f04f 32ff 	mov.w	r2, #4294967295
    2748:	f04f 33ff 	mov.w	r3, #4294967295
    274c:	4621      	mov	r1, r4
    274e:	480c      	ldr	r0, [pc, #48]	; (2780 <mutex_init_platform+0x6c>)
    2750:	f005 fc02 	bl	7f58 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2754:	b908      	cbnz	r0, 275a <mutex_init_platform+0x46>
    2756:	6823      	ldr	r3, [r4, #0]
    2758:	b91b      	cbnz	r3, 2762 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    275a:	4b07      	ldr	r3, [pc, #28]	; (2778 <mutex_init_platform+0x64>)
    275c:	685b      	ldr	r3, [r3, #4]
    275e:	4809      	ldr	r0, [pc, #36]	; (2784 <mutex_init_platform+0x70>)
    2760:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2762:	2214      	movs	r2, #20
    2764:	2100      	movs	r1, #0
    2766:	6820      	ldr	r0, [r4, #0]
    2768:	f008 f9f1 	bl	ab4e <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    276c:	6863      	ldr	r3, [r4, #4]
    276e:	f043 0302 	orr.w	r3, r3, #2
    2772:	6063      	str	r3, [r4, #4]
    2774:	e7d9      	b.n	272a <mutex_init_platform+0x16>
    2776:	bf00      	nop
    2778:	200001b8 	.word	0x200001b8
    277c:	0000c4fc 	.word	0x0000c4fc
    2780:	200009a4 	.word	0x200009a4
    2784:	0000c524 	.word	0x0000c524

00002788 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2788:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    278a:	2340      	movs	r3, #64	; 0x40
    278c:	2214      	movs	r2, #20
    278e:	4904      	ldr	r1, [pc, #16]	; (27a0 <nrf_cc3xx_platform_mutex_init+0x18>)
    2790:	4804      	ldr	r0, [pc, #16]	; (27a4 <nrf_cc3xx_platform_mutex_init+0x1c>)
    2792:	f009 f86b 	bl	b86c <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2796:	4904      	ldr	r1, [pc, #16]	; (27a8 <nrf_cc3xx_platform_mutex_init+0x20>)
    2798:	4804      	ldr	r0, [pc, #16]	; (27ac <nrf_cc3xx_platform_mutex_init+0x24>)
    279a:	f006 fe6b 	bl	9474 <nrf_cc3xx_platform_set_mutexes>
}
    279e:	bd08      	pop	{r3, pc}
    27a0:	200009c0 	.word	0x200009c0
    27a4:	200009a4 	.word	0x200009a4
    27a8:	0000c564 	.word	0x0000c564
    27ac:	0000c554 	.word	0x0000c554

000027b0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    27b0:	4901      	ldr	r1, [pc, #4]	; (27b8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    27b2:	2210      	movs	r2, #16
	str	r2, [r1]
    27b4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    27b6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    27b8:	e000ed10 	.word	0xe000ed10

000027bc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    27bc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    27be:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    27c0:	f380 8811 	msr	BASEPRI, r0
	isb
    27c4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    27c8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    27cc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    27ce:	b662      	cpsie	i
	isb
    27d0:	f3bf 8f6f 	isb	sy

	bx	lr
    27d4:	4770      	bx	lr
    27d6:	bf00      	nop

000027d8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    27d8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    27da:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    27dc:	f381 8811 	msr	BASEPRI, r1

	wfe
    27e0:	bf20      	wfe

	msr	BASEPRI, r0
    27e2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    27e6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    27e8:	4770      	bx	lr
    27ea:	bf00      	nop

000027ec <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    27ec:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    27ee:	2b00      	cmp	r3, #0
    27f0:	db08      	blt.n	2804 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    27f2:	f000 001f 	and.w	r0, r0, #31
    27f6:	095b      	lsrs	r3, r3, #5
    27f8:	2201      	movs	r2, #1
    27fa:	fa02 f000 	lsl.w	r0, r2, r0
    27fe:	4a02      	ldr	r2, [pc, #8]	; (2808 <arch_irq_enable+0x1c>)
    2800:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2804:	4770      	bx	lr
    2806:	bf00      	nop
    2808:	e000e100 	.word	0xe000e100

0000280c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    280c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    280e:	2b00      	cmp	r3, #0
    2810:	db0d      	blt.n	282e <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2812:	f000 001f 	and.w	r0, r0, #31
    2816:	095b      	lsrs	r3, r3, #5
    2818:	2201      	movs	r2, #1
    281a:	fa02 f000 	lsl.w	r0, r2, r0
    281e:	3320      	adds	r3, #32
    2820:	4a03      	ldr	r2, [pc, #12]	; (2830 <arch_irq_disable+0x24>)
    2822:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    2826:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    282a:	f3bf 8f6f 	isb	sy
}
    282e:	4770      	bx	lr
    2830:	e000e100 	.word	0xe000e100

00002834 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2834:	0942      	lsrs	r2, r0, #5
    2836:	4b05      	ldr	r3, [pc, #20]	; (284c <arch_irq_is_enabled+0x18>)
    2838:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    283c:	f000 001f 	and.w	r0, r0, #31
    2840:	2301      	movs	r3, #1
    2842:	fa03 f000 	lsl.w	r0, r3, r0
}
    2846:	4010      	ands	r0, r2
    2848:	4770      	bx	lr
    284a:	bf00      	nop
    284c:	e000e100 	.word	0xe000e100

00002850 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    2850:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2852:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2854:	2b00      	cmp	r3, #0
    2856:	db08      	blt.n	286a <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2858:	0149      	lsls	r1, r1, #5
    285a:	b2c9      	uxtb	r1, r1
    285c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2860:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2864:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    2868:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    286a:	f000 000f 	and.w	r0, r0, #15
    286e:	0149      	lsls	r1, r1, #5
    2870:	b2c9      	uxtb	r1, r1
    2872:	4b01      	ldr	r3, [pc, #4]	; (2878 <z_arm_irq_priority_set+0x28>)
    2874:	5419      	strb	r1, [r3, r0]
}
    2876:	4770      	bx	lr
    2878:	e000ed14 	.word	0xe000ed14

0000287c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    287c:	bf30      	wfi
    b z_SysNmiOnReset
    287e:	f7ff bffd 	b.w	287c <z_SysNmiOnReset>
    2882:	bf00      	nop

00002884 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    2884:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2886:	4b0b      	ldr	r3, [pc, #44]	; (28b4 <z_arm_prep_c+0x30>)
    2888:	4a0b      	ldr	r2, [pc, #44]	; (28b8 <z_arm_prep_c+0x34>)
    288a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    288e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2890:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2894:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2898:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    289c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    28a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    28a4:	f005 faf8 	bl	7e98 <z_bss_zero>
	z_data_copy();
    28a8:	f006 fb5c 	bl	8f64 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    28ac:	f000 f9d4 	bl	2c58 <z_arm_interrupt_init>
	z_cstart();
    28b0:	f005 fafe 	bl	7eb0 <z_cstart>
    28b4:	e000ed00 	.word	0xe000ed00
    28b8:	00000000 	.word	0x00000000

000028bc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    28bc:	4a0a      	ldr	r2, [pc, #40]	; (28e8 <arch_swap+0x2c>)
    28be:	6893      	ldr	r3, [r2, #8]
    28c0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    28c4:	4909      	ldr	r1, [pc, #36]	; (28ec <arch_swap+0x30>)
    28c6:	6809      	ldr	r1, [r1, #0]
    28c8:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    28cc:	4908      	ldr	r1, [pc, #32]	; (28f0 <arch_swap+0x34>)
    28ce:	684b      	ldr	r3, [r1, #4]
    28d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    28d4:	604b      	str	r3, [r1, #4]
    28d6:	2300      	movs	r3, #0
    28d8:	f383 8811 	msr	BASEPRI, r3
    28dc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    28e0:	6893      	ldr	r3, [r2, #8]
}
    28e2:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    28e6:	4770      	bx	lr
    28e8:	20001abc 	.word	0x20001abc
    28ec:	0000c79c 	.word	0x0000c79c
    28f0:	e000ed00 	.word	0xe000ed00

000028f4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    28f4:	4914      	ldr	r1, [pc, #80]	; (2948 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    28f6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    28f8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    28fc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    28fe:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2902:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2906:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2908:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    290c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2910:	4f0e      	ldr	r7, [pc, #56]	; (294c <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2912:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2916:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2918:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    291a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    291c:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    2920:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2922:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2926:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    292a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    292e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2932:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    2936:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    293a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    293c:	f008 f840 	bl	a9c0 <configure_builtin_stack_guard>
    pop {r2, lr}
    2940:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2944:	4770      	bx	lr
    2946:	0000      	.short	0x0000
    ldr r1, =_kernel
    2948:	20001abc 	.word	0x20001abc
    ldr v4, =_SCS_ICSR
    294c:	e000ed04 	.word	0xe000ed04

00002950 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2950:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2954:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2956:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    295a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    295e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2960:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2964:	2902      	cmp	r1, #2
    beq _oops
    2966:	d0ff      	beq.n	2968 <_oops>

00002968 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2968:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    296a:	f008 f817 	bl	a99c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    296e:	bd01      	pop	{r0, pc}

00002970 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    2970:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2972:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    2976:	490d      	ldr	r1, [pc, #52]	; (29ac <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    2978:	f021 0101 	bic.w	r1, r1, #1
    297c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    2980:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2984:	9b01      	ldr	r3, [sp, #4]
    2986:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    298a:	9b02      	ldr	r3, [sp, #8]
    298c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2990:	9b03      	ldr	r3, [sp, #12]
    2992:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2996:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    299a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    299e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    29a0:	2300      	movs	r3, #0
    29a2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    29a6:	bc10      	pop	{r4}
    29a8:	4770      	bx	lr
    29aa:	bf00      	nop
    29ac:	00009a17 	.word	0x00009a17

000029b0 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    29b0:	4b09      	ldr	r3, [pc, #36]	; (29d8 <arch_switch_to_main_thread+0x28>)
    29b2:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    29b4:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    29b8:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    29bc:	4610      	mov	r0, r2
    29be:	f381 8809 	msr	PSP, r1
    29c2:	2100      	movs	r1, #0
    29c4:	b663      	cpsie	if
    29c6:	f381 8811 	msr	BASEPRI, r1
    29ca:	f3bf 8f6f 	isb	sy
    29ce:	2200      	movs	r2, #0
    29d0:	2300      	movs	r3, #0
    29d2:	f007 f820 	bl	9a16 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    29d6:	bf00      	nop
    29d8:	20001abc 	.word	0x20001abc

000029dc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    29dc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    29de:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    29e0:	4a0b      	ldr	r2, [pc, #44]	; (2a10 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    29e2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    29e4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    29e6:	bf1e      	ittt	ne
	movne	r1, #0
    29e8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    29ea:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    29ec:	f008 ffbb 	blne	b966 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    29f0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    29f2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    29f6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    29fa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    29fe:	4905      	ldr	r1, [pc, #20]	; (2a14 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2a00:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2a02:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2a04:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2a06:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2a0a:	4903      	ldr	r1, [pc, #12]	; (2a18 <_isr_wrapper+0x3c>)
	bx r1
    2a0c:	4708      	bx	r1
    2a0e:	0000      	.short	0x0000
	ldr r2, =_kernel
    2a10:	20001abc 	.word	0x20001abc
	ldr r1, =_sw_isr_table
    2a14:	0000c184 	.word	0x0000c184
	ldr r1, =z_arm_int_exit
    2a18:	00002a1d 	.word	0x00002a1d

00002a1c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2a1c:	4b04      	ldr	r3, [pc, #16]	; (2a30 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2a1e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2a20:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2a22:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2a24:	d003      	beq.n	2a2e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2a26:	4903      	ldr	r1, [pc, #12]	; (2a34 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2a2c:	600a      	str	r2, [r1, #0]

00002a2e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2a2e:	4770      	bx	lr
	ldr r3, =_kernel
    2a30:	20001abc 	.word	0x20001abc
	ldr r1, =_SCS_ICSR
    2a34:	e000ed04 	.word	0xe000ed04

00002a38 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    2a38:	b510      	push	{r4, lr}
    2a3a:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2a3c:	4b13      	ldr	r3, [pc, #76]	; (2a8c <mem_manage_fault+0x54>)
    2a3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2a40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a44:	f013 0f02 	tst.w	r3, #2
    2a48:	d00b      	beq.n	2a62 <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    2a4a:	4b10      	ldr	r3, [pc, #64]	; (2a8c <mem_manage_fault+0x54>)
    2a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a50:	f013 0f80 	tst.w	r3, #128	; 0x80
    2a54:	d005      	beq.n	2a62 <mem_manage_fault+0x2a>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    2a56:	b121      	cbz	r1, 2a62 <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2a58:	4a0c      	ldr	r2, [pc, #48]	; (2a8c <mem_manage_fault+0x54>)
    2a5a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2a5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2a60:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2a62:	4b0a      	ldr	r3, [pc, #40]	; (2a8c <mem_manage_fault+0x54>)
    2a64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2a66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a6a:	f013 0f10 	tst.w	r3, #16
    2a6e:	d101      	bne.n	2a74 <mem_manage_fault+0x3c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2a70:	4b06      	ldr	r3, [pc, #24]	; (2a8c <mem_manage_fault+0x54>)
    2a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2a74:	4a05      	ldr	r2, [pc, #20]	; (2a8c <mem_manage_fault+0x54>)
    2a76:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2a78:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2a7c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    2a7e:	2101      	movs	r1, #1
    2a80:	f007 ffa3 	bl	a9ca <memory_fault_recoverable>
    2a84:	7020      	strb	r0, [r4, #0]

	return reason;
}
    2a86:	2000      	movs	r0, #0
    2a88:	bd10      	pop	{r4, pc}
    2a8a:	bf00      	nop
    2a8c:	e000ed00 	.word	0xe000ed00

00002a90 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    2a90:	b510      	push	{r4, lr}
    2a92:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2a94:	4b12      	ldr	r3, [pc, #72]	; (2ae0 <bus_fault+0x50>)
    2a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a9c:	f413 7f00 	tst.w	r3, #512	; 0x200
    2aa0:	d00b      	beq.n	2aba <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2aa2:	4b0f      	ldr	r3, [pc, #60]	; (2ae0 <bus_fault+0x50>)
    2aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2aa8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2aac:	d005      	beq.n	2aba <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    2aae:	b121      	cbz	r1, 2aba <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2ab0:	4a0b      	ldr	r2, [pc, #44]	; (2ae0 <bus_fault+0x50>)
    2ab2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2ab4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2ab8:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2aba:	4b09      	ldr	r3, [pc, #36]	; (2ae0 <bus_fault+0x50>)
    2abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ac0:	f413 7f80 	tst.w	r3, #256	; 0x100
    2ac4:	d101      	bne.n	2aca <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2ac6:	4b06      	ldr	r3, [pc, #24]	; (2ae0 <bus_fault+0x50>)
    2ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2aca:	4a05      	ldr	r2, [pc, #20]	; (2ae0 <bus_fault+0x50>)
    2acc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2ace:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2ad2:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2ad4:	2101      	movs	r1, #1
    2ad6:	f007 ff78 	bl	a9ca <memory_fault_recoverable>
    2ada:	7020      	strb	r0, [r4, #0]

	return reason;
}
    2adc:	2000      	movs	r0, #0
    2ade:	bd10      	pop	{r4, pc}
    2ae0:	e000ed00 	.word	0xe000ed00

00002ae4 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2ae4:	4b0a      	ldr	r3, [pc, #40]	; (2b10 <usage_fault+0x2c>)
    2ae6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    2aea:	6a98      	ldr	r0, [r3, #40]	; 0x28
    2aec:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
    2af0:	d10b      	bne.n	2b0a <usage_fault+0x26>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2af2:	4b07      	ldr	r3, [pc, #28]	; (2b10 <usage_fault+0x2c>)
    2af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2af6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2afa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2afc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2afe:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    2b02:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    2b06:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    2b08:	4770      	bx	lr
		reason = K_ERR_STACK_CHK_FAIL;
    2b0a:	2002      	movs	r0, #2
    2b0c:	e7f1      	b.n	2af2 <usage_fault+0xe>
    2b0e:	bf00      	nop
    2b10:	e000ed00 	.word	0xe000ed00

00002b14 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    2b14:	b510      	push	{r4, lr}
    2b16:	4604      	mov	r4, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    2b18:	2300      	movs	r3, #0
    2b1a:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2b1c:	4b1b      	ldr	r3, [pc, #108]	; (2b8c <hard_fault+0x78>)
    2b1e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    2b20:	f010 0002 	ands.w	r0, r0, #2
    2b24:	d12d      	bne.n	2b82 <hard_fault+0x6e>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2b28:	2b00      	cmp	r3, #0
    2b2a:	db2b      	blt.n	2b84 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2b2c:	4b17      	ldr	r3, [pc, #92]	; (2b8c <hard_fault+0x78>)
    2b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2b30:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    2b34:	d027      	beq.n	2b86 <hard_fault+0x72>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    2b36:	69a3      	ldr	r3, [r4, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    2b38:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2b3c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2b40:	429a      	cmp	r2, r3
    2b42:	d010      	beq.n	2b66 <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    2b44:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2b48:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    2b4c:	781b      	ldrb	r3, [r3, #0]
    2b4e:	b963      	cbnz	r3, 2b6a <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    2b50:	4b0f      	ldr	r3, [pc, #60]	; (2b90 <hard_fault+0x7c>)
    2b52:	781b      	ldrb	r3, [r3, #0]
    2b54:	b97b      	cbnz	r3, 2b76 <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    2b56:	4b0f      	ldr	r3, [pc, #60]	; (2b94 <hard_fault+0x80>)
    2b58:	881b      	ldrh	r3, [r3, #0]
    2b5a:	b29b      	uxth	r3, r3
    2b5c:	b193      	cbz	r3, 2b84 <hard_fault+0x70>
			reason = usage_fault(esf);
    2b5e:	4620      	mov	r0, r4
    2b60:	f7ff ffc0 	bl	2ae4 <usage_fault>
    2b64:	e00e      	b.n	2b84 <hard_fault+0x70>
			reason = esf->basic.r0;
    2b66:	6820      	ldr	r0, [r4, #0]
    2b68:	e00c      	b.n	2b84 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    2b6a:	460a      	mov	r2, r1
    2b6c:	2101      	movs	r1, #1
    2b6e:	4620      	mov	r0, r4
    2b70:	f7ff ff62 	bl	2a38 <mem_manage_fault>
    2b74:	e006      	b.n	2b84 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    2b76:	460a      	mov	r2, r1
    2b78:	2101      	movs	r1, #1
    2b7a:	4620      	mov	r0, r4
    2b7c:	f7ff ff88 	bl	2a90 <bus_fault>
    2b80:	e000      	b.n	2b84 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2b82:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    2b84:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2b86:	4618      	mov	r0, r3
	return reason;
    2b88:	e7fc      	b.n	2b84 <hard_fault+0x70>
    2b8a:	bf00      	nop
    2b8c:	e000ed00 	.word	0xe000ed00
    2b90:	e000ed29 	.word	0xe000ed29
    2b94:	e000ed2a 	.word	0xe000ed2a

00002b98 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2b98:	b570      	push	{r4, r5, r6, lr}
    2b9a:	b08a      	sub	sp, #40	; 0x28
    2b9c:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2b9e:	4b22      	ldr	r3, [pc, #136]	; (2c28 <z_arm_fault+0x90>)
    2ba0:	6859      	ldr	r1, [r3, #4]
    2ba2:	f3c1 0108 	ubfx	r1, r1, #0, #9
    2ba6:	2300      	movs	r3, #0
    2ba8:	f383 8811 	msr	BASEPRI, r3
    2bac:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2bb0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2bb4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2bb8:	d115      	bne.n	2be6 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2bba:	f002 030c 	and.w	r3, r2, #12
    2bbe:	2b08      	cmp	r3, #8
    2bc0:	d014      	beq.n	2bec <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2bc2:	f012 0f08 	tst.w	r2, #8
    2bc6:	d00b      	beq.n	2be0 <z_arm_fault+0x48>
	*nested_exc = false;
    2bc8:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    2bca:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    2bce:	4620      	mov	r0, r4
    2bd0:	f007 ff00 	bl	a9d4 <fault_handle>
    2bd4:	4605      	mov	r5, r0
	if (recoverable) {
    2bd6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2bda:	b153      	cbz	r3, 2bf2 <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    2bdc:	b00a      	add	sp, #40	; 0x28
    2bde:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    2be0:	4604      	mov	r4, r0
			*nested_exc = true;
    2be2:	2601      	movs	r6, #1
    2be4:	e7f1      	b.n	2bca <z_arm_fault+0x32>
	*nested_exc = false;
    2be6:	2600      	movs	r6, #0
		return NULL;
    2be8:	4634      	mov	r4, r6
    2bea:	e7ee      	b.n	2bca <z_arm_fault+0x32>
	*nested_exc = false;
    2bec:	2600      	movs	r6, #0
		return NULL;
    2bee:	4634      	mov	r4, r6
    2bf0:	e7eb      	b.n	2bca <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2bf2:	2220      	movs	r2, #32
    2bf4:	4621      	mov	r1, r4
    2bf6:	a801      	add	r0, sp, #4
    2bf8:	f007 ff85 	bl	ab06 <memcpy>
	if (nested_exc) {
    2bfc:	b14e      	cbz	r6, 2c12 <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2bfe:	9b08      	ldr	r3, [sp, #32]
    2c00:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2c04:	b95a      	cbnz	r2, 2c1e <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2c06:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2c0a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    2c0e:	9308      	str	r3, [sp, #32]
    2c10:	e005      	b.n	2c1e <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2c12:	9b08      	ldr	r3, [sp, #32]
    2c14:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2c18:	f023 0301 	bic.w	r3, r3, #1
    2c1c:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    2c1e:	a901      	add	r1, sp, #4
    2c20:	4628      	mov	r0, r5
    2c22:	f007 feb7 	bl	a994 <z_arm_fatal_error>
    2c26:	e7d9      	b.n	2bdc <z_arm_fault+0x44>
    2c28:	e000ed00 	.word	0xe000ed00

00002c2c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2c2c:	4b04      	ldr	r3, [pc, #16]	; (2c40 <z_arm_fault_init+0x14>)
    2c2e:	695a      	ldr	r2, [r3, #20]
    2c30:	f042 0210 	orr.w	r2, r2, #16
    2c34:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    2c36:	695a      	ldr	r2, [r3, #20]
    2c38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2c3c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2c3e:	4770      	bx	lr
    2c40:	e000ed00 	.word	0xe000ed00

00002c44 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2c44:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2c48:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2c4c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2c4e:	4672      	mov	r2, lr
	bl z_arm_fault
    2c50:	f7ff ffa2 	bl	2b98 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2c54:	bd01      	pop	{r0, pc}
    2c56:	bf00      	nop

00002c58 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2c58:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2c5a:	e006      	b.n	2c6a <z_arm_interrupt_init+0x12>
    2c5c:	f002 010f 	and.w	r1, r2, #15
    2c60:	4b09      	ldr	r3, [pc, #36]	; (2c88 <z_arm_interrupt_init+0x30>)
    2c62:	440b      	add	r3, r1
    2c64:	2120      	movs	r1, #32
    2c66:	7619      	strb	r1, [r3, #24]
    2c68:	3201      	adds	r2, #1
    2c6a:	2a44      	cmp	r2, #68	; 0x44
    2c6c:	dc0a      	bgt.n	2c84 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    2c6e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    2c70:	2b00      	cmp	r3, #0
    2c72:	dbf3      	blt.n	2c5c <z_arm_interrupt_init+0x4>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c74:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2c78:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2c7c:	2120      	movs	r1, #32
    2c7e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    2c82:	e7f1      	b.n	2c68 <z_arm_interrupt_init+0x10>
	}
}
    2c84:	4770      	bx	lr
    2c86:	bf00      	nop
    2c88:	e000ecfc 	.word	0xe000ecfc

00002c8c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2c8c:	2000      	movs	r0, #0
    msr CONTROL, r0
    2c8e:	f380 8814 	msr	CONTROL, r0
    isb
    2c92:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    2c96:	2000      	movs	r0, #0
    msr MSPLIM, r0
    2c98:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    2c9c:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2ca0:	f009 f9ee 	bl	c080 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2ca4:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2ca6:	490e      	ldr	r1, [pc, #56]	; (2ce0 <__start+0x54>)
    str r0, [r1]
    2ca8:	6008      	str	r0, [r1, #0]
    dsb
    2caa:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2cae:	480d      	ldr	r0, [pc, #52]	; (2ce4 <__start+0x58>)
    msr msp, r0
    2cb0:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2cb4:	f000 f83c 	bl	2d30 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2cb8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2cba:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2cbe:	480a      	ldr	r0, [pc, #40]	; (2ce8 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2cc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2cc4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2cc6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2cca:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2cce:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2cd0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2cd2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2cd6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2cda:	f7ff fdd3 	bl	2884 <z_arm_prep_c>
    2cde:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    2ce0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2ce4:	200028e0 	.word	0x200028e0
    ldr r0, =z_interrupt_stacks
    2ce8:	20002a20 	.word	0x20002a20

00002cec <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    2cec:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2cf0:	4905      	ldr	r1, [pc, #20]	; (2d08 <sys_arch_reboot+0x1c>)
    2cf2:	68ca      	ldr	r2, [r1, #12]
    2cf4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2cf8:	4b04      	ldr	r3, [pc, #16]	; (2d0c <sys_arch_reboot+0x20>)
    2cfa:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2cfc:	60cb      	str	r3, [r1, #12]
    2cfe:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2d02:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2d04:	e7fd      	b.n	2d02 <sys_arch_reboot+0x16>
    2d06:	bf00      	nop
    2d08:	e000ed00 	.word	0xe000ed00
    2d0c:	05fa0004 	.word	0x05fa0004

00002d10 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2d10:	4b06      	ldr	r3, [pc, #24]	; (2d2c <z_arm_clear_arm_mpu_config+0x1c>)
    2d12:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    2d14:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    2d18:	2300      	movs	r3, #0
    2d1a:	4283      	cmp	r3, r0
    2d1c:	da05      	bge.n	2d2a <z_arm_clear_arm_mpu_config+0x1a>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
    2d1e:	4a03      	ldr	r2, [pc, #12]	; (2d2c <z_arm_clear_arm_mpu_config+0x1c>)
    2d20:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    2d22:	2100      	movs	r1, #0
    2d24:	6111      	str	r1, [r2, #16]
    2d26:	3301      	adds	r3, #1
    2d28:	e7f7      	b.n	2d1a <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    2d2a:	4770      	bx	lr
    2d2c:	e000ed90 	.word	0xe000ed90

00002d30 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2d30:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2d32:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2d34:	2400      	movs	r4, #0
    2d36:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2d3a:	f7ff ffe9 	bl	2d10 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2d3e:	4623      	mov	r3, r4
    2d40:	2b0f      	cmp	r3, #15
    2d42:	d809      	bhi.n	2d58 <z_arm_init_arch_hw_at_boot+0x28>
		NVIC->ICER[i] = 0xFFFFFFFF;
    2d44:	f103 0120 	add.w	r1, r3, #32
    2d48:	4a0d      	ldr	r2, [pc, #52]	; (2d80 <z_arm_init_arch_hw_at_boot+0x50>)
    2d4a:	f04f 30ff 	mov.w	r0, #4294967295
    2d4e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2d52:	3301      	adds	r3, #1
    2d54:	b2db      	uxtb	r3, r3
    2d56:	e7f3      	b.n	2d40 <z_arm_init_arch_hw_at_boot+0x10>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2d58:	2300      	movs	r3, #0
    2d5a:	2b0f      	cmp	r3, #15
    2d5c:	d809      	bhi.n	2d72 <z_arm_init_arch_hw_at_boot+0x42>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2d5e:	f103 0160 	add.w	r1, r3, #96	; 0x60
    2d62:	4a07      	ldr	r2, [pc, #28]	; (2d80 <z_arm_init_arch_hw_at_boot+0x50>)
    2d64:	f04f 30ff 	mov.w	r0, #4294967295
    2d68:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2d6c:	3301      	adds	r3, #1
    2d6e:	b2db      	uxtb	r3, r3
    2d70:	e7f3      	b.n	2d5a <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
    2d72:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2d74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d78:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2d7c:	bd10      	pop	{r4, pc}
    2d7e:	bf00      	nop
    2d80:	e000e100 	.word	0xe000e100

00002d84 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    2d84:	b508      	push	{r3, lr}
	if (_current == thread) {
    2d86:	4b08      	ldr	r3, [pc, #32]	; (2da8 <z_impl_k_thread_abort+0x24>)
    2d88:	689b      	ldr	r3, [r3, #8]
    2d8a:	4283      	cmp	r3, r0
    2d8c:	d002      	beq.n	2d94 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    2d8e:	f006 f8af 	bl	8ef0 <z_thread_abort>
}
    2d92:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2d94:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2d98:	2b00      	cmp	r3, #0
    2d9a:	d0f8      	beq.n	2d8e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2d9c:	4a03      	ldr	r2, [pc, #12]	; (2dac <z_impl_k_thread_abort+0x28>)
    2d9e:	6853      	ldr	r3, [r2, #4]
    2da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2da4:	6053      	str	r3, [r2, #4]
    2da6:	e7f2      	b.n	2d8e <z_impl_k_thread_abort+0xa>
    2da8:	20001abc 	.word	0x20001abc
    2dac:	e000ed00 	.word	0xe000ed00

00002db0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    2db0:	b510      	push	{r4, lr}
    2db2:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2db4:	4c09      	ldr	r4, [pc, #36]	; (2ddc <z_arm_configure_static_mpu_regions+0x2c>)
    2db6:	4623      	mov	r3, r4
    2db8:	4a09      	ldr	r2, [pc, #36]	; (2de0 <z_arm_configure_static_mpu_regions+0x30>)
    2dba:	2101      	movs	r1, #1
    2dbc:	4809      	ldr	r0, [pc, #36]	; (2de4 <z_arm_configure_static_mpu_regions+0x34>)
    2dbe:	f007 fe6e 	bl	aa9e <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    2dc2:	2300      	movs	r3, #0
    2dc4:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    2dc6:	4b08      	ldr	r3, [pc, #32]	; (2de8 <z_arm_configure_static_mpu_regions+0x38>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    2dc8:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    2dca:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    2dcc:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2dce:	2101      	movs	r1, #1
    2dd0:	a801      	add	r0, sp, #4
    2dd2:	f007 fe68 	bl	aaa6 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    2dd6:	b004      	add	sp, #16
    2dd8:	bd10      	pop	{r4, pc}
    2dda:	bf00      	nop
    2ddc:	20070000 	.word	0x20070000
    2de0:	20000000 	.word	0x20000000
    2de4:	0000c578 	.word	0x0000c578
    2de8:	200003b0 	.word	0x200003b0

00002dec <mpu_init>:

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
    2dec:	4b01      	ldr	r3, [pc, #4]	; (2df4 <mpu_init+0x8>)
    2dee:	4a02      	ldr	r2, [pc, #8]	; (2df8 <mpu_init+0xc>)
    2df0:	631a      	str	r2, [r3, #48]	; 0x30
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
    2df2:	4770      	bx	lr
    2df4:	e000ed90 	.word	0xe000ed90
    2df8:	0044ffaa 	.word	0x0044ffaa

00002dfc <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    2dfc:	b410      	push	{r4}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2dfe:	680b      	ldr	r3, [r1, #0]
    2e00:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    2e04:	7a0c      	ldrb	r4, [r1, #8]
    2e06:	f004 031f 	and.w	r3, r4, #31
    2e0a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2e0c:	68cb      	ldr	r3, [r1, #12]
    2e0e:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2e12:	0964      	lsrs	r4, r4, #5
    2e14:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    2e18:	f043 0301 	orr.w	r3, r3, #1
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    2e1c:	4902      	ldr	r1, [pc, #8]	; (2e28 <region_init+0x2c>)
    2e1e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    2e20:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    2e22:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    2e24:	bc10      	pop	{r4}
    2e26:	4770      	bx	lr
    2e28:	e000ed90 	.word	0xe000ed90

00002e2c <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e30:	b087      	sub	sp, #28
    2e32:	4681      	mov	r9, r0
    2e34:	9100      	str	r1, [sp, #0]
    2e36:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    2e38:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    2e3a:	2700      	movs	r7, #0
    2e3c:	e034      	b.n	2ea8 <mpu_configure_regions_and_partition+0x7c>
	return -EINVAL;
    2e3e:	f06f 0615 	mvn.w	r6, #21
    2e42:	e053      	b.n	2eec <mpu_configure_regions_and_partition+0xc0>
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;

		if ((regions[i].start == u_reg_base) &&
    2e44:	45d8      	cmp	r8, fp
    2e46:	d169      	bne.n	2f1c <mpu_configure_regions_and_partition+0xf0>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    2e48:	4629      	mov	r1, r5
    2e4a:	b2f0      	uxtb	r0, r6
    2e4c:	f007 fe0c 	bl	aa68 <mpu_configure_region>
    2e50:	e029      	b.n	2ea6 <mpu_configure_regions_and_partition+0x7a>
	MPU->RNR = index;
    2e52:	4b58      	ldr	r3, [pc, #352]	; (2fb4 <mpu_configure_regions_and_partition+0x188>)
    2e54:	6098      	str	r0, [r3, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2e56:	68d9      	ldr	r1, [r3, #12]
    2e58:	f001 011f 	and.w	r1, r1, #31
		| (base & MPU_RBAR_BASE_Msk);
    2e5c:	f022 021f 	bic.w	r2, r2, #31
    2e60:	430a      	orrs	r2, r1
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2e62:	60da      	str	r2, [r3, #12]
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    2e64:	4629      	mov	r1, r5
    2e66:	b2e0      	uxtb	r0, r4
    2e68:	f007 fdfe 	bl	aa68 <mpu_configure_region>
    2e6c:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    2e6e:	f110 0f16 	cmn.w	r0, #22
    2e72:	f000 8097 	beq.w	2fa4 <mpu_configure_regions_and_partition+0x178>
				return reg_index;
			}

			reg_index++;
    2e76:	3401      	adds	r4, #1
    2e78:	e015      	b.n	2ea6 <mpu_configure_regions_and_partition+0x7a>
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    2e7a:	3b01      	subs	r3, #1
	MPU->RNR = index;
    2e7c:	494d      	ldr	r1, [pc, #308]	; (2fb4 <mpu_configure_regions_and_partition+0x188>)
    2e7e:	6088      	str	r0, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2e80:	690a      	ldr	r2, [r1, #16]
    2e82:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    2e86:	f023 031f 	bic.w	r3, r3, #31
    2e8a:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2e8c:	610b      	str	r3, [r1, #16]

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    2e8e:	4629      	mov	r1, r5
    2e90:	b2e0      	uxtb	r0, r4
    2e92:	f007 fde9 	bl	aa68 <mpu_configure_region>
    2e96:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    2e98:	f110 0f16 	cmn.w	r0, #22
    2e9c:	f000 8082 	beq.w	2fa4 <mpu_configure_regions_and_partition+0x178>
				return reg_index;
			}

			reg_index++;
    2ea0:	3401      	adds	r4, #1
    2ea2:	e000      	b.n	2ea6 <mpu_configure_regions_and_partition+0x7a>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    2ea4:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    2ea6:	3701      	adds	r7, #1
    2ea8:	9b00      	ldr	r3, [sp, #0]
    2eaa:	429f      	cmp	r7, r3
    2eac:	da7a      	bge.n	2fa4 <mpu_configure_regions_and_partition+0x178>
		if (regions[i].size == 0U) {
    2eae:	eb07 0547 	add.w	r5, r7, r7, lsl #1
    2eb2:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    2eb6:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    2eba:	f8d5 8004 	ldr.w	r8, [r5, #4]
    2ebe:	f1b8 0f00 	cmp.w	r8, #0
    2ec2:	d0f0      	beq.n	2ea6 <mpu_configure_regions_and_partition+0x7a>
		if (do_sanity_check &&
    2ec4:	9b01      	ldr	r3, [sp, #4]
    2ec6:	b123      	cbz	r3, 2ed2 <mpu_configure_regions_and_partition+0xa6>
			(!mpu_partition_is_valid(&regions[i]))) {
    2ec8:	4628      	mov	r0, r5
    2eca:	f007 fdb0 	bl	aa2e <mpu_partition_is_valid>
		if (do_sanity_check &&
    2ece:	2800      	cmp	r0, #0
    2ed0:	d064      	beq.n	2f9c <mpu_configure_regions_and_partition+0x170>
			get_region_index(regions[i].start, regions[i].size);
    2ed2:	f859 b00a 	ldr.w	fp, [r9, sl]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2ed6:	4658      	mov	r0, fp
    2ed8:	f007 fd9f 	bl	aa1a <arm_cmse_mpu_region_get>
    2edc:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2ede:	eb08 000b 	add.w	r0, r8, fp
    2ee2:	3801      	subs	r0, #1
    2ee4:	f007 fd99 	bl	aa1a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2ee8:	4286      	cmp	r6, r0
    2eea:	d1a8      	bne.n	2e3e <mpu_configure_regions_and_partition+0x12>
		if ((u_reg_index == -EINVAL) ||
    2eec:	f116 0f16 	cmn.w	r6, #22
    2ef0:	d057      	beq.n	2fa2 <mpu_configure_regions_and_partition+0x176>
			(u_reg_index > (reg_index - 1))) {
    2ef2:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    2ef4:	42b3      	cmp	r3, r6
    2ef6:	db59      	blt.n	2fac <mpu_configure_regions_and_partition+0x180>
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
    2ef8:	4630      	mov	r0, r6
	MPU->RNR = index;
    2efa:	4b2e      	ldr	r3, [pc, #184]	; (2fb4 <mpu_configure_regions_and_partition+0x188>)
    2efc:	609e      	str	r6, [r3, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2efe:	68d9      	ldr	r1, [r3, #12]
    2f00:	f021 011f 	bic.w	r1, r1, #31
	MPU->RNR = index;
    2f04:	609e      	str	r6, [r3, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2f06:	691b      	ldr	r3, [r3, #16]
    2f08:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    2f0c:	f859 300a 	ldr.w	r3, [r9, sl]
    2f10:	686a      	ldr	r2, [r5, #4]
    2f12:	441a      	add	r2, r3
    2f14:	f102 3bff 	add.w	fp, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    2f18:	4299      	cmp	r1, r3
    2f1a:	d093      	beq.n	2e44 <mpu_configure_regions_and_partition+0x18>
		} else if (regions[i].start == u_reg_base) {
    2f1c:	4299      	cmp	r1, r3
    2f1e:	d098      	beq.n	2e52 <mpu_configure_regions_and_partition+0x26>
		} else if (reg_last == u_reg_last) {
    2f20:	45d8      	cmp	r8, fp
    2f22:	d0aa      	beq.n	2e7a <mpu_configure_regions_and_partition+0x4e>
				regions[i].start - 1);
    2f24:	3b01      	subs	r3, #1
	MPU->RNR = index;
    2f26:	4923      	ldr	r1, [pc, #140]	; (2fb4 <mpu_configure_regions_and_partition+0x188>)
    2f28:	4606      	mov	r6, r0
    2f2a:	6088      	str	r0, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2f2c:	690a      	ldr	r2, [r1, #16]
    2f2e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    2f32:	f023 031f 	bic.w	r3, r3, #31
    2f36:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2f38:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, &regions[i]);
    2f3a:	4629      	mov	r1, r5
    2f3c:	b2e0      	uxtb	r0, r4
    2f3e:	f007 fd93 	bl	aa68 <mpu_configure_region>
    2f42:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    2f44:	f110 0f16 	cmn.w	r0, #22
    2f48:	d02c      	beq.n	2fa4 <mpu_configure_regions_and_partition+0x178>
			reg_index++;
    2f4a:	3001      	adds	r0, #1
	MPU->RNR = index;
    2f4c:	4b19      	ldr	r3, [pc, #100]	; (2fb4 <mpu_configure_regions_and_partition+0x188>)
    2f4e:	609e      	str	r6, [r3, #8]
	attr->rbar = MPU->RBAR &
    2f50:	68d9      	ldr	r1, [r3, #12]
    2f52:	f89d 2010 	ldrb.w	r2, [sp, #16]
    2f56:	f361 0204 	bfi	r2, r1, #0, #5
    2f5a:	f88d 2010 	strb.w	r2, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2f5e:	691b      	ldr	r3, [r3, #16]
    2f60:	f3c3 0342 	ubfx	r3, r3, #1, #3
    2f64:	b2d2      	uxtb	r2, r2
    2f66:	f363 1247 	bfi	r2, r3, #5, #3
    2f6a:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i].start +
    2f6e:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
    2f72:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
    2f74:	4413      	add	r3, r2
    2f76:	9302      	str	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    2f78:	f023 031f 	bic.w	r3, r3, #31
    2f7c:	eba8 080b 	sub.w	r8, r8, fp
    2f80:	4443      	add	r3, r8
    2f82:	3b01      	subs	r3, #1
    2f84:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    2f88:	9305      	str	r3, [sp, #20]
				region_allocate_and_init(reg_index,
    2f8a:	a902      	add	r1, sp, #8
    2f8c:	b2c0      	uxtb	r0, r0
    2f8e:	f007 fd60 	bl	aa52 <region_allocate_and_init>
    2f92:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    2f94:	f110 0f16 	cmn.w	r0, #22
    2f98:	d184      	bne.n	2ea4 <mpu_configure_regions_and_partition+0x78>
    2f9a:	e003      	b.n	2fa4 <mpu_configure_regions_and_partition+0x178>
			return -EINVAL;
    2f9c:	f06f 0415 	mvn.w	r4, #21
    2fa0:	e000      	b.n	2fa4 <mpu_configure_regions_and_partition+0x178>
			return -EINVAL;
    2fa2:	4634      	mov	r4, r6
		}
	}

	return reg_index;
}
    2fa4:	4620      	mov	r0, r4
    2fa6:	b007      	add	sp, #28
    2fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    2fac:	f06f 0415 	mvn.w	r4, #21
    2fb0:	e7f8      	b.n	2fa4 <mpu_configure_regions_and_partition+0x178>
    2fb2:	bf00      	nop
    2fb4:	e000ed90 	.word	0xe000ed90

00002fb8 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    2fb8:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    2fba:	4c03      	ldr	r4, [pc, #12]	; (2fc8 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    2fbc:	2301      	movs	r3, #1
    2fbe:	7822      	ldrb	r2, [r4, #0]
    2fc0:	f7ff ff34 	bl	2e2c <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2fc4:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    2fc6:	bd10      	pop	{r4, pc}
    2fc8:	20001b18 	.word	0x20001b18

00002fcc <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    2fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2fd0:	4607      	mov	r7, r0
    2fd2:	4688      	mov	r8, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2fd4:	2400      	movs	r4, #0
    2fd6:	e003      	b.n	2fe0 <mpu_mark_areas_for_dynamic_regions+0x14>
	return -EINVAL;
    2fd8:	f06f 0515 	mvn.w	r5, #21
    2fdc:	e017      	b.n	300e <CONFIG_USB_DEVICE_VID+0x2b>
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2fde:	3401      	adds	r4, #1
    2fe0:	45a0      	cmp	r8, r4
    2fe2:	dd3c      	ble.n	305e <CONFIG_USB_DEVICE_VID+0x7b>
		if (dyn_region_areas[i].size == 0U) {
    2fe4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    2fe8:	009a      	lsls	r2, r3, #2
    2fea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    2fee:	685e      	ldr	r6, [r3, #4]
    2ff0:	2e00      	cmp	r6, #0
    2ff2:	d0f4      	beq.n	2fde <mpu_mark_areas_for_dynamic_regions+0x12>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    2ff4:	f857 9002 	ldr.w	r9, [r7, r2]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2ff8:	4648      	mov	r0, r9
    2ffa:	f007 fd0e 	bl	aa1a <arm_cmse_mpu_region_get>
    2ffe:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    3000:	eb06 0009 	add.w	r0, r6, r9
    3004:	3801      	subs	r0, #1
    3006:	f007 fd08 	bl	aa1a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    300a:	4285      	cmp	r5, r0
    300c:	d1e4      	bne.n	2fd8 <mpu_mark_areas_for_dynamic_regions+0xc>
		dyn_reg_info[i].index =
    300e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3012:	4a16      	ldr	r2, [pc, #88]	; (306c <CONFIG_USB_DEVICE_VID+0x89>)
    3014:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    3018:	f115 0f16 	cmn.w	r5, #22
    301c:	d020      	beq.n	3060 <CONFIG_USB_DEVICE_VID+0x7d>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    301e:	4b14      	ldr	r3, [pc, #80]	; (3070 <CONFIG_USB_DEVICE_VID+0x8d>)
    3020:	781b      	ldrb	r3, [r3, #0]
    3022:	42ab      	cmp	r3, r5
    3024:	dd1f      	ble.n	3066 <CONFIG_USB_DEVICE_VID+0x83>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    3026:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    302a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	MPU->RNR = index;
    302e:	4a11      	ldr	r2, [pc, #68]	; (3074 <CONFIG_USB_DEVICE_VID+0x91>)
    3030:	6095      	str	r5, [r2, #8]
	MPU->RNR = index;
    3032:	6095      	str	r5, [r2, #8]
	attr->rbar = MPU->RBAR &
    3034:	68d5      	ldr	r5, [r2, #12]
    3036:	7b18      	ldrb	r0, [r3, #12]
    3038:	f365 0004 	bfi	r0, r5, #0, #5
    303c:	7318      	strb	r0, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    303e:	6910      	ldr	r0, [r2, #16]
    3040:	f3c0 0042 	ubfx	r0, r0, #1, #3
    3044:	7b1d      	ldrb	r5, [r3, #12]
    3046:	f360 1547 	bfi	r5, r0, #5, #3
    304a:	731d      	strb	r5, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    304c:	68d1      	ldr	r1, [r2, #12]
    304e:	f021 011f 	bic.w	r1, r1, #31
    3052:	6059      	str	r1, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    3054:	6912      	ldr	r2, [r2, #16]
    3056:	f022 021f 	bic.w	r2, r2, #31
    305a:	611a      	str	r2, [r3, #16]
}
    305c:	e7bf      	b.n	2fde <mpu_mark_areas_for_dynamic_regions+0x12>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    305e:	2500      	movs	r5, #0
}
    3060:	4628      	mov	r0, r5
    3062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    3066:	f06f 0515 	mvn.w	r5, #21
    306a:	e7f9      	b.n	3060 <CONFIG_USB_DEVICE_VID+0x7d>
    306c:	20000ec0 	.word	0x20000ec0
    3070:	20001b18 	.word	0x20001b18
    3074:	e000ed90 	.word	0xe000ed90

00003078 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3078:	4b03      	ldr	r3, [pc, #12]	; (3088 <arm_core_mpu_enable+0x10>)
    307a:	2205      	movs	r2, #5
    307c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    307e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3082:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3086:	4770      	bx	lr
    3088:	e000ed90 	.word	0xe000ed90

0000308c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    308c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3090:	4b01      	ldr	r3, [pc, #4]	; (3098 <arm_core_mpu_disable+0xc>)
    3092:	2200      	movs	r2, #0
    3094:	605a      	str	r2, [r3, #4]
}
    3096:	4770      	bx	lr
    3098:	e000ed90 	.word	0xe000ed90

0000309c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    309c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    309e:	4b0e      	ldr	r3, [pc, #56]	; (30d8 <z_arm_mpu_init+0x3c>)
    30a0:	681d      	ldr	r5, [r3, #0]
    30a2:	2d08      	cmp	r5, #8
    30a4:	d815      	bhi.n	30d2 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    30a6:	f7ff fff1 	bl	308c <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    30aa:	f7ff fe9f 	bl	2dec <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    30ae:	2400      	movs	r4, #0
    30b0:	42a5      	cmp	r5, r4
    30b2:	d908      	bls.n	30c6 <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    30b4:	4b08      	ldr	r3, [pc, #32]	; (30d8 <z_arm_mpu_init+0x3c>)
    30b6:	6859      	ldr	r1, [r3, #4]
    30b8:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    30bc:	4620      	mov	r0, r4
    30be:	f7ff fe9d 	bl	2dfc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    30c2:	3401      	adds	r4, #1
    30c4:	e7f4      	b.n	30b0 <z_arm_mpu_init+0x14>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    30c6:	4b05      	ldr	r3, [pc, #20]	; (30dc <z_arm_mpu_init+0x40>)
    30c8:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    30ca:	f7ff ffd5 	bl	3078 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    30ce:	2000      	movs	r0, #0
}
    30d0:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    30d2:	f04f 30ff 	mov.w	r0, #4294967295
    30d6:	e7fb      	b.n	30d0 <z_arm_mpu_init+0x34>
    30d8:	0000c594 	.word	0x0000c594
    30dc:	20001b18 	.word	0x20001b18

000030e0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    30e0:	4b01      	ldr	r3, [pc, #4]	; (30e8 <__stdout_hook_install+0x8>)
    30e2:	6018      	str	r0, [r3, #0]
}
    30e4:	4770      	bx	lr
    30e6:	bf00      	nop
    30e8:	200000fc 	.word	0x200000fc

000030ec <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    30ec:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
    30f0:	b242      	sxtb	r2, r0
    30f2:	2a00      	cmp	r2, #0
    30f4:	db12      	blt.n	311c <endpoint_ctx+0x30>
			if (ep_num >= CFG_EPIN_CNT) {
				return false;
			}
		}
	} else {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    30f6:	2b08      	cmp	r3, #8
    30f8:	d002      	beq.n	3100 <endpoint_ctx+0x14>
			if (CFG_EP_ISOOUT_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPOUT_CNT) {
    30fa:	f010 0f78 	tst.w	r0, #120	; 0x78
    30fe:	d11d      	bne.n	313c <endpoint_ctx+0x50>
	if (!ep_is_valid(ep)) {
		return NULL;
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);
    3100:	f000 030f 	and.w	r3, r0, #15

	if (NRF_USBD_EPIN_CHECK(ep)) {
    3104:	2a00      	cmp	r2, #0
    3106:	db10      	blt.n	312a <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3108:	f010 0f08 	tst.w	r0, #8
    310c:	d11a      	bne.n	3144 <endpoint_ctx+0x58>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
					    CFG_EP_ISOIN_CNT +
    310e:	3309      	adds	r3, #9
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    3110:	015b      	lsls	r3, r3, #5
    3112:	3348      	adds	r3, #72	; 0x48
    3114:	480c      	ldr	r0, [pc, #48]	; (3148 <endpoint_ctx+0x5c>)
    3116:	4403      	add	r3, r0
    3118:	1d18      	adds	r0, r3, #4
    311a:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    311c:	2b08      	cmp	r3, #8
    311e:	d0ef      	beq.n	3100 <endpoint_ctx+0x14>
			if (ep_num >= CFG_EPIN_CNT) {
    3120:	f010 0f78 	tst.w	r0, #120	; 0x78
    3124:	d0ec      	beq.n	3100 <endpoint_ctx+0x14>
		return NULL;
    3126:	2000      	movs	r0, #0
    3128:	4770      	bx	lr
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    312a:	f010 0f08 	tst.w	r0, #8
    312e:	d107      	bne.n	3140 <endpoint_ctx+0x54>
			return &ctx->ep_ctx[ep_num];
    3130:	015b      	lsls	r3, r3, #5
    3132:	3348      	adds	r3, #72	; 0x48
    3134:	4804      	ldr	r0, [pc, #16]	; (3148 <endpoint_ctx+0x5c>)
    3136:	4403      	add	r3, r0
    3138:	1d18      	adds	r0, r3, #4
    313a:	4770      	bx	lr
		return NULL;
    313c:	2000      	movs	r0, #0
    313e:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    3140:	4802      	ldr	r0, [pc, #8]	; (314c <endpoint_ctx+0x60>)
    3142:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    3144:	4802      	ldr	r0, [pc, #8]	; (3150 <endpoint_ctx+0x64>)
					    ep_num];
		}
	}

	return NULL;
}
    3146:	4770      	bx	lr
    3148:	200014d4 	.word	0x200014d4
    314c:	20001620 	.word	0x20001620
    3150:	20001740 	.word	0x20001740

00003154 <eps_ctx_init>:
 * Endpoint buffers are allocated during the first call of this function.
 * This function may also be called again on every USB reset event
 * to reinitialize the state of all endpoints.
 */
static int eps_ctx_init(void)
{
    3154:	b510      	push	{r4, lr}
	struct nrf_usbd_ep_ctx *ep_ctx;
	uint32_t i;

	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    3156:	2400      	movs	r4, #0
    3158:	e005      	b.n	3166 <eps_ctx_init+0x12>
		ep_ctx = in_endpoint_ctx(i);
    315a:	b2e0      	uxtb	r0, r4
    315c:	f007 fd17 	bl	ab8e <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
    3160:	f007 fd1f 	bl	aba2 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    3164:	3401      	adds	r4, #1
    3166:	2c07      	cmp	r4, #7
    3168:	d9f7      	bls.n	315a <eps_ctx_init+0x6>
	}

	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    316a:	2400      	movs	r4, #0
    316c:	e006      	b.n	317c <eps_ctx_init+0x28>
		ep_ctx = out_endpoint_ctx(i);
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
			ep_ctx->buf.block.data = ep_out_bufs[i];
    316e:	4b10      	ldr	r3, [pc, #64]	; (31b0 <eps_ctx_init+0x5c>)
    3170:	eb03 1384 	add.w	r3, r3, r4, lsl #6
    3174:	6103      	str	r3, [r0, #16]
		}

		ep_ctx_reset(ep_ctx);
    3176:	f007 fd14 	bl	aba2 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    317a:	3401      	adds	r4, #1
    317c:	2c07      	cmp	r4, #7
    317e:	d806      	bhi.n	318e <eps_ctx_init+0x3a>
		ep_ctx = out_endpoint_ctx(i);
    3180:	b2e0      	uxtb	r0, r4
    3182:	f007 fd0a 	bl	ab9a <out_endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    3186:	6903      	ldr	r3, [r0, #16]
    3188:	2b00      	cmp	r3, #0
    318a:	d1f4      	bne.n	3176 <eps_ctx_init+0x22>
    318c:	e7ef      	b.n	316e <eps_ctx_init+0x1a>
	}

	if (CFG_EP_ISOIN_CNT) {
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
    318e:	2088      	movs	r0, #136	; 0x88
    3190:	f007 fcfd 	bl	ab8e <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
    3194:	f007 fd05 	bl	aba2 <ep_ctx_reset>
	}

	if (CFG_EP_ISOOUT_CNT) {
		BUILD_ASSERT(CFG_EP_ISOOUT_CNT <= 1);

		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
    3198:	2008      	movs	r0, #8
    319a:	f007 fcfe 	bl	ab9a <out_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
    319e:	6903      	ldr	r3, [r0, #16]
    31a0:	b11b      	cbz	r3, 31aa <eps_ctx_init+0x56>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
		}

		ep_ctx_reset(ep_ctx);
    31a2:	f007 fcfe 	bl	aba2 <ep_ctx_reset>
	}

	return 0;
}
    31a6:	2000      	movs	r0, #0
    31a8:	bd10      	pop	{r4, pc}
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    31aa:	4b02      	ldr	r3, [pc, #8]	; (31b4 <eps_ctx_init+0x60>)
    31ac:	6103      	str	r3, [r0, #16]
    31ae:	e7f8      	b.n	31a2 <eps_ctx_init+0x4e>
    31b0:	200012d4 	.word	0x200012d4
    31b4:	20000ed4 	.word	0x20000ed4

000031b8 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    31b8:	b510      	push	{r4, lr}
    31ba:	b082      	sub	sp, #8

#ifdef CONFIG_HAS_HW_NRF_USBREG
	/* Use CLOCK/POWER priority for compatibility with other series where
	 * USB events are handled by CLOCK interrupt handler.
	 */
	IRQ_CONNECT(USBREGULATOR_IRQn,
    31bc:	2200      	movs	r2, #0
    31be:	2101      	movs	r1, #1
    31c0:	2037      	movs	r0, #55	; 0x37
    31c2:	f7ff fb45 	bl	2850 <z_arm_irq_priority_set>
		    DT_IRQ(DT_INST(0, nordic_nrf_clock), priority),
		    nrfx_isr, nrfx_usbreg_irq_handler, 0);
	irq_enable(USBREGULATOR_IRQn);
    31c6:	2037      	movs	r0, #55	; 0x37
    31c8:	f7ff fb10 	bl	27ec <arch_irq_enable>
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    31cc:	480b      	ldr	r0, [pc, #44]	; (31fc <usb_init+0x44>)
    31ce:	f002 fef7 	bl	5fc0 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);
    31d2:	480b      	ldr	r0, [pc, #44]	; (3200 <usb_init+0x48>)
    31d4:	f004 fd4a 	bl	7c6c <nrfx_usbreg_init>

	k_work_queue_start(&usbd_work_queue,
    31d8:	2400      	movs	r4, #0
    31da:	9400      	str	r4, [sp, #0]
    31dc:	f04f 33ff 	mov.w	r3, #4294967295
    31e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    31e4:	4907      	ldr	r1, [pc, #28]	; (3204 <usb_init+0x4c>)
    31e6:	4808      	ldr	r0, [pc, #32]	; (3208 <usb_init+0x50>)
    31e8:	f005 fa72 	bl	86d0 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
    31ec:	4907      	ldr	r1, [pc, #28]	; (320c <usb_init+0x54>)
    31ee:	4808      	ldr	r0, [pc, #32]	; (3210 <usb_init+0x58>)
    31f0:	f008 fc74 	bl	badc <k_work_init>

	return 0;
}
    31f4:	4620      	mov	r0, r4
    31f6:	b002      	add	sp, #8
    31f8:	bd10      	pop	{r4, pc}
    31fa:	bf00      	nop
    31fc:	0000c5bc 	.word	0x0000c5bc
    3200:	0000c5c0 	.word	0x0000c5c0
    3204:	200020e0 	.word	0x200020e0
    3208:	20000480 	.word	0x20000480
    320c:	0000334d 	.word	0x0000334d
    3210:	200014fc 	.word	0x200014fc

00003214 <submit_dc_power_event>:
{
    3214:	b530      	push	{r4, r5, lr}
    3216:	b083      	sub	sp, #12
    3218:	4605      	mov	r5, r0
	if (k_mem_slab_alloc(&fifo_elem_slab,
    321a:	2200      	movs	r2, #0
    321c:	2300      	movs	r3, #0
    321e:	a901      	add	r1, sp, #4
    3220:	481d      	ldr	r0, [pc, #116]	; (3298 <submit_dc_power_event+0x84>)
    3222:	f004 fe99 	bl	7f58 <k_mem_slab_alloc>
    3226:	b9a0      	cbnz	r0, 3252 <submit_dc_power_event+0x3e>
	ev = (struct usbd_event *)block.data;
    3228:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    322a:	6064      	str	r4, [r4, #4]
	if (!ev) {
    322c:	b154      	cbz	r4, 3244 <submit_dc_power_event+0x30>
	ev->evt_type = USBD_EVT_POWER;
    322e:	2300      	movs	r3, #0
    3230:	7423      	strb	r3, [r4, #16]
	ev->evt.pwr_evt.state = state;
    3232:	7225      	strb	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    3234:	4621      	mov	r1, r4
    3236:	4819      	ldr	r0, [pc, #100]	; (329c <submit_dc_power_event+0x88>)
    3238:	f008 fc35 	bl	baa6 <k_queue_append>
	if (usbd_ctx.attached) {
    323c:	4b18      	ldr	r3, [pc, #96]	; (32a0 <submit_dc_power_event+0x8c>)
    323e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    3242:	bb1b      	cbnz	r3, 328c <submit_dc_power_event+0x78>
}
    3244:	b003      	add	sp, #12
    3246:	bd30      	pop	{r4, r5, pc}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3248:	1d01      	adds	r1, r0, #4
    324a:	4813      	ldr	r0, [pc, #76]	; (3298 <submit_dc_power_event+0x84>)
    324c:	f008 fb1c 	bl	b888 <k_mem_slab_free>
	} while (ev != NULL);
    3250:	b144      	cbz	r4, 3264 <submit_dc_power_event+0x50>
	return z_impl_k_queue_get(queue, timeout);
    3252:	2200      	movs	r2, #0
    3254:	2300      	movs	r3, #0
    3256:	4811      	ldr	r0, [pc, #68]	; (329c <submit_dc_power_event+0x88>)
    3258:	f005 f890 	bl	837c <z_impl_k_queue_get>
		if (ev) {
    325c:	4604      	mov	r4, r0
    325e:	2800      	cmp	r0, #0
    3260:	d1f2      	bne.n	3248 <submit_dc_power_event+0x34>
    3262:	e7f5      	b.n	3250 <submit_dc_power_event+0x3c>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    3264:	2200      	movs	r2, #0
    3266:	2300      	movs	r3, #0
    3268:	a901      	add	r1, sp, #4
    326a:	480b      	ldr	r0, [pc, #44]	; (3298 <submit_dc_power_event+0x84>)
    326c:	f004 fe74 	bl	7f58 <k_mem_slab_alloc>
    3270:	2800      	cmp	r0, #0
    3272:	d1db      	bne.n	322c <submit_dc_power_event+0x18>
		ev = (struct usbd_event *)block.data;
    3274:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    3276:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    3278:	2304      	movs	r3, #4
    327a:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    327c:	4807      	ldr	r0, [pc, #28]	; (329c <submit_dc_power_event+0x88>)
    327e:	f008 fc12 	bl	baa6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    3282:	4908      	ldr	r1, [pc, #32]	; (32a4 <submit_dc_power_event+0x90>)
    3284:	4808      	ldr	r0, [pc, #32]	; (32a8 <submit_dc_power_event+0x94>)
    3286:	f008 fc2f 	bl	bae8 <k_work_submit_to_queue>
		return NULL;
    328a:	e7cf      	b.n	322c <submit_dc_power_event+0x18>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    328c:	4905      	ldr	r1, [pc, #20]	; (32a4 <submit_dc_power_event+0x90>)
    328e:	4806      	ldr	r0, [pc, #24]	; (32a8 <submit_dc_power_event+0x94>)
    3290:	f008 fc2a 	bl	bae8 <k_work_submit_to_queue>
}
    3294:	e7d6      	b.n	3244 <submit_dc_power_event+0x30>
    3296:	bf00      	nop
    3298:	20000230 	.word	0x20000230
    329c:	200002b0 	.word	0x200002b0
    32a0:	200014d4 	.word	0x200014d4
    32a4:	200014fc 	.word	0x200014fc
    32a8:	20000480 	.word	0x20000480

000032ac <usbd_sof_trigger_iso_read>:
{
    32ac:	b530      	push	{r4, r5, lr}
    32ae:	b083      	sub	sp, #12
	ep_ctx = endpoint_ctx(NRFX_USBD_EPOUT8);
    32b0:	2008      	movs	r0, #8
    32b2:	f7ff ff1b 	bl	30ec <endpoint_ctx>
	if (!ep_ctx) {
    32b6:	b110      	cbz	r0, 32be <usbd_sof_trigger_iso_read+0x12>
    32b8:	4605      	mov	r5, r0
	if (ep_ctx->cfg.en) {
    32ba:	7a03      	ldrb	r3, [r0, #8]
    32bc:	b90b      	cbnz	r3, 32c2 <usbd_sof_trigger_iso_read+0x16>
}
    32be:	b003      	add	sp, #12
    32c0:	bd30      	pop	{r4, r5, pc}
		ep_ctx->read_pending = true;
    32c2:	2301      	movs	r3, #1
    32c4:	7743      	strb	r3, [r0, #29]
		ep_ctx->read_complete = true;
    32c6:	7703      	strb	r3, [r0, #28]
	if (k_mem_slab_alloc(&fifo_elem_slab,
    32c8:	2200      	movs	r2, #0
    32ca:	2300      	movs	r3, #0
    32cc:	a901      	add	r1, sp, #4
    32ce:	481b      	ldr	r0, [pc, #108]	; (333c <usbd_sof_trigger_iso_read+0x90>)
    32d0:	f004 fe42 	bl	7f58 <k_mem_slab_alloc>
    32d4:	b9a8      	cbnz	r0, 3302 <usbd_sof_trigger_iso_read+0x56>
	ev = (struct usbd_event *)block.data;
    32d6:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    32d8:	6064      	str	r4, [r4, #4]
		if (!ev) {
    32da:	2c00      	cmp	r4, #0
    32dc:	d0ef      	beq.n	32be <usbd_sof_trigger_iso_read+0x12>
		ev->evt_type = USBD_EVT_EP;
    32de:	2301      	movs	r3, #1
    32e0:	7423      	strb	r3, [r4, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    32e2:	7323      	strb	r3, [r4, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    32e4:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    32e6:	4621      	mov	r1, r4
    32e8:	4815      	ldr	r0, [pc, #84]	; (3340 <usbd_sof_trigger_iso_read+0x94>)
    32ea:	f008 fbdc 	bl	baa6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    32ee:	4915      	ldr	r1, [pc, #84]	; (3344 <usbd_sof_trigger_iso_read+0x98>)
    32f0:	4815      	ldr	r0, [pc, #84]	; (3348 <usbd_sof_trigger_iso_read+0x9c>)
    32f2:	f008 fbf9 	bl	bae8 <k_work_submit_to_queue>
}
    32f6:	e7e2      	b.n	32be <usbd_sof_trigger_iso_read+0x12>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    32f8:	1d01      	adds	r1, r0, #4
    32fa:	4810      	ldr	r0, [pc, #64]	; (333c <usbd_sof_trigger_iso_read+0x90>)
    32fc:	f008 fac4 	bl	b888 <k_mem_slab_free>
	} while (ev != NULL);
    3300:	b144      	cbz	r4, 3314 <usbd_sof_trigger_iso_read+0x68>
    3302:	2200      	movs	r2, #0
    3304:	2300      	movs	r3, #0
    3306:	480e      	ldr	r0, [pc, #56]	; (3340 <usbd_sof_trigger_iso_read+0x94>)
    3308:	f005 f838 	bl	837c <z_impl_k_queue_get>
		if (ev) {
    330c:	4604      	mov	r4, r0
    330e:	2800      	cmp	r0, #0
    3310:	d1f2      	bne.n	32f8 <usbd_sof_trigger_iso_read+0x4c>
    3312:	e7f5      	b.n	3300 <usbd_sof_trigger_iso_read+0x54>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    3314:	2200      	movs	r2, #0
    3316:	2300      	movs	r3, #0
    3318:	a901      	add	r1, sp, #4
    331a:	4808      	ldr	r0, [pc, #32]	; (333c <usbd_sof_trigger_iso_read+0x90>)
    331c:	f004 fe1c 	bl	7f58 <k_mem_slab_alloc>
    3320:	2800      	cmp	r0, #0
    3322:	d1da      	bne.n	32da <usbd_sof_trigger_iso_read+0x2e>
		ev = (struct usbd_event *)block.data;
    3324:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    3326:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    3328:	2304      	movs	r3, #4
    332a:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    332c:	4804      	ldr	r0, [pc, #16]	; (3340 <usbd_sof_trigger_iso_read+0x94>)
    332e:	f008 fbba 	bl	baa6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    3332:	4904      	ldr	r1, [pc, #16]	; (3344 <usbd_sof_trigger_iso_read+0x98>)
    3334:	4804      	ldr	r0, [pc, #16]	; (3348 <usbd_sof_trigger_iso_read+0x9c>)
    3336:	f008 fbd7 	bl	bae8 <k_work_submit_to_queue>
		return NULL;
    333a:	e7ce      	b.n	32da <usbd_sof_trigger_iso_read+0x2e>
    333c:	20000230 	.word	0x20000230
    3340:	200002b0 	.word	0x200002b0
    3344:	200014fc 	.word	0x200014fc
    3348:	20000480 	.word	0x20000480

0000334c <usbd_work_handler>:
{
    334c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3350:	b084      	sub	sp, #16
    3352:	4606      	mov	r6, r0
	while ((ev = usbd_evt_get()) != NULL) {
    3354:	e11b      	b.n	358e <usbd_work_handler+0x242>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3356:	1d21      	adds	r1, r4, #4
    3358:	489e      	ldr	r0, [pc, #632]	; (35d4 <usbd_work_handler+0x288>)
    335a:	f008 fa95 	bl	b888 <k_mem_slab_free>
			continue;
    335e:	e116      	b.n	358e <usbd_work_handler+0x242>
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    3360:	68a5      	ldr	r5, [r4, #8]
	switch (ep_evt->evt_type) {
    3362:	7b23      	ldrb	r3, [r4, #12]
    3364:	2b03      	cmp	r3, #3
    3366:	f200 810e 	bhi.w	3586 <usbd_work_handler+0x23a>
    336a:	e8df f003 	tbb	[pc, r3]
    336e:	4502      	.short	0x4502
    3370:	6b66      	.short	0x6b66
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    3372:	696f      	ldr	r7, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    3374:	2208      	movs	r2, #8
    3376:	2100      	movs	r1, #0
    3378:	4638      	mov	r0, r7
    337a:	f007 fbe8 	bl	ab4e <memset>
    return ret;
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_bmrequesttype_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    337e:	4b96      	ldr	r3, [pc, #600]	; (35d8 <usbd_work_handler+0x28c>)
    3380:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
	usbd_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    3384:	703a      	strb	r2, [r7, #0]
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_brequest_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BREQUEST);
    3386:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
	usbd_setup->bRequest = nrf_usbd_setup_brequest_get(NRF_USBD);
    338a:	707a      	strb	r2, [r7, #1]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wvalue_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WVALUEL;
    338c:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    3390:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    3392:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    3396:	0209      	lsls	r1, r1, #8
    3398:	b289      	uxth	r1, r1
    339a:	430a      	orrs	r2, r1
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    339c:	807a      	strh	r2, [r7, #2]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_windex_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WINDEXL;
    339e:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    33a2:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    33a4:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    33a8:	0209      	lsls	r1, r1, #8
    33aa:	b289      	uxth	r1, r1
    33ac:	430a      	orrs	r2, r1
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    33ae:	80ba      	strh	r2, [r7, #4]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wlength_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WLENGTHL;
    33b0:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    33b4:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    33b6:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    33ba:	021b      	lsls	r3, r3, #8
    33bc:	b29b      	uxth	r3, r3
    33be:	4313      	orrs	r3, r2
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    33c0:	80fb      	strh	r3, [r7, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    33c2:	2208      	movs	r2, #8
    33c4:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    33c6:	4639      	mov	r1, r7
    33c8:	4884      	ldr	r0, [pc, #528]	; (35dc <usbd_work_handler+0x290>)
    33ca:	f007 fb9c 	bl	ab06 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    33ce:	682b      	ldr	r3, [r5, #0]
    33d0:	2100      	movs	r1, #0
    33d2:	7a68      	ldrb	r0, [r5, #9]
    33d4:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    33d6:	f997 3000 	ldrsb.w	r3, [r7]
    33da:	2b00      	cmp	r3, #0
    33dc:	db01      	blt.n	33e2 <usbd_work_handler+0x96>
    33de:	88fb      	ldrh	r3, [r7, #6]
    33e0:	b923      	cbnz	r3, 33ec <usbd_work_handler+0xa0>
		ctx->ctrl_read_len = 0U;
    33e2:	4b7f      	ldr	r3, [pc, #508]	; (35e0 <usbd_work_handler+0x294>)
    33e4:	2200      	movs	r2, #0
    33e6:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
}
    33ea:	e0cc      	b.n	3586 <usbd_work_handler+0x23a>
		ctx->ctrl_read_len = usbd_setup->wLength;
    33ec:	4a7c      	ldr	r2, [pc, #496]	; (35e0 <usbd_work_handler+0x294>)
    33ee:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    33f2:	f003 ff9f 	bl	7334 <nrfx_usbd_setup_data_clear>
    33f6:	e0c6      	b.n	3586 <usbd_work_handler+0x23a>
	if (!ep_ctx->read_pending) {
    33f8:	7f6b      	ldrb	r3, [r5, #29]
    33fa:	2b00      	cmp	r3, #0
    33fc:	f000 80c3 	beq.w	3586 <usbd_work_handler+0x23a>
	if (!ep_ctx->read_complete) {
    3400:	7f2b      	ldrb	r3, [r5, #28]
    3402:	2b00      	cmp	r3, #0
    3404:	f000 80bf 	beq.w	3586 <usbd_work_handler+0x23a>
	ep_ctx->read_pending = false;
    3408:	2700      	movs	r7, #0
    340a:	776f      	strb	r7, [r5, #29]
	ep_ctx->read_complete = false;
    340c:	772f      	strb	r7, [r5, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
    340e:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 35e4 <usbd_work_handler+0x298>
    3412:	f04f 32ff 	mov.w	r2, #4294967295
    3416:	f04f 33ff 	mov.w	r3, #4294967295
    341a:	4640      	mov	r0, r8
    341c:	f004 fee0 	bl	81e0 <z_impl_k_mutex_lock>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    3420:	696b      	ldr	r3, [r5, #20]
    3422:	9301      	str	r3, [sp, #4]
    3424:	686b      	ldr	r3, [r5, #4]
    3426:	9302      	str	r3, [sp, #8]
    3428:	9703      	str	r7, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    342a:	a901      	add	r1, sp, #4
    342c:	7a68      	ldrb	r0, [r5, #9]
    342e:	f003 fb71 	bl	6b14 <nrfx_usbd_ep_transfer>
	return z_impl_k_mutex_unlock(mutex);
    3432:	4640      	mov	r0, r8
    3434:	f004 ff5e 	bl	82f4 <z_impl_k_mutex_unlock>
    3438:	e0a5      	b.n	3586 <usbd_work_handler+0x23a>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    343a:	682b      	ldr	r3, [r5, #0]
    343c:	2101      	movs	r1, #1
    343e:	7a68      	ldrb	r0, [r5, #9]
    3440:	4798      	blx	r3
		break;
    3442:	e0a0      	b.n	3586 <usbd_work_handler+0x23a>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    3444:	7aab      	ldrb	r3, [r5, #10]
    3446:	b90b      	cbnz	r3, 344c <usbd_work_handler+0x100>
		    !ep_ctx->trans_zlp) {
    3448:	7feb      	ldrb	r3, [r5, #31]
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    344a:	b123      	cbz	r3, 3456 <usbd_work_handler+0x10a>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    344c:	682b      	ldr	r3, [r5, #0]
    344e:	2102      	movs	r1, #2
    3450:	7a68      	ldrb	r0, [r5, #9]
    3452:	4798      	blx	r3
}
    3454:	e097      	b.n	3586 <usbd_work_handler+0x23a>
	return z_impl_k_mutex_lock(mutex, timeout);
    3456:	4f63      	ldr	r7, [pc, #396]	; (35e4 <usbd_work_handler+0x298>)
    3458:	f04f 32ff 	mov.w	r2, #4294967295
    345c:	f04f 33ff 	mov.w	r3, #4294967295
    3460:	4638      	mov	r0, r7
    3462:	f004 febd 	bl	81e0 <z_impl_k_mutex_lock>
			nrfx_usbd_setup_clear();
    3466:	f003 ffaf 	bl	73c8 <nrfx_usbd_setup_clear>
	return z_impl_k_mutex_unlock(mutex);
    346a:	4638      	mov	r0, r7
    346c:	f004 ff42 	bl	82f4 <z_impl_k_mutex_unlock>
    3470:	e7ec      	b.n	344c <usbd_work_handler+0x100>
	switch (pwr_evt->state) {
    3472:	7a23      	ldrb	r3, [r4, #8]
    3474:	2b04      	cmp	r3, #4
    3476:	f200 8086 	bhi.w	3586 <usbd_work_handler+0x23a>
    347a:	e8df f003 	tbb	[pc, r3]
    347e:	031e      	.short	0x031e
    3480:	2e0d      	.short	0x2e0d
    3482:	3d          	.byte	0x3d
    3483:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    3484:	f003 fad4 	bl	6a30 <nrfx_usbd_is_enabled>
    3488:	2800      	cmp	r0, #0
    348a:	d17c      	bne.n	3586 <usbd_work_handler+0x23a>
			nrfx_usbd_enable();
    348c:	f003 fa1a 	bl	68c4 <nrfx_usbd_enable>
			err = hfxo_start(ctx);
    3490:	4853      	ldr	r0, [pc, #332]	; (35e0 <usbd_work_handler+0x294>)
    3492:	f007 fbe9 	bl	ac68 <hfxo_start>
    3496:	e076      	b.n	3586 <usbd_work_handler+0x23a>
		usbd_enable_endpoints(ctx);
    3498:	4d51      	ldr	r5, [pc, #324]	; (35e0 <usbd_work_handler+0x294>)
    349a:	4628      	mov	r0, r5
    349c:	f007 fbb2 	bl	ac04 <usbd_enable_endpoints>
		nrfx_usbd_start(true);
    34a0:	2001      	movs	r0, #1
    34a2:	f003 faa9 	bl	69f8 <nrfx_usbd_start>
		ctx->ready = true;
    34a6:	2301      	movs	r3, #1
    34a8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
		if (ctx->status_cb) {
    34ac:	682b      	ldr	r3, [r5, #0]
    34ae:	2b00      	cmp	r3, #0
    34b0:	d069      	beq.n	3586 <usbd_work_handler+0x23a>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    34b2:	2100      	movs	r1, #0
    34b4:	2002      	movs	r0, #2
    34b6:	4798      	blx	r3
    34b8:	e065      	b.n	3586 <usbd_work_handler+0x23a>
		ctx->ready = false;
    34ba:	4d49      	ldr	r5, [pc, #292]	; (35e0 <usbd_work_handler+0x294>)
    34bc:	2300      	movs	r3, #0
    34be:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
		nrfx_usbd_disable();
    34c2:	f004 fa1f 	bl	7904 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    34c6:	4628      	mov	r0, r5
    34c8:	f007 fb7f 	bl	abca <hfxo_stop>
		if (ctx->status_cb) {
    34cc:	682b      	ldr	r3, [r5, #0]
    34ce:	2b00      	cmp	r3, #0
    34d0:	d059      	beq.n	3586 <usbd_work_handler+0x23a>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    34d2:	2100      	movs	r1, #0
    34d4:	2004      	movs	r0, #4
    34d6:	4798      	blx	r3
    34d8:	e055      	b.n	3586 <usbd_work_handler+0x23a>
	return get_usbd_ctx()->ready;
    34da:	4b41      	ldr	r3, [pc, #260]	; (35e0 <usbd_work_handler+0x294>)
    34dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (dev_ready()) {
    34e0:	2b00      	cmp	r3, #0
    34e2:	d050      	beq.n	3586 <usbd_work_handler+0x23a>
			nrfx_usbd_suspend();
    34e4:	f004 fa30 	bl	7948 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    34e8:	4b3d      	ldr	r3, [pc, #244]	; (35e0 <usbd_work_handler+0x294>)
    34ea:	681b      	ldr	r3, [r3, #0]
    34ec:	2b00      	cmp	r3, #0
    34ee:	d04a      	beq.n	3586 <usbd_work_handler+0x23a>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    34f0:	2100      	movs	r1, #0
    34f2:	2005      	movs	r0, #5
    34f4:	4798      	blx	r3
    34f6:	e046      	b.n	3586 <usbd_work_handler+0x23a>
		if (ctx->status_cb && dev_ready()) {
    34f8:	4b39      	ldr	r3, [pc, #228]	; (35e0 <usbd_work_handler+0x294>)
    34fa:	681b      	ldr	r3, [r3, #0]
    34fc:	2b00      	cmp	r3, #0
    34fe:	d042      	beq.n	3586 <usbd_work_handler+0x23a>
	return get_usbd_ctx()->ready;
    3500:	4a37      	ldr	r2, [pc, #220]	; (35e0 <usbd_work_handler+0x294>)
    3502:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
		if (ctx->status_cb && dev_ready()) {
    3506:	2a00      	cmp	r2, #0
    3508:	d03d      	beq.n	3586 <usbd_work_handler+0x23a>
			ctx->status_cb(USB_DC_RESUME, NULL);
    350a:	2100      	movs	r1, #0
    350c:	2006      	movs	r0, #6
    350e:	4798      	blx	r3
}
    3510:	e039      	b.n	3586 <usbd_work_handler+0x23a>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    3512:	f106 0510 	add.w	r5, r6, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    3516:	f04f 32ff 	mov.w	r2, #4294967295
    351a:	f04f 33ff 	mov.w	r3, #4294967295
    351e:	4628      	mov	r0, r5
    3520:	f004 fe5e 	bl	81e0 <z_impl_k_mutex_lock>
			eps_ctx_init();
    3524:	f7ff fe16 	bl	3154 <eps_ctx_init>
	return z_impl_k_mutex_unlock(mutex);
    3528:	4628      	mov	r0, r5
    352a:	f004 fee3 	bl	82f4 <z_impl_k_mutex_unlock>
			if (ctx->status_cb) {
    352e:	f856 3c28 	ldr.w	r3, [r6, #-40]
    3532:	b343      	cbz	r3, 3586 <usbd_work_handler+0x23a>
				ctx->status_cb(USB_DC_RESET, NULL);
    3534:	2100      	movs	r1, #0
    3536:	2001      	movs	r0, #1
    3538:	4798      	blx	r3
    353a:	e024      	b.n	3586 <usbd_work_handler+0x23a>
			usbd_sof_trigger_iso_read();
    353c:	f7ff feb6 	bl	32ac <usbd_sof_trigger_iso_read>
			if (ctx->status_cb) {
    3540:	f856 3c28 	ldr.w	r3, [r6, #-40]
    3544:	b1fb      	cbz	r3, 3586 <usbd_work_handler+0x23a>
				ctx->status_cb(USB_DC_SOF, NULL);
    3546:	2100      	movs	r1, #0
    3548:	200a      	movs	r0, #10
    354a:	4798      	blx	r3
    354c:	e01b      	b.n	3586 <usbd_work_handler+0x23a>
	nrfx_power_usbevt_disable();
    354e:	f004 fb79 	bl	7c44 <nrfx_usbreg_disable>
	nrfx_usbd_disable();
    3552:	f004 f9d7 	bl	7904 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    3556:	f003 f9ab 	bl	68b0 <nrfx_usbd_uninit>
static inline void usbd_evt_flush(void)
    355a:	e004      	b.n	3566 <usbd_work_handler+0x21a>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    355c:	1d01      	adds	r1, r0, #4
    355e:	481d      	ldr	r0, [pc, #116]	; (35d4 <usbd_work_handler+0x288>)
    3560:	f008 f992 	bl	b888 <k_mem_slab_free>
	} while (ev != NULL);
    3564:	b145      	cbz	r5, 3578 <usbd_work_handler+0x22c>
	return z_impl_k_queue_get(queue, timeout);
    3566:	2200      	movs	r2, #0
    3568:	2300      	movs	r3, #0
    356a:	481f      	ldr	r0, [pc, #124]	; (35e8 <usbd_work_handler+0x29c>)
    356c:	f004 ff06 	bl	837c <z_impl_k_queue_get>
		if (ev) {
    3570:	4605      	mov	r5, r0
    3572:	2800      	cmp	r0, #0
    3574:	d1f2      	bne.n	355c <usbd_work_handler+0x210>
    3576:	e7f5      	b.n	3564 <usbd_work_handler+0x218>
	ret = eps_ctx_init();
    3578:	f7ff fdec 	bl	3154 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    357c:	f004 fb5a 	bl	7c34 <nrfx_usbreg_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    3580:	481a      	ldr	r0, [pc, #104]	; (35ec <usbd_work_handler+0x2a0>)
    3582:	f003 fa6f 	bl	6a64 <nrfx_usbd_init>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3586:	1d21      	adds	r1, r4, #4
    3588:	4812      	ldr	r0, [pc, #72]	; (35d4 <usbd_work_handler+0x288>)
    358a:	f008 f97d 	bl	b888 <k_mem_slab_free>
    358e:	2200      	movs	r2, #0
    3590:	2300      	movs	r3, #0
    3592:	4815      	ldr	r0, [pc, #84]	; (35e8 <usbd_work_handler+0x29c>)
    3594:	f004 fef2 	bl	837c <z_impl_k_queue_get>
	while ((ev = usbd_evt_get()) != NULL) {
    3598:	4604      	mov	r4, r0
    359a:	b1b8      	cbz	r0, 35cc <usbd_work_handler+0x280>
	return get_usbd_ctx()->ready;
    359c:	4b10      	ldr	r3, [pc, #64]	; (35e0 <usbd_work_handler+0x294>)
    359e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    35a2:	b91b      	cbnz	r3, 35ac <usbd_work_handler+0x260>
    35a4:	7c23      	ldrb	r3, [r4, #16]
    35a6:	2b00      	cmp	r3, #0
    35a8:	f47f aed5 	bne.w	3356 <usbd_work_handler+0xa>
		switch (ev->evt_type) {
    35ac:	7c23      	ldrb	r3, [r4, #16]
    35ae:	2b04      	cmp	r3, #4
    35b0:	d8e9      	bhi.n	3586 <usbd_work_handler+0x23a>
    35b2:	a201      	add	r2, pc, #4	; (adr r2, 35b8 <usbd_work_handler+0x26c>)
    35b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    35b8:	00003473 	.word	0x00003473
    35bc:	00003361 	.word	0x00003361
    35c0:	00003513 	.word	0x00003513
    35c4:	0000353d 	.word	0x0000353d
    35c8:	0000354f 	.word	0x0000354f
}
    35cc:	b004      	add	sp, #16
    35ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35d2:	bf00      	nop
    35d4:	20000230 	.word	0x20000230
    35d8:	50036000 	.word	0x50036000
    35dc:	200014d8 	.word	0x200014d8
    35e0:	200014d4 	.word	0x200014d4
    35e4:	2000150c 	.word	0x2000150c
    35e8:	200002b0 	.word	0x200002b0
    35ec:	000039b9 	.word	0x000039b9

000035f0 <usbd_event_transfer_data>:
{
    35f0:	b570      	push	{r4, r5, r6, lr}
    35f2:	b082      	sub	sp, #8
    35f4:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    35f6:	7885      	ldrb	r5, [r0, #2]
    35f8:	4628      	mov	r0, r5
    35fa:	f7ff fd77 	bl	30ec <endpoint_ctx>
    35fe:	4606      	mov	r6, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3600:	f015 0f80 	tst.w	r5, #128	; 0x80
    3604:	d11d      	bne.n	3642 <usbd_event_transfer_data+0x52>
		switch (p_event->data.eptransfer.status) {
    3606:	78e3      	ldrb	r3, [r4, #3]
    3608:	2b00      	cmp	r3, #0
    360a:	d07d      	beq.n	3708 <usbd_event_transfer_data+0x118>
    360c:	2b01      	cmp	r3, #1
    360e:	d11a      	bne.n	3646 <usbd_event_transfer_data+0x56>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    3610:	2200      	movs	r2, #0
    3612:	2300      	movs	r3, #0
    3614:	a901      	add	r1, sp, #4
    3616:	486f      	ldr	r0, [pc, #444]	; (37d4 <usbd_event_transfer_data+0x1e4>)
    3618:	f004 fc9e 	bl	7f58 <k_mem_slab_alloc>
    361c:	2800      	cmp	r0, #0
    361e:	d156      	bne.n	36ce <usbd_event_transfer_data+0xde>
	ev = (struct usbd_event *)block.data;
    3620:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    3622:	6064      	str	r4, [r4, #4]
			if (!ev) {
    3624:	b17c      	cbz	r4, 3646 <usbd_event_transfer_data+0x56>
			ep_ctx->read_pending = true;
    3626:	2301      	movs	r3, #1
    3628:	7773      	strb	r3, [r6, #29]
			ev->evt_type = USBD_EVT_EP;
    362a:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    362c:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    362e:	60a6      	str	r6, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    3630:	4621      	mov	r1, r4
    3632:	4869      	ldr	r0, [pc, #420]	; (37d8 <usbd_event_transfer_data+0x1e8>)
    3634:	f008 fa37 	bl	baa6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    3638:	4968      	ldr	r1, [pc, #416]	; (37dc <usbd_event_transfer_data+0x1ec>)
    363a:	4869      	ldr	r0, [pc, #420]	; (37e0 <usbd_event_transfer_data+0x1f0>)
    363c:	f008 fa54 	bl	bae8 <k_work_submit_to_queue>
}
    3640:	e001      	b.n	3646 <usbd_event_transfer_data+0x56>
		switch (p_event->data.eptransfer.status) {
    3642:	78e3      	ldrb	r3, [r4, #3]
    3644:	b10b      	cbz	r3, 364a <usbd_event_transfer_data+0x5a>
}
    3646:	b002      	add	sp, #8
    3648:	bd70      	pop	{r4, r5, r6, pc}
	if (k_mem_slab_alloc(&fifo_elem_slab,
    364a:	2200      	movs	r2, #0
    364c:	2300      	movs	r3, #0
    364e:	a901      	add	r1, sp, #4
    3650:	4860      	ldr	r0, [pc, #384]	; (37d4 <usbd_event_transfer_data+0x1e4>)
    3652:	f004 fc81 	bl	7f58 <k_mem_slab_alloc>
    3656:	b9a0      	cbnz	r0, 3682 <usbd_event_transfer_data+0x92>
	ev = (struct usbd_event *)block.data;
    3658:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    365a:	6064      	str	r4, [r4, #4]
			if (!ev) {
    365c:	2c00      	cmp	r4, #0
    365e:	d0f2      	beq.n	3646 <usbd_event_transfer_data+0x56>
			ep_ctx->write_in_progress = false;
    3660:	2300      	movs	r3, #0
    3662:	77b3      	strb	r3, [r6, #30]
			ev->evt_type = USBD_EVT_EP;
    3664:	2301      	movs	r3, #1
    3666:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    3668:	2303      	movs	r3, #3
    366a:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    366c:	60a6      	str	r6, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    366e:	4621      	mov	r1, r4
    3670:	4859      	ldr	r0, [pc, #356]	; (37d8 <usbd_event_transfer_data+0x1e8>)
    3672:	f008 fa18 	bl	baa6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    3676:	4959      	ldr	r1, [pc, #356]	; (37dc <usbd_event_transfer_data+0x1ec>)
    3678:	4859      	ldr	r0, [pc, #356]	; (37e0 <usbd_event_transfer_data+0x1f0>)
    367a:	f008 fa35 	bl	bae8 <k_work_submit_to_queue>
}
    367e:	e7e2      	b.n	3646 <usbd_event_transfer_data+0x56>
	} while (ev != NULL);
    3680:	b164      	cbz	r4, 369c <usbd_event_transfer_data+0xac>
    3682:	2200      	movs	r2, #0
    3684:	2300      	movs	r3, #0
    3686:	4854      	ldr	r0, [pc, #336]	; (37d8 <usbd_event_transfer_data+0x1e8>)
    3688:	f004 fe78 	bl	837c <z_impl_k_queue_get>
		if (ev) {
    368c:	4604      	mov	r4, r0
    368e:	2800      	cmp	r0, #0
    3690:	d0f6      	beq.n	3680 <usbd_event_transfer_data+0x90>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3692:	1d01      	adds	r1, r0, #4
    3694:	484f      	ldr	r0, [pc, #316]	; (37d4 <usbd_event_transfer_data+0x1e4>)
    3696:	f008 f8f7 	bl	b888 <k_mem_slab_free>
}
    369a:	e7f1      	b.n	3680 <usbd_event_transfer_data+0x90>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    369c:	2200      	movs	r2, #0
    369e:	2300      	movs	r3, #0
    36a0:	a901      	add	r1, sp, #4
    36a2:	484c      	ldr	r0, [pc, #304]	; (37d4 <usbd_event_transfer_data+0x1e4>)
    36a4:	f004 fc58 	bl	7f58 <k_mem_slab_alloc>
    36a8:	2800      	cmp	r0, #0
    36aa:	d1d7      	bne.n	365c <usbd_event_transfer_data+0x6c>
		ev = (struct usbd_event *)block.data;
    36ac:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    36ae:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    36b0:	2304      	movs	r3, #4
    36b2:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    36b4:	4848      	ldr	r0, [pc, #288]	; (37d8 <usbd_event_transfer_data+0x1e8>)
    36b6:	f008 f9f6 	bl	baa6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    36ba:	4948      	ldr	r1, [pc, #288]	; (37dc <usbd_event_transfer_data+0x1ec>)
    36bc:	4848      	ldr	r0, [pc, #288]	; (37e0 <usbd_event_transfer_data+0x1f0>)
    36be:	f008 fa13 	bl	bae8 <k_work_submit_to_queue>
		return NULL;
    36c2:	e7cb      	b.n	365c <usbd_event_transfer_data+0x6c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    36c4:	1d01      	adds	r1, r0, #4
    36c6:	4843      	ldr	r0, [pc, #268]	; (37d4 <usbd_event_transfer_data+0x1e4>)
    36c8:	f008 f8de 	bl	b888 <k_mem_slab_free>
	} while (ev != NULL);
    36cc:	b144      	cbz	r4, 36e0 <usbd_event_transfer_data+0xf0>
    36ce:	2200      	movs	r2, #0
    36d0:	2300      	movs	r3, #0
    36d2:	4841      	ldr	r0, [pc, #260]	; (37d8 <usbd_event_transfer_data+0x1e8>)
    36d4:	f004 fe52 	bl	837c <z_impl_k_queue_get>
		if (ev) {
    36d8:	4604      	mov	r4, r0
    36da:	2800      	cmp	r0, #0
    36dc:	d1f2      	bne.n	36c4 <usbd_event_transfer_data+0xd4>
    36de:	e7f5      	b.n	36cc <usbd_event_transfer_data+0xdc>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    36e0:	2200      	movs	r2, #0
    36e2:	2300      	movs	r3, #0
    36e4:	a901      	add	r1, sp, #4
    36e6:	483b      	ldr	r0, [pc, #236]	; (37d4 <usbd_event_transfer_data+0x1e4>)
    36e8:	f004 fc36 	bl	7f58 <k_mem_slab_alloc>
    36ec:	2800      	cmp	r0, #0
    36ee:	d199      	bne.n	3624 <usbd_event_transfer_data+0x34>
		ev = (struct usbd_event *)block.data;
    36f0:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    36f2:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    36f4:	2304      	movs	r3, #4
    36f6:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    36f8:	4837      	ldr	r0, [pc, #220]	; (37d8 <usbd_event_transfer_data+0x1e8>)
    36fa:	f008 f9d4 	bl	baa6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    36fe:	4937      	ldr	r1, [pc, #220]	; (37dc <usbd_event_transfer_data+0x1ec>)
    3700:	4837      	ldr	r0, [pc, #220]	; (37e0 <usbd_event_transfer_data+0x1f0>)
    3702:	f008 f9f1 	bl	bae8 <k_work_submit_to_queue>
		return NULL;
    3706:	e78d      	b.n	3624 <usbd_event_transfer_data+0x34>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    3708:	2200      	movs	r2, #0
    370a:	2300      	movs	r3, #0
    370c:	a901      	add	r1, sp, #4
    370e:	4831      	ldr	r0, [pc, #196]	; (37d4 <usbd_event_transfer_data+0x1e4>)
    3710:	f004 fc22 	bl	7f58 <k_mem_slab_alloc>
    3714:	bb10      	cbnz	r0, 375c <usbd_event_transfer_data+0x16c>
	ev = (struct usbd_event *)block.data;
    3716:	9d01      	ldr	r5, [sp, #4]
	ev->block = block;
    3718:	606d      	str	r5, [r5, #4]
			if (!ev) {
    371a:	2d00      	cmp	r5, #0
    371c:	d093      	beq.n	3646 <usbd_event_transfer_data+0x56>
				p_event->data.eptransfer.ep);
    371e:	78a3      	ldrb	r3, [r4, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    3720:	f994 2002 	ldrsb.w	r2, [r4, #2]
    3724:	2a00      	cmp	r2, #0
    3726:	db36      	blt.n	3796 <usbd_event_transfer_data+0x1a6>
            ret = p_reg->EPIN[epnr].AMOUNT;
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    3728:	f013 0f08 	tst.w	r3, #8
    372c:	d046      	beq.n	37bc <usbd_event_transfer_data+0x1cc>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    372e:	4b2d      	ldr	r3, [pc, #180]	; (37e4 <usbd_event_transfer_data+0x1f4>)
    3730:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    3734:	60f3      	str	r3, [r6, #12]
			ev->evt_type = USBD_EVT_EP;
    3736:	2301      	movs	r3, #1
    3738:	742b      	strb	r3, [r5, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    373a:	2302      	movs	r3, #2
    373c:	732b      	strb	r3, [r5, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    373e:	60ae      	str	r6, [r5, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    3740:	4629      	mov	r1, r5
    3742:	4825      	ldr	r0, [pc, #148]	; (37d8 <usbd_event_transfer_data+0x1e8>)
    3744:	f008 f9af 	bl	baa6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    3748:	4924      	ldr	r1, [pc, #144]	; (37dc <usbd_event_transfer_data+0x1ec>)
    374a:	4825      	ldr	r0, [pc, #148]	; (37e0 <usbd_event_transfer_data+0x1f0>)
    374c:	f008 f9cc 	bl	bae8 <k_work_submit_to_queue>
}
    3750:	e779      	b.n	3646 <usbd_event_transfer_data+0x56>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3752:	1d01      	adds	r1, r0, #4
    3754:	481f      	ldr	r0, [pc, #124]	; (37d4 <usbd_event_transfer_data+0x1e4>)
    3756:	f008 f897 	bl	b888 <k_mem_slab_free>
	} while (ev != NULL);
    375a:	b145      	cbz	r5, 376e <usbd_event_transfer_data+0x17e>
    375c:	2200      	movs	r2, #0
    375e:	2300      	movs	r3, #0
    3760:	481d      	ldr	r0, [pc, #116]	; (37d8 <usbd_event_transfer_data+0x1e8>)
    3762:	f004 fe0b 	bl	837c <z_impl_k_queue_get>
		if (ev) {
    3766:	4605      	mov	r5, r0
    3768:	2800      	cmp	r0, #0
    376a:	d1f2      	bne.n	3752 <usbd_event_transfer_data+0x162>
    376c:	e7f5      	b.n	375a <usbd_event_transfer_data+0x16a>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    376e:	2200      	movs	r2, #0
    3770:	2300      	movs	r3, #0
    3772:	a901      	add	r1, sp, #4
    3774:	4817      	ldr	r0, [pc, #92]	; (37d4 <usbd_event_transfer_data+0x1e4>)
    3776:	f004 fbef 	bl	7f58 <k_mem_slab_alloc>
    377a:	2800      	cmp	r0, #0
    377c:	d1cd      	bne.n	371a <usbd_event_transfer_data+0x12a>
		ev = (struct usbd_event *)block.data;
    377e:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    3780:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    3782:	2304      	movs	r3, #4
    3784:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    3786:	4814      	ldr	r0, [pc, #80]	; (37d8 <usbd_event_transfer_data+0x1e8>)
    3788:	f008 f98d 	bl	baa6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    378c:	4913      	ldr	r1, [pc, #76]	; (37dc <usbd_event_transfer_data+0x1ec>)
    378e:	4814      	ldr	r0, [pc, #80]	; (37e0 <usbd_event_transfer_data+0x1f0>)
    3790:	f008 f9aa 	bl	bae8 <k_work_submit_to_queue>
		return NULL;
    3794:	e7c1      	b.n	371a <usbd_event_transfer_data+0x12a>
        if (NRF_USBD_EPISO_CHECK(ep))
    3796:	f013 0f08 	tst.w	r3, #8
    379a:	d003      	beq.n	37a4 <usbd_event_transfer_data+0x1b4>
            ret = p_reg->ISOIN.AMOUNT;
    379c:	4b11      	ldr	r3, [pc, #68]	; (37e4 <usbd_event_transfer_data+0x1f4>)
    379e:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
    37a2:	e7c7      	b.n	3734 <usbd_event_transfer_data+0x144>
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    37a4:	f003 030f 	and.w	r3, r3, #15
            ret = p_reg->EPIN[epnr].AMOUNT;
    37a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    37ac:	009b      	lsls	r3, r3, #2
    37ae:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    37b2:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    37b6:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    37ba:	e7bb      	b.n	3734 <usbd_event_transfer_data+0x144>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    37bc:	f003 030f 	and.w	r3, r3, #15
            ret = p_reg->EPOUT[epnr].AMOUNT;
    37c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    37c4:	009b      	lsls	r3, r3, #2
    37c6:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    37ca:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    37ce:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    37d2:	e7af      	b.n	3734 <usbd_event_transfer_data+0x144>
    37d4:	20000230 	.word	0x20000230
    37d8:	200002b0 	.word	0x200002b0
    37dc:	200014fc 	.word	0x200014fc
    37e0:	20000480 	.word	0x20000480
    37e4:	50036000 	.word	0x50036000

000037e8 <usbd_event_transfer_ctrl>:
{
    37e8:	b570      	push	{r4, r5, r6, lr}
    37ea:	b082      	sub	sp, #8
    37ec:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    37ee:	7885      	ldrb	r5, [r0, #2]
    37f0:	4628      	mov	r0, r5
    37f2:	f7ff fc7b 	bl	30ec <endpoint_ctx>
    37f6:	4606      	mov	r6, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    37f8:	f015 0f80 	tst.w	r5, #128	; 0x80
    37fc:	d11d      	bne.n	383a <usbd_event_transfer_ctrl+0x52>
		switch (p_event->data.eptransfer.status) {
    37fe:	78e3      	ldrb	r3, [r4, #3]
    3800:	2b00      	cmp	r3, #0
    3802:	d07d      	beq.n	3900 <usbd_event_transfer_ctrl+0x118>
    3804:	2b01      	cmp	r3, #1
    3806:	d11a      	bne.n	383e <usbd_event_transfer_ctrl+0x56>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    3808:	2200      	movs	r2, #0
    380a:	2300      	movs	r3, #0
    380c:	a901      	add	r1, sp, #4
    380e:	4865      	ldr	r0, [pc, #404]	; (39a4 <usbd_event_transfer_ctrl+0x1bc>)
    3810:	f004 fba2 	bl	7f58 <k_mem_slab_alloc>
    3814:	2800      	cmp	r0, #0
    3816:	d156      	bne.n	38c6 <usbd_event_transfer_ctrl+0xde>
	ev = (struct usbd_event *)block.data;
    3818:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    381a:	6064      	str	r4, [r4, #4]
			if (!ev) {
    381c:	b17c      	cbz	r4, 383e <usbd_event_transfer_ctrl+0x56>
			ep_ctx->read_pending = true;
    381e:	2301      	movs	r3, #1
    3820:	7773      	strb	r3, [r6, #29]
			ev->evt_type = USBD_EVT_EP;
    3822:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    3824:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3826:	60a6      	str	r6, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    3828:	4621      	mov	r1, r4
    382a:	485f      	ldr	r0, [pc, #380]	; (39a8 <usbd_event_transfer_ctrl+0x1c0>)
    382c:	f008 f93b 	bl	baa6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    3830:	495e      	ldr	r1, [pc, #376]	; (39ac <usbd_event_transfer_ctrl+0x1c4>)
    3832:	485f      	ldr	r0, [pc, #380]	; (39b0 <usbd_event_transfer_ctrl+0x1c8>)
    3834:	f008 f958 	bl	bae8 <k_work_submit_to_queue>
}
    3838:	e001      	b.n	383e <usbd_event_transfer_ctrl+0x56>
		switch (p_event->data.eptransfer.status) {
    383a:	78e3      	ldrb	r3, [r4, #3]
    383c:	b10b      	cbz	r3, 3842 <usbd_event_transfer_ctrl+0x5a>
}
    383e:	b002      	add	sp, #8
    3840:	bd70      	pop	{r4, r5, r6, pc}
	if (k_mem_slab_alloc(&fifo_elem_slab,
    3842:	2200      	movs	r2, #0
    3844:	2300      	movs	r3, #0
    3846:	a901      	add	r1, sp, #4
    3848:	4856      	ldr	r0, [pc, #344]	; (39a4 <usbd_event_transfer_ctrl+0x1bc>)
    384a:	f004 fb85 	bl	7f58 <k_mem_slab_alloc>
    384e:	b9a0      	cbnz	r0, 387a <usbd_event_transfer_ctrl+0x92>
	ev = (struct usbd_event *)block.data;
    3850:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    3852:	6064      	str	r4, [r4, #4]
			if (!ev) {
    3854:	2c00      	cmp	r4, #0
    3856:	d0f2      	beq.n	383e <usbd_event_transfer_ctrl+0x56>
			ep_ctx->write_in_progress = false;
    3858:	2300      	movs	r3, #0
    385a:	77b3      	strb	r3, [r6, #30]
			ev->evt_type = USBD_EVT_EP;
    385c:	2301      	movs	r3, #1
    385e:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    3860:	2303      	movs	r3, #3
    3862:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3864:	60a6      	str	r6, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    3866:	4621      	mov	r1, r4
    3868:	484f      	ldr	r0, [pc, #316]	; (39a8 <usbd_event_transfer_ctrl+0x1c0>)
    386a:	f008 f91c 	bl	baa6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    386e:	494f      	ldr	r1, [pc, #316]	; (39ac <usbd_event_transfer_ctrl+0x1c4>)
    3870:	484f      	ldr	r0, [pc, #316]	; (39b0 <usbd_event_transfer_ctrl+0x1c8>)
    3872:	f008 f939 	bl	bae8 <k_work_submit_to_queue>
}
    3876:	e7e2      	b.n	383e <usbd_event_transfer_ctrl+0x56>
	} while (ev != NULL);
    3878:	b164      	cbz	r4, 3894 <usbd_event_transfer_ctrl+0xac>
    387a:	2200      	movs	r2, #0
    387c:	2300      	movs	r3, #0
    387e:	484a      	ldr	r0, [pc, #296]	; (39a8 <usbd_event_transfer_ctrl+0x1c0>)
    3880:	f004 fd7c 	bl	837c <z_impl_k_queue_get>
		if (ev) {
    3884:	4604      	mov	r4, r0
    3886:	2800      	cmp	r0, #0
    3888:	d0f6      	beq.n	3878 <usbd_event_transfer_ctrl+0x90>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    388a:	1d01      	adds	r1, r0, #4
    388c:	4845      	ldr	r0, [pc, #276]	; (39a4 <usbd_event_transfer_ctrl+0x1bc>)
    388e:	f007 fffb 	bl	b888 <k_mem_slab_free>
}
    3892:	e7f1      	b.n	3878 <usbd_event_transfer_ctrl+0x90>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    3894:	2200      	movs	r2, #0
    3896:	2300      	movs	r3, #0
    3898:	a901      	add	r1, sp, #4
    389a:	4842      	ldr	r0, [pc, #264]	; (39a4 <usbd_event_transfer_ctrl+0x1bc>)
    389c:	f004 fb5c 	bl	7f58 <k_mem_slab_alloc>
    38a0:	2800      	cmp	r0, #0
    38a2:	d1d7      	bne.n	3854 <usbd_event_transfer_ctrl+0x6c>
		ev = (struct usbd_event *)block.data;
    38a4:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    38a6:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    38a8:	2304      	movs	r3, #4
    38aa:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    38ac:	483e      	ldr	r0, [pc, #248]	; (39a8 <usbd_event_transfer_ctrl+0x1c0>)
    38ae:	f008 f8fa 	bl	baa6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    38b2:	493e      	ldr	r1, [pc, #248]	; (39ac <usbd_event_transfer_ctrl+0x1c4>)
    38b4:	483e      	ldr	r0, [pc, #248]	; (39b0 <usbd_event_transfer_ctrl+0x1c8>)
    38b6:	f008 f917 	bl	bae8 <k_work_submit_to_queue>
		return NULL;
    38ba:	e7cb      	b.n	3854 <usbd_event_transfer_ctrl+0x6c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    38bc:	1d01      	adds	r1, r0, #4
    38be:	4839      	ldr	r0, [pc, #228]	; (39a4 <usbd_event_transfer_ctrl+0x1bc>)
    38c0:	f007 ffe2 	bl	b888 <k_mem_slab_free>
	} while (ev != NULL);
    38c4:	b144      	cbz	r4, 38d8 <usbd_event_transfer_ctrl+0xf0>
    38c6:	2200      	movs	r2, #0
    38c8:	2300      	movs	r3, #0
    38ca:	4837      	ldr	r0, [pc, #220]	; (39a8 <usbd_event_transfer_ctrl+0x1c0>)
    38cc:	f004 fd56 	bl	837c <z_impl_k_queue_get>
		if (ev) {
    38d0:	4604      	mov	r4, r0
    38d2:	2800      	cmp	r0, #0
    38d4:	d1f2      	bne.n	38bc <usbd_event_transfer_ctrl+0xd4>
    38d6:	e7f5      	b.n	38c4 <usbd_event_transfer_ctrl+0xdc>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    38d8:	2200      	movs	r2, #0
    38da:	2300      	movs	r3, #0
    38dc:	a901      	add	r1, sp, #4
    38de:	4831      	ldr	r0, [pc, #196]	; (39a4 <usbd_event_transfer_ctrl+0x1bc>)
    38e0:	f004 fb3a 	bl	7f58 <k_mem_slab_alloc>
    38e4:	2800      	cmp	r0, #0
    38e6:	d199      	bne.n	381c <usbd_event_transfer_ctrl+0x34>
		ev = (struct usbd_event *)block.data;
    38e8:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    38ea:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    38ec:	2304      	movs	r3, #4
    38ee:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    38f0:	482d      	ldr	r0, [pc, #180]	; (39a8 <usbd_event_transfer_ctrl+0x1c0>)
    38f2:	f008 f8d8 	bl	baa6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    38f6:	492d      	ldr	r1, [pc, #180]	; (39ac <usbd_event_transfer_ctrl+0x1c4>)
    38f8:	482d      	ldr	r0, [pc, #180]	; (39b0 <usbd_event_transfer_ctrl+0x1c8>)
    38fa:	f008 f8f5 	bl	bae8 <k_work_submit_to_queue>
		return NULL;
    38fe:	e78d      	b.n	381c <usbd_event_transfer_ctrl+0x34>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    3900:	2200      	movs	r2, #0
    3902:	2300      	movs	r3, #0
    3904:	a901      	add	r1, sp, #4
    3906:	4827      	ldr	r0, [pc, #156]	; (39a4 <usbd_event_transfer_ctrl+0x1bc>)
    3908:	f004 fb26 	bl	7f58 <k_mem_slab_alloc>
    390c:	bb28      	cbnz	r0, 395a <usbd_event_transfer_ctrl+0x172>
	ev = (struct usbd_event *)block.data;
    390e:	9d01      	ldr	r5, [sp, #4]
	ev->block = block;
    3910:	606d      	str	r5, [r5, #4]
			if (!ev) {
    3912:	2d00      	cmp	r5, #0
    3914:	d093      	beq.n	383e <usbd_event_transfer_ctrl+0x56>
			ev->evt_type = USBD_EVT_EP;
    3916:	2301      	movs	r3, #1
    3918:	742b      	strb	r3, [r5, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    391a:	2302      	movs	r3, #2
    391c:	732b      	strb	r3, [r5, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    391e:	60ae      	str	r6, [r5, #8]
			err_code = nrfx_usbd_ep_status_get(
    3920:	f106 010c 	add.w	r1, r6, #12
    3924:	78a0      	ldrb	r0, [r4, #2]
    3926:	f003 f98b 	bl	6c40 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    392a:	4b22      	ldr	r3, [pc, #136]	; (39b4 <usbd_event_transfer_ctrl+0x1cc>)
    392c:	f8b3 328c 	ldrh.w	r3, [r3, #652]	; 0x28c
    3930:	68f2      	ldr	r2, [r6, #12]
    3932:	4293      	cmp	r3, r2
    3934:	d82e      	bhi.n	3994 <usbd_event_transfer_ctrl+0x1ac>
				ctx->ctrl_read_len = 0U;
    3936:	4b1f      	ldr	r3, [pc, #124]	; (39b4 <usbd_event_transfer_ctrl+0x1cc>)
    3938:	2200      	movs	r2, #0
    393a:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
	k_fifo_put(&usbd_evt_fifo, ev);
    393e:	4629      	mov	r1, r5
    3940:	4819      	ldr	r0, [pc, #100]	; (39a8 <usbd_event_transfer_ctrl+0x1c0>)
    3942:	f008 f8b0 	bl	baa6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    3946:	4919      	ldr	r1, [pc, #100]	; (39ac <usbd_event_transfer_ctrl+0x1c4>)
    3948:	4819      	ldr	r0, [pc, #100]	; (39b0 <usbd_event_transfer_ctrl+0x1c8>)
    394a:	f008 f8cd 	bl	bae8 <k_work_submit_to_queue>
}
    394e:	e776      	b.n	383e <usbd_event_transfer_ctrl+0x56>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3950:	1d01      	adds	r1, r0, #4
    3952:	4814      	ldr	r0, [pc, #80]	; (39a4 <usbd_event_transfer_ctrl+0x1bc>)
    3954:	f007 ff98 	bl	b888 <k_mem_slab_free>
	} while (ev != NULL);
    3958:	b145      	cbz	r5, 396c <usbd_event_transfer_ctrl+0x184>
    395a:	2200      	movs	r2, #0
    395c:	2300      	movs	r3, #0
    395e:	4812      	ldr	r0, [pc, #72]	; (39a8 <usbd_event_transfer_ctrl+0x1c0>)
    3960:	f004 fd0c 	bl	837c <z_impl_k_queue_get>
		if (ev) {
    3964:	4605      	mov	r5, r0
    3966:	2800      	cmp	r0, #0
    3968:	d1f2      	bne.n	3950 <usbd_event_transfer_ctrl+0x168>
    396a:	e7f5      	b.n	3958 <usbd_event_transfer_ctrl+0x170>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    396c:	2200      	movs	r2, #0
    396e:	2300      	movs	r3, #0
    3970:	a901      	add	r1, sp, #4
    3972:	480c      	ldr	r0, [pc, #48]	; (39a4 <usbd_event_transfer_ctrl+0x1bc>)
    3974:	f004 faf0 	bl	7f58 <k_mem_slab_alloc>
    3978:	2800      	cmp	r0, #0
    397a:	d1ca      	bne.n	3912 <usbd_event_transfer_ctrl+0x12a>
		ev = (struct usbd_event *)block.data;
    397c:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    397e:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    3980:	2304      	movs	r3, #4
    3982:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    3984:	4808      	ldr	r0, [pc, #32]	; (39a8 <usbd_event_transfer_ctrl+0x1c0>)
    3986:	f008 f88e 	bl	baa6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    398a:	4908      	ldr	r1, [pc, #32]	; (39ac <usbd_event_transfer_ctrl+0x1c4>)
    398c:	4808      	ldr	r0, [pc, #32]	; (39b0 <usbd_event_transfer_ctrl+0x1c8>)
    398e:	f008 f8ab 	bl	bae8 <k_work_submit_to_queue>
		return NULL;
    3992:	e7be      	b.n	3912 <usbd_event_transfer_ctrl+0x12a>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    3994:	1a9b      	subs	r3, r3, r2
    3996:	4a07      	ldr	r2, [pc, #28]	; (39b4 <usbd_event_transfer_ctrl+0x1cc>)
    3998:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    399c:	f003 fcca 	bl	7334 <nrfx_usbd_setup_data_clear>
    39a0:	e7cd      	b.n	393e <usbd_event_transfer_ctrl+0x156>
    39a2:	bf00      	nop
    39a4:	20000230 	.word	0x20000230
    39a8:	200002b0 	.word	0x200002b0
    39ac:	200014fc 	.word	0x200014fc
    39b0:	20000480 	.word	0x20000480
    39b4:	200014d4 	.word	0x200014d4

000039b8 <usbd_event_handler>:
{
    39b8:	b510      	push	{r4, lr}
    39ba:	b088      	sub	sp, #32
	struct usbd_event evt = {0};
    39bc:	2300      	movs	r3, #0
    39be:	9303      	str	r3, [sp, #12]
    39c0:	9304      	str	r3, [sp, #16]
    39c2:	9305      	str	r3, [sp, #20]
    39c4:	9306      	str	r3, [sp, #24]
    39c6:	9307      	str	r3, [sp, #28]
	switch (p_event->type) {
    39c8:	7803      	ldrb	r3, [r0, #0]
    39ca:	3b01      	subs	r3, #1
    39cc:	2b05      	cmp	r3, #5
    39ce:	d826      	bhi.n	3a1e <usbd_event_handler+0x66>
    39d0:	e8df f003 	tbb	[pc, r3]
    39d4:	2e270335 	.word	0x2e270335
    39d8:	3953      	.short	0x3953
		evt.evt_type = USBD_EVT_POWER;
    39da:	2300      	movs	r3, #0
    39dc:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    39e0:	2303      	movs	r3, #3
    39e2:	f88d 3014 	strb.w	r3, [sp, #20]
	if (k_mem_slab_alloc(&fifo_elem_slab,
    39e6:	2200      	movs	r2, #0
    39e8:	2300      	movs	r3, #0
    39ea:	a901      	add	r1, sp, #4
    39ec:	4840      	ldr	r0, [pc, #256]	; (3af0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x58>)
    39ee:	f004 fab3 	bl	7f58 <k_mem_slab_alloc>
    39f2:	2800      	cmp	r0, #0
    39f4:	d15e      	bne.n	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
	ev = (struct usbd_event *)block.data;
    39f6:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    39f8:	6064      	str	r4, [r4, #4]
		if (!ev) {
    39fa:	b184      	cbz	r4, 3a1e <usbd_event_handler+0x66>
		ev->evt_type = evt.evt_type;
    39fc:	f89d 301c 	ldrb.w	r3, [sp, #28]
    3a00:	7423      	strb	r3, [r4, #16]
		ev->evt = evt.evt;
    3a02:	f104 0308 	add.w	r3, r4, #8
    3a06:	9906      	ldr	r1, [sp, #24]
    3a08:	9805      	ldr	r0, [sp, #20]
    3a0a:	e883 0003 	stmia.w	r3, {r0, r1}
	k_fifo_put(&usbd_evt_fifo, ev);
    3a0e:	4621      	mov	r1, r4
    3a10:	4838      	ldr	r0, [pc, #224]	; (3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>)
    3a12:	f008 f848 	bl	baa6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    3a16:	4938      	ldr	r1, [pc, #224]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3a18:	4838      	ldr	r0, [pc, #224]	; (3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>)
    3a1a:	f008 f865 	bl	bae8 <k_work_submit_to_queue>
}
    3a1e:	b008      	add	sp, #32
    3a20:	bd10      	pop	{r4, pc}
		evt.evt_type = USBD_EVT_POWER;
    3a22:	2300      	movs	r3, #0
    3a24:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_RESUMED;
    3a28:	2304      	movs	r3, #4
    3a2a:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
    3a2e:	e7da      	b.n	39e6 <usbd_event_handler+0x2e>
		evt.evt_type = USBD_EVT_POWER;
    3a30:	2300      	movs	r3, #0
    3a32:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_RESUMED;
    3a36:	2304      	movs	r3, #4
    3a38:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
    3a3c:	e7d3      	b.n	39e6 <usbd_event_handler+0x2e>
		evt.evt_type = USBD_EVT_RESET;
    3a3e:	2302      	movs	r3, #2
    3a40:	f88d 301c 	strb.w	r3, [sp, #28]
	if (put_evt) {
    3a44:	e7cf      	b.n	39e6 <usbd_event_handler+0x2e>
    3a46:	4604      	mov	r4, r0
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    3a48:	7880      	ldrb	r0, [r0, #2]
    3a4a:	f7ff fb4f 	bl	30ec <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    3a4e:	7a83      	ldrb	r3, [r0, #10]
    3a50:	2b01      	cmp	r3, #1
    3a52:	d00e      	beq.n	3a72 <usbd_event_handler+0xba>
    3a54:	d805      	bhi.n	3a62 <usbd_event_handler+0xaa>
    3a56:	2b00      	cmp	r3, #0
    3a58:	d1e1      	bne.n	3a1e <usbd_event_handler+0x66>
			usbd_event_transfer_ctrl(p_event);
    3a5a:	4620      	mov	r0, r4
    3a5c:	f7ff fec4 	bl	37e8 <usbd_event_transfer_ctrl>
	if (put_evt) {
    3a60:	e7dd      	b.n	3a1e <usbd_event_handler+0x66>
    3a62:	3b02      	subs	r3, #2
    3a64:	b2db      	uxtb	r3, r3
    3a66:	2b01      	cmp	r3, #1
    3a68:	d8d9      	bhi.n	3a1e <usbd_event_handler+0x66>
			usbd_event_transfer_data(p_event);
    3a6a:	4620      	mov	r0, r4
    3a6c:	f7ff fdc0 	bl	35f0 <usbd_event_transfer_data>
	if (put_evt) {
    3a70:	e7d5      	b.n	3a1e <usbd_event_handler+0x66>
			usbd_event_transfer_data(p_event);
    3a72:	4620      	mov	r0, r4
    3a74:	f7ff fdbc 	bl	35f0 <usbd_event_transfer_data>
	if (put_evt) {
    3a78:	e7d1      	b.n	3a1e <usbd_event_handler+0x66>
		nrfx_usbd_setup_get(&drv_setup);
    3a7a:	a801      	add	r0, sp, #4
    3a7c:	f003 fc2e 	bl	72dc <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    3a80:	f89d 3005 	ldrb.w	r3, [sp, #5]
    3a84:	2b05      	cmp	r3, #5
    3a86:	d00a      	beq.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
				endpoint_ctx(NRF_USBD_EPOUT(0));
    3a88:	2000      	movs	r0, #0
    3a8a:	f7ff fb2f 	bl	30ec <endpoint_ctx>
			evt.evt_type = USBD_EVT_EP;
    3a8e:	2301      	movs	r3, #1
    3a90:	f88d 301c 	strb.w	r3, [sp, #28]
			evt.evt.ep_evt.ep = ep_ctx;
    3a94:	9005      	str	r0, [sp, #20]
			evt.evt.ep_evt.evt_type = EP_EVT_SETUP_RECV;
    3a96:	2300      	movs	r3, #0
    3a98:	f88d 3018 	strb.w	r3, [sp, #24]
	if (put_evt) {
    3a9c:	e7a3      	b.n	39e6 <usbd_event_handler+0x2e>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    3a9e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3aa2:	f013 0f60 	tst.w	r3, #96	; 0x60
    3aa6:	d0ba      	beq.n	3a1e <usbd_event_handler+0x66>
    3aa8:	e7ee      	b.n	3a88 <usbd_event_handler+0xd0>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3aaa:	1d01      	adds	r1, r0, #4
    3aac:	4810      	ldr	r0, [pc, #64]	; (3af0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x58>)
    3aae:	f007 feeb 	bl	b888 <k_mem_slab_free>
	} while (ev != NULL);
    3ab2:	b144      	cbz	r4, 3ac6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e>
    3ab4:	2200      	movs	r2, #0
    3ab6:	2300      	movs	r3, #0
    3ab8:	480e      	ldr	r0, [pc, #56]	; (3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>)
    3aba:	f004 fc5f 	bl	837c <z_impl_k_queue_get>
		if (ev) {
    3abe:	4604      	mov	r4, r0
    3ac0:	2800      	cmp	r0, #0
    3ac2:	d1f2      	bne.n	3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
    3ac4:	e7f5      	b.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    3ac6:	2200      	movs	r2, #0
    3ac8:	2300      	movs	r3, #0
    3aca:	a901      	add	r1, sp, #4
    3acc:	4808      	ldr	r0, [pc, #32]	; (3af0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x58>)
    3ace:	f004 fa43 	bl	7f58 <k_mem_slab_alloc>
    3ad2:	2800      	cmp	r0, #0
    3ad4:	d191      	bne.n	39fa <usbd_event_handler+0x42>
		ev = (struct usbd_event *)block.data;
    3ad6:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    3ad8:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    3ada:	2304      	movs	r3, #4
    3adc:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    3ade:	4805      	ldr	r0, [pc, #20]	; (3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>)
    3ae0:	f007 ffe1 	bl	baa6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    3ae4:	4904      	ldr	r1, [pc, #16]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3ae6:	4805      	ldr	r0, [pc, #20]	; (3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>)
    3ae8:	f007 fffe 	bl	bae8 <k_work_submit_to_queue>
		return NULL;
    3aec:	e785      	b.n	39fa <usbd_event_handler+0x42>
    3aee:	bf00      	nop
    3af0:	20000230 	.word	0x20000230
    3af4:	200002b0 	.word	0x200002b0
    3af8:	200014fc 	.word	0x200014fc
    3afc:	20000480 	.word	0x20000480

00003b00 <usb_dc_attach>:
{
    3b00:	b510      	push	{r4, lr}
	if (ctx->attached) {
    3b02:	4b1c      	ldr	r3, [pc, #112]	; (3b74 <usb_dc_attach+0x74>)
    3b04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    3b08:	b113      	cbz	r3, 3b10 <usb_dc_attach+0x10>
		return 0;
    3b0a:	2400      	movs	r4, #0
}
    3b0c:	4620      	mov	r0, r4
    3b0e:	bd10      	pop	{r4, pc}
	return z_impl_k_mutex_init(mutex);
    3b10:	4c18      	ldr	r4, [pc, #96]	; (3b74 <usb_dc_attach+0x74>)
    3b12:	f104 0038 	add.w	r0, r4, #56	; 0x38
    3b16:	f007 ff42 	bl	b99e <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    3b1a:	2002      	movs	r0, #2
    3b1c:	f000 fc48 	bl	43b0 <z_nrf_clock_control_get_onoff>
	ctx->hfxo_mgr =
    3b20:	61e0      	str	r0, [r4, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3b22:	2200      	movs	r2, #0
    3b24:	2101      	movs	r1, #1
    3b26:	2036      	movs	r0, #54	; 0x36
    3b28:	f7fe fe92 	bl	2850 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
    3b2c:	4812      	ldr	r0, [pc, #72]	; (3b78 <usb_dc_attach+0x78>)
    3b2e:	f002 ff99 	bl	6a64 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    3b32:	4b12      	ldr	r3, [pc, #72]	; (3b7c <usb_dc_attach+0x7c>)
    3b34:	4298      	cmp	r0, r3
    3b36:	d11a      	bne.n	3b6e <usb_dc_attach+0x6e>
	nrfx_power_usbevt_enable();
    3b38:	f004 f87c 	bl	7c34 <nrfx_usbreg_enable>
	ret = eps_ctx_init();
    3b3c:	f7ff fb0a 	bl	3154 <eps_ctx_init>
	if (ret == 0) {
    3b40:	4604      	mov	r4, r0
    3b42:	b918      	cbnz	r0, 3b4c <usb_dc_attach+0x4c>
		ctx->attached = true;
    3b44:	4b0b      	ldr	r3, [pc, #44]	; (3b74 <usb_dc_attach+0x74>)
    3b46:	2201      	movs	r2, #1
    3b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    3b4c:	4b0c      	ldr	r3, [pc, #48]	; (3b80 <usb_dc_attach+0x80>)
    3b4e:	681b      	ldr	r3, [r3, #0]
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    3b50:	b11b      	cbz	r3, 3b5a <usb_dc_attach+0x5a>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    3b52:	490c      	ldr	r1, [pc, #48]	; (3b84 <usb_dc_attach+0x84>)
    3b54:	480c      	ldr	r0, [pc, #48]	; (3b88 <usb_dc_attach+0x88>)
    3b56:	f007 ffc7 	bl	bae8 <k_work_submit_to_queue>
    return p_reg->INTENSET & mask;
}

NRF_STATIC_INLINE uint32_t nrf_usbreg_status_get(NRF_USBREG_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    3b5a:	4b0c      	ldr	r3, [pc, #48]	; (3b8c <usb_dc_attach+0x8c>)
    3b5c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_usbreg_state_t nrfx_usbreg_usbstatus_get(void)
{
    uint32_t status = nrf_usbreg_status_get(NRF_USBREGULATOR);
    if (0 == (status & NRF_USBREG_STATUS_VBUSDETECT_MASK))
    3b60:	f013 0f01 	tst.w	r3, #1
    3b64:	d0d2      	beq.n	3b0c <usb_dc_attach+0xc>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    3b66:	2000      	movs	r0, #0
    3b68:	f007 f899 	bl	ac9e <usb_dc_power_event_handler>
    3b6c:	e7ce      	b.n	3b0c <usb_dc_attach+0xc>
		return -EIO;
    3b6e:	f06f 0404 	mvn.w	r4, #4
    3b72:	e7cb      	b.n	3b0c <usb_dc_attach+0xc>
    3b74:	200014d4 	.word	0x200014d4
    3b78:	000039b9 	.word	0x000039b9
    3b7c:	0bad0000 	.word	0x0bad0000
    3b80:	200002b0 	.word	0x200002b0
    3b84:	200014fc 	.word	0x200014fc
    3b88:	20000480 	.word	0x20000480
    3b8c:	50037000 	.word	0x50037000

00003b90 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    3b90:	4b07      	ldr	r3, [pc, #28]	; (3bb0 <usb_dc_set_address+0x20>)
    3b92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    3b96:	b12b      	cbz	r3, 3ba4 <usb_dc_set_address+0x14>
	return get_usbd_ctx()->ready;
    3b98:	4b05      	ldr	r3, [pc, #20]	; (3bb0 <usb_dc_set_address+0x20>)
    3b9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    3b9e:	b123      	cbz	r3, 3baa <usb_dc_set_address+0x1a>
	return 0;
    3ba0:	2000      	movs	r0, #0
    3ba2:	4770      	bx	lr
		return -ENODEV;
    3ba4:	f06f 0012 	mvn.w	r0, #18
    3ba8:	4770      	bx	lr
    3baa:	f06f 0012 	mvn.w	r0, #18
}
    3bae:	4770      	bx	lr
    3bb0:	200014d4 	.word	0x200014d4

00003bb4 <usb_dc_ep_configure>:
{
    3bb4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    3bb6:	4b12      	ldr	r3, [pc, #72]	; (3c00 <usb_dc_ep_configure+0x4c>)
    3bb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    3bbc:	b1bb      	cbz	r3, 3bee <usb_dc_ep_configure+0x3a>
    3bbe:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    3bc0:	7805      	ldrb	r5, [r0, #0]
    3bc2:	4628      	mov	r0, r5
    3bc4:	f7ff fa92 	bl	30ec <endpoint_ctx>
	if (!ep_ctx) {
    3bc8:	b1a0      	cbz	r0, 3bf4 <usb_dc_ep_configure+0x40>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    3bca:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    3bcc:	7922      	ldrb	r2, [r4, #4]
    3bce:	7282      	strb	r2, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    3bd0:	8862      	ldrh	r2, [r4, #2]
    3bd2:	6042      	str	r2, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    3bd4:	7820      	ldrb	r0, [r4, #0]
    3bd6:	f010 0f08 	tst.w	r0, #8
    3bda:	d103      	bne.n	3be4 <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    3bdc:	8863      	ldrh	r3, [r4, #2]
    3bde:	1e5a      	subs	r2, r3, #1
    3be0:	4213      	tst	r3, r2
    3be2:	d10a      	bne.n	3bfa <usb_dc_ep_configure+0x46>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    3be4:	8861      	ldrh	r1, [r4, #2]
    3be6:	f002 ff2d 	bl	6a44 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    3bea:	2000      	movs	r0, #0
}
    3bec:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    3bee:	f06f 0012 	mvn.w	r0, #18
    3bf2:	e7fb      	b.n	3bec <usb_dc_ep_configure+0x38>
		return -EINVAL;
    3bf4:	f06f 0015 	mvn.w	r0, #21
    3bf8:	e7f8      	b.n	3bec <usb_dc_ep_configure+0x38>
			return -EINVAL;
    3bfa:	f06f 0015 	mvn.w	r0, #21
    3bfe:	e7f5      	b.n	3bec <usb_dc_ep_configure+0x38>
    3c00:	200014d4 	.word	0x200014d4

00003c04 <usb_dc_ep_set_stall>:
{
    3c04:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    3c06:	4b16      	ldr	r3, [pc, #88]	; (3c60 <usb_dc_ep_set_stall+0x5c>)
    3c08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    3c0c:	b1e3      	cbz	r3, 3c48 <usb_dc_ep_set_stall+0x44>
    3c0e:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    3c10:	4b13      	ldr	r3, [pc, #76]	; (3c60 <usb_dc_ep_set_stall+0x5c>)
    3c12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    3c16:	b1d3      	cbz	r3, 3c4e <usb_dc_ep_set_stall+0x4a>
	ep_ctx = endpoint_ctx(ep);
    3c18:	f7ff fa68 	bl	30ec <endpoint_ctx>
	if (!ep_ctx) {
    3c1c:	4605      	mov	r5, r0
    3c1e:	b1c8      	cbz	r0, 3c54 <usb_dc_ep_set_stall+0x50>
	switch (ep_ctx->cfg.type) {
    3c20:	7a83      	ldrb	r3, [r0, #10]
    3c22:	2b01      	cmp	r3, #1
    3c24:	d019      	beq.n	3c5a <usb_dc_ep_set_stall+0x56>
    3c26:	d807      	bhi.n	3c38 <usb_dc_ep_set_stall+0x34>
    3c28:	b90b      	cbnz	r3, 3c2e <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_setup_stall();
    3c2a:	f003 fbd5 	bl	73d8 <nrfx_usbd_setup_stall>
	ep_ctx->buf.len = 0U;
    3c2e:	2000      	movs	r0, #0
    3c30:	60e8      	str	r0, [r5, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    3c32:	696b      	ldr	r3, [r5, #20]
    3c34:	61ab      	str	r3, [r5, #24]
}
    3c36:	bd38      	pop	{r3, r4, r5, pc}
	switch (ep_ctx->cfg.type) {
    3c38:	3b02      	subs	r3, #2
    3c3a:	b2db      	uxtb	r3, r3
    3c3c:	2b01      	cmp	r3, #1
    3c3e:	d8f6      	bhi.n	3c2e <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    3c40:	4620      	mov	r0, r4
    3c42:	f003 fb17 	bl	7274 <nrfx_usbd_ep_stall>
		break;
    3c46:	e7f2      	b.n	3c2e <usb_dc_ep_set_stall+0x2a>
		return -ENODEV;
    3c48:	f06f 0012 	mvn.w	r0, #18
    3c4c:	e7f3      	b.n	3c36 <usb_dc_ep_set_stall+0x32>
    3c4e:	f06f 0012 	mvn.w	r0, #18
    3c52:	e7f0      	b.n	3c36 <usb_dc_ep_set_stall+0x32>
		return -EINVAL;
    3c54:	f06f 0015 	mvn.w	r0, #21
    3c58:	e7ed      	b.n	3c36 <usb_dc_ep_set_stall+0x32>
	switch (ep_ctx->cfg.type) {
    3c5a:	f06f 0015 	mvn.w	r0, #21
    3c5e:	e7ea      	b.n	3c36 <usb_dc_ep_set_stall+0x32>
    3c60:	200014d4 	.word	0x200014d4

00003c64 <usb_dc_ep_clear_stall>:
	return get_usbd_ctx()->attached;
    3c64:	4b11      	ldr	r3, [pc, #68]	; (3cac <usb_dc_ep_clear_stall+0x48>)
    3c66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    3c6a:	b19b      	cbz	r3, 3c94 <usb_dc_ep_clear_stall+0x30>
{
    3c6c:	b510      	push	{r4, lr}
    3c6e:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    3c70:	4b0e      	ldr	r3, [pc, #56]	; (3cac <usb_dc_ep_clear_stall+0x48>)
    3c72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    3c76:	b183      	cbz	r3, 3c9a <usb_dc_ep_clear_stall+0x36>
	ep_ctx = endpoint_ctx(ep);
    3c78:	f7ff fa38 	bl	30ec <endpoint_ctx>
	if (!ep_ctx) {
    3c7c:	b180      	cbz	r0, 3ca0 <usb_dc_ep_clear_stall+0x3c>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    3c7e:	f014 0f08 	tst.w	r4, #8
    3c82:	d110      	bne.n	3ca6 <usb_dc_ep_clear_stall+0x42>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    3c84:	4620      	mov	r0, r4
    3c86:	f003 fb1d 	bl	72c4 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    3c8a:	4620      	mov	r0, r4
    3c8c:	f003 fd4e 	bl	772c <nrfx_usbd_ep_stall_clear>
	return 0;
    3c90:	2000      	movs	r0, #0
}
    3c92:	bd10      	pop	{r4, pc}
		return -ENODEV;
    3c94:	f06f 0012 	mvn.w	r0, #18
}
    3c98:	4770      	bx	lr
		return -ENODEV;
    3c9a:	f06f 0012 	mvn.w	r0, #18
    3c9e:	e7f8      	b.n	3c92 <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
    3ca0:	f06f 0015 	mvn.w	r0, #21
    3ca4:	e7f5      	b.n	3c92 <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
    3ca6:	f06f 0015 	mvn.w	r0, #21
    3caa:	e7f2      	b.n	3c92 <usb_dc_ep_clear_stall+0x2e>
    3cac:	200014d4 	.word	0x200014d4

00003cb0 <usb_dc_ep_is_stalled>:
{
    3cb0:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    3cb2:	4b10      	ldr	r3, [pc, #64]	; (3cf4 <usb_dc_ep_is_stalled+0x44>)
    3cb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    3cb8:	b17b      	cbz	r3, 3cda <usb_dc_ep_is_stalled+0x2a>
    3cba:	4604      	mov	r4, r0
    3cbc:	460d      	mov	r5, r1
	return get_usbd_ctx()->ready;
    3cbe:	4b0d      	ldr	r3, [pc, #52]	; (3cf4 <usb_dc_ep_is_stalled+0x44>)
    3cc0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    3cc4:	b163      	cbz	r3, 3ce0 <usb_dc_ep_is_stalled+0x30>
	ep_ctx = endpoint_ctx(ep);
    3cc6:	f7ff fa11 	bl	30ec <endpoint_ctx>
	if (!ep_ctx) {
    3cca:	b160      	cbz	r0, 3ce6 <usb_dc_ep_is_stalled+0x36>
	if (!stalled) {
    3ccc:	b175      	cbz	r5, 3cec <usb_dc_ep_is_stalled+0x3c>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    3cce:	4620      	mov	r0, r4
    3cd0:	f003 fad8 	bl	7284 <nrfx_usbd_ep_stall_check>
    3cd4:	7028      	strb	r0, [r5, #0]
	return 0;
    3cd6:	2000      	movs	r0, #0
}
    3cd8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    3cda:	f06f 0012 	mvn.w	r0, #18
    3cde:	e7fb      	b.n	3cd8 <usb_dc_ep_is_stalled+0x28>
    3ce0:	f06f 0012 	mvn.w	r0, #18
    3ce4:	e7f8      	b.n	3cd8 <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
    3ce6:	f06f 0015 	mvn.w	r0, #21
    3cea:	e7f5      	b.n	3cd8 <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
    3cec:	f06f 0015 	mvn.w	r0, #21
    3cf0:	e7f2      	b.n	3cd8 <usb_dc_ep_is_stalled+0x28>
    3cf2:	bf00      	nop
    3cf4:	200014d4 	.word	0x200014d4

00003cf8 <usb_dc_ep_enable>:
{
    3cf8:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    3cfa:	4b15      	ldr	r3, [pc, #84]	; (3d50 <usb_dc_ep_enable+0x58>)
    3cfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    3d00:	b1eb      	cbz	r3, 3d3e <usb_dc_ep_enable+0x46>
    3d02:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    3d04:	f7ff f9f2 	bl	30ec <endpoint_ctx>
	if (!ep_ctx) {
    3d08:	4605      	mov	r5, r0
    3d0a:	b1d8      	cbz	r0, 3d44 <usb_dc_ep_enable+0x4c>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    3d0c:	f014 0f08 	tst.w	r4, #8
    3d10:	d009      	beq.n	3d26 <usb_dc_ep_enable+0x2e>
	if (ep_ctx->cfg.en) {
    3d12:	7a2b      	ldrb	r3, [r5, #8]
    3d14:	b9cb      	cbnz	r3, 3d4a <usb_dc_ep_enable+0x52>
	ep_ctx->cfg.en = true;
    3d16:	2301      	movs	r3, #1
    3d18:	722b      	strb	r3, [r5, #8]
	return get_usbd_ctx()->ready;
    3d1a:	4b0d      	ldr	r3, [pc, #52]	; (3d50 <usb_dc_ep_enable+0x58>)
    3d1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (dev_ready()) {
    3d20:	b943      	cbnz	r3, 3d34 <usb_dc_ep_enable+0x3c>
	return 0;
    3d22:	2000      	movs	r0, #0
}
    3d24:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    3d26:	4620      	mov	r0, r4
    3d28:	f003 facc 	bl	72c4 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    3d2c:	4620      	mov	r0, r4
    3d2e:	f003 fcfd 	bl	772c <nrfx_usbd_ep_stall_clear>
    3d32:	e7ee      	b.n	3d12 <usb_dc_ep_enable+0x1a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    3d34:	4620      	mov	r0, r4
    3d36:	f003 fc9f 	bl	7678 <nrfx_usbd_ep_enable>
	return 0;
    3d3a:	2000      	movs	r0, #0
    3d3c:	e7f2      	b.n	3d24 <usb_dc_ep_enable+0x2c>
		return -ENODEV;
    3d3e:	f06f 0012 	mvn.w	r0, #18
    3d42:	e7ef      	b.n	3d24 <usb_dc_ep_enable+0x2c>
		return -EINVAL;
    3d44:	f06f 0015 	mvn.w	r0, #21
    3d48:	e7ec      	b.n	3d24 <usb_dc_ep_enable+0x2c>
		return -EALREADY;
    3d4a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    3d4e:	e7e9      	b.n	3d24 <usb_dc_ep_enable+0x2c>
    3d50:	200014d4 	.word	0x200014d4

00003d54 <usb_dc_ep_disable>:
{
    3d54:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    3d56:	4b13      	ldr	r3, [pc, #76]	; (3da4 <usb_dc_ep_disable+0x50>)
    3d58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    3d5c:	b1ab      	cbz	r3, 3d8a <usb_dc_ep_disable+0x36>
    3d5e:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    3d60:	4b10      	ldr	r3, [pc, #64]	; (3da4 <usb_dc_ep_disable+0x50>)
    3d62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    3d66:	b19b      	cbz	r3, 3d90 <usb_dc_ep_disable+0x3c>
	ep_ctx = endpoint_ctx(ep);
    3d68:	f7ff f9c0 	bl	30ec <endpoint_ctx>
	if (!ep_ctx) {
    3d6c:	4605      	mov	r5, r0
    3d6e:	b190      	cbz	r0, 3d96 <usb_dc_ep_disable+0x42>
	if (!ep_ctx->cfg.en) {
    3d70:	7a03      	ldrb	r3, [r0, #8]
    3d72:	b19b      	cbz	r3, 3d9c <usb_dc_ep_disable+0x48>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    3d74:	4620      	mov	r0, r4
    3d76:	f003 fea7 	bl	7ac8 <nrfx_usbd_ep_disable>
	ep_ctx->write_in_progress = false;
    3d7a:	2400      	movs	r4, #0
    3d7c:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    3d7e:	4628      	mov	r0, r5
    3d80:	f006 ff0f 	bl	aba2 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    3d84:	722c      	strb	r4, [r5, #8]
	return 0;
    3d86:	4620      	mov	r0, r4
}
    3d88:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    3d8a:	f06f 0012 	mvn.w	r0, #18
    3d8e:	e7fb      	b.n	3d88 <usb_dc_ep_disable+0x34>
    3d90:	f06f 0012 	mvn.w	r0, #18
    3d94:	e7f8      	b.n	3d88 <usb_dc_ep_disable+0x34>
		return -EINVAL;
    3d96:	f06f 0015 	mvn.w	r0, #21
    3d9a:	e7f5      	b.n	3d88 <usb_dc_ep_disable+0x34>
		return -EALREADY;
    3d9c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    3da0:	e7f2      	b.n	3d88 <usb_dc_ep_disable+0x34>
    3da2:	bf00      	nop
    3da4:	200014d4 	.word	0x200014d4

00003da8 <usb_dc_ep_write>:
{
    3da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3dac:	b084      	sub	sp, #16
    3dae:	461f      	mov	r7, r3
	return get_usbd_ctx()->attached;
    3db0:	4b3c      	ldr	r3, [pc, #240]	; (3ea4 <usb_dc_ep_write+0xfc>)
    3db2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    3db6:	2b00      	cmp	r3, #0
    3db8:	d065      	beq.n	3e86 <usb_dc_ep_write+0xde>
    3dba:	4604      	mov	r4, r0
    3dbc:	4688      	mov	r8, r1
    3dbe:	4616      	mov	r6, r2
	return get_usbd_ctx()->ready;
    3dc0:	4b38      	ldr	r3, [pc, #224]	; (3ea4 <usb_dc_ep_write+0xfc>)
    3dc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d060      	beq.n	3e8c <usb_dc_ep_write+0xe4>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    3dca:	f010 0f80 	tst.w	r0, #128	; 0x80
    3dce:	d060      	beq.n	3e92 <usb_dc_ep_write+0xea>
	ep_ctx = endpoint_ctx(ep);
    3dd0:	f7ff f98c 	bl	30ec <endpoint_ctx>
	if (!ep_ctx) {
    3dd4:	4605      	mov	r5, r0
    3dd6:	2800      	cmp	r0, #0
    3dd8:	d05e      	beq.n	3e98 <usb_dc_ep_write+0xf0>
	if (!ep_ctx->cfg.en) {
    3dda:	7a03      	ldrb	r3, [r0, #8]
    3ddc:	2b00      	cmp	r3, #0
    3dde:	d05e      	beq.n	3e9e <usb_dc_ep_write+0xf6>
	return z_impl_k_mutex_lock(mutex, timeout);
    3de0:	f04f 32ff 	mov.w	r2, #4294967295
    3de4:	f04f 33ff 	mov.w	r3, #4294967295
    3de8:	482f      	ldr	r0, [pc, #188]	; (3ea8 <usb_dc_ep_write+0x100>)
    3dea:	f004 f9f9 	bl	81e0 <z_impl_k_mutex_lock>
	if (ep_ctx->write_in_progress) {
    3dee:	7fab      	ldrb	r3, [r5, #30]
    3df0:	bb9b      	cbnz	r3, 3e5a <usb_dc_ep_write+0xb2>
	if (!data_len && ep_ctx->trans_zlp) {
    3df2:	b91e      	cbnz	r6, 3dfc <usb_dc_ep_write+0x54>
    3df4:	7feb      	ldrb	r3, [r5, #31]
    3df6:	b10b      	cbz	r3, 3dfc <usb_dc_ep_write+0x54>
		ep_ctx->trans_zlp = false;
    3df8:	2300      	movs	r3, #0
    3dfa:	77eb      	strb	r3, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    3dfc:	7aab      	ldrb	r3, [r5, #10]
    3dfe:	b963      	cbnz	r3, 3e1a <usb_dc_ep_write+0x72>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    3e00:	b15e      	cbz	r6, 3e1a <usb_dc_ep_write+0x72>
    3e02:	4a28      	ldr	r2, [pc, #160]	; (3ea4 <usb_dc_ep_write+0xfc>)
    3e04:	8952      	ldrh	r2, [r2, #10]
    3e06:	42b2      	cmp	r2, r6
    3e08:	d907      	bls.n	3e1a <usb_dc_ep_write+0x72>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    3e0a:	6869      	ldr	r1, [r5, #4]
    3e0c:	fbb6 f2f1 	udiv	r2, r6, r1
    3e10:	fb01 6212 	mls	r2, r1, r2, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    3e14:	b90a      	cbnz	r2, 3e1a <usb_dc_ep_write+0x72>
			ep_ctx->trans_zlp = true;
    3e16:	2201      	movs	r2, #1
    3e18:	77ea      	strb	r2, [r5, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    3e1a:	b91b      	cbnz	r3, 3e24 <usb_dc_ep_write+0x7c>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    3e1c:	f003 fae4 	bl	73e8 <nrfx_usbd_last_setup_dir_get>
    3e20:	42a0      	cmp	r0, r4
    3e22:	d120      	bne.n	3e66 <usb_dc_ep_write+0xbe>
	ep_ctx->write_in_progress = true;
    3e24:	2301      	movs	r3, #1
    3e26:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    3e28:	f8cd 8004 	str.w	r8, [sp, #4]
    3e2c:	9602      	str	r6, [sp, #8]
    3e2e:	2300      	movs	r3, #0
    3e30:	9303      	str	r3, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    3e32:	a901      	add	r1, sp, #4
    3e34:	4620      	mov	r0, r4
    3e36:	f002 fe6d 	bl	6b14 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    3e3a:	4b1c      	ldr	r3, [pc, #112]	; (3eac <usb_dc_ep_write+0x104>)
    3e3c:	4298      	cmp	r0, r3
    3e3e:	d019      	beq.n	3e74 <usb_dc_ep_write+0xcc>
		ep_ctx->write_in_progress = false;
    3e40:	2300      	movs	r3, #0
    3e42:	77ab      	strb	r3, [r5, #30]
		if (ret_bytes) {
    3e44:	b1d7      	cbz	r7, 3e7c <usb_dc_ep_write+0xd4>
			*ret_bytes = 0;
    3e46:	603b      	str	r3, [r7, #0]
		result = -EIO;
    3e48:	f06f 0404 	mvn.w	r4, #4
	return z_impl_k_mutex_unlock(mutex);
    3e4c:	4816      	ldr	r0, [pc, #88]	; (3ea8 <usb_dc_ep_write+0x100>)
    3e4e:	f004 fa51 	bl	82f4 <z_impl_k_mutex_unlock>
}
    3e52:	4620      	mov	r0, r4
    3e54:	b004      	add	sp, #16
    3e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e5a:	4813      	ldr	r0, [pc, #76]	; (3ea8 <usb_dc_ep_write+0x100>)
    3e5c:	f004 fa4a 	bl	82f4 <z_impl_k_mutex_unlock>
		return -EAGAIN;
    3e60:	f06f 040a 	mvn.w	r4, #10
    3e64:	e7f5      	b.n	3e52 <usb_dc_ep_write+0xaa>
		nrfx_usbd_setup_clear();
    3e66:	f003 faaf 	bl	73c8 <nrfx_usbd_setup_clear>
    3e6a:	480f      	ldr	r0, [pc, #60]	; (3ea8 <usb_dc_ep_write+0x100>)
    3e6c:	f004 fa42 	bl	82f4 <z_impl_k_mutex_unlock>
		return 0;
    3e70:	2400      	movs	r4, #0
    3e72:	e7ee      	b.n	3e52 <usb_dc_ep_write+0xaa>
		if (ret_bytes) {
    3e74:	b12f      	cbz	r7, 3e82 <usb_dc_ep_write+0xda>
			*ret_bytes = data_len;
    3e76:	603e      	str	r6, [r7, #0]
	int result = 0;
    3e78:	2400      	movs	r4, #0
    3e7a:	e7e7      	b.n	3e4c <usb_dc_ep_write+0xa4>
		result = -EIO;
    3e7c:	f06f 0404 	mvn.w	r4, #4
    3e80:	e7e4      	b.n	3e4c <usb_dc_ep_write+0xa4>
	int result = 0;
    3e82:	2400      	movs	r4, #0
    3e84:	e7e2      	b.n	3e4c <usb_dc_ep_write+0xa4>
		return -ENODEV;
    3e86:	f06f 0412 	mvn.w	r4, #18
    3e8a:	e7e2      	b.n	3e52 <usb_dc_ep_write+0xaa>
    3e8c:	f06f 0412 	mvn.w	r4, #18
    3e90:	e7df      	b.n	3e52 <usb_dc_ep_write+0xaa>
		return -EINVAL;
    3e92:	f06f 0415 	mvn.w	r4, #21
    3e96:	e7dc      	b.n	3e52 <usb_dc_ep_write+0xaa>
		return -EINVAL;
    3e98:	f06f 0415 	mvn.w	r4, #21
    3e9c:	e7d9      	b.n	3e52 <usb_dc_ep_write+0xaa>
		return -EINVAL;
    3e9e:	f06f 0415 	mvn.w	r4, #21
    3ea2:	e7d6      	b.n	3e52 <usb_dc_ep_write+0xaa>
    3ea4:	200014d4 	.word	0x200014d4
    3ea8:	2000150c 	.word	0x2000150c
    3eac:	0bad0000 	.word	0x0bad0000

00003eb0 <usb_dc_ep_read_wait>:
{
    3eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3eb4:	461f      	mov	r7, r3
	return get_usbd_ctx()->attached;
    3eb6:	4b2b      	ldr	r3, [pc, #172]	; (3f64 <usb_dc_ep_read_wait+0xb4>)
    3eb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    3ebc:	2b00      	cmp	r3, #0
    3ebe:	d042      	beq.n	3f46 <usb_dc_ep_read_wait+0x96>
    3ec0:	460d      	mov	r5, r1
    3ec2:	4616      	mov	r6, r2
	return get_usbd_ctx()->ready;
    3ec4:	4b27      	ldr	r3, [pc, #156]	; (3f64 <usb_dc_ep_read_wait+0xb4>)
    3ec6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    3eca:	2b00      	cmp	r3, #0
    3ecc:	d03e      	beq.n	3f4c <usb_dc_ep_read_wait+0x9c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    3ece:	f010 0f80 	tst.w	r0, #128	; 0x80
    3ed2:	d13e      	bne.n	3f52 <usb_dc_ep_read_wait+0xa2>
	if (!data && max_data_len) {
    3ed4:	b349      	cbz	r1, 3f2a <usb_dc_ep_read_wait+0x7a>
	ep_ctx = endpoint_ctx(ep);
    3ed6:	f7ff f909 	bl	30ec <endpoint_ctx>
	if (!ep_ctx) {
    3eda:	4604      	mov	r4, r0
    3edc:	2800      	cmp	r0, #0
    3ede:	d03b      	beq.n	3f58 <usb_dc_ep_read_wait+0xa8>
	if (!ep_ctx->cfg.en) {
    3ee0:	7a03      	ldrb	r3, [r0, #8]
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	d03b      	beq.n	3f5e <usb_dc_ep_read_wait+0xae>
	return z_impl_k_mutex_lock(mutex, timeout);
    3ee6:	f04f 32ff 	mov.w	r2, #4294967295
    3eea:	f04f 33ff 	mov.w	r3, #4294967295
    3eee:	481e      	ldr	r0, [pc, #120]	; (3f68 <usb_dc_ep_read_wait+0xb8>)
    3ef0:	f004 f976 	bl	81e0 <z_impl_k_mutex_lock>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    3ef4:	68e3      	ldr	r3, [r4, #12]
    3ef6:	46b0      	mov	r8, r6
    3ef8:	429e      	cmp	r6, r3
    3efa:	bf28      	it	cs
    3efc:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
    3efe:	b1cd      	cbz	r5, 3f34 <usb_dc_ep_read_wait+0x84>
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    3f00:	4642      	mov	r2, r8
    3f02:	69a1      	ldr	r1, [r4, #24]
    3f04:	4628      	mov	r0, r5
    3f06:	f006 fdfe 	bl	ab06 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    3f0a:	69a3      	ldr	r3, [r4, #24]
    3f0c:	4443      	add	r3, r8
    3f0e:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    3f10:	68e3      	ldr	r3, [r4, #12]
    3f12:	eba3 0308 	sub.w	r3, r3, r8
    3f16:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    3f18:	b10f      	cbz	r7, 3f1e <usb_dc_ep_read_wait+0x6e>
		*read_bytes = bytes_to_copy;
    3f1a:	f8c7 8000 	str.w	r8, [r7]
	return z_impl_k_mutex_unlock(mutex);
    3f1e:	4812      	ldr	r0, [pc, #72]	; (3f68 <usb_dc_ep_read_wait+0xb8>)
    3f20:	f004 f9e8 	bl	82f4 <z_impl_k_mutex_unlock>
	return 0;
    3f24:	2000      	movs	r0, #0
}
    3f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!data && max_data_len) {
    3f2a:	2a00      	cmp	r2, #0
    3f2c:	d0d3      	beq.n	3ed6 <usb_dc_ep_read_wait+0x26>
		return -EINVAL;
    3f2e:	f06f 0015 	mvn.w	r0, #21
    3f32:	e7f8      	b.n	3f26 <usb_dc_ep_read_wait+0x76>
	if (!data && !max_data_len) {
    3f34:	2e00      	cmp	r6, #0
    3f36:	d1e3      	bne.n	3f00 <usb_dc_ep_read_wait+0x50>
		if (read_bytes) {
    3f38:	b107      	cbz	r7, 3f3c <usb_dc_ep_read_wait+0x8c>
			*read_bytes = ep_ctx->buf.len;
    3f3a:	603b      	str	r3, [r7, #0]
    3f3c:	480a      	ldr	r0, [pc, #40]	; (3f68 <usb_dc_ep_read_wait+0xb8>)
    3f3e:	f004 f9d9 	bl	82f4 <z_impl_k_mutex_unlock>
		return 0;
    3f42:	2000      	movs	r0, #0
    3f44:	e7ef      	b.n	3f26 <usb_dc_ep_read_wait+0x76>
		return -ENODEV;
    3f46:	f06f 0012 	mvn.w	r0, #18
    3f4a:	e7ec      	b.n	3f26 <usb_dc_ep_read_wait+0x76>
    3f4c:	f06f 0012 	mvn.w	r0, #18
    3f50:	e7e9      	b.n	3f26 <usb_dc_ep_read_wait+0x76>
		return -EINVAL;
    3f52:	f06f 0015 	mvn.w	r0, #21
    3f56:	e7e6      	b.n	3f26 <usb_dc_ep_read_wait+0x76>
		return -EINVAL;
    3f58:	f06f 0015 	mvn.w	r0, #21
    3f5c:	e7e3      	b.n	3f26 <usb_dc_ep_read_wait+0x76>
		return -EINVAL;
    3f5e:	f06f 0015 	mvn.w	r0, #21
    3f62:	e7e0      	b.n	3f26 <usb_dc_ep_read_wait+0x76>
    3f64:	200014d4 	.word	0x200014d4
    3f68:	2000150c 	.word	0x2000150c

00003f6c <usb_dc_ep_read_continue>:
	return get_usbd_ctx()->attached;
    3f6c:	4b3c      	ldr	r3, [pc, #240]	; (4060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>)
    3f6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    3f72:	2b00      	cmp	r3, #0
    3f74:	d065      	beq.n	4042 <CONFIG_FPROTECT_BLOCK_SIZE+0x42>
	return get_usbd_ctx()->ready;
    3f76:	4b3a      	ldr	r3, [pc, #232]	; (4060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>)
    3f78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    3f7c:	2b00      	cmp	r3, #0
    3f7e:	d063      	beq.n	4048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    3f80:	f010 0f80 	tst.w	r0, #128	; 0x80
    3f84:	d163      	bne.n	404e <CONFIG_FPROTECT_BLOCK_SIZE+0x4e>
{
    3f86:	b530      	push	{r4, r5, lr}
    3f88:	b083      	sub	sp, #12
	ep_ctx = endpoint_ctx(ep);
    3f8a:	f7ff f8af 	bl	30ec <endpoint_ctx>
	if (!ep_ctx) {
    3f8e:	4604      	mov	r4, r0
    3f90:	2800      	cmp	r0, #0
    3f92:	d05f      	beq.n	4054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
	if (!ep_ctx->cfg.en) {
    3f94:	7a03      	ldrb	r3, [r0, #8]
    3f96:	2b00      	cmp	r3, #0
    3f98:	d05f      	beq.n	405a <CONFIG_FPROTECT_BLOCK_SIZE+0x5a>
	return z_impl_k_mutex_lock(mutex, timeout);
    3f9a:	f04f 32ff 	mov.w	r2, #4294967295
    3f9e:	f04f 33ff 	mov.w	r3, #4294967295
    3fa2:	4830      	ldr	r0, [pc, #192]	; (4064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>)
    3fa4:	f004 f91c 	bl	81e0 <z_impl_k_mutex_lock>
	if (!ep_ctx->buf.len) {
    3fa8:	68e3      	ldr	r3, [r4, #12]
    3faa:	b92b      	cbnz	r3, 3fb8 <usb_dc_ep_read_continue+0x4c>
		ep_ctx->buf.curr = ep_ctx->buf.data;
    3fac:	6963      	ldr	r3, [r4, #20]
    3fae:	61a3      	str	r3, [r4, #24]
		ep_ctx->read_complete = true;
    3fb0:	2301      	movs	r3, #1
    3fb2:	7723      	strb	r3, [r4, #28]
		if (ep_ctx->read_pending) {
    3fb4:	7f63      	ldrb	r3, [r4, #29]
    3fb6:	b92b      	cbnz	r3, 3fc4 <usb_dc_ep_read_continue+0x58>
	return z_impl_k_mutex_unlock(mutex);
    3fb8:	482a      	ldr	r0, [pc, #168]	; (4064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>)
    3fba:	f004 f99b 	bl	82f4 <z_impl_k_mutex_unlock>
	return 0;
    3fbe:	2000      	movs	r0, #0
}
    3fc0:	b003      	add	sp, #12
    3fc2:	bd30      	pop	{r4, r5, pc}
	if (k_mem_slab_alloc(&fifo_elem_slab,
    3fc4:	2200      	movs	r2, #0
    3fc6:	2300      	movs	r3, #0
    3fc8:	a901      	add	r1, sp, #4
    3fca:	4827      	ldr	r0, [pc, #156]	; (4068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>)
    3fcc:	f003 ffc4 	bl	7f58 <k_mem_slab_alloc>
    3fd0:	b9a0      	cbnz	r0, 3ffc <usb_dc_ep_read_continue+0x90>
	ev = (struct usbd_event *)block.data;
    3fd2:	9d01      	ldr	r5, [sp, #4]
	ev->block = block;
    3fd4:	606d      	str	r5, [r5, #4]
			if (!ev) {
    3fd6:	b375      	cbz	r5, 4036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
			ev->evt_type = USBD_EVT_EP;
    3fd8:	2301      	movs	r3, #1
    3fda:	742b      	strb	r3, [r5, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    3fdc:	60ac      	str	r4, [r5, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    3fde:	732b      	strb	r3, [r5, #12]
	k_fifo_put(&usbd_evt_fifo, ev);
    3fe0:	4629      	mov	r1, r5
    3fe2:	4822      	ldr	r0, [pc, #136]	; (406c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>)
    3fe4:	f007 fd5f 	bl	baa6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    3fe8:	4921      	ldr	r1, [pc, #132]	; (4070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
    3fea:	4822      	ldr	r0, [pc, #136]	; (4074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>)
    3fec:	f007 fd7c 	bl	bae8 <k_work_submit_to_queue>
}
    3ff0:	e7e2      	b.n	3fb8 <usb_dc_ep_read_continue+0x4c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3ff2:	1d01      	adds	r1, r0, #4
    3ff4:	481c      	ldr	r0, [pc, #112]	; (4068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>)
    3ff6:	f007 fc47 	bl	b888 <k_mem_slab_free>
	} while (ev != NULL);
    3ffa:	b145      	cbz	r5, 400e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
	return z_impl_k_queue_get(queue, timeout);
    3ffc:	2200      	movs	r2, #0
    3ffe:	2300      	movs	r3, #0
    4000:	481a      	ldr	r0, [pc, #104]	; (406c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>)
    4002:	f004 f9bb 	bl	837c <z_impl_k_queue_get>
		if (ev) {
    4006:	4605      	mov	r5, r0
    4008:	2800      	cmp	r0, #0
    400a:	d1f2      	bne.n	3ff2 <usb_dc_ep_read_continue+0x86>
    400c:	e7f5      	b.n	3ffa <usb_dc_ep_read_continue+0x8e>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    400e:	2200      	movs	r2, #0
    4010:	2300      	movs	r3, #0
    4012:	a901      	add	r1, sp, #4
    4014:	4814      	ldr	r0, [pc, #80]	; (4068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>)
    4016:	f003 ff9f 	bl	7f58 <k_mem_slab_alloc>
    401a:	2800      	cmp	r0, #0
    401c:	d1db      	bne.n	3fd6 <usb_dc_ep_read_continue+0x6a>
		ev = (struct usbd_event *)block.data;
    401e:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    4020:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    4022:	2304      	movs	r3, #4
    4024:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    4026:	4811      	ldr	r0, [pc, #68]	; (406c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>)
    4028:	f007 fd3d 	bl	baa6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    402c:	4910      	ldr	r1, [pc, #64]	; (4070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
    402e:	4811      	ldr	r0, [pc, #68]	; (4074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>)
    4030:	f007 fd5a 	bl	bae8 <k_work_submit_to_queue>
		return NULL;
    4034:	e7cf      	b.n	3fd6 <usb_dc_ep_read_continue+0x6a>
	return z_impl_k_mutex_unlock(mutex);
    4036:	480b      	ldr	r0, [pc, #44]	; (4064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>)
    4038:	f004 f95c 	bl	82f4 <z_impl_k_mutex_unlock>
				return -ENOMEM;
    403c:	f06f 000b 	mvn.w	r0, #11
    4040:	e7be      	b.n	3fc0 <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
    4042:	f06f 0012 	mvn.w	r0, #18
    4046:	4770      	bx	lr
    4048:	f06f 0012 	mvn.w	r0, #18
    404c:	4770      	bx	lr
		return -EINVAL;
    404e:	f06f 0015 	mvn.w	r0, #21
}
    4052:	4770      	bx	lr
		return -EINVAL;
    4054:	f06f 0015 	mvn.w	r0, #21
    4058:	e7b2      	b.n	3fc0 <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
    405a:	f06f 0015 	mvn.w	r0, #21
    405e:	e7af      	b.n	3fc0 <usb_dc_ep_read_continue+0x54>
    4060:	200014d4 	.word	0x200014d4
    4064:	2000150c 	.word	0x2000150c
    4068:	20000230 	.word	0x20000230
    406c:	200002b0 	.word	0x200002b0
    4070:	200014fc 	.word	0x200014fc
    4074:	20000480 	.word	0x20000480

00004078 <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
    4078:	4b08      	ldr	r3, [pc, #32]	; (409c <usb_dc_ep_set_callback+0x24>)
    407a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    407e:	b13b      	cbz	r3, 4090 <usb_dc_ep_set_callback+0x18>
{
    4080:	b510      	push	{r4, lr}
    4082:	460c      	mov	r4, r1
	ep_ctx = endpoint_ctx(ep);
    4084:	f7ff f832 	bl	30ec <endpoint_ctx>
	if (!ep_ctx) {
    4088:	b128      	cbz	r0, 4096 <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    408a:	6004      	str	r4, [r0, #0]
	return 0;
    408c:	2000      	movs	r0, #0
}
    408e:	bd10      	pop	{r4, pc}
		return -ENODEV;
    4090:	f06f 0012 	mvn.w	r0, #18
}
    4094:	4770      	bx	lr
		return -EINVAL;
    4096:	f06f 0015 	mvn.w	r0, #21
    409a:	e7f8      	b.n	408e <usb_dc_ep_set_callback+0x16>
    409c:	200014d4 	.word	0x200014d4

000040a0 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    40a0:	4b01      	ldr	r3, [pc, #4]	; (40a8 <usb_dc_set_status_callback+0x8>)
    40a2:	6018      	str	r0, [r3, #0]
}
    40a4:	4770      	bx	lr
    40a6:	bf00      	nop
    40a8:	200014d4 	.word	0x200014d4

000040ac <usb_dc_ep_mps>:
{
    40ac:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    40ae:	4b07      	ldr	r3, [pc, #28]	; (40cc <usb_dc_ep_mps+0x20>)
    40b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    40b4:	b123      	cbz	r3, 40c0 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    40b6:	f7ff f819 	bl	30ec <endpoint_ctx>
	if (!ep_ctx) {
    40ba:	b120      	cbz	r0, 40c6 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    40bc:	6840      	ldr	r0, [r0, #4]
}
    40be:	bd08      	pop	{r3, pc}
		return -ENODEV;
    40c0:	f06f 0012 	mvn.w	r0, #18
    40c4:	e7fb      	b.n	40be <usb_dc_ep_mps+0x12>
		return -EINVAL;
    40c6:	f06f 0015 	mvn.w	r0, #21
    40ca:	e7f8      	b.n	40be <usb_dc_ep_mps+0x12>
    40cc:	200014d4 	.word	0x200014d4

000040d0 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    40d0:	4800      	ldr	r0, [pc, #0]	; (40d4 <get_hf_flags+0x4>)
    40d2:	4770      	bx	lr
    40d4:	200017ec 	.word	0x200017ec

000040d8 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    40d8:	4b03      	ldr	r3, [pc, #12]	; (40e8 <get_subsys+0x10>)
    40da:	1ac0      	subs	r0, r0, r3
    40dc:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    40de:	4b03      	ldr	r3, [pc, #12]	; (40ec <get_subsys+0x14>)
    40e0:	fb03 f000 	mul.w	r0, r3, r0
    40e4:	4770      	bx	lr
    40e6:	bf00      	nop
    40e8:	20001774 	.word	0x20001774
    40ec:	b6db6db7 	.word	0xb6db6db7

000040f0 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    40f0:	b538      	push	{r3, r4, r5, lr}
    40f2:	4605      	mov	r5, r0
    40f4:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    40f6:	f7ff ffef 	bl	40d8 <get_subsys>
    40fa:	4601      	mov	r1, r0
    40fc:	2240      	movs	r2, #64	; 0x40
    40fe:	4803      	ldr	r0, [pc, #12]	; (410c <onoff_stop+0x1c>)
    4100:	f006 fe7a 	bl	adf8 <stop>
    4104:	4601      	mov	r1, r0
	notify(mgr, res);
    4106:	4628      	mov	r0, r5
    4108:	47a0      	blx	r4
}
    410a:	bd38      	pop	{r3, r4, r5, pc}
    410c:	0000c10c 	.word	0x0000c10c

00004110 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4110:	b530      	push	{r4, r5, lr}
    4112:	b083      	sub	sp, #12
    4114:	4605      	mov	r5, r0
    4116:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4118:	f7ff ffde 	bl	40d8 <get_subsys>
    411c:	4601      	mov	r1, r0
    411e:	2340      	movs	r3, #64	; 0x40
    4120:	9300      	str	r3, [sp, #0]
    4122:	4623      	mov	r3, r4
    4124:	4a05      	ldr	r2, [pc, #20]	; (413c <onoff_start+0x2c>)
    4126:	4806      	ldr	r0, [pc, #24]	; (4140 <onoff_start+0x30>)
    4128:	f006 fe80 	bl	ae2c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    412c:	1e01      	subs	r1, r0, #0
    412e:	db01      	blt.n	4134 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    4130:	b003      	add	sp, #12
    4132:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    4134:	4628      	mov	r0, r5
    4136:	47a0      	blx	r4
}
    4138:	e7fa      	b.n	4130 <onoff_start+0x20>
    413a:	bf00      	nop
    413c:	0000ae75 	.word	0x0000ae75
    4140:	0000c10c 	.word	0x0000c10c

00004144 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    4144:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    4146:	2805      	cmp	r0, #5
    4148:	d815      	bhi.n	4176 <clock_event_handler+0x32>
    414a:	e8df f000 	tbb	[pc, r0]
    414e:	1a03      	.short	0x1a03
    4150:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    4154:	2100      	movs	r1, #0
    4156:	480d      	ldr	r0, [pc, #52]	; (418c <clock_event_handler+0x48>)
    4158:	f006 fdd7 	bl	ad0a <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    415c:	6883      	ldr	r3, [r0, #8]
    415e:	f013 0f07 	tst.w	r3, #7
    4162:	d108      	bne.n	4176 <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    4164:	2100      	movs	r1, #0
    4166:	4809      	ldr	r0, [pc, #36]	; (418c <clock_event_handler+0x48>)
    4168:	f006 fe34 	bl	add4 <clkstarted_handle>
    416c:	e003      	b.n	4176 <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    416e:	2102      	movs	r1, #2
    4170:	4806      	ldr	r0, [pc, #24]	; (418c <clock_event_handler+0x48>)
    4172:	f006 fe2f 	bl	add4 <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    4176:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    4178:	2103      	movs	r1, #3
    417a:	4804      	ldr	r0, [pc, #16]	; (418c <clock_event_handler+0x48>)
    417c:	f006 fe2a 	bl	add4 <clkstarted_handle>
		break;
    4180:	e7f9      	b.n	4176 <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4182:	2101      	movs	r1, #1
    4184:	4801      	ldr	r0, [pc, #4]	; (418c <clock_event_handler+0x48>)
    4186:	f006 fe25 	bl	add4 <clkstarted_handle>
}
    418a:	e7f4      	b.n	4176 <clock_event_handler+0x32>
    418c:	0000c10c 	.word	0x0000c10c

00004190 <generic_hfclk_start>:
{
    4190:	b510      	push	{r4, lr}
	__asm__ volatile(
    4192:	f04f 0320 	mov.w	r3, #32
    4196:	f3ef 8411 	mrs	r4, BASEPRI
    419a:	f383 8812 	msr	BASEPRI_MAX, r3
    419e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    41a2:	4a13      	ldr	r2, [pc, #76]	; (41f0 <generic_hfclk_start+0x60>)
    41a4:	6813      	ldr	r3, [r2, #0]
    41a6:	f043 0302 	orr.w	r3, r3, #2
    41aa:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    41ac:	f013 0f01 	tst.w	r3, #1
    41b0:	d108      	bne.n	41c4 <generic_hfclk_start+0x34>
	bool already_started = false;
    41b2:	2300      	movs	r3, #0
	__asm__ volatile(
    41b4:	f384 8811 	msr	BASEPRI, r4
    41b8:	f3bf 8f6f 	isb	sy
	if (already_started) {
    41bc:	b99b      	cbnz	r3, 41e6 <generic_hfclk_start+0x56>
	hfclk_start();
    41be:	f006 fe61 	bl	ae84 <hfclk_start>
}
    41c2:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    41c4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    41c8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    41cc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    41d0:	f012 0f01 	tst.w	r2, #1
    41d4:	d101      	bne.n	41da <generic_hfclk_start+0x4a>
	bool already_started = false;
    41d6:	2300      	movs	r3, #0
    41d8:	e7ec      	b.n	41b4 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    41da:	f7ff ff79 	bl	40d0 <get_hf_flags>
    41de:	f006 fde6 	bl	adae <set_on_state>
			already_started = true;
    41e2:	2301      	movs	r3, #1
    41e4:	e7e6      	b.n	41b4 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    41e6:	2100      	movs	r1, #0
    41e8:	4802      	ldr	r0, [pc, #8]	; (41f4 <generic_hfclk_start+0x64>)
    41ea:	f006 fdf3 	bl	add4 <clkstarted_handle>
		return;
    41ee:	e7e8      	b.n	41c2 <generic_hfclk_start+0x32>
    41f0:	20001814 	.word	0x20001814
    41f4:	0000c10c 	.word	0x0000c10c

000041f8 <generic_hfclk_stop>:
{
    41f8:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    41fa:	4b08      	ldr	r3, [pc, #32]	; (421c <generic_hfclk_stop+0x24>)
    41fc:	e8d3 2fef 	ldaex	r2, [r3]
    4200:	f022 0102 	bic.w	r1, r2, #2
    4204:	e8c3 1fe0 	stlex	r0, r1, [r3]
    4208:	2800      	cmp	r0, #0
    420a:	d1f7      	bne.n	41fc <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    420c:	f012 0f01 	tst.w	r2, #1
    4210:	d000      	beq.n	4214 <generic_hfclk_stop+0x1c>
}
    4212:	bd08      	pop	{r3, pc}
	hfclk_stop();
    4214:	f006 fe4a 	bl	aeac <hfclk_stop>
    4218:	e7fb      	b.n	4212 <generic_hfclk_stop+0x1a>
    421a:	bf00      	nop
    421c:	20001814 	.word	0x20001814

00004220 <api_blocking_start>:
{
    4220:	b500      	push	{lr}
    4222:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4224:	f8cd d000 	str.w	sp, [sp]
    4228:	f8cd d004 	str.w	sp, [sp, #4]
    422c:	2300      	movs	r3, #0
    422e:	9302      	str	r3, [sp, #8]
    4230:	2301      	movs	r3, #1
    4232:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4234:	466b      	mov	r3, sp
    4236:	4a07      	ldr	r2, [pc, #28]	; (4254 <api_blocking_start+0x34>)
    4238:	f006 fe14 	bl	ae64 <api_start>
	if (err < 0) {
    423c:	2800      	cmp	r0, #0
    423e:	db05      	blt.n	424c <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    4240:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4244:	2300      	movs	r3, #0
    4246:	4668      	mov	r0, sp
    4248:	f004 f8f8 	bl	843c <z_impl_k_sem_take>
}
    424c:	b005      	add	sp, #20
    424e:	f85d fb04 	ldr.w	pc, [sp], #4
    4252:	bf00      	nop
    4254:	0000aed5 	.word	0x0000aed5

00004258 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    4258:	b570      	push	{r4, r5, r6, lr}
    425a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    425c:	2200      	movs	r2, #0
    425e:	2101      	movs	r1, #1
    4260:	2005      	movs	r0, #5
    4262:	f7fe faf5 	bl	2850 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    4266:	2005      	movs	r0, #5
    4268:	f7fe fac0 	bl	27ec <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    426c:	4811      	ldr	r0, [pc, #68]	; (42b4 <clk_init+0x5c>)
    426e:	f001 f807 	bl	5280 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4272:	4b11      	ldr	r3, [pc, #68]	; (42b8 <clk_init+0x60>)
    4274:	4298      	cmp	r0, r3
    4276:	d119      	bne.n	42ac <clk_init+0x54>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4278:	f001 f814 	bl	52a4 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    427c:	2400      	movs	r4, #0
    427e:	2c03      	cmp	r4, #3
    4280:	d812      	bhi.n	42a8 <clk_init+0x50>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    4282:	4621      	mov	r1, r4
    4284:	4630      	mov	r0, r6
    4286:	f006 fd40 	bl	ad0a <get_sub_data>
    428a:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    428c:	4621      	mov	r1, r4
    428e:	4630      	mov	r0, r6
    4290:	f006 fd46 	bl	ad20 <get_onoff_manager>
    4294:	4909      	ldr	r1, [pc, #36]	; (42bc <clk_init+0x64>)
    4296:	f005 fae6 	bl	9866 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    429a:	2800      	cmp	r0, #0
    429c:	db05      	blt.n	42aa <clk_init+0x52>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    429e:	2301      	movs	r3, #1
    42a0:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    42a2:	441c      	add	r4, r3
    42a4:	b2e4      	uxtb	r4, r4
    42a6:	e7ea      	b.n	427e <clk_init+0x26>
	}

	return 0;
    42a8:	2000      	movs	r0, #0
}
    42aa:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    42ac:	f06f 0004 	mvn.w	r0, #4
    42b0:	e7fb      	b.n	42aa <clk_init+0x52>
    42b2:	bf00      	nop
    42b4:	00004145 	.word	0x00004145
    42b8:	0bad0000 	.word	0x0bad0000
    42bc:	0000c608 	.word	0x0000c608

000042c0 <lfclk_spinwait>:
{
    42c0:	b570      	push	{r4, r5, r6, lr}
    42c2:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    42c4:	2801      	cmp	r0, #1
    42c6:	d107      	bne.n	42d8 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    42c8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    42cc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    42d0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    42d4:	2b02      	cmp	r3, #2
    42d6:	d03f      	beq.n	4358 <lfclk_spinwait+0x98>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    42d8:	f007 fb0e 	bl	b8f8 <k_is_in_isr>
    42dc:	b920      	cbnz	r0, 42e8 <lfclk_spinwait+0x28>
	return !z_sys_post_kernel;
    42de:	4b30      	ldr	r3, [pc, #192]	; (43a0 <lfclk_spinwait+0xe0>)
    42e0:	781b      	ldrb	r3, [r3, #0]
    42e2:	b19b      	cbz	r3, 430c <lfclk_spinwait+0x4c>
    42e4:	2300      	movs	r3, #0
    42e6:	e000      	b.n	42ea <lfclk_spinwait+0x2a>
    42e8:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    42ea:	461c      	mov	r4, r3
    42ec:	b183      	cbz	r3, 4310 <lfclk_spinwait+0x50>
	__asm__ volatile(
    42ee:	f04f 0320 	mov.w	r3, #32
    42f2:	f3ef 8611 	mrs	r6, BASEPRI
    42f6:	f383 8812 	msr	BASEPRI_MAX, r3
    42fa:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    42fe:	b9a4      	cbnz	r4, 432a <lfclk_spinwait+0x6a>
    p_reg->INTENCLR = mask;
    4300:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4304:	2202      	movs	r2, #2
    4306:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    430a:	e00e      	b.n	432a <lfclk_spinwait+0x6a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    430c:	2301      	movs	r3, #1
    430e:	e7ec      	b.n	42ea <lfclk_spinwait+0x2a>
	int key = isr_mode ? irq_lock() : 0;
    4310:	2600      	movs	r6, #0
    4312:	e7f4      	b.n	42fe <lfclk_spinwait+0x3e>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4314:	b30c      	cbz	r4, 435a <lfclk_spinwait+0x9a>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4316:	4630      	mov	r0, r6
    4318:	f7fe fa5e 	bl	27d8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    431c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4320:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    4324:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4326:	2b01      	cmp	r3, #1
    4328:	d01c      	beq.n	4364 <lfclk_spinwait+0xa4>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    432a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    432e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    4332:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4336:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    433a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    433e:	d126      	bne.n	438e <lfclk_spinwait+0xce>
    return false;
    4340:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4342:	2a00      	cmp	r2, #0
    4344:	d0e6      	beq.n	4314 <lfclk_spinwait+0x54>
    4346:	2b02      	cmp	r3, #2
    4348:	d001      	beq.n	434e <lfclk_spinwait+0x8e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    434a:	2d01      	cmp	r5, #1
    434c:	d1e2      	bne.n	4314 <lfclk_spinwait+0x54>
	if (isr_mode) {
    434e:	b304      	cbz	r4, 4392 <lfclk_spinwait+0xd2>
	__asm__ volatile(
    4350:	f386 8811 	msr	BASEPRI, r6
    4354:	f3bf 8f6f 	isb	sy
}
    4358:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
    435a:	2021      	movs	r0, #33	; 0x21
    435c:	2100      	movs	r1, #0
    435e:	f004 fd85 	bl	8e6c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4362:	e7db      	b.n	431c <lfclk_spinwait+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4364:	4b0f      	ldr	r3, [pc, #60]	; (43a4 <lfclk_spinwait+0xe4>)
    4366:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    4368:	2b00      	cmp	r3, #0
    436a:	d0de      	beq.n	432a <lfclk_spinwait+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    436c:	4b0d      	ldr	r3, [pc, #52]	; (43a4 <lfclk_spinwait+0xe4>)
    436e:	2200      	movs	r2, #0
    4370:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4372:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    4374:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4378:	2202      	movs	r2, #2
    437a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    437e:	4b0a      	ldr	r3, [pc, #40]	; (43a8 <lfclk_spinwait+0xe8>)
    4380:	2220      	movs	r2, #32
    4382:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4386:	4b09      	ldr	r3, [pc, #36]	; (43ac <lfclk_spinwait+0xec>)
    4388:	2201      	movs	r2, #1
    438a:	601a      	str	r2, [r3, #0]
}
    438c:	e7cd      	b.n	432a <lfclk_spinwait+0x6a>
                return true;
    438e:	2201      	movs	r2, #1
    4390:	e7d7      	b.n	4342 <lfclk_spinwait+0x82>
    p_reg->INTENSET = mask;
    4392:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4396:	2202      	movs	r2, #2
    4398:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    439c:	e7dc      	b.n	4358 <lfclk_spinwait+0x98>
    439e:	bf00      	nop
    43a0:	20001b1f 	.word	0x20001b1f
    43a4:	50005104 	.word	0x50005104
    43a8:	e000e100 	.word	0xe000e100
    43ac:	50005008 	.word	0x50005008

000043b0 <z_nrf_clock_control_get_onoff>:
{
    43b0:	b508      	push	{r3, lr}
	return get_onoff_manager(CLOCK_DEVICE,
    43b2:	b2c1      	uxtb	r1, r0
    43b4:	4801      	ldr	r0, [pc, #4]	; (43bc <z_nrf_clock_control_get_onoff+0xc>)
    43b6:	f006 fcb3 	bl	ad20 <get_onoff_manager>
}
    43ba:	bd08      	pop	{r3, pc}
    43bc:	0000c10c 	.word	0x0000c10c

000043c0 <z_nrf_clock_control_lf_on>:
{
    43c0:	b510      	push	{r4, lr}
    43c2:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    43c4:	4b0e      	ldr	r3, [pc, #56]	; (4400 <z_nrf_clock_control_lf_on+0x40>)
    43c6:	2101      	movs	r1, #1
    43c8:	e8d3 2fef 	ldaex	r2, [r3]
    43cc:	e8c3 1fe0 	stlex	r0, r1, [r3]
    43d0:	2800      	cmp	r0, #0
    43d2:	d1f9      	bne.n	43c8 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    43d4:	b11a      	cbz	r2, 43de <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    43d6:	1e63      	subs	r3, r4, #1
    43d8:	2b01      	cmp	r3, #1
    43da:	d90c      	bls.n	43f6 <z_nrf_clock_control_lf_on+0x36>
}
    43dc:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    43de:	4809      	ldr	r0, [pc, #36]	; (4404 <z_nrf_clock_control_lf_on+0x44>)
    43e0:	f006 fc9e 	bl	ad20 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    43e4:	4908      	ldr	r1, [pc, #32]	; (4408 <z_nrf_clock_control_lf_on+0x48>)
    43e6:	2300      	movs	r3, #0
    43e8:	604b      	str	r3, [r1, #4]
    43ea:	60cb      	str	r3, [r1, #12]
    43ec:	2301      	movs	r3, #1
    43ee:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    43f0:	f005 fa55 	bl	989e <onoff_request>
    43f4:	e7ef      	b.n	43d6 <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    43f6:	4620      	mov	r0, r4
    43f8:	f7ff ff62 	bl	42c0 <lfclk_spinwait>
		break;
    43fc:	e7ee      	b.n	43dc <z_nrf_clock_control_lf_on+0x1c>
    43fe:	bf00      	nop
    4400:	20001818 	.word	0x20001818
    4404:	0000c10c 	.word	0x0000c10c
    4408:	20001764 	.word	0x20001764

0000440c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    440c:	b510      	push	{r4, lr}
    440e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    4410:	280a      	cmp	r0, #10
    4412:	d007      	beq.n	4424 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    4414:	4b07      	ldr	r3, [pc, #28]	; (4434 <console_out+0x28>)
    4416:	6818      	ldr	r0, [r3, #0]
    4418:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    441a:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    441c:	685b      	ldr	r3, [r3, #4]
    441e:	4798      	blx	r3

	return c;
}
    4420:	4620      	mov	r0, r4
    4422:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    4424:	4b03      	ldr	r3, [pc, #12]	; (4434 <console_out+0x28>)
    4426:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4428:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    442a:	685b      	ldr	r3, [r3, #4]
    442c:	210d      	movs	r1, #13
    442e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    4430:	e7f0      	b.n	4414 <console_out+0x8>
    4432:	bf00      	nop
    4434:	2000181c 	.word	0x2000181c

00004438 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    4438:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    443a:	4c04      	ldr	r4, [pc, #16]	; (444c <uart_console_hook_install+0x14>)
    443c:	4620      	mov	r0, r4
    443e:	f7fe fe4f 	bl	30e0 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    4442:	4620      	mov	r0, r4
    4444:	f7fc f83a 	bl	4bc <__printk_hook_install>
#endif
}
    4448:	bd10      	pop	{r4, pc}
    444a:	bf00      	nop
    444c:	0000440d 	.word	0x0000440d

00004450 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4450:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4452:	4806      	ldr	r0, [pc, #24]	; (446c <uart_console_init+0x1c>)
    4454:	4b06      	ldr	r3, [pc, #24]	; (4470 <uart_console_init+0x20>)
    4456:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    4458:	f007 f9ca 	bl	b7f0 <z_device_ready>
    445c:	b118      	cbz	r0, 4466 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    445e:	f7ff ffeb 	bl	4438 <uart_console_hook_install>

	return 0;
    4462:	2000      	movs	r0, #0
}
    4464:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4466:	f06f 0012 	mvn.w	r0, #18
    446a:	e7fb      	b.n	4464 <uart_console_init+0x14>
    446c:	0000c154 	.word	0x0000c154
    4470:	2000181c 	.word	0x2000181c

00004474 <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4474:	4b1f      	ldr	r3, [pc, #124]	; (44f4 <get_drive+0x80>)
    4476:	4003      	ands	r3, r0
    4478:	4a1f      	ldr	r2, [pc, #124]	; (44f8 <get_drive+0x84>)
    447a:	4293      	cmp	r3, r2
    447c:	d032      	beq.n	44e4 <get_drive+0x70>
    447e:	d816      	bhi.n	44ae <get_drive+0x3a>
    4480:	2b06      	cmp	r3, #6
    4482:	d02b      	beq.n	44dc <get_drive+0x68>
    4484:	d906      	bls.n	4494 <get_drive+0x20>
    4486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    448a:	d10d      	bne.n	44a8 <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
    448c:	2301      	movs	r3, #1
    448e:	700b      	strb	r3, [r1, #0]
	int err = 0;
    4490:	2000      	movs	r0, #0
		break;
    4492:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4494:	b1fb      	cbz	r3, 44d6 <get_drive+0x62>
    4496:	2b02      	cmp	r3, #2
    4498:	d103      	bne.n	44a2 <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
    449a:	2304      	movs	r3, #4
    449c:	700b      	strb	r3, [r1, #0]
	int err = 0;
    449e:	2000      	movs	r0, #0
		break;
    44a0:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    44a2:	f06f 0015 	mvn.w	r0, #21
    44a6:	4770      	bx	lr
    44a8:	f06f 0015 	mvn.w	r0, #21
    44ac:	4770      	bx	lr
    44ae:	4a13      	ldr	r2, [pc, #76]	; (44fc <get_drive+0x88>)
    44b0:	4293      	cmp	r3, r2
    44b2:	d01b      	beq.n	44ec <get_drive+0x78>
    44b4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    44b8:	d103      	bne.n	44c2 <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
    44ba:	2303      	movs	r3, #3
    44bc:	700b      	strb	r3, [r1, #0]
	int err = 0;
    44be:	2000      	movs	r0, #0
		break;
    44c0:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    44c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    44c6:	d103      	bne.n	44d0 <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
    44c8:	2302      	movs	r3, #2
    44ca:	700b      	strb	r3, [r1, #0]
	int err = 0;
    44cc:	2000      	movs	r0, #0
		break;
    44ce:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    44d0:	f06f 0015 	mvn.w	r0, #21
    44d4:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    44d6:	2000      	movs	r0, #0
    44d8:	7008      	strb	r0, [r1, #0]
		break;
    44da:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    44dc:	2306      	movs	r3, #6
    44de:	700b      	strb	r3, [r1, #0]
	int err = 0;
    44e0:	2000      	movs	r0, #0
		break;
    44e2:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    44e4:	2307      	movs	r3, #7
    44e6:	700b      	strb	r3, [r1, #0]
	int err = 0;
    44e8:	2000      	movs	r0, #0
		break;
    44ea:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
    44ec:	2305      	movs	r3, #5
    44ee:	700b      	strb	r3, [r1, #0]
	int err = 0;
    44f0:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
    44f2:	4770      	bx	lr
    44f4:	00f00006 	.word	0x00f00006
    44f8:	00100006 	.word	0x00100006
    44fc:	00400002 	.word	0x00400002

00004500 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4500:	b128      	cbz	r0, 450e <get_dev+0xe>
    4502:	2801      	cmp	r0, #1
    4504:	d101      	bne.n	450a <get_dev+0xa>
    4506:	4803      	ldr	r0, [pc, #12]	; (4514 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    4508:	4770      	bx	lr
	const struct device *dev = NULL;
    450a:	2000      	movs	r0, #0
    450c:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    450e:	4802      	ldr	r0, [pc, #8]	; (4518 <get_dev+0x18>)
    4510:	4770      	bx	lr
    4512:	bf00      	nop
    4514:	0000c124 	.word	0x0000c124
    4518:	0000c13c 	.word	0x0000c13c

0000451c <gpio_nrfx_pin_interrupt_configure>:
{
    451c:	b5f0      	push	{r4, r5, r6, r7, lr}
    451e:	b085      	sub	sp, #20
    4520:	460e      	mov	r6, r1
    4522:	4619      	mov	r1, r3
	return port->config;
    4524:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4526:	7b1b      	ldrb	r3, [r3, #12]
    4528:	f006 051f 	and.w	r5, r6, #31
    452c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    4530:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    4534:	d022      	beq.n	457c <gpio_nrfx_pin_interrupt_configure+0x60>
    4536:	4607      	mov	r7, r0
    4538:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    453a:	2300      	movs	r3, #0
    453c:	9302      	str	r3, [sp, #8]
    453e:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    4540:	4610      	mov	r0, r2
    4542:	f006 fcf8 	bl	af36 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4546:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    454a:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    454c:	6899      	ldr	r1, [r3, #8]
    454e:	40f1      	lsrs	r1, r6
    4550:	f011 0f01 	tst.w	r1, #1
    4554:	d102      	bne.n	455c <gpio_nrfx_pin_interrupt_configure+0x40>
    4556:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
    455a:	d014      	beq.n	4586 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    455c:	2300      	movs	r3, #0
    455e:	aa02      	add	r2, sp, #8
    4560:	4619      	mov	r1, r3
    4562:	4628      	mov	r0, r5
    4564:	f001 fa52 	bl	5a0c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4568:	4b1a      	ldr	r3, [pc, #104]	; (45d4 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    456a:	4298      	cmp	r0, r3
    456c:	d12f      	bne.n	45ce <gpio_nrfx_pin_interrupt_configure+0xb2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    456e:	2101      	movs	r1, #1
    4570:	4628      	mov	r0, r5
    4572:	f001 fc27 	bl	5dc4 <nrfx_gpiote_trigger_enable>
	return 0;
    4576:	2000      	movs	r0, #0
}
    4578:	b005      	add	sp, #20
    457a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    457c:	4628      	mov	r0, r5
    457e:	f001 fc83 	bl	5e88 <nrfx_gpiote_trigger_disable>
		return 0;
    4582:	2000      	movs	r0, #0
    4584:	e7f8      	b.n	4578 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    4586:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    458a:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    458c:	2a01      	cmp	r2, #1
    458e:	d012      	beq.n	45b6 <gpio_nrfx_pin_interrupt_configure+0x9a>
        case 0: return NRF_P0;
    4590:	4a11      	ldr	r2, [pc, #68]	; (45d8 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4592:	3380      	adds	r3, #128	; 0x80
    4594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4598:	f013 0f01 	tst.w	r3, #1
    459c:	d1de      	bne.n	455c <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    459e:	f10d 0107 	add.w	r1, sp, #7
    45a2:	4628      	mov	r0, r5
    45a4:	f001 fbb2 	bl	5d0c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    45a8:	4b0c      	ldr	r3, [pc, #48]	; (45dc <gpio_nrfx_pin_interrupt_configure+0xc0>)
    45aa:	4298      	cmp	r0, r3
    45ac:	d005      	beq.n	45ba <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    45ae:	f10d 0307 	add.w	r3, sp, #7
    45b2:	9303      	str	r3, [sp, #12]
    45b4:	e7d2      	b.n	455c <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    45b6:	4a0a      	ldr	r2, [pc, #40]	; (45e0 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    45b8:	e7eb      	b.n	4592 <gpio_nrfx_pin_interrupt_configure+0x76>
			err = nrfx_gpiote_channel_alloc(&ch);
    45ba:	f10d 0007 	add.w	r0, sp, #7
    45be:	f001 fbf9 	bl	5db4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    45c2:	4b04      	ldr	r3, [pc, #16]	; (45d4 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    45c4:	4298      	cmp	r0, r3
    45c6:	d0f2      	beq.n	45ae <gpio_nrfx_pin_interrupt_configure+0x92>
				return -ENOMEM;
    45c8:	f06f 000b 	mvn.w	r0, #11
    45cc:	e7d4      	b.n	4578 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    45ce:	f06f 0004 	mvn.w	r0, #4
    45d2:	e7d1      	b.n	4578 <gpio_nrfx_pin_interrupt_configure+0x5c>
    45d4:	0bad0000 	.word	0x0bad0000
    45d8:	50842500 	.word	0x50842500
    45dc:	0bad0004 	.word	0x0bad0004
    45e0:	50842800 	.word	0x50842800

000045e4 <pin_uninit>:
{
    45e4:	b530      	push	{r4, r5, lr}
    45e6:	b083      	sub	sp, #12
    45e8:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    45ea:	f10d 0107 	add.w	r1, sp, #7
    45ee:	f001 fb8d 	bl	5d0c <nrfx_gpiote_channel_get>
    45f2:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    45f4:	4620      	mov	r0, r4
    45f6:	f001 fc77 	bl	5ee8 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    45fa:	4b0b      	ldr	r3, [pc, #44]	; (4628 <pin_uninit+0x44>)
    45fc:	4298      	cmp	r0, r3
    45fe:	d10f      	bne.n	4620 <pin_uninit+0x3c>
	if (free_ch) {
    4600:	429d      	cmp	r5, r3
    4602:	d005      	beq.n	4610 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    4604:	4b08      	ldr	r3, [pc, #32]	; (4628 <pin_uninit+0x44>)
    4606:	4298      	cmp	r0, r3
    4608:	d107      	bne.n	461a <pin_uninit+0x36>
    460a:	2000      	movs	r0, #0
}
    460c:	b003      	add	sp, #12
    460e:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    4610:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4614:	f001 fbc6 	bl	5da4 <nrfx_gpiote_channel_free>
    4618:	e7f4      	b.n	4604 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    461a:	f06f 0004 	mvn.w	r0, #4
    461e:	e7f5      	b.n	460c <pin_uninit+0x28>
		return -EIO;
    4620:	f06f 0004 	mvn.w	r0, #4
    4624:	e7f2      	b.n	460c <pin_uninit+0x28>
    4626:	bf00      	nop
    4628:	0bad0000 	.word	0x0bad0000

0000462c <gpio_nrfx_pin_configure>:
{
    462c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4630:	b087      	sub	sp, #28
	return port->config;
    4632:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4636:	f898 300c 	ldrb.w	r3, [r8, #12]
    463a:	f001 051f 	and.w	r5, r1, #31
    463e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    4642:	2a00      	cmp	r2, #0
    4644:	d043      	beq.n	46ce <gpio_nrfx_pin_configure+0xa2>
    4646:	460c      	mov	r4, r1
    4648:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    464a:	2600      	movs	r6, #0
    464c:	9603      	str	r6, [sp, #12]
    464e:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    4650:	f10d 0117 	add.w	r1, sp, #23
    4654:	4620      	mov	r0, r4
    4656:	f001 fb59 	bl	5d0c <nrfx_gpiote_channel_get>
    465a:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    465c:	4633      	mov	r3, r6
    465e:	aa03      	add	r2, sp, #12
    4660:	4631      	mov	r1, r6
    4662:	4628      	mov	r0, r5
    4664:	f001 f9d2 	bl	5a0c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4668:	4b2f      	ldr	r3, [pc, #188]	; (4728 <gpio_nrfx_pin_configure+0xfc>)
    466a:	4298      	cmp	r0, r3
    466c:	d159      	bne.n	4722 <gpio_nrfx_pin_configure+0xf6>
	if (free_ch) {
    466e:	4599      	cmp	r9, r3
    4670:	d035      	beq.n	46de <gpio_nrfx_pin_configure+0xb2>
	if (flags & GPIO_OUTPUT) {
    4672:	f417 7f00 	tst.w	r7, #512	; 0x200
    4676:	d041      	beq.n	46fc <gpio_nrfx_pin_configure+0xd0>
		int rv = get_drive(flags, &drive);
    4678:	f10d 0103 	add.w	r1, sp, #3
    467c:	4638      	mov	r0, r7
    467e:	f7ff fef9 	bl	4474 <get_drive>
		if (rv != 0) {
    4682:	4606      	mov	r6, r0
    4684:	bb38      	cbnz	r0, 46d6 <gpio_nrfx_pin_configure+0xaa>
		nrfx_gpiote_output_config_t output_config = {
    4686:	f89d 3003 	ldrb.w	r3, [sp, #3]
    468a:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    468e:	f417 7f80 	tst.w	r7, #256	; 0x100
    4692:	bf0c      	ite	eq
    4694:	2301      	moveq	r3, #1
    4696:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    4698:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    469c:	4638      	mov	r0, r7
    469e:	f006 fc1e 	bl	aede <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    46a2:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    46a6:	f417 6f00 	tst.w	r7, #2048	; 0x800
    46aa:	d01d      	beq.n	46e8 <gpio_nrfx_pin_configure+0xbc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    46ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
    46b0:	2101      	movs	r1, #1
    46b2:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    46b6:	609c      	str	r4, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    46b8:	2200      	movs	r2, #0
    46ba:	a901      	add	r1, sp, #4
    46bc:	4628      	mov	r0, r5
    46be:	f001 fa5d 	bl	5b7c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    46c2:	4b19      	ldr	r3, [pc, #100]	; (4728 <gpio_nrfx_pin_configure+0xfc>)
    46c4:	4298      	cmp	r0, r3
    46c6:	d006      	beq.n	46d6 <gpio_nrfx_pin_configure+0xaa>
    46c8:	f06f 0615 	mvn.w	r6, #21
    46cc:	e003      	b.n	46d6 <gpio_nrfx_pin_configure+0xaa>
		return pin_uninit(abs_pin);
    46ce:	4628      	mov	r0, r5
    46d0:	f7ff ff88 	bl	45e4 <pin_uninit>
    46d4:	4606      	mov	r6, r0
}
    46d6:	4630      	mov	r0, r6
    46d8:	b007      	add	sp, #28
    46da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    46de:	f89d 0017 	ldrb.w	r0, [sp, #23]
    46e2:	f001 fb5f 	bl	5da4 <nrfx_gpiote_channel_free>
    46e6:	e7c4      	b.n	4672 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    46e8:	f417 6f80 	tst.w	r7, #1024	; 0x400
    46ec:	d0e4      	beq.n	46b8 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    46ee:	f8d8 2004 	ldr.w	r2, [r8, #4]
    46f2:	2301      	movs	r3, #1
    46f4:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    46f8:	60d4      	str	r4, [r2, #12]
}
    46fa:	e7dd      	b.n	46b8 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
    46fc:	4638      	mov	r0, r7
    46fe:	f006 fbee 	bl	aede <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    4702:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4706:	2300      	movs	r3, #0
    4708:	461a      	mov	r2, r3
    470a:	a902      	add	r1, sp, #8
    470c:	4628      	mov	r0, r5
    470e:	f001 f97d 	bl	5a0c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4712:	4b05      	ldr	r3, [pc, #20]	; (4728 <gpio_nrfx_pin_configure+0xfc>)
    4714:	4298      	cmp	r0, r3
    4716:	d101      	bne.n	471c <gpio_nrfx_pin_configure+0xf0>
    4718:	2600      	movs	r6, #0
    471a:	e7dc      	b.n	46d6 <gpio_nrfx_pin_configure+0xaa>
    471c:	f06f 0615 	mvn.w	r6, #21
    4720:	e7d9      	b.n	46d6 <gpio_nrfx_pin_configure+0xaa>
		return -EINVAL;
    4722:	f06f 0615 	mvn.w	r6, #21
    4726:	e7d6      	b.n	46d6 <gpio_nrfx_pin_configure+0xaa>
    4728:	0bad0000 	.word	0x0bad0000

0000472c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    472c:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    472e:	f001 fb2f 	bl	5d90 <nrfx_gpiote_is_init>
    4732:	b108      	cbz	r0, 4738 <gpio_nrfx_init+0xc>
		return 0;
    4734:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    4736:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    4738:	f001 fb00 	bl	5d3c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    473c:	4b08      	ldr	r3, [pc, #32]	; (4760 <gpio_nrfx_init+0x34>)
    473e:	4298      	cmp	r0, r3
    4740:	d10a      	bne.n	4758 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    4742:	2100      	movs	r1, #0
    4744:	4807      	ldr	r0, [pc, #28]	; (4764 <gpio_nrfx_init+0x38>)
    4746:	f001 fadb 	bl	5d00 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    474a:	2200      	movs	r2, #0
    474c:	2105      	movs	r1, #5
    474e:	200d      	movs	r0, #13
    4750:	f7fe f87e 	bl	2850 <z_arm_irq_priority_set>
	return 0;
    4754:	2000      	movs	r0, #0
    4756:	e7ee      	b.n	4736 <gpio_nrfx_init+0xa>
		return -EIO;
    4758:	f06f 0004 	mvn.w	r0, #4
    475c:	e7eb      	b.n	4736 <gpio_nrfx_init+0xa>
    475e:	bf00      	nop
    4760:	0bad0000 	.word	0x0bad0000
    4764:	0000afc7 	.word	0x0000afc7

00004768 <uarte_nrfx_pins_configure>:
	return config->uarte_regs;
}

#ifndef CONFIG_PINCTRL
static void uarte_nrfx_pins_configure(const struct device *dev, bool sleep)
{
    4768:	b410      	push	{r4}
	return dev->config;
    476a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	if (!sleep) {
    476c:	2900      	cmp	r1, #0
    476e:	f040 8087 	bne.w	4880 <uarte_nrfx_pins_configure+0x118>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4772:	68da      	ldr	r2, [r3, #12]
    4774:	f1b2 3fff 	cmp.w	r2, #4294967295
    4778:	d018      	beq.n	47ac <uarte_nrfx_pins_configure+0x44>
    *p_pin = pin_number & 0x1F;
    477a:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    477e:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4780:	2a01      	cmp	r2, #1
    4782:	d06d      	beq.n	4860 <uarte_nrfx_pins_configure+0xf8>
        case 0: return NRF_P0;
    4784:	4869      	ldr	r0, [pc, #420]	; (492c <uarte_nrfx_pins_configure+0x1c4>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4786:	2201      	movs	r2, #1
    4788:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    478a:	6082      	str	r2, [r0, #8]
			nrf_gpio_pin_write(cfg->tx_pin, 1);
			nrf_gpio_cfg_output(cfg->tx_pin);
    478c:	68da      	ldr	r2, [r3, #12]
    *p_pin = pin_number & 0x1F;
    478e:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    4792:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4794:	2a01      	cmp	r2, #1
    4796:	d065      	beq.n	4864 <uarte_nrfx_pins_configure+0xfc>
        case 0: return NRF_P0;
    4798:	4864      	ldr	r0, [pc, #400]	; (492c <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    479a:	3180      	adds	r1, #128	; 0x80
    479c:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    47a0:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    47a4:	f042 0203 	orr.w	r2, r2, #3
    reg->PIN_CNF[pin_number] = cnf;
    47a8:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		}

		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    47ac:	691a      	ldr	r2, [r3, #16]
    47ae:	f1b2 3fff 	cmp.w	r2, #4294967295
    47b2:	d012      	beq.n	47da <uarte_nrfx_pins_configure+0x72>
			nrf_gpio_cfg_input(cfg->rx_pin,
					   (cfg->rx_pull_up ?
    47b4:	7f19      	ldrb	r1, [r3, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
    47b6:	2900      	cmp	r1, #0
    47b8:	d056      	beq.n	4868 <uarte_nrfx_pins_configure+0x100>
    47ba:	2403      	movs	r4, #3
    *p_pin = pin_number & 0x1F;
    47bc:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    47c0:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    47c2:	2a01      	cmp	r2, #1
    47c4:	d052      	beq.n	486c <uarte_nrfx_pins_configure+0x104>
        case 0: return NRF_P0;
    47c6:	4859      	ldr	r0, [pc, #356]	; (492c <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    47c8:	3180      	adds	r1, #128	; 0x80
    47ca:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    47ce:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    47d2:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    47d6:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
					    NRF_GPIO_PIN_PULLUP :
					    NRF_GPIO_PIN_NOPULL));
		}

		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    47da:	695a      	ldr	r2, [r3, #20]
    47dc:	f1b2 3fff 	cmp.w	r2, #4294967295
    47e0:	d018      	beq.n	4814 <uarte_nrfx_pins_configure+0xac>
    *p_pin = pin_number & 0x1F;
    47e2:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    47e6:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    47e8:	2a01      	cmp	r2, #1
    47ea:	d041      	beq.n	4870 <uarte_nrfx_pins_configure+0x108>
        case 0: return NRF_P0;
    47ec:	484f      	ldr	r0, [pc, #316]	; (492c <uarte_nrfx_pins_configure+0x1c4>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    47ee:	2201      	movs	r2, #1
    47f0:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    47f2:	6082      	str	r2, [r0, #8]
			nrf_gpio_pin_write(cfg->rts_pin, 1);
			nrf_gpio_cfg_output(cfg->rts_pin);
    47f4:	695a      	ldr	r2, [r3, #20]
    *p_pin = pin_number & 0x1F;
    47f6:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    47fa:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    47fc:	2a01      	cmp	r2, #1
    47fe:	d039      	beq.n	4874 <uarte_nrfx_pins_configure+0x10c>
        case 0: return NRF_P0;
    4800:	484a      	ldr	r0, [pc, #296]	; (492c <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    4802:	3180      	adds	r1, #128	; 0x80
    4804:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    4808:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    480c:	f042 0203 	orr.w	r2, r2, #3
    reg->PIN_CNF[pin_number] = cnf;
    4810:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		}

		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4814:	699a      	ldr	r2, [r3, #24]
    4816:	f1b2 3fff 	cmp.w	r2, #4294967295
    481a:	d011      	beq.n	4840 <uarte_nrfx_pins_configure+0xd8>
			nrf_gpio_cfg_input(cfg->cts_pin,
					   (cfg->cts_pull_up ?
    481c:	7f59      	ldrb	r1, [r3, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
    481e:	b359      	cbz	r1, 4878 <uarte_nrfx_pins_configure+0x110>
    4820:	2403      	movs	r4, #3
    *p_pin = pin_number & 0x1F;
    4822:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    4826:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4828:	2a01      	cmp	r2, #1
    482a:	d027      	beq.n	487c <uarte_nrfx_pins_configure+0x114>
        case 0: return NRF_P0;
    482c:	483f      	ldr	r0, [pc, #252]	; (492c <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    482e:	3180      	adds	r1, #128	; 0x80
    4830:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    4834:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4838:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    483c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
			nrf_gpio_cfg_default(cfg->cts_pin);
		}
	}

	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    4840:	681a      	ldr	r2, [r3, #0]
    4842:	68d8      	ldr	r0, [r3, #12]
    4844:	6919      	ldr	r1, [r3, #16]

NRF_STATIC_INLINE void nrf_uarte_txrx_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pseltxd,
                                               uint32_t         pselrxd)
{
    p_reg->PSEL.TXD = pseltxd;
    4846:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    484a:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    484e:	681a      	ldr	r2, [r3, #0]
    4850:	6959      	ldr	r1, [r3, #20]
    4852:	699b      	ldr	r3, [r3, #24]

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
    p_reg->PSEL.RTS = pselrts;
    4854:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    4858:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
    485c:	bc10      	pop	{r4}
    485e:	4770      	bx	lr
        case 1: return NRF_P1;
    4860:	4833      	ldr	r0, [pc, #204]	; (4930 <uarte_nrfx_pins_configure+0x1c8>)
    4862:	e790      	b.n	4786 <uarte_nrfx_pins_configure+0x1e>
    4864:	4832      	ldr	r0, [pc, #200]	; (4930 <uarte_nrfx_pins_configure+0x1c8>)
    4866:	e798      	b.n	479a <uarte_nrfx_pins_configure+0x32>
			nrf_gpio_cfg_input(cfg->rx_pin,
    4868:	2400      	movs	r4, #0
    486a:	e7a7      	b.n	47bc <uarte_nrfx_pins_configure+0x54>
    486c:	4830      	ldr	r0, [pc, #192]	; (4930 <uarte_nrfx_pins_configure+0x1c8>)
    486e:	e7ab      	b.n	47c8 <uarte_nrfx_pins_configure+0x60>
    4870:	482f      	ldr	r0, [pc, #188]	; (4930 <uarte_nrfx_pins_configure+0x1c8>)
    4872:	e7bc      	b.n	47ee <uarte_nrfx_pins_configure+0x86>
    4874:	482e      	ldr	r0, [pc, #184]	; (4930 <uarte_nrfx_pins_configure+0x1c8>)
    4876:	e7c4      	b.n	4802 <uarte_nrfx_pins_configure+0x9a>
			nrf_gpio_cfg_input(cfg->cts_pin,
    4878:	2400      	movs	r4, #0
    487a:	e7d2      	b.n	4822 <uarte_nrfx_pins_configure+0xba>
    487c:	482c      	ldr	r0, [pc, #176]	; (4930 <uarte_nrfx_pins_configure+0x1c8>)
    487e:	e7d6      	b.n	482e <uarte_nrfx_pins_configure+0xc6>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4880:	68da      	ldr	r2, [r3, #12]
    4882:	f1b2 3fff 	cmp.w	r2, #4294967295
    4886:	d00e      	beq.n	48a6 <uarte_nrfx_pins_configure+0x13e>
    *p_pin = pin_number & 0x1F;
    4888:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    488c:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    488e:	2a01      	cmp	r2, #1
    4890:	d043      	beq.n	491a <uarte_nrfx_pins_configure+0x1b2>
        case 0: return NRF_P0;
    4892:	4826      	ldr	r0, [pc, #152]	; (492c <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    4894:	3180      	adds	r1, #128	; 0x80
    4896:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    489a:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    489e:	f042 0202 	orr.w	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    48a2:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    48a6:	691a      	ldr	r2, [r3, #16]
    48a8:	f1b2 3fff 	cmp.w	r2, #4294967295
    48ac:	d00e      	beq.n	48cc <uarte_nrfx_pins_configure+0x164>
    *p_pin = pin_number & 0x1F;
    48ae:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    48b2:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    48b4:	2a01      	cmp	r2, #1
    48b6:	d032      	beq.n	491e <uarte_nrfx_pins_configure+0x1b6>
        case 0: return NRF_P0;
    48b8:	481c      	ldr	r0, [pc, #112]	; (492c <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    48ba:	3180      	adds	r1, #128	; 0x80
    48bc:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    48c0:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    48c4:	f042 0202 	orr.w	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    48c8:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    48cc:	695a      	ldr	r2, [r3, #20]
    48ce:	f1b2 3fff 	cmp.w	r2, #4294967295
    48d2:	d00e      	beq.n	48f2 <uarte_nrfx_pins_configure+0x18a>
    *p_pin = pin_number & 0x1F;
    48d4:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    48d8:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    48da:	2a01      	cmp	r2, #1
    48dc:	d021      	beq.n	4922 <uarte_nrfx_pins_configure+0x1ba>
        case 0: return NRF_P0;
    48de:	4813      	ldr	r0, [pc, #76]	; (492c <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    48e0:	3180      	adds	r1, #128	; 0x80
    48e2:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    48e6:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    48ea:	f042 0202 	orr.w	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    48ee:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    48f2:	699a      	ldr	r2, [r3, #24]
    48f4:	f1b2 3fff 	cmp.w	r2, #4294967295
    48f8:	d0a2      	beq.n	4840 <uarte_nrfx_pins_configure+0xd8>
    *p_pin = pin_number & 0x1F;
    48fa:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    48fe:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4900:	2a01      	cmp	r2, #1
    4902:	d010      	beq.n	4926 <uarte_nrfx_pins_configure+0x1be>
        case 0: return NRF_P0;
    4904:	4809      	ldr	r0, [pc, #36]	; (492c <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    4906:	3180      	adds	r1, #128	; 0x80
    4908:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    490c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4910:	f042 0202 	orr.w	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    4914:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
}
    4918:	e792      	b.n	4840 <uarte_nrfx_pins_configure+0xd8>
        case 1: return NRF_P1;
    491a:	4805      	ldr	r0, [pc, #20]	; (4930 <uarte_nrfx_pins_configure+0x1c8>)
    491c:	e7ba      	b.n	4894 <uarte_nrfx_pins_configure+0x12c>
    491e:	4804      	ldr	r0, [pc, #16]	; (4930 <uarte_nrfx_pins_configure+0x1c8>)
    4920:	e7cb      	b.n	48ba <uarte_nrfx_pins_configure+0x152>
    4922:	4803      	ldr	r0, [pc, #12]	; (4930 <uarte_nrfx_pins_configure+0x1c8>)
    4924:	e7dc      	b.n	48e0 <uarte_nrfx_pins_configure+0x178>
    4926:	4802      	ldr	r0, [pc, #8]	; (4930 <uarte_nrfx_pins_configure+0x1c8>)
    4928:	e7ed      	b.n	4906 <uarte_nrfx_pins_configure+0x19e>
    492a:	bf00      	nop
    492c:	50842500 	.word	0x50842500
    4930:	50842800 	.word	0x50842800

00004934 <baudrate_set>:
	return dev->config;
    4934:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    4936:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    4938:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    493c:	d06f      	beq.n	4a1e <baudrate_set+0xea>
    493e:	d83a      	bhi.n	49b6 <baudrate_set+0x82>
    4940:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    4944:	d06e      	beq.n	4a24 <baudrate_set+0xf0>
    4946:	d90a      	bls.n	495e <baudrate_set+0x2a>
    4948:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    494c:	d075      	beq.n	4a3a <baudrate_set+0x106>
    494e:	d924      	bls.n	499a <baudrate_set+0x66>
    4950:	f647 2312 	movw	r3, #31250	; 0x7a12
    4954:	4299      	cmp	r1, r3
    4956:	d12b      	bne.n	49b0 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    4958:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    495c:	e013      	b.n	4986 <baudrate_set+0x52>
	switch (baudrate) {
    495e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    4962:	d061      	beq.n	4a28 <baudrate_set+0xf4>
    4964:	d907      	bls.n	4976 <baudrate_set+0x42>
    4966:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    496a:	d063      	beq.n	4a34 <baudrate_set+0x100>
    496c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    4970:	d110      	bne.n	4994 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    4972:	4b3c      	ldr	r3, [pc, #240]	; (4a64 <baudrate_set+0x130>)
    4974:	e007      	b.n	4986 <baudrate_set+0x52>
	switch (baudrate) {
    4976:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    497a:	d058      	beq.n	4a2e <baudrate_set+0xfa>
    497c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    4980:	d105      	bne.n	498e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    4982:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    4986:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    498a:	2000      	movs	r0, #0
    498c:	4770      	bx	lr
	switch (baudrate) {
    498e:	f06f 0015 	mvn.w	r0, #21
    4992:	4770      	bx	lr
    4994:	f06f 0015 	mvn.w	r0, #21
    4998:	4770      	bx	lr
    499a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    499e:	d04e      	beq.n	4a3e <baudrate_set+0x10a>
    49a0:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    49a4:	d101      	bne.n	49aa <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    49a6:	4b30      	ldr	r3, [pc, #192]	; (4a68 <baudrate_set+0x134>)
    49a8:	e7ed      	b.n	4986 <baudrate_set+0x52>
	switch (baudrate) {
    49aa:	f06f 0015 	mvn.w	r0, #21
    49ae:	4770      	bx	lr
    49b0:	f06f 0015 	mvn.w	r0, #21
    49b4:	4770      	bx	lr
    49b6:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    49ba:	d042      	beq.n	4a42 <baudrate_set+0x10e>
    49bc:	d909      	bls.n	49d2 <baudrate_set+0x9e>
    49be:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    49c2:	d046      	beq.n	4a52 <baudrate_set+0x11e>
    49c4:	d91f      	bls.n	4a06 <baudrate_set+0xd2>
    49c6:	4b29      	ldr	r3, [pc, #164]	; (4a6c <baudrate_set+0x138>)
    49c8:	4299      	cmp	r1, r3
    49ca:	d148      	bne.n	4a5e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    49cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    49d0:	e7d9      	b.n	4986 <baudrate_set+0x52>
	switch (baudrate) {
    49d2:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    49d6:	d037      	beq.n	4a48 <baudrate_set+0x114>
    49d8:	d905      	bls.n	49e6 <baudrate_set+0xb2>
    49da:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    49de:	d10f      	bne.n	4a00 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    49e0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    49e4:	e7cf      	b.n	4986 <baudrate_set+0x52>
	switch (baudrate) {
    49e6:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    49ea:	4299      	cmp	r1, r3
    49ec:	d02e      	beq.n	4a4c <baudrate_set+0x118>
    49ee:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    49f2:	d102      	bne.n	49fa <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    49f4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    49f8:	e7c5      	b.n	4986 <baudrate_set+0x52>
	switch (baudrate) {
    49fa:	f06f 0015 	mvn.w	r0, #21
    49fe:	4770      	bx	lr
    4a00:	f06f 0015 	mvn.w	r0, #21
    4a04:	4770      	bx	lr
    4a06:	4b1a      	ldr	r3, [pc, #104]	; (4a70 <baudrate_set+0x13c>)
    4a08:	4299      	cmp	r1, r3
    4a0a:	d025      	beq.n	4a58 <baudrate_set+0x124>
    4a0c:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    4a10:	d102      	bne.n	4a18 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    4a12:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    4a16:	e7b6      	b.n	4986 <baudrate_set+0x52>
	switch (baudrate) {
    4a18:	f06f 0015 	mvn.w	r0, #21
    4a1c:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    4a1e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    4a22:	e7b0      	b.n	4986 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    4a24:	4b13      	ldr	r3, [pc, #76]	; (4a74 <baudrate_set+0x140>)
    4a26:	e7ae      	b.n	4986 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    4a28:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    4a2c:	e7ab      	b.n	4986 <baudrate_set+0x52>
	switch (baudrate) {
    4a2e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    4a32:	e7a8      	b.n	4986 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    4a34:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    4a38:	e7a5      	b.n	4986 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    4a3a:	4b0f      	ldr	r3, [pc, #60]	; (4a78 <baudrate_set+0x144>)
    4a3c:	e7a3      	b.n	4986 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    4a3e:	4b0f      	ldr	r3, [pc, #60]	; (4a7c <baudrate_set+0x148>)
    4a40:	e7a1      	b.n	4986 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4a42:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    4a46:	e79e      	b.n	4986 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    4a48:	4b0d      	ldr	r3, [pc, #52]	; (4a80 <baudrate_set+0x14c>)
    4a4a:	e79c      	b.n	4986 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    4a4c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    4a50:	e799      	b.n	4986 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    4a52:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    4a56:	e796      	b.n	4986 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    4a58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    4a5c:	e793      	b.n	4986 <baudrate_set+0x52>
	switch (baudrate) {
    4a5e:	f06f 0015 	mvn.w	r0, #21
}
    4a62:	4770      	bx	lr
    4a64:	0013b000 	.word	0x0013b000
    4a68:	004ea000 	.word	0x004ea000
    4a6c:	000f4240 	.word	0x000f4240
    4a70:	0003d090 	.word	0x0003d090
    4a74:	00275000 	.word	0x00275000
    4a78:	0075c000 	.word	0x0075c000
    4a7c:	003af000 	.word	0x003af000
    4a80:	013a9000 	.word	0x013a9000

00004a84 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    4a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a88:	4605      	mov	r5, r0
    4a8a:	460f      	mov	r7, r1
	return dev->data;
    4a8c:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4a90:	f006 ff32 	bl	b8f8 <k_is_in_isr>
    4a94:	b920      	cbnz	r0, 4aa0 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    4a96:	4b16      	ldr	r3, [pc, #88]	; (4af0 <uarte_nrfx_poll_out+0x6c>)
    4a98:	781b      	ldrb	r3, [r3, #0]
    4a9a:	b1ab      	cbz	r3, 4ac8 <uarte_nrfx_poll_out+0x44>
    4a9c:	2300      	movs	r3, #0
    4a9e:	e000      	b.n	4aa2 <uarte_nrfx_poll_out+0x1e>
    4aa0:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    4aa2:	b19b      	cbz	r3, 4acc <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    4aa4:	f04f 0320 	mov.w	r3, #32
    4aa8:	f3ef 8411 	mrs	r4, BASEPRI
    4aac:	f383 8812 	msr	BASEPRI_MAX, r3
    4ab0:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    4ab4:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    4ab6:	4628      	mov	r0, r5
    4ab8:	f006 fbb9 	bl	b22e <is_tx_ready>
    4abc:	b950      	cbnz	r0, 4ad4 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    4abe:	f384 8811 	msr	BASEPRI, r4
    4ac2:	f3bf 8f6f 	isb	sy
}
    4ac6:	e7ed      	b.n	4aa4 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4ac8:	2301      	movs	r3, #1
    4aca:	e7ea      	b.n	4aa2 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    4acc:	4628      	mov	r0, r5
    4ace:	f006 fccb 	bl	b468 <wait_tx_ready>
    4ad2:	4606      	mov	r6, r0
	}

	data->char_out = c;
    4ad4:	4641      	mov	r1, r8
    4ad6:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    4ada:	2201      	movs	r2, #1
    4adc:	4628      	mov	r0, r5
    4ade:	f006 fbc0 	bl	b262 <tx_start>
	__asm__ volatile(
    4ae2:	f386 8811 	msr	BASEPRI, r6
    4ae6:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    4aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4aee:	bf00      	nop
    4af0:	20001b1f 	.word	0x20001b1f

00004af4 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    4af4:	b538      	push	{r3, r4, r5, lr}
    4af6:	4605      	mov	r5, r0
    4af8:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    4afa:	f101 0016 	add.w	r0, r1, #22
    4afe:	f000 fd7d 	bl	55fc <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    4b02:	4b0a      	ldr	r3, [pc, #40]	; (4b2c <endtx_stoptx_ppi_init+0x38>)
    4b04:	4298      	cmp	r0, r3
    4b06:	d10e      	bne.n	4b26 <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    4b08:	7da3      	ldrb	r3, [r4, #22]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    4b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4b0e:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    4b12:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    4b16:	7da2      	ldrb	r2, [r4, #22]
    4b18:	2301      	movs	r3, #1
    4b1a:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    4b1c:	4a04      	ldr	r2, [pc, #16]	; (4b30 <endtx_stoptx_ppi_init+0x3c>)
    4b1e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    4b22:	2000      	movs	r0, #0
}
    4b24:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    4b26:	f06f 0004 	mvn.w	r0, #4
    4b2a:	e7fb      	b.n	4b24 <endtx_stoptx_ppi_init+0x30>
    4b2c:	0bad0000 	.word	0x0bad0000
    4b30:	50017000 	.word	0x50017000

00004b34 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4b34:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    4b38:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    4b3c:	4b01      	ldr	r3, [pc, #4]	; (4b44 <set_comparator+0x10>)
    4b3e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    4b42:	4770      	bx	lr
    4b44:	50015000 	.word	0x50015000

00004b48 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    4b48:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    4b4c:	4b01      	ldr	r3, [pc, #4]	; (4b54 <get_comparator+0xc>)
    4b4e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    4b52:	4770      	bx	lr
    4b54:	50015000 	.word	0x50015000

00004b58 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4b58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4b5c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    4b5e:	4a02      	ldr	r2, [pc, #8]	; (4b68 <event_enable+0x10>)
    4b60:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    4b64:	4770      	bx	lr
    4b66:	bf00      	nop
    4b68:	50015000 	.word	0x50015000

00004b6c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4b70:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    4b72:	4a02      	ldr	r2, [pc, #8]	; (4b7c <event_disable+0x10>)
    4b74:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    4b78:	4770      	bx	lr
    4b7a:	bf00      	nop
    4b7c:	50015000 	.word	0x50015000

00004b80 <counter>:
     return p_reg->COUNTER;
    4b80:	4b01      	ldr	r3, [pc, #4]	; (4b88 <counter+0x8>)
    4b82:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    4b86:	4770      	bx	lr
    4b88:	50015000 	.word	0x50015000

00004b8c <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    4b8c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    4b8e:	2301      	movs	r3, #1
    4b90:	4083      	lsls	r3, r0
    4b92:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4b94:	4a0d      	ldr	r2, [pc, #52]	; (4bcc <compare_int_lock+0x40>)
    4b96:	e8d2 1fef 	ldaex	r1, [r2]
    4b9a:	ea01 0c04 	and.w	ip, r1, r4
    4b9e:	e8c2 cfee 	stlex	lr, ip, [r2]
    4ba2:	f1be 0f00 	cmp.w	lr, #0
    4ba6:	d1f6      	bne.n	4b96 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4ba8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4bac:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    4bb0:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    4bb4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    4bb8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4bbc:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    4bc0:	420b      	tst	r3, r1
}
    4bc2:	bf14      	ite	ne
    4bc4:	2001      	movne	r0, #1
    4bc6:	2000      	moveq	r0, #0
    4bc8:	bd10      	pop	{r4, pc}
    4bca:	bf00      	nop
    4bcc:	2000185c 	.word	0x2000185c

00004bd0 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    4bd0:	b570      	push	{r4, r5, r6, lr}
    4bd2:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    4bd4:	f006 fcdc 	bl	b590 <full_int_lock>
    4bd8:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4bda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4bde:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    4be0:	4a15      	ldr	r2, [pc, #84]	; (4c38 <channel_processing_check_and_clear+0x68>)
    4be2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    4be6:	4213      	tst	r3, r2
    4be8:	d105      	bne.n	4bf6 <channel_processing_check_and_clear+0x26>
	bool result = false;
    4bea:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    4bec:	4628      	mov	r0, r5
    4bee:	f006 fcd8 	bl	b5a2 <full_int_unlock>

	return result;
}
    4bf2:	4630      	mov	r0, r6
    4bf4:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4bf6:	2301      	movs	r3, #1
    4bf8:	40a3      	lsls	r3, r4
    4bfa:	43db      	mvns	r3, r3
    4bfc:	4a0f      	ldr	r2, [pc, #60]	; (4c3c <channel_processing_check_and_clear+0x6c>)
    4bfe:	e8d2 1fef 	ldaex	r1, [r2]
    4c02:	ea01 0003 	and.w	r0, r1, r3
    4c06:	e8c2 0fe6 	stlex	r6, r0, [r2]
    4c0a:	2e00      	cmp	r6, #0
    4c0c:	d1f7      	bne.n	4bfe <channel_processing_check_and_clear+0x2e>
    4c0e:	b959      	cbnz	r1, 4c28 <channel_processing_check_and_clear+0x58>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4c10:	f104 0350 	add.w	r3, r4, #80	; 0x50
    4c14:	009b      	lsls	r3, r3, #2
    4c16:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4c18:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    4c1c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    4c20:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4c22:	b113      	cbz	r3, 4c2a <channel_processing_check_and_clear+0x5a>
    4c24:	2301      	movs	r3, #1
    4c26:	e000      	b.n	4c2a <channel_processing_check_and_clear+0x5a>
    4c28:	2301      	movs	r3, #1
		if (result) {
    4c2a:	461e      	mov	r6, r3
    4c2c:	2b00      	cmp	r3, #0
    4c2e:	d0dd      	beq.n	4bec <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    4c30:	4620      	mov	r0, r4
    4c32:	f006 fc9e 	bl	b572 <event_clear>
    4c36:	e7d9      	b.n	4bec <channel_processing_check_and_clear+0x1c>
    4c38:	50015000 	.word	0x50015000
    4c3c:	20001858 	.word	0x20001858

00004c40 <compare_int_unlock>:
	if (key) {
    4c40:	b901      	cbnz	r1, 4c44 <compare_int_unlock+0x4>
}
    4c42:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    4c44:	2301      	movs	r3, #1
    4c46:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4c48:	4a0e      	ldr	r2, [pc, #56]	; (4c84 <compare_int_unlock+0x44>)
    4c4a:	e8d2 1fef 	ldaex	r1, [r2]
    4c4e:	4319      	orrs	r1, r3
    4c50:	e8c2 1fec 	stlex	ip, r1, [r2]
    4c54:	f1bc 0f00 	cmp.w	ip, #0
    4c58:	d1f7      	bne.n	4c4a <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4c5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4c5e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    4c60:	4a09      	ldr	r2, [pc, #36]	; (4c88 <compare_int_unlock+0x48>)
    4c62:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4c66:	4b09      	ldr	r3, [pc, #36]	; (4c8c <compare_int_unlock+0x4c>)
    4c68:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    4c6c:	fa23 f000 	lsr.w	r0, r3, r0
    4c70:	f010 0f01 	tst.w	r0, #1
    4c74:	d0e5      	beq.n	4c42 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c76:	4b06      	ldr	r3, [pc, #24]	; (4c90 <compare_int_unlock+0x50>)
    4c78:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4c7c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    4c80:	e7df      	b.n	4c42 <compare_int_unlock+0x2>
    4c82:	bf00      	nop
    4c84:	2000185c 	.word	0x2000185c
    4c88:	50015000 	.word	0x50015000
    4c8c:	20001858 	.word	0x20001858
    4c90:	e000e100 	.word	0xe000e100

00004c94 <sys_clock_timeout_handler>:
{
    4c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c96:	4607      	mov	r7, r0
    4c98:	4614      	mov	r4, r2
    4c9a:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    4c9c:	4610      	mov	r0, r2
    4c9e:	4619      	mov	r1, r3
    4ca0:	f006 fc73 	bl	b58a <absolute_time_to_cc>
    4ca4:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4ca6:	4b15      	ldr	r3, [pc, #84]	; (4cfc <sys_clock_timeout_handler+0x68>)
    4ca8:	681a      	ldr	r2, [r3, #0]
    4caa:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    4cac:	601c      	str	r4, [r3, #0]
    4cae:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    4cb0:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    4cb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    4cb8:	d308      	bcc.n	4ccc <sys_clock_timeout_handler+0x38>
	return false;
    4cba:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    4cbc:	f004 fa5e 	bl	917c <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    4cc0:	4638      	mov	r0, r7
    4cc2:	f7ff ff41 	bl	4b48 <get_comparator>
    4cc6:	42a8      	cmp	r0, r5
    4cc8:	d00c      	beq.n	4ce4 <sys_clock_timeout_handler+0x50>
}
    4cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    4ccc:	4b0c      	ldr	r3, [pc, #48]	; (4d00 <sys_clock_timeout_handler+0x6c>)
    4cce:	6819      	ldr	r1, [r3, #0]
    4cd0:	0a0b      	lsrs	r3, r1, #8
    4cd2:	060a      	lsls	r2, r1, #24
    4cd4:	1952      	adds	r2, r2, r5
    4cd6:	f143 0300 	adc.w	r3, r3, #0
    4cda:	490a      	ldr	r1, [pc, #40]	; (4d04 <sys_clock_timeout_handler+0x70>)
    4cdc:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    4ce0:	2401      	movs	r4, #1
    4ce2:	e7eb      	b.n	4cbc <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    4ce4:	b11c      	cbz	r4, 4cee <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    4ce6:	4638      	mov	r0, r7
    4ce8:	f7ff ff36 	bl	4b58 <event_enable>
}
    4cec:	e7ed      	b.n	4cca <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    4cee:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    4cf2:	4638      	mov	r0, r7
    4cf4:	f7ff ff1e 	bl	4b34 <set_comparator>
    4cf8:	e7f5      	b.n	4ce6 <sys_clock_timeout_handler+0x52>
    4cfa:	bf00      	nop
    4cfc:	20000568 	.word	0x20000568
    4d00:	20001860 	.word	0x20001860
    4d04:	20000550 	.word	0x20000550

00004d08 <z_nrf_rtc_timer_read>:
{
    4d08:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4d0a:	4b0d      	ldr	r3, [pc, #52]	; (4d40 <z_nrf_rtc_timer_read+0x38>)
    4d0c:	681b      	ldr	r3, [r3, #0]
    4d0e:	0a1d      	lsrs	r5, r3, #8
    4d10:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4d12:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    4d16:	f7ff ff33 	bl	4b80 <counter>
    4d1a:	4603      	mov	r3, r0
	val += cntr;
    4d1c:	1820      	adds	r0, r4, r0
    4d1e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4d26:	d20a      	bcs.n	4d3e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    4d28:	4b06      	ldr	r3, [pc, #24]	; (4d44 <z_nrf_rtc_timer_read+0x3c>)
    4d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    4d2e:	4299      	cmp	r1, r3
    4d30:	bf08      	it	eq
    4d32:	4290      	cmpeq	r0, r2
    4d34:	d203      	bcs.n	4d3e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    4d36:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4d3a:	f141 0100 	adc.w	r1, r1, #0
}
    4d3e:	bd38      	pop	{r3, r4, r5, pc}
    4d40:	20001860 	.word	0x20001860
    4d44:	20000550 	.word	0x20000550

00004d48 <compare_set_nolocks>:
{
    4d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4d4c:	4606      	mov	r6, r0
    4d4e:	4614      	mov	r4, r2
    4d50:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    4d52:	4610      	mov	r0, r2
    4d54:	4619      	mov	r1, r3
    4d56:	f006 fc18 	bl	b58a <absolute_time_to_cc>
    4d5a:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4d5c:	f7ff ffd4 	bl	4d08 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4d60:	42a9      	cmp	r1, r5
    4d62:	bf08      	it	eq
    4d64:	42a0      	cmpeq	r0, r4
    4d66:	d21e      	bcs.n	4da6 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    4d68:	ebb4 0800 	subs.w	r8, r4, r0
    4d6c:	eb65 0901 	sbc.w	r9, r5, r1
    4d70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    4d74:	2300      	movs	r3, #0
    4d76:	454b      	cmp	r3, r9
    4d78:	bf08      	it	eq
    4d7a:	4542      	cmpeq	r2, r8
    4d7c:	d32a      	bcc.n	4dd4 <compare_set_nolocks+0x8c>
		if (target_time != cc_data[chan].target_time) {
    4d7e:	4b17      	ldr	r3, [pc, #92]	; (4ddc <compare_set_nolocks+0x94>)
    4d80:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    4d84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    4d88:	42ab      	cmp	r3, r5
    4d8a:	bf08      	it	eq
    4d8c:	42a2      	cmpeq	r2, r4
    4d8e:	d014      	beq.n	4dba <compare_set_nolocks+0x72>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    4d90:	4639      	mov	r1, r7
    4d92:	4630      	mov	r0, r6
    4d94:	f006 fc0a 	bl	b5ac <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    4d98:	4639      	mov	r1, r7
    4d9a:	f006 fbe6 	bl	b56a <counter_sub>
    4d9e:	1824      	adds	r4, r4, r0
    4da0:	f145 0500 	adc.w	r5, r5, #0
    4da4:	e009      	b.n	4dba <compare_set_nolocks+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    4da6:	2301      	movs	r3, #1
    4da8:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4daa:	4a0d      	ldr	r2, [pc, #52]	; (4de0 <compare_set_nolocks+0x98>)
    4dac:	e8d2 1fef 	ldaex	r1, [r2]
    4db0:	4319      	orrs	r1, r3
    4db2:	e8c2 1fe0 	stlex	r0, r1, [r2]
    4db6:	2800      	cmp	r0, #0
    4db8:	d1f8      	bne.n	4dac <compare_set_nolocks+0x64>
	cc_data[chan].target_time = target_time;
    4dba:	4b08      	ldr	r3, [pc, #32]	; (4ddc <compare_set_nolocks+0x94>)
    4dbc:	0132      	lsls	r2, r6, #4
    4dbe:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    4dc2:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    4dc6:	9908      	ldr	r1, [sp, #32]
    4dc8:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    4dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4dcc:	6073      	str	r3, [r6, #4]
	return ret;
    4dce:	2000      	movs	r0, #0
}
    4dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    4dd4:	f06f 0015 	mvn.w	r0, #21
    4dd8:	e7fa      	b.n	4dd0 <compare_set_nolocks+0x88>
    4dda:	bf00      	nop
    4ddc:	20000558 	.word	0x20000558
    4de0:	20001858 	.word	0x20001858

00004de4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    4de4:	b530      	push	{r4, r5, lr}
    4de6:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    4de8:	2300      	movs	r3, #0
    4dea:	4a1e      	ldr	r2, [pc, #120]	; (4e64 <sys_clock_driver_init+0x80>)
    4dec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4df0:	2b00      	cmp	r3, #0
    4df2:	dd25      	ble.n	4e40 <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
    4df4:	4c1b      	ldr	r4, [pc, #108]	; (4e64 <sys_clock_driver_init+0x80>)
    4df6:	2502      	movs	r5, #2
    4df8:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4dfc:	4b1a      	ldr	r3, [pc, #104]	; (4e68 <sys_clock_driver_init+0x84>)
    4dfe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4e02:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4e06:	2200      	movs	r2, #0
    4e08:	2101      	movs	r1, #1
    4e0a:	2015      	movs	r0, #21
    4e0c:	f7fd fd20 	bl	2850 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4e10:	2015      	movs	r0, #21
    4e12:	f7fd fceb 	bl	27ec <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4e16:	2301      	movs	r3, #1
    4e18:	4a14      	ldr	r2, [pc, #80]	; (4e6c <sys_clock_driver_init+0x88>)
    4e1a:	6013      	str	r3, [r2, #0]
    4e1c:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    4e1e:	4a14      	ldr	r2, [pc, #80]	; (4e70 <sys_clock_driver_init+0x8c>)
    4e20:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    4e22:	2400      	movs	r4, #0
    4e24:	9401      	str	r4, [sp, #4]
    4e26:	4b13      	ldr	r3, [pc, #76]	; (4e74 <sys_clock_driver_init+0x90>)
    4e28:	9300      	str	r3, [sp, #0]
    4e2a:	4a13      	ldr	r2, [pc, #76]	; (4e78 <sys_clock_driver_init+0x94>)
    4e2c:	2300      	movs	r3, #0
    4e2e:	4620      	mov	r0, r4
    4e30:	f006 fbf7 	bl	b622 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    4e34:	4628      	mov	r0, r5
    4e36:	f7ff fac3 	bl	43c0 <z_nrf_clock_control_lf_on>

	return 0;
}
    4e3a:	4620      	mov	r0, r4
    4e3c:	b003      	add	sp, #12
    4e3e:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    4e40:	4a0e      	ldr	r2, [pc, #56]	; (4e7c <sys_clock_driver_init+0x98>)
    4e42:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    4e46:	f04f 30ff 	mov.w	r0, #4294967295
    4e4a:	f04f 31ff 	mov.w	r1, #4294967295
    4e4e:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4e52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4e56:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    4e58:	4902      	ldr	r1, [pc, #8]	; (4e64 <sys_clock_driver_init+0x80>)
    4e5a:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4e5e:	3301      	adds	r3, #1
    4e60:	e7c6      	b.n	4df0 <sys_clock_driver_init+0xc>
    4e62:	bf00      	nop
    4e64:	50015000 	.word	0x50015000
    4e68:	e000e100 	.word	0xe000e100
    4e6c:	50015008 	.word	0x50015008
    4e70:	2000185c 	.word	0x2000185c
    4e74:	00004c95 	.word	0x00004c95
    4e78:	007fffff 	.word	0x007fffff
    4e7c:	20000558 	.word	0x20000558

00004e80 <process_channel>:
{
    4e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4e84:	b082      	sub	sp, #8
    4e86:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    4e88:	f7ff fea2 	bl	4bd0 <channel_processing_check_and_clear>
    4e8c:	b910      	cbnz	r0, 4e94 <process_channel+0x14>
}
    4e8e:	b002      	add	sp, #8
    4e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    4e94:	f7ff ff38 	bl	4d08 <z_nrf_rtc_timer_read>
    4e98:	4606      	mov	r6, r0
    4e9a:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    4e9c:	f006 fb78 	bl	b590 <full_int_lock>
    4ea0:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    4ea2:	4b13      	ldr	r3, [pc, #76]	; (4ef0 <process_channel+0x70>)
    4ea4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    4ea8:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    4eac:	454f      	cmp	r7, r9
    4eae:	bf08      	it	eq
    4eb0:	4546      	cmpeq	r6, r8
    4eb2:	d20b      	bcs.n	4ecc <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    4eb4:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    4eb6:	4650      	mov	r0, sl
    4eb8:	f006 fb73 	bl	b5a2 <full_int_unlock>
		if (handler) {
    4ebc:	2e00      	cmp	r6, #0
    4ebe:	d0e6      	beq.n	4e8e <process_channel+0xe>
			handler(chan, expire_time, user_context);
    4ec0:	9500      	str	r5, [sp, #0]
    4ec2:	4642      	mov	r2, r8
    4ec4:	464b      	mov	r3, r9
    4ec6:	4620      	mov	r0, r4
    4ec8:	47b0      	blx	r6
}
    4eca:	e7e0      	b.n	4e8e <process_channel+0xe>
			handler = cc_data[chan].callback;
    4ecc:	4a08      	ldr	r2, [pc, #32]	; (4ef0 <process_channel+0x70>)
    4ece:	0123      	lsls	r3, r4, #4
    4ed0:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    4ed4:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    4ed6:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    4ed8:	2000      	movs	r0, #0
    4eda:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4edc:	f04f 32ff 	mov.w	r2, #4294967295
    4ee0:	f04f 33ff 	mov.w	r3, #4294967295
    4ee4:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    4ee8:	4620      	mov	r0, r4
    4eea:	f7ff fe3f 	bl	4b6c <event_disable>
    4eee:	e7e2      	b.n	4eb6 <process_channel+0x36>
    4ef0:	20000558 	.word	0x20000558

00004ef4 <rtc_nrf_isr>:
{
    4ef4:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    4ef6:	4b0d      	ldr	r3, [pc, #52]	; (4f2c <rtc_nrf_isr+0x38>)
    4ef8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4efc:	f013 0f02 	tst.w	r3, #2
    4f00:	d00a      	beq.n	4f18 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4f02:	4b0b      	ldr	r3, [pc, #44]	; (4f30 <rtc_nrf_isr+0x3c>)
    4f04:	681b      	ldr	r3, [r3, #0]
    4f06:	b13b      	cbz	r3, 4f18 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4f08:	4b09      	ldr	r3, [pc, #36]	; (4f30 <rtc_nrf_isr+0x3c>)
    4f0a:	2200      	movs	r2, #0
    4f0c:	601a      	str	r2, [r3, #0]
    4f0e:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
    4f10:	4a08      	ldr	r2, [pc, #32]	; (4f34 <rtc_nrf_isr+0x40>)
    4f12:	6813      	ldr	r3, [r2, #0]
    4f14:	3301      	adds	r3, #1
    4f16:	6013      	str	r3, [r2, #0]
{
    4f18:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4f1a:	2c00      	cmp	r4, #0
    4f1c:	dd00      	ble.n	4f20 <rtc_nrf_isr+0x2c>
}
    4f1e:	bd10      	pop	{r4, pc}
		process_channel(chan);
    4f20:	4620      	mov	r0, r4
    4f22:	f7ff ffad 	bl	4e80 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4f26:	3401      	adds	r4, #1
    4f28:	e7f7      	b.n	4f1a <rtc_nrf_isr+0x26>
    4f2a:	bf00      	nop
    4f2c:	50015000 	.word	0x50015000
    4f30:	50015104 	.word	0x50015104
    4f34:	20001860 	.word	0x20001860

00004f38 <sys_clock_set_timeout>:
{
    4f38:	b510      	push	{r4, lr}
    4f3a:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4f3c:	f1b0 3fff 	cmp.w	r0, #4294967295
    4f40:	d007      	beq.n	4f52 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4f42:	1e44      	subs	r4, r0, #1
    4f44:	2c00      	cmp	r4, #0
    4f46:	dd07      	ble.n	4f58 <sys_clock_set_timeout+0x20>
    4f48:	4b11      	ldr	r3, [pc, #68]	; (4f90 <sys_clock_set_timeout+0x58>)
    4f4a:	429c      	cmp	r4, r3
    4f4c:	dd05      	ble.n	4f5a <sys_clock_set_timeout+0x22>
    4f4e:	4c11      	ldr	r4, [pc, #68]	; (4f94 <sys_clock_set_timeout+0x5c>)
    4f50:	e003      	b.n	4f5a <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4f52:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    4f56:	e7f4      	b.n	4f42 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4f58:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4f5a:	f7ff fed5 	bl	4d08 <z_nrf_rtc_timer_read>
    4f5e:	4b0e      	ldr	r3, [pc, #56]	; (4f98 <sys_clock_set_timeout+0x60>)
    4f60:	e9d3 2300 	ldrd	r2, r3, [r3]
    4f64:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    4f66:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4f6a:	d300      	bcc.n	4f6e <sys_clock_set_timeout+0x36>
		ticks = 0;
    4f6c:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4f6e:	4404      	add	r4, r0
    4f70:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
    4f72:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    4f76:	d300      	bcc.n	4f7a <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    4f78:	4c06      	ldr	r4, [pc, #24]	; (4f94 <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4f7a:	2000      	movs	r0, #0
    4f7c:	9001      	str	r0, [sp, #4]
    4f7e:	4907      	ldr	r1, [pc, #28]	; (4f9c <sys_clock_set_timeout+0x64>)
    4f80:	9100      	str	r1, [sp, #0]
    4f82:	1912      	adds	r2, r2, r4
    4f84:	f143 0300 	adc.w	r3, r3, #0
    4f88:	f006 fb4b 	bl	b622 <compare_set>
}
    4f8c:	b002      	add	sp, #8
    4f8e:	bd10      	pop	{r4, pc}
    4f90:	007ffffe 	.word	0x007ffffe
    4f94:	007fffff 	.word	0x007fffff
    4f98:	20000568 	.word	0x20000568
    4f9c:	00004c95 	.word	0x00004c95

00004fa0 <sys_clock_elapsed>:
{
    4fa0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4fa2:	f7ff feb1 	bl	4d08 <z_nrf_rtc_timer_read>
    4fa6:	4b02      	ldr	r3, [pc, #8]	; (4fb0 <sys_clock_elapsed+0x10>)
    4fa8:	681b      	ldr	r3, [r3, #0]
}
    4faa:	1ac0      	subs	r0, r0, r3
    4fac:	bd08      	pop	{r3, pc}
    4fae:	bf00      	nop
    4fb0:	20000568 	.word	0x20000568

00004fb4 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    4fb4:	4b08      	ldr	r3, [pc, #32]	; (4fd8 <nrf53_errata_42+0x24>)
    4fb6:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4fb8:	3304      	adds	r3, #4
    4fba:	681b      	ldr	r3, [r3, #0]
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    4fbc:	2a07      	cmp	r2, #7
    4fbe:	d001      	beq.n	4fc4 <nrf53_errata_42+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    4fc0:	2000      	movs	r0, #0
    4fc2:	4770      	bx	lr
                    switch(var2)
    4fc4:	3b02      	subs	r3, #2
    4fc6:	2b00      	cmp	r3, #0
    4fc8:	d804      	bhi.n	4fd4 <nrf53_errata_42+0x20>
    4fca:	e8df f003 	tbb	[pc, r3]
    4fce:	01          	.byte	0x01
    4fcf:	00          	.byte	0x00
                if (var1 == 0x07)
    4fd0:	2001      	movs	r0, #1
    4fd2:	4770      	bx	lr
                            return false;
    4fd4:	2000      	movs	r0, #0
    #endif
}
    4fd6:	4770      	bx	lr
    4fd8:	00ff0130 	.word	0x00ff0130

00004fdc <nrf53_errata_46>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    4fdc:	4b0a      	ldr	r3, [pc, #40]	; (5008 <nrf53_errata_46+0x2c>)
    4fde:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4fe0:	3304      	adds	r3, #4
    4fe2:	681b      	ldr	r3, [r3, #0]
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    4fe4:	2a07      	cmp	r2, #7
    4fe6:	d001      	beq.n	4fec <nrf53_errata_46+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    4fe8:	2000      	movs	r0, #0
    4fea:	4770      	bx	lr
                    switch(var2)
    4fec:	2b04      	cmp	r3, #4
    4fee:	d007      	beq.n	5000 <nrf53_errata_46+0x24>
    4ff0:	d808      	bhi.n	5004 <nrf53_errata_46+0x28>
    4ff2:	3b02      	subs	r3, #2
    4ff4:	2b01      	cmp	r3, #1
    4ff6:	d801      	bhi.n	4ffc <nrf53_errata_46+0x20>
    4ff8:	2001      	movs	r0, #1
    #endif
}
    4ffa:	4770      	bx	lr
                            return false;
    4ffc:	2000      	movs	r0, #0
    4ffe:	4770      	bx	lr
                            return false;
    5000:	2000      	movs	r0, #0
    5002:	4770      	bx	lr
                            return false;
    5004:	2000      	movs	r0, #0
    5006:	4770      	bx	lr
    5008:	00ff0130 	.word	0x00ff0130

0000500c <nrf53_errata_49>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    500c:	4b08      	ldr	r3, [pc, #32]	; (5030 <nrf53_errata_49+0x24>)
    500e:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5010:	3304      	adds	r3, #4
    5012:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    5014:	2a07      	cmp	r2, #7
    5016:	d001      	beq.n	501c <nrf53_errata_49+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5018:	2000      	movs	r0, #0
    501a:	4770      	bx	lr
                    switch(var2)
    501c:	3b02      	subs	r3, #2
    501e:	2b00      	cmp	r3, #0
    5020:	d804      	bhi.n	502c <nrf53_errata_49+0x20>
    5022:	e8df f003 	tbb	[pc, r3]
    5026:	01          	.byte	0x01
    5027:	00          	.byte	0x00
                if (var1 == 0x07)
    5028:	2001      	movs	r0, #1
    502a:	4770      	bx	lr
                            return false;
    502c:	2000      	movs	r0, #0
    #endif
}
    502e:	4770      	bx	lr
    5030:	00ff0130 	.word	0x00ff0130

00005034 <nrf53_errata_55>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5034:	4b04      	ldr	r3, [pc, #16]	; (5048 <nrf53_errata_55+0x14>)
    5036:	681b      	ldr	r3, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5038:	4a04      	ldr	r2, [pc, #16]	; (504c <nrf53_errata_55+0x18>)
    503a:	6812      	ldr	r2, [r2, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    503c:	2b07      	cmp	r3, #7
    503e:	d001      	beq.n	5044 <nrf53_errata_55+0x10>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    5040:	2000      	movs	r0, #0
    5042:	4770      	bx	lr
                            return true;
    5044:	2001      	movs	r0, #1
    #endif
}
    5046:	4770      	bx	lr
    5048:	00ff0130 	.word	0x00ff0130
    504c:	00ff0134 	.word	0x00ff0134

00005050 <nrf53_errata_64>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5050:	4b08      	ldr	r3, [pc, #32]	; (5074 <nrf53_errata_64+0x24>)
    5052:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5054:	3304      	adds	r3, #4
    5056:	681b      	ldr	r3, [r3, #0]
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5058:	2a07      	cmp	r2, #7
    505a:	d001      	beq.n	5060 <nrf53_errata_64+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    505c:	2000      	movs	r0, #0
    505e:	4770      	bx	lr
                    switch(var2)
    5060:	3b02      	subs	r3, #2
    5062:	2b00      	cmp	r3, #0
    5064:	d804      	bhi.n	5070 <nrf53_errata_64+0x20>
    5066:	e8df f003 	tbb	[pc, r3]
    506a:	01          	.byte	0x01
    506b:	00          	.byte	0x00
                if (var1 == 0x07)
    506c:	2001      	movs	r0, #1
    506e:	4770      	bx	lr
                            return false;
    5070:	2000      	movs	r0, #0
    #endif
}
    5072:	4770      	bx	lr
    5074:	00ff0130 	.word	0x00ff0130

00005078 <nrf53_errata_69>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5078:	4b08      	ldr	r3, [pc, #32]	; (509c <nrf53_errata_69+0x24>)
    507a:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    507c:	3304      	adds	r3, #4
    507e:	681b      	ldr	r3, [r3, #0]
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5080:	2a07      	cmp	r2, #7
    5082:	d001      	beq.n	5088 <nrf53_errata_69+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5084:	2000      	movs	r0, #0
    5086:	4770      	bx	lr
                    switch(var2)
    5088:	3b02      	subs	r3, #2
    508a:	2b00      	cmp	r3, #0
    508c:	d804      	bhi.n	5098 <nrf53_errata_69+0x20>
    508e:	e8df f003 	tbb	[pc, r3]
    5092:	01          	.byte	0x01
    5093:	00          	.byte	0x00
                if (var1 == 0x07)
    5094:	2001      	movs	r0, #1
    5096:	4770      	bx	lr
                            return false;
    5098:	2000      	movs	r0, #0
    #endif
}
    509a:	4770      	bx	lr
    509c:	00ff0130 	.word	0x00ff0130

000050a0 <nrf53_errata_97>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    50a0:	4b08      	ldr	r3, [pc, #32]	; (50c4 <nrf53_errata_97+0x24>)
    50a2:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    50a4:	3304      	adds	r3, #4
    50a6:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    50a8:	2a07      	cmp	r2, #7
    50aa:	d001      	beq.n	50b0 <nrf53_errata_97+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    50ac:	2000      	movs	r0, #0
    50ae:	4770      	bx	lr
                    switch(var2)
    50b0:	3b02      	subs	r3, #2
    50b2:	2b00      	cmp	r3, #0
    50b4:	d804      	bhi.n	50c0 <nrf53_errata_97+0x20>
    50b6:	e8df f003 	tbb	[pc, r3]
    50ba:	01          	.byte	0x01
    50bb:	00          	.byte	0x00
                if (var1 == 0x07)
    50bc:	2001      	movs	r0, #1
    50be:	4770      	bx	lr
                            return false;
    50c0:	2000      	movs	r0, #0
    #endif
}
    50c2:	4770      	bx	lr
    50c4:	00ff0130 	.word	0x00ff0130

000050c8 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    50c8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    50cc:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    50d0:	f002 0203 	and.w	r2, r2, #3
    50d4:	4b02      	ldr	r3, [pc, #8]	; (50e0 <SystemCoreClockUpdate+0x18>)
    50d6:	40d3      	lsrs	r3, r2
    50d8:	4a02      	ldr	r2, [pc, #8]	; (50e4 <SystemCoreClockUpdate+0x1c>)
    50da:	6013      	str	r3, [r2, #0]
#endif
}
    50dc:	4770      	bx	lr
    50de:	bf00      	nop
    50e0:	07a12000 	.word	0x07a12000
    50e4:	2000012c 	.word	0x2000012c

000050e8 <SystemInit>:

void SystemInit(void)
{
    50e8:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    50ea:	f7ff ffd9 	bl	50a0 <nrf53_errata_97>
    50ee:	b158      	cbz	r0, 5108 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    50f0:	4b3b      	ldr	r3, [pc, #236]	; (51e0 <SystemInit+0xf8>)
    50f2:	681b      	ldr	r3, [r3, #0]
    50f4:	b943      	cbnz	r3, 5108 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    50f6:	4b3a      	ldr	r3, [pc, #232]	; (51e0 <SystemInit+0xf8>)
    50f8:	220d      	movs	r2, #13
    50fa:	601a      	str	r2, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    50fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    5100:	2201      	movs	r2, #1
    5102:	601a      	str	r2, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    5104:	2200      	movs	r2, #0
    5106:	601a      	str	r2, [r3, #0]
{
    5108:	2200      	movs	r2, #0
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    510a:	2a1f      	cmp	r2, #31
    510c:	d815      	bhi.n	513a <SystemInit+0x52>
    510e:	f102 0360 	add.w	r3, r2, #96	; 0x60
    5112:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    5116:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    511a:	f1b3 3fff 	cmp.w	r3, #4294967295
    511e:	d00c      	beq.n	513a <SystemInit+0x52>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    5120:	f102 0360 	add.w	r3, r2, #96	; 0x60
    5124:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    5128:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    512c:	00db      	lsls	r3, r3, #3
    512e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    5132:	685b      	ldr	r3, [r3, #4]
    5134:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    5136:	3201      	adds	r2, #1
    5138:	e7e7      	b.n	510a <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    513a:	f7ff ff89 	bl	5050 <nrf53_errata_64>
    513e:	b128      	cbz	r0, 514c <SystemInit+0x64>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    5140:	4b28      	ldr	r3, [pc, #160]	; (51e4 <SystemInit+0xfc>)
    5142:	2229      	movs	r2, #41	; 0x29
    5144:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    5146:	3330      	adds	r3, #48	; 0x30
    5148:	2203      	movs	r2, #3
    514a:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    514c:	f7ff ff32 	bl	4fb4 <nrf53_errata_42>
    5150:	b138      	cbz	r0, 5162 <SystemInit+0x7a>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    5152:	4b25      	ldr	r3, [pc, #148]	; (51e8 <SystemInit+0x100>)
    5154:	4a25      	ldr	r2, [pc, #148]	; (51ec <SystemInit+0x104>)
    5156:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    5158:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    515c:	2201      	movs	r2, #1
    515e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    5162:	f7ff ff3b 	bl	4fdc <nrf53_errata_46>
    5166:	b110      	cbz	r0, 516e <SystemInit+0x86>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    5168:	4b21      	ldr	r3, [pc, #132]	; (51f0 <SystemInit+0x108>)
    516a:	2200      	movs	r2, #0
    516c:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    516e:	f7ff ff4d 	bl	500c <nrf53_errata_49>
    5172:	b168      	cbz	r0, 5190 <SystemInit+0xa8>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    5174:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5178:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    517c:	f013 0f01 	tst.w	r3, #1
    5180:	d006      	beq.n	5190 <SystemInit+0xa8>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    5182:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5186:	2200      	movs	r2, #0
    5188:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    518c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
    5190:	f7ff ff50 	bl	5034 <nrf53_errata_55>
    5194:	b160      	cbz	r0, 51b0 <SystemInit+0xc8>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    5196:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    519a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    519e:	f013 0f01 	tst.w	r3, #1
    51a2:	d005      	beq.n	51b0 <SystemInit+0xc8>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    51a4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    51a8:	f06f 0201 	mvn.w	r2, #1
    51ac:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    51b0:	f7ff ff62 	bl	5078 <nrf53_errata_69>
    51b4:	b110      	cbz	r0, 51bc <SystemInit+0xd4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    51b6:	4b0b      	ldr	r3, [pc, #44]	; (51e4 <SystemInit+0xfc>)
    51b8:	2265      	movs	r2, #101	; 0x65
    51ba:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    51bc:	4a0d      	ldr	r2, [pc, #52]	; (51f4 <SystemInit+0x10c>)
    51be:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    51c2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    51c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    51ca:	4a0b      	ldr	r2, [pc, #44]	; (51f8 <SystemInit+0x110>)
    51cc:	6811      	ldr	r1, [r2, #0]
    51ce:	4b0b      	ldr	r3, [pc, #44]	; (51fc <SystemInit+0x114>)
    51d0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    51d4:	69d2      	ldr	r2, [r2, #28]
    51d6:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
    51da:	f7ff ff75 	bl	50c8 <SystemCoreClockUpdate>
}
    51de:	bd08      	pop	{r3, pc}
    51e0:	50004a20 	.word	0x50004a20
    51e4:	5000470c 	.word	0x5000470c
    51e8:	50039530 	.word	0x50039530
    51ec:	beef0044 	.word	0xbeef0044
    51f0:	5003254c 	.word	0x5003254c
    51f4:	e000ed00 	.word	0xe000ed00
    51f8:	00ff8000 	.word	0x00ff8000
    51fc:	50006000 	.word	0x50006000

00005200 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    5200:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    5202:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    5204:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
    5208:	f1d3 031f 	rsbs	r3, r3, #31
    520c:	d411      	bmi.n	5232 <nrfx_flag32_alloc+0x32>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    520e:	2201      	movs	r2, #1
    5210:	409a      	lsls	r2, r3
    5212:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5216:	e8d0 5fef 	ldaex	r5, [r0]
    521a:	42a5      	cmp	r5, r4
    521c:	d104      	bne.n	5228 <nrfx_flag32_alloc+0x28>
    521e:	e8c0 2fec 	stlex	ip, r2, [r0]
    5222:	f1bc 0f00 	cmp.w	ip, #0
    5226:	d1f6      	bne.n	5216 <nrfx_flag32_alloc+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5228:	d1eb      	bne.n	5202 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    522a:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
    522c:	4802      	ldr	r0, [pc, #8]	; (5238 <nrfx_flag32_alloc+0x38>)
}
    522e:	bc30      	pop	{r4, r5}
    5230:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
    5232:	4802      	ldr	r0, [pc, #8]	; (523c <nrfx_flag32_alloc+0x3c>)
    5234:	e7fb      	b.n	522e <nrfx_flag32_alloc+0x2e>
    5236:	bf00      	nop
    5238:	0bad0000 	.word	0x0bad0000
    523c:	0bad0002 	.word	0x0bad0002

00005240 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    5240:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    5242:	6803      	ldr	r3, [r0, #0]
    5244:	460c      	mov	r4, r1
    5246:	fa23 f101 	lsr.w	r1, r3, r1
    524a:	f011 0f01 	tst.w	r1, #1
    524e:	d110      	bne.n	5272 <nrfx_flag32_free+0x32>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    5250:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    5252:	2301      	movs	r3, #1
    5254:	40a3      	lsls	r3, r4
    5256:	4313      	orrs	r3, r2
    5258:	e8d0 1fef 	ldaex	r1, [r0]
    525c:	4291      	cmp	r1, r2
    525e:	d104      	bne.n	526a <nrfx_flag32_free+0x2a>
    5260:	e8c0 3fec 	stlex	ip, r3, [r0]
    5264:	f1bc 0f00 	cmp.w	ip, #0
    5268:	d1f6      	bne.n	5258 <nrfx_flag32_free+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    526a:	d1f1      	bne.n	5250 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    526c:	4802      	ldr	r0, [pc, #8]	; (5278 <nrfx_flag32_free+0x38>)
}
    526e:	bc10      	pop	{r4}
    5270:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
    5272:	4802      	ldr	r0, [pc, #8]	; (527c <nrfx_flag32_free+0x3c>)
    5274:	e7fb      	b.n	526e <nrfx_flag32_free+0x2e>
    5276:	bf00      	nop
    5278:	0bad0000 	.word	0x0bad0000
    527c:	0bad0004 	.word	0x0bad0004

00005280 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    5280:	4b05      	ldr	r3, [pc, #20]	; (5298 <nrfx_clock_init+0x18>)
    5282:	791b      	ldrb	r3, [r3, #4]
    5284:	b92b      	cbnz	r3, 5292 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    5286:	4b04      	ldr	r3, [pc, #16]	; (5298 <nrfx_clock_init+0x18>)
    5288:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    528a:	2201      	movs	r2, #1
    528c:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    528e:	4803      	ldr	r0, [pc, #12]	; (529c <nrfx_clock_init+0x1c>)
    5290:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    5292:	4803      	ldr	r0, [pc, #12]	; (52a0 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5294:	4770      	bx	lr
    5296:	bf00      	nop
    5298:	20001864 	.word	0x20001864
    529c:	0bad0000 	.word	0x0bad0000
    52a0:	0bad000c 	.word	0x0bad000c

000052a4 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    52a4:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    52a6:	2005      	movs	r0, #5
    52a8:	f7fd fac4 	bl	2834 <arch_irq_is_enabled>
    52ac:	b148      	cbz	r0, 52c2 <nrfx_clock_enable+0x1e>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    52ae:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    52b2:	2301      	movs	r3, #1
    52b4:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    52b8:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    52bc:	4a03      	ldr	r2, [pc, #12]	; (52cc <nrfx_clock_enable+0x28>)
    52be:	7013      	strb	r3, [r2, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    52c0:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    52c2:	2005      	movs	r0, #5
    52c4:	f7fd fa92 	bl	27ec <arch_irq_enable>
    52c8:	e7f1      	b.n	52ae <nrfx_clock_enable+0xa>
    52ca:	bf00      	nop
    52cc:	20001b19 	.word	0x20001b19

000052d0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    52d0:	2803      	cmp	r0, #3
    52d2:	d84e      	bhi.n	5372 <nrfx_clock_start+0xa2>
    52d4:	e8df f000 	tbb	[pc, r0]
    52d8:	40322702 	.word	0x40322702
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    52dc:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    52e0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    52e4:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    52e8:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    52ec:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    52f0:	d111      	bne.n	5316 <nrfx_clock_start+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
    52f2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    52f6:	2201      	movs	r2, #1
    52f8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    52fc:	4b1d      	ldr	r3, [pc, #116]	; (5374 <nrfx_clock_start+0xa4>)
    52fe:	2200      	movs	r2, #0
    5300:	601a      	str	r2, [r3, #0]
    5302:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5304:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5308:	2202      	movs	r2, #2
    530a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    530e:	3308      	adds	r3, #8
    5310:	2201      	movs	r2, #1
    5312:	601a      	str	r2, [r3, #0]
}
    5314:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    5316:	2b02      	cmp	r3, #2
    5318:	d1eb      	bne.n	52f2 <nrfx_clock_start+0x22>
    p_reg->LFCLKSRC = (uint32_t)(source);
    531a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    531e:	2202      	movs	r2, #2
    5320:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    5324:	e7ea      	b.n	52fc <nrfx_clock_start+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5326:	4b14      	ldr	r3, [pc, #80]	; (5378 <nrfx_clock_start+0xa8>)
    5328:	2200      	movs	r2, #0
    532a:	601a      	str	r2, [r3, #0]
    532c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    532e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5332:	2201      	movs	r2, #1
    5334:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5338:	601a      	str	r2, [r3, #0]
}
    533a:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    533c:	4b0f      	ldr	r3, [pc, #60]	; (537c <nrfx_clock_start+0xac>)
    533e:	2200      	movs	r2, #0
    5340:	601a      	str	r2, [r3, #0]
    5342:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5344:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5348:	f44f 7200 	mov.w	r2, #512	; 0x200
    534c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5350:	3320      	adds	r3, #32
    5352:	2201      	movs	r2, #1
    5354:	601a      	str	r2, [r3, #0]
}
    5356:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5358:	4b09      	ldr	r3, [pc, #36]	; (5380 <nrfx_clock_start+0xb0>)
    535a:	2200      	movs	r2, #0
    535c:	601a      	str	r2, [r3, #0]
    535e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5360:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5364:	f44f 7280 	mov.w	r2, #256	; 0x100
    5368:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    536c:	3318      	adds	r3, #24
    536e:	2201      	movs	r2, #1
    5370:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    5372:	4770      	bx	lr
    5374:	50005104 	.word	0x50005104
    5378:	50005100 	.word	0x50005100
    537c:	50005124 	.word	0x50005124
    5380:	50005120 	.word	0x50005120

00005384 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    5384:	b570      	push	{r4, r5, r6, lr}
    5386:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    5388:	2803      	cmp	r0, #3
    538a:	f200 80cd 	bhi.w	5528 <nrfx_clock_stop+0x1a4>
    538e:	e8df f000 	tbb	[pc, r0]
    5392:	1402      	.short	0x1402
    5394:	3021      	.short	0x3021
    p_reg->INTENCLR = mask;
    5396:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    539a:	2202      	movs	r2, #2
    539c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    53a0:	f503 7382 	add.w	r3, r3, #260	; 0x104
    53a4:	2200      	movs	r2, #0
    53a6:	601a      	str	r2, [r3, #0]
    53a8:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    53aa:	4b60      	ldr	r3, [pc, #384]	; (552c <nrfx_clock_stop+0x1a8>)
    53ac:	2201      	movs	r2, #1
    53ae:	601a      	str	r2, [r3, #0]
            NRFX_ASSERT(0);
            return;
    }

    bool stopped;
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    53b0:	2c01      	cmp	r4, #1
    53b2:	d02d      	beq.n	5410 <nrfx_clock_stop+0x8c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    53b4:	f242 7510 	movw	r5, #10000	; 0x2710
    53b8:	e0a1      	b.n	54fe <nrfx_clock_stop+0x17a>
    p_reg->INTENCLR = mask;
    53ba:	2301      	movs	r3, #1
    53bc:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    53c0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    53c4:	f502 7280 	add.w	r2, r2, #256	; 0x100
    53c8:	2100      	movs	r1, #0
    53ca:	6011      	str	r1, [r2, #0]
    53cc:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    53ce:	4a58      	ldr	r2, [pc, #352]	; (5530 <nrfx_clock_stop+0x1ac>)
    53d0:	6013      	str	r3, [r2, #0]
}
    53d2:	e7ed      	b.n	53b0 <nrfx_clock_stop+0x2c>
    p_reg->INTENCLR = mask;
    53d4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    53d8:	f44f 7200 	mov.w	r2, #512	; 0x200
    53dc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    53e0:	f503 7392 	add.w	r3, r3, #292	; 0x124
    53e4:	2200      	movs	r2, #0
    53e6:	601a      	str	r2, [r3, #0]
    53e8:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    53ea:	4b52      	ldr	r3, [pc, #328]	; (5534 <nrfx_clock_stop+0x1b0>)
    53ec:	2201      	movs	r2, #1
    53ee:	601a      	str	r2, [r3, #0]
}
    53f0:	e7de      	b.n	53b0 <nrfx_clock_stop+0x2c>
    p_reg->INTENCLR = mask;
    53f2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    53f6:	f44f 7280 	mov.w	r2, #256	; 0x100
    53fa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    53fe:	f503 7390 	add.w	r3, r3, #288	; 0x120
    5402:	2200      	movs	r2, #0
    5404:	601a      	str	r2, [r3, #0]
    5406:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5408:	4b4b      	ldr	r3, [pc, #300]	; (5538 <nrfx_clock_stop+0x1b4>)
    540a:	2201      	movs	r2, #1
    540c:	601a      	str	r2, [r3, #0]
}
    540e:	e7cf      	b.n	53b0 <nrfx_clock_stop+0x2c>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    5410:	4626      	mov	r6, r4
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    5412:	f242 7510 	movw	r5, #10000	; 0x2710
    5416:	e035      	b.n	5484 <nrfx_clock_stop+0x100>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5418:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    541c:	f8d3 6418 	ldr.w	r6, [r3, #1048]	; 0x418
    5420:	f006 0603 	and.w	r6, r6, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5424:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    5428:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    542c:	d13a      	bne.n	54a4 <nrfx_clock_stop+0x120>
    return false;
    542e:	2300      	movs	r3, #0
    5430:	e01f      	b.n	5472 <nrfx_clock_stop+0xee>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5432:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5436:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
    543a:	f006 0601 	and.w	r6, r6, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    543e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    5442:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5446:	d12f      	bne.n	54a8 <nrfx_clock_stop+0x124>
    return false;
    5448:	2300      	movs	r3, #0
    544a:	e012      	b.n	5472 <nrfx_clock_stop+0xee>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    544c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5450:	f8d3 645c 	ldr.w	r6, [r3, #1116]	; 0x45c
    5454:	f006 0601 	and.w	r6, r6, #1
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    5458:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
    545c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5460:	d124      	bne.n	54ac <nrfx_clock_stop+0x128>
    return false;
    5462:	2300      	movs	r3, #0
    5464:	e005      	b.n	5472 <nrfx_clock_stop+0xee>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    5466:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    546a:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
    546e:	f3c3 4300 	ubfx	r3, r3, #16, #1
    5472:	2b00      	cmp	r3, #0
    5474:	d058      	beq.n	5528 <nrfx_clock_stop+0x1a4>
    5476:	2e01      	cmp	r6, #1
    5478:	d156      	bne.n	5528 <nrfx_clock_stop+0x1a4>
    547a:	2001      	movs	r0, #1
    547c:	f006 f8ff 	bl	b67e <nrfx_busy_wait>
    5480:	3d01      	subs	r5, #1
    5482:	d051      	beq.n	5528 <nrfx_clock_stop+0x1a4>
    switch (domain)
    5484:	2c03      	cmp	r4, #3
    5486:	d80b      	bhi.n	54a0 <nrfx_clock_stop+0x11c>
    5488:	a301      	add	r3, pc, #4	; (adr r3, 5490 <nrfx_clock_stop+0x10c>)
    548a:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    548e:	bf00      	nop
    5490:	00005419 	.word	0x00005419
    5494:	00005433 	.word	0x00005433
    5498:	0000544d 	.word	0x0000544d
    549c:	00005467 	.word	0x00005467
    54a0:	2300      	movs	r3, #0
    54a2:	e7e6      	b.n	5472 <nrfx_clock_stop+0xee>
                return true;
    54a4:	2301      	movs	r3, #1
    54a6:	e7e4      	b.n	5472 <nrfx_clock_stop+0xee>
                return true;
    54a8:	2301      	movs	r3, #1
    54aa:	e7e2      	b.n	5472 <nrfx_clock_stop+0xee>
                return true;
    54ac:	2301      	movs	r3, #1
    54ae:	e7e0      	b.n	5472 <nrfx_clock_stop+0xee>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    54b0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    54b4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    54b8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    54bc:	d12e      	bne.n	551c <nrfx_clock_stop+0x198>
    return false;
    54be:	2300      	movs	r3, #0
    54c0:	e017      	b.n	54f2 <nrfx_clock_stop+0x16e>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    54c2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    54c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    54ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    54ce:	d127      	bne.n	5520 <nrfx_clock_stop+0x19c>
    return false;
    54d0:	2300      	movs	r3, #0
    54d2:	e00e      	b.n	54f2 <nrfx_clock_stop+0x16e>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    54d4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    54d8:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
    54dc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    54e0:	d120      	bne.n	5524 <nrfx_clock_stop+0x1a0>
    return false;
    54e2:	2300      	movs	r3, #0
    54e4:	e005      	b.n	54f2 <nrfx_clock_stop+0x16e>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    54e6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    54ea:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
    54ee:	f3c3 4300 	ubfx	r3, r3, #16, #1
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    54f2:	b1cb      	cbz	r3, 5528 <nrfx_clock_stop+0x1a4>
    54f4:	2001      	movs	r0, #1
    54f6:	f006 f8c2 	bl	b67e <nrfx_busy_wait>
    54fa:	3d01      	subs	r5, #1
    54fc:	d014      	beq.n	5528 <nrfx_clock_stop+0x1a4>
    switch (domain)
    54fe:	2c03      	cmp	r4, #3
    5500:	d80a      	bhi.n	5518 <nrfx_clock_stop+0x194>
    5502:	a301      	add	r3, pc, #4	; (adr r3, 5508 <nrfx_clock_stop+0x184>)
    5504:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    5508:	000054b1 	.word	0x000054b1
    550c:	000054c3 	.word	0x000054c3
    5510:	000054d5 	.word	0x000054d5
    5514:	000054e7 	.word	0x000054e7
    5518:	2300      	movs	r3, #0
    551a:	e7ea      	b.n	54f2 <nrfx_clock_stop+0x16e>
                return true;
    551c:	2301      	movs	r3, #1
    551e:	e7e8      	b.n	54f2 <nrfx_clock_stop+0x16e>
                return true;
    5520:	2301      	movs	r3, #1
    5522:	e7e6      	b.n	54f2 <nrfx_clock_stop+0x16e>
                return true;
    5524:	2301      	movs	r3, #1
    5526:	e7e4      	b.n	54f2 <nrfx_clock_stop+0x16e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    5528:	bd70      	pop	{r4, r5, r6, pc}
    552a:	bf00      	nop
    552c:	5000500c 	.word	0x5000500c
    5530:	50005004 	.word	0x50005004
    5534:	50005024 	.word	0x50005024
    5538:	5000501c 	.word	0x5000501c

0000553c <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    553c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    553e:	4b2a      	ldr	r3, [pc, #168]	; (55e8 <nrfx_clock_irq_handler+0xac>)
    5540:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    5542:	b15b      	cbz	r3, 555c <nrfx_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5544:	4b28      	ldr	r3, [pc, #160]	; (55e8 <nrfx_clock_irq_handler+0xac>)
    5546:	2000      	movs	r0, #0
    5548:	6018      	str	r0, [r3, #0]
    554a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    554c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5550:	2201      	movs	r2, #1
    5552:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    5556:	4b25      	ldr	r3, [pc, #148]	; (55ec <nrfx_clock_irq_handler+0xb0>)
    5558:	681b      	ldr	r3, [r3, #0]
    555a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    555c:	4b24      	ldr	r3, [pc, #144]	; (55f0 <nrfx_clock_irq_handler+0xb4>)
    555e:	681b      	ldr	r3, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    5560:	b1b3      	cbz	r3, 5590 <nrfx_clock_irq_handler+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5562:	4b23      	ldr	r3, [pc, #140]	; (55f0 <nrfx_clock_irq_handler+0xb4>)
    5564:	2200      	movs	r2, #0
    5566:	601a      	str	r2, [r3, #0]
    5568:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    556a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    556e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    5572:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5576:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    557a:	2b01      	cmp	r3, #1
    557c:	d02b      	beq.n	55d6 <nrfx_clock_irq_handler+0x9a>
    p_reg->INTENCLR = mask;
    557e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5582:	2202      	movs	r2, #2
    5584:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5588:	4b18      	ldr	r3, [pc, #96]	; (55ec <nrfx_clock_irq_handler+0xb0>)
    558a:	681b      	ldr	r3, [r3, #0]
    558c:	2001      	movs	r0, #1
    558e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5590:	4b18      	ldr	r3, [pc, #96]	; (55f4 <nrfx_clock_irq_handler+0xb8>)
    5592:	681b      	ldr	r3, [r3, #0]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    5594:	b16b      	cbz	r3, 55b2 <nrfx_clock_irq_handler+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5596:	4b17      	ldr	r3, [pc, #92]	; (55f4 <nrfx_clock_irq_handler+0xb8>)
    5598:	2200      	movs	r2, #0
    559a:	601a      	str	r2, [r3, #0]
    559c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    559e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    55a2:	f44f 7280 	mov.w	r2, #256	; 0x100
    55a6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    55aa:	4b10      	ldr	r3, [pc, #64]	; (55ec <nrfx_clock_irq_handler+0xb0>)
    55ac:	681b      	ldr	r3, [r3, #0]
    55ae:	2004      	movs	r0, #4
    55b0:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    55b2:	4b11      	ldr	r3, [pc, #68]	; (55f8 <nrfx_clock_irq_handler+0xbc>)
    55b4:	681b      	ldr	r3, [r3, #0]
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    55b6:	b16b      	cbz	r3, 55d4 <nrfx_clock_irq_handler+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    55b8:	4b0f      	ldr	r3, [pc, #60]	; (55f8 <nrfx_clock_irq_handler+0xbc>)
    55ba:	2200      	movs	r2, #0
    55bc:	601a      	str	r2, [r3, #0]
    55be:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    55c0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    55c4:	f44f 7200 	mov.w	r2, #512	; 0x200
    55c8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    55cc:	4b07      	ldr	r3, [pc, #28]	; (55ec <nrfx_clock_irq_handler+0xb0>)
    55ce:	681b      	ldr	r3, [r3, #0]
    55d0:	2005      	movs	r0, #5
    55d2:	4798      	blx	r3
    }
#endif
}
    55d4:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    55d6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    55da:	2202      	movs	r2, #2
    55dc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    55e0:	3308      	adds	r3, #8
    55e2:	2201      	movs	r2, #1
    55e4:	601a      	str	r2, [r3, #0]
}
    55e6:	e7d3      	b.n	5590 <nrfx_clock_irq_handler+0x54>
    55e8:	50005100 	.word	0x50005100
    55ec:	20001864 	.word	0x20001864
    55f0:	50005104 	.word	0x50005104
    55f4:	50005120 	.word	0x50005120
    55f8:	50005124 	.word	0x50005124

000055fc <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    55fc:	b508      	push	{r3, lr}
    55fe:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    5600:	4801      	ldr	r0, [pc, #4]	; (5608 <nrfx_dppi_channel_alloc+0xc>)
    5602:	f7ff fdfd 	bl	5200 <nrfx_flag32_alloc>
}
    5606:	bd08      	pop	{r3, pc}
    5608:	20000130 	.word	0x20000130

0000560c <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    560c:	3008      	adds	r0, #8
    560e:	4b03      	ldr	r3, [pc, #12]	; (561c <pin_in_use+0x10>)
    5610:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5614:	f000 0001 	and.w	r0, r0, #1
    5618:	4770      	bx	lr
    561a:	bf00      	nop
    561c:	20000134 	.word	0x20000134

00005620 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5620:	3008      	adds	r0, #8
    5622:	4b03      	ldr	r3, [pc, #12]	; (5630 <pin_in_use_by_te+0x10>)
    5624:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5628:	f3c0 1040 	ubfx	r0, r0, #5, #1
    562c:	4770      	bx	lr
    562e:	bf00      	nop
    5630:	20000134 	.word	0x20000134

00005634 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    5634:	3008      	adds	r0, #8
    5636:	4b04      	ldr	r3, [pc, #16]	; (5648 <pin_has_trigger+0x14>)
    5638:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    563c:	f010 001c 	ands.w	r0, r0, #28
    5640:	bf18      	it	ne
    5642:	2001      	movne	r0, #1
    5644:	4770      	bx	lr
    5646:	bf00      	nop
    5648:	20000134 	.word	0x20000134

0000564c <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    564c:	3008      	adds	r0, #8
    564e:	4b03      	ldr	r3, [pc, #12]	; (565c <pin_is_output+0x10>)
    5650:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5654:	f3c0 0040 	ubfx	r0, r0, #1, #1
    5658:	4770      	bx	lr
    565a:	bf00      	nop
    565c:	20000134 	.word	0x20000134

00005660 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5660:	3008      	adds	r0, #8
    5662:	4b02      	ldr	r3, [pc, #8]	; (566c <pin_te_get+0xc>)
    5664:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5668:	0b40      	lsrs	r0, r0, #13
    566a:	4770      	bx	lr
    566c:	20000134 	.word	0x20000134

00005670 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5670:	2200      	movs	r2, #0
    5672:	e004      	b.n	567e <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5674:	f04f 33ff 	mov.w	r3, #4294967295
    5678:	4283      	cmp	r3, r0
    567a:	d00f      	beq.n	569c <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    567c:	3201      	adds	r2, #1
    567e:	2a2f      	cmp	r2, #47	; 0x2f
    5680:	d80a      	bhi.n	5698 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5682:	f102 0308 	add.w	r3, r2, #8
    5686:	4906      	ldr	r1, [pc, #24]	; (56a0 <handler_in_use+0x30>)
    5688:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    568c:	f413 7f80 	tst.w	r3, #256	; 0x100
    5690:	d0f0      	beq.n	5674 <handler_in_use+0x4>
    5692:	f3c3 2343 	ubfx	r3, r3, #9, #4
    5696:	e7ef      	b.n	5678 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    5698:	2000      	movs	r0, #0
    569a:	4770      	bx	lr
            return true;
    569c:	2001      	movs	r0, #1
}
    569e:	4770      	bx	lr
    56a0:	20000134 	.word	0x20000134

000056a4 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    56a4:	2300      	movs	r3, #0
    56a6:	b113      	cbz	r3, 56ae <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    56a8:	f04f 30ff 	mov.w	r0, #4294967295
}
    56ac:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    56ae:	4a07      	ldr	r2, [pc, #28]	; (56cc <find_handler+0x28>)
    56b0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    56b4:	4282      	cmp	r2, r0
    56b6:	d001      	beq.n	56bc <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    56b8:	3301      	adds	r3, #1
    56ba:	e7f4      	b.n	56a6 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    56bc:	4a03      	ldr	r2, [pc, #12]	; (56cc <find_handler+0x28>)
    56be:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    56c2:	6852      	ldr	r2, [r2, #4]
    56c4:	428a      	cmp	r2, r1
    56c6:	d1f7      	bne.n	56b8 <find_handler+0x14>
            return i;
    56c8:	4618      	mov	r0, r3
    56ca:	4770      	bx	lr
    56cc:	20000134 	.word	0x20000134

000056d0 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    56d0:	3008      	adds	r0, #8
    56d2:	4b06      	ldr	r3, [pc, #24]	; (56ec <channel_handler_get+0x1c>)
    56d4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    56d8:	f410 7f80 	tst.w	r0, #256	; 0x100
    56dc:	d004      	beq.n	56e8 <channel_handler_get+0x18>
    56de:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    56e2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    56e6:	4770      	bx	lr
        return NULL;
    56e8:	2000      	movs	r0, #0
}
    56ea:	4770      	bx	lr
    56ec:	20000134 	.word	0x20000134

000056f0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    56f0:	b570      	push	{r4, r5, r6, lr}
    56f2:	4604      	mov	r4, r0
    56f4:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    56f6:	f7ff ffeb 	bl	56d0 <channel_handler_get>

    if (handler)
    56fa:	b120      	cbz	r0, 5706 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    56fc:	6806      	ldr	r6, [r0, #0]
    56fe:	6842      	ldr	r2, [r0, #4]
    5700:	4629      	mov	r1, r5
    5702:	4620      	mov	r0, r4
    5704:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    5706:	4b04      	ldr	r3, [pc, #16]	; (5718 <call_handler+0x28>)
    5708:	689b      	ldr	r3, [r3, #8]
    570a:	b123      	cbz	r3, 5716 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    570c:	4a02      	ldr	r2, [pc, #8]	; (5718 <call_handler+0x28>)
    570e:	68d2      	ldr	r2, [r2, #12]
    5710:	4629      	mov	r1, r5
    5712:	4620      	mov	r0, r4
    5714:	4798      	blx	r3
    }
}
    5716:	bd70      	pop	{r4, r5, r6, pc}
    5718:	20000134 	.word	0x20000134

0000571c <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    571c:	b570      	push	{r4, r5, r6, lr}
    571e:	4604      	mov	r4, r0
    5720:	460d      	mov	r5, r1
    5722:	4616      	mov	r6, r2
    if (is_level(trigger))
    5724:	4608      	mov	r0, r1
    5726:	f005 ffc6 	bl	b6b6 <is_level>
    572a:	b9c0      	cbnz	r0, 575e <next_sense_cond_call_handler+0x42>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    572c:	2e02      	cmp	r6, #2
    572e:	d03a      	beq.n	57a6 <next_sense_cond_call_handler+0x8a>
    5730:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
    5732:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    5736:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5738:	2901      	cmp	r1, #1
    573a:	d036      	beq.n	57aa <next_sense_cond_call_handler+0x8e>
        case 0: return NRF_P0;
    573c:	4921      	ldr	r1, [pc, #132]	; (57c4 <next_sense_cond_call_handler+0xa8>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    573e:	3280      	adds	r2, #128	; 0x80
    5740:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    5744:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5748:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    574c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        nrf_gpio_cfg_sense_set(pin, next_sense);

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5750:	2d03      	cmp	r5, #3
    5752:	d02e      	beq.n	57b2 <next_sense_cond_call_handler+0x96>
    5754:	2e02      	cmp	r6, #2
    5756:	d02a      	beq.n	57ae <next_sense_cond_call_handler+0x92>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5758:	2e03      	cmp	r6, #3
    575a:	d02f      	beq.n	57bc <next_sense_cond_call_handler+0xa0>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    575c:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    575e:	4629      	mov	r1, r5
    5760:	4620      	mov	r0, r4
    5762:	f7ff ffc5 	bl	56f0 <call_handler>
    *p_pin = pin_number & 0x1F;
    5766:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    576a:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    576c:	2c01      	cmp	r4, #1
    576e:	d018      	beq.n	57a2 <next_sense_cond_call_handler+0x86>
        case 0: return NRF_P0;
    5770:	4914      	ldr	r1, [pc, #80]	; (57c4 <next_sense_cond_call_handler+0xa8>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5772:	f103 0280 	add.w	r2, r3, #128	; 0x80
    5776:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    577a:	f3c2 4201 	ubfx	r2, r2, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    577e:	4296      	cmp	r6, r2
    5780:	d1ec      	bne.n	575c <next_sense_cond_call_handler+0x40>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5782:	3380      	adds	r3, #128	; 0x80
    5784:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    5788:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    578c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5790:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    5794:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5798:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    579c:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
}
    57a0:	e7dc      	b.n	575c <next_sense_cond_call_handler+0x40>
        case 1: return NRF_P1;
    57a2:	4909      	ldr	r1, [pc, #36]	; (57c8 <next_sense_cond_call_handler+0xac>)
    57a4:	e7e5      	b.n	5772 <next_sense_cond_call_handler+0x56>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    57a6:	2003      	movs	r0, #3
    57a8:	e7c3      	b.n	5732 <next_sense_cond_call_handler+0x16>
    57aa:	4907      	ldr	r1, [pc, #28]	; (57c8 <next_sense_cond_call_handler+0xac>)
    57ac:	e7c7      	b.n	573e <next_sense_cond_call_handler+0x22>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    57ae:	2d01      	cmp	r5, #1
    57b0:	d1d2      	bne.n	5758 <next_sense_cond_call_handler+0x3c>
            call_handler(pin, trigger);
    57b2:	4629      	mov	r1, r5
    57b4:	4620      	mov	r0, r4
    57b6:	f7ff ff9b 	bl	56f0 <call_handler>
}
    57ba:	e7cf      	b.n	575c <next_sense_cond_call_handler+0x40>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    57bc:	2d02      	cmp	r5, #2
    57be:	d1cd      	bne.n	575c <next_sense_cond_call_handler+0x40>
    57c0:	e7f7      	b.n	57b2 <next_sense_cond_call_handler+0x96>
    57c2:	bf00      	nop
    57c4:	50842500 	.word	0x50842500
    57c8:	50842800 	.word	0x50842800

000057cc <latch_pending_read_and_check>:

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
    57cc:	b410      	push	{r4}
    57ce:	b083      	sub	sp, #12
    57d0:	4604      	mov	r4, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    57d2:	4b11      	ldr	r3, [pc, #68]	; (5818 <latch_pending_read_and_check+0x4c>)
    57d4:	e893 0003 	ldmia.w	r3, {r0, r1}
    57d8:	ab02      	add	r3, sp, #8
    57da:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    57de:	4620      	mov	r0, r4
    57e0:	2300      	movs	r3, #0
    57e2:	e009      	b.n	57f8 <latch_pending_read_and_check+0x2c>
        *p_masks = gpio_regs[i]->LATCH;
    57e4:	aa02      	add	r2, sp, #8
    57e6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    57ea:	f852 2c08 	ldr.w	r2, [r2, #-8]
    57ee:	6a11      	ldr	r1, [r2, #32]
    57f0:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    57f4:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
    57f6:	3301      	adds	r3, #1
    57f8:	2b01      	cmp	r3, #1
    57fa:	d9f3      	bls.n	57e4 <latch_pending_read_and_check+0x18>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    57fc:	2300      	movs	r3, #0
    57fe:	2b01      	cmp	r3, #1
    5800:	d804      	bhi.n	580c <latch_pending_read_and_check+0x40>
    {
        if (latch[port_idx])
    5802:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    5806:	b92a      	cbnz	r2, 5814 <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    5808:	3301      	adds	r3, #1
    580a:	e7f8      	b.n	57fe <latch_pending_read_and_check+0x32>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
    580c:	2000      	movs	r0, #0
}
    580e:	b003      	add	sp, #12
    5810:	bc10      	pop	{r4}
    5812:	4770      	bx	lr
            return true;
    5814:	2001      	movs	r0, #1
    5816:	e7fa      	b.n	580e <latch_pending_read_and_check+0x42>
    5818:	0000c418 	.word	0x0000c418

0000581c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    581c:	f100 0208 	add.w	r2, r0, #8
    5820:	4b0e      	ldr	r3, [pc, #56]	; (585c <release_handler+0x40>)
    5822:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    5826:	f413 7f80 	tst.w	r3, #256	; 0x100
    582a:	d016      	beq.n	585a <release_handler+0x3e>
{
    582c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    582e:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    5832:	4610      	mov	r0, r2
    5834:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5838:	4a08      	ldr	r2, [pc, #32]	; (585c <release_handler+0x40>)
    583a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    583e:	4620      	mov	r0, r4
    5840:	f7ff ff16 	bl	5670 <handler_in_use>
    5844:	b100      	cbz	r0, 5848 <release_handler+0x2c>
}
    5846:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    5848:	4804      	ldr	r0, [pc, #16]	; (585c <release_handler+0x40>)
    584a:	2300      	movs	r3, #0
    584c:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    5850:	4621      	mov	r1, r4
    5852:	3074      	adds	r0, #116	; 0x74
    5854:	f7ff fcf4 	bl	5240 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    5858:	e7f5      	b.n	5846 <release_handler+0x2a>
    585a:	4770      	bx	lr
    585c:	20000134 	.word	0x20000134

00005860 <pin_handler_trigger_uninit>:
{
    5860:	b510      	push	{r4, lr}
    5862:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    5864:	f7ff fedc 	bl	5620 <pin_in_use_by_te>
    5868:	b150      	cbz	r0, 5880 <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    586a:	4620      	mov	r0, r4
    586c:	f7ff fef8 	bl	5660 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    5870:	4b08      	ldr	r3, [pc, #32]	; (5894 <pin_handler_trigger_uninit+0x34>)
    5872:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    5876:	2200      	movs	r2, #0
    5878:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    587c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    5880:	4620      	mov	r0, r4
    5882:	f7ff ffcb 	bl	581c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    5886:	3408      	adds	r4, #8
    5888:	4b03      	ldr	r3, [pc, #12]	; (5898 <pin_handler_trigger_uninit+0x38>)
    588a:	2200      	movs	r2, #0
    588c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    5890:	bd10      	pop	{r4, pc}
    5892:	bf00      	nop
    5894:	5000d000 	.word	0x5000d000
    5898:	20000134 	.word	0x20000134

0000589c <pin_handler_set>:
{
    589c:	b570      	push	{r4, r5, r6, lr}
    589e:	b082      	sub	sp, #8
    58a0:	4606      	mov	r6, r0
    58a2:	460c      	mov	r4, r1
    58a4:	4615      	mov	r5, r2
    release_handler(pin);
    58a6:	f7ff ffb9 	bl	581c <release_handler>
    if (!handler)
    58aa:	b324      	cbz	r4, 58f6 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    58ac:	4629      	mov	r1, r5
    58ae:	4620      	mov	r0, r4
    58b0:	f7ff fef8 	bl	56a4 <find_handler>
    if (handler_id < 0)
    58b4:	1e03      	subs	r3, r0, #0
    58b6:	db13      	blt.n	58e0 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    58b8:	4a10      	ldr	r2, [pc, #64]	; (58fc <pin_handler_set+0x60>)
    58ba:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    58be:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    58c2:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    58c4:	025b      	lsls	r3, r3, #9
    58c6:	b29b      	uxth	r3, r3
    58c8:	f106 0008 	add.w	r0, r6, #8
    58cc:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    58d0:	430b      	orrs	r3, r1
    58d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    58d6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    58da:	4809      	ldr	r0, [pc, #36]	; (5900 <pin_handler_set+0x64>)
}
    58dc:	b002      	add	sp, #8
    58de:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    58e0:	f10d 0107 	add.w	r1, sp, #7
    58e4:	4807      	ldr	r0, [pc, #28]	; (5904 <pin_handler_set+0x68>)
    58e6:	f7ff fc8b 	bl	5200 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    58ea:	4b05      	ldr	r3, [pc, #20]	; (5900 <pin_handler_set+0x64>)
    58ec:	4298      	cmp	r0, r3
    58ee:	d1f5      	bne.n	58dc <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    58f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    58f4:	e7e0      	b.n	58b8 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    58f6:	4802      	ldr	r0, [pc, #8]	; (5900 <pin_handler_set+0x64>)
    58f8:	e7f0      	b.n	58dc <pin_handler_set+0x40>
    58fa:	bf00      	nop
    58fc:	20000134 	.word	0x20000134
    5900:	0bad0000 	.word	0x0bad0000
    5904:	200001a8 	.word	0x200001a8

00005908 <port_event_handle>:

static void port_event_handle(void)
{
    5908:	b570      	push	{r4, r5, r6, lr}
    590a:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    590c:	4a2a      	ldr	r2, [pc, #168]	; (59b8 <port_event_handle+0xb0>)
    590e:	466b      	mov	r3, sp
    5910:	e892 0003 	ldmia.w	r2, {r0, r1}
    5914:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    5918:	2300      	movs	r3, #0
    591a:	a802      	add	r0, sp, #8
    591c:	e009      	b.n	5932 <port_event_handle+0x2a>
        *p_masks = gpio_regs[i]->LATCH;
    591e:	aa04      	add	r2, sp, #16
    5920:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    5924:	f852 2c10 	ldr.w	r2, [r2, #-16]
    5928:	6a11      	ldr	r1, [r2, #32]
    592a:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    592e:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
    5930:	3301      	adds	r3, #1
    5932:	2b01      	cmp	r3, #1
    5934:	d9f3      	bls.n	591e <port_event_handle+0x16>
    5936:	e03b      	b.n	59b0 <port_event_handle+0xa8>
        case 1: return NRF_P1;
    5938:	4e20      	ldr	r6, [pc, #128]	; (59bc <port_event_handle+0xb4>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    593a:	f105 0380 	add.w	r3, r5, #128	; 0x80
    593e:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    5942:	f3c2 4201 	ubfx	r2, r2, #16, #2
    5946:	f7ff fee9 	bl	571c <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    594a:	2301      	movs	r3, #1
    594c:	40ab      	lsls	r3, r5
    594e:	6233      	str	r3, [r6, #32]
            while (latch[i])
    5950:	ab04      	add	r3, sp, #16
    5952:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5956:	f853 0c08 	ldr.w	r0, [r3, #-8]
    595a:	b1f0      	cbz	r0, 599a <port_event_handle+0x92>
                uint32_t pin = NRF_CTZ(latch[i]);
    595c:	fa90 f0a0 	rbit	r0, r0
    5960:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    5964:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5968:	f100 0208 	add.w	r2, r0, #8
    596c:	4b14      	ldr	r3, [pc, #80]	; (59c0 <port_event_handle+0xb8>)
    596e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    5972:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    5976:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    5978:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    597c:	ae02      	add	r6, sp, #8
    597e:	2301      	movs	r3, #1
    5980:	fa03 f202 	lsl.w	r2, r3, r2
    5984:	5d73      	ldrb	r3, [r6, r5]
    5986:	ea23 0302 	bic.w	r3, r3, r2
    598a:	5573      	strb	r3, [r6, r5]
    *p_pin = pin_number & 0x1F;
    598c:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    5990:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5992:	2b01      	cmp	r3, #1
    5994:	d0d0      	beq.n	5938 <port_event_handle+0x30>
        case 0: return NRF_P0;
    5996:	4e0b      	ldr	r6, [pc, #44]	; (59c4 <port_event_handle+0xbc>)
    5998:	e7cf      	b.n	593a <port_event_handle+0x32>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    599a:	3401      	adds	r4, #1
    599c:	2c01      	cmp	r4, #1
    599e:	d9d7      	bls.n	5950 <port_event_handle+0x48>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    59a0:	4b09      	ldr	r3, [pc, #36]	; (59c8 <port_event_handle+0xc0>)
    59a2:	2200      	movs	r2, #0
    59a4:	601a      	str	r2, [r3, #0]
    59a6:	681b      	ldr	r3, [r3, #0]
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    59a8:	a802      	add	r0, sp, #8
    59aa:	f7ff ff0f 	bl	57cc <latch_pending_read_and_check>
    59ae:	b108      	cbz	r0, 59b4 <port_event_handle+0xac>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    59b0:	2400      	movs	r4, #0
    59b2:	e7f3      	b.n	599c <port_event_handle+0x94>
}
    59b4:	b004      	add	sp, #16
    59b6:	bd70      	pop	{r4, r5, r6, pc}
    59b8:	0000c418 	.word	0x0000c418
    59bc:	50842800 	.word	0x50842800
    59c0:	20000134 	.word	0x20000134
    59c4:	50842500 	.word	0x50842500
    59c8:	5000d17c 	.word	0x5000d17c

000059cc <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    59cc:	b538      	push	{r3, r4, r5, lr}
    59ce:	4604      	mov	r4, r0
    while (mask)
    59d0:	b1cc      	cbz	r4, 5a06 <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
    59d2:	fa94 f3a4 	rbit	r3, r4
    59d6:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    59da:	2201      	movs	r2, #1
    59dc:	409a      	lsls	r2, r3
    59de:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    59e2:	4a09      	ldr	r2, [pc, #36]	; (5a08 <gpiote_evt_handle+0x3c>)
    59e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    59e8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    59ec:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    59f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    59f4:	f3c0 4001 	ubfx	r0, r0, #16, #2
    59f8:	f005 fe5b 	bl	b6b2 <gpiote_polarity_to_trigger>
    59fc:	4601      	mov	r1, r0
    59fe:	4628      	mov	r0, r5
    5a00:	f7ff fe76 	bl	56f0 <call_handler>
    5a04:	e7e4      	b.n	59d0 <gpiote_evt_handle+0x4>
    }
}
    5a06:	bd38      	pop	{r3, r4, r5, pc}
    5a08:	5000d000 	.word	0x5000d000

00005a0c <nrfx_gpiote_input_configure>:
{
    5a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5a10:	4604      	mov	r4, r0
    5a12:	4615      	mov	r5, r2
    5a14:	461e      	mov	r6, r3
    if (p_input_config)
    5a16:	b351      	cbz	r1, 5a6e <nrfx_gpiote_input_configure+0x62>
    5a18:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    5a1a:	f005 fe34 	bl	b686 <pin_is_task_output>
    5a1e:	2800      	cmp	r0, #0
    5a20:	f040 8097 	bne.w	5b52 <nrfx_gpiote_input_configure+0x146>
    *p_pin = pin_number & 0x1F;
    5a24:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    5a28:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5a2a:	2b01      	cmp	r3, #1
    5a2c:	d040      	beq.n	5ab0 <nrfx_gpiote_input_configure+0xa4>
        case 0: return NRF_P0;
    5a2e:	484d      	ldr	r0, [pc, #308]	; (5b64 <nrfx_gpiote_input_configure+0x158>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5a30:	f102 0380 	add.w	r3, r2, #128	; 0x80
    5a34:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5a38:	2f00      	cmp	r7, #0
    5a3a:	d03b      	beq.n	5ab4 <nrfx_gpiote_input_configure+0xa8>
    5a3c:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5a3e:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
    5a42:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5a46:	2f00      	cmp	r7, #0
    5a48:	d036      	beq.n	5ab8 <nrfx_gpiote_input_configure+0xac>
    5a4a:	7839      	ldrb	r1, [r7, #0]
    5a4c:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5a4e:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    5a50:	3280      	adds	r2, #128	; 0x80
    5a52:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    5a56:	4a44      	ldr	r2, [pc, #272]	; (5b68 <nrfx_gpiote_input_configure+0x15c>)
    5a58:	f104 0108 	add.w	r1, r4, #8
    5a5c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5a60:	f023 0302 	bic.w	r3, r3, #2
    5a64:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5a66:	f043 0301 	orr.w	r3, r3, #1
    5a6a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    5a6e:	b1b5      	cbz	r5, 5a9e <nrfx_gpiote_input_configure+0x92>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    5a70:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    5a74:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
    5a78:	4620      	mov	r0, r4
    5a7a:	f7ff fde7 	bl	564c <pin_is_output>
    5a7e:	b1e8      	cbz	r0, 5abc <nrfx_gpiote_input_configure+0xb0>
            if (use_evt)
    5a80:	f1b9 0f00 	cmp.w	r9, #0
    5a84:	d167      	bne.n	5b56 <nrfx_gpiote_input_configure+0x14a>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    5a86:	4b38      	ldr	r3, [pc, #224]	; (5b68 <nrfx_gpiote_input_configure+0x15c>)
    5a88:	f104 0208 	add.w	r2, r4, #8
    5a8c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
    5a90:	f020 001c 	bic.w	r0, r0, #28
    5a94:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    5a96:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
    5a9a:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
    5a9e:	2e00      	cmp	r6, #0
    5aa0:	d05d      	beq.n	5b5e <nrfx_gpiote_input_configure+0x152>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    5aa2:	6872      	ldr	r2, [r6, #4]
    5aa4:	6831      	ldr	r1, [r6, #0]
    5aa6:	4620      	mov	r0, r4
    5aa8:	f7ff fef8 	bl	589c <pin_handler_set>
}
    5aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        case 1: return NRF_P1;
    5ab0:	482e      	ldr	r0, [pc, #184]	; (5b6c <nrfx_gpiote_input_configure+0x160>)
    5ab2:	e7bd      	b.n	5a30 <nrfx_gpiote_input_configure+0x24>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5ab4:	2100      	movs	r1, #0
    5ab6:	e7c2      	b.n	5a3e <nrfx_gpiote_input_configure+0x32>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5ab8:	2100      	movs	r1, #0
    5aba:	e7c8      	b.n	5a4e <nrfx_gpiote_input_configure+0x42>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    5abc:	4b2a      	ldr	r3, [pc, #168]	; (5b68 <nrfx_gpiote_input_configure+0x15c>)
    5abe:	f104 0208 	add.w	r2, r4, #8
    5ac2:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
    5ac6:	f027 0720 	bic.w	r7, r7, #32
    5aca:	04ff      	lsls	r7, r7, #19
    5acc:	0cff      	lsrs	r7, r7, #19
    5ace:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
    5ad2:	f1b9 0f00 	cmp.w	r9, #0
    5ad6:	d0d6      	beq.n	5a86 <nrfx_gpiote_input_configure+0x7a>
                if (!edge)
    5ad8:	f1b8 0f03 	cmp.w	r8, #3
    5adc:	d83d      	bhi.n	5b5a <nrfx_gpiote_input_configure+0x14e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    5ade:	686b      	ldr	r3, [r5, #4]
    5ae0:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    5ae2:	f1b8 0f00 	cmp.w	r8, #0
    5ae6:	d108      	bne.n	5afa <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
    5ae8:	4b21      	ldr	r3, [pc, #132]	; (5b70 <nrfx_gpiote_input_configure+0x164>)
    5aea:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    5aee:	2200      	movs	r2, #0
    5af0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
    5af4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
    5af8:	e7c5      	b.n	5a86 <nrfx_gpiote_input_configure+0x7a>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    5afa:	4640      	mov	r0, r8
    5afc:	f005 fdda 	bl	b6b4 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5b00:	4b1b      	ldr	r3, [pc, #108]	; (5b70 <nrfx_gpiote_input_configure+0x164>)
    5b02:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    5b06:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5b0a:	f021 0103 	bic.w	r1, r1, #3
    5b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5b12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5b16:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    5b1a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    5b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5b22:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    5b26:	0221      	lsls	r1, r4, #8
    5b28:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    5b2c:	0400      	lsls	r0, r0, #16
    5b2e:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5b32:	4301      	orrs	r1, r0
    5b34:	ea4c 0101 	orr.w	r1, ip, r1
    5b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5b3c:	036d      	lsls	r5, r5, #13
    5b3e:	b2ad      	uxth	r5, r5
    5b40:	f104 0308 	add.w	r3, r4, #8
    5b44:	432f      	orrs	r7, r5
    5b46:	f047 0720 	orr.w	r7, r7, #32
    5b4a:	4a07      	ldr	r2, [pc, #28]	; (5b68 <nrfx_gpiote_input_configure+0x15c>)
    5b4c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
    5b50:	e799      	b.n	5a86 <nrfx_gpiote_input_configure+0x7a>
            return NRFX_ERROR_INVALID_PARAM;
    5b52:	4808      	ldr	r0, [pc, #32]	; (5b74 <nrfx_gpiote_input_configure+0x168>)
    5b54:	e7aa      	b.n	5aac <nrfx_gpiote_input_configure+0xa0>
                return NRFX_ERROR_INVALID_PARAM;
    5b56:	4807      	ldr	r0, [pc, #28]	; (5b74 <nrfx_gpiote_input_configure+0x168>)
    5b58:	e7a8      	b.n	5aac <nrfx_gpiote_input_configure+0xa0>
                    return NRFX_ERROR_INVALID_PARAM;
    5b5a:	4806      	ldr	r0, [pc, #24]	; (5b74 <nrfx_gpiote_input_configure+0x168>)
    5b5c:	e7a6      	b.n	5aac <nrfx_gpiote_input_configure+0xa0>
        err = NRFX_SUCCESS;
    5b5e:	4806      	ldr	r0, [pc, #24]	; (5b78 <nrfx_gpiote_input_configure+0x16c>)
    5b60:	e7a4      	b.n	5aac <nrfx_gpiote_input_configure+0xa0>
    5b62:	bf00      	nop
    5b64:	50842500 	.word	0x50842500
    5b68:	20000134 	.word	0x20000134
    5b6c:	50842800 	.word	0x50842800
    5b70:	5000d000 	.word	0x5000d000
    5b74:	0bad0004 	.word	0x0bad0004
    5b78:	0bad0000 	.word	0x0bad0000

00005b7c <nrfx_gpiote_output_configure>:
{
    5b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b7e:	4604      	mov	r4, r0
    5b80:	4615      	mov	r5, r2
    if (p_config)
    5b82:	2900      	cmp	r1, #0
    5b84:	d050      	beq.n	5c28 <nrfx_gpiote_output_configure+0xac>
    5b86:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    5b88:	f005 fd8c 	bl	b6a4 <pin_is_input>
    5b8c:	b128      	cbz	r0, 5b9a <nrfx_gpiote_output_configure+0x1e>
    5b8e:	4620      	mov	r0, r4
    5b90:	f7ff fd46 	bl	5620 <pin_in_use_by_te>
    5b94:	2800      	cmp	r0, #0
    5b96:	f040 809d 	bne.w	5cd4 <nrfx_gpiote_output_configure+0x158>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    5b9a:	4620      	mov	r0, r4
    5b9c:	f7ff fd4a 	bl	5634 <pin_has_trigger>
    5ba0:	b118      	cbz	r0, 5baa <nrfx_gpiote_output_configure+0x2e>
    5ba2:	7873      	ldrb	r3, [r6, #1]
    5ba4:	2b01      	cmp	r3, #1
    5ba6:	f000 8097 	beq.w	5cd8 <nrfx_gpiote_output_configure+0x15c>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    5baa:	f106 0c01 	add.w	ip, r6, #1
    5bae:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
    5bb0:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    5bb4:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5bb6:	2b01      	cmp	r3, #1
    5bb8:	d07c      	beq.n	5cb4 <nrfx_gpiote_output_configure+0x138>
        case 0: return NRF_P0;
    5bba:	494b      	ldr	r1, [pc, #300]	; (5ce8 <nrfx_gpiote_output_configure+0x16c>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5bbc:	f102 0380 	add.w	r3, r2, #128	; 0x80
    5bc0:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5bc4:	f1bc 0f00 	cmp.w	ip, #0
    5bc8:	d076      	beq.n	5cb8 <nrfx_gpiote_output_configure+0x13c>
    5bca:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    5bcc:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5bd0:	2f00      	cmp	r7, #0
    5bd2:	d073      	beq.n	5cbc <nrfx_gpiote_output_configure+0x140>
    5bd4:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5bd8:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    5bdc:	2e00      	cmp	r6, #0
    5bde:	d070      	beq.n	5cc2 <nrfx_gpiote_output_configure+0x146>
    5be0:	f44f 6e70 	mov.w	lr, #3840	; 0xf00
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5be4:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
    5be8:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    5bec:	f1bc 0f00 	cmp.w	ip, #0
    5bf0:	d06a      	beq.n	5cc8 <nrfx_gpiote_output_configure+0x14c>
    5bf2:	7873      	ldrb	r3, [r6, #1]
    5bf4:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5bf6:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5bfa:	2f00      	cmp	r7, #0
    5bfc:	d066      	beq.n	5ccc <nrfx_gpiote_output_configure+0x150>
    5bfe:	78b7      	ldrb	r7, [r6, #2]
    5c00:	00bf      	lsls	r7, r7, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    5c02:	433b      	orrs	r3, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    5c04:	2e00      	cmp	r6, #0
    5c06:	d063      	beq.n	5cd0 <nrfx_gpiote_output_configure+0x154>
    5c08:	7836      	ldrb	r6, [r6, #0]
    5c0a:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5c0c:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5c0e:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    5c10:	3280      	adds	r2, #128	; 0x80
    5c12:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    5c16:	4a35      	ldr	r2, [pc, #212]	; (5cec <nrfx_gpiote_output_configure+0x170>)
    5c18:	f104 0108 	add.w	r1, r4, #8
    5c1c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5c20:	f043 0303 	orr.w	r3, r3, #3
    5c24:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    5c28:	2d00      	cmp	r5, #0
    5c2a:	d057      	beq.n	5cdc <nrfx_gpiote_output_configure+0x160>
        if (pin_is_input(pin))
    5c2c:	4620      	mov	r0, r4
    5c2e:	f005 fd39 	bl	b6a4 <pin_is_input>
    5c32:	2800      	cmp	r0, #0
    5c34:	d154      	bne.n	5ce0 <nrfx_gpiote_output_configure+0x164>
        uint32_t ch = p_task_config->task_ch;
    5c36:	782a      	ldrb	r2, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    5c38:	4b2d      	ldr	r3, [pc, #180]	; (5cf0 <nrfx_gpiote_output_configure+0x174>)
    5c3a:	f502 71a2 	add.w	r1, r2, #324	; 0x144
    5c3e:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    p_reg->CONFIG[idx] = 0;
    5c42:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    5c46:	4929      	ldr	r1, [pc, #164]	; (5cec <nrfx_gpiote_output_configure+0x170>)
    5c48:	f104 0008 	add.w	r0, r4, #8
    5c4c:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
    5c50:	f023 0320 	bic.w	r3, r3, #32
    5c54:	04db      	lsls	r3, r3, #19
    5c56:	0cdb      	lsrs	r3, r3, #19
    5c58:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    5c5c:	7869      	ldrb	r1, [r5, #1]
    5c5e:	2900      	cmp	r1, #0
    5c60:	d040      	beq.n	5ce4 <nrfx_gpiote_output_configure+0x168>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    5c62:	f895 c002 	ldrb.w	ip, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    5c66:	4d22      	ldr	r5, [pc, #136]	; (5cf0 <nrfx_gpiote_output_configure+0x174>)
    5c68:	f502 76a2 	add.w	r6, r2, #324	; 0x144
    5c6c:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
    5c70:	f420 1099 	bic.w	r0, r0, #1253376	; 0x132000
    5c74:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
    5c78:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c7c:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
    5c80:	0220      	lsls	r0, r4, #8
    5c82:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5c86:	0409      	lsls	r1, r1, #16
    5c88:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c8c:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5c8e:	ea4f 500c 	mov.w	r0, ip, lsl #20
    5c92:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5c96:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c98:	4339      	orrs	r1, r7
    5c9a:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5c9e:	0352      	lsls	r2, r2, #13
    5ca0:	b292      	uxth	r2, r2
    5ca2:	3408      	adds	r4, #8
    5ca4:	431a      	orrs	r2, r3
    5ca6:	f042 0220 	orr.w	r2, r2, #32
    5caa:	4b10      	ldr	r3, [pc, #64]	; (5cec <nrfx_gpiote_output_configure+0x170>)
    5cac:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
    5cb0:	4810      	ldr	r0, [pc, #64]	; (5cf4 <nrfx_gpiote_output_configure+0x178>)
    5cb2:	e014      	b.n	5cde <nrfx_gpiote_output_configure+0x162>
        case 1: return NRF_P1;
    5cb4:	4910      	ldr	r1, [pc, #64]	; (5cf8 <nrfx_gpiote_output_configure+0x17c>)
    5cb6:	e781      	b.n	5bbc <nrfx_gpiote_output_configure+0x40>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5cb8:	2300      	movs	r3, #0
    5cba:	e787      	b.n	5bcc <nrfx_gpiote_output_configure+0x50>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5cbc:	f04f 0e00 	mov.w	lr, #0
    5cc0:	e78a      	b.n	5bd8 <nrfx_gpiote_output_configure+0x5c>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    5cc2:	f04f 0e00 	mov.w	lr, #0
    5cc6:	e78d      	b.n	5be4 <nrfx_gpiote_output_configure+0x68>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    5cc8:	2300      	movs	r3, #0
    5cca:	e794      	b.n	5bf6 <nrfx_gpiote_output_configure+0x7a>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5ccc:	2700      	movs	r7, #0
    5cce:	e798      	b.n	5c02 <nrfx_gpiote_output_configure+0x86>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    5cd0:	2600      	movs	r6, #0
    5cd2:	e79b      	b.n	5c0c <nrfx_gpiote_output_configure+0x90>
    5cd4:	4809      	ldr	r0, [pc, #36]	; (5cfc <nrfx_gpiote_output_configure+0x180>)
    5cd6:	e002      	b.n	5cde <nrfx_gpiote_output_configure+0x162>
    5cd8:	4808      	ldr	r0, [pc, #32]	; (5cfc <nrfx_gpiote_output_configure+0x180>)
    5cda:	e000      	b.n	5cde <nrfx_gpiote_output_configure+0x162>
    5cdc:	4805      	ldr	r0, [pc, #20]	; (5cf4 <nrfx_gpiote_output_configure+0x178>)
}
    5cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NRFX_ERROR_INVALID_PARAM;
    5ce0:	4806      	ldr	r0, [pc, #24]	; (5cfc <nrfx_gpiote_output_configure+0x180>)
    5ce2:	e7fc      	b.n	5cde <nrfx_gpiote_output_configure+0x162>
    return NRFX_SUCCESS;
    5ce4:	4803      	ldr	r0, [pc, #12]	; (5cf4 <nrfx_gpiote_output_configure+0x178>)
    5ce6:	e7fa      	b.n	5cde <nrfx_gpiote_output_configure+0x162>
    5ce8:	50842500 	.word	0x50842500
    5cec:	20000134 	.word	0x20000134
    5cf0:	5000d000 	.word	0x5000d000
    5cf4:	0bad0000 	.word	0x0bad0000
    5cf8:	50842800 	.word	0x50842800
    5cfc:	0bad0004 	.word	0x0bad0004

00005d00 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    5d00:	4b01      	ldr	r3, [pc, #4]	; (5d08 <nrfx_gpiote_global_callback_set+0x8>)
    5d02:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    5d04:	60d9      	str	r1, [r3, #12]
}
    5d06:	4770      	bx	lr
    5d08:	20000134 	.word	0x20000134

00005d0c <nrfx_gpiote_channel_get>:
{
    5d0c:	b538      	push	{r3, r4, r5, lr}
    5d0e:	4604      	mov	r4, r0
    5d10:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    5d12:	f7ff fc85 	bl	5620 <pin_in_use_by_te>
    5d16:	b140      	cbz	r0, 5d2a <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5d18:	f104 0008 	add.w	r0, r4, #8
    5d1c:	4b04      	ldr	r3, [pc, #16]	; (5d30 <nrfx_gpiote_channel_get+0x24>)
    5d1e:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    5d22:	0b5b      	lsrs	r3, r3, #13
    5d24:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    5d26:	4803      	ldr	r0, [pc, #12]	; (5d34 <nrfx_gpiote_channel_get+0x28>)
}
    5d28:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5d2a:	4803      	ldr	r0, [pc, #12]	; (5d38 <nrfx_gpiote_channel_get+0x2c>)
    5d2c:	e7fc      	b.n	5d28 <nrfx_gpiote_channel_get+0x1c>
    5d2e:	bf00      	nop
    5d30:	20000134 	.word	0x20000134
    5d34:	0bad0000 	.word	0x0bad0000
    5d38:	0bad0004 	.word	0x0bad0004

00005d3c <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    5d3c:	4b0f      	ldr	r3, [pc, #60]	; (5d7c <nrfx_gpiote_init+0x40>)
    5d3e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5d42:	b10b      	cbz	r3, 5d48 <nrfx_gpiote_init+0xc>
        return err_code;
    5d44:	480e      	ldr	r0, [pc, #56]	; (5d80 <nrfx_gpiote_init+0x44>)
}
    5d46:	4770      	bx	lr
{
    5d48:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    5d4a:	4c0c      	ldr	r4, [pc, #48]	; (5d7c <nrfx_gpiote_init+0x40>)
    5d4c:	2260      	movs	r2, #96	; 0x60
    5d4e:	2100      	movs	r1, #0
    5d50:	f104 0010 	add.w	r0, r4, #16
    5d54:	f004 fefb 	bl	ab4e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    5d58:	200d      	movs	r0, #13
    5d5a:	f7fc fd47 	bl	27ec <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5d5e:	4b09      	ldr	r3, [pc, #36]	; (5d84 <nrfx_gpiote_init+0x48>)
    5d60:	2200      	movs	r2, #0
    5d62:	601a      	str	r2, [r3, #0]
    5d64:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5d66:	4b08      	ldr	r3, [pc, #32]	; (5d88 <nrfx_gpiote_init+0x4c>)
    5d68:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5d6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    5d70:	2301      	movs	r3, #1
    5d72:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    5d76:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    5d78:	4804      	ldr	r0, [pc, #16]	; (5d8c <nrfx_gpiote_init+0x50>)
}
    5d7a:	bd10      	pop	{r4, pc}
    5d7c:	20000134 	.word	0x20000134
    5d80:	0bad0005 	.word	0x0bad0005
    5d84:	5000d17c 	.word	0x5000d17c
    5d88:	5000d000 	.word	0x5000d000
    5d8c:	0bad0000 	.word	0x0bad0000

00005d90 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    5d90:	4b03      	ldr	r3, [pc, #12]	; (5da0 <nrfx_gpiote_is_init+0x10>)
    5d92:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    5d96:	3800      	subs	r0, #0
    5d98:	bf18      	it	ne
    5d9a:	2001      	movne	r0, #1
    5d9c:	4770      	bx	lr
    5d9e:	bf00      	nop
    5da0:	20000134 	.word	0x20000134

00005da4 <nrfx_gpiote_channel_free>:
{
    5da4:	b508      	push	{r3, lr}
    5da6:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    5da8:	4801      	ldr	r0, [pc, #4]	; (5db0 <nrfx_gpiote_channel_free+0xc>)
    5daa:	f7ff fa49 	bl	5240 <nrfx_flag32_free>
}
    5dae:	bd08      	pop	{r3, pc}
    5db0:	200001a4 	.word	0x200001a4

00005db4 <nrfx_gpiote_channel_alloc>:
{
    5db4:	b508      	push	{r3, lr}
    5db6:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    5db8:	4801      	ldr	r0, [pc, #4]	; (5dc0 <nrfx_gpiote_channel_alloc+0xc>)
    5dba:	f7ff fa21 	bl	5200 <nrfx_flag32_alloc>
}
    5dbe:	bd08      	pop	{r3, pc}
    5dc0:	200001a4 	.word	0x200001a4

00005dc4 <nrfx_gpiote_trigger_enable>:
{
    5dc4:	b538      	push	{r3, r4, r5, lr}
    5dc6:	4604      	mov	r4, r0
    5dc8:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5dca:	f7ff fc29 	bl	5620 <pin_in_use_by_te>
    5dce:	b308      	cbz	r0, 5e14 <nrfx_gpiote_trigger_enable+0x50>
    5dd0:	4620      	mov	r0, r4
    5dd2:	f005 fc67 	bl	b6a4 <pin_is_input>
    5dd6:	b1e8      	cbz	r0, 5e14 <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
    5dd8:	4620      	mov	r0, r4
    5dda:	f7ff fc41 	bl	5660 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    5dde:	0083      	lsls	r3, r0, #2
    5de0:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    5de4:	b29b      	uxth	r3, r3
    5de6:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    5dea:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5dee:	2200      	movs	r2, #0
    5df0:	601a      	str	r2, [r3, #0]
    5df2:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    5df4:	4a20      	ldr	r2, [pc, #128]	; (5e78 <nrfx_gpiote_trigger_enable+0xb4>)
    5df6:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    5dfa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    5dfe:	f043 0301 	orr.w	r3, r3, #1
    5e02:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    5e06:	b37d      	cbz	r5, 5e68 <nrfx_gpiote_trigger_enable+0xa4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    5e08:	2301      	movs	r3, #1
    5e0a:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
    5e0e:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
    5e12:	e029      	b.n	5e68 <nrfx_gpiote_trigger_enable+0xa4>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5e14:	f104 0308 	add.w	r3, r4, #8
    5e18:	4a18      	ldr	r2, [pc, #96]	; (5e7c <nrfx_gpiote_trigger_enable+0xb8>)
    5e1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    5e1e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    5e22:	2b04      	cmp	r3, #4
    5e24:	d010      	beq.n	5e48 <nrfx_gpiote_trigger_enable+0x84>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5e26:	2b05      	cmp	r3, #5
    5e28:	d01f      	beq.n	5e6a <nrfx_gpiote_trigger_enable+0xa6>
    *p_pin = pin_number & 0x1F;
    5e2a:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    5e2e:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5e30:	2b01      	cmp	r3, #1
    5e32:	d007      	beq.n	5e44 <nrfx_gpiote_trigger_enable+0x80>
        case 0: return NRF_P0;
    5e34:	4b12      	ldr	r3, [pc, #72]	; (5e80 <nrfx_gpiote_trigger_enable+0xbc>)
    return p_reg->IN;
    5e36:	691b      	ldr	r3, [r3, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5e38:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5e3a:	f013 0f01 	tst.w	r3, #1
    5e3e:	d016      	beq.n	5e6e <nrfx_gpiote_trigger_enable+0xaa>
    5e40:	2003      	movs	r0, #3
    5e42:	e002      	b.n	5e4a <nrfx_gpiote_trigger_enable+0x86>
        case 1: return NRF_P1;
    5e44:	4b0f      	ldr	r3, [pc, #60]	; (5e84 <nrfx_gpiote_trigger_enable+0xc0>)
    5e46:	e7f6      	b.n	5e36 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    5e48:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    5e4a:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    5e4e:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5e50:	2c01      	cmp	r4, #1
    5e52:	d00e      	beq.n	5e72 <nrfx_gpiote_trigger_enable+0xae>
        case 0: return NRF_P0;
    5e54:	490a      	ldr	r1, [pc, #40]	; (5e80 <nrfx_gpiote_trigger_enable+0xbc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5e56:	3280      	adds	r2, #128	; 0x80
    5e58:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    5e5c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5e60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    5e64:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    5e68:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    5e6a:	2002      	movs	r0, #2
    5e6c:	e7ed      	b.n	5e4a <nrfx_gpiote_trigger_enable+0x86>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5e6e:	2002      	movs	r0, #2
    5e70:	e7eb      	b.n	5e4a <nrfx_gpiote_trigger_enable+0x86>
        case 1: return NRF_P1;
    5e72:	4904      	ldr	r1, [pc, #16]	; (5e84 <nrfx_gpiote_trigger_enable+0xc0>)
    5e74:	e7ef      	b.n	5e56 <nrfx_gpiote_trigger_enable+0x92>
    5e76:	bf00      	nop
    5e78:	5000d000 	.word	0x5000d000
    5e7c:	20000134 	.word	0x20000134
    5e80:	50842500 	.word	0x50842500
    5e84:	50842800 	.word	0x50842800

00005e88 <nrfx_gpiote_trigger_disable>:
{
    5e88:	b510      	push	{r4, lr}
    5e8a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5e8c:	f7ff fbc8 	bl	5620 <pin_in_use_by_te>
    5e90:	b1a0      	cbz	r0, 5ebc <nrfx_gpiote_trigger_disable+0x34>
    5e92:	4620      	mov	r0, r4
    5e94:	f005 fc06 	bl	b6a4 <pin_is_input>
    5e98:	b180      	cbz	r0, 5ebc <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    5e9a:	4620      	mov	r0, r4
    5e9c:	f7ff fbe0 	bl	5660 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5ea0:	2201      	movs	r2, #1
    5ea2:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    5ea4:	4b0d      	ldr	r3, [pc, #52]	; (5edc <nrfx_gpiote_trigger_disable+0x54>)
    5ea6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5eaa:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    5eae:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    5eb2:	f022 0203 	bic.w	r2, r2, #3
    5eb6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    5eba:	e00c      	b.n	5ed6 <nrfx_gpiote_trigger_disable+0x4e>
    *p_pin = pin_number & 0x1F;
    5ebc:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    5ec0:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5ec2:	2c01      	cmp	r4, #1
    5ec4:	d008      	beq.n	5ed8 <nrfx_gpiote_trigger_disable+0x50>
        case 0: return NRF_P0;
    5ec6:	4906      	ldr	r1, [pc, #24]	; (5ee0 <nrfx_gpiote_trigger_disable+0x58>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5ec8:	3380      	adds	r3, #128	; 0x80
    5eca:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    5ece:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    5ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5ed6:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    5ed8:	4902      	ldr	r1, [pc, #8]	; (5ee4 <nrfx_gpiote_trigger_disable+0x5c>)
    5eda:	e7f5      	b.n	5ec8 <nrfx_gpiote_trigger_disable+0x40>
    5edc:	5000d000 	.word	0x5000d000
    5ee0:	50842500 	.word	0x50842500
    5ee4:	50842800 	.word	0x50842800

00005ee8 <nrfx_gpiote_pin_uninit>:
{
    5ee8:	b510      	push	{r4, lr}
    5eea:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    5eec:	f7ff fb8e 	bl	560c <pin_in_use>
    5ef0:	b908      	cbnz	r0, 5ef6 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    5ef2:	480d      	ldr	r0, [pc, #52]	; (5f28 <nrfx_gpiote_pin_uninit+0x40>)
}
    5ef4:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    5ef6:	4620      	mov	r0, r4
    5ef8:	f7ff ffc6 	bl	5e88 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    5efc:	4620      	mov	r0, r4
    5efe:	f7ff fcaf 	bl	5860 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    5f02:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    5f06:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5f08:	2c01      	cmp	r4, #1
    5f0a:	d00b      	beq.n	5f24 <nrfx_gpiote_pin_uninit+0x3c>
        case 0: return NRF_P0;
    5f0c:	4907      	ldr	r1, [pc, #28]	; (5f2c <nrfx_gpiote_pin_uninit+0x44>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    5f0e:	3280      	adds	r2, #128	; 0x80
    5f10:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    5f14:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    5f18:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    5f1c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    return NRFX_SUCCESS;
    5f20:	4803      	ldr	r0, [pc, #12]	; (5f30 <nrfx_gpiote_pin_uninit+0x48>)
    5f22:	e7e7      	b.n	5ef4 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
    5f24:	4903      	ldr	r1, [pc, #12]	; (5f34 <nrfx_gpiote_pin_uninit+0x4c>)
    5f26:	e7f2      	b.n	5f0e <nrfx_gpiote_pin_uninit+0x26>
    5f28:	0bad0004 	.word	0x0bad0004
    5f2c:	50842500 	.word	0x50842500
    5f30:	0bad0000 	.word	0x0bad0000
    5f34:	50842800 	.word	0x50842800

00005f38 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    5f38:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    5f3a:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    5f3c:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5f40:	2100      	movs	r1, #0
    uint32_t status = 0;
    5f42:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5f44:	e003      	b.n	5f4e <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    5f46:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    5f48:	3304      	adds	r3, #4
    5f4a:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5f4c:	3101      	adds	r1, #1
    5f4e:	2907      	cmp	r1, #7
    5f50:	d814      	bhi.n	5f7c <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5f52:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    5f56:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    5f5a:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    5f5c:	2a00      	cmp	r2, #0
    5f5e:	d0f2      	beq.n	5f46 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    5f60:	4a0b      	ldr	r2, [pc, #44]	; (5f90 <nrfx_gpiote_irq_handler+0x58>)
    5f62:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    5f66:	4210      	tst	r0, r2
    5f68:	d0ed      	beq.n	5f46 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    5f6a:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    5f6e:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5f72:	2400      	movs	r4, #0
    5f74:	6014      	str	r4, [r2, #0]
    5f76:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    5f78:	4305      	orrs	r5, r0
    5f7a:	e7e4      	b.n	5f46 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5f7c:	4b05      	ldr	r3, [pc, #20]	; (5f94 <nrfx_gpiote_irq_handler+0x5c>)
    5f7e:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    5f80:	b91b      	cbnz	r3, 5f8a <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    5f82:	4628      	mov	r0, r5
    5f84:	f7ff fd22 	bl	59cc <gpiote_evt_handle>
}
    5f88:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    5f8a:	f7ff fcbd 	bl	5908 <port_event_handle>
    5f8e:	e7f8      	b.n	5f82 <nrfx_gpiote_irq_handler+0x4a>
    5f90:	5000d000 	.word	0x5000d000
    5f94:	5000d17c 	.word	0x5000d17c

00005f98 <nrf53_errata_53>:
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5f98:	4b08      	ldr	r3, [pc, #32]	; (5fbc <nrf53_errata_53+0x24>)
    5f9a:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5f9c:	3304      	adds	r3, #4
    5f9e:	681b      	ldr	r3, [r3, #0]
                if (var1 == 0x07)
    5fa0:	2a07      	cmp	r2, #7
    5fa2:	d001      	beq.n	5fa8 <nrf53_errata_53+0x10>
        return false;
    5fa4:	2000      	movs	r0, #0
    5fa6:	4770      	bx	lr
                    switch(var2)
    5fa8:	3b02      	subs	r3, #2
    5faa:	2b00      	cmp	r3, #0
    5fac:	d804      	bhi.n	5fb8 <nrf53_errata_53+0x20>
    5fae:	e8df f003 	tbb	[pc, r3]
    5fb2:	01          	.byte	0x01
    5fb3:	00          	.byte	0x00
                if (var1 == 0x07)
    5fb4:	2001      	movs	r0, #1
    5fb6:	4770      	bx	lr
                            return false;
    5fb8:	2000      	movs	r0, #0
}
    5fba:	4770      	bx	lr
    5fbc:	00ff0130 	.word	0x00ff0130

00005fc0 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    5fc0:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    5fc2:	4b19      	ldr	r3, [pc, #100]	; (6028 <nrfx_power_init+0x68>)
    5fc4:	781b      	ldrb	r3, [r3, #0]
    5fc6:	bb63      	cbnz	r3, 6022 <nrfx_power_init+0x62>
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
    5fc8:	7803      	ldrb	r3, [r0, #0]
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    5fca:	f013 0f02 	tst.w	r3, #2
    5fce:	d018      	beq.n	6002 <nrfx_power_init+0x42>
    5fd0:	2201      	movs	r2, #1
    5fd2:	4b16      	ldr	r3, [pc, #88]	; (602c <nrfx_power_init+0x6c>)
    5fd4:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
#elif defined(REGULATORS_PRESENT)
    nrf_regulators_dcdcen_set(NRF_REGULATORS, p_config->dcdcen);
    5fd8:	7803      	ldrb	r3, [r0, #0]
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    5fda:	f013 0f01 	tst.w	r3, #1
    5fde:	d012      	beq.n	6006 <nrfx_power_init+0x46>
    5fe0:	2201      	movs	r2, #1
    5fe2:	4b12      	ldr	r3, [pc, #72]	; (602c <nrfx_power_init+0x6c>)
    5fe4:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#if !defined(NRF_TRUSTZONE_NONSECURE)
    if (p_config->dcdcen && nrf53_errata_53())
    5fe8:	7803      	ldrb	r3, [r0, #0]
    5fea:	f013 0f01 	tst.w	r3, #1
    5fee:	d10c      	bne.n	600a <nrfx_power_init+0x4a>
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5ff0:	2005      	movs	r0, #5
    5ff2:	f7fc fc1f 	bl	2834 <arch_irq_is_enabled>
    5ff6:	b180      	cbz	r0, 601a <nrfx_power_init+0x5a>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    5ff8:	4b0b      	ldr	r3, [pc, #44]	; (6028 <nrfx_power_init+0x68>)
    5ffa:	2201      	movs	r2, #1
    5ffc:	701a      	strb	r2, [r3, #0]
    return NRFX_SUCCESS;
    5ffe:	480c      	ldr	r0, [pc, #48]	; (6030 <nrfx_power_init+0x70>)
}
    6000:	bd08      	pop	{r3, pc}
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    6002:	2200      	movs	r2, #0
    6004:	e7e5      	b.n	5fd2 <nrfx_power_init+0x12>
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    6006:	2200      	movs	r2, #0
    6008:	e7eb      	b.n	5fe2 <nrfx_power_init+0x22>
    if (p_config->dcdcen && nrf53_errata_53())
    600a:	f7ff ffc5 	bl	5f98 <nrf53_errata_53>
    600e:	2800      	cmp	r0, #0
    6010:	d0ee      	beq.n	5ff0 <nrfx_power_init+0x30>
        *((volatile uint32_t *)0x50004728ul) = 0x1;
    6012:	4b08      	ldr	r3, [pc, #32]	; (6034 <nrfx_power_init+0x74>)
    6014:	2201      	movs	r2, #1
    6016:	601a      	str	r2, [r3, #0]
    6018:	e7ea      	b.n	5ff0 <nrfx_power_init+0x30>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    601a:	2005      	movs	r0, #5
    601c:	f7fc fbe6 	bl	27ec <arch_irq_enable>
    6020:	e7ea      	b.n	5ff8 <nrfx_power_init+0x38>
        return NRFX_ERROR_ALREADY_INITIALIZED;
    6022:	4805      	ldr	r0, [pc, #20]	; (6038 <nrfx_power_init+0x78>)
    6024:	e7ec      	b.n	6000 <nrfx_power_init+0x40>
    6026:	bf00      	nop
    6028:	20001b1a 	.word	0x20001b1a
    602c:	50004000 	.word	0x50004000
    6030:	0bad0000 	.word	0x0bad0000
    6034:	50004728 	.word	0x50004728
    6038:	0bad000c 	.word	0x0bad000c

0000603c <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    603c:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
}

NRF_STATIC_INLINE uint32_t nrf_power_int_enable_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->INTENSET;
    603e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6042:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    6046:	f014 0f04 	tst.w	r4, #4
    604a:	d00b      	beq.n	6064 <nrfx_power_irq_handler+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    604c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    6050:	681b      	ldr	r3, [r3, #0]
    if (ret)
    6052:	b11b      	cbz	r3, 605c <nrfx_power_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6054:	4a13      	ldr	r2, [pc, #76]	; (60a4 <nrfx_power_irq_handler+0x68>)
    6056:	2100      	movs	r1, #0
    6058:	6011      	str	r1, [r2, #0]
    605a:	6812      	ldr	r2, [r2, #0]
    605c:	b113      	cbz	r3, 6064 <nrfx_power_irq_handler+0x28>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    605e:	4b12      	ldr	r3, [pc, #72]	; (60a8 <nrfx_power_irq_handler+0x6c>)
    6060:	681b      	ldr	r3, [r3, #0]
    6062:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    6064:	f014 0f20 	tst.w	r4, #32
    6068:	d00b      	beq.n	6082 <nrfx_power_irq_handler+0x46>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    606a:	4b10      	ldr	r3, [pc, #64]	; (60ac <nrfx_power_irq_handler+0x70>)
    606c:	681b      	ldr	r3, [r3, #0]
    if (ret)
    606e:	b11b      	cbz	r3, 6078 <nrfx_power_irq_handler+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6070:	4a0e      	ldr	r2, [pc, #56]	; (60ac <nrfx_power_irq_handler+0x70>)
    6072:	2100      	movs	r1, #0
    6074:	6011      	str	r1, [r2, #0]
    6076:	6812      	ldr	r2, [r2, #0]
    6078:	b11b      	cbz	r3, 6082 <nrfx_power_irq_handler+0x46>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    607a:	4b0d      	ldr	r3, [pc, #52]	; (60b0 <nrfx_power_irq_handler+0x74>)
    607c:	681b      	ldr	r3, [r3, #0]
    607e:	2000      	movs	r0, #0
    6080:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    6082:	f014 0f40 	tst.w	r4, #64	; 0x40
    6086:	d00b      	beq.n	60a0 <nrfx_power_irq_handler+0x64>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6088:	4b0a      	ldr	r3, [pc, #40]	; (60b4 <nrfx_power_irq_handler+0x78>)
    608a:	681b      	ldr	r3, [r3, #0]
    if (ret)
    608c:	b11b      	cbz	r3, 6096 <nrfx_power_irq_handler+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    608e:	4a09      	ldr	r2, [pc, #36]	; (60b4 <nrfx_power_irq_handler+0x78>)
    6090:	2100      	movs	r1, #0
    6092:	6011      	str	r1, [r2, #0]
    6094:	6812      	ldr	r2, [r2, #0]
    6096:	b11b      	cbz	r3, 60a0 <nrfx_power_irq_handler+0x64>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    6098:	4b05      	ldr	r3, [pc, #20]	; (60b0 <nrfx_power_irq_handler+0x74>)
    609a:	681b      	ldr	r3, [r3, #0]
    609c:	2001      	movs	r0, #1
    609e:	4798      	blx	r3
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    }
#endif
}
    60a0:	bd10      	pop	{r4, pc}
    60a2:	bf00      	nop
    60a4:	50005108 	.word	0x50005108
    60a8:	2000186c 	.word	0x2000186c
    60ac:	50005114 	.word	0x50005114
    60b0:	20001870 	.word	0x20001870
    60b4:	50005118 	.word	0x50005118

000060b8 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    60b8:	b500      	push	{lr}
    60ba:	b083      	sub	sp, #12
    m_bus_suspend = false;
    60bc:	2300      	movs	r3, #0
    60be:	4a09      	ldr	r2, [pc, #36]	; (60e4 <ev_usbreset_handler+0x2c>)
    60c0:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    60c2:	4a09      	ldr	r2, [pc, #36]	; (60e8 <ev_usbreset_handler+0x30>)
    60c4:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    60c6:	f8ad 3005 	strh.w	r3, [sp, #5]
    60ca:	f88d 3007 	strb.w	r3, [sp, #7]
    60ce:	2301      	movs	r3, #1
    60d0:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    60d4:	4b05      	ldr	r3, [pc, #20]	; (60ec <ev_usbreset_handler+0x34>)
    60d6:	681b      	ldr	r3, [r3, #0]
    60d8:	a801      	add	r0, sp, #4
    60da:	4798      	blx	r3
}
    60dc:	b003      	add	sp, #12
    60de:	f85d fb04 	ldr.w	pc, [sp], #4
    60e2:	bf00      	nop
    60e4:	20001b1b 	.word	0x20001b1b
    60e8:	20001b1e 	.word	0x20001b1e
    60ec:	20001a74 	.word	0x20001a74

000060f0 <ev_sof_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }

static void ev_sof_handler(void)
{
    60f0:	b500      	push	{lr}
    60f2:	b083      	sub	sp, #12
    nrfx_usbd_evt_t evt =  {
    60f4:	2300      	movs	r3, #0
    60f6:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    60fa:	4b12      	ldr	r3, [pc, #72]	; (6144 <ev_sof_handler+0x54>)
    60fc:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    6100:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    6104:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    if (size_isoout == 0)
    6108:	b15b      	cbz	r3, 6122 <ev_sof_handler+0x32>
    else if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
    610a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    610e:	d115      	bne.n	613c <ev_sof_handler+0x4c>
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    };

    /* Process isochronous endpoints */
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    if (nrf_usbd_episoout_size_get(NRF_USBD, NRFX_USBD_EPOUT8) != NRF_USBD_EPISOOUT_NO_DATA)
    6110:	f1b3 3fff 	cmp.w	r3, #4294967295
    6114:	d002      	beq.n	611c <ev_sof_handler+0x2c>
    {
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    6116:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
    611a:	e004      	b.n	6126 <ev_sof_handler+0x36>
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    611c:	f44f 7180 	mov.w	r1, #256	; 0x100
    6120:	e001      	b.n	6126 <ev_sof_handler+0x36>
    6122:	f44f 7180 	mov.w	r1, #256	; 0x100
    }
    m_ep_ready |= iso_ready_mask;
    6126:	4a08      	ldr	r2, [pc, #32]	; (6148 <ev_sof_handler+0x58>)
    6128:	6813      	ldr	r3, [r2, #0]
    612a:	430b      	orrs	r3, r1
    612c:	6013      	str	r3, [r2, #0]

    m_event_handler(&evt);
    612e:	4b07      	ldr	r3, [pc, #28]	; (614c <ev_sof_handler+0x5c>)
    6130:	681b      	ldr	r3, [r3, #0]
    6132:	a801      	add	r0, sp, #4
    6134:	4798      	blx	r3
}
    6136:	b003      	add	sp, #12
    6138:	f85d fb04 	ldr.w	pc, [sp], #4
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    613c:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
    6140:	e7f1      	b.n	6126 <ev_sof_handler+0x36>
    6142:	bf00      	nop
    6144:	50036000 	.word	0x50036000
    6148:	20001950 	.word	0x20001950
    614c:	20001a74 	.word	0x20001a74

00006150 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    6150:	b510      	push	{r4, lr}
    6152:	b082      	sub	sp, #8
    return p_reg->EVENTCAUSE;
    6154:	4b23      	ldr	r3, [pc, #140]	; (61e4 <ev_usbevent_handler+0x94>)
    6156:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    615a:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    615e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    6162:	f414 7f80 	tst.w	r4, #256	; 0x100
    6166:	d00e      	beq.n	6186 <ev_usbevent_handler+0x36>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    6168:	4b1f      	ldr	r3, [pc, #124]	; (61e8 <ev_usbevent_handler+0x98>)
    616a:	2201      	movs	r2, #1
    616c:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    616e:	2300      	movs	r3, #0
    6170:	f8ad 3005 	strh.w	r3, [sp, #5]
    6174:	f88d 3007 	strb.w	r3, [sp, #7]
    6178:	2302      	movs	r3, #2
    617a:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    617e:	4b1b      	ldr	r3, [pc, #108]	; (61ec <ev_usbevent_handler+0x9c>)
    6180:	681b      	ldr	r3, [r3, #0]
    6182:	a801      	add	r0, sp, #4
    6184:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    6186:	f414 7f00 	tst.w	r4, #512	; 0x200
    618a:	d00d      	beq.n	61a8 <ev_usbevent_handler+0x58>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    618c:	2300      	movs	r3, #0
    618e:	4a16      	ldr	r2, [pc, #88]	; (61e8 <ev_usbevent_handler+0x98>)
    6190:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    6192:	f8ad 3005 	strh.w	r3, [sp, #5]
    6196:	f88d 3007 	strb.w	r3, [sp, #7]
    619a:	2303      	movs	r3, #3
    619c:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    61a0:	4b12      	ldr	r3, [pc, #72]	; (61ec <ev_usbevent_handler+0x9c>)
    61a2:	681b      	ldr	r3, [r3, #0]
    61a4:	a801      	add	r0, sp, #4
    61a6:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    61a8:	f414 6f80 	tst.w	r4, #1024	; 0x400
    61ac:	d017      	beq.n	61de <ev_usbevent_handler+0x8e>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    61ae:	4b0e      	ldr	r3, [pc, #56]	; (61e8 <ev_usbevent_handler+0x98>)
    61b0:	781b      	ldrb	r3, [r3, #0]
    61b2:	b1a3      	cbz	r3, 61de <ev_usbevent_handler+0x8e>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    61b4:	2300      	movs	r3, #0
    61b6:	4a0c      	ldr	r2, [pc, #48]	; (61e8 <ev_usbevent_handler+0x98>)
    61b8:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    61ba:	2101      	movs	r1, #1
    61bc:	4a09      	ldr	r2, [pc, #36]	; (61e4 <ev_usbevent_handler+0x94>)
    61be:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    61c2:	3258      	adds	r2, #88	; 0x58
    61c4:	6011      	str	r1, [r2, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    61c6:	6812      	ldr	r2, [r2, #0]

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    61c8:	f8ad 3005 	strh.w	r3, [sp, #5]
    61cc:	f88d 3007 	strb.w	r3, [sp, #7]
    61d0:	2304      	movs	r3, #4
    61d2:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    61d6:	4b05      	ldr	r3, [pc, #20]	; (61ec <ev_usbevent_handler+0x9c>)
    61d8:	681b      	ldr	r3, [r3, #0]
    61da:	a801      	add	r0, sp, #4
    61dc:	4798      	blx	r3
        }
    }
}
    61de:	b002      	add	sp, #8
    61e0:	bd10      	pop	{r4, pc}
    61e2:	bf00      	nop
    61e4:	50036000 	.word	0x50036000
    61e8:	20001b1b 	.word	0x20001b1b
    61ec:	20001a74 	.word	0x20001a74

000061f0 <usbd_enable>:

/**
 * @brief Enable USBD peripheral.
 */
static void usbd_enable(void)
{
    61f0:	b570      	push	{r4, r5, r6, lr}
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    61f2:	f005 fa6f 	bl	b6d4 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    61f6:	4604      	mov	r4, r0
    61f8:	b1b8      	cbz	r0, 622a <usbd_enable+0x3a>
	__asm__ volatile(
    61fa:	f04f 0220 	mov.w	r2, #32
    61fe:	f3ef 8311 	mrs	r3, BASEPRI
    6202:	f382 8812 	msr	BASEPRI_MAX, r2
    6206:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    620a:	4a40      	ldr	r2, [pc, #256]	; (630c <usbd_enable+0x11c>)
    620c:	6812      	ldr	r2, [r2, #0]
    620e:	2a00      	cmp	r2, #0
    6210:	d16c      	bne.n	62ec <usbd_enable+0xfc>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6212:	4a3e      	ldr	r2, [pc, #248]	; (630c <usbd_enable+0x11c>)
    6214:	f249 3175 	movw	r1, #37749	; 0x9375
    6218:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    621a:	483d      	ldr	r0, [pc, #244]	; (6310 <usbd_enable+0x120>)
    621c:	2503      	movs	r5, #3
    621e:	6005      	str	r5, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6220:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    6222:	f383 8811 	msr	BASEPRI, r3
    6226:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
    622a:	f005 fa51 	bl	b6d0 <nrf52_errata_171>
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_171())
    622e:	4602      	mov	r2, r0
    6230:	b1b8      	cbz	r0, 6262 <usbd_enable+0x72>
	__asm__ volatile(
    6232:	f04f 0120 	mov.w	r1, #32
    6236:	f3ef 8311 	mrs	r3, BASEPRI
    623a:	f381 8812 	msr	BASEPRI_MAX, r1
    623e:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    6242:	4932      	ldr	r1, [pc, #200]	; (630c <usbd_enable+0x11c>)
    6244:	6809      	ldr	r1, [r1, #0]
    6246:	2900      	cmp	r1, #0
    6248:	d154      	bne.n	62f4 <usbd_enable+0x104>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    624a:	4930      	ldr	r1, [pc, #192]	; (630c <usbd_enable+0x11c>)
    624c:	f249 3075 	movw	r0, #37749	; 0x9375
    6250:	6008      	str	r0, [r1, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    6252:	4d30      	ldr	r5, [pc, #192]	; (6314 <usbd_enable+0x124>)
    6254:	26c0      	movs	r6, #192	; 0xc0
    6256:	602e      	str	r6, [r5, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6258:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
    625a:	f383 8811 	msr	BASEPRI, r3
    625e:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    6262:	4b2d      	ldr	r3, [pc, #180]	; (6318 <usbd_enable+0x128>)
    6264:	2101      	movs	r1, #1
    6266:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    626a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    626e:	4b2a      	ldr	r3, [pc, #168]	; (6318 <usbd_enable+0x128>)
    6270:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    6274:	f413 6f00 	tst.w	r3, #2048	; 0x800
    6278:	d0f9      	beq.n	626e <usbd_enable+0x7e>
    p_reg->EVENTCAUSE = flags;
    627a:	4b27      	ldr	r3, [pc, #156]	; (6318 <usbd_enable+0x128>)
    627c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    6280:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    6284:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    nrf_usbd_enable(NRF_USBD);

    /* Waiting for peripheral to enable, this should take a few us */
    usbd_eventcause_wait_and_clear(NRF_USBD_EVENTCAUSE_READY_MASK);

    if (nrfx_usbd_errata_171())
    6288:	b1ba      	cbz	r2, 62ba <usbd_enable+0xca>
	__asm__ volatile(
    628a:	f04f 0220 	mov.w	r2, #32
    628e:	f3ef 8311 	mrs	r3, BASEPRI
    6292:	f382 8812 	msr	BASEPRI_MAX, r2
    6296:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    629a:	4a1c      	ldr	r2, [pc, #112]	; (630c <usbd_enable+0x11c>)
    629c:	6812      	ldr	r2, [r2, #0]
    629e:	2a00      	cmp	r2, #0
    62a0:	d12c      	bne.n	62fc <usbd_enable+0x10c>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    62a2:	4a1a      	ldr	r2, [pc, #104]	; (630c <usbd_enable+0x11c>)
    62a4:	f249 3175 	movw	r1, #37749	; 0x9375
    62a8:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    62aa:	481a      	ldr	r0, [pc, #104]	; (6314 <usbd_enable+0x124>)
    62ac:	2500      	movs	r5, #0
    62ae:	6005      	str	r5, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    62b0:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    62b2:	f383 8811 	msr	BASEPRI, r3
    62b6:	f3bf 8f6f 	isb	sy
    {
        usbd_errata_171_end();
    }

    if (nrfx_usbd_errata_187())
    62ba:	b1b4      	cbz	r4, 62ea <usbd_enable+0xfa>
	__asm__ volatile(
    62bc:	f04f 0220 	mov.w	r2, #32
    62c0:	f3ef 8311 	mrs	r3, BASEPRI
    62c4:	f382 8812 	msr	BASEPRI_MAX, r2
    62c8:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    62cc:	4a0f      	ldr	r2, [pc, #60]	; (630c <usbd_enable+0x11c>)
    62ce:	6812      	ldr	r2, [r2, #0]
    62d0:	b9c2      	cbnz	r2, 6304 <usbd_enable+0x114>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    62d2:	4a0e      	ldr	r2, [pc, #56]	; (630c <usbd_enable+0x11c>)
    62d4:	f249 3175 	movw	r1, #37749	; 0x9375
    62d8:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    62da:	480d      	ldr	r0, [pc, #52]	; (6310 <usbd_enable+0x120>)
    62dc:	2400      	movs	r4, #0
    62de:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    62e0:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    62e2:	f383 8811 	msr	BASEPRI, r3
    62e6:	f3bf 8f6f 	isb	sy
    {
        usbd_errata_187_211_end();
    }
}
    62ea:	bd70      	pop	{r4, r5, r6, pc}
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    62ec:	4a08      	ldr	r2, [pc, #32]	; (6310 <usbd_enable+0x120>)
    62ee:	2103      	movs	r1, #3
    62f0:	6011      	str	r1, [r2, #0]
    62f2:	e796      	b.n	6222 <usbd_enable+0x32>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    62f4:	4907      	ldr	r1, [pc, #28]	; (6314 <usbd_enable+0x124>)
    62f6:	20c0      	movs	r0, #192	; 0xc0
    62f8:	6008      	str	r0, [r1, #0]
    62fa:	e7ae      	b.n	625a <usbd_enable+0x6a>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    62fc:	4a05      	ldr	r2, [pc, #20]	; (6314 <usbd_enable+0x124>)
    62fe:	2100      	movs	r1, #0
    6300:	6011      	str	r1, [r2, #0]
    6302:	e7d6      	b.n	62b2 <usbd_enable+0xc2>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    6304:	4a02      	ldr	r2, [pc, #8]	; (6310 <usbd_enable+0x120>)
    6306:	2100      	movs	r1, #0
    6308:	6011      	str	r1, [r2, #0]
    630a:	e7ea      	b.n	62e2 <usbd_enable+0xf2>
    630c:	4006ec00 	.word	0x4006ec00
    6310:	4006ed14 	.word	0x4006ed14
    6314:	4006ec14 	.word	0x4006ec14
    6318:	50036000 	.word	0x50036000

0000631c <usbd_ep_data_handler>:
{
    631c:	b530      	push	{r4, r5, lr}
    631e:	b083      	sub	sp, #12
    6320:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    6322:	2501      	movs	r5, #1
    6324:	408d      	lsls	r5, r1
    6326:	4a51      	ldr	r2, [pc, #324]	; (646c <usbd_ep_data_handler+0x150>)
    6328:	6813      	ldr	r3, [r2, #0]
    632a:	432b      	orrs	r3, r5
    632c:	6013      	str	r3, [r2, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    632e:	f010 0f80 	tst.w	r0, #128	; 0x80
    6332:	d111      	bne.n	6358 <usbd_ep_data_handler+0x3c>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    6334:	4b4e      	ldr	r3, [pc, #312]	; (6470 <usbd_ep_data_handler+0x154>)
    6336:	681b      	ldr	r3, [r3, #0]
    6338:	421d      	tst	r5, r3
    633a:	d10b      	bne.n	6354 <usbd_ep_data_handler+0x38>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    633c:	2306      	movs	r3, #6
    633e:	f88d 3004 	strb.w	r3, [sp, #4]
    6342:	f88d 0006 	strb.w	r0, [sp, #6]
    6346:	2301      	movs	r3, #1
    6348:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    634c:	4b49      	ldr	r3, [pc, #292]	; (6474 <usbd_ep_data_handler+0x158>)
    634e:	681b      	ldr	r3, [r3, #0]
    6350:	a801      	add	r0, sp, #4
    6352:	4798      	blx	r3
}
    6354:	b003      	add	sp, #12
    6356:	bd30      	pop	{r4, r5, pc}
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    6358:	f000 030f 	and.w	r3, r0, #15
    635c:	4a46      	ldr	r2, [pc, #280]	; (6478 <usbd_ep_data_handler+0x15c>)
    635e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    6362:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    6366:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    636a:	681a      	ldr	r2, [r3, #0]
    if (ret)
    636c:	b112      	cbz	r2, 6374 <usbd_ep_data_handler+0x58>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    636e:	2100      	movs	r1, #0
    6370:	6019      	str	r1, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    6372:	681b      	ldr	r3, [r3, #0]
        if (nrf_usbd_event_get_and_clear(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)))
    6374:	2a00      	cmp	r2, #0
    6376:	d03f      	beq.n	63f8 <usbd_ep_data_handler+0xdc>
            if (ep != NRFX_USBD_EPIN0)
    6378:	2c80      	cmp	r4, #128	; 0x80
    637a:	d050      	beq.n	641e <usbd_ep_data_handler+0x102>
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    637c:	f005 f9ac 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    6380:	b110      	cbz	r0, 6388 <usbd_ep_data_handler+0x6c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    6382:	4b3e      	ldr	r3, [pc, #248]	; (647c <usbd_ep_data_handler+0x160>)
    6384:	2200      	movs	r2, #0
    6386:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    6388:	4b3d      	ldr	r3, [pc, #244]	; (6480 <usbd_ep_data_handler+0x164>)
    638a:	2200      	movs	r2, #0
    638c:	701a      	strb	r2, [r3, #0]
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    638e:	b263      	sxtb	r3, r4
    6390:	4293      	cmp	r3, r2
    6392:	db1d      	blt.n	63d0 <usbd_ep_data_handler+0xb4>
    6394:	493b      	ldr	r1, [pc, #236]	; (6484 <usbd_ep_data_handler+0x168>)
        NRF_USBD_EP_NR_GET(ep));
    6396:	f004 020f 	and.w	r2, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    639a:	0110      	lsls	r0, r2, #4
    639c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    63a0:	7b92      	ldrb	r2, [r2, #14]
    63a2:	2a03      	cmp	r2, #3
    63a4:	d016      	beq.n	63d4 <usbd_ep_data_handler+0xb8>
    else if (p_state->handler.feeder == NULL)
    63a6:	580a      	ldr	r2, [r1, r0]
    63a8:	bb32      	cbnz	r2, 63f8 <usbd_ep_data_handler+0xdc>
    return NRFX_USBD_EP_BITPOS(ep);
    63aa:	2b00      	cmp	r3, #0
    63ac:	db00      	blt.n	63b0 <usbd_ep_data_handler+0x94>
    63ae:	2210      	movs	r2, #16
    63b0:	f003 030f 	and.w	r3, r3, #15
    63b4:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    63b6:	2201      	movs	r2, #1
    63b8:	fa02 f303 	lsl.w	r3, r2, r3
    63bc:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    63be:	4a2c      	ldr	r2, [pc, #176]	; (6470 <usbd_ep_data_handler+0x154>)
    63c0:	e8d2 1fef 	ldaex	r1, [r2]
    63c4:	4019      	ands	r1, r3
    63c6:	e8c2 1fe0 	stlex	r0, r1, [r2]
    63ca:	2800      	cmp	r0, #0
    63cc:	d014      	beq.n	63f8 <usbd_ep_data_handler+0xdc>
    63ce:	e7f7      	b.n	63c0 <usbd_ep_data_handler+0xa4>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    63d0:	492d      	ldr	r1, [pc, #180]	; (6488 <usbd_ep_data_handler+0x16c>)
    63d2:	e7e0      	b.n	6396 <usbd_ep_data_handler+0x7a>
    return NRFX_USBD_EP_BITPOS(ep);
    63d4:	2b00      	cmp	r3, #0
    63d6:	db20      	blt.n	641a <usbd_ep_data_handler+0xfe>
    63d8:	2210      	movs	r2, #16
    63da:	f003 030f 	and.w	r3, r3, #15
    63de:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    63e0:	2201      	movs	r2, #1
    63e2:	fa02 f303 	lsl.w	r3, r2, r3
    63e6:	43db      	mvns	r3, r3
    63e8:	4a21      	ldr	r2, [pc, #132]	; (6470 <usbd_ep_data_handler+0x154>)
    63ea:	e8d2 1fef 	ldaex	r1, [r2]
    63ee:	4019      	ands	r1, r3
    63f0:	e8c2 1fe0 	stlex	r0, r1, [r2]
    63f4:	2800      	cmp	r0, #0
    63f6:	d1f8      	bne.n	63ea <usbd_ep_data_handler+0xce>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    63f8:	4b1d      	ldr	r3, [pc, #116]	; (6470 <usbd_ep_data_handler+0x154>)
    63fa:	681b      	ldr	r3, [r3, #0]
    63fc:	421d      	tst	r5, r3
    63fe:	d1a9      	bne.n	6354 <usbd_ep_data_handler+0x38>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6400:	2306      	movs	r3, #6
    6402:	f88d 3004 	strb.w	r3, [sp, #4]
    6406:	f88d 4006 	strb.w	r4, [sp, #6]
    640a:	2300      	movs	r3, #0
    640c:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    6410:	4b18      	ldr	r3, [pc, #96]	; (6474 <usbd_ep_data_handler+0x158>)
    6412:	681b      	ldr	r3, [r3, #0]
    6414:	a801      	add	r0, sp, #4
    6416:	4798      	blx	r3
    6418:	e79c      	b.n	6354 <usbd_ep_data_handler+0x38>
    return NRFX_USBD_EP_BITPOS(ep);
    641a:	2200      	movs	r2, #0
    641c:	e7dd      	b.n	63da <usbd_ep_data_handler+0xbe>
    641e:	f005 f95b 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    6422:	b110      	cbz	r0, 642a <usbd_ep_data_handler+0x10e>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    6424:	4b15      	ldr	r3, [pc, #84]	; (647c <usbd_ep_data_handler+0x160>)
    6426:	2200      	movs	r2, #0
    6428:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    642a:	4b15      	ldr	r3, [pc, #84]	; (6480 <usbd_ep_data_handler+0x164>)
    642c:	2200      	movs	r2, #0
    642e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6430:	4b14      	ldr	r3, [pc, #80]	; (6484 <usbd_ep_data_handler+0x168>)
    6432:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
    6436:	2b03      	cmp	r3, #3
    6438:	d00e      	beq.n	6458 <usbd_ep_data_handler+0x13c>
    else if (p_state->handler.feeder == NULL)
    643a:	4b12      	ldr	r3, [pc, #72]	; (6484 <usbd_ep_data_handler+0x168>)
    643c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    6440:	2b00      	cmp	r3, #0
    6442:	d1d9      	bne.n	63f8 <usbd_ep_data_handler+0xdc>
    6444:	4b0a      	ldr	r3, [pc, #40]	; (6470 <usbd_ep_data_handler+0x154>)
    6446:	e8d3 2fef 	ldaex	r2, [r3]
    644a:	f022 0201 	bic.w	r2, r2, #1
    644e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    6452:	2900      	cmp	r1, #0
    6454:	d0d0      	beq.n	63f8 <usbd_ep_data_handler+0xdc>
    6456:	e7f6      	b.n	6446 <usbd_ep_data_handler+0x12a>
    6458:	4b05      	ldr	r3, [pc, #20]	; (6470 <usbd_ep_data_handler+0x154>)
    645a:	e8d3 2fef 	ldaex	r2, [r3]
    645e:	f022 0201 	bic.w	r2, r2, #1
    6462:	e8c3 2fe1 	stlex	r1, r2, [r3]
    6466:	2900      	cmp	r1, #0
    6468:	d0c6      	beq.n	63f8 <usbd_ep_data_handler+0xdc>
    646a:	e7f6      	b.n	645a <usbd_ep_data_handler+0x13e>
    646c:	20001950 	.word	0x20001950
    6470:	200018e0 	.word	0x200018e0
    6474:	20001a74 	.word	0x20001a74
    6478:	0000c6f0 	.word	0x0000c6f0
    647c:	40027c1c 	.word	0x40027c1c
    6480:	20001b1c 	.word	0x20001b1c
    6484:	20001954 	.word	0x20001954
    6488:	200019e4 	.word	0x200019e4

0000648c <ev_setup_data_handler>:
{
    648c:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    648e:	4b07      	ldr	r3, [pc, #28]	; (64ac <ev_setup_data_handler+0x20>)
    6490:	7818      	ldrb	r0, [r3, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    6492:	f993 3000 	ldrsb.w	r3, [r3]
    6496:	2b00      	cmp	r3, #0
    6498:	db06      	blt.n	64a8 <ev_setup_data_handler+0x1c>
    649a:	2110      	movs	r1, #16
    649c:	f003 030f 	and.w	r3, r3, #15
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    64a0:	4419      	add	r1, r3
    64a2:	f7ff ff3b 	bl	631c <usbd_ep_data_handler>
}
    64a6:	bd08      	pop	{r3, pc}
    return NRFX_USBD_EP_BITPOS(ep);
    64a8:	2100      	movs	r1, #0
    64aa:	e7f7      	b.n	649c <ev_setup_data_handler+0x10>
    64ac:	20001b1e 	.word	0x20001b1e

000064b0 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    64b0:	b500      	push	{lr}
    64b2:	b083      	sub	sp, #12
    64b4:	f005 f910 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    64b8:	b110      	cbz	r0, 64c0 <ev_dma_epout8_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    64ba:	4b14      	ldr	r3, [pc, #80]	; (650c <ev_dma_epout8_handler+0x5c>)
    64bc:	2200      	movs	r2, #0
    64be:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    64c0:	4b13      	ldr	r3, [pc, #76]	; (6510 <ev_dma_epout8_handler+0x60>)
    64c2:	2200      	movs	r2, #0
    64c4:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    64c6:	4b13      	ldr	r3, [pc, #76]	; (6514 <ev_dma_epout8_handler+0x64>)
    64c8:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
    64cc:	2b03      	cmp	r3, #3
    64ce:	d019      	beq.n	6504 <ev_dma_epout8_handler+0x54>
    else if (p_state->handler.consumer == NULL)
    64d0:	4b10      	ldr	r3, [pc, #64]	; (6514 <ev_dma_epout8_handler+0x64>)
    64d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    64d6:	b9ab      	cbnz	r3, 6504 <ev_dma_epout8_handler+0x54>
    64d8:	4b0f      	ldr	r3, [pc, #60]	; (6518 <ev_dma_epout8_handler+0x68>)
    64da:	e8d3 2fef 	ldaex	r2, [r3]
    64de:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    64e2:	e8c3 2fe1 	stlex	r1, r2, [r3]
    64e6:	2900      	cmp	r1, #0
    64e8:	d1f7      	bne.n	64da <ev_dma_epout8_handler+0x2a>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    64ea:	2306      	movs	r3, #6
    64ec:	f88d 3004 	strb.w	r3, [sp, #4]
    64f0:	2308      	movs	r3, #8
    64f2:	f88d 3006 	strb.w	r3, [sp, #6]
    64f6:	2300      	movs	r3, #0
    64f8:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    64fc:	4b07      	ldr	r3, [pc, #28]	; (651c <ev_dma_epout8_handler+0x6c>)
    64fe:	681b      	ldr	r3, [r3, #0]
    6500:	a801      	add	r0, sp, #4
    6502:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    6504:	b003      	add	sp, #12
    6506:	f85d fb04 	ldr.w	pc, [sp], #4
    650a:	bf00      	nop
    650c:	40027c1c 	.word	0x40027c1c
    6510:	20001b1c 	.word	0x20001b1c
    6514:	20001954 	.word	0x20001954
    6518:	200018e0 	.word	0x200018e0
    651c:	20001a74 	.word	0x20001a74

00006520 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    6520:	b500      	push	{lr}
    6522:	b083      	sub	sp, #12
    6524:	f005 f8d8 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    6528:	b110      	cbz	r0, 6530 <ev_dma_epin8_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    652a:	4b19      	ldr	r3, [pc, #100]	; (6590 <ev_dma_epin8_handler+0x70>)
    652c:	2200      	movs	r2, #0
    652e:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    6530:	4b18      	ldr	r3, [pc, #96]	; (6594 <ev_dma_epin8_handler+0x74>)
    6532:	2200      	movs	r2, #0
    6534:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6536:	4b18      	ldr	r3, [pc, #96]	; (6598 <ev_dma_epin8_handler+0x78>)
    6538:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
    653c:	2b03      	cmp	r3, #3
    653e:	d01a      	beq.n	6576 <ev_dma_epin8_handler+0x56>
    else if (p_state->handler.feeder == NULL)
    6540:	4b15      	ldr	r3, [pc, #84]	; (6598 <ev_dma_epin8_handler+0x78>)
    6542:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    6546:	b9fb      	cbnz	r3, 6588 <ev_dma_epin8_handler+0x68>
    6548:	4b14      	ldr	r3, [pc, #80]	; (659c <ev_dma_epin8_handler+0x7c>)
    654a:	e8d3 2fef 	ldaex	r2, [r3]
    654e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    6552:	e8c3 2fe1 	stlex	r1, r2, [r3]
    6556:	2900      	cmp	r1, #0
    6558:	d1f7      	bne.n	654a <ev_dma_epin8_handler+0x2a>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    655a:	2306      	movs	r3, #6
    655c:	f88d 3004 	strb.w	r3, [sp, #4]
    6560:	2388      	movs	r3, #136	; 0x88
    6562:	f88d 3006 	strb.w	r3, [sp, #6]
    6566:	2300      	movs	r3, #0
    6568:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    656c:	4b0c      	ldr	r3, [pc, #48]	; (65a0 <ev_dma_epin8_handler+0x80>)
    656e:	681b      	ldr	r3, [r3, #0]
    6570:	a801      	add	r0, sp, #4
    6572:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    6574:	e008      	b.n	6588 <ev_dma_epin8_handler+0x68>
    6576:	4b09      	ldr	r3, [pc, #36]	; (659c <ev_dma_epin8_handler+0x7c>)
    6578:	e8d3 2fef 	ldaex	r2, [r3]
    657c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    6580:	e8c3 2fe1 	stlex	r1, r2, [r3]
    6584:	2900      	cmp	r1, #0
    6586:	d1f7      	bne.n	6578 <ev_dma_epin8_handler+0x58>
    6588:	b003      	add	sp, #12
    658a:	f85d fb04 	ldr.w	pc, [sp], #4
    658e:	bf00      	nop
    6590:	40027c1c 	.word	0x40027c1c
    6594:	20001b1c 	.word	0x20001b1c
    6598:	20001954 	.word	0x20001954
    659c:	200018e0 	.word	0x200018e0
    65a0:	20001a74 	.word	0x20001a74

000065a4 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    65a4:	b508      	push	{r3, lr}
    65a6:	f005 f897 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    65aa:	b110      	cbz	r0, 65b2 <ev_dma_epin0_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    65ac:	4b11      	ldr	r3, [pc, #68]	; (65f4 <ev_dma_epin0_handler+0x50>)
    65ae:	2200      	movs	r2, #0
    65b0:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    65b2:	4b11      	ldr	r3, [pc, #68]	; (65f8 <ev_dma_epin0_handler+0x54>)
    65b4:	2200      	movs	r2, #0
    65b6:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    65b8:	4b10      	ldr	r3, [pc, #64]	; (65fc <ev_dma_epin0_handler+0x58>)
    65ba:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
    65be:	2b03      	cmp	r3, #3
    65c0:	d004      	beq.n	65cc <ev_dma_epin0_handler+0x28>
    else if (p_state->handler.feeder == NULL)
    65c2:	4b0e      	ldr	r3, [pc, #56]	; (65fc <ev_dma_epin0_handler+0x58>)
    65c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    65c8:	b153      	cbz	r3, 65e0 <ev_dma_epin0_handler+0x3c>
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    65ca:	bd08      	pop	{r3, pc}
    65cc:	4b0c      	ldr	r3, [pc, #48]	; (6600 <ev_dma_epin0_handler+0x5c>)
    65ce:	e8d3 2fef 	ldaex	r2, [r3]
    65d2:	f022 0201 	bic.w	r2, r2, #1
    65d6:	e8c3 2fe1 	stlex	r1, r2, [r3]
    65da:	2900      	cmp	r1, #0
    65dc:	d0f5      	beq.n	65ca <ev_dma_epin0_handler+0x26>
    65de:	e7f6      	b.n	65ce <ev_dma_epin0_handler+0x2a>
    65e0:	4b07      	ldr	r3, [pc, #28]	; (6600 <ev_dma_epin0_handler+0x5c>)
    65e2:	e8d3 2fef 	ldaex	r2, [r3]
    65e6:	f022 0201 	bic.w	r2, r2, #1
    65ea:	e8c3 2fe1 	stlex	r1, r2, [r3]
    65ee:	2900      	cmp	r1, #0
    65f0:	d0eb      	beq.n	65ca <ev_dma_epin0_handler+0x26>
    65f2:	e7f6      	b.n	65e2 <ev_dma_epin0_handler+0x3e>
    65f4:	40027c1c 	.word	0x40027c1c
    65f8:	20001b1c 	.word	0x20001b1c
    65fc:	20001954 	.word	0x20001954
    6600:	200018e0 	.word	0x200018e0

00006604 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    6604:	b508      	push	{r3, lr}
    6606:	f005 f867 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    660a:	b110      	cbz	r0, 6612 <ev_dma_epin7_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    660c:	4b11      	ldr	r3, [pc, #68]	; (6654 <ev_dma_epin7_handler+0x50>)
    660e:	2200      	movs	r2, #0
    6610:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    6612:	4b11      	ldr	r3, [pc, #68]	; (6658 <ev_dma_epin7_handler+0x54>)
    6614:	2200      	movs	r2, #0
    6616:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6618:	4b10      	ldr	r3, [pc, #64]	; (665c <ev_dma_epin7_handler+0x58>)
    661a:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
    661e:	2b03      	cmp	r3, #3
    6620:	d00d      	beq.n	663e <ev_dma_epin7_handler+0x3a>
    else if (p_state->handler.feeder == NULL)
    6622:	4b0e      	ldr	r3, [pc, #56]	; (665c <ev_dma_epin7_handler+0x58>)
    6624:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    6628:	b993      	cbnz	r3, 6650 <ev_dma_epin7_handler+0x4c>
    662a:	4b0d      	ldr	r3, [pc, #52]	; (6660 <ev_dma_epin7_handler+0x5c>)
    662c:	e8d3 2fef 	ldaex	r2, [r3]
    6630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    6634:	e8c3 2fe1 	stlex	r1, r2, [r3]
    6638:	2900      	cmp	r1, #0
    663a:	d009      	beq.n	6650 <ev_dma_epin7_handler+0x4c>
    663c:	e7f6      	b.n	662c <ev_dma_epin7_handler+0x28>
    663e:	4b08      	ldr	r3, [pc, #32]	; (6660 <ev_dma_epin7_handler+0x5c>)
    6640:	e8d3 2fef 	ldaex	r2, [r3]
    6644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    6648:	e8c3 2fe1 	stlex	r1, r2, [r3]
    664c:	2900      	cmp	r1, #0
    664e:	d1f7      	bne.n	6640 <ev_dma_epin7_handler+0x3c>
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    6650:	bd08      	pop	{r3, pc}
    6652:	bf00      	nop
    6654:	40027c1c 	.word	0x40027c1c
    6658:	20001b1c 	.word	0x20001b1c
    665c:	20001954 	.word	0x20001954
    6660:	200018e0 	.word	0x200018e0

00006664 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    6664:	b508      	push	{r3, lr}
    6666:	f005 f837 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    666a:	b110      	cbz	r0, 6672 <ev_dma_epin5_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    666c:	4b11      	ldr	r3, [pc, #68]	; (66b4 <ev_dma_epin5_handler+0x50>)
    666e:	2200      	movs	r2, #0
    6670:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    6672:	4b11      	ldr	r3, [pc, #68]	; (66b8 <ev_dma_epin5_handler+0x54>)
    6674:	2200      	movs	r2, #0
    6676:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6678:	4b10      	ldr	r3, [pc, #64]	; (66bc <ev_dma_epin5_handler+0x58>)
    667a:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
    667e:	2b03      	cmp	r3, #3
    6680:	d00d      	beq.n	669e <ev_dma_epin5_handler+0x3a>
    else if (p_state->handler.feeder == NULL)
    6682:	4b0e      	ldr	r3, [pc, #56]	; (66bc <ev_dma_epin5_handler+0x58>)
    6684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    6688:	b993      	cbnz	r3, 66b0 <ev_dma_epin5_handler+0x4c>
    668a:	4b0d      	ldr	r3, [pc, #52]	; (66c0 <ev_dma_epin5_handler+0x5c>)
    668c:	e8d3 2fef 	ldaex	r2, [r3]
    6690:	f022 0220 	bic.w	r2, r2, #32
    6694:	e8c3 2fe1 	stlex	r1, r2, [r3]
    6698:	2900      	cmp	r1, #0
    669a:	d009      	beq.n	66b0 <ev_dma_epin5_handler+0x4c>
    669c:	e7f6      	b.n	668c <ev_dma_epin5_handler+0x28>
    669e:	4b08      	ldr	r3, [pc, #32]	; (66c0 <ev_dma_epin5_handler+0x5c>)
    66a0:	e8d3 2fef 	ldaex	r2, [r3]
    66a4:	f022 0220 	bic.w	r2, r2, #32
    66a8:	e8c3 2fe1 	stlex	r1, r2, [r3]
    66ac:	2900      	cmp	r1, #0
    66ae:	d1f7      	bne.n	66a0 <ev_dma_epin5_handler+0x3c>
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    66b0:	bd08      	pop	{r3, pc}
    66b2:	bf00      	nop
    66b4:	40027c1c 	.word	0x40027c1c
    66b8:	20001b1c 	.word	0x20001b1c
    66bc:	20001954 	.word	0x20001954
    66c0:	200018e0 	.word	0x200018e0

000066c4 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    66c4:	b508      	push	{r3, lr}
    66c6:	f005 f807 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    66ca:	b110      	cbz	r0, 66d2 <ev_dma_epin6_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    66cc:	4b11      	ldr	r3, [pc, #68]	; (6714 <ev_dma_epin6_handler+0x50>)
    66ce:	2200      	movs	r2, #0
    66d0:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    66d2:	4b11      	ldr	r3, [pc, #68]	; (6718 <ev_dma_epin6_handler+0x54>)
    66d4:	2200      	movs	r2, #0
    66d6:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    66d8:	4b10      	ldr	r3, [pc, #64]	; (671c <ev_dma_epin6_handler+0x58>)
    66da:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
    66de:	2b03      	cmp	r3, #3
    66e0:	d00d      	beq.n	66fe <ev_dma_epin6_handler+0x3a>
    else if (p_state->handler.feeder == NULL)
    66e2:	4b0e      	ldr	r3, [pc, #56]	; (671c <ev_dma_epin6_handler+0x58>)
    66e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    66e8:	b993      	cbnz	r3, 6710 <ev_dma_epin6_handler+0x4c>
    66ea:	4b0d      	ldr	r3, [pc, #52]	; (6720 <ev_dma_epin6_handler+0x5c>)
    66ec:	e8d3 2fef 	ldaex	r2, [r3]
    66f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    66f4:	e8c3 2fe1 	stlex	r1, r2, [r3]
    66f8:	2900      	cmp	r1, #0
    66fa:	d009      	beq.n	6710 <ev_dma_epin6_handler+0x4c>
    66fc:	e7f6      	b.n	66ec <ev_dma_epin6_handler+0x28>
    66fe:	4b08      	ldr	r3, [pc, #32]	; (6720 <ev_dma_epin6_handler+0x5c>)
    6700:	e8d3 2fef 	ldaex	r2, [r3]
    6704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    6708:	e8c3 2fe1 	stlex	r1, r2, [r3]
    670c:	2900      	cmp	r1, #0
    670e:	d1f7      	bne.n	6700 <ev_dma_epin6_handler+0x3c>
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    6710:	bd08      	pop	{r3, pc}
    6712:	bf00      	nop
    6714:	40027c1c 	.word	0x40027c1c
    6718:	20001b1c 	.word	0x20001b1c
    671c:	20001954 	.word	0x20001954
    6720:	200018e0 	.word	0x200018e0

00006724 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    6724:	b508      	push	{r3, lr}
    6726:	f004 ffd7 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    672a:	b110      	cbz	r0, 6732 <ev_dma_epin1_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    672c:	4b11      	ldr	r3, [pc, #68]	; (6774 <ev_dma_epin1_handler+0x50>)
    672e:	2200      	movs	r2, #0
    6730:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    6732:	4b11      	ldr	r3, [pc, #68]	; (6778 <ev_dma_epin1_handler+0x54>)
    6734:	2200      	movs	r2, #0
    6736:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6738:	4b10      	ldr	r3, [pc, #64]	; (677c <ev_dma_epin1_handler+0x58>)
    673a:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
    673e:	2b03      	cmp	r3, #3
    6740:	d00d      	beq.n	675e <ev_dma_epin1_handler+0x3a>
    else if (p_state->handler.feeder == NULL)
    6742:	4b0e      	ldr	r3, [pc, #56]	; (677c <ev_dma_epin1_handler+0x58>)
    6744:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    6748:	b993      	cbnz	r3, 6770 <ev_dma_epin1_handler+0x4c>
    674a:	4b0d      	ldr	r3, [pc, #52]	; (6780 <ev_dma_epin1_handler+0x5c>)
    674c:	e8d3 2fef 	ldaex	r2, [r3]
    6750:	f022 0202 	bic.w	r2, r2, #2
    6754:	e8c3 2fe1 	stlex	r1, r2, [r3]
    6758:	2900      	cmp	r1, #0
    675a:	d009      	beq.n	6770 <ev_dma_epin1_handler+0x4c>
    675c:	e7f6      	b.n	674c <ev_dma_epin1_handler+0x28>
    675e:	4b08      	ldr	r3, [pc, #32]	; (6780 <ev_dma_epin1_handler+0x5c>)
    6760:	e8d3 2fef 	ldaex	r2, [r3]
    6764:	f022 0202 	bic.w	r2, r2, #2
    6768:	e8c3 2fe1 	stlex	r1, r2, [r3]
    676c:	2900      	cmp	r1, #0
    676e:	d1f7      	bne.n	6760 <ev_dma_epin1_handler+0x3c>
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    6770:	bd08      	pop	{r3, pc}
    6772:	bf00      	nop
    6774:	40027c1c 	.word	0x40027c1c
    6778:	20001b1c 	.word	0x20001b1c
    677c:	20001954 	.word	0x20001954
    6780:	200018e0 	.word	0x200018e0

00006784 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    6784:	b508      	push	{r3, lr}
    6786:	f004 ffa7 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    678a:	b110      	cbz	r0, 6792 <ev_dma_epin2_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    678c:	4b11      	ldr	r3, [pc, #68]	; (67d4 <ev_dma_epin2_handler+0x50>)
    678e:	2200      	movs	r2, #0
    6790:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    6792:	4b11      	ldr	r3, [pc, #68]	; (67d8 <ev_dma_epin2_handler+0x54>)
    6794:	2200      	movs	r2, #0
    6796:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6798:	4b10      	ldr	r3, [pc, #64]	; (67dc <ev_dma_epin2_handler+0x58>)
    679a:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
    679e:	2b03      	cmp	r3, #3
    67a0:	d00d      	beq.n	67be <ev_dma_epin2_handler+0x3a>
    else if (p_state->handler.feeder == NULL)
    67a2:	4b0e      	ldr	r3, [pc, #56]	; (67dc <ev_dma_epin2_handler+0x58>)
    67a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    67a8:	b993      	cbnz	r3, 67d0 <ev_dma_epin2_handler+0x4c>
    67aa:	4b0d      	ldr	r3, [pc, #52]	; (67e0 <ev_dma_epin2_handler+0x5c>)
    67ac:	e8d3 2fef 	ldaex	r2, [r3]
    67b0:	f022 0204 	bic.w	r2, r2, #4
    67b4:	e8c3 2fe1 	stlex	r1, r2, [r3]
    67b8:	2900      	cmp	r1, #0
    67ba:	d009      	beq.n	67d0 <ev_dma_epin2_handler+0x4c>
    67bc:	e7f6      	b.n	67ac <ev_dma_epin2_handler+0x28>
    67be:	4b08      	ldr	r3, [pc, #32]	; (67e0 <ev_dma_epin2_handler+0x5c>)
    67c0:	e8d3 2fef 	ldaex	r2, [r3]
    67c4:	f022 0204 	bic.w	r2, r2, #4
    67c8:	e8c3 2fe1 	stlex	r1, r2, [r3]
    67cc:	2900      	cmp	r1, #0
    67ce:	d1f7      	bne.n	67c0 <ev_dma_epin2_handler+0x3c>
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    67d0:	bd08      	pop	{r3, pc}
    67d2:	bf00      	nop
    67d4:	40027c1c 	.word	0x40027c1c
    67d8:	20001b1c 	.word	0x20001b1c
    67dc:	20001954 	.word	0x20001954
    67e0:	200018e0 	.word	0x200018e0

000067e4 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    67e4:	b508      	push	{r3, lr}
    67e6:	f004 ff77 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    67ea:	b110      	cbz	r0, 67f2 <ev_dma_epin3_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    67ec:	4b11      	ldr	r3, [pc, #68]	; (6834 <ev_dma_epin3_handler+0x50>)
    67ee:	2200      	movs	r2, #0
    67f0:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    67f2:	4b11      	ldr	r3, [pc, #68]	; (6838 <ev_dma_epin3_handler+0x54>)
    67f4:	2200      	movs	r2, #0
    67f6:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    67f8:	4b10      	ldr	r3, [pc, #64]	; (683c <ev_dma_epin3_handler+0x58>)
    67fa:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
    67fe:	2b03      	cmp	r3, #3
    6800:	d00d      	beq.n	681e <ev_dma_epin3_handler+0x3a>
    else if (p_state->handler.feeder == NULL)
    6802:	4b0e      	ldr	r3, [pc, #56]	; (683c <ev_dma_epin3_handler+0x58>)
    6804:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    6808:	b993      	cbnz	r3, 6830 <ev_dma_epin3_handler+0x4c>
    680a:	4b0d      	ldr	r3, [pc, #52]	; (6840 <ev_dma_epin3_handler+0x5c>)
    680c:	e8d3 2fef 	ldaex	r2, [r3]
    6810:	f022 0208 	bic.w	r2, r2, #8
    6814:	e8c3 2fe1 	stlex	r1, r2, [r3]
    6818:	2900      	cmp	r1, #0
    681a:	d009      	beq.n	6830 <ev_dma_epin3_handler+0x4c>
    681c:	e7f6      	b.n	680c <ev_dma_epin3_handler+0x28>
    681e:	4b08      	ldr	r3, [pc, #32]	; (6840 <ev_dma_epin3_handler+0x5c>)
    6820:	e8d3 2fef 	ldaex	r2, [r3]
    6824:	f022 0208 	bic.w	r2, r2, #8
    6828:	e8c3 2fe1 	stlex	r1, r2, [r3]
    682c:	2900      	cmp	r1, #0
    682e:	d1f7      	bne.n	6820 <ev_dma_epin3_handler+0x3c>
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    6830:	bd08      	pop	{r3, pc}
    6832:	bf00      	nop
    6834:	40027c1c 	.word	0x40027c1c
    6838:	20001b1c 	.word	0x20001b1c
    683c:	20001954 	.word	0x20001954
    6840:	200018e0 	.word	0x200018e0

00006844 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    6844:	b508      	push	{r3, lr}
    6846:	f004 ff47 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    684a:	b110      	cbz	r0, 6852 <ev_dma_epin4_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    684c:	4b11      	ldr	r3, [pc, #68]	; (6894 <ev_dma_epin4_handler+0x50>)
    684e:	2200      	movs	r2, #0
    6850:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    6852:	4b11      	ldr	r3, [pc, #68]	; (6898 <ev_dma_epin4_handler+0x54>)
    6854:	2200      	movs	r2, #0
    6856:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6858:	4b10      	ldr	r3, [pc, #64]	; (689c <ev_dma_epin4_handler+0x58>)
    685a:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
    685e:	2b03      	cmp	r3, #3
    6860:	d00d      	beq.n	687e <ev_dma_epin4_handler+0x3a>
    else if (p_state->handler.feeder == NULL)
    6862:	4b0e      	ldr	r3, [pc, #56]	; (689c <ev_dma_epin4_handler+0x58>)
    6864:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    6868:	b993      	cbnz	r3, 6890 <ev_dma_epin4_handler+0x4c>
    686a:	4b0d      	ldr	r3, [pc, #52]	; (68a0 <ev_dma_epin4_handler+0x5c>)
    686c:	e8d3 2fef 	ldaex	r2, [r3]
    6870:	f022 0210 	bic.w	r2, r2, #16
    6874:	e8c3 2fe1 	stlex	r1, r2, [r3]
    6878:	2900      	cmp	r1, #0
    687a:	d009      	beq.n	6890 <ev_dma_epin4_handler+0x4c>
    687c:	e7f6      	b.n	686c <ev_dma_epin4_handler+0x28>
    687e:	4b08      	ldr	r3, [pc, #32]	; (68a0 <ev_dma_epin4_handler+0x5c>)
    6880:	e8d3 2fef 	ldaex	r2, [r3]
    6884:	f022 0210 	bic.w	r2, r2, #16
    6888:	e8c3 2fe1 	stlex	r1, r2, [r3]
    688c:	2900      	cmp	r1, #0
    688e:	d1f7      	bne.n	6880 <ev_dma_epin4_handler+0x3c>
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    6890:	bd08      	pop	{r3, pc}
    6892:	bf00      	nop
    6894:	40027c1c 	.word	0x40027c1c
    6898:	20001b1c 	.word	0x20001b1c
    689c:	20001954 	.word	0x20001954
    68a0:	200018e0 	.word	0x200018e0

000068a4 <nrfx_usbd_isoinconfig_set>:
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    68a4:	4b01      	ldr	r3, [pc, #4]	; (68ac <nrfx_usbd_isoinconfig_set+0x8>)
    68a6:	f8c3 0530 	str.w	r0, [r3, #1328]	; 0x530
}
    68aa:	4770      	bx	lr
    68ac:	50036000 	.word	0x50036000

000068b0 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    68b0:	2300      	movs	r3, #0
    68b2:	4a02      	ldr	r2, [pc, #8]	; (68bc <nrfx_usbd_uninit+0xc>)
    68b4:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    68b6:	4a02      	ldr	r2, [pc, #8]	; (68c0 <nrfx_usbd_uninit+0x10>)
    68b8:	7013      	strb	r3, [r2, #0]
    return;
}
    68ba:	4770      	bx	lr
    68bc:	20001a74 	.word	0x20001a74
    68c0:	20001b1d 	.word	0x20001b1d

000068c4 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    68c4:	b538      	push	{r3, r4, r5, lr}
    p_reg->EVENTCAUSE = flags;
    68c6:	4b41      	ldr	r3, [pc, #260]	; (69cc <nrfx_usbd_enable+0x108>)
    68c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    68cc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    68d0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD, NRF_USBD_EVENTCAUSE_READY_MASK);

    usbd_enable();
    68d4:	f7ff fc8c 	bl	61f0 <usbd_enable>
}

/* Errata: Unexpected behavior after reset. **/
static inline bool nrfx_usbd_errata_223(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_223();
    68d8:	f004 ff00 	bl	b6dc <nrf52_errata_223>

    if (nrfx_usbd_errata_223() && m_first_enable)
    68dc:	b118      	cbz	r0, 68e6 <nrfx_usbd_enable+0x22>
    68de:	4b3c      	ldr	r3, [pc, #240]	; (69d0 <nrfx_usbd_enable+0x10c>)
    68e0:	781b      	ldrb	r3, [r3, #0]
    68e2:	2b00      	cmp	r3, #0
    68e4:	d15e      	bne.n	69a4 <nrfx_usbd_enable+0xe0>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    68e6:	f004 fef5 	bl	b6d4 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    68ea:	4604      	mov	r4, r0
    68ec:	b1b8      	cbz	r0, 691e <nrfx_usbd_enable+0x5a>
	__asm__ volatile(
    68ee:	f04f 0220 	mov.w	r2, #32
    68f2:	f3ef 8311 	mrs	r3, BASEPRI
    68f6:	f382 8812 	msr	BASEPRI_MAX, r2
    68fa:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    68fe:	4a35      	ldr	r2, [pc, #212]	; (69d4 <nrfx_usbd_enable+0x110>)
    6900:	6812      	ldr	r2, [r2, #0]
    6902:	2a00      	cmp	r2, #0
    6904:	d159      	bne.n	69ba <nrfx_usbd_enable+0xf6>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6906:	4a33      	ldr	r2, [pc, #204]	; (69d4 <nrfx_usbd_enable+0x110>)
    6908:	f249 3175 	movw	r1, #37749	; 0x9375
    690c:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    690e:	4832      	ldr	r0, [pc, #200]	; (69d8 <nrfx_usbd_enable+0x114>)
    6910:	2503      	movs	r5, #3
    6912:	6005      	str	r5, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6914:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    6916:	f383 8811 	msr	BASEPRI, r3
    691a:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
    691e:	f004 fed5 	bl	b6cc <nrf52_errata_166>
#endif
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_166())
    6922:	b150      	cbz	r0, 693a <nrfx_usbd_enable+0x76>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    6924:	4b2d      	ldr	r3, [pc, #180]	; (69dc <nrfx_usbd_enable+0x118>)
    6926:	f240 72e3 	movw	r2, #2019	; 0x7e3
    692a:	601a      	str	r2, [r3, #0]
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    692c:	3304      	adds	r3, #4
    692e:	2240      	movs	r2, #64	; 0x40
    6930:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    6932:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    6936:	f3bf 8f4f 	dsb	sy
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    693a:	4b24      	ldr	r3, [pc, #144]	; (69cc <nrfx_usbd_enable+0x108>)
    693c:	2280      	movs	r2, #128	; 0x80
    693e:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_ZERODATA);
    }
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    6942:	2000      	movs	r0, #0
    6944:	f7ff ffae 	bl	68a4 <nrfx_usbd_isoinconfig_set>
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    6948:	4b25      	ldr	r3, [pc, #148]	; (69e0 <nrfx_usbd_enable+0x11c>)
    694a:	f240 12ff 	movw	r2, #511	; 0x1ff
    694e:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    6950:	4b24      	ldr	r3, [pc, #144]	; (69e4 <nrfx_usbd_enable+0x120>)
    6952:	2200      	movs	r2, #0
    6954:	601a      	str	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    6956:	f004 febf 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    695a:	b110      	cbz	r0, 6962 <nrfx_usbd_enable+0x9e>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    695c:	4b22      	ldr	r3, [pc, #136]	; (69e8 <nrfx_usbd_enable+0x124>)
    695e:	2200      	movs	r2, #0
    6960:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    6962:	2300      	movs	r3, #0
    6964:	4a21      	ldr	r2, [pc, #132]	; (69ec <nrfx_usbd_enable+0x128>)
    6966:	7013      	strb	r3, [r2, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    6968:	4a21      	ldr	r2, [pc, #132]	; (69f0 <nrfx_usbd_enable+0x12c>)
    696a:	7013      	strb	r3, [r2, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    696c:	4b21      	ldr	r3, [pc, #132]	; (69f4 <nrfx_usbd_enable+0x130>)
    696e:	2202      	movs	r2, #2
    6970:	701a      	strb	r2, [r3, #0]

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    6972:	b1b4      	cbz	r4, 69a2 <nrfx_usbd_enable+0xde>
	__asm__ volatile(
    6974:	f04f 0220 	mov.w	r2, #32
    6978:	f3ef 8311 	mrs	r3, BASEPRI
    697c:	f382 8812 	msr	BASEPRI_MAX, r2
    6980:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    6984:	4a13      	ldr	r2, [pc, #76]	; (69d4 <nrfx_usbd_enable+0x110>)
    6986:	6812      	ldr	r2, [r2, #0]
    6988:	b9da      	cbnz	r2, 69c2 <nrfx_usbd_enable+0xfe>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    698a:	4a12      	ldr	r2, [pc, #72]	; (69d4 <nrfx_usbd_enable+0x110>)
    698c:	f249 3175 	movw	r1, #37749	; 0x9375
    6990:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    6992:	4811      	ldr	r0, [pc, #68]	; (69d8 <nrfx_usbd_enable+0x114>)
    6994:	2400      	movs	r4, #0
    6996:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6998:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    699a:	f383 8811 	msr	BASEPRI, r3
    699e:	f3bf 8f6f 	isb	sy
#endif
    {
        usbd_errata_187_211_end();
    }
}
    69a2:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    69a4:	4b09      	ldr	r3, [pc, #36]	; (69cc <nrfx_usbd_enable+0x108>)
    69a6:	2400      	movs	r4, #0
    69a8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    69ac:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
         usbd_enable();
    69b0:	f7ff fc1e 	bl	61f0 <usbd_enable>
         m_first_enable = false;
    69b4:	4b06      	ldr	r3, [pc, #24]	; (69d0 <nrfx_usbd_enable+0x10c>)
    69b6:	701c      	strb	r4, [r3, #0]
    69b8:	e795      	b.n	68e6 <nrfx_usbd_enable+0x22>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    69ba:	4a07      	ldr	r2, [pc, #28]	; (69d8 <nrfx_usbd_enable+0x114>)
    69bc:	2103      	movs	r1, #3
    69be:	6011      	str	r1, [r2, #0]
    69c0:	e7a9      	b.n	6916 <nrfx_usbd_enable+0x52>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    69c2:	4a05      	ldr	r2, [pc, #20]	; (69d8 <nrfx_usbd_enable+0x114>)
    69c4:	2100      	movs	r1, #0
    69c6:	6011      	str	r1, [r2, #0]
    69c8:	e7e7      	b.n	699a <nrfx_usbd_enable+0xd6>
    69ca:	bf00      	nop
    69cc:	50036000 	.word	0x50036000
    69d0:	20000218 	.word	0x20000218
    69d4:	4006ec00 	.word	0x4006ec00
    69d8:	4006ed14 	.word	0x4006ed14
    69dc:	50036800 	.word	0x50036800
    69e0:	20001950 	.word	0x20001950
    69e4:	200018e0 	.word	0x200018e0
    69e8:	40027c1c 	.word	0x40027c1c
    69ec:	20001b1c 	.word	0x20001b1c
    69f0:	20001b1e 	.word	0x20001b1e
    69f4:	20001b1d 	.word	0x20001b1d

000069f8 <nrfx_usbd_start>:
    }
#endif
}

void nrfx_usbd_start(bool enable_sof)
{
    69f8:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    69fa:	4b09      	ldr	r3, [pc, #36]	; (6a20 <nrfx_usbd_start+0x28>)
    69fc:	2200      	movs	r2, #0
    69fe:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_ENDEPOUT0_MASK    |
       NRF_USBD_INT_USBEVENT_MASK     |
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
    6a00:	b960      	cbnz	r0, 6a1c <nrfx_usbd_start+0x24>
    uint32_t ints_to_enable =
    6a02:	4b08      	ldr	r3, [pc, #32]	; (6a24 <nrfx_usbd_start+0x2c>)
    p_reg->INTENSET = mask;
    6a04:	4c08      	ldr	r4, [pc, #32]	; (6a28 <nrfx_usbd_start+0x30>)
    6a06:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    6a0a:	2036      	movs	r0, #54	; 0x36
    6a0c:	f7fb feee 	bl	27ec <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    6a10:	2301      	movs	r3, #1
    6a12:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    6a16:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    6a1a:	bd10      	pop	{r4, pc}
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    6a1c:	4b03      	ldr	r3, [pc, #12]	; (6a2c <nrfx_usbd_start+0x34>)
    6a1e:	e7f1      	b.n	6a04 <nrfx_usbd_start+0xc>
    6a20:	20001b1b 	.word	0x20001b1b
    6a24:	01c01407 	.word	0x01c01407
    6a28:	50036000 	.word	0x50036000
    6a2c:	01e01407 	.word	0x01e01407

00006a30 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    6a30:	4b03      	ldr	r3, [pc, #12]	; (6a40 <nrfx_usbd_is_enabled+0x10>)
    6a32:	7818      	ldrb	r0, [r3, #0]
}
    6a34:	2801      	cmp	r0, #1
    6a36:	bf94      	ite	ls
    6a38:	2000      	movls	r0, #0
    6a3a:	2001      	movhi	r0, #1
    6a3c:	4770      	bx	lr
    6a3e:	bf00      	nop
    6a40:	20001b1d 	.word	0x20001b1d

00006a44 <nrfx_usbd_ep_max_packet_size_set>:
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6a44:	f010 0f80 	tst.w	r0, #128	; 0x80
    6a48:	d106      	bne.n	6a58 <nrfx_usbd_ep_max_packet_size_set+0x14>
    6a4a:	4b04      	ldr	r3, [pc, #16]	; (6a5c <nrfx_usbd_ep_max_packet_size_set+0x18>)
        NRF_USBD_EP_NR_GET(ep));
    6a4c:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6a50:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    /* Packet size cannot be higher than maximum buffer size */
    NRFX_ASSERT((NRF_USBD_EPISO_CHECK(ep) && (size <= usbd_ep_iso_capacity(ep))) ||
                (!NRF_USBD_EPISO_CHECK(ep) && (size <= NRFX_USBD_EPSIZE)));

    usbd_ep_state_t * p_state = ep_state_access(ep);
    p_state->max_packet_size = size;
    6a54:	8181      	strh	r1, [r0, #12]
}
    6a56:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6a58:	4b01      	ldr	r3, [pc, #4]	; (6a60 <nrfx_usbd_ep_max_packet_size_set+0x1c>)
    6a5a:	e7f7      	b.n	6a4c <nrfx_usbd_ep_max_packet_size_set+0x8>
    6a5c:	20001954 	.word	0x20001954
    6a60:	200019e4 	.word	0x200019e4

00006a64 <nrfx_usbd_init>:
{
    6a64:	b570      	push	{r4, r5, r6, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    6a66:	4b25      	ldr	r3, [pc, #148]	; (6afc <nrfx_usbd_init+0x98>)
    6a68:	781c      	ldrb	r4, [r3, #0]
    6a6a:	2c00      	cmp	r4, #0
    6a6c:	d144      	bne.n	6af8 <nrfx_usbd_init+0x94>
    m_event_handler = event_handler;
    6a6e:	4b24      	ldr	r3, [pc, #144]	; (6b00 <nrfx_usbd_init+0x9c>)
    6a70:	6018      	str	r0, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    6a72:	4b22      	ldr	r3, [pc, #136]	; (6afc <nrfx_usbd_init+0x98>)
    6a74:	2201      	movs	r2, #1
    6a76:	701a      	strb	r2, [r3, #0]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    6a78:	4625      	mov	r5, r4
    6a7a:	e012      	b.n	6aa2 <nrfx_usbd_init+0x3e>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6a7c:	2140      	movs	r1, #64	; 0x40
    6a7e:	4630      	mov	r0, r6
    6a80:	f7ff ffe0 	bl	6a44 <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6a84:	f016 0f80 	tst.w	r6, #128	; 0x80
    6a88:	d115      	bne.n	6ab6 <nrfx_usbd_init+0x52>
    6a8a:	491e      	ldr	r1, [pc, #120]	; (6b04 <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
    6a8c:	f005 030f 	and.w	r3, r5, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6a90:	0118      	lsls	r0, r3, #4
    6a92:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
    6a96:	2200      	movs	r2, #0
    6a98:	739a      	strb	r2, [r3, #14]
        p_state->handler.feeder = NULL;
    6a9a:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
    6a9c:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    6a9e:	3501      	adds	r5, #1
    6aa0:	b2ed      	uxtb	r5, r5
    6aa2:	2d08      	cmp	r5, #8
    6aa4:	d81c      	bhi.n	6ae0 <nrfx_usbd_init+0x7c>
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    6aa6:	f045 0680 	orr.w	r6, r5, #128	; 0x80
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6aaa:	f015 0f08 	tst.w	r5, #8
    6aae:	d0e5      	beq.n	6a7c <nrfx_usbd_init+0x18>
    6ab0:	f240 11ff 	movw	r1, #511	; 0x1ff
    6ab4:	e7e3      	b.n	6a7e <nrfx_usbd_init+0x1a>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6ab6:	4914      	ldr	r1, [pc, #80]	; (6b08 <nrfx_usbd_init+0xa4>)
    6ab8:	e7e8      	b.n	6a8c <nrfx_usbd_init+0x28>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6aba:	2140      	movs	r1, #64	; 0x40
    6abc:	4620      	mov	r0, r4
    6abe:	f7ff ffc1 	bl	6a44 <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6ac2:	f014 0f80 	tst.w	r4, #128	; 0x80
    6ac6:	d113      	bne.n	6af0 <nrfx_usbd_init+0x8c>
    6ac8:	490e      	ldr	r1, [pc, #56]	; (6b04 <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
    6aca:	f004 030f 	and.w	r3, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6ace:	0118      	lsls	r0, r3, #4
    6ad0:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
    6ad4:	2200      	movs	r2, #0
    6ad6:	739a      	strb	r2, [r3, #14]
        p_state->handler.consumer = NULL;
    6ad8:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
    6ada:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    6adc:	3401      	adds	r4, #1
    6ade:	b2e4      	uxtb	r4, r4
    6ae0:	2c08      	cmp	r4, #8
    6ae2:	d807      	bhi.n	6af4 <nrfx_usbd_init+0x90>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6ae4:	f014 0f08 	tst.w	r4, #8
    6ae8:	d0e7      	beq.n	6aba <nrfx_usbd_init+0x56>
    6aea:	f240 11ff 	movw	r1, #511	; 0x1ff
    6aee:	e7e5      	b.n	6abc <nrfx_usbd_init+0x58>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6af0:	4905      	ldr	r1, [pc, #20]	; (6b08 <nrfx_usbd_init+0xa4>)
    6af2:	e7ea      	b.n	6aca <nrfx_usbd_init+0x66>
    return NRFX_SUCCESS;
    6af4:	4805      	ldr	r0, [pc, #20]	; (6b0c <nrfx_usbd_init+0xa8>)
}
    6af6:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_STATE;
    6af8:	4805      	ldr	r0, [pc, #20]	; (6b10 <nrfx_usbd_init+0xac>)
    6afa:	e7fc      	b.n	6af6 <nrfx_usbd_init+0x92>
    6afc:	20001b1d 	.word	0x20001b1d
    6b00:	20001a74 	.word	0x20001a74
    6b04:	20001954 	.word	0x20001954
    6b08:	200019e4 	.word	0x200019e4
    6b0c:	0bad0000 	.word	0x0bad0000
    6b10:	0bad0005 	.word	0x0bad0005

00006b14 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    6b14:	b4f0      	push	{r4, r5, r6, r7}
    return NRFX_USBD_EP_BITPOS(ep);
    6b16:	b242      	sxtb	r2, r0
    6b18:	2a00      	cmp	r2, #0
    6b1a:	db14      	blt.n	6b46 <nrfx_usbd_ep_transfer+0x32>
    6b1c:	2410      	movs	r4, #16
    6b1e:	f002 030f 	and.w	r3, r2, #15
    6b22:	441c      	add	r4, r3
	__asm__ volatile(
    6b24:	f04f 0320 	mov.w	r3, #32
    6b28:	f3ef 8511 	mrs	r5, BASEPRI
    6b2c:	f383 8812 	msr	BASEPRI_MAX, r3
    6b30:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    6b34:	f010 070f 	ands.w	r7, r0, #15
    6b38:	d107      	bne.n	6b4a <nrfx_usbd_ep_transfer+0x36>
    6b3a:	4b2f      	ldr	r3, [pc, #188]	; (6bf8 <nrfx_usbd_ep_transfer+0xe4>)
    6b3c:	781b      	ldrb	r3, [r3, #0]
    6b3e:	4283      	cmp	r3, r0
    6b40:	d003      	beq.n	6b4a <nrfx_usbd_ep_transfer+0x36>
    {
        ret = NRFX_ERROR_INVALID_ADDR;
    6b42:	482e      	ldr	r0, [pc, #184]	; (6bfc <nrfx_usbd_ep_transfer+0xe8>)
    6b44:	e052      	b.n	6bec <nrfx_usbd_ep_transfer+0xd8>
    return NRFX_USBD_EP_BITPOS(ep);
    6b46:	2400      	movs	r4, #0
    6b48:	e7e9      	b.n	6b1e <nrfx_usbd_ep_transfer+0xa>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    6b4a:	4b2d      	ldr	r3, [pc, #180]	; (6c00 <nrfx_usbd_ep_transfer+0xec>)
    6b4c:	681b      	ldr	r3, [r3, #0]
    6b4e:	43db      	mvns	r3, r3
    6b50:	b29b      	uxth	r3, r3
    6b52:	482c      	ldr	r0, [pc, #176]	; (6c04 <nrfx_usbd_ep_transfer+0xf0>)
    6b54:	6800      	ldr	r0, [r0, #0]
    6b56:	4303      	orrs	r3, r0
    6b58:	2001      	movs	r0, #1
    6b5a:	fa00 f404 	lsl.w	r4, r0, r4
    6b5e:	4223      	tst	r3, r4
    6b60:	d143      	bne.n	6bea <nrfx_usbd_ep_transfer+0xd6>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6b62:	2a00      	cmp	r2, #0
    6b64:	db20      	blt.n	6ba8 <nrfx_usbd_ep_transfer+0x94>
    6b66:	4828      	ldr	r0, [pc, #160]	; (6c08 <nrfx_usbd_ep_transfer+0xf4>)
    6b68:	ea4f 1c07 	mov.w	ip, r7, lsl #4
    6b6c:	eb00 1607 	add.w	r6, r0, r7, lsl #4
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
    6b70:	2a00      	cmp	r2, #0
    6b72:	db1b      	blt.n	6bac <nrfx_usbd_ep_transfer+0x98>
                }
            }
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    6b74:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    6b78:	4a24      	ldr	r2, [pc, #144]	; (6c0c <nrfx_usbd_ep_transfer+0xf8>)
    6b7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    6b7e:	4a24      	ldr	r2, [pc, #144]	; (6c10 <nrfx_usbd_ep_transfer+0xfc>)
    6b80:	f840 200c 	str.w	r2, [r0, ip]
        }
        *p_context = *p_transfer;
    6b84:	c907      	ldmia	r1, {r0, r1, r2}
    6b86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    6b8a:	6073      	str	r3, [r6, #4]

        p_state->transfer_cnt = 0;
    6b8c:	2300      	movs	r3, #0
    6b8e:	60b3      	str	r3, [r6, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    6b90:	73b3      	strb	r3, [r6, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    6b92:	4a1c      	ldr	r2, [pc, #112]	; (6c04 <nrfx_usbd_ep_transfer+0xf0>)
    6b94:	6813      	ldr	r3, [r2, #0]
    6b96:	431c      	orrs	r4, r3
    6b98:	6014      	str	r4, [r2, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6b9a:	4b1e      	ldr	r3, [pc, #120]	; (6c14 <nrfx_usbd_ep_transfer+0x100>)
    6b9c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    6ba0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        ret = NRFX_SUCCESS;
    6ba4:	481c      	ldr	r0, [pc, #112]	; (6c18 <nrfx_usbd_ep_transfer+0x104>)
}
    6ba6:	e021      	b.n	6bec <nrfx_usbd_ep_transfer+0xd8>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6ba8:	481c      	ldr	r0, [pc, #112]	; (6c1c <nrfx_usbd_ep_transfer+0x108>)
    6baa:	e7dd      	b.n	6b68 <nrfx_usbd_ep_transfer+0x54>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    6bac:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    6bb0:	4a1b      	ldr	r2, [pc, #108]	; (6c20 <nrfx_usbd_ep_transfer+0x10c>)
    6bb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    6bb6:	680a      	ldr	r2, [r1, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    6bb8:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
    6bbc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    6bc0:	d006      	beq.n	6bd0 <nrfx_usbd_ep_transfer+0xbc>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    6bc2:	688a      	ldr	r2, [r1, #8]
    6bc4:	f012 0f01 	tst.w	r2, #1
    6bc8:	d10c      	bne.n	6be4 <nrfx_usbd_ep_transfer+0xd0>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    6bca:	4a16      	ldr	r2, [pc, #88]	; (6c24 <nrfx_usbd_ep_transfer+0x110>)
    6bcc:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    6bce:	e7d9      	b.n	6b84 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    6bd0:	688a      	ldr	r2, [r1, #8]
    6bd2:	f012 0f01 	tst.w	r2, #1
    6bd6:	d102      	bne.n	6bde <nrfx_usbd_ep_transfer+0xca>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    6bd8:	4a13      	ldr	r2, [pc, #76]	; (6c28 <nrfx_usbd_ep_transfer+0x114>)
    6bda:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    6bdc:	e7d2      	b.n	6b84 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    6bde:	4a13      	ldr	r2, [pc, #76]	; (6c2c <nrfx_usbd_ep_transfer+0x118>)
    6be0:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    6be2:	e7cf      	b.n	6b84 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    6be4:	4a12      	ldr	r2, [pc, #72]	; (6c30 <nrfx_usbd_ep_transfer+0x11c>)
    6be6:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    6be8:	e7cc      	b.n	6b84 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_BUSY;
    6bea:	4812      	ldr	r0, [pc, #72]	; (6c34 <nrfx_usbd_ep_transfer+0x120>)
	__asm__ volatile(
    6bec:	f385 8811 	msr	BASEPRI, r5
    6bf0:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    6bf4:	bcf0      	pop	{r4, r5, r6, r7}
    6bf6:	4770      	bx	lr
    6bf8:	20001b1e 	.word	0x20001b1e
    6bfc:	0bad000a 	.word	0x0bad000a
    6c00:	20001950 	.word	0x20001950
    6c04:	200018e0 	.word	0x200018e0
    6c08:	20001954 	.word	0x20001954
    6c0c:	20001874 	.word	0x20001874
    6c10:	0000b6e1 	.word	0x0000b6e1
    6c14:	e000e100 	.word	0xe000e100
    6c18:	0bad0000 	.word	0x0bad0000
    6c1c:	200019e4 	.word	0x200019e4
    6c20:	200018e4 	.word	0x200018e4
    6c24:	0000b76d 	.word	0x0000b76d
    6c28:	0000b717 	.word	0x0000b717
    6c2c:	0000b739 	.word	0x0000b739
    6c30:	0000b7ab 	.word	0x0000b7ab
    6c34:	0bad000b 	.word	0x0bad000b

00006c38 <nrfx_usbd_feeder_buffer_get>:
}

void * nrfx_usbd_feeder_buffer_get(void)
{
    return m_tx_buffer;
}
    6c38:	4800      	ldr	r0, [pc, #0]	; (6c3c <nrfx_usbd_feeder_buffer_get+0x4>)
    6c3a:	4770      	bx	lr
    6c3c:	20001a78 	.word	0x20001a78

00006c40 <nrfx_usbd_ep_status_get>:

nrfx_usbd_ep_status_t nrfx_usbd_ep_status_get(nrfx_usbd_ep_t ep, size_t * p_size)
{
    6c40:	b430      	push	{r4, r5}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6c42:	f010 0f80 	tst.w	r0, #128	; 0x80
    6c46:	d118      	bne.n	6c7a <nrfx_usbd_ep_status_get+0x3a>
    6c48:	4b0e      	ldr	r3, [pc, #56]	; (6c84 <nrfx_usbd_ep_status_get+0x44>)
        NRF_USBD_EP_NR_GET(ep));
    6c4a:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6c4e:	0104      	lsls	r4, r0, #4
    6c50:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	__asm__ volatile(
    6c54:	f04f 0520 	mov.w	r5, #32
    6c58:	f3ef 8211 	mrs	r2, BASEPRI
    6c5c:	f385 8812 	msr	BASEPRI_MAX, r5
    6c60:	f3bf 8f6f 	isb	sy
    nrfx_usbd_ep_status_t ret;

    usbd_ep_state_t const * p_state = ep_state_access(ep);
    NRFX_CRITICAL_SECTION_ENTER();
    *p_size = p_state->transfer_cnt;
    6c64:	6885      	ldr	r5, [r0, #8]
    6c66:	600d      	str	r5, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    6c68:	591b      	ldr	r3, [r3, r4]
    6c6a:	b143      	cbz	r3, 6c7e <nrfx_usbd_ep_status_get+0x3e>
    6c6c:	2004      	movs	r0, #4
	__asm__ volatile(
    6c6e:	f382 8811 	msr	BASEPRI, r2
    6c72:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    6c76:	bc30      	pop	{r4, r5}
    6c78:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6c7a:	4b03      	ldr	r3, [pc, #12]	; (6c88 <nrfx_usbd_ep_status_get+0x48>)
    6c7c:	e7e5      	b.n	6c4a <nrfx_usbd_ep_status_get+0xa>
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    6c7e:	7b80      	ldrb	r0, [r0, #14]
    6c80:	e7f5      	b.n	6c6e <nrfx_usbd_ep_status_get+0x2e>
    6c82:	bf00      	nop
    6c84:	20001954 	.word	0x20001954
    6c88:	200019e4 	.word	0x200019e4

00006c8c <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    6c8c:	f010 0f08 	tst.w	r0, #8
    6c90:	d107      	bne.n	6ca2 <nrfx_usbd_epout_size_get+0x16>
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    6c92:	f000 000f 	and.w	r0, r0, #15
    6c96:	f500 7094 	add.w	r0, r0, #296	; 0x128
    6c9a:	4b06      	ldr	r3, [pc, #24]	; (6cb4 <nrfx_usbd_epout_size_get+0x28>)
    6c9c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    6ca0:	4770      	bx	lr
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    6ca2:	4b04      	ldr	r3, [pc, #16]	; (6cb4 <nrfx_usbd_epout_size_get+0x28>)
    6ca4:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
        if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
    6ca8:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    6cac:	d100      	bne.n	6cb0 <nrfx_usbd_epout_size_get+0x24>
    6cae:	4770      	bx	lr
            size_isoout = 0;
    6cb0:	2000      	movs	r0, #0

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    6cb2:	4770      	bx	lr
    6cb4:	50036000 	.word	0x50036000

00006cb8 <usbd_dmareq_process>:
    if (!m_dma_pending)
    6cb8:	4b6b      	ldr	r3, [pc, #428]	; (6e68 <usbd_dmareq_process+0x1b0>)
    6cba:	781b      	ldrb	r3, [r3, #0]
    6cbc:	2b00      	cmp	r3, #0
    6cbe:	f040 80d1 	bne.w	6e64 <usbd_dmareq_process+0x1ac>
{
    6cc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6cc6:	b085      	sub	sp, #20
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    6cc8:	4b68      	ldr	r3, [pc, #416]	; (6e6c <usbd_dmareq_process+0x1b4>)
    6cca:	681b      	ldr	r3, [r3, #0]
    6ccc:	4a68      	ldr	r2, [pc, #416]	; (6e70 <usbd_dmareq_process+0x1b8>)
    6cce:	6810      	ldr	r0, [r2, #0]
    6cd0:	4003      	ands	r3, r0
    6cd2:	f000 80c4 	beq.w	6e5e <usbd_dmareq_process+0x1a6>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    6cd6:	f013 2001 	ands.w	r0, r3, #16777472	; 0x1000100
    6cda:	d05a      	beq.n	6d92 <usbd_dmareq_process+0xda>
                pos = usbd_dma_scheduler_algorithm(req & USBD_EPISO_BIT_MASK);
    6cdc:	f004 fd41 	bl	b762 <usbd_dma_scheduler_algorithm>
    6ce0:	4680      	mov	r8, r0
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6ce2:	f1b8 0f0f 	cmp.w	r8, #15
    6ce6:	d959      	bls.n	6d9c <usbd_dmareq_process+0xe4>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    6ce8:	f1a8 0610 	sub.w	r6, r8, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6cec:	b2f6      	uxtb	r6, r6
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6cee:	b274      	sxtb	r4, r6
    6cf0:	2c00      	cmp	r4, #0
    6cf2:	db57      	blt.n	6da4 <usbd_dmareq_process+0xec>
    6cf4:	f8df a194 	ldr.w	sl, [pc, #404]	; 6e8c <usbd_dmareq_process+0x1d4>
    6cf8:	f006 070f 	and.w	r7, r6, #15
        NRF_USBD_EP_NR_GET(ep));
    6cfc:	463d      	mov	r5, r7
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6cfe:	ea4f 1b07 	mov.w	fp, r7, lsl #4
    6d02:	eb0a 1907 	add.w	r9, sl, r7, lsl #4
            if (NRF_USBD_EPIN_CHECK(ep))
    6d06:	2c00      	cmp	r4, #0
    6d08:	db4f      	blt.n	6daa <usbd_dmareq_process+0xf2>
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    6d0a:	4630      	mov	r0, r6
    6d0c:	f7ff ffbe 	bl	6c8c <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    6d10:	f85a a00b 	ldr.w	sl, [sl, fp]
    6d14:	4683      	mov	fp, r0
    6d16:	4603      	mov	r3, r0
    6d18:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    6d1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
    6d20:	a802      	add	r0, sp, #8
    6d22:	47d0      	blx	sl
                if (transfer.p_data.rx == NULL)
    6d24:	9b02      	ldr	r3, [sp, #8]
    6d26:	b113      	cbz	r3, 6d2e <usbd_dmareq_process+0x76>
                else if (transfer.size < rx_size)
    6d28:	9b03      	ldr	r3, [sp, #12]
    6d2a:	455b      	cmp	r3, fp
    6d2c:	d34b      	bcc.n	6dc6 <usbd_dmareq_process+0x10e>
                if (!continue_transfer)
    6d2e:	b910      	cbnz	r0, 6d36 <usbd_dmareq_process+0x7e>
                    p_state->handler.consumer = NULL;
    6d30:	2300      	movs	r3, #0
    6d32:	f8c9 3000 	str.w	r3, [r9]
    6d36:	f004 fccf 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    6d3a:	b110      	cbz	r0, 6d42 <usbd_dmareq_process+0x8a>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    6d3c:	4b4d      	ldr	r3, [pc, #308]	; (6e74 <usbd_dmareq_process+0x1bc>)
    6d3e:	2282      	movs	r2, #130	; 0x82
    6d40:	601a      	str	r2, [r3, #0]
    m_dma_pending = true;
    6d42:	2001      	movs	r0, #1
    6d44:	4b48      	ldr	r3, [pc, #288]	; (6e68 <usbd_dmareq_process+0x1b0>)
    6d46:	7018      	strb	r0, [r3, #0]
            m_ep_ready &= ~(1U << pos);
    6d48:	fa00 f008 	lsl.w	r0, r0, r8
    6d4c:	4a48      	ldr	r2, [pc, #288]	; (6e70 <usbd_dmareq_process+0x1b8>)
    6d4e:	6813      	ldr	r3, [r2, #0]
    6d50:	ea23 0000 	bic.w	r0, r3, r0
    6d54:	6010      	str	r0, [r2, #0]
            p_state->transfer_cnt += transfer.size;
    6d56:	9a03      	ldr	r2, [sp, #12]
    6d58:	f8d9 3008 	ldr.w	r3, [r9, #8]
    6d5c:	4413      	add	r3, r2
    6d5e:	f8c9 3008 	str.w	r3, [r9, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    6d62:	9b02      	ldr	r3, [sp, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
    6d64:	2c00      	cmp	r4, #0
    6d66:	db4b      	blt.n	6e00 <usbd_dmareq_process+0x148>
        if (NRF_USBD_EPISO_CHECK(ep))
    6d68:	f016 0f08 	tst.w	r6, #8
    6d6c:	d05b      	beq.n	6e26 <usbd_dmareq_process+0x16e>
            p_reg->ISOOUT.PTR    = ptr;
    6d6e:	4942      	ldr	r1, [pc, #264]	; (6e78 <usbd_dmareq_process+0x1c0>)
    6d70:	f8c1 37a0 	str.w	r3, [r1, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    6d74:	f8c1 27a4 	str.w	r2, [r1, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
    6d78:	2c00      	cmp	r4, #0
    6d7a:	db5e      	blt.n	6e3a <usbd_dmareq_process+0x182>
    6d7c:	2328      	movs	r3, #40	; 0x28
    6d7e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    6d82:	f107 47a0 	add.w	r7, r7, #1342177280	; 0x50000000
    6d86:	f507 3758 	add.w	r7, r7, #221184	; 0x36000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    6d8a:	2301      	movs	r3, #1
    6d8c:	603b      	str	r3, [r7, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    6d8e:	683b      	ldr	r3, [r7, #0]
}
    6d90:	e061      	b.n	6e56 <usbd_dmareq_process+0x19e>
                pos = usbd_dma_scheduler_algorithm(req);
    6d92:	4618      	mov	r0, r3
    6d94:	f004 fce5 	bl	b762 <usbd_dma_scheduler_algorithm>
    6d98:	4680      	mov	r8, r0
    6d9a:	e7a2      	b.n	6ce2 <usbd_dmareq_process+0x2a>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6d9c:	f068 067f 	orn	r6, r8, #127	; 0x7f
    6da0:	b2f6      	uxtb	r6, r6
    6da2:	e7a4      	b.n	6cee <usbd_dmareq_process+0x36>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6da4:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 6e90 <usbd_dmareq_process+0x1d8>
    6da8:	e7a6      	b.n	6cf8 <usbd_dmareq_process+0x40>
                continue_transfer = p_state->handler.feeder(
    6daa:	f8d9 3000 	ldr.w	r3, [r9]
    6dae:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    6db2:	f8d9 1004 	ldr.w	r1, [r9, #4]
    6db6:	a802      	add	r0, sp, #8
    6db8:	4798      	blx	r3
                if (!continue_transfer)
    6dba:	2800      	cmp	r0, #0
    6dbc:	d1bb      	bne.n	6d36 <usbd_dmareq_process+0x7e>
                    p_state->handler.feeder = NULL;
    6dbe:	2300      	movs	r3, #0
    6dc0:	f8c9 3000 	str.w	r3, [r9]
    6dc4:	e7b7      	b.n	6d36 <usbd_dmareq_process+0x7e>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    6dc6:	2202      	movs	r2, #2
    6dc8:	f889 200e 	strb.w	r2, [r9, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    6dcc:	2301      	movs	r3, #1
    6dce:	fa03 f808 	lsl.w	r8, r3, r8
    6dd2:	ea6f 0808 	mvn.w	r8, r8
    6dd6:	4b25      	ldr	r3, [pc, #148]	; (6e6c <usbd_dmareq_process+0x1b4>)
    6dd8:	e8d3 1fef 	ldaex	r1, [r3]
    6ddc:	ea01 0108 	and.w	r1, r1, r8
    6de0:	e8c3 1fe0 	stlex	r0, r1, [r3]
    6de4:	2800      	cmp	r0, #0
    6de6:	d1f7      	bne.n	6dd8 <usbd_dmareq_process+0x120>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    6de8:	2306      	movs	r3, #6
    6dea:	f88d 3004 	strb.w	r3, [sp, #4]
    6dee:	f88d 6006 	strb.w	r6, [sp, #6]
    6df2:	f88d 2007 	strb.w	r2, [sp, #7]
                    m_event_handler(&evt);
    6df6:	4b21      	ldr	r3, [pc, #132]	; (6e7c <usbd_dmareq_process+0x1c4>)
    6df8:	681b      	ldr	r3, [r3, #0]
    6dfa:	a801      	add	r0, sp, #4
    6dfc:	4798      	blx	r3
                    continue;
    6dfe:	e763      	b.n	6cc8 <usbd_dmareq_process+0x10>
        if (NRF_USBD_EPISO_CHECK(ep))
    6e00:	f016 0f08 	tst.w	r6, #8
    6e04:	d005      	beq.n	6e12 <usbd_dmareq_process+0x15a>
            p_reg->ISOIN.PTR    = ptr;
    6e06:	491c      	ldr	r1, [pc, #112]	; (6e78 <usbd_dmareq_process+0x1c0>)
    6e08:	f8c1 36a0 	str.w	r3, [r1, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    6e0c:	f8c1 26a4 	str.w	r2, [r1, #1700]	; 0x6a4
    6e10:	e7b2      	b.n	6d78 <usbd_dmareq_process+0xc0>
            p_reg->EPIN[epnr].PTR    = ptr;
    6e12:	4919      	ldr	r1, [pc, #100]	; (6e78 <usbd_dmareq_process+0x1c0>)
    6e14:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    6e18:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    6e1c:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    6e20:	f8c0 2604 	str.w	r2, [r0, #1540]	; 0x604
    6e24:	e7a8      	b.n	6d78 <usbd_dmareq_process+0xc0>
            p_reg->EPOUT[epnr].PTR    = ptr;
    6e26:	4914      	ldr	r1, [pc, #80]	; (6e78 <usbd_dmareq_process+0x1c0>)
    6e28:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    6e2c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    6e30:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    6e34:	f8c0 2704 	str.w	r2, [r0, #1796]	; 0x704
    6e38:	e79e      	b.n	6d78 <usbd_dmareq_process+0xc0>
    return (nrf_usbd_task_t)(
    6e3a:	2304      	movs	r3, #4
    6e3c:	e79f      	b.n	6d7e <usbd_dmareq_process+0xc6>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    6e3e:	4b10      	ldr	r3, [pc, #64]	; (6e80 <usbd_dmareq_process+0x1c8>)
    6e40:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    6e44:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    6e48:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    6e4c:	681b      	ldr	r3, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    6e4e:	b933      	cbnz	r3, 6e5e <usbd_dmareq_process+0x1a6>
    6e50:	4b0c      	ldr	r3, [pc, #48]	; (6e84 <usbd_dmareq_process+0x1cc>)
    6e52:	681b      	ldr	r3, [r3, #0]
    6e54:	b91b      	cbnz	r3, 6e5e <usbd_dmareq_process+0x1a6>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    6e56:	2c00      	cmp	r4, #0
    6e58:	dbf1      	blt.n	6e3e <usbd_dmareq_process+0x186>
    6e5a:	4b0b      	ldr	r3, [pc, #44]	; (6e88 <usbd_dmareq_process+0x1d0>)
    6e5c:	e7f0      	b.n	6e40 <usbd_dmareq_process+0x188>
}
    6e5e:	b005      	add	sp, #20
    6e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e64:	4770      	bx	lr
    6e66:	bf00      	nop
    6e68:	20001b1c 	.word	0x20001b1c
    6e6c:	200018e0 	.word	0x200018e0
    6e70:	20001950 	.word	0x20001950
    6e74:	40027c1c 	.word	0x40027c1c
    6e78:	50036000 	.word	0x50036000
    6e7c:	20001a74 	.word	0x20001a74
    6e80:	0000c6f0 	.word	0x0000c6f0
    6e84:	50036100 	.word	0x50036100
    6e88:	0000c710 	.word	0x0000c710
    6e8c:	20001954 	.word	0x20001954
    6e90:	200019e4 	.word	0x200019e4

00006e94 <ev_epdata_handler>:
{
    6e94:	b510      	push	{r4, lr}
    return p_reg->EPDATASTATUS;
    6e96:	4b0f      	ldr	r3, [pc, #60]	; (6ed4 <ev_epdata_handler+0x40>)
    6e98:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    6e9c:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
    NRFX_LOG_DEBUG("USBD event: EndpointEPStatus: %x", dataepstatus);
    6ea0:	e009      	b.n	6eb6 <ev_epdata_handler+0x22>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6ea2:	f043 0080 	orr.w	r0, r3, #128	; 0x80
        dataepstatus &= ~(1UL << bitpos);
    6ea6:	b2db      	uxtb	r3, r3
    6ea8:	2201      	movs	r2, #1
    6eaa:	fa02 f303 	lsl.w	r3, r2, r3
    6eae:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    6eb2:	f7ff fa33 	bl	631c <usbd_ep_data_handler>
    while (dataepstatus)
    6eb6:	b154      	cbz	r4, 6ece <ev_epdata_handler+0x3a>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    6eb8:	fa94 f3a4 	rbit	r3, r4
    6ebc:	fab3 f383 	clz	r3, r3
    6ec0:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6ec2:	2b0f      	cmp	r3, #15
    6ec4:	d9ed      	bls.n	6ea2 <ev_epdata_handler+0xe>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    6ec6:	f1a3 0010 	sub.w	r0, r3, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6eca:	b2c0      	uxtb	r0, r0
    6ecc:	e7eb      	b.n	6ea6 <ev_epdata_handler+0x12>
        usbd_dmareq_process();
    6ece:	f7ff fef3 	bl	6cb8 <usbd_dmareq_process>
}
    6ed2:	bd10      	pop	{r4, pc}
    6ed4:	50036000 	.word	0x50036000

00006ed8 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    6ed8:	b500      	push	{lr}
    6eda:	b083      	sub	sp, #12
    6edc:	f004 fbfc 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    6ee0:	b110      	cbz	r0, 6ee8 <ev_dma_epout7_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    6ee2:	4b19      	ldr	r3, [pc, #100]	; (6f48 <ev_dma_epout7_handler+0x70>)
    6ee4:	2200      	movs	r2, #0
    6ee6:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    6ee8:	4b18      	ldr	r3, [pc, #96]	; (6f4c <ev_dma_epout7_handler+0x74>)
    6eea:	2200      	movs	r2, #0
    6eec:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6eee:	4b18      	ldr	r3, [pc, #96]	; (6f50 <ev_dma_epout7_handler+0x78>)
    6ef0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
    6ef4:	2b03      	cmp	r3, #3
    6ef6:	d019      	beq.n	6f2c <ev_dma_epout7_handler+0x54>
    else if (p_state->handler.consumer == NULL)
    6ef8:	4b15      	ldr	r3, [pc, #84]	; (6f50 <ev_dma_epout7_handler+0x78>)
    6efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6efc:	b9fb      	cbnz	r3, 6f3e <ev_dma_epout7_handler+0x66>
    6efe:	4b15      	ldr	r3, [pc, #84]	; (6f54 <ev_dma_epout7_handler+0x7c>)
    6f00:	e8d3 2fef 	ldaex	r2, [r3]
    6f04:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    6f08:	e8c3 2fe1 	stlex	r1, r2, [r3]
    6f0c:	2900      	cmp	r1, #0
    6f0e:	d1f7      	bne.n	6f00 <ev_dma_epout7_handler+0x28>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6f10:	2306      	movs	r3, #6
    6f12:	f88d 3004 	strb.w	r3, [sp, #4]
    6f16:	2307      	movs	r3, #7
    6f18:	f88d 3006 	strb.w	r3, [sp, #6]
    6f1c:	2300      	movs	r3, #0
    6f1e:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    6f22:	4b0d      	ldr	r3, [pc, #52]	; (6f58 <ev_dma_epout7_handler+0x80>)
    6f24:	681b      	ldr	r3, [r3, #0]
    6f26:	a801      	add	r0, sp, #4
    6f28:	4798      	blx	r3
    6f2a:	e008      	b.n	6f3e <ev_dma_epout7_handler+0x66>
    6f2c:	4b09      	ldr	r3, [pc, #36]	; (6f54 <ev_dma_epout7_handler+0x7c>)
    6f2e:	e8d3 2fef 	ldaex	r2, [r3]
    6f32:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    6f36:	e8c3 2fe1 	stlex	r1, r2, [r3]
    6f3a:	2900      	cmp	r1, #0
    6f3c:	d1f7      	bne.n	6f2e <ev_dma_epout7_handler+0x56>
    usbd_dmareq_process();
    6f3e:	f7ff febb 	bl	6cb8 <usbd_dmareq_process>
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    6f42:	b003      	add	sp, #12
    6f44:	f85d fb04 	ldr.w	pc, [sp], #4
    6f48:	40027c1c 	.word	0x40027c1c
    6f4c:	20001b1c 	.word	0x20001b1c
    6f50:	20001954 	.word	0x20001954
    6f54:	200018e0 	.word	0x200018e0
    6f58:	20001a74 	.word	0x20001a74

00006f5c <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    6f5c:	b500      	push	{lr}
    6f5e:	b083      	sub	sp, #12
    6f60:	f004 fbba 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    6f64:	b110      	cbz	r0, 6f6c <ev_dma_epout1_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    6f66:	4b19      	ldr	r3, [pc, #100]	; (6fcc <ev_dma_epout1_handler+0x70>)
    6f68:	2200      	movs	r2, #0
    6f6a:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    6f6c:	4b18      	ldr	r3, [pc, #96]	; (6fd0 <ev_dma_epout1_handler+0x74>)
    6f6e:	2200      	movs	r2, #0
    6f70:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6f72:	4b18      	ldr	r3, [pc, #96]	; (6fd4 <ev_dma_epout1_handler+0x78>)
    6f74:	7f9b      	ldrb	r3, [r3, #30]
    6f76:	2b03      	cmp	r3, #3
    6f78:	d019      	beq.n	6fae <ev_dma_epout1_handler+0x52>
    else if (p_state->handler.consumer == NULL)
    6f7a:	4b16      	ldr	r3, [pc, #88]	; (6fd4 <ev_dma_epout1_handler+0x78>)
    6f7c:	691b      	ldr	r3, [r3, #16]
    6f7e:	b9fb      	cbnz	r3, 6fc0 <ev_dma_epout1_handler+0x64>
    6f80:	4b15      	ldr	r3, [pc, #84]	; (6fd8 <ev_dma_epout1_handler+0x7c>)
    6f82:	e8d3 2fef 	ldaex	r2, [r3]
    6f86:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
    6f8a:	e8c3 2fe1 	stlex	r1, r2, [r3]
    6f8e:	2900      	cmp	r1, #0
    6f90:	d1f7      	bne.n	6f82 <ev_dma_epout1_handler+0x26>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6f92:	2306      	movs	r3, #6
    6f94:	f88d 3004 	strb.w	r3, [sp, #4]
    6f98:	2301      	movs	r3, #1
    6f9a:	f88d 3006 	strb.w	r3, [sp, #6]
    6f9e:	2300      	movs	r3, #0
    6fa0:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    6fa4:	4b0d      	ldr	r3, [pc, #52]	; (6fdc <ev_dma_epout1_handler+0x80>)
    6fa6:	681b      	ldr	r3, [r3, #0]
    6fa8:	a801      	add	r0, sp, #4
    6faa:	4798      	blx	r3
    6fac:	e008      	b.n	6fc0 <ev_dma_epout1_handler+0x64>
    6fae:	4b0a      	ldr	r3, [pc, #40]	; (6fd8 <ev_dma_epout1_handler+0x7c>)
    6fb0:	e8d3 2fef 	ldaex	r2, [r3]
    6fb4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
    6fb8:	e8c3 2fe1 	stlex	r1, r2, [r3]
    6fbc:	2900      	cmp	r1, #0
    6fbe:	d1f7      	bne.n	6fb0 <ev_dma_epout1_handler+0x54>
    usbd_dmareq_process();
    6fc0:	f7ff fe7a 	bl	6cb8 <usbd_dmareq_process>
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    6fc4:	b003      	add	sp, #12
    6fc6:	f85d fb04 	ldr.w	pc, [sp], #4
    6fca:	bf00      	nop
    6fcc:	40027c1c 	.word	0x40027c1c
    6fd0:	20001b1c 	.word	0x20001b1c
    6fd4:	20001954 	.word	0x20001954
    6fd8:	200018e0 	.word	0x200018e0
    6fdc:	20001a74 	.word	0x20001a74

00006fe0 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    6fe0:	b500      	push	{lr}
    6fe2:	b083      	sub	sp, #12
    6fe4:	f004 fb78 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    6fe8:	b110      	cbz	r0, 6ff0 <ev_dma_epout2_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    6fea:	4b19      	ldr	r3, [pc, #100]	; (7050 <ev_dma_epout2_handler+0x70>)
    6fec:	2200      	movs	r2, #0
    6fee:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    6ff0:	4b18      	ldr	r3, [pc, #96]	; (7054 <ev_dma_epout2_handler+0x74>)
    6ff2:	2200      	movs	r2, #0
    6ff4:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6ff6:	4b18      	ldr	r3, [pc, #96]	; (7058 <ev_dma_epout2_handler+0x78>)
    6ff8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    6ffc:	2b03      	cmp	r3, #3
    6ffe:	d019      	beq.n	7034 <ev_dma_epout2_handler+0x54>
    else if (p_state->handler.consumer == NULL)
    7000:	4b15      	ldr	r3, [pc, #84]	; (7058 <ev_dma_epout2_handler+0x78>)
    7002:	6a1b      	ldr	r3, [r3, #32]
    7004:	b9fb      	cbnz	r3, 7046 <ev_dma_epout2_handler+0x66>
    7006:	4b15      	ldr	r3, [pc, #84]	; (705c <ev_dma_epout2_handler+0x7c>)
    7008:	e8d3 2fef 	ldaex	r2, [r3]
    700c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    7010:	e8c3 2fe1 	stlex	r1, r2, [r3]
    7014:	2900      	cmp	r1, #0
    7016:	d1f7      	bne.n	7008 <ev_dma_epout2_handler+0x28>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7018:	2306      	movs	r3, #6
    701a:	f88d 3004 	strb.w	r3, [sp, #4]
    701e:	2302      	movs	r3, #2
    7020:	f88d 3006 	strb.w	r3, [sp, #6]
    7024:	2300      	movs	r3, #0
    7026:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    702a:	4b0d      	ldr	r3, [pc, #52]	; (7060 <ev_dma_epout2_handler+0x80>)
    702c:	681b      	ldr	r3, [r3, #0]
    702e:	a801      	add	r0, sp, #4
    7030:	4798      	blx	r3
    7032:	e008      	b.n	7046 <ev_dma_epout2_handler+0x66>
    7034:	4b09      	ldr	r3, [pc, #36]	; (705c <ev_dma_epout2_handler+0x7c>)
    7036:	e8d3 2fef 	ldaex	r2, [r3]
    703a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    703e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    7042:	2900      	cmp	r1, #0
    7044:	d1f7      	bne.n	7036 <ev_dma_epout2_handler+0x56>
    usbd_dmareq_process();
    7046:	f7ff fe37 	bl	6cb8 <usbd_dmareq_process>
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    704a:	b003      	add	sp, #12
    704c:	f85d fb04 	ldr.w	pc, [sp], #4
    7050:	40027c1c 	.word	0x40027c1c
    7054:	20001b1c 	.word	0x20001b1c
    7058:	20001954 	.word	0x20001954
    705c:	200018e0 	.word	0x200018e0
    7060:	20001a74 	.word	0x20001a74

00007064 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    7064:	b500      	push	{lr}
    7066:	b083      	sub	sp, #12
    7068:	f004 fb36 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    706c:	b110      	cbz	r0, 7074 <ev_dma_epout3_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    706e:	4b19      	ldr	r3, [pc, #100]	; (70d4 <ev_dma_epout3_handler+0x70>)
    7070:	2200      	movs	r2, #0
    7072:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    7074:	4b18      	ldr	r3, [pc, #96]	; (70d8 <ev_dma_epout3_handler+0x74>)
    7076:	2200      	movs	r2, #0
    7078:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    707a:	4b18      	ldr	r3, [pc, #96]	; (70dc <ev_dma_epout3_handler+0x78>)
    707c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
    7080:	2b03      	cmp	r3, #3
    7082:	d019      	beq.n	70b8 <ev_dma_epout3_handler+0x54>
    else if (p_state->handler.consumer == NULL)
    7084:	4b15      	ldr	r3, [pc, #84]	; (70dc <ev_dma_epout3_handler+0x78>)
    7086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7088:	b9fb      	cbnz	r3, 70ca <ev_dma_epout3_handler+0x66>
    708a:	4b15      	ldr	r3, [pc, #84]	; (70e0 <ev_dma_epout3_handler+0x7c>)
    708c:	e8d3 2fef 	ldaex	r2, [r3]
    7090:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
    7094:	e8c3 2fe1 	stlex	r1, r2, [r3]
    7098:	2900      	cmp	r1, #0
    709a:	d1f7      	bne.n	708c <ev_dma_epout3_handler+0x28>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    709c:	2306      	movs	r3, #6
    709e:	f88d 3004 	strb.w	r3, [sp, #4]
    70a2:	2303      	movs	r3, #3
    70a4:	f88d 3006 	strb.w	r3, [sp, #6]
    70a8:	2300      	movs	r3, #0
    70aa:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    70ae:	4b0d      	ldr	r3, [pc, #52]	; (70e4 <ev_dma_epout3_handler+0x80>)
    70b0:	681b      	ldr	r3, [r3, #0]
    70b2:	a801      	add	r0, sp, #4
    70b4:	4798      	blx	r3
    70b6:	e008      	b.n	70ca <ev_dma_epout3_handler+0x66>
    70b8:	4b09      	ldr	r3, [pc, #36]	; (70e0 <ev_dma_epout3_handler+0x7c>)
    70ba:	e8d3 2fef 	ldaex	r2, [r3]
    70be:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
    70c2:	e8c3 2fe1 	stlex	r1, r2, [r3]
    70c6:	2900      	cmp	r1, #0
    70c8:	d1f7      	bne.n	70ba <ev_dma_epout3_handler+0x56>
    usbd_dmareq_process();
    70ca:	f7ff fdf5 	bl	6cb8 <usbd_dmareq_process>
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    70ce:	b003      	add	sp, #12
    70d0:	f85d fb04 	ldr.w	pc, [sp], #4
    70d4:	40027c1c 	.word	0x40027c1c
    70d8:	20001b1c 	.word	0x20001b1c
    70dc:	20001954 	.word	0x20001954
    70e0:	200018e0 	.word	0x200018e0
    70e4:	20001a74 	.word	0x20001a74

000070e8 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    70e8:	b500      	push	{lr}
    70ea:	b083      	sub	sp, #12
    70ec:	f004 faf4 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    70f0:	b110      	cbz	r0, 70f8 <ev_dma_epout4_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    70f2:	4b19      	ldr	r3, [pc, #100]	; (7158 <ev_dma_epout4_handler+0x70>)
    70f4:	2200      	movs	r2, #0
    70f6:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    70f8:	4b18      	ldr	r3, [pc, #96]	; (715c <ev_dma_epout4_handler+0x74>)
    70fa:	2200      	movs	r2, #0
    70fc:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    70fe:	4b18      	ldr	r3, [pc, #96]	; (7160 <ev_dma_epout4_handler+0x78>)
    7100:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    7104:	2b03      	cmp	r3, #3
    7106:	d019      	beq.n	713c <ev_dma_epout4_handler+0x54>
    else if (p_state->handler.consumer == NULL)
    7108:	4b15      	ldr	r3, [pc, #84]	; (7160 <ev_dma_epout4_handler+0x78>)
    710a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    710c:	b9fb      	cbnz	r3, 714e <ev_dma_epout4_handler+0x66>
    710e:	4b15      	ldr	r3, [pc, #84]	; (7164 <ev_dma_epout4_handler+0x7c>)
    7110:	e8d3 2fef 	ldaex	r2, [r3]
    7114:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    7118:	e8c3 2fe1 	stlex	r1, r2, [r3]
    711c:	2900      	cmp	r1, #0
    711e:	d1f7      	bne.n	7110 <ev_dma_epout4_handler+0x28>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7120:	2306      	movs	r3, #6
    7122:	f88d 3004 	strb.w	r3, [sp, #4]
    7126:	2304      	movs	r3, #4
    7128:	f88d 3006 	strb.w	r3, [sp, #6]
    712c:	2300      	movs	r3, #0
    712e:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    7132:	4b0d      	ldr	r3, [pc, #52]	; (7168 <ev_dma_epout4_handler+0x80>)
    7134:	681b      	ldr	r3, [r3, #0]
    7136:	a801      	add	r0, sp, #4
    7138:	4798      	blx	r3
    713a:	e008      	b.n	714e <ev_dma_epout4_handler+0x66>
    713c:	4b09      	ldr	r3, [pc, #36]	; (7164 <ev_dma_epout4_handler+0x7c>)
    713e:	e8d3 2fef 	ldaex	r2, [r3]
    7142:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    7146:	e8c3 2fe1 	stlex	r1, r2, [r3]
    714a:	2900      	cmp	r1, #0
    714c:	d1f7      	bne.n	713e <ev_dma_epout4_handler+0x56>
    usbd_dmareq_process();
    714e:	f7ff fdb3 	bl	6cb8 <usbd_dmareq_process>
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    7152:	b003      	add	sp, #12
    7154:	f85d fb04 	ldr.w	pc, [sp], #4
    7158:	40027c1c 	.word	0x40027c1c
    715c:	20001b1c 	.word	0x20001b1c
    7160:	20001954 	.word	0x20001954
    7164:	200018e0 	.word	0x200018e0
    7168:	20001a74 	.word	0x20001a74

0000716c <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    716c:	b500      	push	{lr}
    716e:	b083      	sub	sp, #12
    7170:	f004 fab2 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    7174:	b110      	cbz	r0, 717c <ev_dma_epout5_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    7176:	4b19      	ldr	r3, [pc, #100]	; (71dc <ev_dma_epout5_handler+0x70>)
    7178:	2200      	movs	r2, #0
    717a:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    717c:	4b18      	ldr	r3, [pc, #96]	; (71e0 <ev_dma_epout5_handler+0x74>)
    717e:	2200      	movs	r2, #0
    7180:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7182:	4b18      	ldr	r3, [pc, #96]	; (71e4 <ev_dma_epout5_handler+0x78>)
    7184:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
    7188:	2b03      	cmp	r3, #3
    718a:	d019      	beq.n	71c0 <ev_dma_epout5_handler+0x54>
    else if (p_state->handler.consumer == NULL)
    718c:	4b15      	ldr	r3, [pc, #84]	; (71e4 <ev_dma_epout5_handler+0x78>)
    718e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    7190:	b9fb      	cbnz	r3, 71d2 <ev_dma_epout5_handler+0x66>
    7192:	4b15      	ldr	r3, [pc, #84]	; (71e8 <ev_dma_epout5_handler+0x7c>)
    7194:	e8d3 2fef 	ldaex	r2, [r3]
    7198:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    719c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    71a0:	2900      	cmp	r1, #0
    71a2:	d1f7      	bne.n	7194 <ev_dma_epout5_handler+0x28>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    71a4:	2306      	movs	r3, #6
    71a6:	f88d 3004 	strb.w	r3, [sp, #4]
    71aa:	2305      	movs	r3, #5
    71ac:	f88d 3006 	strb.w	r3, [sp, #6]
    71b0:	2300      	movs	r3, #0
    71b2:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    71b6:	4b0d      	ldr	r3, [pc, #52]	; (71ec <ev_dma_epout5_handler+0x80>)
    71b8:	681b      	ldr	r3, [r3, #0]
    71ba:	a801      	add	r0, sp, #4
    71bc:	4798      	blx	r3
    71be:	e008      	b.n	71d2 <ev_dma_epout5_handler+0x66>
    71c0:	4b09      	ldr	r3, [pc, #36]	; (71e8 <ev_dma_epout5_handler+0x7c>)
    71c2:	e8d3 2fef 	ldaex	r2, [r3]
    71c6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    71ca:	e8c3 2fe1 	stlex	r1, r2, [r3]
    71ce:	2900      	cmp	r1, #0
    71d0:	d1f7      	bne.n	71c2 <ev_dma_epout5_handler+0x56>
    usbd_dmareq_process();
    71d2:	f7ff fd71 	bl	6cb8 <usbd_dmareq_process>
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    71d6:	b003      	add	sp, #12
    71d8:	f85d fb04 	ldr.w	pc, [sp], #4
    71dc:	40027c1c 	.word	0x40027c1c
    71e0:	20001b1c 	.word	0x20001b1c
    71e4:	20001954 	.word	0x20001954
    71e8:	200018e0 	.word	0x200018e0
    71ec:	20001a74 	.word	0x20001a74

000071f0 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    71f0:	b500      	push	{lr}
    71f2:	b083      	sub	sp, #12
    71f4:	f004 fa70 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    71f8:	b110      	cbz	r0, 7200 <ev_dma_epout6_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    71fa:	4b19      	ldr	r3, [pc, #100]	; (7260 <ev_dma_epout6_handler+0x70>)
    71fc:	2200      	movs	r2, #0
    71fe:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    7200:	4b18      	ldr	r3, [pc, #96]	; (7264 <ev_dma_epout6_handler+0x74>)
    7202:	2200      	movs	r2, #0
    7204:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7206:	4b18      	ldr	r3, [pc, #96]	; (7268 <ev_dma_epout6_handler+0x78>)
    7208:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
    720c:	2b03      	cmp	r3, #3
    720e:	d018      	beq.n	7242 <ev_dma_epout6_handler+0x52>
    else if (p_state->handler.consumer == NULL)
    7210:	4b15      	ldr	r3, [pc, #84]	; (7268 <ev_dma_epout6_handler+0x78>)
    7212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    7214:	b9f3      	cbnz	r3, 7254 <ev_dma_epout6_handler+0x64>
    7216:	4b15      	ldr	r3, [pc, #84]	; (726c <ev_dma_epout6_handler+0x7c>)
    7218:	e8d3 2fef 	ldaex	r2, [r3]
    721c:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
    7220:	e8c3 2fe1 	stlex	r1, r2, [r3]
    7224:	2900      	cmp	r1, #0
    7226:	d1f7      	bne.n	7218 <ev_dma_epout6_handler+0x28>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7228:	2306      	movs	r3, #6
    722a:	f88d 3004 	strb.w	r3, [sp, #4]
    722e:	f88d 3006 	strb.w	r3, [sp, #6]
    7232:	2300      	movs	r3, #0
    7234:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    7238:	4b0d      	ldr	r3, [pc, #52]	; (7270 <ev_dma_epout6_handler+0x80>)
    723a:	681b      	ldr	r3, [r3, #0]
    723c:	a801      	add	r0, sp, #4
    723e:	4798      	blx	r3
    7240:	e008      	b.n	7254 <ev_dma_epout6_handler+0x64>
    7242:	4b0a      	ldr	r3, [pc, #40]	; (726c <ev_dma_epout6_handler+0x7c>)
    7244:	e8d3 2fef 	ldaex	r2, [r3]
    7248:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
    724c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    7250:	2900      	cmp	r1, #0
    7252:	d1f7      	bne.n	7244 <ev_dma_epout6_handler+0x54>
    usbd_dmareq_process();
    7254:	f7ff fd30 	bl	6cb8 <usbd_dmareq_process>
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    7258:	b003      	add	sp, #12
    725a:	f85d fb04 	ldr.w	pc, [sp], #4
    725e:	bf00      	nop
    7260:	40027c1c 	.word	0x40027c1c
    7264:	20001b1c 	.word	0x20001b1c
    7268:	20001954 	.word	0x20001954
    726c:	200018e0 	.word	0x200018e0
    7270:	20001a74 	.word	0x20001a74

00007274 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    7274:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    7278:	4b01      	ldr	r3, [pc, #4]	; (7280 <nrfx_usbd_ep_stall+0xc>)
    727a:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    727e:	4770      	bx	lr
    7280:	50036000 	.word	0x50036000

00007284 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    7284:	f010 0f08 	tst.w	r0, #8
    7288:	d117      	bne.n	72ba <nrfx_usbd_ep_stall_check+0x36>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    728a:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    728e:	f010 0f80 	tst.w	r0, #128	; 0x80
    7292:	d10c      	bne.n	72ae <nrfx_usbd_ep_stall_check+0x2a>
        return p_reg->HALTED.EPOUT[epnr];
    7294:	f503 7388 	add.w	r3, r3, #272	; 0x110
    7298:	009b      	lsls	r3, r3, #2
    729a:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    729e:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    72a2:	6858      	ldr	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    72a4:	2801      	cmp	r0, #1
    72a6:	bf14      	ite	ne
    72a8:	2000      	movne	r0, #0
    72aa:	2001      	moveq	r0, #1
    72ac:	4770      	bx	lr
        return p_reg->HALTED.EPIN[epnr];
    72ae:	f503 7384 	add.w	r3, r3, #264	; 0x108
    72b2:	4a03      	ldr	r2, [pc, #12]	; (72c0 <nrfx_usbd_ep_stall_check+0x3c>)
    72b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    72b8:	e7f4      	b.n	72a4 <nrfx_usbd_ep_stall_check+0x20>
        return false;
    72ba:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    72bc:	4770      	bx	lr
    72be:	bf00      	nop
    72c0:	50036000 	.word	0x50036000

000072c4 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    72c4:	4b04      	ldr	r3, [pc, #16]	; (72d8 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    72c6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    72ca:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    72ce:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    72d2:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    72d6:	4770      	bx	lr
    72d8:	50036000 	.word	0x50036000

000072dc <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    72dc:	b510      	push	{r4, lr}
    72de:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    72e0:	2208      	movs	r2, #8
    72e2:	2100      	movs	r1, #0
    72e4:	f003 fc33 	bl	ab4e <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    72e8:	4b11      	ldr	r3, [pc, #68]	; (7330 <nrfx_usbd_setup_get+0x54>)
    72ea:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    72ee:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    72f0:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    72f4:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    72f6:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    72fa:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    72fc:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    7300:	0209      	lsls	r1, r1, #8
    7302:	b289      	uxth	r1, r1
    7304:	430a      	orrs	r2, r1
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    7306:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    7308:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    730c:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    730e:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    7312:	0209      	lsls	r1, r1, #8
    7314:	b289      	uxth	r1, r1
    7316:	430a      	orrs	r2, r1
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    7318:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    731a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    731e:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    7320:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    7324:	021b      	lsls	r3, r3, #8
    7326:	b29b      	uxth	r3, r3
    7328:	4313      	orrs	r3, r2
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    732a:	80e3      	strh	r3, [r4, #6]
}
    732c:	bd10      	pop	{r4, pc}
    732e:	bf00      	nop
    7330:	50036000 	.word	0x50036000

00007334 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7334:	4b02      	ldr	r3, [pc, #8]	; (7340 <nrfx_usbd_setup_data_clear+0xc>)
    7336:	2201      	movs	r2, #1
    7338:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    733a:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    733c:	4770      	bx	lr
    733e:	bf00      	nop
    7340:	5003604c 	.word	0x5003604c

00007344 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    7344:	b500      	push	{lr}
    7346:	b083      	sub	sp, #12
    7348:	f004 f9c6 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    734c:	b110      	cbz	r0, 7354 <ev_dma_epout0_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    734e:	4b19      	ldr	r3, [pc, #100]	; (73b4 <ev_dma_epout0_handler+0x70>)
    7350:	2200      	movs	r2, #0
    7352:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    7354:	4b18      	ldr	r3, [pc, #96]	; (73b8 <ev_dma_epout0_handler+0x74>)
    7356:	2200      	movs	r2, #0
    7358:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    735a:	4b18      	ldr	r3, [pc, #96]	; (73bc <ev_dma_epout0_handler+0x78>)
    735c:	7b9b      	ldrb	r3, [r3, #14]
    735e:	2b03      	cmp	r3, #3
    7360:	d005      	beq.n	736e <ev_dma_epout0_handler+0x2a>
    else if (p_state->handler.consumer == NULL)
    7362:	4b16      	ldr	r3, [pc, #88]	; (73bc <ev_dma_epout0_handler+0x78>)
    7364:	681b      	ldr	r3, [r3, #0]
    7366:	b163      	cbz	r3, 7382 <ev_dma_epout0_handler+0x3e>
        nrfx_usbd_setup_data_clear();
    7368:	f7ff ffe4 	bl	7334 <nrfx_usbd_setup_data_clear>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    736c:	e01e      	b.n	73ac <ev_dma_epout0_handler+0x68>
    736e:	4b14      	ldr	r3, [pc, #80]	; (73c0 <ev_dma_epout0_handler+0x7c>)
    7370:	e8d3 2fef 	ldaex	r2, [r3]
    7374:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    7378:	e8c3 2fe1 	stlex	r1, r2, [r3]
    737c:	2900      	cmp	r1, #0
    737e:	d015      	beq.n	73ac <ev_dma_epout0_handler+0x68>
    7380:	e7f6      	b.n	7370 <ev_dma_epout0_handler+0x2c>
    7382:	4b0f      	ldr	r3, [pc, #60]	; (73c0 <ev_dma_epout0_handler+0x7c>)
    7384:	e8d3 2fef 	ldaex	r2, [r3]
    7388:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    738c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    7390:	2900      	cmp	r1, #0
    7392:	d1f7      	bne.n	7384 <ev_dma_epout0_handler+0x40>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7394:	2306      	movs	r3, #6
    7396:	f88d 3004 	strb.w	r3, [sp, #4]
    739a:	2300      	movs	r3, #0
    739c:	f88d 3006 	strb.w	r3, [sp, #6]
    73a0:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    73a4:	4b07      	ldr	r3, [pc, #28]	; (73c4 <ev_dma_epout0_handler+0x80>)
    73a6:	681b      	ldr	r3, [r3, #0]
    73a8:	a801      	add	r0, sp, #4
    73aa:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    73ac:	b003      	add	sp, #12
    73ae:	f85d fb04 	ldr.w	pc, [sp], #4
    73b2:	bf00      	nop
    73b4:	40027c1c 	.word	0x40027c1c
    73b8:	20001b1c 	.word	0x20001b1c
    73bc:	20001954 	.word	0x20001954
    73c0:	200018e0 	.word	0x200018e0
    73c4:	20001a74 	.word	0x20001a74

000073c8 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    73c8:	4b02      	ldr	r3, [pc, #8]	; (73d4 <nrfx_usbd_setup_clear+0xc>)
    73ca:	2201      	movs	r2, #1
    73cc:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    73ce:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    73d0:	4770      	bx	lr
    73d2:	bf00      	nop
    73d4:	50036050 	.word	0x50036050

000073d8 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    73d8:	4b02      	ldr	r3, [pc, #8]	; (73e4 <nrfx_usbd_setup_stall+0xc>)
    73da:	2201      	movs	r2, #1
    73dc:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    73de:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    73e0:	4770      	bx	lr
    73e2:	bf00      	nop
    73e4:	50036054 	.word	0x50036054

000073e8 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    73e8:	4b01      	ldr	r3, [pc, #4]	; (73f0 <nrfx_usbd_last_setup_dir_get+0x8>)
    73ea:	7818      	ldrb	r0, [r3, #0]
    73ec:	4770      	bx	lr
    73ee:	bf00      	nop
    73f0:	20001b1e 	.word	0x20001b1e

000073f4 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    73f4:	b410      	push	{r4}
	__asm__ volatile(
    73f6:	f04f 0320 	mov.w	r3, #32
    73fa:	f3ef 8411 	mrs	r4, BASEPRI
    73fe:	f383 8812 	msr	BASEPRI_MAX, r3
    7402:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_EP_BITPOS(ep);
    7406:	b243      	sxtb	r3, r0
    7408:	2b00      	cmp	r3, #0
    740a:	db1e      	blt.n	744a <nrfx_usbd_transfer_out_drop+0x56>
    740c:	2210      	movs	r2, #16
    740e:	f003 030f 	and.w	r3, r3, #15
    7412:	4413      	add	r3, r2
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    7414:	2201      	movs	r2, #1
    7416:	fa02 f303 	lsl.w	r3, r2, r3
    741a:	490d      	ldr	r1, [pc, #52]	; (7450 <nrfx_usbd_transfer_out_drop+0x5c>)
    741c:	680a      	ldr	r2, [r1, #0]
    741e:	ea22 0203 	bic.w	r2, r2, r3
    7422:	600a      	str	r2, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    7424:	f010 0f08 	tst.w	r0, #8
    7428:	d109      	bne.n	743e <nrfx_usbd_transfer_out_drop+0x4a>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    742a:	f000 000f 	and.w	r0, r0, #15
    742e:	4b09      	ldr	r3, [pc, #36]	; (7454 <nrfx_usbd_transfer_out_drop+0x60>)
    7430:	f500 7094 	add.w	r0, r0, #296	; 0x128
    7434:	2200      	movs	r2, #0
    7436:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    743a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	__asm__ volatile(
    743e:	f384 8811 	msr	BASEPRI, r4
    7442:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    7446:	bc10      	pop	{r4}
    7448:	4770      	bx	lr
    return NRFX_USBD_EP_BITPOS(ep);
    744a:	2200      	movs	r2, #0
    744c:	e7df      	b.n	740e <nrfx_usbd_transfer_out_drop+0x1a>
    744e:	bf00      	nop
    7450:	20001950 	.word	0x20001950
    7454:	50036000 	.word	0x50036000

00007458 <ev_setup_handler>:
{
    7458:	b5f0      	push	{r4, r5, r6, r7, lr}
    745a:	b083      	sub	sp, #12
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    745c:	4b5d      	ldr	r3, [pc, #372]	; (75d4 <ev_setup_handler+0x17c>)
    745e:	f8d3 4480 	ldr.w	r4, [r3, #1152]	; 0x480
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    7462:	4b5d      	ldr	r3, [pc, #372]	; (75d8 <ev_setup_handler+0x180>)
    7464:	681b      	ldr	r3, [r3, #0]
    7466:	43db      	mvns	r3, r3
    7468:	b29b      	uxth	r3, r3
    746a:	4a5c      	ldr	r2, [pc, #368]	; (75dc <ev_setup_handler+0x184>)
    746c:	6812      	ldr	r2, [r2, #0]
    746e:	4313      	orrs	r3, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    7470:	4a5b      	ldr	r2, [pc, #364]	; (75e0 <ev_setup_handler+0x188>)
    7472:	7810      	ldrb	r0, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    7474:	f992 2000 	ldrsb.w	r2, [r2]
    7478:	2a00      	cmp	r2, #0
    747a:	db2b      	blt.n	74d4 <ev_setup_handler+0x7c>
    747c:	2110      	movs	r1, #16
    747e:	f002 020f 	and.w	r2, r2, #15
    7482:	440a      	add	r2, r1
        & (1U <<ep2bit(m_last_setup_dir)))
    7484:	2101      	movs	r1, #1
    7486:	fa01 f202 	lsl.w	r2, r1, r2
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    748a:	4213      	tst	r3, r2
    748c:	d124      	bne.n	74d8 <ev_setup_handler+0x80>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    748e:	f014 0f80 	tst.w	r4, #128	; 0x80
    7492:	f040 809c 	bne.w	75ce <ev_setup_handler+0x176>
    7496:	2200      	movs	r2, #0
    m_last_setup_dir =
    7498:	4b51      	ldr	r3, [pc, #324]	; (75e0 <ev_setup_handler+0x188>)
    749a:	701a      	strb	r2, [r3, #0]
    749c:	4b4f      	ldr	r3, [pc, #316]	; (75dc <ev_setup_handler+0x184>)
    749e:	e8d3 2fef 	ldaex	r2, [r3]
    74a2:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
    74a6:	e8c3 2fe1 	stlex	r1, r2, [r3]
    74aa:	2900      	cmp	r1, #0
    74ac:	d1f7      	bne.n	749e <ev_setup_handler+0x46>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    74ae:	4a4a      	ldr	r2, [pc, #296]	; (75d8 <ev_setup_handler+0x180>)
    74b0:	6813      	ldr	r3, [r2, #0]
    74b2:	f043 0301 	orr.w	r3, r3, #1
    74b6:	6013      	str	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    74b8:	2300      	movs	r3, #0
    74ba:	f8ad 3005 	strh.w	r3, [sp, #5]
    74be:	f88d 3007 	strb.w	r3, [sp, #7]
    74c2:	2305      	movs	r3, #5
    74c4:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    74c8:	4b46      	ldr	r3, [pc, #280]	; (75e4 <ev_setup_handler+0x18c>)
    74ca:	681b      	ldr	r3, [r3, #0]
    74cc:	a801      	add	r0, sp, #4
    74ce:	4798      	blx	r3
}
    74d0:	b003      	add	sp, #12
    74d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NRFX_USBD_EP_BITPOS(ep);
    74d4:	2100      	movs	r1, #0
    74d6:	e7d2      	b.n	747e <ev_setup_handler+0x26>
	__asm__ volatile(
    74d8:	f04f 0320 	mov.w	r3, #32
    74dc:	f3ef 8611 	mrs	r6, BASEPRI
    74e0:	f383 8812 	msr	BASEPRI_MAX, r3
    74e4:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    74e8:	b243      	sxtb	r3, r0
    74ea:	2b00      	cmp	r3, #0
    74ec:	db24      	blt.n	7538 <ev_setup_handler+0xe0>
    74ee:	4d3e      	ldr	r5, [pc, #248]	; (75e8 <ev_setup_handler+0x190>)
        NRF_USBD_EP_NR_GET(ep));
    74f0:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    74f4:	eb05 1502 	add.w	r5, r5, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    74f8:	2b00      	cmp	r3, #0
    74fa:	db22      	blt.n	7542 <ev_setup_handler+0xea>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    74fc:	4a37      	ldr	r2, [pc, #220]	; (75dc <ev_setup_handler+0x184>)
    74fe:	6811      	ldr	r1, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    7500:	f003 030f 	and.w	r3, r3, #15
    7504:	f103 0210 	add.w	r2, r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    7508:	2301      	movs	r3, #1
    750a:	4093      	lsls	r3, r2
    750c:	ea33 0201 	bics.w	r2, r3, r1
    7510:	d114      	bne.n	753c <ev_setup_handler+0xe4>
            p_state->handler.consumer = NULL;
    7512:	2200      	movs	r2, #0
    7514:	602a      	str	r2, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7516:	4931      	ldr	r1, [pc, #196]	; (75dc <ev_setup_handler+0x184>)
    7518:	680a      	ldr	r2, [r1, #0]
    751a:	ea22 0203 	bic.w	r2, r2, r3
    751e:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    7520:	492d      	ldr	r1, [pc, #180]	; (75d8 <ev_setup_handler+0x180>)
    7522:	680a      	ldr	r2, [r1, #0]
    7524:	ea22 0303 	bic.w	r3, r2, r3
    7528:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    752a:	2303      	movs	r3, #3
    752c:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
    752e:	f386 8811 	msr	BASEPRI, r6
    7532:	f3bf 8f6f 	isb	sy
}
    7536:	e7aa      	b.n	748e <ev_setup_handler+0x36>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    7538:	4d2c      	ldr	r5, [pc, #176]	; (75ec <ev_setup_handler+0x194>)
    753a:	e7d9      	b.n	74f0 <ev_setup_handler+0x98>
            nrfx_usbd_transfer_out_drop(ep);
    753c:	f7ff ff5a 	bl	73f4 <nrfx_usbd_transfer_out_drop>
    7540:	e7f3      	b.n	752a <ev_setup_handler+0xd2>
        if(!NRF_USBD_EPISO_CHECK(ep))
    7542:	f010 0f08 	tst.w	r0, #8
    7546:	d10f      	bne.n	7568 <ev_setup_handler+0x110>
            if(ep != NRFX_USBD_EPIN0)
    7548:	2880      	cmp	r0, #128	; 0x80
    754a:	d032      	beq.n	75b2 <ev_setup_handler+0x15a>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    754c:	f202 32da 	addw	r2, r2, #986	; 0x3da
    7550:	0052      	lsls	r2, r2, #1
    7552:	4927      	ldr	r1, [pc, #156]	; (75f0 <ev_setup_handler+0x198>)
    7554:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7556:	3104      	adds	r1, #4
    7558:	680a      	ldr	r2, [r1, #0]
    755a:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    755c:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    7560:	680f      	ldr	r7, [r1, #0]
    7562:	433a      	orrs	r2, r7
    7564:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    7566:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    7568:	4a1b      	ldr	r2, [pc, #108]	; (75d8 <ev_setup_handler+0x180>)
    756a:	6811      	ldr	r1, [r2, #0]
    756c:	4a1b      	ldr	r2, [pc, #108]	; (75dc <ev_setup_handler+0x184>)
    756e:	6817      	ldr	r7, [r2, #0]
    7570:	ea67 0c01 	orn	ip, r7, r1
    return NRFX_USBD_EP_BITPOS(ep);
    7574:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    7578:	2201      	movs	r2, #1
    757a:	fa02 f303 	lsl.w	r3, r2, r3
    757e:	ea1c 0f03 	tst.w	ip, r3
    7582:	d0d4      	beq.n	752e <ev_setup_handler+0xd6>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7584:	ea27 0703 	bic.w	r7, r7, r3
    7588:	4a14      	ldr	r2, [pc, #80]	; (75dc <ev_setup_handler+0x184>)
    758a:	6017      	str	r7, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    758c:	430b      	orrs	r3, r1
    758e:	4a12      	ldr	r2, [pc, #72]	; (75d8 <ev_setup_handler+0x180>)
    7590:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    7592:	2300      	movs	r3, #0
    7594:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    7596:	2303      	movs	r3, #3
    7598:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    759a:	2206      	movs	r2, #6
    759c:	f88d 2000 	strb.w	r2, [sp]
    75a0:	f88d 0002 	strb.w	r0, [sp, #2]
    75a4:	f88d 3003 	strb.w	r3, [sp, #3]
            m_event_handler(&evt);
    75a8:	4b0e      	ldr	r3, [pc, #56]	; (75e4 <ev_setup_handler+0x18c>)
    75aa:	681b      	ldr	r3, [r3, #0]
    75ac:	4668      	mov	r0, sp
    75ae:	4798      	blx	r3
    75b0:	e7bd      	b.n	752e <ev_setup_handler+0xd6>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    75b2:	4a0f      	ldr	r2, [pc, #60]	; (75f0 <ev_setup_handler+0x198>)
    75b4:	f240 71b4 	movw	r1, #1972	; 0x7b4
    75b8:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    75ba:	490e      	ldr	r1, [pc, #56]	; (75f4 <ev_setup_handler+0x19c>)
    75bc:	680a      	ldr	r2, [r1, #0]
    75be:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    75c0:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    75c4:	680f      	ldr	r7, [r1, #0]
    75c6:	433a      	orrs	r2, r7
    75c8:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    75ca:	680a      	ldr	r2, [r1, #0]
    75cc:	e7cc      	b.n	7568 <ev_setup_handler+0x110>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    75ce:	2280      	movs	r2, #128	; 0x80
    75d0:	e762      	b.n	7498 <ev_setup_handler+0x40>
    75d2:	bf00      	nop
    75d4:	50036000 	.word	0x50036000
    75d8:	20001950 	.word	0x20001950
    75dc:	200018e0 	.word	0x200018e0
    75e0:	20001b1e 	.word	0x20001b1e
    75e4:	20001a74 	.word	0x20001a74
    75e8:	20001954 	.word	0x20001954
    75ec:	200019e4 	.word	0x200019e4
    75f0:	50036800 	.word	0x50036800
    75f4:	50036804 	.word	0x50036804

000075f8 <nrfx_usbd_irq_handler>:
{
    75f8:	b570      	push	{r4, r5, r6, lr}
    return p_reg->INTENSET;
    75fa:	4b1d      	ldr	r3, [pc, #116]	; (7670 <nrfx_usbd_irq_handler+0x78>)
    75fc:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    uint32_t active = 0;
    7600:	2400      	movs	r4, #0
    while (to_process)
    7602:	e003      	b.n	760c <nrfx_usbd_irq_handler+0x14>
        to_process &= ~(1UL << event_nr);
    7604:	2301      	movs	r3, #1
    7606:	408b      	lsls	r3, r1
    7608:	ea22 0203 	bic.w	r2, r2, r3
    while (to_process)
    760c:	b1aa      	cbz	r2, 763a <nrfx_usbd_irq_handler+0x42>
        if (nrf_usbd_event_get_and_clear(NRF_USBD,
    760e:	fa92 f1a2 	rbit	r1, r2
    7612:	fab1 f181 	clz	r1, r1
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    7616:	f101 0340 	add.w	r3, r1, #64	; 0x40
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    761a:	009b      	lsls	r3, r3, #2
    761c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    7620:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7624:	6818      	ldr	r0, [r3, #0]
    if (ret)
    7626:	b110      	cbz	r0, 762e <nrfx_usbd_irq_handler+0x36>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    7628:	2500      	movs	r5, #0
    762a:	601d      	str	r5, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    762c:	681b      	ldr	r3, [r3, #0]
    762e:	2800      	cmp	r0, #0
    7630:	d0e8      	beq.n	7604 <nrfx_usbd_irq_handler+0xc>
            active |= 1UL << event_nr;
    7632:	2301      	movs	r3, #1
    7634:	408b      	lsls	r3, r1
    7636:	431c      	orrs	r4, r3
    7638:	e7e4      	b.n	7604 <nrfx_usbd_irq_handler+0xc>
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    763a:	f404 0600 	and.w	r6, r4, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    763e:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
    while (active)
    7642:	e00b      	b.n	765c <nrfx_usbd_irq_handler+0x64>
        m_isr[event_nr]();
    7644:	fa94 f5a4 	rbit	r5, r4
    7648:	fab5 f585 	clz	r5, r5
    764c:	4b09      	ldr	r3, [pc, #36]	; (7674 <nrfx_usbd_irq_handler+0x7c>)
    764e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    7652:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    7654:	2301      	movs	r3, #1
    7656:	40ab      	lsls	r3, r5
    7658:	ea24 0403 	bic.w	r4, r4, r3
    while (active)
    765c:	2c00      	cmp	r4, #0
    765e:	d1f1      	bne.n	7644 <nrfx_usbd_irq_handler+0x4c>
    usbd_dmareq_process();
    7660:	f7ff fb2a 	bl	6cb8 <usbd_dmareq_process>
    if (setup_active)
    7664:	b906      	cbnz	r6, 7668 <nrfx_usbd_irq_handler+0x70>
}
    7666:	bd70      	pop	{r4, r5, r6, pc}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    7668:	f7ff fef6 	bl	7458 <ev_setup_handler>
}
    766c:	e7fb      	b.n	7666 <nrfx_usbd_irq_handler+0x6e>
    766e:	bf00      	nop
    7670:	50036000 	.word	0x50036000
    7674:	0000c724 	.word	0x0000c724

00007678 <nrfx_usbd_ep_enable>:
{
    7678:	b538      	push	{r3, r4, r5, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    767a:	b244      	sxtb	r4, r0
    767c:	2c00      	cmp	r4, #0
    767e:	db22      	blt.n	76c6 <nrfx_usbd_ep_enable+0x4e>
    7680:	4b26      	ldr	r3, [pc, #152]	; (771c <nrfx_usbd_ep_enable+0xa4>)
    7682:	f000 010f 	and.w	r1, r0, #15
    7686:	5c5a      	ldrb	r2, [r3, r1]
    7688:	2301      	movs	r3, #1
    768a:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
    768c:	4a24      	ldr	r2, [pc, #144]	; (7720 <nrfx_usbd_ep_enable+0xa8>)
    768e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
    7692:	2c00      	cmp	r4, #0
    7694:	db19      	blt.n	76ca <nrfx_usbd_ep_enable+0x52>
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    7696:	4b22      	ldr	r3, [pc, #136]	; (7720 <nrfx_usbd_ep_enable+0xa8>)
    7698:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
    769c:	40cb      	lsrs	r3, r1
    769e:	f003 0301 	and.w	r3, r3, #1
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    76a2:	b97b      	cbnz	r3, 76c4 <nrfx_usbd_ep_enable+0x4c>
    if (NRF_USBD_EPIN_CHECK(ep))
    76a4:	2c00      	cmp	r4, #0
    76a6:	db16      	blt.n	76d6 <nrfx_usbd_ep_enable+0x5e>
        p_reg->EPOUTEN |= 1UL << epnr;
    76a8:	4d1d      	ldr	r5, [pc, #116]	; (7720 <nrfx_usbd_ep_enable+0xa8>)
    76aa:	f8d5 3514 	ldr.w	r3, [r5, #1300]	; 0x514
    76ae:	2201      	movs	r2, #1
    76b0:	408a      	lsls	r2, r1
    76b2:	4313      	orrs	r3, r2
    76b4:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    76b8:	b121      	cbz	r1, 76c4 <nrfx_usbd_ep_enable+0x4c>
    76ba:	2c00      	cmp	r4, #0
    76bc:	db02      	blt.n	76c4 <nrfx_usbd_ep_enable+0x4c>
        NRF_USBD_EPOUT_CHECK(ep) &&
    76be:	f010 0f08 	tst.w	r0, #8
    76c2:	d011      	beq.n	76e8 <nrfx_usbd_ep_enable+0x70>
}
    76c4:	bd38      	pop	{r3, r4, r5, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    76c6:	4b17      	ldr	r3, [pc, #92]	; (7724 <nrfx_usbd_ep_enable+0xac>)
    76c8:	e7db      	b.n	7682 <nrfx_usbd_ep_enable+0xa>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    76ca:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    76ce:	40cb      	lsrs	r3, r1
    76d0:	f003 0301 	and.w	r3, r3, #1
    76d4:	e7e5      	b.n	76a2 <nrfx_usbd_ep_enable+0x2a>
        p_reg->EPINEN |= 1UL << epnr;
    76d6:	4d12      	ldr	r5, [pc, #72]	; (7720 <nrfx_usbd_ep_enable+0xa8>)
    76d8:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    76dc:	2201      	movs	r2, #1
    76de:	408a      	lsls	r2, r1
    76e0:	4313      	orrs	r3, r2
    76e2:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
    76e6:	e7e7      	b.n	76b8 <nrfx_usbd_ep_enable+0x40>
	__asm__ volatile(
    76e8:	f04f 0320 	mov.w	r3, #32
    76ec:	f3ef 8511 	mrs	r5, BASEPRI
    76f0:	f383 8812 	msr	BASEPRI_MAX, r3
    76f4:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    76f8:	f7ff fe7c 	bl	73f4 <nrfx_usbd_transfer_out_drop>
    return NRFX_USBD_EP_BITPOS(ep);
    76fc:	f004 040f 	and.w	r4, r4, #15
    7700:	3410      	adds	r4, #16
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7702:	2301      	movs	r3, #1
    7704:	fa03 f404 	lsl.w	r4, r3, r4
    7708:	4a07      	ldr	r2, [pc, #28]	; (7728 <nrfx_usbd_ep_enable+0xb0>)
    770a:	6813      	ldr	r3, [r2, #0]
    770c:	ea23 0304 	bic.w	r3, r3, r4
    7710:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    7712:	f385 8811 	msr	BASEPRI, r5
    7716:	f3bf 8f6f 	isb	sy
}
    771a:	e7d3      	b.n	76c4 <nrfx_usbd_ep_enable+0x4c>
    771c:	0000c704 	.word	0x0000c704
    7720:	50036000 	.word	0x50036000
    7724:	0000c6e4 	.word	0x0000c6e4
    7728:	200018e0 	.word	0x200018e0

0000772c <nrfx_usbd_ep_stall_clear>:
{
    772c:	b510      	push	{r4, lr}
    772e:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    7730:	f010 0f80 	tst.w	r0, #128	; 0x80
    7734:	d003      	beq.n	773e <nrfx_usbd_ep_stall_clear+0x12>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    7736:	4b06      	ldr	r3, [pc, #24]	; (7750 <nrfx_usbd_ep_stall_clear+0x24>)
    7738:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    773c:	bd10      	pop	{r4, pc}
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    773e:	f7ff fda1 	bl	7284 <nrfx_usbd_ep_stall_check>
    7742:	2800      	cmp	r0, #0
    7744:	d0f7      	beq.n	7736 <nrfx_usbd_ep_stall_clear+0xa>
        nrfx_usbd_transfer_out_drop(ep);
    7746:	4620      	mov	r0, r4
    7748:	f7ff fe54 	bl	73f4 <nrfx_usbd_transfer_out_drop>
    774c:	e7f3      	b.n	7736 <nrfx_usbd_ep_stall_clear+0xa>
    774e:	bf00      	nop
    7750:	50036000 	.word	0x50036000

00007754 <usbd_ep_abort_all>:
{
    7754:	b5f0      	push	{r4, r5, r6, r7, lr}
    7756:	b083      	sub	sp, #12
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    7758:	4b53      	ldr	r3, [pc, #332]	; (78a8 <usbd_ep_abort_all+0x154>)
    775a:	885b      	ldrh	r3, [r3, #2]
    775c:	4a53      	ldr	r2, [pc, #332]	; (78ac <usbd_ep_abort_all+0x158>)
    775e:	6814      	ldr	r4, [r2, #0]
    7760:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    while (0 != ep_waiting)
    7764:	e00a      	b.n	777c <usbd_ep_abort_all+0x28>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7766:	f045 0080 	orr.w	r0, r5, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    776a:	f010 0f08 	tst.w	r0, #8
    776e:	d012      	beq.n	7796 <usbd_ep_abort_all+0x42>
        ep_waiting &= ~(1U << bitpos);
    7770:	b2eb      	uxtb	r3, r5
    7772:	2201      	movs	r2, #1
    7774:	fa02 f303 	lsl.w	r3, r2, r3
    7778:	ea24 0403 	bic.w	r4, r4, r3
    while (0 != ep_waiting)
    777c:	2c00      	cmp	r4, #0
    777e:	f000 808c 	beq.w	789a <usbd_ep_abort_all+0x146>
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    7782:	fa94 f5a4 	rbit	r5, r4
    7786:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    778a:	2d0f      	cmp	r5, #15
    778c:	d9eb      	bls.n	7766 <usbd_ep_abort_all+0x12>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    778e:	f1a5 0010 	sub.w	r0, r5, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7792:	b2c0      	uxtb	r0, r0
    7794:	e7e9      	b.n	776a <usbd_ep_abort_all+0x16>
	__asm__ volatile(
    7796:	f04f 0320 	mov.w	r3, #32
    779a:	f3ef 8711 	mrs	r7, BASEPRI
    779e:	f383 8812 	msr	BASEPRI_MAX, r3
    77a2:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    77a6:	b243      	sxtb	r3, r0
    77a8:	2b00      	cmp	r3, #0
    77aa:	db24      	blt.n	77f6 <usbd_ep_abort_all+0xa2>
    77ac:	4e40      	ldr	r6, [pc, #256]	; (78b0 <usbd_ep_abort_all+0x15c>)
        NRF_USBD_EP_NR_GET(ep));
    77ae:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    77b2:	eb06 1602 	add.w	r6, r6, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    77b6:	2b00      	cmp	r3, #0
    77b8:	db22      	blt.n	7800 <usbd_ep_abort_all+0xac>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    77ba:	4a3c      	ldr	r2, [pc, #240]	; (78ac <usbd_ep_abort_all+0x158>)
    77bc:	6811      	ldr	r1, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    77be:	f003 030f 	and.w	r3, r3, #15
    77c2:	f103 0210 	add.w	r2, r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    77c6:	2301      	movs	r3, #1
    77c8:	4093      	lsls	r3, r2
    77ca:	ea33 0201 	bics.w	r2, r3, r1
    77ce:	d114      	bne.n	77fa <usbd_ep_abort_all+0xa6>
            p_state->handler.consumer = NULL;
    77d0:	2200      	movs	r2, #0
    77d2:	6032      	str	r2, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    77d4:	4935      	ldr	r1, [pc, #212]	; (78ac <usbd_ep_abort_all+0x158>)
    77d6:	680a      	ldr	r2, [r1, #0]
    77d8:	ea22 0203 	bic.w	r2, r2, r3
    77dc:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    77de:	4932      	ldr	r1, [pc, #200]	; (78a8 <usbd_ep_abort_all+0x154>)
    77e0:	680a      	ldr	r2, [r1, #0]
    77e2:	ea22 0303 	bic.w	r3, r2, r3
    77e6:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    77e8:	2303      	movs	r3, #3
    77ea:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    77ec:	f387 8811 	msr	BASEPRI, r7
    77f0:	f3bf 8f6f 	isb	sy
}
    77f4:	e7bc      	b.n	7770 <usbd_ep_abort_all+0x1c>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    77f6:	4e2f      	ldr	r6, [pc, #188]	; (78b4 <usbd_ep_abort_all+0x160>)
    77f8:	e7d9      	b.n	77ae <usbd_ep_abort_all+0x5a>
            nrfx_usbd_transfer_out_drop(ep);
    77fa:	f7ff fdfb 	bl	73f4 <nrfx_usbd_transfer_out_drop>
    77fe:	e7f3      	b.n	77e8 <usbd_ep_abort_all+0x94>
        if(!NRF_USBD_EPISO_CHECK(ep))
    7800:	f010 0f08 	tst.w	r0, #8
    7804:	d111      	bne.n	782a <usbd_ep_abort_all+0xd6>
            if(ep != NRFX_USBD_EPIN0)
    7806:	2880      	cmp	r0, #128	; 0x80
    7808:	d037      	beq.n	787a <usbd_ep_abort_all+0x126>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    780a:	f202 32da 	addw	r2, r2, #986	; 0x3da
    780e:	0052      	lsls	r2, r2, #1
    7810:	4929      	ldr	r1, [pc, #164]	; (78b8 <usbd_ep_abort_all+0x164>)
    7812:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7814:	3104      	adds	r1, #4
    7816:	680a      	ldr	r2, [r1, #0]
    7818:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    781a:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    781e:	f8d1 c000 	ldr.w	ip, [r1]
    7822:	ea42 020c 	orr.w	r2, r2, ip
    7826:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    7828:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    782a:	4a1f      	ldr	r2, [pc, #124]	; (78a8 <usbd_ep_abort_all+0x154>)
    782c:	6811      	ldr	r1, [r2, #0]
    782e:	4a1f      	ldr	r2, [pc, #124]	; (78ac <usbd_ep_abort_all+0x158>)
    7830:	f8d2 c000 	ldr.w	ip, [r2]
    7834:	ea6c 0e01 	orn	lr, ip, r1
    return NRFX_USBD_EP_BITPOS(ep);
    7838:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    783c:	2201      	movs	r2, #1
    783e:	fa02 f303 	lsl.w	r3, r2, r3
    7842:	ea1e 0f03 	tst.w	lr, r3
    7846:	d0d1      	beq.n	77ec <usbd_ep_abort_all+0x98>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7848:	ea2c 0203 	bic.w	r2, ip, r3
    784c:	f8df c05c 	ldr.w	ip, [pc, #92]	; 78ac <usbd_ep_abort_all+0x158>
    7850:	f8cc 2000 	str.w	r2, [ip]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    7854:	430b      	orrs	r3, r1
    7856:	4a14      	ldr	r2, [pc, #80]	; (78a8 <usbd_ep_abort_all+0x154>)
    7858:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    785a:	2300      	movs	r3, #0
    785c:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    785e:	2303      	movs	r3, #3
    7860:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    7862:	2206      	movs	r2, #6
    7864:	f88d 2004 	strb.w	r2, [sp, #4]
    7868:	f88d 0006 	strb.w	r0, [sp, #6]
    786c:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    7870:	4b12      	ldr	r3, [pc, #72]	; (78bc <usbd_ep_abort_all+0x168>)
    7872:	681b      	ldr	r3, [r3, #0]
    7874:	a801      	add	r0, sp, #4
    7876:	4798      	blx	r3
    7878:	e7b8      	b.n	77ec <usbd_ep_abort_all+0x98>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    787a:	4a0f      	ldr	r2, [pc, #60]	; (78b8 <usbd_ep_abort_all+0x164>)
    787c:	f240 71b4 	movw	r1, #1972	; 0x7b4
    7880:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7882:	490f      	ldr	r1, [pc, #60]	; (78c0 <usbd_ep_abort_all+0x16c>)
    7884:	680a      	ldr	r2, [r1, #0]
    7886:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    7888:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    788c:	f8d1 c000 	ldr.w	ip, [r1]
    7890:	ea42 020c 	orr.w	r2, r2, ip
    7894:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    7896:	680a      	ldr	r2, [r1, #0]
    7898:	e7c7      	b.n	782a <usbd_ep_abort_all+0xd6>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    789a:	4b03      	ldr	r3, [pc, #12]	; (78a8 <usbd_ep_abort_all+0x154>)
    789c:	f240 12ff 	movw	r2, #511	; 0x1ff
    78a0:	601a      	str	r2, [r3, #0]
}
    78a2:	b003      	add	sp, #12
    78a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    78a6:	bf00      	nop
    78a8:	20001950 	.word	0x20001950
    78ac:	200018e0 	.word	0x200018e0
    78b0:	20001954 	.word	0x20001954
    78b4:	200019e4 	.word	0x200019e4
    78b8:	50036800 	.word	0x50036800
    78bc:	20001a74 	.word	0x20001a74
    78c0:	50036804 	.word	0x50036804

000078c4 <nrfx_usbd_stop>:
{
    78c4:	b510      	push	{r4, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    78c6:	4b0d      	ldr	r3, [pc, #52]	; (78fc <nrfx_usbd_stop+0x38>)
    78c8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    78cc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    78d0:	2036      	movs	r0, #54	; 0x36
    78d2:	f7fa ffaf 	bl	2834 <arch_irq_is_enabled>
    78d6:	b900      	cbnz	r0, 78da <nrfx_usbd_stop+0x16>
}
    78d8:	bd10      	pop	{r4, pc}
        usbd_ep_abort_all();
    78da:	f7ff ff3b 	bl	7754 <usbd_ep_abort_all>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    78de:	4c08      	ldr	r4, [pc, #32]	; (7900 <nrfx_usbd_stop+0x3c>)
    78e0:	2300      	movs	r3, #0
    78e2:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    78e6:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
    78ea:	2036      	movs	r0, #54	; 0x36
    78ec:	f7fa ff8e 	bl	280c <arch_irq_disable>
    p_reg->INTENCLR = mask;
    78f0:	f04f 33ff 	mov.w	r3, #4294967295
    78f4:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    78f8:	e7ee      	b.n	78d8 <nrfx_usbd_stop+0x14>
    78fa:	bf00      	nop
    78fc:	e000e100 	.word	0xe000e100
    7900:	50036000 	.word	0x50036000

00007904 <nrfx_usbd_disable>:
{
    7904:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    7906:	f7ff ffdd 	bl	78c4 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    790a:	4b0b      	ldr	r3, [pc, #44]	; (7938 <nrfx_usbd_disable+0x34>)
    790c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    7910:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    7914:	2200      	movs	r2, #0
    7916:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    791a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    791e:	f003 fedb 	bl	b6d8 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    7922:	b110      	cbz	r0, 792a <nrfx_usbd_disable+0x26>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    7924:	4b05      	ldr	r3, [pc, #20]	; (793c <nrfx_usbd_disable+0x38>)
    7926:	2200      	movs	r2, #0
    7928:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    792a:	4b05      	ldr	r3, [pc, #20]	; (7940 <nrfx_usbd_disable+0x3c>)
    792c:	2200      	movs	r2, #0
    792e:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    7930:	4b04      	ldr	r3, [pc, #16]	; (7944 <nrfx_usbd_disable+0x40>)
    7932:	2201      	movs	r2, #1
    7934:	701a      	strb	r2, [r3, #0]
}
    7936:	bd08      	pop	{r3, pc}
    7938:	50036000 	.word	0x50036000
    793c:	40027c1c 	.word	0x40027c1c
    7940:	20001b1c 	.word	0x20001b1c
    7944:	20001b1d 	.word	0x20001b1d

00007948 <nrfx_usbd_suspend>:
{
    7948:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    794a:	f04f 0320 	mov.w	r3, #32
    794e:	f3ef 8511 	mrs	r5, BASEPRI
    7952:	f383 8812 	msr	BASEPRI_MAX, r3
    7956:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    795a:	4b13      	ldr	r3, [pc, #76]	; (79a8 <nrfx_usbd_suspend+0x60>)
    795c:	781b      	ldrb	r3, [r3, #0]
    795e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    7962:	b92b      	cbnz	r3, 7970 <nrfx_usbd_suspend+0x28>
	__asm__ volatile(
    7964:	f385 8811 	msr	BASEPRI, r5
    7968:	f3bf 8f6f 	isb	sy
}
    796c:	4620      	mov	r0, r4
    796e:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    7970:	f7ff fef0 	bl	7754 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    7974:	4b0d      	ldr	r3, [pc, #52]	; (79ac <nrfx_usbd_suspend+0x64>)
    7976:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    797a:	f413 7f00 	tst.w	r3, #512	; 0x200
    797e:	d111      	bne.n	79a4 <nrfx_usbd_suspend+0x5c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    7980:	4b0a      	ldr	r3, [pc, #40]	; (79ac <nrfx_usbd_suspend+0x64>)
    7982:	2201      	movs	r2, #1
    7984:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    7988:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    798c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    7990:	f413 7f00 	tst.w	r3, #512	; 0x200
    7994:	d0e6      	beq.n	7964 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    7996:	4b05      	ldr	r3, [pc, #20]	; (79ac <nrfx_usbd_suspend+0x64>)
    7998:	2400      	movs	r4, #0
    799a:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    799e:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
}
    79a2:	e7df      	b.n	7964 <nrfx_usbd_suspend+0x1c>
    bool suspended = false;
    79a4:	2400      	movs	r4, #0
    79a6:	e7dd      	b.n	7964 <nrfx_usbd_suspend+0x1c>
    79a8:	20001b1b 	.word	0x20001b1b
    79ac:	50036000 	.word	0x50036000

000079b0 <nrfx_usbd_ep_abort>:
{
    79b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    79b2:	b083      	sub	sp, #12
	__asm__ volatile(
    79b4:	f04f 0320 	mov.w	r3, #32
    79b8:	f3ef 8511 	mrs	r5, BASEPRI
    79bc:	f383 8812 	msr	BASEPRI_MAX, r3
    79c0:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    79c4:	b243      	sxtb	r3, r0
    79c6:	2b00      	cmp	r3, #0
    79c8:	db25      	blt.n	7a16 <nrfx_usbd_ep_abort+0x66>
    79ca:	4c38      	ldr	r4, [pc, #224]	; (7aac <nrfx_usbd_ep_abort+0xfc>)
        NRF_USBD_EP_NR_GET(ep));
    79cc:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    79d0:	eb04 1402 	add.w	r4, r4, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    79d4:	2b00      	cmp	r3, #0
    79d6:	db23      	blt.n	7a20 <nrfx_usbd_ep_abort+0x70>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    79d8:	4a35      	ldr	r2, [pc, #212]	; (7ab0 <nrfx_usbd_ep_abort+0x100>)
    79da:	6811      	ldr	r1, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    79dc:	f003 030f 	and.w	r3, r3, #15
    79e0:	f103 0210 	add.w	r2, r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    79e4:	2301      	movs	r3, #1
    79e6:	4093      	lsls	r3, r2
    79e8:	ea33 0201 	bics.w	r2, r3, r1
    79ec:	d115      	bne.n	7a1a <nrfx_usbd_ep_abort+0x6a>
            p_state->handler.consumer = NULL;
    79ee:	2200      	movs	r2, #0
    79f0:	6022      	str	r2, [r4, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    79f2:	492f      	ldr	r1, [pc, #188]	; (7ab0 <nrfx_usbd_ep_abort+0x100>)
    79f4:	680a      	ldr	r2, [r1, #0]
    79f6:	ea22 0203 	bic.w	r2, r2, r3
    79fa:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    79fc:	492d      	ldr	r1, [pc, #180]	; (7ab4 <nrfx_usbd_ep_abort+0x104>)
    79fe:	680a      	ldr	r2, [r1, #0]
    7a00:	ea22 0303 	bic.w	r3, r2, r3
    7a04:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    7a06:	2303      	movs	r3, #3
    7a08:	73a3      	strb	r3, [r4, #14]
	__asm__ volatile(
    7a0a:	f385 8811 	msr	BASEPRI, r5
    7a0e:	f3bf 8f6f 	isb	sy
}
    7a12:	b003      	add	sp, #12
    7a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    7a16:	4c28      	ldr	r4, [pc, #160]	; (7ab8 <nrfx_usbd_ep_abort+0x108>)
    7a18:	e7d8      	b.n	79cc <nrfx_usbd_ep_abort+0x1c>
            nrfx_usbd_transfer_out_drop(ep);
    7a1a:	f7ff fceb 	bl	73f4 <nrfx_usbd_transfer_out_drop>
    7a1e:	e7f2      	b.n	7a06 <nrfx_usbd_ep_abort+0x56>
        if(!NRF_USBD_EPISO_CHECK(ep))
    7a20:	f010 0f08 	tst.w	r0, #8
    7a24:	d10f      	bne.n	7a46 <nrfx_usbd_ep_abort+0x96>
            if(ep != NRFX_USBD_EPIN0)
    7a26:	2880      	cmp	r0, #128	; 0x80
    7a28:	d031      	beq.n	7a8e <nrfx_usbd_ep_abort+0xde>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    7a2a:	f202 32da 	addw	r2, r2, #986	; 0x3da
    7a2e:	0052      	lsls	r2, r2, #1
    7a30:	4922      	ldr	r1, [pc, #136]	; (7abc <nrfx_usbd_ep_abort+0x10c>)
    7a32:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7a34:	3104      	adds	r1, #4
    7a36:	680a      	ldr	r2, [r1, #0]
    7a38:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    7a3a:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    7a3e:	680e      	ldr	r6, [r1, #0]
    7a40:	4332      	orrs	r2, r6
    7a42:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    7a44:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    7a46:	4a1b      	ldr	r2, [pc, #108]	; (7ab4 <nrfx_usbd_ep_abort+0x104>)
    7a48:	6811      	ldr	r1, [r2, #0]
    7a4a:	4a19      	ldr	r2, [pc, #100]	; (7ab0 <nrfx_usbd_ep_abort+0x100>)
    7a4c:	6816      	ldr	r6, [r2, #0]
    7a4e:	ea66 0701 	orn	r7, r6, r1
    return NRFX_USBD_EP_BITPOS(ep);
    7a52:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    7a56:	2201      	movs	r2, #1
    7a58:	fa02 f303 	lsl.w	r3, r2, r3
    7a5c:	421f      	tst	r7, r3
    7a5e:	d0d4      	beq.n	7a0a <nrfx_usbd_ep_abort+0x5a>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7a60:	ea26 0603 	bic.w	r6, r6, r3
    7a64:	4a12      	ldr	r2, [pc, #72]	; (7ab0 <nrfx_usbd_ep_abort+0x100>)
    7a66:	6016      	str	r6, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    7a68:	430b      	orrs	r3, r1
    7a6a:	4a12      	ldr	r2, [pc, #72]	; (7ab4 <nrfx_usbd_ep_abort+0x104>)
    7a6c:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    7a6e:	2300      	movs	r3, #0
    7a70:	6023      	str	r3, [r4, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    7a72:	2303      	movs	r3, #3
    7a74:	73a3      	strb	r3, [r4, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    7a76:	2206      	movs	r2, #6
    7a78:	f88d 2004 	strb.w	r2, [sp, #4]
    7a7c:	f88d 0006 	strb.w	r0, [sp, #6]
    7a80:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    7a84:	4b0e      	ldr	r3, [pc, #56]	; (7ac0 <nrfx_usbd_ep_abort+0x110>)
    7a86:	681b      	ldr	r3, [r3, #0]
    7a88:	a801      	add	r0, sp, #4
    7a8a:	4798      	blx	r3
    7a8c:	e7bd      	b.n	7a0a <nrfx_usbd_ep_abort+0x5a>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    7a8e:	4a0b      	ldr	r2, [pc, #44]	; (7abc <nrfx_usbd_ep_abort+0x10c>)
    7a90:	f240 71b4 	movw	r1, #1972	; 0x7b4
    7a94:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7a96:	490b      	ldr	r1, [pc, #44]	; (7ac4 <nrfx_usbd_ep_abort+0x114>)
    7a98:	680a      	ldr	r2, [r1, #0]
    7a9a:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    7a9c:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    7aa0:	680e      	ldr	r6, [r1, #0]
    7aa2:	4332      	orrs	r2, r6
    7aa4:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    7aa6:	680a      	ldr	r2, [r1, #0]
    7aa8:	e7cd      	b.n	7a46 <nrfx_usbd_ep_abort+0x96>
    7aaa:	bf00      	nop
    7aac:	20001954 	.word	0x20001954
    7ab0:	200018e0 	.word	0x200018e0
    7ab4:	20001950 	.word	0x20001950
    7ab8:	200019e4 	.word	0x200019e4
    7abc:	50036800 	.word	0x50036800
    7ac0:	20001a74 	.word	0x20001a74
    7ac4:	50036804 	.word	0x50036804

00007ac8 <nrfx_usbd_ep_disable>:
{
    7ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7aca:	b083      	sub	sp, #12
    7acc:	4604      	mov	r4, r0
	__asm__ volatile(
    7ace:	f04f 0320 	mov.w	r3, #32
    7ad2:	f3ef 8611 	mrs	r6, BASEPRI
    7ad6:	f383 8812 	msr	BASEPRI_MAX, r3
    7ada:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    7ade:	b243      	sxtb	r3, r0
    7ae0:	2b00      	cmp	r3, #0
    7ae2:	db3c      	blt.n	7b5e <nrfx_usbd_ep_disable+0x96>
    7ae4:	4d49      	ldr	r5, [pc, #292]	; (7c0c <nrfx_usbd_ep_disable+0x144>)
        NRF_USBD_EP_NR_GET(ep));
    7ae6:	f004 020f 	and.w	r2, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    7aea:	eb05 1502 	add.w	r5, r5, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    7aee:	2b00      	cmp	r3, #0
    7af0:	db3b      	blt.n	7b6a <nrfx_usbd_ep_disable+0xa2>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    7af2:	4a47      	ldr	r2, [pc, #284]	; (7c10 <nrfx_usbd_ep_disable+0x148>)
    7af4:	6811      	ldr	r1, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    7af6:	f003 030f 	and.w	r3, r3, #15
    7afa:	f103 0210 	add.w	r2, r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    7afe:	2301      	movs	r3, #1
    7b00:	4093      	lsls	r3, r2
    7b02:	ea33 0201 	bics.w	r2, r3, r1
    7b06:	d12c      	bne.n	7b62 <nrfx_usbd_ep_disable+0x9a>
            p_state->handler.consumer = NULL;
    7b08:	2200      	movs	r2, #0
    7b0a:	602a      	str	r2, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7b0c:	4940      	ldr	r1, [pc, #256]	; (7c10 <nrfx_usbd_ep_disable+0x148>)
    7b0e:	680a      	ldr	r2, [r1, #0]
    7b10:	ea22 0203 	bic.w	r2, r2, r3
    7b14:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    7b16:	493f      	ldr	r1, [pc, #252]	; (7c14 <nrfx_usbd_ep_disable+0x14c>)
    7b18:	680a      	ldr	r2, [r1, #0]
    7b1a:	ea22 0303 	bic.w	r3, r2, r3
    7b1e:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    7b20:	2303      	movs	r3, #3
    7b22:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
    7b24:	f386 8811 	msr	BASEPRI, r6
    7b28:	f3bf 8f6f 	isb	sy
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    7b2c:	f004 030f 	and.w	r3, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    7b30:	b264      	sxtb	r4, r4
    7b32:	2c00      	cmp	r4, #0
    7b34:	db5e      	blt.n	7bf4 <nrfx_usbd_ep_disable+0x12c>
        p_reg->EPOUTEN &= ~(1UL << epnr);
    7b36:	4838      	ldr	r0, [pc, #224]	; (7c18 <nrfx_usbd_ep_disable+0x150>)
    7b38:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
    7b3c:	2101      	movs	r1, #1
    7b3e:	4099      	lsls	r1, r3
    7b40:	ea22 0201 	bic.w	r2, r2, r1
    7b44:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    7b48:	2c00      	cmp	r4, #0
    7b4a:	db5d      	blt.n	7c08 <nrfx_usbd_ep_disable+0x140>
    7b4c:	4a33      	ldr	r2, [pc, #204]	; (7c1c <nrfx_usbd_ep_disable+0x154>)
    7b4e:	5cd2      	ldrb	r2, [r2, r3]
    7b50:	2301      	movs	r3, #1
    7b52:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    7b54:	4a30      	ldr	r2, [pc, #192]	; (7c18 <nrfx_usbd_ep_disable+0x150>)
    7b56:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    7b5a:	b003      	add	sp, #12
    7b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    7b5e:	4d30      	ldr	r5, [pc, #192]	; (7c20 <nrfx_usbd_ep_disable+0x158>)
    7b60:	e7c1      	b.n	7ae6 <nrfx_usbd_ep_disable+0x1e>
            nrfx_usbd_transfer_out_drop(ep);
    7b62:	4620      	mov	r0, r4
    7b64:	f7ff fc46 	bl	73f4 <nrfx_usbd_transfer_out_drop>
    7b68:	e7da      	b.n	7b20 <nrfx_usbd_ep_disable+0x58>
        if(!NRF_USBD_EPISO_CHECK(ep))
    7b6a:	f014 0f08 	tst.w	r4, #8
    7b6e:	d10f      	bne.n	7b90 <nrfx_usbd_ep_disable+0xc8>
            if(ep != NRFX_USBD_EPIN0)
    7b70:	2c80      	cmp	r4, #128	; 0x80
    7b72:	d031      	beq.n	7bd8 <nrfx_usbd_ep_disable+0x110>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    7b74:	f202 32da 	addw	r2, r2, #986	; 0x3da
    7b78:	0052      	lsls	r2, r2, #1
    7b7a:	492a      	ldr	r1, [pc, #168]	; (7c24 <nrfx_usbd_ep_disable+0x15c>)
    7b7c:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7b7e:	3104      	adds	r1, #4
    7b80:	680a      	ldr	r2, [r1, #0]
    7b82:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    7b84:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    7b88:	6808      	ldr	r0, [r1, #0]
    7b8a:	4302      	orrs	r2, r0
    7b8c:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    7b8e:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    7b90:	4a20      	ldr	r2, [pc, #128]	; (7c14 <nrfx_usbd_ep_disable+0x14c>)
    7b92:	6811      	ldr	r1, [r2, #0]
    7b94:	4a1e      	ldr	r2, [pc, #120]	; (7c10 <nrfx_usbd_ep_disable+0x148>)
    7b96:	6810      	ldr	r0, [r2, #0]
    7b98:	ea60 0701 	orn	r7, r0, r1
    return NRFX_USBD_EP_BITPOS(ep);
    7b9c:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    7ba0:	2201      	movs	r2, #1
    7ba2:	fa02 f303 	lsl.w	r3, r2, r3
    7ba6:	421f      	tst	r7, r3
    7ba8:	d0bc      	beq.n	7b24 <nrfx_usbd_ep_disable+0x5c>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7baa:	ea20 0003 	bic.w	r0, r0, r3
    7bae:	4a18      	ldr	r2, [pc, #96]	; (7c10 <nrfx_usbd_ep_disable+0x148>)
    7bb0:	6010      	str	r0, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    7bb2:	430b      	orrs	r3, r1
    7bb4:	4a17      	ldr	r2, [pc, #92]	; (7c14 <nrfx_usbd_ep_disable+0x14c>)
    7bb6:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    7bb8:	2300      	movs	r3, #0
    7bba:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    7bbc:	2303      	movs	r3, #3
    7bbe:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    7bc0:	2206      	movs	r2, #6
    7bc2:	f88d 2004 	strb.w	r2, [sp, #4]
    7bc6:	f88d 4006 	strb.w	r4, [sp, #6]
    7bca:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    7bce:	4b16      	ldr	r3, [pc, #88]	; (7c28 <nrfx_usbd_ep_disable+0x160>)
    7bd0:	681b      	ldr	r3, [r3, #0]
    7bd2:	a801      	add	r0, sp, #4
    7bd4:	4798      	blx	r3
    7bd6:	e7a5      	b.n	7b24 <nrfx_usbd_ep_disable+0x5c>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    7bd8:	4a12      	ldr	r2, [pc, #72]	; (7c24 <nrfx_usbd_ep_disable+0x15c>)
    7bda:	f240 71b4 	movw	r1, #1972	; 0x7b4
    7bde:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7be0:	4912      	ldr	r1, [pc, #72]	; (7c2c <nrfx_usbd_ep_disable+0x164>)
    7be2:	680a      	ldr	r2, [r1, #0]
    7be4:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    7be6:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    7bea:	6808      	ldr	r0, [r1, #0]
    7bec:	4302      	orrs	r2, r0
    7bee:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    7bf0:	680a      	ldr	r2, [r1, #0]
    7bf2:	e7cd      	b.n	7b90 <nrfx_usbd_ep_disable+0xc8>
        p_reg->EPINEN &= ~(1UL << epnr);
    7bf4:	4808      	ldr	r0, [pc, #32]	; (7c18 <nrfx_usbd_ep_disable+0x150>)
    7bf6:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    7bfa:	2101      	movs	r1, #1
    7bfc:	4099      	lsls	r1, r3
    7bfe:	ea22 0201 	bic.w	r2, r2, r1
    7c02:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    7c06:	e79f      	b.n	7b48 <nrfx_usbd_ep_disable+0x80>
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    7c08:	4a09      	ldr	r2, [pc, #36]	; (7c30 <nrfx_usbd_ep_disable+0x168>)
    7c0a:	e7a0      	b.n	7b4e <nrfx_usbd_ep_disable+0x86>
    7c0c:	20001954 	.word	0x20001954
    7c10:	200018e0 	.word	0x200018e0
    7c14:	20001950 	.word	0x20001950
    7c18:	50036000 	.word	0x50036000
    7c1c:	0000c704 	.word	0x0000c704
    7c20:	200019e4 	.word	0x200019e4
    7c24:	50036800 	.word	0x50036800
    7c28:	20001a74 	.word	0x20001a74
    7c2c:	50036804 	.word	0x50036804
    7c30:	0000c6e4 	.word	0x0000c6e4

00007c34 <nrfx_usbreg_enable>:
    p_reg->INTENSET = mask;
    7c34:	4b02      	ldr	r3, [pc, #8]	; (7c40 <nrfx_usbreg_enable+0xc>)
    7c36:	2207      	movs	r2, #7
    7c38:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
void nrfx_usbreg_enable(void)
{
    nrf_usbreg_int_enable(NRF_USBREGULATOR, NRF_USBREG_INT_USBDETECTED |
                                            NRF_USBREG_INT_USBREMOVED  |
                                            NRF_USBREG_INT_USBPWRRDY);
}
    7c3c:	4770      	bx	lr
    7c3e:	bf00      	nop
    7c40:	50037000 	.word	0x50037000

00007c44 <nrfx_usbreg_disable>:
    p_reg->INTENCLR = mask;
    7c44:	4b02      	ldr	r3, [pc, #8]	; (7c50 <nrfx_usbreg_disable+0xc>)
    7c46:	2207      	movs	r2, #7
    7c48:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
void nrfx_usbreg_disable(void)
{
    nrf_usbreg_int_disable(NRF_USBREGULATOR, NRF_USBREG_INT_USBDETECTED |
                                             NRF_USBREG_INT_USBREMOVED  |
                                             NRF_USBREG_INT_USBPWRRDY);
}
    7c4c:	4770      	bx	lr
    7c4e:	bf00      	nop
    7c50:	50037000 	.word	0x50037000

00007c54 <nrfx_usbreg_uninit>:

void nrfx_usbreg_uninit(void)
{
    7c54:	b508      	push	{r3, lr}
    nrfx_usbreg_disable();
    7c56:	f7ff fff5 	bl	7c44 <nrfx_usbreg_disable>
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(NRF_USBREGULATOR));
    7c5a:	2037      	movs	r0, #55	; 0x37
    7c5c:	f7fa fdd6 	bl	280c <arch_irq_disable>
    m_usbevt_handler = NULL;
    7c60:	4b01      	ldr	r3, [pc, #4]	; (7c68 <nrfx_usbreg_uninit+0x14>)
    7c62:	2200      	movs	r2, #0
    7c64:	601a      	str	r2, [r3, #0]
}
    7c66:	bd08      	pop	{r3, pc}
    7c68:	20001ab8 	.word	0x20001ab8

00007c6c <nrfx_usbreg_init>:
{
    7c6c:	b510      	push	{r4, lr}
    7c6e:	4604      	mov	r4, r0
    nrfx_usbreg_uninit();
    7c70:	f7ff fff0 	bl	7c54 <nrfx_usbreg_uninit>
    m_usbevt_handler = p_config->handler;
    7c74:	6822      	ldr	r2, [r4, #0]
    7c76:	4b06      	ldr	r3, [pc, #24]	; (7c90 <nrfx_usbreg_init+0x24>)
    7c78:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7c7a:	2300      	movs	r3, #0
    7c7c:	4a05      	ldr	r2, [pc, #20]	; (7c94 <nrfx_usbreg_init+0x28>)
    7c7e:	6013      	str	r3, [r2, #0]
    7c80:	3208      	adds	r2, #8
    7c82:	6013      	str	r3, [r2, #0]
    7c84:	3a04      	subs	r2, #4
    7c86:	6013      	str	r3, [r2, #0]
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_USBREGULATOR));
    7c88:	2037      	movs	r0, #55	; 0x37
    7c8a:	f7fa fdaf 	bl	27ec <arch_irq_enable>
}
    7c8e:	bd10      	pop	{r4, pc}
    7c90:	20001ab8 	.word	0x20001ab8
    7c94:	50037100 	.word	0x50037100

00007c98 <nrfx_usbreg_irq_handler>:

void nrfx_usbreg_irq_handler(void)
{
    7c98:	b508      	push	{r3, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7c9a:	4b0f      	ldr	r3, [pc, #60]	; (7cd8 <nrfx_usbreg_irq_handler+0x40>)
    7c9c:	681b      	ldr	r3, [r3, #0]
    if (nrf_usbreg_event_check(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBDETECTED))
    7c9e:	b12b      	cbz	r3, 7cac <nrfx_usbreg_irq_handler+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7ca0:	2000      	movs	r0, #0
    7ca2:	4b0d      	ldr	r3, [pc, #52]	; (7cd8 <nrfx_usbreg_irq_handler+0x40>)
    7ca4:	6018      	str	r0, [r3, #0]
    {
        nrf_usbreg_event_clear(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBDETECTED);
        m_usbevt_handler(NRFX_USBREG_EVT_DETECTED);
    7ca6:	4b0d      	ldr	r3, [pc, #52]	; (7cdc <nrfx_usbreg_irq_handler+0x44>)
    7ca8:	681b      	ldr	r3, [r3, #0]
    7caa:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7cac:	4b0c      	ldr	r3, [pc, #48]	; (7ce0 <nrfx_usbreg_irq_handler+0x48>)
    7cae:	681b      	ldr	r3, [r3, #0]
    }
    if (nrf_usbreg_event_check(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBREMOVED))
    7cb0:	b133      	cbz	r3, 7cc0 <nrfx_usbreg_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7cb2:	4b0b      	ldr	r3, [pc, #44]	; (7ce0 <nrfx_usbreg_irq_handler+0x48>)
    7cb4:	2200      	movs	r2, #0
    7cb6:	601a      	str	r2, [r3, #0]
    {
        nrf_usbreg_event_clear(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBREMOVED);
        m_usbevt_handler(NRFX_USBREG_EVT_REMOVED);
    7cb8:	4b08      	ldr	r3, [pc, #32]	; (7cdc <nrfx_usbreg_irq_handler+0x44>)
    7cba:	681b      	ldr	r3, [r3, #0]
    7cbc:	2001      	movs	r0, #1
    7cbe:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7cc0:	4b08      	ldr	r3, [pc, #32]	; (7ce4 <nrfx_usbreg_irq_handler+0x4c>)
    7cc2:	681b      	ldr	r3, [r3, #0]
    }
    if (nrf_usbreg_event_check(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBPWRRDY))
    7cc4:	b133      	cbz	r3, 7cd4 <nrfx_usbreg_irq_handler+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7cc6:	4b07      	ldr	r3, [pc, #28]	; (7ce4 <nrfx_usbreg_irq_handler+0x4c>)
    7cc8:	2200      	movs	r2, #0
    7cca:	601a      	str	r2, [r3, #0]
    {
        nrf_usbreg_event_clear(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBPWRRDY);
        m_usbevt_handler(NRFX_USBREG_EVT_READY);
    7ccc:	4b03      	ldr	r3, [pc, #12]	; (7cdc <nrfx_usbreg_irq_handler+0x44>)
    7cce:	681b      	ldr	r3, [r3, #0]
    7cd0:	2002      	movs	r0, #2
    7cd2:	4798      	blx	r3
    }
}
    7cd4:	bd08      	pop	{r3, pc}
    7cd6:	bf00      	nop
    7cd8:	50037100 	.word	0x50037100
    7cdc:	20001ab8 	.word	0x20001ab8
    7ce0:	50037104 	.word	0x50037104
    7ce4:	50037108 	.word	0x50037108

00007ce8 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    7ce8:	4b03      	ldr	r3, [pc, #12]	; (7cf8 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    7cea:	4a04      	ldr	r2, [pc, #16]	; (7cfc <z_device_state_init+0x14>)
    7cec:	4293      	cmp	r3, r2
    7cee:	d201      	bcs.n	7cf4 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    7cf0:	3318      	adds	r3, #24
    7cf2:	e7fa      	b.n	7cea <z_device_state_init+0x2>
	}
}
    7cf4:	4770      	bx	lr
    7cf6:	bf00      	nop
    7cf8:	0000c10c 	.word	0x0000c10c
    7cfc:	0000c184 	.word	0x0000c184

00007d00 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    7d00:	b570      	push	{r4, r5, r6, lr}
    7d02:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7d04:	4b11      	ldr	r3, [pc, #68]	; (7d4c <z_sys_init_run_level+0x4c>)
    7d06:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    7d0a:	e009      	b.n	7d20 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    7d0c:	4240      	negs	r0, r0
    7d0e:	e017      	b.n	7d40 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    7d10:	68eb      	ldr	r3, [r5, #12]
    7d12:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    7d14:	68ea      	ldr	r2, [r5, #12]
    7d16:	7853      	ldrb	r3, [r2, #1]
    7d18:	f043 0301 	orr.w	r3, r3, #1
    7d1c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7d1e:	3408      	adds	r4, #8
    7d20:	1c73      	adds	r3, r6, #1
    7d22:	4a0a      	ldr	r2, [pc, #40]	; (7d4c <z_sys_init_run_level+0x4c>)
    7d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d28:	42a3      	cmp	r3, r4
    7d2a:	d90d      	bls.n	7d48 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    7d2c:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    7d2e:	6823      	ldr	r3, [r4, #0]
    7d30:	4628      	mov	r0, r5
    7d32:	4798      	blx	r3
		if (dev != NULL) {
    7d34:	2d00      	cmp	r5, #0
    7d36:	d0f2      	beq.n	7d1e <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    7d38:	2800      	cmp	r0, #0
    7d3a:	d0eb      	beq.n	7d14 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    7d3c:	2800      	cmp	r0, #0
    7d3e:	dbe5      	blt.n	7d0c <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    7d40:	28ff      	cmp	r0, #255	; 0xff
    7d42:	dde5      	ble.n	7d10 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    7d44:	20ff      	movs	r0, #255	; 0xff
    7d46:	e7e3      	b.n	7d10 <z_sys_init_run_level+0x10>
		}
	}
}
    7d48:	bd70      	pop	{r4, r5, r6, pc}
    7d4a:	bf00      	nop
    7d4c:	0000c788 	.word	0x0000c788

00007d50 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    7d50:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d52:	b089      	sub	sp, #36	; 0x24
    7d54:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    7d56:	4b15      	ldr	r3, [pc, #84]	; (7dac <init_idle_thread+0x5c>)
    7d58:	25b0      	movs	r5, #176	; 0xb0
    7d5a:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    7d5e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    7d62:	4e13      	ldr	r6, [pc, #76]	; (7db0 <init_idle_thread+0x60>)
    7d64:	eb06 1683 	add.w	r6, r6, r3, lsl #6

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    7d68:	af06      	add	r7, sp, #24
    7d6a:	4603      	mov	r3, r0
    7d6c:	4a11      	ldr	r2, [pc, #68]	; (7db4 <init_idle_thread+0x64>)
    7d6e:	2108      	movs	r1, #8
    7d70:	4638      	mov	r0, r7
    7d72:	f001 fc8f 	bl	9694 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7d76:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7d7a:	480f      	ldr	r0, [pc, #60]	; (7db8 <init_idle_thread+0x68>)
    7d7c:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    7d80:	9705      	str	r7, [sp, #20]
    7d82:	2301      	movs	r3, #1
    7d84:	9304      	str	r3, [sp, #16]
    7d86:	230f      	movs	r3, #15
    7d88:	9303      	str	r3, [sp, #12]
    7d8a:	2300      	movs	r3, #0
    7d8c:	9302      	str	r3, [sp, #8]
    7d8e:	9301      	str	r3, [sp, #4]
    7d90:	9400      	str	r4, [sp, #0]
    7d92:	4b0a      	ldr	r3, [pc, #40]	; (7dbc <init_idle_thread+0x6c>)
    7d94:	f44f 72a0 	mov.w	r2, #320	; 0x140
    7d98:	4631      	mov	r1, r6
    7d9a:	4628      	mov	r0, r5
    7d9c:	f000 f956 	bl	804c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7da0:	7b6b      	ldrb	r3, [r5, #13]
    7da2:	f023 0304 	bic.w	r3, r3, #4
    7da6:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    7da8:	b009      	add	sp, #36	; 0x24
    7daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7dac:	20000570 	.word	0x20000570
    7db0:	200028e0 	.word	0x200028e0
    7db4:	0000c7a0 	.word	0x0000c7a0
    7db8:	20001abc 	.word	0x20001abc
    7dbc:	000081b1 	.word	0x000081b1

00007dc0 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    7dc0:	b570      	push	{r4, r5, r6, lr}
    7dc2:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    7dc4:	f000 ffb2 	bl	8d2c <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    7dc8:	4d1a      	ldr	r5, [pc, #104]	; (7e34 <prepare_multithreading+0x74>)
    7dca:	4b1b      	ldr	r3, [pc, #108]	; (7e38 <prepare_multithreading+0x78>)
    7dcc:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7dce:	4b1b      	ldr	r3, [pc, #108]	; (7e3c <prepare_multithreading+0x7c>)
    7dd0:	9305      	str	r3, [sp, #20]
    7dd2:	2301      	movs	r3, #1
    7dd4:	9304      	str	r3, [sp, #16]
    7dd6:	2400      	movs	r4, #0
    7dd8:	9403      	str	r4, [sp, #12]
    7dda:	9402      	str	r4, [sp, #8]
    7ddc:	9401      	str	r4, [sp, #4]
    7dde:	9400      	str	r4, [sp, #0]
    7de0:	4b17      	ldr	r3, [pc, #92]	; (7e40 <prepare_multithreading+0x80>)
    7de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7de6:	4917      	ldr	r1, [pc, #92]	; (7e44 <prepare_multithreading+0x84>)
    7de8:	4628      	mov	r0, r5
    7dea:	f000 f92f 	bl	804c <z_setup_new_thread>
    7dee:	4606      	mov	r6, r0
    7df0:	7b6b      	ldrb	r3, [r5, #13]
    7df2:	f023 0304 	bic.w	r3, r3, #4
    7df6:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    7df8:	4628      	mov	r0, r5
    7dfa:	f003 feea 	bl	bbd2 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    7dfe:	2c00      	cmp	r4, #0
    7e00:	dd02      	ble.n	7e08 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    7e02:	4630      	mov	r0, r6
    7e04:	b006      	add	sp, #24
    7e06:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    7e08:	4620      	mov	r0, r4
    7e0a:	f7ff ffa1 	bl	7d50 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    7e0e:	4b0e      	ldr	r3, [pc, #56]	; (7e48 <prepare_multithreading+0x88>)
    7e10:	22b0      	movs	r2, #176	; 0xb0
    7e12:	fb02 3204 	mla	r2, r2, r4, r3
    7e16:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    7e1a:	4b07      	ldr	r3, [pc, #28]	; (7e38 <prepare_multithreading+0x78>)
    7e1c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    7e20:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    7e22:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    7e24:	4a09      	ldr	r2, [pc, #36]	; (7e4c <prepare_multithreading+0x8c>)
    7e26:	eb02 22c4 	add.w	r2, r2, r4, lsl #11
    7e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
		_kernel.cpus[i].irq_stack =
    7e2e:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    7e30:	3401      	adds	r4, #1
    7e32:	e7e4      	b.n	7dfe <prepare_multithreading+0x3e>
    7e34:	20000620 	.word	0x20000620
    7e38:	20001abc 	.word	0x20001abc
    7e3c:	0000c7ac 	.word	0x0000c7ac
    7e40:	00007e51 	.word	0x00007e51
    7e44:	200024e0 	.word	0x200024e0
    7e48:	20000570 	.word	0x20000570
    7e4c:	20002a20 	.word	0x20002a20

00007e50 <bg_thread_main>:
{
    7e50:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    7e52:	4b0a      	ldr	r3, [pc, #40]	; (7e7c <bg_thread_main+0x2c>)
    7e54:	2201      	movs	r2, #1
    7e56:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7e58:	2002      	movs	r0, #2
    7e5a:	f7ff ff51 	bl	7d00 <z_sys_init_run_level>
	boot_banner();
    7e5e:	f001 fa23 	bl	92a8 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    7e62:	2003      	movs	r0, #3
    7e64:	f7ff ff4c 	bl	7d00 <z_sys_init_run_level>
	z_init_static_threads();
    7e68:	f000 f954 	bl	8114 <z_init_static_threads>
	main();
    7e6c:	f7f8 faf0 	bl	450 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    7e70:	4a03      	ldr	r2, [pc, #12]	; (7e80 <bg_thread_main+0x30>)
    7e72:	7b13      	ldrb	r3, [r2, #12]
    7e74:	f023 0301 	bic.w	r3, r3, #1
    7e78:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    7e7a:	bd08      	pop	{r3, pc}
    7e7c:	20001b1f 	.word	0x20001b1f
    7e80:	20000620 	.word	0x20000620

00007e84 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    7e84:	b508      	push	{r3, lr}
    7e86:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7e88:	4a01      	ldr	r2, [pc, #4]	; (7e90 <switch_to_main_thread+0xc>)
    7e8a:	4802      	ldr	r0, [pc, #8]	; (7e94 <switch_to_main_thread+0x10>)
    7e8c:	f7fa fd90 	bl	29b0 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    7e90:	00007e51 	.word	0x00007e51
    7e94:	20000620 	.word	0x20000620

00007e98 <z_bss_zero>:
{
    7e98:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    7e9a:	4803      	ldr	r0, [pc, #12]	; (7ea8 <z_bss_zero+0x10>)
    7e9c:	4a03      	ldr	r2, [pc, #12]	; (7eac <z_bss_zero+0x14>)
    7e9e:	1a12      	subs	r2, r2, r0
    7ea0:	2100      	movs	r1, #0
    7ea2:	f002 fe54 	bl	ab4e <memset>
}
    7ea6:	bd08      	pop	{r3, pc}
    7ea8:	200003b0 	.word	0x200003b0
    7eac:	20001cdc 	.word	0x20001cdc

00007eb0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    7eb0:	b500      	push	{lr}
    7eb2:	b0ad      	sub	sp, #180	; 0xb4
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    7eb4:	4b1c      	ldr	r3, [pc, #112]	; (7f28 <z_cstart+0x78>)
	uint32_t msp =
    7eb6:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    7eba:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    7ebe:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7ec2:	4c1a      	ldr	r4, [pc, #104]	; (7f2c <z_cstart+0x7c>)
    7ec4:	23e0      	movs	r3, #224	; 0xe0
    7ec6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    7eca:	2500      	movs	r5, #0
    7ecc:	77e5      	strb	r5, [r4, #31]
    7ece:	7625      	strb	r5, [r4, #24]
    7ed0:	7665      	strb	r5, [r4, #25]
    7ed2:	76a5      	strb	r5, [r4, #26]
    7ed4:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    7ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7eda:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    7ede:	6263      	str	r3, [r4, #36]	; 0x24
    7ee0:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    7ee4:	f7fa fea2 	bl	2c2c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    7ee8:	f7fa fc62 	bl	27b0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    7eec:	f04f 33ff 	mov.w	r3, #4294967295
    7ef0:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    7ef2:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    7ef4:	f7fb f8d2 	bl	309c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    7ef8:	f7fa ff5a 	bl	2db0 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    7efc:	2401      	movs	r4, #1
    7efe:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    7f02:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    7f06:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    7f08:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    7f0a:	4b09      	ldr	r3, [pc, #36]	; (7f30 <z_cstart+0x80>)
    7f0c:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    7f10:	f7ff feea 	bl	7ce8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    7f14:	4628      	mov	r0, r5
    7f16:	f7ff fef3 	bl	7d00 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    7f1a:	4620      	mov	r0, r4
    7f1c:	f7ff fef0 	bl	7d00 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    7f20:	f7ff ff4e 	bl	7dc0 <prepare_multithreading>
    7f24:	f7ff ffae 	bl	7e84 <switch_to_main_thread>
    7f28:	20002a20 	.word	0x20002a20
    7f2c:	e000ed00 	.word	0xe000ed00
    7f30:	20001abc 	.word	0x20001abc

00007f34 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    7f34:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7f36:	4c06      	ldr	r4, [pc, #24]	; (7f50 <init_mem_slab_module+0x1c>)
	int rc = 0;
    7f38:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7f3a:	4b06      	ldr	r3, [pc, #24]	; (7f54 <init_mem_slab_module+0x20>)
    7f3c:	429c      	cmp	r4, r3
    7f3e:	d206      	bcs.n	7f4e <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    7f40:	4620      	mov	r0, r4
    7f42:	f003 fc7c 	bl	b83e <create_free_list>
		if (rc < 0) {
    7f46:	2800      	cmp	r0, #0
    7f48:	db01      	blt.n	7f4e <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7f4a:	341c      	adds	r4, #28
    7f4c:	e7f5      	b.n	7f3a <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    7f4e:	bd10      	pop	{r4, pc}
    7f50:	20000230 	.word	0x20000230
    7f54:	2000024c 	.word	0x2000024c

00007f58 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    7f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f5a:	b083      	sub	sp, #12
    7f5c:	460c      	mov	r4, r1
    7f5e:	461f      	mov	r7, r3
	__asm__ volatile(
    7f60:	f04f 0320 	mov.w	r3, #32
    7f64:	f3ef 8111 	mrs	r1, BASEPRI
    7f68:	f383 8812 	msr	BASEPRI_MAX, r3
    7f6c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    7f70:	6943      	ldr	r3, [r0, #20]
    7f72:	b16b      	cbz	r3, 7f90 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
    7f74:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    7f76:	6943      	ldr	r3, [r0, #20]
    7f78:	681b      	ldr	r3, [r3, #0]
    7f7a:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    7f7c:	6983      	ldr	r3, [r0, #24]
    7f7e:	3301      	adds	r3, #1
    7f80:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    7f82:	2000      	movs	r0, #0
	__asm__ volatile(
    7f84:	f381 8811 	msr	BASEPRI, r1
    7f88:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    7f8c:	b003      	add	sp, #12
    7f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f90:	4616      	mov	r6, r2
    7f92:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    7f96:	ea56 0307 	orrs.w	r3, r6, r7
    7f9a:	d104      	bne.n	7fa6 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
    7f9c:	2300      	movs	r3, #0
    7f9e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    7fa0:	f06f 000b 	mvn.w	r0, #11
    7fa4:	e7ee      	b.n	7f84 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    7fa6:	e9cd 6700 	strd	r6, r7, [sp]
    7faa:	4602      	mov	r2, r0
    7fac:	4628      	mov	r0, r5
    7fae:	f000 fd93 	bl	8ad8 <z_pend_curr>
		if (result == 0) {
    7fb2:	2800      	cmp	r0, #0
    7fb4:	d1ea      	bne.n	7f8c <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
    7fb6:	4b02      	ldr	r3, [pc, #8]	; (7fc0 <k_mem_slab_alloc+0x68>)
    7fb8:	689b      	ldr	r3, [r3, #8]
    7fba:	695b      	ldr	r3, [r3, #20]
    7fbc:	6023      	str	r3, [r4, #0]
		return result;
    7fbe:	e7e5      	b.n	7f8c <k_mem_slab_alloc+0x34>
    7fc0:	20001abc 	.word	0x20001abc

00007fc4 <z_thread_monitor_exit>:
	__asm__ volatile(
    7fc4:	f04f 0320 	mov.w	r3, #32
    7fc8:	f3ef 8111 	mrs	r1, BASEPRI
    7fcc:	f383 8812 	msr	BASEPRI_MAX, r3
    7fd0:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    7fd4:	4b0a      	ldr	r3, [pc, #40]	; (8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    7fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7fd8:	4283      	cmp	r3, r0
    7fda:	d104      	bne.n	7fe6 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    7fdc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    7fde:	4b08      	ldr	r3, [pc, #32]	; (8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    7fe0:	629a      	str	r2, [r3, #40]	; 0x28
    7fe2:	e007      	b.n	7ff4 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    7fe4:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    7fe6:	b113      	cbz	r3, 7fee <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    7fe8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    7fea:	4282      	cmp	r2, r0
    7fec:	d1fa      	bne.n	7fe4 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    7fee:	b10b      	cbz	r3, 7ff4 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    7ff0:	6f02      	ldr	r2, [r0, #112]	; 0x70
    7ff2:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    7ff4:	f381 8811 	msr	BASEPRI, r1
    7ff8:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    7ffc:	4770      	bx	lr
    7ffe:	bf00      	nop
    8000:	20001abc 	.word	0x20001abc

00008004 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    8004:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    8006:	4604      	mov	r4, r0
    8008:	b140      	cbz	r0, 801c <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
    800a:	2220      	movs	r2, #32
    800c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    8010:	f002 fd4d 	bl	aaae <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    8014:	2000      	movs	r0, #0
    8016:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    801a:	bd10      	pop	{r4, pc}
		thread = _current;
    801c:	4b01      	ldr	r3, [pc, #4]	; (8024 <z_impl_k_thread_name_set+0x20>)
    801e:	689c      	ldr	r4, [r3, #8]
    8020:	e7f3      	b.n	800a <z_impl_k_thread_name_set+0x6>
    8022:	bf00      	nop
    8024:	20001abc 	.word	0x20001abc

00008028 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    8028:	b538      	push	{r3, r4, r5, lr}
    802a:	4614      	mov	r4, r2
    802c:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    802e:	ea54 0305 	orrs.w	r3, r4, r5
    8032:	d102      	bne.n	803a <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    8034:	f003 fc66 	bl	b904 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    8038:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    803a:	462b      	mov	r3, r5
    803c:	4902      	ldr	r1, [pc, #8]	; (8048 <schedule_new_thread+0x20>)
    803e:	3018      	adds	r0, #24
    8040:	f000 fff2 	bl	9028 <z_add_timeout>
    8044:	e7f8      	b.n	8038 <schedule_new_thread+0x10>
    8046:	bf00      	nop
    8048:	0000bc0b 	.word	0x0000bc0b

0000804c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    804c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8050:	b085      	sub	sp, #20
    8052:	4604      	mov	r4, r0
    8054:	460f      	mov	r7, r1
    8056:	4615      	mov	r5, r2
    8058:	461e      	mov	r6, r3
    805a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    805e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    8062:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    8066:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    806a:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    806e:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    8070:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    8072:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8074:	2204      	movs	r2, #4
    8076:	9911      	ldr	r1, [sp, #68]	; 0x44
    8078:	f003 fc48 	bl	b90c <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    807c:	462a      	mov	r2, r5
    807e:	4639      	mov	r1, r7
    8080:	4620      	mov	r0, r4
    8082:	f003 fc2d 	bl	b8e0 <setup_thread_stack>
    8086:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8088:	f8cd 8008 	str.w	r8, [sp, #8]
    808c:	f8cd 9004 	str.w	r9, [sp, #4]
    8090:	f8cd a000 	str.w	sl, [sp]
    8094:	4633      	mov	r3, r6
    8096:	4602      	mov	r2, r0
    8098:	4639      	mov	r1, r7
    809a:	4620      	mov	r0, r4
    809c:	f7fa fc68 	bl	2970 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    80a0:	2300      	movs	r3, #0
    80a2:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    80a4:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    80a6:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    80aa:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    80ae:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    80b2:	f04f 0320 	mov.w	r3, #32
    80b6:	f3ef 8211 	mrs	r2, BASEPRI
    80ba:	f383 8812 	msr	BASEPRI_MAX, r3
    80be:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    80c2:	4b13      	ldr	r3, [pc, #76]	; (8110 <z_setup_new_thread+0xc4>)
    80c4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    80c6:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    80c8:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    80ca:	f382 8811 	msr	BASEPRI, r2
    80ce:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    80d2:	f1bb 0f00 	cmp.w	fp, #0
    80d6:	d013      	beq.n	8100 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    80d8:	221f      	movs	r2, #31
    80da:	4659      	mov	r1, fp
    80dc:	f104 0074 	add.w	r0, r4, #116	; 0x74
    80e0:	f002 fce5 	bl	aaae <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    80e4:	2300      	movs	r3, #0
    80e6:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    80ea:	4b09      	ldr	r3, [pc, #36]	; (8110 <z_setup_new_thread+0xc4>)
    80ec:	689b      	ldr	r3, [r3, #8]
    80ee:	b15b      	cbz	r3, 8108 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    80f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    80f4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    80f8:	4628      	mov	r0, r5
    80fa:	b005      	add	sp, #20
    80fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    8100:	2300      	movs	r3, #0
    8102:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    8106:	e7f0      	b.n	80ea <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    8108:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    810c:	e7f4      	b.n	80f8 <z_setup_new_thread+0xac>
    810e:	bf00      	nop
    8110:	20001abc 	.word	0x20001abc

00008114 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    8114:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    8118:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    811a:	4c23      	ldr	r4, [pc, #140]	; (81a8 <z_init_static_threads+0x94>)
    811c:	4b23      	ldr	r3, [pc, #140]	; (81ac <z_init_static_threads+0x98>)
    811e:	429c      	cmp	r4, r3
    8120:	d215      	bcs.n	814e <z_init_static_threads+0x3a>
		z_setup_new_thread(
    8122:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    8124:	9305      	str	r3, [sp, #20]
    8126:	6a23      	ldr	r3, [r4, #32]
    8128:	9304      	str	r3, [sp, #16]
    812a:	69e3      	ldr	r3, [r4, #28]
    812c:	9303      	str	r3, [sp, #12]
    812e:	69a3      	ldr	r3, [r4, #24]
    8130:	9302      	str	r3, [sp, #8]
    8132:	6963      	ldr	r3, [r4, #20]
    8134:	9301      	str	r3, [sp, #4]
    8136:	6923      	ldr	r3, [r4, #16]
    8138:	9300      	str	r3, [sp, #0]
    813a:	68e3      	ldr	r3, [r4, #12]
    813c:	68a2      	ldr	r2, [r4, #8]
    813e:	6861      	ldr	r1, [r4, #4]
    8140:	6820      	ldr	r0, [r4, #0]
    8142:	f7ff ff83 	bl	804c <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    8146:	6823      	ldr	r3, [r4, #0]
    8148:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    814a:	3430      	adds	r4, #48	; 0x30
    814c:	e7e6      	b.n	811c <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    814e:	f000 fb7b 	bl	8848 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    8152:	4c15      	ldr	r4, [pc, #84]	; (81a8 <z_init_static_threads+0x94>)
    8154:	e01b      	b.n	818e <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    8156:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    8158:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    815c:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
    8160:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    8164:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    8168:	03d8      	lsls	r0, r3, #15
    816a:	f240 35e7 	movw	r5, #999	; 0x3e7
    816e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8172:	2300      	movs	r3, #0
    8174:	1940      	adds	r0, r0, r5
    8176:	f04f 0500 	mov.w	r5, #0
    817a:	eb45 0101 	adc.w	r1, r5, r1
    817e:	f7f7 ffe9 	bl	154 <__aeabi_uldivmod>
    8182:	4602      	mov	r2, r0
    8184:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    8186:	4630      	mov	r0, r6
    8188:	f7ff ff4e 	bl	8028 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    818c:	3430      	adds	r4, #48	; 0x30
    818e:	4b07      	ldr	r3, [pc, #28]	; (81ac <z_init_static_threads+0x98>)
    8190:	429c      	cmp	r4, r3
    8192:	d204      	bcs.n	819e <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    8194:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8196:	f1b3 3fff 	cmp.w	r3, #4294967295
    819a:	d0f7      	beq.n	818c <z_init_static_threads+0x78>
    819c:	e7db      	b.n	8156 <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    819e:	f000 fd51 	bl	8c44 <k_sched_unlock>
}
    81a2:	b006      	add	sp, #24
    81a4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    81a8:	20000230 	.word	0x20000230
    81ac:	20000230 	.word	0x20000230

000081b0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    81b0:	b508      	push	{r3, lr}
    81b2:	e001      	b.n	81b8 <idle+0x8>
	arch_cpu_idle();
    81b4:	f7fa fb02 	bl	27bc <arch_cpu_idle>
	__asm__ volatile(
    81b8:	f04f 0220 	mov.w	r2, #32
    81bc:	f3ef 8311 	mrs	r3, BASEPRI
    81c0:	f382 8812 	msr	BASEPRI_MAX, r2
    81c4:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    81c8:	f003 fe4a 	bl	be60 <z_get_next_timeout_expiry>
    81cc:	4b03      	ldr	r3, [pc, #12]	; (81dc <idle+0x2c>)
    81ce:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    81d0:	f7fa f958 	bl	2484 <pm_system_suspend>
    81d4:	2800      	cmp	r0, #0
    81d6:	d1ef      	bne.n	81b8 <idle+0x8>
    81d8:	e7ec      	b.n	81b4 <idle+0x4>
    81da:	bf00      	nop
    81dc:	20001abc 	.word	0x20001abc

000081e0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    81e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    81e4:	b083      	sub	sp, #12
    81e6:	4604      	mov	r4, r0
    81e8:	461d      	mov	r5, r3
    81ea:	f04f 0320 	mov.w	r3, #32
    81ee:	f3ef 8711 	mrs	r7, BASEPRI
    81f2:	f383 8812 	msr	BASEPRI_MAX, r3
    81f6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    81fa:	68c1      	ldr	r1, [r0, #12]
    81fc:	b999      	cbnz	r1, 8226 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    81fe:	2900      	cmp	r1, #0
    8200:	d14f      	bne.n	82a2 <z_impl_k_mutex_lock+0xc2>
    8202:	4b3a      	ldr	r3, [pc, #232]	; (82ec <z_impl_k_mutex_lock+0x10c>)
    8204:	689b      	ldr	r3, [r3, #8]
    8206:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    820a:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    820c:	3101      	adds	r1, #1
    820e:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    8210:	4b36      	ldr	r3, [pc, #216]	; (82ec <z_impl_k_mutex_lock+0x10c>)
    8212:	689b      	ldr	r3, [r3, #8]
    8214:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    8216:	f387 8811 	msr	BASEPRI, r7
    821a:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    821e:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    8220:	b003      	add	sp, #12
    8222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8226:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    8228:	6882      	ldr	r2, [r0, #8]
    822a:	4b30      	ldr	r3, [pc, #192]	; (82ec <z_impl_k_mutex_lock+0x10c>)
    822c:	689b      	ldr	r3, [r3, #8]
    822e:	429a      	cmp	r2, r3
    8230:	d0e5      	beq.n	81fe <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    8232:	ea55 0106 	orrs.w	r1, r5, r6
    8236:	bf0c      	ite	eq
    8238:	f04f 0801 	moveq.w	r8, #1
    823c:	f04f 0800 	movne.w	r8, #0
    8240:	d031      	beq.n	82a6 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    8242:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    8246:	4649      	mov	r1, r9
    8248:	f993 000e 	ldrsb.w	r0, [r3, #14]
    824c:	f003 fb91 	bl	b972 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    8250:	4581      	cmp	r9, r0
    8252:	dc2f      	bgt.n	82b4 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    8254:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    8258:	9600      	str	r6, [sp, #0]
    825a:	9501      	str	r5, [sp, #4]
    825c:	4622      	mov	r2, r4
    825e:	4639      	mov	r1, r7
    8260:	4823      	ldr	r0, [pc, #140]	; (82f0 <z_impl_k_mutex_lock+0x110>)
    8262:	f000 fc39 	bl	8ad8 <z_pend_curr>
	if (got_mutex == 0) {
    8266:	2800      	cmp	r0, #0
    8268:	d0da      	beq.n	8220 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    826a:	f04f 0320 	mov.w	r3, #32
    826e:	f3ef 8511 	mrs	r5, BASEPRI
    8272:	f383 8812 	msr	BASEPRI_MAX, r3
    8276:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    827a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    827c:	429c      	cmp	r4, r3
    827e:	d01f      	beq.n	82c0 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    8280:	b1f3      	cbz	r3, 82c0 <z_impl_k_mutex_lock+0xe0>
    8282:	6921      	ldr	r1, [r4, #16]
    8284:	f993 000e 	ldrsb.w	r0, [r3, #14]
    8288:	f003 fb73 	bl	b972 <new_prio_for_inheritance>
    828c:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    828e:	4620      	mov	r0, r4
    8290:	f003 fb7a 	bl	b988 <adjust_owner_prio>
    8294:	b9b0      	cbnz	r0, 82c4 <z_impl_k_mutex_lock+0xe4>
    8296:	f1b9 0f00 	cmp.w	r9, #0
    829a:	d015      	beq.n	82c8 <z_impl_k_mutex_lock+0xe8>
    829c:	f04f 0801 	mov.w	r8, #1
    82a0:	e012      	b.n	82c8 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    82a2:	6923      	ldr	r3, [r4, #16]
    82a4:	e7b1      	b.n	820a <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    82a6:	f387 8811 	msr	BASEPRI, r7
    82aa:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    82ae:	f06f 000f 	mvn.w	r0, #15
    82b2:	e7b5      	b.n	8220 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    82b4:	4601      	mov	r1, r0
    82b6:	4620      	mov	r0, r4
    82b8:	f003 fb66 	bl	b988 <adjust_owner_prio>
    82bc:	4681      	mov	r9, r0
    82be:	e7cb      	b.n	8258 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    82c0:	6921      	ldr	r1, [r4, #16]
    82c2:	e7e4      	b.n	828e <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    82c4:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    82c8:	f1b8 0f00 	cmp.w	r8, #0
    82cc:	d106      	bne.n	82dc <z_impl_k_mutex_lock+0xfc>
    82ce:	f385 8811 	msr	BASEPRI, r5
    82d2:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    82d6:	f06f 000a 	mvn.w	r0, #10
    82da:	e7a1      	b.n	8220 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    82dc:	4629      	mov	r1, r5
    82de:	4804      	ldr	r0, [pc, #16]	; (82f0 <z_impl_k_mutex_lock+0x110>)
    82e0:	f000 fa96 	bl	8810 <z_reschedule>
	return -EAGAIN;
    82e4:	f06f 000a 	mvn.w	r0, #10
    82e8:	e79a      	b.n	8220 <z_impl_k_mutex_lock+0x40>
    82ea:	bf00      	nop
    82ec:	20001abc 	.word	0x20001abc
    82f0:	20001ae8 	.word	0x20001ae8

000082f4 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    82f4:	6882      	ldr	r2, [r0, #8]
    82f6:	2a00      	cmp	r2, #0
    82f8:	d035      	beq.n	8366 <z_impl_k_mutex_unlock+0x72>
{
    82fa:	b538      	push	{r3, r4, r5, lr}
    82fc:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    82fe:	4b1d      	ldr	r3, [pc, #116]	; (8374 <z_impl_k_mutex_unlock+0x80>)
    8300:	689b      	ldr	r3, [r3, #8]
    8302:	429a      	cmp	r2, r3
    8304:	d132      	bne.n	836c <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    8306:	7bda      	ldrb	r2, [r3, #15]
    8308:	3a01      	subs	r2, #1
    830a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    830c:	68c3      	ldr	r3, [r0, #12]
    830e:	2b01      	cmp	r3, #1
    8310:	d905      	bls.n	831e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    8312:	3b01      	subs	r3, #1
    8314:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    8316:	f000 fc95 	bl	8c44 <k_sched_unlock>

	return 0;
    831a:	2000      	movs	r0, #0
}
    831c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    831e:	f04f 0320 	mov.w	r3, #32
    8322:	f3ef 8511 	mrs	r5, BASEPRI
    8326:	f383 8812 	msr	BASEPRI_MAX, r3
    832a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    832e:	6901      	ldr	r1, [r0, #16]
    8330:	f003 fb2a 	bl	b988 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    8334:	4620      	mov	r0, r4
    8336:	f003 fce7 	bl	bd08 <z_unpend_first_thread>
	mutex->owner = new_owner;
    833a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    833c:	b160      	cbz	r0, 8358 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    833e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    8342:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    8344:	2300      	movs	r3, #0
    8346:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    834a:	f003 fc42 	bl	bbd2 <z_ready_thread>
		z_reschedule(&lock, key);
    834e:	4629      	mov	r1, r5
    8350:	4809      	ldr	r0, [pc, #36]	; (8378 <z_impl_k_mutex_unlock+0x84>)
    8352:	f000 fa5d 	bl	8810 <z_reschedule>
    8356:	e7de      	b.n	8316 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    8358:	2300      	movs	r3, #0
    835a:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    835c:	f385 8811 	msr	BASEPRI, r5
    8360:	f3bf 8f6f 	isb	sy
    8364:	e7d7      	b.n	8316 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    8366:	f06f 0015 	mvn.w	r0, #21
}
    836a:	4770      	bx	lr
		return -EPERM;
    836c:	f04f 30ff 	mov.w	r0, #4294967295
    8370:	e7d4      	b.n	831c <z_impl_k_mutex_unlock+0x28>
    8372:	bf00      	nop
    8374:	20001abc 	.word	0x20001abc
    8378:	20001ae8 	.word	0x20001ae8

0000837c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    837c:	b5d0      	push	{r4, r6, r7, lr}
    837e:	b082      	sub	sp, #8
    8380:	4601      	mov	r1, r0
    8382:	4616      	mov	r6, r2
    8384:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    8386:	4602      	mov	r2, r0
	__asm__ volatile(
    8388:	f04f 0320 	mov.w	r3, #32
    838c:	f3ef 8411 	mrs	r4, BASEPRI
    8390:	f383 8812 	msr	BASEPRI_MAX, r3
    8394:	f3bf 8f6f 	isb	sy
    8398:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    839c:	b188      	cbz	r0, 83c2 <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    839e:	6803      	ldr	r3, [r0, #0]
    83a0:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
    83a4:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
    83a6:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    83a8:	4290      	cmp	r0, r2
    83aa:	d008      	beq.n	83be <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    83ac:	2101      	movs	r1, #1
    83ae:	f003 fb6b 	bl	ba88 <z_queue_node_peek>
	__asm__ volatile(
    83b2:	f384 8811 	msr	BASEPRI, r4
    83b6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    83ba:	b002      	add	sp, #8
    83bc:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
    83be:	604b      	str	r3, [r1, #4]
}
    83c0:	e7f4      	b.n	83ac <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    83c2:	ea56 0307 	orrs.w	r3, r6, r7
    83c6:	d00a      	beq.n	83de <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    83c8:	e9cd 6700 	strd	r6, r7, [sp]
    83cc:	4621      	mov	r1, r4
    83ce:	4610      	mov	r0, r2
    83d0:	f000 fb82 	bl	8ad8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    83d4:	b948      	cbnz	r0, 83ea <z_impl_k_queue_get+0x6e>
    83d6:	4b06      	ldr	r3, [pc, #24]	; (83f0 <z_impl_k_queue_get+0x74>)
    83d8:	689b      	ldr	r3, [r3, #8]
    83da:	6958      	ldr	r0, [r3, #20]
    83dc:	e7ed      	b.n	83ba <z_impl_k_queue_get+0x3e>
    83de:	f384 8811 	msr	BASEPRI, r4
    83e2:	f3bf 8f6f 	isb	sy
		return NULL;
    83e6:	2000      	movs	r0, #0
    83e8:	e7e7      	b.n	83ba <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
    83ea:	2000      	movs	r0, #0
    83ec:	e7e5      	b.n	83ba <z_impl_k_queue_get+0x3e>
    83ee:	bf00      	nop
    83f0:	20001abc 	.word	0x20001abc

000083f4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    83f4:	b538      	push	{r3, r4, r5, lr}
    83f6:	4604      	mov	r4, r0
	__asm__ volatile(
    83f8:	f04f 0320 	mov.w	r3, #32
    83fc:	f3ef 8511 	mrs	r5, BASEPRI
    8400:	f383 8812 	msr	BASEPRI_MAX, r3
    8404:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    8408:	f003 fc7e 	bl	bd08 <z_unpend_first_thread>

	if (thread != NULL) {
    840c:	b148      	cbz	r0, 8422 <z_impl_k_sem_give+0x2e>
    840e:	2200      	movs	r2, #0
    8410:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    8414:	f003 fbdd 	bl	bbd2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    8418:	4629      	mov	r1, r5
    841a:	4807      	ldr	r0, [pc, #28]	; (8438 <z_impl_k_sem_give+0x44>)
    841c:	f000 f9f8 	bl	8810 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    8420:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    8422:	68a3      	ldr	r3, [r4, #8]
    8424:	68e2      	ldr	r2, [r4, #12]
    8426:	4293      	cmp	r3, r2
    8428:	d003      	beq.n	8432 <z_impl_k_sem_give+0x3e>
    842a:	2201      	movs	r2, #1
    842c:	4413      	add	r3, r2
    842e:	60a3      	str	r3, [r4, #8]
}
    8430:	e7f2      	b.n	8418 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    8432:	2200      	movs	r2, #0
    8434:	e7fa      	b.n	842c <z_impl_k_sem_give+0x38>
    8436:	bf00      	nop
    8438:	20001ae8 	.word	0x20001ae8

0000843c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    843c:	b530      	push	{r4, r5, lr}
    843e:	b083      	sub	sp, #12
    8440:	461d      	mov	r5, r3
    8442:	f04f 0320 	mov.w	r3, #32
    8446:	f3ef 8111 	mrs	r1, BASEPRI
    844a:	f383 8812 	msr	BASEPRI_MAX, r3
    844e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    8452:	6883      	ldr	r3, [r0, #8]
    8454:	b143      	cbz	r3, 8468 <z_impl_k_sem_take+0x2c>
		sem->count--;
    8456:	3b01      	subs	r3, #1
    8458:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    845a:	f381 8811 	msr	BASEPRI, r1
    845e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    8462:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    8464:	b003      	add	sp, #12
    8466:	bd30      	pop	{r4, r5, pc}
    8468:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    846a:	ea54 0305 	orrs.w	r3, r4, r5
    846e:	d006      	beq.n	847e <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    8470:	e9cd 4500 	strd	r4, r5, [sp]
    8474:	4602      	mov	r2, r0
    8476:	4805      	ldr	r0, [pc, #20]	; (848c <z_impl_k_sem_take+0x50>)
    8478:	f000 fb2e 	bl	8ad8 <z_pend_curr>
	return ret;
    847c:	e7f2      	b.n	8464 <z_impl_k_sem_take+0x28>
    847e:	f381 8811 	msr	BASEPRI, r1
    8482:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    8486:	f06f 000f 	mvn.w	r0, #15
    848a:	e7eb      	b.n	8464 <z_impl_k_sem_take+0x28>
    848c:	20001ae8 	.word	0x20001ae8

00008490 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
    8490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8492:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
    8494:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8496:	f013 0f02 	tst.w	r3, #2
    849a:	d15b      	bne.n	8554 <submit_to_queue_locked+0xc4>
    849c:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    849e:	f013 0f04 	tst.w	r3, #4
    84a2:	d15c      	bne.n	855e <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
    84a4:	680b      	ldr	r3, [r1, #0]
    84a6:	2b00      	cmp	r3, #0
    84a8:	d037      	beq.n	851a <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
    84aa:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    84ac:	f013 0f01 	tst.w	r3, #1
    84b0:	d036      	beq.n	8520 <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
    84b2:	68a3      	ldr	r3, [r4, #8]
    84b4:	602b      	str	r3, [r5, #0]
			ret = 2;
    84b6:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
    84b8:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
    84ba:	2e00      	cmp	r6, #0
    84bc:	d03e      	beq.n	853c <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    84be:	4b29      	ldr	r3, [pc, #164]	; (8564 <submit_to_queue_locked+0xd4>)
    84c0:	689b      	ldr	r3, [r3, #8]
    84c2:	42b3      	cmp	r3, r6
    84c4:	d02e      	beq.n	8524 <submit_to_queue_locked+0x94>
    84c6:	2300      	movs	r3, #0
    84c8:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
    84ca:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
    84ce:	f3c3 0180 	ubfx	r1, r3, #2, #1
    84d2:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    84d6:	f013 0f01 	tst.w	r3, #1
    84da:	d032      	beq.n	8542 <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
    84dc:	b101      	cbz	r1, 84e0 <submit_to_queue_locked+0x50>
    84de:	b39a      	cbz	r2, 8548 <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
    84e0:	b100      	cbz	r0, 84e4 <submit_to_queue_locked+0x54>
    84e2:	b3a1      	cbz	r1, 854e <submit_to_queue_locked+0xbe>
	parent->next = child;
    84e4:	2300      	movs	r3, #0
    84e6:	6023      	str	r3, [r4, #0]
	return list->tail;
    84e8:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
Z_GENLIST_APPEND(slist, snode)
    84ec:	b30b      	cbz	r3, 8532 <submit_to_queue_locked+0xa2>
	parent->next = child;
    84ee:	601c      	str	r4, [r3, #0]
	list->tail = node;
    84f0:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    84f4:	2200      	movs	r2, #0
    84f6:	4611      	mov	r1, r2
    84f8:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    84fc:	f003 fc44 	bl	bd88 <z_sched_wake>
		ret = 1;
    8500:	2001      	movs	r0, #1

		if (rc < 0) {
    8502:	2800      	cmp	r0, #0
    8504:	db06      	blt.n	8514 <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
    8506:	68e3      	ldr	r3, [r4, #12]
    8508:	f043 0304 	orr.w	r3, r3, #4
    850c:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
    850e:	682b      	ldr	r3, [r5, #0]
    8510:	60a3      	str	r3, [r4, #8]
    8512:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
    8514:	2800      	cmp	r0, #0
    8516:	dc21      	bgt.n	855c <submit_to_queue_locked+0xcc>
    8518:	e01e      	b.n	8558 <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
    851a:	6883      	ldr	r3, [r0, #8]
    851c:	600b      	str	r3, [r1, #0]
    851e:	e7c4      	b.n	84aa <submit_to_queue_locked+0x1a>
		ret = 1;
    8520:	2701      	movs	r7, #1
    8522:	e7c9      	b.n	84b8 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    8524:	f003 f9e8 	bl	b8f8 <k_is_in_isr>
    8528:	b908      	cbnz	r0, 852e <submit_to_queue_locked+0x9e>
    852a:	2301      	movs	r3, #1
    852c:	e7cc      	b.n	84c8 <submit_to_queue_locked+0x38>
    852e:	2300      	movs	r3, #0
    8530:	e7ca      	b.n	84c8 <submit_to_queue_locked+0x38>
    8532:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
	list->head = node;
    8536:	f8c6 40b0 	str.w	r4, [r6, #176]	; 0xb0
}
    853a:	e7db      	b.n	84f4 <submit_to_queue_locked+0x64>
		return -EINVAL;
    853c:	f06f 0015 	mvn.w	r0, #21
    8540:	e7df      	b.n	8502 <submit_to_queue_locked+0x72>
		ret = -ENODEV;
    8542:	f06f 0012 	mvn.w	r0, #18
    8546:	e7dc      	b.n	8502 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
    8548:	f06f 000f 	mvn.w	r0, #15
    854c:	e7d9      	b.n	8502 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
    854e:	f06f 000f 	mvn.w	r0, #15
    8552:	e7d6      	b.n	8502 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
    8554:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
    8558:	2300      	movs	r3, #0
    855a:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
    855c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
    855e:	2000      	movs	r0, #0
    8560:	e7fa      	b.n	8558 <submit_to_queue_locked+0xc8>
    8562:	bf00      	nop
    8564:	20001abc 	.word	0x20001abc

00008568 <finalize_cancel_locked>:
{
    8568:	b570      	push	{r4, r5, r6, lr}
    856a:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
    856c:	68c3      	ldr	r3, [r0, #12]
    856e:	f023 0302 	bic.w	r3, r3, #2
    8572:	60c3      	str	r3, [r0, #12]
	return list->head;
    8574:	4b19      	ldr	r3, [pc, #100]	; (85dc <finalize_cancel_locked+0x74>)
    8576:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    8578:	b1e8      	cbz	r0, 85b6 <finalize_cancel_locked+0x4e>
    857a:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
    857c:	b100      	cbz	r0, 8580 <finalize_cancel_locked+0x18>
	return node->next;
    857e:	6804      	ldr	r4, [r0, #0]
    8580:	2600      	movs	r6, #0
    8582:	e01d      	b.n	85c0 <finalize_cancel_locked+0x58>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    8584:	b15e      	cbz	r6, 859e <finalize_cancel_locked+0x36>
	return node->next;
    8586:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
    8588:	6033      	str	r3, [r6, #0]
	return list->tail;
    858a:	4b14      	ldr	r3, [pc, #80]	; (85dc <finalize_cancel_locked+0x74>)
    858c:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    858e:	4298      	cmp	r0, r3
    8590:	d00e      	beq.n	85b0 <finalize_cancel_locked+0x48>
	parent->next = child;
    8592:	2300      	movs	r3, #0
    8594:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    8598:	f7ff ff2c 	bl	83f4 <z_impl_k_sem_give>
}
    859c:	e015      	b.n	85ca <finalize_cancel_locked+0x62>
	return node->next;
    859e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
    85a0:	4b0e      	ldr	r3, [pc, #56]	; (85dc <finalize_cancel_locked+0x74>)
    85a2:	601a      	str	r2, [r3, #0]
	return list->tail;
    85a4:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    85a6:	4298      	cmp	r0, r3
    85a8:	d1f3      	bne.n	8592 <finalize_cancel_locked+0x2a>
	list->tail = node;
    85aa:	4b0c      	ldr	r3, [pc, #48]	; (85dc <finalize_cancel_locked+0x74>)
    85ac:	605a      	str	r2, [r3, #4]
}
    85ae:	e7f0      	b.n	8592 <finalize_cancel_locked+0x2a>
	list->tail = node;
    85b0:	4b0a      	ldr	r3, [pc, #40]	; (85dc <finalize_cancel_locked+0x74>)
    85b2:	605e      	str	r6, [r3, #4]
}
    85b4:	e7ed      	b.n	8592 <finalize_cancel_locked+0x2a>
    85b6:	4604      	mov	r4, r0
    85b8:	e7e2      	b.n	8580 <finalize_cancel_locked+0x18>
    85ba:	4623      	mov	r3, r4
    85bc:	4620      	mov	r0, r4
    85be:	461c      	mov	r4, r3
    85c0:	b150      	cbz	r0, 85d8 <finalize_cancel_locked+0x70>
		if (wc->work == work) {
    85c2:	6843      	ldr	r3, [r0, #4]
    85c4:	42ab      	cmp	r3, r5
    85c6:	d0dd      	beq.n	8584 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
    85c8:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    85ca:	2c00      	cmp	r4, #0
    85cc:	d0f5      	beq.n	85ba <finalize_cancel_locked+0x52>
    85ce:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    85d0:	2c00      	cmp	r4, #0
    85d2:	d0f3      	beq.n	85bc <finalize_cancel_locked+0x54>
	return node->next;
    85d4:	6823      	ldr	r3, [r4, #0]
    85d6:	e7f1      	b.n	85bc <finalize_cancel_locked+0x54>
}
    85d8:	bd70      	pop	{r4, r5, r6, pc}
    85da:	bf00      	nop
    85dc:	20001ae8 	.word	0x20001ae8

000085e0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    85e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    85e2:	b085      	sub	sp, #20
    85e4:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
    85e6:	e016      	b.n	8616 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
    85e8:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
	*flagp &= ~BIT(bit);
    85ec:	f023 0204 	bic.w	r2, r3, #4
    85f0:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    85f4:	f013 0f04 	tst.w	r3, #4
    85f8:	d158      	bne.n	86ac <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    85fa:	2300      	movs	r3, #0
    85fc:	9302      	str	r3, [sp, #8]
    85fe:	f04f 32ff 	mov.w	r2, #4294967295
    8602:	f04f 33ff 	mov.w	r3, #4294967295
    8606:	e9cd 2300 	strd	r2, r3, [sp]
    860a:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
    860e:	4631      	mov	r1, r6
    8610:	482e      	ldr	r0, [pc, #184]	; (86cc <work_queue_main+0xec>)
    8612:	f000 fc95 	bl	8f40 <z_sched_wait>
	__asm__ volatile(
    8616:	f04f 0320 	mov.w	r3, #32
    861a:	f3ef 8611 	mrs	r6, BASEPRI
    861e:	f383 8812 	msr	BASEPRI_MAX, r3
    8622:	f3bf 8f6f 	isb	sy
	return list->head;
    8626:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
Z_GENLIST_GET(slist, snode)
    862a:	2c00      	cmp	r4, #0
    862c:	d0dc      	beq.n	85e8 <work_queue_main+0x8>
	return node->next;
    862e:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    8630:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	return list->tail;
    8634:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8638:	4294      	cmp	r4, r2
    863a:	d034      	beq.n	86a6 <work_queue_main+0xc6>
	*flagp |= BIT(bit);
    863c:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    8640:	f043 0302 	orr.w	r3, r3, #2
    8644:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
    8648:	68e3      	ldr	r3, [r4, #12]
    864a:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
    864e:	f023 0304 	bic.w	r3, r3, #4
    8652:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
    8654:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
    8656:	2c00      	cmp	r4, #0
    8658:	d0cf      	beq.n	85fa <work_queue_main+0x1a>
	__asm__ volatile(
    865a:	f386 8811 	msr	BASEPRI, r6
    865e:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    8662:	4620      	mov	r0, r4
    8664:	4798      	blx	r3
	__asm__ volatile(
    8666:	f04f 0320 	mov.w	r3, #32
    866a:	f3ef 8611 	mrs	r6, BASEPRI
    866e:	f383 8812 	msr	BASEPRI_MAX, r3
    8672:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    8676:	68e3      	ldr	r3, [r4, #12]
    8678:	f023 0301 	bic.w	r3, r3, #1
    867c:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    867e:	f013 0f02 	tst.w	r3, #2
    8682:	d11e      	bne.n	86c2 <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
    8684:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    8688:	f023 0302 	bic.w	r3, r3, #2
    868c:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	return (*flagp & BIT(bit)) != 0U;
    8690:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
    8694:	f386 8811 	msr	BASEPRI, r6
    8698:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    869c:	2b00      	cmp	r3, #0
    869e:	d1ba      	bne.n	8616 <work_queue_main+0x36>
	z_impl_k_yield();
    86a0:	f000 fb50 	bl	8d44 <z_impl_k_yield>
}
    86a4:	e7b7      	b.n	8616 <work_queue_main+0x36>
	list->tail = node;
    86a6:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
}
    86aa:	e7c7      	b.n	863c <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    86ac:	f105 07c0 	add.w	r7, r5, #192	; 0xc0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    86b0:	2200      	movs	r2, #0
    86b2:	2101      	movs	r1, #1
    86b4:	4638      	mov	r0, r7
    86b6:	f003 fb67 	bl	bd88 <z_sched_wake>
    86ba:	2800      	cmp	r0, #0
    86bc:	d1f8      	bne.n	86b0 <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
    86be:	2300      	movs	r3, #0
    86c0:	e7c9      	b.n	8656 <work_queue_main+0x76>
			finalize_cancel_locked(work);
    86c2:	4620      	mov	r0, r4
    86c4:	f7ff ff50 	bl	8568 <finalize_cancel_locked>
    86c8:	e7dc      	b.n	8684 <work_queue_main+0xa4>
    86ca:	bf00      	nop
    86cc:	20001ae8 	.word	0x20001ae8

000086d0 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    86d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    86d2:	b089      	sub	sp, #36	; 0x24
    86d4:	4604      	mov	r4, r0
    86d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
    86d8:	2000      	movs	r0, #0
    86da:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	list->tail = NULL;
    86de:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    86e2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	list->head = (sys_dnode_t *)list;
    86e6:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = (sys_dnode_t *)list;
    86ea:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    86ee:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
    86f2:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
    86f6:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    86fa:	b1fd      	cbz	r5, 873c <k_work_queue_start+0x6c>
    86fc:	7928      	ldrb	r0, [r5, #4]
    86fe:	b9f8      	cbnz	r0, 8740 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    8700:	2001      	movs	r0, #1
	*flagp = flags;
    8702:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    8706:	f04f 36ff 	mov.w	r6, #4294967295
    870a:	f04f 37ff 	mov.w	r7, #4294967295
    870e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    8712:	2000      	movs	r0, #0
    8714:	9004      	str	r0, [sp, #16]
    8716:	9303      	str	r3, [sp, #12]
    8718:	9002      	str	r0, [sp, #8]
    871a:	9001      	str	r0, [sp, #4]
    871c:	9400      	str	r4, [sp, #0]
    871e:	4b0a      	ldr	r3, [pc, #40]	; (8748 <k_work_queue_start+0x78>)
    8720:	4620      	mov	r0, r4
    8722:	f003 f8fe 	bl	b922 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    8726:	b125      	cbz	r5, 8732 <k_work_queue_start+0x62>
    8728:	6829      	ldr	r1, [r5, #0]
    872a:	b111      	cbz	r1, 8732 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
    872c:	4620      	mov	r0, r4
    872e:	f7ff fc69 	bl	8004 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    8732:	4620      	mov	r0, r4
    8734:	f003 f8e6 	bl	b904 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    8738:	b009      	add	sp, #36	; 0x24
    873a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
    873c:	2001      	movs	r0, #1
    873e:	e7e0      	b.n	8702 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
    8740:	f240 1001 	movw	r0, #257	; 0x101
    8744:	e7dd      	b.n	8702 <k_work_queue_start+0x32>
    8746:	bf00      	nop
    8748:	000085e1 	.word	0x000085e1

0000874c <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    874c:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    874e:	f1b3 3fff 	cmp.w	r3, #4294967295
    8752:	bf08      	it	eq
    8754:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    8758:	d100      	bne.n	875c <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    875a:	bd38      	pop	{r3, r4, r5, pc}
    875c:	4902      	ldr	r1, [pc, #8]	; (8768 <add_thread_timeout+0x1c>)
    875e:	3018      	adds	r0, #24
    8760:	f000 fc62 	bl	9028 <z_add_timeout>
    8764:	e7f9      	b.n	875a <add_thread_timeout+0xe>
    8766:	bf00      	nop
    8768:	0000bc0b 	.word	0x0000bc0b

0000876c <z_reset_time_slice>:
{
    876c:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    876e:	4b08      	ldr	r3, [pc, #32]	; (8790 <z_reset_time_slice+0x24>)
    8770:	681b      	ldr	r3, [r3, #0]
    8772:	b903      	cbnz	r3, 8776 <z_reset_time_slice+0xa>
}
    8774:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    8776:	f7fc fc13 	bl	4fa0 <sys_clock_elapsed>
    877a:	4603      	mov	r3, r0
    877c:	4a04      	ldr	r2, [pc, #16]	; (8790 <z_reset_time_slice+0x24>)
    877e:	6810      	ldr	r0, [r2, #0]
    8780:	4403      	add	r3, r0
    8782:	4a04      	ldr	r2, [pc, #16]	; (8794 <z_reset_time_slice+0x28>)
    8784:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    8786:	2100      	movs	r1, #0
    8788:	f003 fb80 	bl	be8c <z_set_timeout_expiry>
}
    878c:	e7f2      	b.n	8774 <z_reset_time_slice+0x8>
    878e:	bf00      	nop
    8790:	20001af8 	.word	0x20001af8
    8794:	20001abc 	.word	0x20001abc

00008798 <k_sched_time_slice_set>:
{
    8798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    879c:	4606      	mov	r6, r0
    879e:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    87a0:	2300      	movs	r3, #0
	__asm__ volatile(
    87a2:	f04f 0220 	mov.w	r2, #32
    87a6:	f3ef 8711 	mrs	r7, BASEPRI
    87aa:	f382 8812 	msr	BASEPRI_MAX, r2
    87ae:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    87b2:	e009      	b.n	87c8 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
    87b4:	4b13      	ldr	r3, [pc, #76]	; (8804 <k_sched_time_slice_set+0x6c>)
    87b6:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    87ba:	f7ff ffd7 	bl	876c <z_reset_time_slice>
	__asm__ volatile(
    87be:	f387 8811 	msr	BASEPRI, r7
    87c2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    87c6:	2301      	movs	r3, #1
    87c8:	b9cb      	cbnz	r3, 87fe <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
    87ca:	2300      	movs	r3, #0
    87cc:	4a0e      	ldr	r2, [pc, #56]	; (8808 <k_sched_time_slice_set+0x70>)
    87ce:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    87d0:	0c75      	lsrs	r5, r6, #17
    87d2:	03f4      	lsls	r4, r6, #15
    87d4:	f240 30e7 	movw	r0, #999	; 0x3e7
    87d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    87dc:	2300      	movs	r3, #0
    87de:	1820      	adds	r0, r4, r0
    87e0:	f04f 0100 	mov.w	r1, #0
    87e4:	eb45 0101 	adc.w	r1, r5, r1
    87e8:	f7f7 fcb4 	bl	154 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    87ec:	4b07      	ldr	r3, [pc, #28]	; (880c <k_sched_time_slice_set+0x74>)
    87ee:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    87f0:	2e00      	cmp	r6, #0
    87f2:	dddf      	ble.n	87b4 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
    87f4:	2802      	cmp	r0, #2
    87f6:	bfb8      	it	lt
    87f8:	2002      	movlt	r0, #2
    87fa:	6018      	str	r0, [r3, #0]
    87fc:	e7da      	b.n	87b4 <k_sched_time_slice_set+0x1c>
}
    87fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8802:	bf00      	nop
    8804:	20001af4 	.word	0x20001af4
    8808:	20001abc 	.word	0x20001abc
    880c:	20001af8 	.word	0x20001af8

00008810 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    8810:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    8812:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8814:	b921      	cbnz	r1, 8820 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8816:	f3ef 8305 	mrs	r3, IPSR
    881a:	b913      	cbnz	r3, 8822 <z_reschedule+0x12>
    881c:	2101      	movs	r1, #1
    881e:	e000      	b.n	8822 <z_reschedule+0x12>
    8820:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    8822:	f011 0f01 	tst.w	r1, #1
    8826:	d007      	beq.n	8838 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    8828:	4b06      	ldr	r3, [pc, #24]	; (8844 <z_reschedule+0x34>)
    882a:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    882c:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    882e:	429a      	cmp	r2, r3
    8830:	d002      	beq.n	8838 <z_reschedule+0x28>
	ret = arch_swap(key);
    8832:	f7fa f843 	bl	28bc <arch_swap>
		z_swap(lock, key);
    8836:	e003      	b.n	8840 <z_reschedule+0x30>
    8838:	f380 8811 	msr	BASEPRI, r0
    883c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    8840:	bd08      	pop	{r3, pc}
    8842:	bf00      	nop
    8844:	20001abc 	.word	0x20001abc

00008848 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    8848:	2300      	movs	r3, #0
	__asm__ volatile(
    884a:	f04f 0220 	mov.w	r2, #32
    884e:	f3ef 8111 	mrs	r1, BASEPRI
    8852:	f382 8812 	msr	BASEPRI_MAX, r2
    8856:	f3bf 8f6f 	isb	sy
    885a:	b953      	cbnz	r3, 8872 <k_sched_lock+0x2a>
	--_current->base.sched_locked;
    885c:	4b05      	ldr	r3, [pc, #20]	; (8874 <k_sched_lock+0x2c>)
    885e:	689a      	ldr	r2, [r3, #8]
    8860:	7bd3      	ldrb	r3, [r2, #15]
    8862:	3b01      	subs	r3, #1
    8864:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    8866:	f381 8811 	msr	BASEPRI, r1
    886a:	f3bf 8f6f 	isb	sy
    886e:	2301      	movs	r3, #1
    8870:	e7f3      	b.n	885a <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    8872:	4770      	bx	lr
    8874:	20001abc 	.word	0x20001abc

00008878 <update_cache>:
{
    8878:	b538      	push	{r3, r4, r5, lr}
    887a:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    887c:	480f      	ldr	r0, [pc, #60]	; (88bc <update_cache+0x44>)
    887e:	f003 f9a1 	bl	bbc4 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    8882:	4605      	mov	r5, r0
    8884:	b170      	cbz	r0, 88a4 <update_cache+0x2c>
	if (preempt_ok != 0) {
    8886:	b984      	cbnz	r4, 88aa <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    8888:	4b0d      	ldr	r3, [pc, #52]	; (88c0 <update_cache+0x48>)
    888a:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    888c:	7b5a      	ldrb	r2, [r3, #13]
    888e:	f012 0f1f 	tst.w	r2, #31
    8892:	d10a      	bne.n	88aa <update_cache+0x32>
	return node->next != NULL;
    8894:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    8896:	b942      	cbnz	r2, 88aa <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    8898:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    889a:	2a7f      	cmp	r2, #127	; 0x7f
    889c:	d905      	bls.n	88aa <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    889e:	4a08      	ldr	r2, [pc, #32]	; (88c0 <update_cache+0x48>)
    88a0:	61d3      	str	r3, [r2, #28]
    88a2:	e00a      	b.n	88ba <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    88a4:	4b06      	ldr	r3, [pc, #24]	; (88c0 <update_cache+0x48>)
    88a6:	68dd      	ldr	r5, [r3, #12]
    88a8:	e7ed      	b.n	8886 <update_cache+0xe>
		if (thread != _current) {
    88aa:	4b05      	ldr	r3, [pc, #20]	; (88c0 <update_cache+0x48>)
    88ac:	689b      	ldr	r3, [r3, #8]
    88ae:	42ab      	cmp	r3, r5
    88b0:	d001      	beq.n	88b6 <update_cache+0x3e>
			z_reset_time_slice();
    88b2:	f7ff ff5b 	bl	876c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    88b6:	4b02      	ldr	r3, [pc, #8]	; (88c0 <update_cache+0x48>)
    88b8:	61dd      	str	r5, [r3, #28]
}
    88ba:	bd38      	pop	{r3, r4, r5, pc}
    88bc:	20001adc 	.word	0x20001adc
    88c0:	20001abc 	.word	0x20001abc

000088c4 <move_thread_to_end_of_prio_q>:
{
    88c4:	b538      	push	{r3, r4, r5, lr}
    88c6:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    88c8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    88ca:	f990 300d 	ldrsb.w	r3, [r0, #13]
    88ce:	2b00      	cmp	r3, #0
    88d0:	db28      	blt.n	8924 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    88d2:	7b6b      	ldrb	r3, [r5, #13]
    88d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    88d8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    88da:	4b1a      	ldr	r3, [pc, #104]	; (8944 <move_thread_to_end_of_prio_q+0x80>)
    88dc:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    88e0:	429c      	cmp	r4, r3
    88e2:	d02d      	beq.n	8940 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    88e4:	b16c      	cbz	r4, 8902 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    88e6:	4621      	mov	r1, r4
    88e8:	4628      	mov	r0, r5
    88ea:	f003 f921 	bl	bb30 <z_sched_prio_cmp>
    88ee:	2800      	cmp	r0, #0
    88f0:	dc20      	bgt.n	8934 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    88f2:	b134      	cbz	r4, 8902 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    88f4:	4b13      	ldr	r3, [pc, #76]	; (8944 <move_thread_to_end_of_prio_q+0x80>)
    88f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    88f8:	429c      	cmp	r4, r3
    88fa:	d002      	beq.n	8902 <move_thread_to_end_of_prio_q+0x3e>
    88fc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    88fe:	2c00      	cmp	r4, #0
    8900:	d1f0      	bne.n	88e4 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    8902:	4b10      	ldr	r3, [pc, #64]	; (8944 <move_thread_to_end_of_prio_q+0x80>)
    8904:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    8906:	f103 0120 	add.w	r1, r3, #32
    890a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    890c:	606a      	str	r2, [r5, #4]

	tail->next = node;
    890e:	6015      	str	r5, [r2, #0]
	list->tail = node;
    8910:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    8912:	4b0c      	ldr	r3, [pc, #48]	; (8944 <move_thread_to_end_of_prio_q+0x80>)
    8914:	6898      	ldr	r0, [r3, #8]
    8916:	42a8      	cmp	r0, r5
    8918:	bf14      	ite	ne
    891a:	2000      	movne	r0, #0
    891c:	2001      	moveq	r0, #1
    891e:	f7ff ffab 	bl	8878 <update_cache>
}
    8922:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8924:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8928:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    892a:	4601      	mov	r1, r0
    892c:	4806      	ldr	r0, [pc, #24]	; (8948 <move_thread_to_end_of_prio_q+0x84>)
    892e:	f003 f91e 	bl	bb6e <z_priq_dumb_remove>
}
    8932:	e7ce      	b.n	88d2 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    8934:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    8936:	606b      	str	r3, [r5, #4]
	node->next = successor;
    8938:	602c      	str	r4, [r5, #0]
	prev->next = node;
    893a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    893c:	6065      	str	r5, [r4, #4]
}
    893e:	e7e8      	b.n	8912 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8940:	2400      	movs	r4, #0
    8942:	e7cf      	b.n	88e4 <move_thread_to_end_of_prio_q+0x20>
    8944:	20001abc 	.word	0x20001abc
    8948:	20001adc 	.word	0x20001adc

0000894c <z_time_slice>:
{
    894c:	b510      	push	{r4, lr}
	__asm__ volatile(
    894e:	f04f 0320 	mov.w	r3, #32
    8952:	f3ef 8411 	mrs	r4, BASEPRI
    8956:	f383 8812 	msr	BASEPRI_MAX, r3
    895a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    895e:	4b1c      	ldr	r3, [pc, #112]	; (89d0 <z_time_slice+0x84>)
    8960:	689b      	ldr	r3, [r3, #8]
    8962:	4a1c      	ldr	r2, [pc, #112]	; (89d4 <z_time_slice+0x88>)
    8964:	6812      	ldr	r2, [r2, #0]
    8966:	4293      	cmp	r3, r2
    8968:	d01d      	beq.n	89a6 <z_time_slice+0x5a>
	pending_current = NULL;
    896a:	4a1a      	ldr	r2, [pc, #104]	; (89d4 <z_time_slice+0x88>)
    896c:	2100      	movs	r1, #0
    896e:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    8970:	4a19      	ldr	r2, [pc, #100]	; (89d8 <z_time_slice+0x8c>)
    8972:	6812      	ldr	r2, [r2, #0]
    8974:	b322      	cbz	r2, 89c0 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    8976:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    8978:	2a7f      	cmp	r2, #127	; 0x7f
    897a:	d821      	bhi.n	89c0 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
    897c:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    897e:	f012 0f1f 	tst.w	r2, #31
    8982:	d11d      	bne.n	89c0 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8984:	f993 100e 	ldrsb.w	r1, [r3, #14]
    8988:	4a14      	ldr	r2, [pc, #80]	; (89dc <z_time_slice+0x90>)
    898a:	6812      	ldr	r2, [r2, #0]
    898c:	4291      	cmp	r1, r2
    898e:	db17      	blt.n	89c0 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    8990:	4a13      	ldr	r2, [pc, #76]	; (89e0 <z_time_slice+0x94>)
    8992:	4293      	cmp	r3, r2
    8994:	d014      	beq.n	89c0 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    8996:	4a0e      	ldr	r2, [pc, #56]	; (89d0 <z_time_slice+0x84>)
    8998:	6912      	ldr	r2, [r2, #16]
    899a:	4282      	cmp	r2, r0
    899c:	dd0a      	ble.n	89b4 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
    899e:	1a10      	subs	r0, r2, r0
    89a0:	4b0b      	ldr	r3, [pc, #44]	; (89d0 <z_time_slice+0x84>)
    89a2:	6118      	str	r0, [r3, #16]
    89a4:	e00f      	b.n	89c6 <z_time_slice+0x7a>
		z_reset_time_slice();
    89a6:	f7ff fee1 	bl	876c <z_reset_time_slice>
	__asm__ volatile(
    89aa:	f384 8811 	msr	BASEPRI, r4
    89ae:	f3bf 8f6f 	isb	sy
		return;
    89b2:	e00c      	b.n	89ce <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
    89b4:	4618      	mov	r0, r3
    89b6:	f7ff ff85 	bl	88c4 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    89ba:	f7ff fed7 	bl	876c <z_reset_time_slice>
    89be:	e002      	b.n	89c6 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
    89c0:	4b03      	ldr	r3, [pc, #12]	; (89d0 <z_time_slice+0x84>)
    89c2:	2200      	movs	r2, #0
    89c4:	611a      	str	r2, [r3, #16]
    89c6:	f384 8811 	msr	BASEPRI, r4
    89ca:	f3bf 8f6f 	isb	sy
}
    89ce:	bd10      	pop	{r4, pc}
    89d0:	20001abc 	.word	0x20001abc
    89d4:	20001af0 	.word	0x20001af0
    89d8:	20001af8 	.word	0x20001af8
    89dc:	20001af4 	.word	0x20001af4
    89e0:	20000570 	.word	0x20000570

000089e4 <ready_thread>:
{
    89e4:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    89e6:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    89e8:	f990 200d 	ldrsb.w	r2, [r0, #13]
    89ec:	2a00      	cmp	r2, #0
    89ee:	db2d      	blt.n	8a4c <ready_thread+0x68>
    89f0:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    89f2:	f013 0f1f 	tst.w	r3, #31
    89f6:	d105      	bne.n	8a04 <ready_thread+0x20>
	return node->next != NULL;
    89f8:	6982      	ldr	r2, [r0, #24]
    89fa:	b10a      	cbz	r2, 8a00 <ready_thread+0x1c>
    89fc:	2200      	movs	r2, #0
    89fe:	e002      	b.n	8a06 <ready_thread+0x22>
    8a00:	2201      	movs	r2, #1
    8a02:	e000      	b.n	8a06 <ready_thread+0x22>
    8a04:	2200      	movs	r2, #0
    8a06:	b30a      	cbz	r2, 8a4c <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    8a08:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8a0c:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    8a0e:	4b14      	ldr	r3, [pc, #80]	; (8a60 <ready_thread+0x7c>)
    8a10:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8a14:	429d      	cmp	r5, r3
    8a16:	d020      	beq.n	8a5a <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8a18:	b16d      	cbz	r5, 8a36 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8a1a:	4629      	mov	r1, r5
    8a1c:	4620      	mov	r0, r4
    8a1e:	f003 f887 	bl	bb30 <z_sched_prio_cmp>
    8a22:	2800      	cmp	r0, #0
    8a24:	dc13      	bgt.n	8a4e <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8a26:	b135      	cbz	r5, 8a36 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    8a28:	4b0d      	ldr	r3, [pc, #52]	; (8a60 <ready_thread+0x7c>)
    8a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a2c:	429d      	cmp	r5, r3
    8a2e:	d002      	beq.n	8a36 <ready_thread+0x52>
    8a30:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8a32:	2d00      	cmp	r5, #0
    8a34:	d1f0      	bne.n	8a18 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    8a36:	4b0a      	ldr	r3, [pc, #40]	; (8a60 <ready_thread+0x7c>)
    8a38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    8a3a:	f103 0120 	add.w	r1, r3, #32
    8a3e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    8a40:	6062      	str	r2, [r4, #4]
	tail->next = node;
    8a42:	6014      	str	r4, [r2, #0]
	list->tail = node;
    8a44:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    8a46:	2000      	movs	r0, #0
    8a48:	f7ff ff16 	bl	8878 <update_cache>
}
    8a4c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    8a4e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    8a50:	6063      	str	r3, [r4, #4]
	node->next = successor;
    8a52:	6025      	str	r5, [r4, #0]
	prev->next = node;
    8a54:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    8a56:	606c      	str	r4, [r5, #4]
}
    8a58:	e7f5      	b.n	8a46 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8a5a:	2500      	movs	r5, #0
    8a5c:	e7dc      	b.n	8a18 <ready_thread+0x34>
    8a5e:	bf00      	nop
    8a60:	20001abc 	.word	0x20001abc

00008a64 <z_sched_start>:
{
    8a64:	b510      	push	{r4, lr}
	__asm__ volatile(
    8a66:	f04f 0320 	mov.w	r3, #32
    8a6a:	f3ef 8411 	mrs	r4, BASEPRI
    8a6e:	f383 8812 	msr	BASEPRI_MAX, r3
    8a72:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    8a76:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    8a78:	f013 0f04 	tst.w	r3, #4
    8a7c:	d104      	bne.n	8a88 <z_sched_start+0x24>
	__asm__ volatile(
    8a7e:	f384 8811 	msr	BASEPRI, r4
    8a82:	f3bf 8f6f 	isb	sy
}
    8a86:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8a88:	f023 0304 	bic.w	r3, r3, #4
    8a8c:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    8a8e:	f7ff ffa9 	bl	89e4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    8a92:	4621      	mov	r1, r4
    8a94:	4801      	ldr	r0, [pc, #4]	; (8a9c <z_sched_start+0x38>)
    8a96:	f7ff febb 	bl	8810 <z_reschedule>
    8a9a:	e7f4      	b.n	8a86 <z_sched_start+0x22>
    8a9c:	20001af4 	.word	0x20001af4

00008aa0 <unready_thread>:
{
    8aa0:	b510      	push	{r4, lr}
    8aa2:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    8aa4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    8aa6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    8aaa:	2b00      	cmp	r3, #0
    8aac:	db08      	blt.n	8ac0 <unready_thread+0x20>
	update_cache(thread == _current);
    8aae:	4b08      	ldr	r3, [pc, #32]	; (8ad0 <unready_thread+0x30>)
    8ab0:	6898      	ldr	r0, [r3, #8]
    8ab2:	42a0      	cmp	r0, r4
    8ab4:	bf14      	ite	ne
    8ab6:	2000      	movne	r0, #0
    8ab8:	2001      	moveq	r0, #1
    8aba:	f7ff fedd 	bl	8878 <update_cache>
}
    8abe:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8ac0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8ac4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8ac6:	4601      	mov	r1, r0
    8ac8:	4802      	ldr	r0, [pc, #8]	; (8ad4 <unready_thread+0x34>)
    8aca:	f003 f850 	bl	bb6e <z_priq_dumb_remove>
}
    8ace:	e7ee      	b.n	8aae <unready_thread+0xe>
    8ad0:	20001abc 	.word	0x20001abc
    8ad4:	20001adc 	.word	0x20001adc

00008ad8 <z_pend_curr>:
{
    8ad8:	b510      	push	{r4, lr}
    8ada:	460c      	mov	r4, r1
    8adc:	4611      	mov	r1, r2
	pending_current = _current;
    8ade:	4b06      	ldr	r3, [pc, #24]	; (8af8 <z_pend_curr+0x20>)
    8ae0:	6898      	ldr	r0, [r3, #8]
    8ae2:	4b06      	ldr	r3, [pc, #24]	; (8afc <z_pend_curr+0x24>)
    8ae4:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    8ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8aea:	f003 f8ec 	bl	bcc6 <pend>
    8aee:	4620      	mov	r0, r4
    8af0:	f7f9 fee4 	bl	28bc <arch_swap>
}
    8af4:	bd10      	pop	{r4, pc}
    8af6:	bf00      	nop
    8af8:	20001abc 	.word	0x20001abc
    8afc:	20001af0 	.word	0x20001af0

00008b00 <z_set_prio>:
{
    8b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8b04:	4604      	mov	r4, r0
    8b06:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    8b08:	2300      	movs	r3, #0
	__asm__ volatile(
    8b0a:	f04f 0220 	mov.w	r2, #32
    8b0e:	f3ef 8611 	mrs	r6, BASEPRI
    8b12:	f382 8812 	msr	BASEPRI_MAX, r2
    8b16:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    8b1a:	4698      	mov	r8, r3
    8b1c:	e008      	b.n	8b30 <z_set_prio+0x30>
		if (need_sched) {
    8b1e:	f012 0801 	ands.w	r8, r2, #1
    8b22:	d111      	bne.n	8b48 <z_set_prio+0x48>
			thread->base.prio = prio;
    8b24:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
    8b26:	f386 8811 	msr	BASEPRI, r6
    8b2a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8b2e:	2301      	movs	r3, #1
    8b30:	461a      	mov	r2, r3
    8b32:	2b00      	cmp	r3, #0
    8b34:	d13d      	bne.n	8bb2 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    8b36:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8b38:	f013 0f1f 	tst.w	r3, #31
    8b3c:	d1ef      	bne.n	8b1e <z_set_prio+0x1e>
	return node->next != NULL;
    8b3e:	69a1      	ldr	r1, [r4, #24]
    8b40:	2900      	cmp	r1, #0
    8b42:	d1ec      	bne.n	8b1e <z_set_prio+0x1e>
    8b44:	2201      	movs	r2, #1
    8b46:	e7ea      	b.n	8b1e <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8b4c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8b4e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8bbc <z_set_prio+0xbc>
    8b52:	4621      	mov	r1, r4
    8b54:	4648      	mov	r0, r9
    8b56:	f003 f80a 	bl	bb6e <z_priq_dumb_remove>
				thread->base.prio = prio;
    8b5a:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    8b5c:	7b63      	ldrb	r3, [r4, #13]
    8b5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8b62:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    8b64:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8b68:	454d      	cmp	r5, r9
    8b6a:	d020      	beq.n	8bae <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8b6c:	b16d      	cbz	r5, 8b8a <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8b6e:	4629      	mov	r1, r5
    8b70:	4620      	mov	r0, r4
    8b72:	f002 ffdd 	bl	bb30 <z_sched_prio_cmp>
    8b76:	2800      	cmp	r0, #0
    8b78:	dc13      	bgt.n	8ba2 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8b7a:	b135      	cbz	r5, 8b8a <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    8b7c:	4b0e      	ldr	r3, [pc, #56]	; (8bb8 <z_set_prio+0xb8>)
    8b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b80:	429d      	cmp	r5, r3
    8b82:	d002      	beq.n	8b8a <z_set_prio+0x8a>
    8b84:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8b86:	2d00      	cmp	r5, #0
    8b88:	d1f0      	bne.n	8b6c <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    8b8a:	4b0b      	ldr	r3, [pc, #44]	; (8bb8 <z_set_prio+0xb8>)
    8b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    8b8e:	f103 0120 	add.w	r1, r3, #32
    8b92:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    8b94:	6062      	str	r2, [r4, #4]
	tail->next = node;
    8b96:	6014      	str	r4, [r2, #0]
	list->tail = node;
    8b98:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    8b9a:	2001      	movs	r0, #1
    8b9c:	f7ff fe6c 	bl	8878 <update_cache>
    8ba0:	e7c1      	b.n	8b26 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    8ba2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    8ba4:	6063      	str	r3, [r4, #4]
	node->next = successor;
    8ba6:	6025      	str	r5, [r4, #0]
	prev->next = node;
    8ba8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    8baa:	606c      	str	r4, [r5, #4]
}
    8bac:	e7f5      	b.n	8b9a <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8bae:	2500      	movs	r5, #0
    8bb0:	e7dc      	b.n	8b6c <z_set_prio+0x6c>
}
    8bb2:	4640      	mov	r0, r8
    8bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8bb8:	20001abc 	.word	0x20001abc
    8bbc:	20001adc 	.word	0x20001adc

00008bc0 <z_impl_k_thread_suspend>:
{
    8bc0:	b538      	push	{r3, r4, r5, lr}
    8bc2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    8bc4:	3018      	adds	r0, #24
    8bc6:	f003 f92d 	bl	be24 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    8bca:	2300      	movs	r3, #0
	__asm__ volatile(
    8bcc:	f04f 0220 	mov.w	r2, #32
    8bd0:	f3ef 8511 	mrs	r5, BASEPRI
    8bd4:	f382 8812 	msr	BASEPRI_MAX, r2
    8bd8:	f3bf 8f6f 	isb	sy
    8bdc:	e010      	b.n	8c00 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8bde:	7b63      	ldrb	r3, [r4, #13]
    8be0:	f043 0310 	orr.w	r3, r3, #16
    8be4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    8be6:	4b15      	ldr	r3, [pc, #84]	; (8c3c <z_impl_k_thread_suspend+0x7c>)
    8be8:	6898      	ldr	r0, [r3, #8]
    8bea:	42a0      	cmp	r0, r4
    8bec:	bf14      	ite	ne
    8bee:	2000      	movne	r0, #0
    8bf0:	2001      	moveq	r0, #1
    8bf2:	f7ff fe41 	bl	8878 <update_cache>
	__asm__ volatile(
    8bf6:	f385 8811 	msr	BASEPRI, r5
    8bfa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8bfe:	2301      	movs	r3, #1
    8c00:	b963      	cbnz	r3, 8c1c <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    8c02:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    8c04:	f994 300d 	ldrsb.w	r3, [r4, #13]
    8c08:	2b00      	cmp	r3, #0
    8c0a:	dae8      	bge.n	8bde <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8c0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8c10:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8c12:	4621      	mov	r1, r4
    8c14:	480a      	ldr	r0, [pc, #40]	; (8c40 <z_impl_k_thread_suspend+0x80>)
    8c16:	f002 ffaa 	bl	bb6e <z_priq_dumb_remove>
}
    8c1a:	e7e0      	b.n	8bde <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    8c1c:	4b07      	ldr	r3, [pc, #28]	; (8c3c <z_impl_k_thread_suspend+0x7c>)
    8c1e:	689b      	ldr	r3, [r3, #8]
    8c20:	42a3      	cmp	r3, r4
    8c22:	d000      	beq.n	8c26 <z_impl_k_thread_suspend+0x66>
}
    8c24:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    8c26:	f04f 0320 	mov.w	r3, #32
    8c2a:	f3ef 8011 	mrs	r0, BASEPRI
    8c2e:	f383 8812 	msr	BASEPRI_MAX, r3
    8c32:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8c36:	f002 ff85 	bl	bb44 <z_reschedule_irqlock>
    8c3a:	e7f3      	b.n	8c24 <z_impl_k_thread_suspend+0x64>
    8c3c:	20001abc 	.word	0x20001abc
    8c40:	20001adc 	.word	0x20001adc

00008c44 <k_sched_unlock>:

void k_sched_unlock(void)
{
    8c44:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    8c46:	2300      	movs	r3, #0
    8c48:	f04f 0220 	mov.w	r2, #32
    8c4c:	f3ef 8411 	mrs	r4, BASEPRI
    8c50:	f382 8812 	msr	BASEPRI_MAX, r2
    8c54:	f3bf 8f6f 	isb	sy
    8c58:	b96b      	cbnz	r3, 8c76 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    8c5a:	4b0c      	ldr	r3, [pc, #48]	; (8c8c <k_sched_unlock+0x48>)
    8c5c:	689a      	ldr	r2, [r3, #8]
    8c5e:	7bd3      	ldrb	r3, [r2, #15]
    8c60:	3301      	adds	r3, #1
    8c62:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    8c64:	2000      	movs	r0, #0
    8c66:	f7ff fe07 	bl	8878 <update_cache>
	__asm__ volatile(
    8c6a:	f384 8811 	msr	BASEPRI, r4
    8c6e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8c72:	2301      	movs	r3, #1
    8c74:	e7f0      	b.n	8c58 <k_sched_unlock+0x14>
	__asm__ volatile(
    8c76:	f04f 0320 	mov.w	r3, #32
    8c7a:	f3ef 8011 	mrs	r0, BASEPRI
    8c7e:	f383 8812 	msr	BASEPRI_MAX, r3
    8c82:	f3bf 8f6f 	isb	sy
    8c86:	f002 ff5d 	bl	bb44 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    8c8a:	bd10      	pop	{r4, pc}
    8c8c:	20001abc 	.word	0x20001abc

00008c90 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    8c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    8c92:	7b43      	ldrb	r3, [r0, #13]
    8c94:	f013 0f08 	tst.w	r3, #8
    8c98:	d145      	bne.n	8d26 <end_thread+0x96>
    8c9a:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    8c9c:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8ca0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    8ca4:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    8ca6:	f013 0f80 	tst.w	r3, #128	; 0x80
    8caa:	d114      	bne.n	8cd6 <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    8cac:	68ab      	ldr	r3, [r5, #8]
    8cae:	b15b      	cbz	r3, 8cc8 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8cb0:	4628      	mov	r0, r5
    8cb2:	f002 ff3b 	bl	bb2c <pended_on_thread>
    8cb6:	4629      	mov	r1, r5
    8cb8:	f002 ff59 	bl	bb6e <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8cbc:	7b6b      	ldrb	r3, [r5, #13]
    8cbe:	f023 0302 	bic.w	r3, r3, #2
    8cc2:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    8cc4:	2300      	movs	r3, #0
    8cc6:	60ab      	str	r3, [r5, #8]
    8cc8:	f105 0018 	add.w	r0, r5, #24
    8ccc:	f003 f8aa 	bl	be24 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    8cd0:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    8cd4:	e01c      	b.n	8d10 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8cda:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8cdc:	4601      	mov	r1, r0
    8cde:	4812      	ldr	r0, [pc, #72]	; (8d28 <end_thread+0x98>)
    8ce0:	f002 ff45 	bl	bb6e <z_priq_dumb_remove>
}
    8ce4:	e7e2      	b.n	8cac <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8ce6:	4620      	mov	r0, r4
    8ce8:	f002 ff20 	bl	bb2c <pended_on_thread>
    8cec:	4621      	mov	r1, r4
    8cee:	f002 ff3e 	bl	bb6e <z_priq_dumb_remove>
    8cf2:	7b63      	ldrb	r3, [r4, #13]
    8cf4:	f023 0302 	bic.w	r3, r3, #2
    8cf8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    8cfa:	2600      	movs	r6, #0
    8cfc:	60a6      	str	r6, [r4, #8]
    8cfe:	f104 0018 	add.w	r0, r4, #24
    8d02:	f003 f88f 	bl	be24 <z_abort_timeout>
    8d06:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    8d0a:	4620      	mov	r0, r4
    8d0c:	f7ff fe6a 	bl	89e4 <ready_thread>
	return list->head == list;
    8d10:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8d12:	42bc      	cmp	r4, r7
    8d14:	d001      	beq.n	8d1a <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    8d16:	2c00      	cmp	r4, #0
    8d18:	d1e5      	bne.n	8ce6 <end_thread+0x56>
		update_cache(1);
    8d1a:	2001      	movs	r0, #1
    8d1c:	f7ff fdac 	bl	8878 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    8d20:	4628      	mov	r0, r5
    8d22:	f7ff f94f 	bl	7fc4 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    8d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8d28:	20001adc 	.word	0x20001adc

00008d2c <z_sched_init>:
{
    8d2c:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    8d2e:	4804      	ldr	r0, [pc, #16]	; (8d40 <z_sched_init+0x14>)
    8d30:	f003 f826 	bl	bd80 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    8d34:	2100      	movs	r1, #0
    8d36:	4608      	mov	r0, r1
    8d38:	f7ff fd2e 	bl	8798 <k_sched_time_slice_set>
}
    8d3c:	bd08      	pop	{r3, pc}
    8d3e:	bf00      	nop
    8d40:	20001ad8 	.word	0x20001ad8

00008d44 <z_impl_k_yield>:
{
    8d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d46:	f04f 0320 	mov.w	r3, #32
    8d4a:	f3ef 8611 	mrs	r6, BASEPRI
    8d4e:	f383 8812 	msr	BASEPRI_MAX, r3
    8d52:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    8d56:	4c1c      	ldr	r4, [pc, #112]	; (8dc8 <z_impl_k_yield+0x84>)
    8d58:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8d5a:	7b4b      	ldrb	r3, [r1, #13]
    8d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8d60:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8d62:	f104 0720 	add.w	r7, r4, #32
    8d66:	4638      	mov	r0, r7
    8d68:	f002 ff01 	bl	bb6e <z_priq_dumb_remove>
	queue_thread(_current);
    8d6c:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    8d6e:	7b6b      	ldrb	r3, [r5, #13]
    8d70:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8d74:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    8d76:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8d78:	42bc      	cmp	r4, r7
    8d7a:	d023      	beq.n	8dc4 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8d7c:	b16c      	cbz	r4, 8d9a <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8d7e:	4621      	mov	r1, r4
    8d80:	4628      	mov	r0, r5
    8d82:	f002 fed5 	bl	bb30 <z_sched_prio_cmp>
    8d86:	2800      	cmp	r0, #0
    8d88:	dc16      	bgt.n	8db8 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8d8a:	b134      	cbz	r4, 8d9a <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    8d8c:	4b0e      	ldr	r3, [pc, #56]	; (8dc8 <z_impl_k_yield+0x84>)
    8d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d90:	429c      	cmp	r4, r3
    8d92:	d002      	beq.n	8d9a <z_impl_k_yield+0x56>
    8d94:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8d96:	2c00      	cmp	r4, #0
    8d98:	d1f0      	bne.n	8d7c <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    8d9a:	4b0b      	ldr	r3, [pc, #44]	; (8dc8 <z_impl_k_yield+0x84>)
    8d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    8d9e:	f103 0120 	add.w	r1, r3, #32
    8da2:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    8da4:	606a      	str	r2, [r5, #4]
	tail->next = node;
    8da6:	6015      	str	r5, [r2, #0]
	list->tail = node;
    8da8:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    8daa:	2001      	movs	r0, #1
    8dac:	f7ff fd64 	bl	8878 <update_cache>
    8db0:	4630      	mov	r0, r6
    8db2:	f7f9 fd83 	bl	28bc <arch_swap>
}
    8db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    8db8:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    8dba:	606b      	str	r3, [r5, #4]
	node->next = successor;
    8dbc:	602c      	str	r4, [r5, #0]
	prev->next = node;
    8dbe:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    8dc0:	6065      	str	r5, [r4, #4]
}
    8dc2:	e7f2      	b.n	8daa <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8dc4:	2400      	movs	r4, #0
    8dc6:	e7d9      	b.n	8d7c <z_impl_k_yield+0x38>
    8dc8:	20001abc 	.word	0x20001abc

00008dcc <z_tick_sleep>:
{
    8dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8dd0:	4604      	mov	r4, r0
    8dd2:	460d      	mov	r5, r1
	if (ticks == 0) {
    8dd4:	ea54 0105 	orrs.w	r1, r4, r5
    8dd8:	d037      	beq.n	8e4a <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    8dda:	f06f 0101 	mvn.w	r1, #1
    8dde:	1a0a      	subs	r2, r1, r0
    8de0:	f04f 31ff 	mov.w	r1, #4294967295
    8de4:	eb61 0305 	sbc.w	r3, r1, r5
    8de8:	2a01      	cmp	r2, #1
    8dea:	f173 0300 	sbcs.w	r3, r3, #0
    8dee:	db30      	blt.n	8e52 <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    8df0:	f06f 0601 	mvn.w	r6, #1
    8df4:	1a36      	subs	r6, r6, r0
    8df6:	f04f 0320 	mov.w	r3, #32
    8dfa:	f3ef 8811 	mrs	r8, BASEPRI
    8dfe:	f383 8812 	msr	BASEPRI_MAX, r3
    8e02:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    8e06:	4f16      	ldr	r7, [pc, #88]	; (8e60 <z_tick_sleep+0x94>)
    8e08:	68b8      	ldr	r0, [r7, #8]
    8e0a:	4b16      	ldr	r3, [pc, #88]	; (8e64 <z_tick_sleep+0x98>)
    8e0c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    8e0e:	f7ff fe47 	bl	8aa0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    8e12:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8e14:	4622      	mov	r2, r4
    8e16:	462b      	mov	r3, r5
    8e18:	4913      	ldr	r1, [pc, #76]	; (8e68 <z_tick_sleep+0x9c>)
    8e1a:	3018      	adds	r0, #24
    8e1c:	f000 f904 	bl	9028 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    8e20:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8e22:	7b53      	ldrb	r3, [r2, #13]
    8e24:	f043 0310 	orr.w	r3, r3, #16
    8e28:	7353      	strb	r3, [r2, #13]
    8e2a:	4640      	mov	r0, r8
    8e2c:	f7f9 fd46 	bl	28bc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    8e30:	2500      	movs	r5, #0
    8e32:	f003 f856 	bl	bee2 <sys_clock_tick_get_32>
    8e36:	1a34      	subs	r4, r6, r0
    8e38:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    8e3c:	2c01      	cmp	r4, #1
    8e3e:	f175 0300 	sbcs.w	r3, r5, #0
    8e42:	da0a      	bge.n	8e5a <z_tick_sleep+0x8e>
	return 0;
    8e44:	2000      	movs	r0, #0
}
    8e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    8e4a:	f7ff ff7b 	bl	8d44 <z_impl_k_yield>
		return 0;
    8e4e:	2000      	movs	r0, #0
    8e50:	e7f9      	b.n	8e46 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    8e52:	f003 f846 	bl	bee2 <sys_clock_tick_get_32>
    8e56:	1906      	adds	r6, r0, r4
    8e58:	e7cd      	b.n	8df6 <z_tick_sleep+0x2a>
		return ticks;
    8e5a:	4620      	mov	r0, r4
    8e5c:	e7f3      	b.n	8e46 <z_tick_sleep+0x7a>
    8e5e:	bf00      	nop
    8e60:	20001abc 	.word	0x20001abc
    8e64:	20001af0 	.word	0x20001af0
    8e68:	0000bc0b 	.word	0x0000bc0b

00008e6c <z_impl_k_sleep>:
{
    8e6c:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8e6e:	f1b1 3fff 	cmp.w	r1, #4294967295
    8e72:	bf08      	it	eq
    8e74:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    8e78:	d01a      	beq.n	8eb0 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    8e7a:	f7ff ffa7 	bl	8dcc <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    8e7e:	4604      	mov	r4, r0
    8e80:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    8e82:	0169      	lsls	r1, r5, #5
    8e84:	0143      	lsls	r3, r0, #5
    8e86:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    8e8a:	1a18      	subs	r0, r3, r0
    8e8c:	eb62 0305 	sbc.w	r3, r2, r5
    8e90:	009a      	lsls	r2, r3, #2
    8e92:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    8e96:	0081      	lsls	r1, r0, #2
    8e98:	4613      	mov	r3, r2
    8e9a:	1908      	adds	r0, r1, r4
    8e9c:	eb45 0303 	adc.w	r3, r5, r3
    8ea0:	00da      	lsls	r2, r3, #3
    8ea2:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    8ea6:	00c1      	lsls	r1, r0, #3
    8ea8:	0bc8      	lsrs	r0, r1, #15
    8eaa:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    8eae:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    8eb0:	4b03      	ldr	r3, [pc, #12]	; (8ec0 <z_impl_k_sleep+0x54>)
    8eb2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    8eb4:	f7ff fe84 	bl	8bc0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    8eb8:	f04f 30ff 	mov.w	r0, #4294967295
    8ebc:	e7f7      	b.n	8eae <z_impl_k_sleep+0x42>
    8ebe:	bf00      	nop
    8ec0:	20001abc 	.word	0x20001abc

00008ec4 <z_impl_z_current_get>:
}
    8ec4:	4b01      	ldr	r3, [pc, #4]	; (8ecc <z_impl_z_current_get+0x8>)
    8ec6:	6898      	ldr	r0, [r3, #8]
    8ec8:	4770      	bx	lr
    8eca:	bf00      	nop
    8ecc:	20001abc 	.word	0x20001abc

00008ed0 <z_impl_k_is_preempt_thread>:
    8ed0:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
    8ed4:	b933      	cbnz	r3, 8ee4 <z_impl_k_is_preempt_thread+0x14>
    8ed6:	4b05      	ldr	r3, [pc, #20]	; (8eec <z_impl_k_is_preempt_thread+0x1c>)
    8ed8:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    8eda:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
    8edc:	2b7f      	cmp	r3, #127	; 0x7f
    8ede:	d803      	bhi.n	8ee8 <z_impl_k_is_preempt_thread+0x18>
    8ee0:	2001      	movs	r0, #1
    8ee2:	4770      	bx	lr
    8ee4:	2000      	movs	r0, #0
    8ee6:	4770      	bx	lr
    8ee8:	2000      	movs	r0, #0
}
    8eea:	4770      	bx	lr
    8eec:	20001abc 	.word	0x20001abc

00008ef0 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    8ef0:	b538      	push	{r3, r4, r5, lr}
    8ef2:	f04f 0320 	mov.w	r3, #32
    8ef6:	f3ef 8511 	mrs	r5, BASEPRI
    8efa:	f383 8812 	msr	BASEPRI_MAX, r3
    8efe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    8f02:	7b43      	ldrb	r3, [r0, #13]
    8f04:	f013 0f08 	tst.w	r3, #8
    8f08:	d004      	beq.n	8f14 <z_thread_abort+0x24>
	__asm__ volatile(
    8f0a:	f385 8811 	msr	BASEPRI, r5
    8f0e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    8f12:	bd38      	pop	{r3, r4, r5, pc}
    8f14:	4604      	mov	r4, r0
	end_thread(thread);
    8f16:	f7ff febb 	bl	8c90 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    8f1a:	4b08      	ldr	r3, [pc, #32]	; (8f3c <z_thread_abort+0x4c>)
    8f1c:	689b      	ldr	r3, [r3, #8]
    8f1e:	42a3      	cmp	r3, r4
    8f20:	d004      	beq.n	8f2c <z_thread_abort+0x3c>
    8f22:	f385 8811 	msr	BASEPRI, r5
    8f26:	f3bf 8f6f 	isb	sy
    8f2a:	e7f2      	b.n	8f12 <z_thread_abort+0x22>
    8f2c:	f3ef 8305 	mrs	r3, IPSR
    8f30:	2b00      	cmp	r3, #0
    8f32:	d1f6      	bne.n	8f22 <z_thread_abort+0x32>
    8f34:	4628      	mov	r0, r5
    8f36:	f7f9 fcc1 	bl	28bc <arch_swap>
	return ret;
    8f3a:	e7f2      	b.n	8f22 <z_thread_abort+0x32>
    8f3c:	20001abc 	.word	0x20001abc

00008f40 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    8f40:	b5d0      	push	{r4, r6, r7, lr}
    8f42:	b082      	sub	sp, #8
    8f44:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    8f46:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    8f4a:	e9cd 6700 	strd	r6, r7, [sp]
    8f4e:	f7ff fdc3 	bl	8ad8 <z_pend_curr>

	if (data != NULL) {
    8f52:	b11c      	cbz	r4, 8f5c <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
    8f54:	4b02      	ldr	r3, [pc, #8]	; (8f60 <z_sched_wait+0x20>)
    8f56:	689b      	ldr	r3, [r3, #8]
    8f58:	695b      	ldr	r3, [r3, #20]
    8f5a:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    8f5c:	b002      	add	sp, #8
    8f5e:	bdd0      	pop	{r4, r6, r7, pc}
    8f60:	20001abc 	.word	0x20001abc

00008f64 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    8f64:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    8f66:	4806      	ldr	r0, [pc, #24]	; (8f80 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    8f68:	4a06      	ldr	r2, [pc, #24]	; (8f84 <z_data_copy+0x20>)
    8f6a:	1a12      	subs	r2, r2, r0
    8f6c:	4906      	ldr	r1, [pc, #24]	; (8f88 <z_data_copy+0x24>)
    8f6e:	f001 fdca 	bl	ab06 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    8f72:	4a06      	ldr	r2, [pc, #24]	; (8f8c <z_data_copy+0x28>)
    8f74:	4906      	ldr	r1, [pc, #24]	; (8f90 <z_data_copy+0x2c>)
    8f76:	4807      	ldr	r0, [pc, #28]	; (8f94 <z_data_copy+0x30>)
    8f78:	f001 fdc5 	bl	ab06 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    8f7c:	bd08      	pop	{r3, pc}
    8f7e:	bf00      	nop
    8f80:	20000000 	.word	0x20000000
    8f84:	200003ac 	.word	0x200003ac
    8f88:	0000c884 	.word	0x0000c884
    8f8c:	00000000 	.word	0x00000000
    8f90:	0000c884 	.word	0x0000c884
    8f94:	20000000 	.word	0x20000000

00008f98 <first>:
	return list->head == list;
    8f98:	4b03      	ldr	r3, [pc, #12]	; (8fa8 <first+0x10>)
    8f9a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8f9c:	4298      	cmp	r0, r3
    8f9e:	d000      	beq.n	8fa2 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    8fa0:	4770      	bx	lr
    8fa2:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    8fa4:	e7fc      	b.n	8fa0 <first+0x8>
    8fa6:	bf00      	nop
    8fa8:	200001b0 	.word	0x200001b0

00008fac <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8fac:	b130      	cbz	r0, 8fbc <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    8fae:	4a04      	ldr	r2, [pc, #16]	; (8fc0 <next+0x14>)
    8fb0:	6852      	ldr	r2, [r2, #4]
    8fb2:	4290      	cmp	r0, r2
    8fb4:	d001      	beq.n	8fba <next+0xe>
    8fb6:	6800      	ldr	r0, [r0, #0]
    8fb8:	4770      	bx	lr
    8fba:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    8fbc:	4770      	bx	lr
    8fbe:	bf00      	nop
    8fc0:	200001b0 	.word	0x200001b0

00008fc4 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    8fc4:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    8fc6:	4b04      	ldr	r3, [pc, #16]	; (8fd8 <elapsed+0x14>)
    8fc8:	681b      	ldr	r3, [r3, #0]
    8fca:	b10b      	cbz	r3, 8fd0 <elapsed+0xc>
    8fcc:	2000      	movs	r0, #0
}
    8fce:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    8fd0:	f7fb ffe6 	bl	4fa0 <sys_clock_elapsed>
    8fd4:	e7fb      	b.n	8fce <elapsed+0xa>
    8fd6:	bf00      	nop
    8fd8:	20001afc 	.word	0x20001afc

00008fdc <next_timeout>:

static int32_t next_timeout(void)
{
    8fdc:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    8fde:	f7ff ffdb 	bl	8f98 <first>
    8fe2:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    8fe4:	f7ff ffee 	bl	8fc4 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    8fe8:	b18c      	cbz	r4, 900e <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    8fea:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    8fee:	1a12      	subs	r2, r2, r0
    8ff0:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    8ff4:	2a01      	cmp	r2, #1
    8ff6:	f173 0100 	sbcs.w	r1, r3, #0
    8ffa:	db11      	blt.n	9020 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    8ffc:	4610      	mov	r0, r2
    8ffe:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    9002:	f173 0300 	sbcs.w	r3, r3, #0
    9006:	db04      	blt.n	9012 <next_timeout+0x36>
    9008:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    900c:	e001      	b.n	9012 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    900e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    9012:	4b04      	ldr	r3, [pc, #16]	; (9024 <next_timeout+0x48>)
    9014:	691b      	ldr	r3, [r3, #16]
    9016:	b113      	cbz	r3, 901e <next_timeout+0x42>
    9018:	4283      	cmp	r3, r0
    901a:	da00      	bge.n	901e <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    901c:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    901e:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    9020:	2000      	movs	r0, #0
    9022:	e7f6      	b.n	9012 <next_timeout+0x36>
    9024:	20001abc 	.word	0x20001abc

00009028 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    9028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    902c:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    902e:	f1b3 3fff 	cmp.w	r3, #4294967295
    9032:	bf08      	it	eq
    9034:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    9038:	f000 8096 	beq.w	9168 <z_add_timeout+0x140>
    903c:	4682      	mov	sl, r0
    903e:	4614      	mov	r4, r2
    9040:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    9042:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    9044:	2300      	movs	r3, #0
	__asm__ volatile(
    9046:	f04f 0220 	mov.w	r2, #32
    904a:	f3ef 8b11 	mrs	fp, BASEPRI
    904e:	f382 8812 	msr	BASEPRI_MAX, r2
    9052:	f3bf 8f6f 	isb	sy
    9056:	e02e      	b.n	90b6 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    9058:	2201      	movs	r2, #1
    905a:	2300      	movs	r3, #0
    905c:	e04b      	b.n	90f6 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    905e:	f7ff ffb1 	bl	8fc4 <elapsed>
    9062:	1822      	adds	r2, r4, r0
    9064:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
    9068:	3201      	adds	r2, #1
    906a:	f143 0300 	adc.w	r3, r3, #0
    906e:	f8ca 2010 	str.w	r2, [sl, #16]
    9072:	f8ca 3014 	str.w	r3, [sl, #20]
    9076:	e042      	b.n	90fe <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    9078:	9b00      	ldr	r3, [sp, #0]
    907a:	1ac2      	subs	r2, r0, r3
    907c:	9b01      	ldr	r3, [sp, #4]
    907e:	eb61 0303 	sbc.w	r3, r1, r3
    9082:	f8cc 2010 	str.w	r2, [ip, #16]
    9086:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
    908a:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
    908e:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
    9092:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
    9096:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
    909a:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    909e:	f1bc 0f00 	cmp.w	ip, #0
    90a2:	d049      	beq.n	9138 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    90a4:	f7ff ff78 	bl	8f98 <first>
    90a8:	4582      	cmp	sl, r0
    90aa:	d050      	beq.n	914e <z_add_timeout+0x126>
	__asm__ volatile(
    90ac:	f38b 8811 	msr	BASEPRI, fp
    90b0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    90b4:	2301      	movs	r3, #1
    90b6:	2b00      	cmp	r3, #0
    90b8:	d156      	bne.n	9168 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    90ba:	f06f 0301 	mvn.w	r3, #1
    90be:	ebb3 0804 	subs.w	r8, r3, r4
    90c2:	f04f 30ff 	mov.w	r0, #4294967295
    90c6:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    90ca:	f1b8 0f00 	cmp.w	r8, #0
    90ce:	f179 0300 	sbcs.w	r3, r9, #0
    90d2:	dbc4      	blt.n	905e <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    90d4:	4a26      	ldr	r2, [pc, #152]	; (9170 <z_add_timeout+0x148>)
    90d6:	6813      	ldr	r3, [r2, #0]
    90d8:	6852      	ldr	r2, [r2, #4]
    90da:	18e3      	adds	r3, r4, r3
    90dc:	eb45 0202 	adc.w	r2, r5, r2
    90e0:	f06f 0101 	mvn.w	r1, #1
    90e4:	1ace      	subs	r6, r1, r3
    90e6:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
    90ea:	4632      	mov	r2, r6
    90ec:	463b      	mov	r3, r7
    90ee:	2e01      	cmp	r6, #1
    90f0:	f177 0100 	sbcs.w	r1, r7, #0
    90f4:	dbb0      	blt.n	9058 <z_add_timeout+0x30>
    90f6:	f8ca 2010 	str.w	r2, [sl, #16]
    90fa:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    90fe:	f7ff ff4b 	bl	8f98 <first>
    9102:	4684      	mov	ip, r0
    9104:	f1bc 0f00 	cmp.w	ip, #0
    9108:	d0c9      	beq.n	909e <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
    910a:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
    910e:	e9da 2304 	ldrd	r2, r3, [sl, #16]
    9112:	e9cd 2300 	strd	r2, r3, [sp]
    9116:	4282      	cmp	r2, r0
    9118:	418b      	sbcs	r3, r1
    911a:	dbad      	blt.n	9078 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
    911c:	9b00      	ldr	r3, [sp, #0]
    911e:	1a1a      	subs	r2, r3, r0
    9120:	9b01      	ldr	r3, [sp, #4]
    9122:	eb63 0301 	sbc.w	r3, r3, r1
    9126:	f8ca 2010 	str.w	r2, [sl, #16]
    912a:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    912e:	4660      	mov	r0, ip
    9130:	f7ff ff3c 	bl	8fac <next>
    9134:	4684      	mov	ip, r0
    9136:	e7e5      	b.n	9104 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
    9138:	4b0e      	ldr	r3, [pc, #56]	; (9174 <z_add_timeout+0x14c>)
    913a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    913c:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
    9140:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
    9144:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    9148:	f8c3 a004 	str.w	sl, [r3, #4]
}
    914c:	e7aa      	b.n	90a4 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    914e:	f7ff ff45 	bl	8fdc <next_timeout>

			if (next_time == 0 ||
    9152:	4603      	mov	r3, r0
    9154:	b118      	cbz	r0, 915e <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
    9156:	4a08      	ldr	r2, [pc, #32]	; (9178 <z_add_timeout+0x150>)
    9158:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    915a:	4282      	cmp	r2, r0
    915c:	d0a6      	beq.n	90ac <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
    915e:	2100      	movs	r1, #0
    9160:	4618      	mov	r0, r3
    9162:	f7fb fee9 	bl	4f38 <sys_clock_set_timeout>
    9166:	e7a1      	b.n	90ac <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    9168:	b003      	add	sp, #12
    916a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    916e:	bf00      	nop
    9170:	200006d0 	.word	0x200006d0
    9174:	200001b0 	.word	0x200001b0
    9178:	20001abc 	.word	0x20001abc

0000917c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    917c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    917e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    9180:	f7ff fbe4 	bl	894c <z_time_slice>
	__asm__ volatile(
    9184:	f04f 0320 	mov.w	r3, #32
    9188:	f3ef 8511 	mrs	r5, BASEPRI
    918c:	f383 8812 	msr	BASEPRI_MAX, r3
    9190:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    9194:	4b28      	ldr	r3, [pc, #160]	; (9238 <sys_clock_announce+0xbc>)
    9196:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    9198:	f7ff fefe 	bl	8f98 <first>
    919c:	4604      	mov	r4, r0
    919e:	b350      	cbz	r0, 91f6 <sys_clock_announce+0x7a>
    91a0:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    91a4:	4b24      	ldr	r3, [pc, #144]	; (9238 <sys_clock_announce+0xbc>)
    91a6:	681b      	ldr	r3, [r3, #0]
    91a8:	17d9      	asrs	r1, r3, #31
    91aa:	42b3      	cmp	r3, r6
    91ac:	eb71 0207 	sbcs.w	r2, r1, r7
    91b0:	db21      	blt.n	91f6 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    91b2:	4a22      	ldr	r2, [pc, #136]	; (923c <sys_clock_announce+0xc0>)
    91b4:	e9d2 0100 	ldrd	r0, r1, [r2]
    91b8:	1980      	adds	r0, r0, r6
    91ba:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    91be:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
    91c2:	1b9b      	subs	r3, r3, r6
    91c4:	4a1c      	ldr	r2, [pc, #112]	; (9238 <sys_clock_announce+0xbc>)
    91c6:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    91c8:	2200      	movs	r2, #0
    91ca:	2300      	movs	r3, #0
    91cc:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    91d0:	4620      	mov	r0, r4
    91d2:	f002 fe10 	bl	bdf6 <remove_timeout>
	__asm__ volatile(
    91d6:	f385 8811 	msr	BASEPRI, r5
    91da:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    91de:	68a3      	ldr	r3, [r4, #8]
    91e0:	4620      	mov	r0, r4
    91e2:	4798      	blx	r3
	__asm__ volatile(
    91e4:	f04f 0320 	mov.w	r3, #32
    91e8:	f3ef 8511 	mrs	r5, BASEPRI
    91ec:	f383 8812 	msr	BASEPRI_MAX, r3
    91f0:	f3bf 8f6f 	isb	sy
    91f4:	e7d0      	b.n	9198 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    91f6:	b144      	cbz	r4, 920a <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    91f8:	4b0f      	ldr	r3, [pc, #60]	; (9238 <sys_clock_announce+0xbc>)
    91fa:	6819      	ldr	r1, [r3, #0]
    91fc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    9200:	1a52      	subs	r2, r2, r1
    9202:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    9206:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
    920a:	480c      	ldr	r0, [pc, #48]	; (923c <sys_clock_announce+0xc0>)
    920c:	490a      	ldr	r1, [pc, #40]	; (9238 <sys_clock_announce+0xbc>)
    920e:	680c      	ldr	r4, [r1, #0]
    9210:	e9d0 2300 	ldrd	r2, r3, [r0]
    9214:	1912      	adds	r2, r2, r4
    9216:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    921a:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    921e:	2400      	movs	r4, #0
    9220:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
    9222:	f7ff fedb 	bl	8fdc <next_timeout>
    9226:	4621      	mov	r1, r4
    9228:	f7fb fe86 	bl	4f38 <sys_clock_set_timeout>
	__asm__ volatile(
    922c:	f385 8811 	msr	BASEPRI, r5
    9230:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    9234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9236:	bf00      	nop
    9238:	20001afc 	.word	0x20001afc
    923c:	200006d0 	.word	0x200006d0

00009240 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    9240:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    9242:	2100      	movs	r1, #0
	__asm__ volatile(
    9244:	f04f 0320 	mov.w	r3, #32
    9248:	f3ef 8411 	mrs	r4, BASEPRI
    924c:	f383 8812 	msr	BASEPRI_MAX, r3
    9250:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    9254:	2200      	movs	r2, #0
    9256:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
    9258:	b969      	cbnz	r1, 9276 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
    925a:	f7fb fea1 	bl	4fa0 <sys_clock_elapsed>
    925e:	4b07      	ldr	r3, [pc, #28]	; (927c <sys_clock_tick_get+0x3c>)
    9260:	e9d3 2300 	ldrd	r2, r3, [r3]
    9264:	1812      	adds	r2, r2, r0
    9266:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    926a:	f384 8811 	msr	BASEPRI, r4
    926e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9272:	2101      	movs	r1, #1
    9274:	e7f0      	b.n	9258 <sys_clock_tick_get+0x18>
	}
	return t;
}
    9276:	4610      	mov	r0, r2
    9278:	4619      	mov	r1, r3
    927a:	bd10      	pop	{r4, pc}
    927c:	200006d0 	.word	0x200006d0

00009280 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    9280:	b538      	push	{r3, r4, r5, lr}
    9282:	4604      	mov	r4, r0
    9284:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    9286:	f002 fb37 	bl	b8f8 <k_is_in_isr>
    928a:	b948      	cbnz	r0, 92a0 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    928c:	4b05      	ldr	r3, [pc, #20]	; (92a4 <z_thread_aligned_alloc+0x24>)
    928e:	689b      	ldr	r3, [r3, #8]
    9290:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
	}

	if (heap != NULL) {
    9294:	b118      	cbz	r0, 929e <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
    9296:	462a      	mov	r2, r5
    9298:	4621      	mov	r1, r4
    929a:	f002 fe5c 	bl	bf56 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
    929e:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
    92a0:	2000      	movs	r0, #0
	return ret;
    92a2:	e7fc      	b.n	929e <z_thread_aligned_alloc+0x1e>
    92a4:	20001abc 	.word	0x20001abc

000092a8 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    92a8:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    92aa:	4a03      	ldr	r2, [pc, #12]	; (92b8 <boot_banner+0x10>)
    92ac:	4903      	ldr	r1, [pc, #12]	; (92bc <boot_banner+0x14>)
    92ae:	4804      	ldr	r0, [pc, #16]	; (92c0 <boot_banner+0x18>)
    92b0:	f000 f9e2 	bl	9678 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    92b4:	bd08      	pop	{r3, pc}
    92b6:	bf00      	nop
    92b8:	0000c470 	.word	0x0000c470
    92bc:	0000c7b4 	.word	0x0000c7b4
    92c0:	0000c7c4 	.word	0x0000c7c4

000092c4 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    92c4:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    92c6:	4c06      	ldr	r4, [pc, #24]	; (92e0 <statics_init+0x1c>)
    92c8:	4b06      	ldr	r3, [pc, #24]	; (92e4 <statics_init+0x20>)
    92ca:	429c      	cmp	r4, r3
    92cc:	d206      	bcs.n	92dc <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    92ce:	68a2      	ldr	r2, [r4, #8]
    92d0:	6861      	ldr	r1, [r4, #4]
    92d2:	4620      	mov	r0, r4
    92d4:	f002 fe62 	bl	bf9c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    92d8:	3414      	adds	r4, #20
    92da:	e7f5      	b.n	92c8 <statics_init+0x4>
		}
	}
	return 0;
}
    92dc:	2000      	movs	r0, #0
    92de:	bd10      	pop	{r4, pc}
    92e0:	2000024c 	.word	0x2000024c
    92e4:	2000024c 	.word	0x2000024c

000092e8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    92e8:	b510      	push	{r4, lr}
    92ea:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    92ec:	4b08      	ldr	r3, [pc, #32]	; (9310 <k_sys_work_q_init+0x28>)
    92ee:	9302      	str	r3, [sp, #8]
    92f0:	2400      	movs	r4, #0
    92f2:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    92f6:	ab02      	add	r3, sp, #8
    92f8:	9300      	str	r3, [sp, #0]
    92fa:	f04f 33ff 	mov.w	r3, #4294967295
    92fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9302:	4904      	ldr	r1, [pc, #16]	; (9314 <k_sys_work_q_init+0x2c>)
    9304:	4804      	ldr	r0, [pc, #16]	; (9318 <k_sys_work_q_init+0x30>)
    9306:	f7ff f9e3 	bl	86d0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    930a:	4620      	mov	r0, r4
    930c:	b004      	add	sp, #16
    930e:	bd10      	pop	{r4, pc}
    9310:	0000c7ec 	.word	0x0000c7ec
    9314:	20003220 	.word	0x20003220
    9318:	200006d8 	.word	0x200006d8

0000931c <nrf_cc3xx_platform_init_no_rng>:
    931c:	b510      	push	{r4, lr}
    931e:	4c0a      	ldr	r4, [pc, #40]	; (9348 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    9320:	6823      	ldr	r3, [r4, #0]
    9322:	b11b      	cbz	r3, 932c <nrf_cc3xx_platform_init_no_rng+0x10>
    9324:	2301      	movs	r3, #1
    9326:	2000      	movs	r0, #0
    9328:	6023      	str	r3, [r4, #0]
    932a:	bd10      	pop	{r4, pc}
    932c:	f000 f8d4 	bl	94d8 <CC_LibInitNoRng>
    9330:	2800      	cmp	r0, #0
    9332:	d0f7      	beq.n	9324 <nrf_cc3xx_platform_init_no_rng+0x8>
    9334:	3801      	subs	r0, #1
    9336:	2807      	cmp	r0, #7
    9338:	d803      	bhi.n	9342 <nrf_cc3xx_platform_init_no_rng+0x26>
    933a:	4b04      	ldr	r3, [pc, #16]	; (934c <nrf_cc3xx_platform_init_no_rng+0x30>)
    933c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    9340:	bd10      	pop	{r4, pc}
    9342:	4803      	ldr	r0, [pc, #12]	; (9350 <nrf_cc3xx_platform_init_no_rng+0x34>)
    9344:	bd10      	pop	{r4, pc}
    9346:	bf00      	nop
    9348:	20001b00 	.word	0x20001b00
    934c:	0000c7f8 	.word	0x0000c7f8
    9350:	ffff8ffe 	.word	0xffff8ffe

00009354 <nrf_cc3xx_platform_abort>:
    9354:	f3bf 8f4f 	dsb	sy
    9358:	4905      	ldr	r1, [pc, #20]	; (9370 <nrf_cc3xx_platform_abort+0x1c>)
    935a:	4b06      	ldr	r3, [pc, #24]	; (9374 <nrf_cc3xx_platform_abort+0x20>)
    935c:	68ca      	ldr	r2, [r1, #12]
    935e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    9362:	4313      	orrs	r3, r2
    9364:	60cb      	str	r3, [r1, #12]
    9366:	f3bf 8f4f 	dsb	sy
    936a:	bf00      	nop
    936c:	e7fd      	b.n	936a <nrf_cc3xx_platform_abort+0x16>
    936e:	bf00      	nop
    9370:	e000ed00 	.word	0xe000ed00
    9374:	05fa0004 	.word	0x05fa0004

00009378 <CC_PalAbort>:
    9378:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    937c:	2100      	movs	r1, #0
    937e:	b430      	push	{r4, r5}
    9380:	4a08      	ldr	r2, [pc, #32]	; (93a4 <CC_PalAbort+0x2c>)
    9382:	4c09      	ldr	r4, [pc, #36]	; (93a8 <CC_PalAbort+0x30>)
    9384:	4d09      	ldr	r5, [pc, #36]	; (93ac <CC_PalAbort+0x34>)
    9386:	6023      	str	r3, [r4, #0]
    9388:	602b      	str	r3, [r5, #0]
    938a:	6013      	str	r3, [r2, #0]
    938c:	60e3      	str	r3, [r4, #12]
    938e:	60eb      	str	r3, [r5, #12]
    9390:	60d3      	str	r3, [r2, #12]
    9392:	61a3      	str	r3, [r4, #24]
    9394:	4a06      	ldr	r2, [pc, #24]	; (93b0 <CC_PalAbort+0x38>)
    9396:	4c07      	ldr	r4, [pc, #28]	; (93b4 <CC_PalAbort+0x3c>)
    9398:	61ab      	str	r3, [r5, #24]
    939a:	6863      	ldr	r3, [r4, #4]
    939c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    93a0:	bc30      	pop	{r4, r5}
    93a2:	4718      	bx	r3
    93a4:	50845408 	.word	0x50845408
    93a8:	50845400 	.word	0x50845400
    93ac:	50845404 	.word	0x50845404
    93b0:	50844000 	.word	0x50844000
    93b4:	200001b8 	.word	0x200001b8

000093b8 <nrf_cc3xx_platform_set_abort>:
    93b8:	4b02      	ldr	r3, [pc, #8]	; (93c4 <nrf_cc3xx_platform_set_abort+0xc>)
    93ba:	e9d0 1200 	ldrd	r1, r2, [r0]
    93be:	e9c3 1200 	strd	r1, r2, [r3]
    93c2:	4770      	bx	lr
    93c4:	200001b8 	.word	0x200001b8

000093c8 <mutex_free>:
    93c8:	b510      	push	{r4, lr}
    93ca:	4604      	mov	r4, r0
    93cc:	b130      	cbz	r0, 93dc <mutex_free+0x14>
    93ce:	6863      	ldr	r3, [r4, #4]
    93d0:	06db      	lsls	r3, r3, #27
    93d2:	d502      	bpl.n	93da <mutex_free+0x12>
    93d4:	2300      	movs	r3, #0
    93d6:	6023      	str	r3, [r4, #0]
    93d8:	6063      	str	r3, [r4, #4]
    93da:	bd10      	pop	{r4, pc}
    93dc:	4b02      	ldr	r3, [pc, #8]	; (93e8 <mutex_free+0x20>)
    93de:	4803      	ldr	r0, [pc, #12]	; (93ec <mutex_free+0x24>)
    93e0:	685b      	ldr	r3, [r3, #4]
    93e2:	4798      	blx	r3
    93e4:	e7f3      	b.n	93ce <mutex_free+0x6>
    93e6:	bf00      	nop
    93e8:	200001b8 	.word	0x200001b8
    93ec:	0000c818 	.word	0x0000c818

000093f0 <mutex_unlock>:
    93f0:	b168      	cbz	r0, 940e <mutex_unlock+0x1e>
    93f2:	6843      	ldr	r3, [r0, #4]
    93f4:	b13b      	cbz	r3, 9406 <mutex_unlock+0x16>
    93f6:	06db      	lsls	r3, r3, #27
    93f8:	d507      	bpl.n	940a <mutex_unlock+0x1a>
    93fa:	f3bf 8f5f 	dmb	sy
    93fe:	2300      	movs	r3, #0
    9400:	6003      	str	r3, [r0, #0]
    9402:	4618      	mov	r0, r3
    9404:	4770      	bx	lr
    9406:	4803      	ldr	r0, [pc, #12]	; (9414 <mutex_unlock+0x24>)
    9408:	4770      	bx	lr
    940a:	4803      	ldr	r0, [pc, #12]	; (9418 <mutex_unlock+0x28>)
    940c:	4770      	bx	lr
    940e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    9412:	4770      	bx	lr
    9414:	ffff8fea 	.word	0xffff8fea
    9418:	ffff8fe9 	.word	0xffff8fe9

0000941c <mutex_init>:
    941c:	b510      	push	{r4, lr}
    941e:	4604      	mov	r4, r0
    9420:	b120      	cbz	r0, 942c <mutex_init+0x10>
    9422:	2200      	movs	r2, #0
    9424:	2311      	movs	r3, #17
    9426:	6022      	str	r2, [r4, #0]
    9428:	6063      	str	r3, [r4, #4]
    942a:	bd10      	pop	{r4, pc}
    942c:	4801      	ldr	r0, [pc, #4]	; (9434 <mutex_init+0x18>)
    942e:	f7ff ffa3 	bl	9378 <CC_PalAbort>
    9432:	e7f6      	b.n	9422 <mutex_init+0x6>
    9434:	0000c840 	.word	0x0000c840

00009438 <mutex_lock>:
    9438:	b1a0      	cbz	r0, 9464 <mutex_lock+0x2c>
    943a:	6843      	ldr	r3, [r0, #4]
    943c:	b183      	cbz	r3, 9460 <mutex_lock+0x28>
    943e:	06db      	lsls	r3, r3, #27
    9440:	d50c      	bpl.n	945c <mutex_lock+0x24>
    9442:	2201      	movs	r2, #1
    9444:	e8d0 3fef 	ldaex	r3, [r0]
    9448:	e8c0 2fe1 	stlex	r1, r2, [r0]
    944c:	2900      	cmp	r1, #0
    944e:	d1f9      	bne.n	9444 <mutex_lock+0xc>
    9450:	2b01      	cmp	r3, #1
    9452:	d0f7      	beq.n	9444 <mutex_lock+0xc>
    9454:	f3bf 8f5f 	dmb	sy
    9458:	2000      	movs	r0, #0
    945a:	4770      	bx	lr
    945c:	4803      	ldr	r0, [pc, #12]	; (946c <mutex_lock+0x34>)
    945e:	4770      	bx	lr
    9460:	4803      	ldr	r0, [pc, #12]	; (9470 <mutex_lock+0x38>)
    9462:	4770      	bx	lr
    9464:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    9468:	4770      	bx	lr
    946a:	bf00      	nop
    946c:	ffff8fe9 	.word	0xffff8fe9
    9470:	ffff8fea 	.word	0xffff8fea

00009474 <nrf_cc3xx_platform_set_mutexes>:
    9474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9478:	4c14      	ldr	r4, [pc, #80]	; (94cc <nrf_cc3xx_platform_set_mutexes+0x58>)
    947a:	6802      	ldr	r2, [r0, #0]
    947c:	68c3      	ldr	r3, [r0, #12]
    947e:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
    9482:	e9c4 6302 	strd	r6, r3, [r4, #8]
    9486:	e9c4 2500 	strd	r2, r5, [r4]
    948a:	4b11      	ldr	r3, [pc, #68]	; (94d0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    948c:	680e      	ldr	r6, [r1, #0]
    948e:	6848      	ldr	r0, [r1, #4]
    9490:	4d10      	ldr	r5, [pc, #64]	; (94d4 <nrf_cc3xx_platform_set_mutexes+0x60>)
    9492:	e9c3 6000 	strd	r6, r0, [r3]
    9496:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
    949a:	6908      	ldr	r0, [r1, #16]
    949c:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    94a0:	e9c3 7602 	strd	r7, r6, [r3, #8]
    94a4:	6118      	str	r0, [r3, #16]
    94a6:	06cb      	lsls	r3, r1, #27
    94a8:	d50d      	bpl.n	94c6 <nrf_cc3xx_platform_set_mutexes+0x52>
    94aa:	2300      	movs	r3, #0
    94ac:	f505 7088 	add.w	r0, r5, #272	; 0x110
    94b0:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    94b4:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    94b8:	4790      	blx	r2
    94ba:	6823      	ldr	r3, [r4, #0]
    94bc:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    94c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    94c4:	4718      	bx	r3
    94c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    94ca:	bf00      	nop
    94cc:	200001c8 	.word	0x200001c8
    94d0:	200001d8 	.word	0x200001d8
    94d4:	20001b20 	.word	0x20001b20

000094d8 <CC_LibInitNoRng>:
    94d8:	b508      	push	{r3, lr}
    94da:	f000 f80f 	bl	94fc <CC_HalInit>
    94de:	b928      	cbnz	r0, 94ec <CC_LibInitNoRng+0x14>
    94e0:	f000 f80e 	bl	9500 <CC_PalInit>
    94e4:	b930      	cbnz	r0, 94f4 <CC_LibInitNoRng+0x1c>
    94e6:	4a04      	ldr	r2, [pc, #16]	; (94f8 <CC_LibInitNoRng+0x20>)
    94e8:	6010      	str	r0, [r2, #0]
    94ea:	bd08      	pop	{r3, pc}
    94ec:	f000 f836 	bl	955c <CC_PalTerminate>
    94f0:	2003      	movs	r0, #3
    94f2:	bd08      	pop	{r3, pc}
    94f4:	2004      	movs	r0, #4
    94f6:	bd08      	pop	{r3, pc}
    94f8:	50845a0c 	.word	0x50845a0c

000094fc <CC_HalInit>:
    94fc:	2000      	movs	r0, #0
    94fe:	4770      	bx	lr

00009500 <CC_PalInit>:
    9500:	b510      	push	{r4, lr}
    9502:	4811      	ldr	r0, [pc, #68]	; (9548 <CC_PalInit+0x48>)
    9504:	f000 f848 	bl	9598 <CC_PalMutexCreate>
    9508:	b100      	cbz	r0, 950c <CC_PalInit+0xc>
    950a:	bd10      	pop	{r4, pc}
    950c:	480f      	ldr	r0, [pc, #60]	; (954c <CC_PalInit+0x4c>)
    950e:	f000 f843 	bl	9598 <CC_PalMutexCreate>
    9512:	2800      	cmp	r0, #0
    9514:	d1f9      	bne.n	950a <CC_PalInit+0xa>
    9516:	4c0e      	ldr	r4, [pc, #56]	; (9550 <CC_PalInit+0x50>)
    9518:	4620      	mov	r0, r4
    951a:	f000 f83d 	bl	9598 <CC_PalMutexCreate>
    951e:	2800      	cmp	r0, #0
    9520:	d1f3      	bne.n	950a <CC_PalInit+0xa>
    9522:	4b0c      	ldr	r3, [pc, #48]	; (9554 <CC_PalInit+0x54>)
    9524:	480c      	ldr	r0, [pc, #48]	; (9558 <CC_PalInit+0x58>)
    9526:	601c      	str	r4, [r3, #0]
    9528:	f000 f836 	bl	9598 <CC_PalMutexCreate>
    952c:	4601      	mov	r1, r0
    952e:	2800      	cmp	r0, #0
    9530:	d1eb      	bne.n	950a <CC_PalInit+0xa>
    9532:	f000 f82d 	bl	9590 <CC_PalDmaInit>
    9536:	4604      	mov	r4, r0
    9538:	b108      	cbz	r0, 953e <CC_PalInit+0x3e>
    953a:	4620      	mov	r0, r4
    953c:	bd10      	pop	{r4, pc}
    953e:	f000 f83f 	bl	95c0 <CC_PalPowerSaveModeInit>
    9542:	4620      	mov	r0, r4
    9544:	e7fa      	b.n	953c <CC_PalInit+0x3c>
    9546:	bf00      	nop
    9548:	20000210 	.word	0x20000210
    954c:	20000204 	.word	0x20000204
    9550:	2000020c 	.word	0x2000020c
    9554:	20000214 	.word	0x20000214
    9558:	20000208 	.word	0x20000208

0000955c <CC_PalTerminate>:
    955c:	b508      	push	{r3, lr}
    955e:	4808      	ldr	r0, [pc, #32]	; (9580 <CC_PalTerminate+0x24>)
    9560:	f000 f824 	bl	95ac <CC_PalMutexDestroy>
    9564:	4807      	ldr	r0, [pc, #28]	; (9584 <CC_PalTerminate+0x28>)
    9566:	f000 f821 	bl	95ac <CC_PalMutexDestroy>
    956a:	4807      	ldr	r0, [pc, #28]	; (9588 <CC_PalTerminate+0x2c>)
    956c:	f000 f81e 	bl	95ac <CC_PalMutexDestroy>
    9570:	4806      	ldr	r0, [pc, #24]	; (958c <CC_PalTerminate+0x30>)
    9572:	f000 f81b 	bl	95ac <CC_PalMutexDestroy>
    9576:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    957a:	f000 b80b 	b.w	9594 <CC_PalDmaTerminate>
    957e:	bf00      	nop
    9580:	20000210 	.word	0x20000210
    9584:	20000204 	.word	0x20000204
    9588:	2000020c 	.word	0x2000020c
    958c:	20000208 	.word	0x20000208

00009590 <CC_PalDmaInit>:
    9590:	2000      	movs	r0, #0
    9592:	4770      	bx	lr

00009594 <CC_PalDmaTerminate>:
    9594:	4770      	bx	lr
    9596:	bf00      	nop

00009598 <CC_PalMutexCreate>:
    9598:	b508      	push	{r3, lr}
    959a:	4b03      	ldr	r3, [pc, #12]	; (95a8 <CC_PalMutexCreate+0x10>)
    959c:	6802      	ldr	r2, [r0, #0]
    959e:	681b      	ldr	r3, [r3, #0]
    95a0:	6810      	ldr	r0, [r2, #0]
    95a2:	4798      	blx	r3
    95a4:	2000      	movs	r0, #0
    95a6:	bd08      	pop	{r3, pc}
    95a8:	200001c8 	.word	0x200001c8

000095ac <CC_PalMutexDestroy>:
    95ac:	b508      	push	{r3, lr}
    95ae:	4b03      	ldr	r3, [pc, #12]	; (95bc <CC_PalMutexDestroy+0x10>)
    95b0:	6802      	ldr	r2, [r0, #0]
    95b2:	685b      	ldr	r3, [r3, #4]
    95b4:	6810      	ldr	r0, [r2, #0]
    95b6:	4798      	blx	r3
    95b8:	2000      	movs	r0, #0
    95ba:	bd08      	pop	{r3, pc}
    95bc:	200001c8 	.word	0x200001c8

000095c0 <CC_PalPowerSaveModeInit>:
    95c0:	b570      	push	{r4, r5, r6, lr}
    95c2:	4c09      	ldr	r4, [pc, #36]	; (95e8 <CC_PalPowerSaveModeInit+0x28>)
    95c4:	4d09      	ldr	r5, [pc, #36]	; (95ec <CC_PalPowerSaveModeInit+0x2c>)
    95c6:	6920      	ldr	r0, [r4, #16]
    95c8:	68ab      	ldr	r3, [r5, #8]
    95ca:	4798      	blx	r3
    95cc:	b118      	cbz	r0, 95d6 <CC_PalPowerSaveModeInit+0x16>
    95ce:	4b08      	ldr	r3, [pc, #32]	; (95f0 <CC_PalPowerSaveModeInit+0x30>)
    95d0:	4808      	ldr	r0, [pc, #32]	; (95f4 <CC_PalPowerSaveModeInit+0x34>)
    95d2:	685b      	ldr	r3, [r3, #4]
    95d4:	4798      	blx	r3
    95d6:	2100      	movs	r1, #0
    95d8:	4a07      	ldr	r2, [pc, #28]	; (95f8 <CC_PalPowerSaveModeInit+0x38>)
    95da:	68eb      	ldr	r3, [r5, #12]
    95dc:	6011      	str	r1, [r2, #0]
    95de:	6920      	ldr	r0, [r4, #16]
    95e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    95e4:	4718      	bx	r3
    95e6:	bf00      	nop
    95e8:	200001d8 	.word	0x200001d8
    95ec:	200001c8 	.word	0x200001c8
    95f0:	200001b8 	.word	0x200001b8
    95f4:	0000c864 	.word	0x0000c864
    95f8:	20001b14 	.word	0x20001b14

000095fc <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    95fc:	4602      	mov	r2, r0
    95fe:	b158      	cbz	r0, 9618 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9600:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    9602:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    9606:	2b01      	cmp	r3, #1
    9608:	d003      	beq.n	9612 <sys_notify_validate+0x16>
    960a:	2b03      	cmp	r3, #3
    960c:	d107      	bne.n	961e <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    960e:	6803      	ldr	r3, [r0, #0]
    9610:	b143      	cbz	r3, 9624 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    9612:	2000      	movs	r0, #0
    9614:	6090      	str	r0, [r2, #8]
    9616:	4770      	bx	lr
		return -EINVAL;
    9618:	f06f 0015 	mvn.w	r0, #21
    961c:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    961e:	f06f 0015 	mvn.w	r0, #21
    9622:	4770      	bx	lr
			rv = -EINVAL;
    9624:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    9628:	4770      	bx	lr

0000962a <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    962a:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    962c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    962e:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    9632:	6081      	str	r1, [r0, #8]
	switch (method) {
    9634:	2a03      	cmp	r2, #3
    9636:	d103      	bne.n	9640 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    9638:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    963a:	2200      	movs	r2, #0
    963c:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    963e:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    9640:	2000      	movs	r0, #0
    9642:	e7fa      	b.n	963a <sys_notify_finalize+0x10>

00009644 <arch_printk_char_out>:
}
    9644:	2000      	movs	r0, #0
    9646:	4770      	bx	lr

00009648 <str_out>:
{
    9648:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    964a:	680c      	ldr	r4, [r1, #0]
    964c:	b154      	cbz	r4, 9664 <str_out+0x1c>
    964e:	688a      	ldr	r2, [r1, #8]
    9650:	684b      	ldr	r3, [r1, #4]
    9652:	429a      	cmp	r2, r3
    9654:	da06      	bge.n	9664 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    9656:	3b01      	subs	r3, #1
    9658:	429a      	cmp	r2, r3
    965a:	d008      	beq.n	966e <str_out+0x26>
		ctx->str[ctx->count++] = c;
    965c:	1c53      	adds	r3, r2, #1
    965e:	608b      	str	r3, [r1, #8]
    9660:	54a0      	strb	r0, [r4, r2]
    9662:	e002      	b.n	966a <str_out+0x22>
		ctx->count++;
    9664:	688b      	ldr	r3, [r1, #8]
    9666:	3301      	adds	r3, #1
    9668:	608b      	str	r3, [r1, #8]
}
    966a:	bc10      	pop	{r4}
    966c:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    966e:	1c53      	adds	r3, r2, #1
    9670:	608b      	str	r3, [r1, #8]
    9672:	2300      	movs	r3, #0
    9674:	54a3      	strb	r3, [r4, r2]
    9676:	e7f8      	b.n	966a <str_out+0x22>

00009678 <printk>:
{
    9678:	b40f      	push	{r0, r1, r2, r3}
    967a:	b500      	push	{lr}
    967c:	b083      	sub	sp, #12
    967e:	a904      	add	r1, sp, #16
    9680:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    9684:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    9686:	f7f6 ff1f 	bl	4c8 <vprintk>
}
    968a:	b003      	add	sp, #12
    968c:	f85d eb04 	ldr.w	lr, [sp], #4
    9690:	b004      	add	sp, #16
    9692:	4770      	bx	lr

00009694 <snprintk>:
{
    9694:	b40c      	push	{r2, r3}
    9696:	b500      	push	{lr}
    9698:	b083      	sub	sp, #12
    969a:	ab04      	add	r3, sp, #16
    969c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    96a0:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    96a2:	f7f6 ff21 	bl	4e8 <vsnprintk>
}
    96a6:	b003      	add	sp, #12
    96a8:	f85d eb04 	ldr.w	lr, [sp], #4
    96ac:	b002      	add	sp, #8
    96ae:	4770      	bx	lr

000096b0 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    96b0:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    96b4:	8b01      	ldrh	r1, [r0, #24]
    96b6:	f021 0107 	bic.w	r1, r1, #7
    96ba:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    96bc:	8301      	strh	r1, [r0, #24]
}
    96be:	4770      	bx	lr

000096c0 <notify_monitors>:
{
    96c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    96c4:	4606      	mov	r6, r0
    96c6:	460f      	mov	r7, r1
    96c8:	4690      	mov	r8, r2
	return list->head;
    96ca:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    96cc:	b119      	cbz	r1, 96d6 <notify_monitors+0x16>
    96ce:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    96d0:	b131      	cbz	r1, 96e0 <notify_monitors+0x20>
	return node->next;
    96d2:	680c      	ldr	r4, [r1, #0]
    96d4:	e004      	b.n	96e0 <notify_monitors+0x20>
    96d6:	460c      	mov	r4, r1
    96d8:	e002      	b.n	96e0 <notify_monitors+0x20>
    96da:	4623      	mov	r3, r4
    96dc:	4621      	mov	r1, r4
    96de:	461c      	mov	r4, r3
    96e0:	b159      	cbz	r1, 96fa <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    96e2:	684d      	ldr	r5, [r1, #4]
    96e4:	4643      	mov	r3, r8
    96e6:	463a      	mov	r2, r7
    96e8:	4630      	mov	r0, r6
    96ea:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    96ec:	2c00      	cmp	r4, #0
    96ee:	d0f4      	beq.n	96da <notify_monitors+0x1a>
    96f0:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    96f2:	2c00      	cmp	r4, #0
    96f4:	d0f2      	beq.n	96dc <notify_monitors+0x1c>
	return node->next;
    96f6:	6823      	ldr	r3, [r4, #0]
    96f8:	e7f0      	b.n	96dc <notify_monitors+0x1c>
}
    96fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000096fe <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    96fe:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    9700:	f013 0307 	ands.w	r3, r3, #7
    9704:	d103      	bne.n	970e <process_recheck+0x10>
	return list->head;
    9706:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    9708:	b10a      	cbz	r2, 970e <process_recheck+0x10>
		evt = EVT_START;
    970a:	2003      	movs	r0, #3
    970c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    970e:	2b02      	cmp	r3, #2
    9710:	d003      	beq.n	971a <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    9712:	2b01      	cmp	r3, #1
    9714:	d006      	beq.n	9724 <process_recheck+0x26>
	int evt = EVT_NOP;
    9716:	2000      	movs	r0, #0
    9718:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    971a:	8b42      	ldrh	r2, [r0, #26]
    971c:	2a00      	cmp	r2, #0
    971e:	d1f8      	bne.n	9712 <process_recheck+0x14>
		evt = EVT_STOP;
    9720:	2004      	movs	r0, #4
    9722:	4770      	bx	lr
    9724:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    9726:	b10b      	cbz	r3, 972c <process_recheck+0x2e>
		evt = EVT_RESET;
    9728:	2005      	movs	r0, #5
}
    972a:	4770      	bx	lr
	int evt = EVT_NOP;
    972c:	2000      	movs	r0, #0
    972e:	4770      	bx	lr

00009730 <process_complete>:
{
    9730:	b538      	push	{r3, r4, r5, lr}
    9732:	4604      	mov	r4, r0
    9734:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9736:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    9738:	2a00      	cmp	r2, #0
    973a:	db07      	blt.n	974c <process_complete+0x1c>
    973c:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    9740:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    9742:	2a01      	cmp	r2, #1
    9744:	d90e      	bls.n	9764 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    9746:	2b04      	cmp	r3, #4
    9748:	d032      	beq.n	97b0 <process_complete+0x80>
}
    974a:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    974c:	e9d0 0100 	ldrd	r0, r1, [r0]
    9750:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    9754:	2300      	movs	r3, #0
    9756:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    9758:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    975a:	2101      	movs	r1, #1
    975c:	4620      	mov	r0, r4
    975e:	f7ff ffa7 	bl	96b0 <set_state>
    9762:	e7f2      	b.n	974a <process_complete+0x1a>
		*clients = mgr->clients;
    9764:	e9d0 0100 	ldrd	r0, r1, [r0]
    9768:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    976c:	2200      	movs	r2, #0
    976e:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    9770:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    9772:	2b06      	cmp	r3, #6
    9774:	d117      	bne.n	97a6 <process_complete+0x76>
	return list->head;
    9776:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    9778:	b13b      	cbz	r3, 978a <process_complete+0x5a>
				mgr->refs += 1U;
    977a:	8b62      	ldrh	r2, [r4, #26]
    977c:	3201      	adds	r2, #1
    977e:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    9780:	2b00      	cmp	r3, #0
    9782:	d0f9      	beq.n	9778 <process_complete+0x48>
	return node->next;
    9784:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    9786:	2b00      	cmp	r3, #0
    9788:	d1f6      	bne.n	9778 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
    978a:	2102      	movs	r1, #2
    978c:	4620      	mov	r0, r4
    978e:	f7ff ff8f 	bl	96b0 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    9792:	4620      	mov	r0, r4
    9794:	f7ff ffb3 	bl	96fe <process_recheck>
    9798:	2800      	cmp	r0, #0
    979a:	d0d6      	beq.n	974a <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    979c:	8b23      	ldrh	r3, [r4, #24]
    979e:	f043 0320 	orr.w	r3, r3, #32
    97a2:	8323      	strh	r3, [r4, #24]
    97a4:	e7d1      	b.n	974a <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    97a6:	2100      	movs	r1, #0
    97a8:	4620      	mov	r0, r4
    97aa:	f7ff ff81 	bl	96b0 <set_state>
    97ae:	e7f0      	b.n	9792 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
    97b0:	2100      	movs	r1, #0
    97b2:	f7ff ff7d 	bl	96b0 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    97b6:	4620      	mov	r0, r4
    97b8:	f7ff ffa1 	bl	96fe <process_recheck>
    97bc:	2800      	cmp	r0, #0
    97be:	d0c4      	beq.n	974a <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    97c0:	8b23      	ldrh	r3, [r4, #24]
    97c2:	f043 0320 	orr.w	r3, r3, #32
    97c6:	8323      	strh	r3, [r4, #24]
}
    97c8:	e7bf      	b.n	974a <process_complete+0x1a>

000097ca <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    97ca:	b158      	cbz	r0, 97e4 <validate_args+0x1a>
{
    97cc:	b510      	push	{r4, lr}
    97ce:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    97d0:	b159      	cbz	r1, 97ea <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    97d2:	1d08      	adds	r0, r1, #4
    97d4:	f7ff ff12 	bl	95fc <sys_notify_validate>
	if ((rv == 0)
    97d8:	b918      	cbnz	r0, 97e2 <validate_args+0x18>
	    && ((cli->notify.flags
    97da:	68a3      	ldr	r3, [r4, #8]
    97dc:	f033 0303 	bics.w	r3, r3, #3
    97e0:	d106      	bne.n	97f0 <validate_args+0x26>
}
    97e2:	bd10      	pop	{r4, pc}
		return -EINVAL;
    97e4:	f06f 0015 	mvn.w	r0, #21
}
    97e8:	4770      	bx	lr
		return -EINVAL;
    97ea:	f06f 0015 	mvn.w	r0, #21
    97ee:	e7f8      	b.n	97e2 <validate_args+0x18>
		rv = -EINVAL;
    97f0:	f06f 0015 	mvn.w	r0, #21
    97f4:	e7f5      	b.n	97e2 <validate_args+0x18>

000097f6 <notify_one>:
{
    97f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    97fa:	4607      	mov	r7, r0
    97fc:	460c      	mov	r4, r1
    97fe:	4616      	mov	r6, r2
    9800:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9802:	4619      	mov	r1, r3
    9804:	1d20      	adds	r0, r4, #4
    9806:	f7ff ff10 	bl	962a <sys_notify_finalize>
	if (cb) {
    980a:	b128      	cbz	r0, 9818 <notify_one+0x22>
    980c:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    980e:	462b      	mov	r3, r5
    9810:	4632      	mov	r2, r6
    9812:	4621      	mov	r1, r4
    9814:	4638      	mov	r0, r7
    9816:	47c0      	blx	r8
}
    9818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000981c <notify_all>:
{
    981c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9820:	4681      	mov	r9, r0
    9822:	460c      	mov	r4, r1
    9824:	4690      	mov	r8, r2
    9826:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    9828:	e005      	b.n	9836 <notify_all+0x1a>
	list->tail = node;
    982a:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    982c:	463b      	mov	r3, r7
    982e:	4642      	mov	r2, r8
    9830:	4648      	mov	r0, r9
    9832:	f7ff ffe0 	bl	97f6 <notify_one>
	return list->head;
    9836:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    9838:	b129      	cbz	r1, 9846 <notify_all+0x2a>
	return node->next;
    983a:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    983c:	6025      	str	r5, [r4, #0]
	return list->tail;
    983e:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9840:	428e      	cmp	r6, r1
    9842:	d1f3      	bne.n	982c <notify_all+0x10>
    9844:	e7f1      	b.n	982a <notify_all+0xe>
}
    9846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000984a <transition_complete>:
{
    984a:	b510      	push	{r4, lr}
	__asm__ volatile(
    984c:	f04f 0420 	mov.w	r4, #32
    9850:	f3ef 8211 	mrs	r2, BASEPRI
    9854:	f384 8812 	msr	BASEPRI_MAX, r4
    9858:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    985c:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    985e:	2101      	movs	r1, #1
    9860:	f7f6 fe58 	bl	514 <process_event>
}
    9864:	bd10      	pop	{r4, pc}

00009866 <onoff_manager_init>:
	if ((mgr == NULL)
    9866:	4603      	mov	r3, r0
    9868:	b168      	cbz	r0, 9886 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    986a:	b179      	cbz	r1, 988c <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    986c:	680a      	ldr	r2, [r1, #0]
    986e:	b182      	cbz	r2, 9892 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    9870:	684a      	ldr	r2, [r1, #4]
    9872:	b18a      	cbz	r2, 9898 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    9874:	2000      	movs	r0, #0
    9876:	6018      	str	r0, [r3, #0]
    9878:	6058      	str	r0, [r3, #4]
    987a:	6098      	str	r0, [r3, #8]
    987c:	60d8      	str	r0, [r3, #12]
    987e:	6158      	str	r0, [r3, #20]
    9880:	6198      	str	r0, [r3, #24]
    9882:	6119      	str	r1, [r3, #16]
	return 0;
    9884:	4770      	bx	lr
		return -EINVAL;
    9886:	f06f 0015 	mvn.w	r0, #21
    988a:	4770      	bx	lr
    988c:	f06f 0015 	mvn.w	r0, #21
    9890:	4770      	bx	lr
    9892:	f06f 0015 	mvn.w	r0, #21
    9896:	4770      	bx	lr
    9898:	f06f 0015 	mvn.w	r0, #21
}
    989c:	4770      	bx	lr

0000989e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    989e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    98a0:	4604      	mov	r4, r0
    98a2:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    98a4:	f7ff ff91 	bl	97ca <validate_args>

	if (rv < 0) {
    98a8:	1e06      	subs	r6, r0, #0
    98aa:	db37      	blt.n	991c <onoff_request+0x7e>
    98ac:	f04f 0320 	mov.w	r3, #32
    98b0:	f3ef 8211 	mrs	r2, BASEPRI
    98b4:	f383 8812 	msr	BASEPRI_MAX, r3
    98b8:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    98bc:	8b25      	ldrh	r5, [r4, #24]
    98be:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    98c2:	8b63      	ldrh	r3, [r4, #26]
    98c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    98c8:	428b      	cmp	r3, r1
    98ca:	d02f      	beq.n	992c <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    98cc:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    98ce:	2d02      	cmp	r5, #2
    98d0:	d00c      	beq.n	98ec <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    98d2:	b18d      	cbz	r5, 98f8 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    98d4:	2d04      	cmp	r5, #4
    98d6:	d00f      	beq.n	98f8 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    98d8:	2d06      	cmp	r5, #6
    98da:	d00d      	beq.n	98f8 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    98dc:	2d05      	cmp	r5, #5
    98de:	d01f      	beq.n	9920 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    98e0:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    98e4:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    98e6:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    98e8:	4608      	mov	r0, r1
    98ea:	e00a      	b.n	9902 <onoff_request+0x64>
		mgr->refs += 1U;
    98ec:	3301      	adds	r3, #1
    98ee:	8363      	strh	r3, [r4, #26]
		notify = true;
    98f0:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    98f2:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    98f4:	4618      	mov	r0, r3
    98f6:	e004      	b.n	9902 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    98f8:	fab5 f385 	clz	r3, r5
    98fc:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    98fe:	2100      	movs	r1, #0
		add_client = true;
    9900:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    9902:	b128      	cbz	r0, 9910 <onoff_request+0x72>
	parent->next = child;
    9904:	2000      	movs	r0, #0
    9906:	6038      	str	r0, [r7, #0]
	return list->tail;
    9908:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    990a:	b1a8      	cbz	r0, 9938 <onoff_request+0x9a>
	parent->next = child;
    990c:	6007      	str	r7, [r0, #0]
	list->tail = node;
    990e:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    9910:	b9ab      	cbnz	r3, 993e <onoff_request+0xa0>
	__asm__ volatile(
    9912:	f382 8811 	msr	BASEPRI, r2
    9916:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    991a:	b9a9      	cbnz	r1, 9948 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    991c:	4630      	mov	r0, r6
    991e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    9920:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    9924:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    9926:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    9928:	4608      	mov	r0, r1
    992a:	e7ea      	b.n	9902 <onoff_request+0x64>
		rv = -EAGAIN;
    992c:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    9930:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    9932:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    9934:	4608      	mov	r0, r1
    9936:	e7e4      	b.n	9902 <onoff_request+0x64>
    9938:	6067      	str	r7, [r4, #4]
	list->head = node;
    993a:	6027      	str	r7, [r4, #0]
}
    993c:	e7e8      	b.n	9910 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    993e:	2102      	movs	r1, #2
    9940:	4620      	mov	r0, r4
    9942:	f7f6 fde7 	bl	514 <process_event>
    9946:	e7e9      	b.n	991c <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    9948:	2300      	movs	r3, #0
    994a:	462a      	mov	r2, r5
    994c:	4639      	mov	r1, r7
    994e:	4620      	mov	r0, r4
    9950:	f7ff ff51 	bl	97f6 <notify_one>
    9954:	e7e2      	b.n	991c <onoff_request+0x7e>

00009956 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    9956:	b510      	push	{r4, lr}
	__asm__ volatile(
    9958:	f04f 0320 	mov.w	r3, #32
    995c:	f3ef 8211 	mrs	r2, BASEPRI
    9960:	f383 8812 	msr	BASEPRI_MAX, r3
    9964:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9968:	8b03      	ldrh	r3, [r0, #24]
    996a:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    996e:	2b02      	cmp	r3, #2
    9970:	d007      	beq.n	9982 <onoff_release+0x2c>
		if (state == ONOFF_STATE_ERROR) {
    9972:	2b01      	cmp	r3, #1
    9974:	d002      	beq.n	997c <onoff_release+0x26>
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    9976:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT_NO_MSG(mgr->refs > 0);
	mgr->refs -= 1U;
	stop = (mgr->refs == 0);

out:
	if (stop) {
    997a:	e008      	b.n	998e <onoff_release+0x38>
			rv = -EIO;
    997c:	f06f 0404 	mvn.w	r4, #4
    9980:	e005      	b.n	998e <onoff_release+0x38>
    9982:	461c      	mov	r4, r3
	mgr->refs -= 1U;
    9984:	8b43      	ldrh	r3, [r0, #26]
    9986:	3b01      	subs	r3, #1
    9988:	b29b      	uxth	r3, r3
    998a:	8343      	strh	r3, [r0, #26]
	if (stop) {
    998c:	b12b      	cbz	r3, 999a <onoff_release+0x44>
	__asm__ volatile(
    998e:	f382 8811 	msr	BASEPRI, r2
    9992:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
    9996:	4620      	mov	r0, r4
    9998:	bd10      	pop	{r4, pc}
		process_event(mgr, EVT_RECHECK, key);
    999a:	2102      	movs	r1, #2
    999c:	f7f6 fdba 	bl	514 <process_event>
    99a0:	e7f9      	b.n	9996 <onoff_release+0x40>

000099a2 <onoff_cancel>:
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
	if ((mgr == NULL) || (cli == NULL)) {
    99a2:	2800      	cmp	r0, #0
    99a4:	d031      	beq.n	9a0a <onoff_cancel+0x68>
{
    99a6:	b470      	push	{r4, r5, r6}
    99a8:	4605      	mov	r5, r0
	if ((mgr == NULL) || (cli == NULL)) {
    99aa:	2900      	cmp	r1, #0
    99ac:	d030      	beq.n	9a10 <onoff_cancel+0x6e>
	__asm__ volatile(
    99ae:	f04f 0320 	mov.w	r3, #32
    99b2:	f3ef 8611 	mrs	r6, BASEPRI
    99b6:	f383 8812 	msr	BASEPRI_MAX, r3
    99ba:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    99be:	8b00      	ldrh	r0, [r0, #24]
    99c0:	f000 0007 	and.w	r0, r0, #7

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    99c4:	460c      	mov	r4, r1
	return list->head;
    99c6:	682b      	ldr	r3, [r5, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    99c8:	2200      	movs	r2, #0
    99ca:	b1b3      	cbz	r3, 99fa <onoff_cancel+0x58>
    99cc:	429c      	cmp	r4, r3
    99ce:	d002      	beq.n	99d6 <onoff_cancel+0x34>
    99d0:	461a      	mov	r2, r3
    99d2:	681b      	ldr	r3, [r3, #0]
    99d4:	e7f9      	b.n	99ca <onoff_cancel+0x28>
Z_GENLIST_REMOVE(slist, snode)
    99d6:	b13a      	cbz	r2, 99e8 <onoff_cancel+0x46>
	return node->next;
    99d8:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    99da:	6013      	str	r3, [r2, #0]
	return list->tail;
    99dc:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    99de:	4299      	cmp	r1, r3
    99e0:	d009      	beq.n	99f6 <onoff_cancel+0x54>
	parent->next = child;
    99e2:	2300      	movs	r3, #0
    99e4:	600b      	str	r3, [r1, #0]
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    99e6:	e00a      	b.n	99fe <onoff_cancel+0x5c>
	return node->next;
    99e8:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    99ea:	602b      	str	r3, [r5, #0]
	return list->tail;
    99ec:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    99ee:	4291      	cmp	r1, r2
    99f0:	d1f7      	bne.n	99e2 <onoff_cancel+0x40>
	list->tail = node;
    99f2:	606b      	str	r3, [r5, #4]
}
    99f4:	e7f5      	b.n	99e2 <onoff_cancel+0x40>
	list->tail = node;
    99f6:	606a      	str	r2, [r5, #4]
}
    99f8:	e7f3      	b.n	99e2 <onoff_cancel+0x40>
	int rv = -EALREADY;
    99fa:	f06f 0077 	mvn.w	r0, #119	; 0x77
	__asm__ volatile(
    99fe:	f386 8811 	msr	BASEPRI, r6
    9a02:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    9a06:	bc70      	pop	{r4, r5, r6}
    9a08:	4770      	bx	lr
		return -EINVAL;
    9a0a:	f06f 0015 	mvn.w	r0, #21
}
    9a0e:	4770      	bx	lr
		return -EINVAL;
    9a10:	f06f 0015 	mvn.w	r0, #21
    9a14:	e7f7      	b.n	9a06 <onoff_cancel+0x64>

00009a16 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    9a16:	b508      	push	{r3, lr}
    9a18:	4604      	mov	r4, r0
    9a1a:	4608      	mov	r0, r1
    9a1c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    9a1e:	461a      	mov	r2, r3
    9a20:	47a0      	blx	r4
	return z_impl_z_current_get();
    9a22:	f7ff fa4f 	bl	8ec4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    9a26:	f7f9 f9ad 	bl	2d84 <z_impl_k_thread_abort>

00009a2a <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    9a2a:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(bytes / CHUNK_UNIT);
}

static inline bool big_heap(struct z_heap *h)
{
	return big_heap_chunks(h->end_chunk);
    9a2c:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    9a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9a32:	d303      	bcc.n	9a3c <chunk_mem+0x12>
    9a34:	2308      	movs	r3, #8
    9a36:	4419      	add	r1, r3

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
    9a38:	4408      	add	r0, r1
    9a3a:	4770      	bx	lr
    9a3c:	2304      	movs	r3, #4
    9a3e:	e7fa      	b.n	9a36 <chunk_mem+0xc>

00009a40 <free_list_remove_bidx>:

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    9a40:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
    9a42:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    9a46:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    9a48:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    9a4c:	d317      	bcc.n	9a7e <free_list_remove_bidx+0x3e>
		return ((uint32_t *)cmem)[f];
    9a4e:	68eb      	ldr	r3, [r5, #12]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
    9a50:	4299      	cmp	r1, r3
    9a52:	d016      	beq.n	9a82 <free_list_remove_bidx+0x42>
	if (big_heap(h)) {
    9a54:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    9a58:	d320      	bcc.n	9a9c <free_list_remove_bidx+0x5c>
		return ((uint32_t *)cmem)[f];
    9a5a:	68a9      	ldr	r1, [r5, #8]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
    9a5c:	3204      	adds	r2, #4
    9a5e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    9a62:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    9a66:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    9a6a:	d319      	bcc.n	9aa0 <free_list_remove_bidx+0x60>
		((uint32_t *)cmem)[f] = val;
    9a6c:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
    9a6e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
    9a72:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    9a74:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    9a78:	d314      	bcc.n	9aa4 <free_list_remove_bidx+0x64>
		((uint32_t *)cmem)[f] = val;
    9a7a:	6099      	str	r1, [r3, #8]
    9a7c:	e00c      	b.n	9a98 <free_list_remove_bidx+0x58>
		return ((uint16_t *)cmem)[f];
    9a7e:	88eb      	ldrh	r3, [r5, #6]
    9a80:	e7e6      	b.n	9a50 <free_list_remove_bidx+0x10>
		h->avail_buckets &= ~BIT(bidx);
    9a82:	2301      	movs	r3, #1
    9a84:	fa03 f102 	lsl.w	r1, r3, r2
    9a88:	68c3      	ldr	r3, [r0, #12]
    9a8a:	ea23 0301 	bic.w	r3, r3, r1
    9a8e:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    9a90:	3204      	adds	r2, #4
    9a92:	2300      	movs	r3, #0
    9a94:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
    9a98:	bc30      	pop	{r4, r5}
    9a9a:	4770      	bx	lr
    9a9c:	88a9      	ldrh	r1, [r5, #4]
    9a9e:	e7dd      	b.n	9a5c <free_list_remove_bidx+0x1c>
		((uint16_t *)cmem)[f] = val;
    9aa0:	80d3      	strh	r3, [r2, #6]
    9aa2:	e7e4      	b.n	9a6e <free_list_remove_bidx+0x2e>
    9aa4:	8099      	strh	r1, [r3, #4]
    9aa6:	e7f7      	b.n	9a98 <free_list_remove_bidx+0x58>

00009aa8 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    9aa8:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
    9aaa:	1d13      	adds	r3, r2, #4
    9aac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    9ab0:	b9d3      	cbnz	r3, 9ae8 <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
    9ab2:	2301      	movs	r3, #1
    9ab4:	fa03 f402 	lsl.w	r4, r3, r2
    9ab8:	68c3      	ldr	r3, [r0, #12]
    9aba:	4323      	orrs	r3, r4
    9abc:	60c3      	str	r3, [r0, #12]
		b->next = c;
    9abe:	3204      	adds	r2, #4
    9ac0:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    9ac4:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    9ac8:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    9aca:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    9ace:	d307      	bcc.n	9ae0 <free_list_add_bidx+0x38>
		((uint32_t *)cmem)[f] = val;
    9ad0:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
    9ad2:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    9ad4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    9ad8:	d304      	bcc.n	9ae4 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
    9ada:	60d9      	str	r1, [r3, #12]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
    9adc:	bc70      	pop	{r4, r5, r6}
    9ade:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
    9ae0:	8099      	strh	r1, [r3, #4]
    9ae2:	e7f6      	b.n	9ad2 <free_list_add_bidx+0x2a>
    9ae4:	80d9      	strh	r1, [r3, #6]
    9ae6:	e7f9      	b.n	9adc <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
    9ae8:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
    9aec:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    9aee:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    9af2:	d318      	bcc.n	9b26 <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
    9af4:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
    9af6:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
    9afa:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    9afe:	d314      	bcc.n	9b2a <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
    9b00:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
    9b02:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    9b04:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    9b08:	d311      	bcc.n	9b2e <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
    9b0a:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
    9b0c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
    9b10:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    9b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9b16:	d30c      	bcc.n	9b32 <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
    9b18:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
    9b1a:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    9b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9b20:	d309      	bcc.n	9b36 <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
    9b22:	60a1      	str	r1, [r4, #8]
    9b24:	e7da      	b.n	9adc <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
    9b26:	88a2      	ldrh	r2, [r4, #4]
    9b28:	e7e5      	b.n	9af6 <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
    9b2a:	80aa      	strh	r2, [r5, #4]
    9b2c:	e7e9      	b.n	9b02 <free_list_add_bidx+0x5a>
    9b2e:	80eb      	strh	r3, [r5, #6]
    9b30:	e7ec      	b.n	9b0c <free_list_add_bidx+0x64>
    9b32:	80d1      	strh	r1, [r2, #6]
    9b34:	e7f1      	b.n	9b1a <free_list_add_bidx+0x72>
    9b36:	80a1      	strh	r1, [r4, #4]
    9b38:	e7d0      	b.n	9adc <free_list_add_bidx+0x34>

00009b3a <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
    9b3a:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
    9b3c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    9b40:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
    9b42:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    9b46:	d325      	bcc.n	9b94 <split_chunks+0x5a>
		return ((uint32_t *)cmem)[f];
    9b48:	6866      	ldr	r6, [r4, #4]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
    9b4a:	1a53      	subs	r3, r2, r1
	chunksz_t rsz = sz0 - lsz;
    9b4c:	1a89      	subs	r1, r1, r2
    9b4e:	eb01 0156 	add.w	r1, r1, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9b52:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
    9b54:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    9b58:	d31e      	bcc.n	9b98 <split_chunks+0x5e>
		((uint32_t *)cmem)[f] = val;
    9b5a:	6066      	str	r6, [r4, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9b5c:	004d      	lsls	r5, r1, #1
	void *cmem = &buf[c];
    9b5e:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
    9b62:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    9b64:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    9b68:	d318      	bcc.n	9b9c <split_chunks+0x62>
		((uint32_t *)cmem)[f] = val;
    9b6a:	6065      	str	r5, [r4, #4]
	return big_heap_chunks(h->end_chunk);
    9b6c:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
    9b6e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    9b72:	d315      	bcc.n	9ba0 <split_chunks+0x66>
		((uint32_t *)cmem)[f] = val;
    9b74:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->end_chunk);
    9b78:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    9b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9b7e:	d312      	bcc.n	9ba6 <split_chunks+0x6c>
		return ((uint32_t *)cmem)[f];
    9b80:	6864      	ldr	r4, [r4, #4]
	return c + chunk_size(h, c);
    9b82:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
    9b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9b8a:	d30e      	bcc.n	9baa <split_chunks+0x70>
		((uint32_t *)cmem)[f] = val;
    9b8c:	f840 1032 	str.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
    9b90:	bc70      	pop	{r4, r5, r6}
    9b92:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
    9b94:	8866      	ldrh	r6, [r4, #2]
    9b96:	e7d8      	b.n	9b4a <split_chunks+0x10>
		((uint16_t *)cmem)[f] = val;
    9b98:	8066      	strh	r6, [r4, #2]
    9b9a:	e7df      	b.n	9b5c <split_chunks+0x22>
    9b9c:	8065      	strh	r5, [r4, #2]
    9b9e:	e7e5      	b.n	9b6c <split_chunks+0x32>
    9ba0:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
    9ba4:	e7e8      	b.n	9b78 <split_chunks+0x3e>
		return ((uint16_t *)cmem)[f];
    9ba6:	8864      	ldrh	r4, [r4, #2]
    9ba8:	e7eb      	b.n	9b82 <split_chunks+0x48>
		((uint16_t *)cmem)[f] = val;
    9baa:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
    9bae:	e7ef      	b.n	9b90 <split_chunks+0x56>

00009bb0 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
    9bb0:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
    9bb2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    9bb6:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    9bb8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    9bbc:	d31c      	bcc.n	9bf8 <merge_chunks+0x48>
		return ((uint32_t *)cmem)[f];
    9bbe:	684b      	ldr	r3, [r1, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    9bc0:	085b      	lsrs	r3, r3, #1
	void *cmem = &buf[c];
    9bc2:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
	if (big_heap(h)) {
    9bc6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    9bca:	d317      	bcc.n	9bfc <merge_chunks+0x4c>
		return ((uint32_t *)cmem)[f];
    9bcc:	686e      	ldr	r6, [r5, #4]
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    9bce:	eb03 0356 	add.w	r3, r3, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9bd2:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
    9bd4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    9bd8:	d312      	bcc.n	9c00 <merge_chunks+0x50>
		((uint32_t *)cmem)[f] = val;
    9bda:	604e      	str	r6, [r1, #4]
	return big_heap_chunks(h->end_chunk);
    9bdc:	6881      	ldr	r1, [r0, #8]
	if (big_heap(h)) {
    9bde:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    9be2:	d30f      	bcc.n	9c04 <merge_chunks+0x54>
		return ((uint32_t *)cmem)[f];
    9be4:	686c      	ldr	r4, [r5, #4]
	return c + chunk_size(h, c);
    9be6:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
    9bea:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    9bee:	d30b      	bcc.n	9c08 <merge_chunks+0x58>
		((uint32_t *)cmem)[f] = val;
    9bf0:	f840 3032 	str.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
    9bf4:	bc70      	pop	{r4, r5, r6}
    9bf6:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
    9bf8:	884b      	ldrh	r3, [r1, #2]
    9bfa:	e7e1      	b.n	9bc0 <merge_chunks+0x10>
    9bfc:	886e      	ldrh	r6, [r5, #2]
    9bfe:	e7e6      	b.n	9bce <merge_chunks+0x1e>
		((uint16_t *)cmem)[f] = val;
    9c00:	804e      	strh	r6, [r1, #2]
    9c02:	e7eb      	b.n	9bdc <merge_chunks+0x2c>
		return ((uint16_t *)cmem)[f];
    9c04:	886c      	ldrh	r4, [r5, #2]
    9c06:	e7ee      	b.n	9be6 <merge_chunks+0x36>
		((uint16_t *)cmem)[f] = val;
    9c08:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
    9c0c:	e7f2      	b.n	9bf4 <merge_chunks+0x44>

00009c0e <mem_to_chunkid>:
	return big_heap_chunks(h->end_chunk);
    9c0e:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
    9c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9c14:	d304      	bcc.n	9c20 <mem_to_chunkid+0x12>
    9c16:	2308      	movs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9c18:	1ac9      	subs	r1, r1, r3
    9c1a:	1a08      	subs	r0, r1, r0
}
    9c1c:	08c0      	lsrs	r0, r0, #3
    9c1e:	4770      	bx	lr
    9c20:	2304      	movs	r3, #4
    9c22:	e7f9      	b.n	9c18 <mem_to_chunkid+0xa>

00009c24 <free_list_remove>:
{
    9c24:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
    9c26:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
    9c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9c2c:	d307      	bcc.n	9c3e <free_list_remove+0x1a>
	void *cmem = &buf[c];
    9c2e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
    9c32:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    9c34:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
    9c36:	2a01      	cmp	r2, #1
    9c38:	d002      	beq.n	9c40 <free_list_remove+0x1c>
    9c3a:	2200      	movs	r2, #0
    9c3c:	e000      	b.n	9c40 <free_list_remove+0x1c>
    9c3e:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
    9c40:	b9a2      	cbnz	r2, 9c6c <free_list_remove+0x48>
	void *cmem = &buf[c];
    9c42:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    9c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9c4a:	d310      	bcc.n	9c6e <free_list_remove+0x4a>
		return ((uint32_t *)cmem)[f];
    9c4c:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    9c4e:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
    9c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9c54:	d30d      	bcc.n	9c72 <free_list_remove+0x4e>
    9c56:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    9c58:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    9c5a:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
    9c5e:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
    9c60:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
    9c64:	f1c2 021f 	rsb	r2, r2, #31
    9c68:	f7ff feea 	bl	9a40 <free_list_remove_bidx>
}
    9c6c:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
    9c6e:	8852      	ldrh	r2, [r2, #2]
    9c70:	e7ed      	b.n	9c4e <free_list_remove+0x2a>
	return big_heap(h) ? 8 : 4;
    9c72:	2304      	movs	r3, #4
    9c74:	e7f0      	b.n	9c58 <free_list_remove+0x34>

00009c76 <free_list_add>:
{
    9c76:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
    9c78:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
    9c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9c7e:	d307      	bcc.n	9c90 <free_list_add+0x1a>
	void *cmem = &buf[c];
    9c80:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
    9c84:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    9c86:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
    9c88:	2a01      	cmp	r2, #1
    9c8a:	d002      	beq.n	9c92 <free_list_add+0x1c>
    9c8c:	2200      	movs	r2, #0
    9c8e:	e000      	b.n	9c92 <free_list_add+0x1c>
    9c90:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
    9c92:	b9a2      	cbnz	r2, 9cbe <free_list_add+0x48>
	void *cmem = &buf[c];
    9c94:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    9c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9c9c:	d310      	bcc.n	9cc0 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
    9c9e:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    9ca0:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
    9ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9ca6:	d30d      	bcc.n	9cc4 <free_list_add+0x4e>
    9ca8:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    9caa:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    9cac:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
    9cb0:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
    9cb2:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    9cb6:	f1c2 021f 	rsb	r2, r2, #31
    9cba:	f7ff fef5 	bl	9aa8 <free_list_add_bidx>
}
    9cbe:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
    9cc0:	8852      	ldrh	r2, [r2, #2]
    9cc2:	e7ed      	b.n	9ca0 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
    9cc4:	2304      	movs	r3, #4
    9cc6:	e7f0      	b.n	9caa <free_list_add+0x34>

00009cc8 <free_chunk>:
{
    9cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9cca:	4604      	mov	r4, r0
    9ccc:	460d      	mov	r5, r1
	void *cmem = &buf[c];
    9cce:	00ce      	lsls	r6, r1, #3
    9cd0:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    9cd4:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    9cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9cda:	d31f      	bcc.n	9d1c <free_chunk+0x54>
		return ((uint32_t *)cmem)[f];
    9cdc:	6879      	ldr	r1, [r7, #4]
	return c + chunk_size(h, c);
    9cde:	eb05 0151 	add.w	r1, r5, r1, lsr #1
	void *cmem = &buf[c];
    9ce2:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
    9ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9cea:	d319      	bcc.n	9d20 <free_chunk+0x58>
		return ((uint32_t *)cmem)[f];
    9cec:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, right_chunk(h, c))) {
    9cee:	f013 0f01 	tst.w	r3, #1
    9cf2:	d017      	beq.n	9d24 <free_chunk+0x5c>
	return big_heap_chunks(h->end_chunk);
    9cf4:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    9cf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9cfa:	d324      	bcc.n	9d46 <free_chunk+0x7e>
		return ((uint32_t *)cmem)[f];
    9cfc:	59a1      	ldr	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
    9cfe:	1a69      	subs	r1, r5, r1
	void *cmem = &buf[c];
    9d00:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
    9d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9d08:	d31f      	bcc.n	9d4a <free_chunk+0x82>
		return ((uint32_t *)cmem)[f];
    9d0a:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, left_chunk(h, c))) {
    9d0c:	f013 0f01 	tst.w	r3, #1
    9d10:	d01d      	beq.n	9d4e <free_chunk+0x86>
	free_list_add(h, c);
    9d12:	4629      	mov	r1, r5
    9d14:	4620      	mov	r0, r4
    9d16:	f7ff ffae 	bl	9c76 <free_list_add>
}
    9d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ((uint16_t *)cmem)[f];
    9d1c:	8879      	ldrh	r1, [r7, #2]
    9d1e:	e7de      	b.n	9cde <free_chunk+0x16>
    9d20:	8853      	ldrh	r3, [r2, #2]
    9d22:	e7e4      	b.n	9cee <free_chunk+0x26>
		free_list_remove(h, right_chunk(h, c));
    9d24:	4620      	mov	r0, r4
    9d26:	f7ff ff7d 	bl	9c24 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
    9d2a:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    9d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9d30:	d307      	bcc.n	9d42 <free_chunk+0x7a>
		return ((uint32_t *)cmem)[f];
    9d32:	687a      	ldr	r2, [r7, #4]
		merge_chunks(h, c, right_chunk(h, c));
    9d34:	eb05 0252 	add.w	r2, r5, r2, lsr #1
    9d38:	4629      	mov	r1, r5
    9d3a:	4620      	mov	r0, r4
    9d3c:	f7ff ff38 	bl	9bb0 <merge_chunks>
    9d40:	e7d8      	b.n	9cf4 <free_chunk+0x2c>
		return ((uint16_t *)cmem)[f];
    9d42:	887a      	ldrh	r2, [r7, #2]
    9d44:	e7f6      	b.n	9d34 <free_chunk+0x6c>
    9d46:	5ba1      	ldrh	r1, [r4, r6]
    9d48:	e7d9      	b.n	9cfe <free_chunk+0x36>
    9d4a:	8853      	ldrh	r3, [r2, #2]
    9d4c:	e7de      	b.n	9d0c <free_chunk+0x44>
		free_list_remove(h, left_chunk(h, c));
    9d4e:	4620      	mov	r0, r4
    9d50:	f7ff ff68 	bl	9c24 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
    9d54:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    9d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9d5a:	d30c      	bcc.n	9d76 <free_chunk+0xae>
		return ((uint32_t *)cmem)[f];
    9d5c:	59a1      	ldr	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
    9d5e:	462a      	mov	r2, r5
    9d60:	1a69      	subs	r1, r5, r1
    9d62:	4620      	mov	r0, r4
    9d64:	f7ff ff24 	bl	9bb0 <merge_chunks>
	return big_heap_chunks(h->end_chunk);
    9d68:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    9d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9d6e:	d304      	bcc.n	9d7a <free_chunk+0xb2>
		return ((uint32_t *)cmem)[f];
    9d70:	59a3      	ldr	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
    9d72:	1aed      	subs	r5, r5, r3
    9d74:	e7cd      	b.n	9d12 <free_chunk+0x4a>
		return ((uint16_t *)cmem)[f];
    9d76:	5ba1      	ldrh	r1, [r4, r6]
    9d78:	e7f1      	b.n	9d5e <free_chunk+0x96>
    9d7a:	5ba3      	ldrh	r3, [r4, r6]
    9d7c:	e7f9      	b.n	9d72 <free_chunk+0xaa>

00009d7e <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    9d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->end_chunk);
    9d80:	6885      	ldr	r5, [r0, #8]
	return big_heap(h) ? 8 : 4;
    9d82:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    9d86:	d311      	bcc.n	9dac <alloc_chunk+0x2e>
    9d88:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    9d8a:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    9d8c:	eba1 03d3 	sub.w	r3, r1, r3, lsr #3
    9d90:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
    9d92:	fab3 f383 	clz	r3, r3
    9d96:	f1c3 021f 	rsb	r2, r3, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    9d9a:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
    9d9e:	f850 c024 	ldr.w	ip, [r0, r4, lsl #2]
    9da2:	f1bc 0f00 	cmp.w	ip, #0
    9da6:	d024      	beq.n	9df2 <alloc_chunk+0x74>
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
    9da8:	2603      	movs	r6, #3
    9daa:	e010      	b.n	9dce <alloc_chunk+0x50>
	return big_heap(h) ? 8 : 4;
    9dac:	2304      	movs	r3, #4
    9dae:	e7ec      	b.n	9d8a <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
    9db0:	f8b7 e002 	ldrh.w	lr, [r7, #2]
    9db4:	e015      	b.n	9de2 <alloc_chunk+0x64>
		do {
			chunkid_t c = b->next;
			if (chunk_size(h, c) >= sz) {
				free_list_remove_bidx(h, c, bi);
    9db6:	4621      	mov	r1, r4
    9db8:	f7ff fe42 	bl	9a40 <free_list_remove_bidx>
				return c;
    9dbc:	e021      	b.n	9e02 <alloc_chunk+0x84>
    9dbe:	88fc      	ldrh	r4, [r7, #6]
			}
			b->next = next_free_chunk(h, c);
    9dc0:	1d17      	adds	r7, r2, #4
    9dc2:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
    9dc6:	3e01      	subs	r6, #1
    9dc8:	d013      	beq.n	9df2 <alloc_chunk+0x74>
    9dca:	45a4      	cmp	ip, r4
    9dcc:	d011      	beq.n	9df2 <alloc_chunk+0x74>
			chunkid_t c = b->next;
    9dce:	1d14      	adds	r4, r2, #4
    9dd0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
    9dd4:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
	if (big_heap(h)) {
    9dd8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    9ddc:	d3e8      	bcc.n	9db0 <alloc_chunk+0x32>
		return ((uint32_t *)cmem)[f];
    9dde:	f8d7 e004 	ldr.w	lr, [r7, #4]
			if (chunk_size(h, c) >= sz) {
    9de2:	ebb1 0f5e 	cmp.w	r1, lr, lsr #1
    9de6:	d9e6      	bls.n	9db6 <alloc_chunk+0x38>
	if (big_heap(h)) {
    9de8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    9dec:	d3e7      	bcc.n	9dbe <alloc_chunk+0x40>
		return ((uint32_t *)cmem)[f];
    9dee:	68fc      	ldr	r4, [r7, #12]
    9df0:	e7e6      	b.n	9dc0 <alloc_chunk+0x42>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    9df2:	68c4      	ldr	r4, [r0, #12]
    9df4:	f1c3 0220 	rsb	r2, r3, #32
    9df8:	2301      	movs	r3, #1
    9dfa:	4093      	lsls	r3, r2
    9dfc:	425b      	negs	r3, r3

	if (bmask != 0U) {
    9dfe:	401c      	ands	r4, r3
    9e00:	d101      	bne.n	9e06 <alloc_chunk+0x88>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    9e02:	4620      	mov	r0, r4
    9e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask);
    9e06:	fa94 f2a4 	rbit	r2, r4
    9e0a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    9e0e:	1d13      	adds	r3, r2, #4
    9e10:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    9e14:	4621      	mov	r1, r4
    9e16:	f7ff fe13 	bl	9a40 <free_list_remove_bidx>
		return c;
    9e1a:	e7f2      	b.n	9e02 <alloc_chunk+0x84>

00009e1c <sys_heap_free>:
	if (mem == NULL) {
    9e1c:	b1c1      	cbz	r1, 9e50 <sys_heap_free+0x34>
{
    9e1e:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
    9e20:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
    9e22:	4620      	mov	r0, r4
    9e24:	f7ff fef3 	bl	9c0e <mem_to_chunkid>
    9e28:	4601      	mov	r1, r0
	void *cmem = &buf[c];
    9e2a:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
    9e2e:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
    9e30:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    9e34:	d307      	bcc.n	9e46 <sys_heap_free+0x2a>
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    9e36:	685a      	ldr	r2, [r3, #4]
    9e38:	f022 0201 	bic.w	r2, r2, #1
    9e3c:	605a      	str	r2, [r3, #4]
	free_chunk(h, c);
    9e3e:	4620      	mov	r0, r4
    9e40:	f7ff ff42 	bl	9cc8 <free_chunk>
}
    9e44:	bd10      	pop	{r4, pc}
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    9e46:	885a      	ldrh	r2, [r3, #2]
    9e48:	f022 0201 	bic.w	r2, r2, #1
    9e4c:	805a      	strh	r2, [r3, #2]
    9e4e:	e7f6      	b.n	9e3e <sys_heap_free+0x22>
    9e50:	4770      	bx	lr

00009e52 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    9e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
    9e54:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
    9e56:	2900      	cmp	r1, #0
    9e58:	d03c      	beq.n	9ed4 <sys_heap_alloc+0x82>
    9e5a:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    9e5c:	68aa      	ldr	r2, [r5, #8]
    9e5e:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
    9e62:	d939      	bls.n	9ed8 <sys_heap_alloc+0x86>
	return big_heap(h) ? 8 : 4;
    9e64:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    9e68:	d320      	bcc.n	9eac <sys_heap_alloc+0x5a>
    9e6a:	2408      	movs	r4, #8
	return chunksz(chunk_header_bytes(h) + bytes);
    9e6c:	441c      	add	r4, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    9e6e:	3407      	adds	r4, #7
    9e70:	08e4      	lsrs	r4, r4, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
    9e72:	4621      	mov	r1, r4
    9e74:	4628      	mov	r0, r5
    9e76:	f7ff ff82 	bl	9d7e <alloc_chunk>
	if (c == 0U) {
    9e7a:	4607      	mov	r7, r0
    9e7c:	b370      	cbz	r0, 9edc <sys_heap_alloc+0x8a>
	void *cmem = &buf[c];
    9e7e:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
    9e82:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
    9e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9e88:	d312      	bcc.n	9eb0 <sys_heap_alloc+0x5e>
		return ((uint32_t *)cmem)[f];
    9e8a:	6873      	ldr	r3, [r6, #4]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
    9e8c:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
    9e90:	d310      	bcc.n	9eb4 <sys_heap_alloc+0x62>
	return big_heap_chunks(h->end_chunk);
    9e92:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
    9e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9e98:	d317      	bcc.n	9eca <sys_heap_alloc+0x78>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    9e9a:	6873      	ldr	r3, [r6, #4]
    9e9c:	f043 0301 	orr.w	r3, r3, #1
    9ea0:	6073      	str	r3, [r6, #4]

	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
    9ea2:	4639      	mov	r1, r7
    9ea4:	4628      	mov	r0, r5
    9ea6:	f7ff fdc0 	bl	9a2a <chunk_mem>
}
    9eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return big_heap(h) ? 8 : 4;
    9eac:	2404      	movs	r4, #4
    9eae:	e7dd      	b.n	9e6c <sys_heap_alloc+0x1a>
		return ((uint16_t *)cmem)[f];
    9eb0:	8873      	ldrh	r3, [r6, #2]
    9eb2:	e7eb      	b.n	9e8c <sys_heap_alloc+0x3a>
		split_chunks(h, c, c + chunk_sz);
    9eb4:	443c      	add	r4, r7
    9eb6:	4622      	mov	r2, r4
    9eb8:	4639      	mov	r1, r7
    9eba:	4628      	mov	r0, r5
    9ebc:	f7ff fe3d 	bl	9b3a <split_chunks>
		free_list_add(h, c + chunk_sz);
    9ec0:	4621      	mov	r1, r4
    9ec2:	4628      	mov	r0, r5
    9ec4:	f7ff fed7 	bl	9c76 <free_list_add>
    9ec8:	e7e3      	b.n	9e92 <sys_heap_alloc+0x40>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9eca:	8873      	ldrh	r3, [r6, #2]
    9ecc:	f043 0301 	orr.w	r3, r3, #1
    9ed0:	8073      	strh	r3, [r6, #2]
    9ed2:	e7e6      	b.n	9ea2 <sys_heap_alloc+0x50>
		return NULL;
    9ed4:	2000      	movs	r0, #0
    9ed6:	e7e8      	b.n	9eaa <sys_heap_alloc+0x58>
    9ed8:	2000      	movs	r0, #0
    9eda:	e7e6      	b.n	9eaa <sys_heap_alloc+0x58>
		return NULL;
    9edc:	2000      	movs	r0, #0
    9ede:	e7e4      	b.n	9eaa <sys_heap_alloc+0x58>

00009ee0 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    9ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ee4:	460d      	mov	r5, r1
    9ee6:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    9ee8:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    9eea:	424b      	negs	r3, r1
    9eec:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
    9ef0:	ea31 0303 	bics.w	r3, r1, r3
    9ef4:	d04e      	beq.n	9f94 <sys_heap_aligned_alloc+0xb4>
		align -= rew;
    9ef6:	eba1 0508 	sub.w	r5, r1, r8
	return big_heap_chunks(h->end_chunk);
    9efa:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
    9efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9f00:	d346      	bcc.n	9f90 <sys_heap_aligned_alloc+0xb0>
    9f02:	2308      	movs	r3, #8
		gap = MIN(rew, chunk_header_bytes(h));
    9f04:	4598      	cmp	r8, r3
    9f06:	d200      	bcs.n	9f0a <sys_heap_aligned_alloc+0x2a>
    9f08:	4643      	mov	r3, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    9f0a:	2c00      	cmp	r4, #0
    9f0c:	d070      	beq.n	9ff0 <sys_heap_aligned_alloc+0x110>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    9f0e:	68b2      	ldr	r2, [r6, #8]
    9f10:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
    9f14:	d96e      	bls.n	9ff4 <sys_heap_aligned_alloc+0x114>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
    9f16:	1929      	adds	r1, r5, r4
    9f18:	1ac9      	subs	r1, r1, r3
	return big_heap(h) ? 8 : 4;
    9f1a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    9f1e:	d34a      	bcc.n	9fb6 <sys_heap_aligned_alloc+0xd6>
    9f20:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
    9f22:	4419      	add	r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    9f24:	3107      	adds	r1, #7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    9f26:	08c9      	lsrs	r1, r1, #3
    9f28:	4630      	mov	r0, r6
    9f2a:	f7ff ff28 	bl	9d7e <alloc_chunk>

	if (c0 == 0) {
    9f2e:	4607      	mov	r7, r0
    9f30:	2800      	cmp	r0, #0
    9f32:	d061      	beq.n	9ff8 <sys_heap_aligned_alloc+0x118>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
    9f34:	4601      	mov	r1, r0
    9f36:	4630      	mov	r0, r6
    9f38:	f7ff fd77 	bl	9a2a <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    9f3c:	4440      	add	r0, r8
    9f3e:	4428      	add	r0, r5
    9f40:	3801      	subs	r0, #1
    9f42:	426d      	negs	r5, r5
    9f44:	4005      	ands	r5, r0
    9f46:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    9f4a:	442c      	add	r4, r5
    9f4c:	3407      	adds	r4, #7
    9f4e:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
    9f52:	4629      	mov	r1, r5
    9f54:	4630      	mov	r0, r6
    9f56:	f7ff fe5a 	bl	9c0e <mem_to_chunkid>
    9f5a:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
    9f5c:	1ba4      	subs	r4, r4, r6
    9f5e:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
    9f60:	4287      	cmp	r7, r0
    9f62:	d32a      	bcc.n	9fba <sys_heap_aligned_alloc+0xda>
	void *cmem = &buf[c];
    9f64:	eb06 07c8 	add.w	r7, r6, r8, lsl #3
	return big_heap_chunks(h->end_chunk);
    9f68:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
    9f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9f6e:	d32e      	bcc.n	9fce <sys_heap_aligned_alloc+0xee>
		return ((uint32_t *)cmem)[f];
    9f70:	687b      	ldr	r3, [r7, #4]
	return c + chunk_size(h, c);
    9f72:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
    9f76:	429c      	cmp	r4, r3
    9f78:	d32b      	bcc.n	9fd2 <sys_heap_aligned_alloc+0xf2>
	return big_heap_chunks(h->end_chunk);
    9f7a:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
    9f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9f80:	d331      	bcc.n	9fe6 <sys_heap_aligned_alloc+0x106>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    9f82:	687b      	ldr	r3, [r7, #4]
    9f84:	f043 0301 	orr.w	r3, r3, #1
    9f88:	607b      	str	r3, [r7, #4]
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
    9f8a:	4628      	mov	r0, r5
    9f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return big_heap(h) ? 8 : 4;
    9f90:	2304      	movs	r3, #4
    9f92:	e7b7      	b.n	9f04 <sys_heap_aligned_alloc+0x24>
	return big_heap_chunks(h->end_chunk);
    9f94:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
    9f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9f9a:	d305      	bcc.n	9fa8 <sys_heap_aligned_alloc+0xc8>
    9f9c:	2308      	movs	r3, #8
		if (align <= chunk_header_bytes(h)) {
    9f9e:	429d      	cmp	r5, r3
    9fa0:	d904      	bls.n	9fac <sys_heap_aligned_alloc+0xcc>
		rew = 0;
    9fa2:	f04f 0800 	mov.w	r8, #0
    9fa6:	e7b0      	b.n	9f0a <sys_heap_aligned_alloc+0x2a>
    9fa8:	2304      	movs	r3, #4
    9faa:	e7f8      	b.n	9f9e <sys_heap_aligned_alloc+0xbe>
			return sys_heap_alloc(heap, bytes);
    9fac:	4621      	mov	r1, r4
    9fae:	f7ff ff50 	bl	9e52 <sys_heap_alloc>
    9fb2:	4605      	mov	r5, r0
    9fb4:	e7e9      	b.n	9f8a <sys_heap_aligned_alloc+0xaa>
    9fb6:	2304      	movs	r3, #4
    9fb8:	e7b3      	b.n	9f22 <sys_heap_aligned_alloc+0x42>
		split_chunks(h, c0, c);
    9fba:	4602      	mov	r2, r0
    9fbc:	4639      	mov	r1, r7
    9fbe:	4630      	mov	r0, r6
    9fc0:	f7ff fdbb 	bl	9b3a <split_chunks>
		free_list_add(h, c0);
    9fc4:	4639      	mov	r1, r7
    9fc6:	4630      	mov	r0, r6
    9fc8:	f7ff fe55 	bl	9c76 <free_list_add>
    9fcc:	e7ca      	b.n	9f64 <sys_heap_aligned_alloc+0x84>
		return ((uint16_t *)cmem)[f];
    9fce:	887b      	ldrh	r3, [r7, #2]
    9fd0:	e7cf      	b.n	9f72 <sys_heap_aligned_alloc+0x92>
		split_chunks(h, c, c_end);
    9fd2:	4622      	mov	r2, r4
    9fd4:	4641      	mov	r1, r8
    9fd6:	4630      	mov	r0, r6
    9fd8:	f7ff fdaf 	bl	9b3a <split_chunks>
		free_list_add(h, c_end);
    9fdc:	4621      	mov	r1, r4
    9fde:	4630      	mov	r0, r6
    9fe0:	f7ff fe49 	bl	9c76 <free_list_add>
    9fe4:	e7c9      	b.n	9f7a <sys_heap_aligned_alloc+0x9a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9fe6:	887b      	ldrh	r3, [r7, #2]
    9fe8:	f043 0301 	orr.w	r3, r3, #1
    9fec:	807b      	strh	r3, [r7, #2]
    9fee:	e7cc      	b.n	9f8a <sys_heap_aligned_alloc+0xaa>
		return NULL;
    9ff0:	2500      	movs	r5, #0
    9ff2:	e7ca      	b.n	9f8a <sys_heap_aligned_alloc+0xaa>
    9ff4:	2500      	movs	r5, #0
    9ff6:	e7c8      	b.n	9f8a <sys_heap_aligned_alloc+0xaa>
		return NULL;
    9ff8:	2500      	movs	r5, #0
    9ffa:	e7c6      	b.n	9f8a <sys_heap_aligned_alloc+0xaa>

00009ffc <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    9ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ffe:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
    a000:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    a004:	d32a      	bcc.n	a05c <sys_heap_init+0x60>
    a006:	2508      	movs	r5, #8
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    a008:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a00a:	1dc8      	adds	r0, r1, #7
    a00c:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a010:	440d      	add	r5, r1
    a012:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    a016:	1a2d      	subs	r5, r5, r0
    a018:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
    a01a:	4606      	mov	r6, r0
	heap->heap = h;
    a01c:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
    a01e:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
    a020:	2300      	movs	r3, #0
    a022:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
    a024:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    a028:	d31a      	bcc.n	a060 <sys_heap_init+0x64>
    a02a:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a02c:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    a02e:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
    a032:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
    a034:	fab3 f383 	clz	r3, r3
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    a038:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    a03c:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
    a040:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a042:	f103 0e07 	add.w	lr, r3, #7
    a046:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    a04a:	2300      	movs	r3, #0
    a04c:	4563      	cmp	r3, ip
    a04e:	da09      	bge.n	a064 <sys_heap_init+0x68>
		h->buckets[i].next = 0;
    a050:	1d1a      	adds	r2, r3, #4
    a052:	2400      	movs	r4, #0
    a054:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    a058:	3301      	adds	r3, #1
    a05a:	e7f7      	b.n	a04c <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
    a05c:	2504      	movs	r5, #4
    a05e:	e7d3      	b.n	a008 <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
    a060:	2304      	movs	r3, #4
    a062:	e7e3      	b.n	a02c <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a064:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
    a066:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    a06a:	d333      	bcc.n	a0d4 <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
    a06c:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
    a06e:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    a072:	d331      	bcc.n	a0d8 <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
    a074:	2300      	movs	r3, #0
    a076:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
    a078:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    a07c:	d32f      	bcc.n	a0de <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    a07e:	6843      	ldr	r3, [r0, #4]
    a080:	f043 0301 	orr.w	r3, r3, #1
    a084:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    a086:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a088:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
    a08a:	f02e 0307 	bic.w	r3, lr, #7
    a08e:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
    a090:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    a094:	d328      	bcc.n	a0e8 <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
    a096:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
    a098:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    a09a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    a09e:	d325      	bcc.n	a0ec <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
    a0a0:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
    a0a2:	f025 0307 	bic.w	r3, r5, #7
    a0a6:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
    a0a8:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    a0aa:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    a0ae:	d31f      	bcc.n	a0f0 <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
    a0b0:	2400      	movs	r4, #0
    a0b2:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
    a0b4:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    a0b6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    a0ba:	d31c      	bcc.n	a0f6 <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
    a0bc:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
    a0be:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    a0c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a0c4:	d319      	bcc.n	a0fa <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    a0c6:	686b      	ldr	r3, [r5, #4]
    a0c8:	f043 0301 	orr.w	r3, r3, #1
    a0cc:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    a0ce:	f7ff fdd2 	bl	9c76 <free_list_add>
}
    a0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
    a0d4:	8043      	strh	r3, [r0, #2]
    a0d6:	e7ca      	b.n	a06e <sys_heap_init+0x72>
    a0d8:	2300      	movs	r3, #0
    a0da:	8003      	strh	r3, [r0, #0]
    a0dc:	e7cc      	b.n	a078 <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a0de:	8843      	ldrh	r3, [r0, #2]
    a0e0:	f043 0301 	orr.w	r3, r3, #1
    a0e4:	8043      	strh	r3, [r0, #2]
    a0e6:	e7ce      	b.n	a086 <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
    a0e8:	8066      	strh	r6, [r4, #2]
    a0ea:	e7d5      	b.n	a098 <sys_heap_init+0x9c>
    a0ec:	52c1      	strh	r1, [r0, r3]
    a0ee:	e7d8      	b.n	a0a2 <sys_heap_init+0xa6>
    a0f0:	2400      	movs	r4, #0
    a0f2:	806c      	strh	r4, [r5, #2]
    a0f4:	e7de      	b.n	a0b4 <sys_heap_init+0xb8>
    a0f6:	52c2      	strh	r2, [r0, r3]
    a0f8:	e7e1      	b.n	a0be <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a0fa:	886b      	ldrh	r3, [r5, #2]
    a0fc:	f043 0301 	orr.w	r3, r3, #1
    a100:	806b      	strh	r3, [r5, #2]
    a102:	e7e4      	b.n	a0ce <sys_heap_init+0xd2>

0000a104 <extract_decimal>:
{
    a104:	b410      	push	{r4}
    a106:	4604      	mov	r4, r0
	const char *sp = *str;
    a108:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    a10a:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    a10c:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    a10e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    a112:	2909      	cmp	r1, #9
    a114:	d806      	bhi.n	a124 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
    a116:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    a11a:	3201      	adds	r2, #1
    a11c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    a120:	3830      	subs	r0, #48	; 0x30
    a122:	e7f3      	b.n	a10c <extract_decimal+0x8>
	*str = sp;
    a124:	6022      	str	r2, [r4, #0]
}
    a126:	bc10      	pop	{r4}
    a128:	4770      	bx	lr

0000a12a <encode_uint>:
{
    a12a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a12e:	b083      	sub	sp, #12
    a130:	4604      	mov	r4, r0
    a132:	460d      	mov	r5, r1
    a134:	9201      	str	r2, [sp, #4]
    a136:	469a      	mov	sl, r3
    a138:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    a13c:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    a13e:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    a142:	2b6f      	cmp	r3, #111	; 0x6f
    a144:	d00f      	beq.n	a166 <encode_uint+0x3c>
    a146:	d906      	bls.n	a156 <encode_uint+0x2c>
    a148:	2b70      	cmp	r3, #112	; 0x70
    a14a:	d00f      	beq.n	a16c <encode_uint+0x42>
    a14c:	2b78      	cmp	r3, #120	; 0x78
    a14e:	d110      	bne.n	a172 <encode_uint+0x48>
		return 16;
    a150:	f04f 0910 	mov.w	r9, #16
    a154:	e026      	b.n	a1a4 <encode_uint+0x7a>
	switch (specifier) {
    a156:	2b58      	cmp	r3, #88	; 0x58
    a158:	d002      	beq.n	a160 <encode_uint+0x36>
    a15a:	f04f 090a 	mov.w	r9, #10
    a15e:	e021      	b.n	a1a4 <encode_uint+0x7a>
		return 16;
    a160:	f04f 0910 	mov.w	r9, #16
    a164:	e01e      	b.n	a1a4 <encode_uint+0x7a>
		return 8;
    a166:	f04f 0908 	mov.w	r9, #8
    a16a:	e01b      	b.n	a1a4 <encode_uint+0x7a>
		return 16;
    a16c:	f04f 0910 	mov.w	r9, #16
    a170:	e018      	b.n	a1a4 <encode_uint+0x7a>
	switch (specifier) {
    a172:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    a176:	e015      	b.n	a1a4 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    a178:	f1bb 0f19 	cmp.w	fp, #25
    a17c:	d820      	bhi.n	a1c0 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    a17e:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    a180:	3237      	adds	r2, #55	; 0x37
    a182:	b2d2      	uxtb	r2, r2
    a184:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
    a188:	4632      	mov	r2, r6
    a18a:	463b      	mov	r3, r7
    a18c:	4620      	mov	r0, r4
    a18e:	4629      	mov	r1, r5
    a190:	f7f5 ffe0 	bl	154 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    a194:	42bd      	cmp	r5, r7
    a196:	bf08      	it	eq
    a198:	42b4      	cmpeq	r4, r6
    a19a:	d315      	bcc.n	a1c8 <encode_uint+0x9e>
    a19c:	45d0      	cmp	r8, sl
    a19e:	d913      	bls.n	a1c8 <encode_uint+0x9e>
		value /= radix;
    a1a0:	4604      	mov	r4, r0
    a1a2:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    a1a4:	464e      	mov	r6, r9
    a1a6:	2700      	movs	r7, #0
    a1a8:	464a      	mov	r2, r9
    a1aa:	463b      	mov	r3, r7
    a1ac:	4620      	mov	r0, r4
    a1ae:	4629      	mov	r1, r5
    a1b0:	f7f5 ffd0 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    a1b4:	2a09      	cmp	r2, #9
    a1b6:	d8df      	bhi.n	a178 <encode_uint+0x4e>
    a1b8:	b2d2      	uxtb	r2, r2
    a1ba:	3230      	adds	r2, #48	; 0x30
    a1bc:	b2d2      	uxtb	r2, r2
    a1be:	e7e1      	b.n	a184 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    a1c0:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    a1c2:	3257      	adds	r2, #87	; 0x57
    a1c4:	b2d2      	uxtb	r2, r2
    a1c6:	e7dd      	b.n	a184 <encode_uint+0x5a>
	if (conv->flag_hash) {
    a1c8:	9b01      	ldr	r3, [sp, #4]
    a1ca:	781b      	ldrb	r3, [r3, #0]
    a1cc:	f013 0f20 	tst.w	r3, #32
    a1d0:	d005      	beq.n	a1de <encode_uint+0xb4>
		if (radix == 8) {
    a1d2:	f1b9 0f08 	cmp.w	r9, #8
    a1d6:	d006      	beq.n	a1e6 <encode_uint+0xbc>
		} else if (radix == 16) {
    a1d8:	f1b9 0f10 	cmp.w	r9, #16
    a1dc:	d009      	beq.n	a1f2 <encode_uint+0xc8>
}
    a1de:	4640      	mov	r0, r8
    a1e0:	b003      	add	sp, #12
    a1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    a1e6:	9a01      	ldr	r2, [sp, #4]
    a1e8:	7893      	ldrb	r3, [r2, #2]
    a1ea:	f043 0308 	orr.w	r3, r3, #8
    a1ee:	7093      	strb	r3, [r2, #2]
    a1f0:	e7f5      	b.n	a1de <encode_uint+0xb4>
			conv->altform_0c = true;
    a1f2:	9a01      	ldr	r2, [sp, #4]
    a1f4:	7893      	ldrb	r3, [r2, #2]
    a1f6:	f043 0310 	orr.w	r3, r3, #16
    a1fa:	7093      	strb	r3, [r2, #2]
    a1fc:	e7ef      	b.n	a1de <encode_uint+0xb4>

0000a1fe <outs>:
{
    a1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a202:	4607      	mov	r7, r0
    a204:	460e      	mov	r6, r1
    a206:	4614      	mov	r4, r2
    a208:	4698      	mov	r8, r3
	size_t count = 0;
    a20a:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    a20c:	e006      	b.n	a21c <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    a20e:	4631      	mov	r1, r6
    a210:	f814 0b01 	ldrb.w	r0, [r4], #1
    a214:	47b8      	blx	r7
		if (rc < 0) {
    a216:	2800      	cmp	r0, #0
    a218:	db09      	blt.n	a22e <outs+0x30>
		++count;
    a21a:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    a21c:	4544      	cmp	r4, r8
    a21e:	d3f6      	bcc.n	a20e <outs+0x10>
    a220:	f1b8 0f00 	cmp.w	r8, #0
    a224:	d102      	bne.n	a22c <outs+0x2e>
    a226:	7823      	ldrb	r3, [r4, #0]
    a228:	2b00      	cmp	r3, #0
    a22a:	d1f0      	bne.n	a20e <outs+0x10>
	return (int)count;
    a22c:	4628      	mov	r0, r5
}
    a22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a232 <get_rewind_value>:
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
}

static uint32_t get_rewind_value(uint32_t buf_size, uint32_t threshold)
{
	return buf_size * (threshold / buf_size);
    a232:	fbb1 f1f0 	udiv	r1, r1, r0
}
    a236:	fb00 f001 	mul.w	r0, r0, r1
    a23a:	4770      	bx	lr

0000a23c <mod>:
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    a23c:	6983      	ldr	r3, [r0, #24]
    a23e:	b113      	cbz	r3, a246 <mod+0xa>
    a240:	ea03 0001 	and.w	r0, r3, r1
    a244:	4770      	bx	lr
    a246:	6900      	ldr	r0, [r0, #16]
    a248:	fbb1 f3f0 	udiv	r3, r1, r0
    a24c:	fb00 1013 	mls	r0, r0, r3, r1
}
    a250:	4770      	bx	lr

0000a252 <ring_buf_get_rewind_threshold>:
}
    a252:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    a256:	4770      	bx	lr

0000a258 <ring_buf_is_empty>:

int ring_buf_is_empty(struct ring_buf *buf)
{
    a258:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
    a25a:	6844      	ldr	r4, [r0, #4]
	uint32_t head = buf->head;
    a25c:	6805      	ldr	r5, [r0, #0]

	if (tail < head) {
    a25e:	42ac      	cmp	r4, r5
    a260:	d304      	bcc.n	a26c <ring_buf_is_empty+0x14>
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
    a262:	42ac      	cmp	r4, r5
    a264:	bf14      	ite	ne
    a266:	2000      	movne	r0, #0
    a268:	2001      	moveq	r0, #1
    a26a:	bd70      	pop	{r4, r5, r6, pc}
		tail += get_rewind_value(buf->size,
    a26c:	6906      	ldr	r6, [r0, #16]
    a26e:	f7ff fff0 	bl	a252 <ring_buf_get_rewind_threshold>
    a272:	4601      	mov	r1, r0
    a274:	4630      	mov	r0, r6
    a276:	f7ff ffdc 	bl	a232 <get_rewind_value>
    a27a:	4404      	add	r4, r0
    a27c:	e7f1      	b.n	a262 <ring_buf_is_empty+0xa>

0000a27e <ring_buf_put_claim>:

	return 0;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    a27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a282:	4604      	mov	r4, r0
    a284:	460e      	mov	r6, r1
    a286:	4617      	mov	r7, r2
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
    a288:	f8d0 8008 	ldr.w	r8, [r0, #8]
    a28c:	4641      	mov	r1, r8
    a28e:	f7ff ffd5 	bl	a23c <mod>
    a292:	4601      	mov	r1, r0
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
    a294:	6825      	ldr	r5, [r4, #0]
    a296:	6920      	ldr	r0, [r4, #16]
    a298:	4405      	add	r5, r0
    a29a:	eba5 0208 	sub.w	r2, r5, r8
	trail_size = buf->size - tmp_trail_mod;
    a29e:	1a40      	subs	r0, r0, r1

	/* Limit requested size to available size. */
	size = MIN(size, space);
    a2a0:	42ba      	cmp	r2, r7
    a2a2:	bf28      	it	cs
    a2a4:	463a      	movcs	r2, r7

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
    a2a6:	4290      	cmp	r0, r2
    a2a8:	bf28      	it	cs
    a2aa:	4610      	movcs	r0, r2
	*data = &buf->buf.buf8[tmp_trail_mod];
    a2ac:	6963      	ldr	r3, [r4, #20]
    a2ae:	4419      	add	r1, r3
    a2b0:	6031      	str	r1, [r6, #0]

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
    a2b2:	68a3      	ldr	r3, [r4, #8]
    a2b4:	4403      	add	r3, r0
	buf->misc.byte_mode.tmp_tail =
    a2b6:	60a3      	str	r3, [r4, #8]

	return allocated;
}
    a2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a2bc <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
    a2bc:	b570      	push	{r4, r5, r6, lr}
    a2be:	4604      	mov	r4, r0
    a2c0:	460d      	mov	r5, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
    a2c2:	f7ff ffc6 	bl	a252 <ring_buf_get_rewind_threshold>
    a2c6:	4601      	mov	r1, r0

	if ((buf->tail + size) > (buf->head + buf->size)) {
    a2c8:	6866      	ldr	r6, [r4, #4]
    a2ca:	1972      	adds	r2, r6, r5
    a2cc:	6823      	ldr	r3, [r4, #0]
    a2ce:	6920      	ldr	r0, [r4, #16]
    a2d0:	4403      	add	r3, r0
    a2d2:	429a      	cmp	r2, r3
    a2d4:	d80b      	bhi.n	a2ee <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
    a2d6:	428e      	cmp	r6, r1
    a2d8:	d907      	bls.n	a2ea <ring_buf_put_finish+0x2e>
		rew = get_rewind_value(buf->size, threshold);
    a2da:	f7ff ffaa 	bl	a232 <get_rewind_value>
	} else {
		rew = 0;
	}

	buf->tail += (size - rew);
    a2de:	1a2d      	subs	r5, r5, r0
    a2e0:	442e      	add	r6, r5
    a2e2:	6066      	str	r6, [r4, #4]
	buf->misc.byte_mode.tmp_tail = buf->tail;
    a2e4:	60a6      	str	r6, [r4, #8]

	return 0;
    a2e6:	2000      	movs	r0, #0
}
    a2e8:	bd70      	pop	{r4, r5, r6, pc}
		rew = 0;
    a2ea:	2000      	movs	r0, #0
    a2ec:	e7f7      	b.n	a2de <ring_buf_put_finish+0x22>
		return -EINVAL;
    a2ee:	f06f 0015 	mvn.w	r0, #21
    a2f2:	e7f9      	b.n	a2e8 <ring_buf_put_finish+0x2c>

0000a2f4 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    a2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a2f8:	b082      	sub	sp, #8
    a2fa:	4680      	mov	r8, r0
    a2fc:	460e      	mov	r6, r1
    a2fe:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    a300:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    a302:	462a      	mov	r2, r5
    a304:	a901      	add	r1, sp, #4
    a306:	4640      	mov	r0, r8
    a308:	f7ff ffb9 	bl	a27e <ring_buf_put_claim>
    a30c:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    a30e:	4602      	mov	r2, r0
    a310:	4631      	mov	r1, r6
    a312:	9801      	ldr	r0, [sp, #4]
    a314:	f000 fbf7 	bl	ab06 <memcpy>
		total_size += partial_size;
    a318:	4427      	add	r7, r4
		size -= partial_size;
		data += partial_size;
    a31a:	4426      	add	r6, r4
	} while (size && partial_size);
    a31c:	1b2d      	subs	r5, r5, r4
    a31e:	d001      	beq.n	a324 <ring_buf_put+0x30>
    a320:	2c00      	cmp	r4, #0
    a322:	d1ee      	bne.n	a302 <ring_buf_put+0xe>

	err = ring_buf_put_finish(buf, total_size);
    a324:	4639      	mov	r1, r7
    a326:	4640      	mov	r0, r8
    a328:	f7ff ffc8 	bl	a2bc <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    a32c:	4638      	mov	r0, r7
    a32e:	b002      	add	sp, #8
    a330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a334 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    a334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a338:	4604      	mov	r4, r0
    a33a:	460e      	mov	r6, r1
    a33c:	4617      	mov	r7, r2
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;
    a33e:	6845      	ldr	r5, [r0, #4]

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    a340:	68c3      	ldr	r3, [r0, #12]
    a342:	42ab      	cmp	r3, r5
    a344:	d818      	bhi.n	a378 <ring_buf_get_claim+0x44>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
    a346:	f8d4 800c 	ldr.w	r8, [r4, #12]
    a34a:	4641      	mov	r1, r8
    a34c:	4620      	mov	r0, r4
    a34e:	f7ff ff75 	bl	a23c <mod>
    a352:	4601      	mov	r1, r0
	space = tail - buf->misc.byte_mode.tmp_head;
    a354:	eba5 0508 	sub.w	r5, r5, r8
	trail_size = buf->size - tmp_head_mod;
    a358:	6923      	ldr	r3, [r4, #16]
    a35a:	1a18      	subs	r0, r3, r0

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
    a35c:	42bd      	cmp	r5, r7
    a35e:	bf28      	it	cs
    a360:	463d      	movcs	r5, r7

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
    a362:	42a8      	cmp	r0, r5
    a364:	bf28      	it	cs
    a366:	4628      	movcs	r0, r5

	*data = &buf->buf.buf8[tmp_head_mod];
    a368:	6963      	ldr	r3, [r4, #20]
    a36a:	4419      	add	r1, r3
    a36c:	6031      	str	r1, [r6, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
    a36e:	68e3      	ldr	r3, [r4, #12]
    a370:	4403      	add	r3, r0
    a372:	60e3      	str	r3, [r4, #12]

	return granted_size;
}
    a374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tail += get_rewind_value(buf->size,
    a378:	f8d0 8010 	ldr.w	r8, [r0, #16]
    a37c:	f7ff ff69 	bl	a252 <ring_buf_get_rewind_threshold>
    a380:	4601      	mov	r1, r0
    a382:	4640      	mov	r0, r8
    a384:	f7ff ff55 	bl	a232 <get_rewind_value>
    a388:	4405      	add	r5, r0
    a38a:	e7dc      	b.n	a346 <ring_buf_get_claim+0x12>

0000a38c <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
    a38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a38e:	4604      	mov	r4, r0
    a390:	460d      	mov	r5, r1
	uint32_t tail = buf->tail;
    a392:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    a394:	68c3      	ldr	r3, [r0, #12]
    a396:	42b3      	cmp	r3, r6
    a398:	d80a      	bhi.n	a3b0 <ring_buf_get_finish+0x24>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
				       ring_buf_get_rewind_threshold());
		tail += rew;
	} else {
		rew = 0;
    a39a:	2000      	movs	r0, #0
	}

	if ((buf->head + size) > tail) {
    a39c:	6823      	ldr	r3, [r4, #0]
    a39e:	195a      	adds	r2, r3, r5
    a3a0:	42b2      	cmp	r2, r6
    a3a2:	d80e      	bhi.n	a3c2 <ring_buf_get_finish+0x36>
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
    a3a4:	1a2d      	subs	r5, r5, r0
    a3a6:	442b      	add	r3, r5
    a3a8:	6023      	str	r3, [r4, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
    a3aa:	60e3      	str	r3, [r4, #12]

	return 0;
    a3ac:	2000      	movs	r0, #0
}
    a3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = get_rewind_value(buf->size,
    a3b0:	6907      	ldr	r7, [r0, #16]
    a3b2:	f7ff ff4e 	bl	a252 <ring_buf_get_rewind_threshold>
    a3b6:	4601      	mov	r1, r0
    a3b8:	4638      	mov	r0, r7
    a3ba:	f7ff ff3a 	bl	a232 <get_rewind_value>
		tail += rew;
    a3be:	4406      	add	r6, r0
    a3c0:	e7ec      	b.n	a39c <ring_buf_get_finish+0x10>
		return -EINVAL;
    a3c2:	f06f 0015 	mvn.w	r0, #21
    a3c6:	e7f2      	b.n	a3ae <ring_buf_get_finish+0x22>

0000a3c8 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    a3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a3cc:	b082      	sub	sp, #8
    a3ce:	4680      	mov	r8, r0
    a3d0:	460e      	mov	r6, r1
    a3d2:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    a3d4:	2700      	movs	r7, #0
    a3d6:	e009      	b.n	a3ec <ring_buf_get+0x24>
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
		if (data) {
			memcpy(data, src, partial_size);
    a3d8:	4602      	mov	r2, r0
    a3da:	9901      	ldr	r1, [sp, #4]
    a3dc:	4630      	mov	r0, r6
    a3de:	f000 fb92 	bl	ab06 <memcpy>
			data += partial_size;
    a3e2:	4426      	add	r6, r4
		}
		total_size += partial_size;
    a3e4:	4427      	add	r7, r4
		size -= partial_size;
	} while (size && partial_size);
    a3e6:	1b2d      	subs	r5, r5, r4
    a3e8:	d009      	beq.n	a3fe <ring_buf_get+0x36>
    a3ea:	b144      	cbz	r4, a3fe <ring_buf_get+0x36>
		partial_size = ring_buf_get_claim(buf, &src, size);
    a3ec:	462a      	mov	r2, r5
    a3ee:	a901      	add	r1, sp, #4
    a3f0:	4640      	mov	r0, r8
    a3f2:	f7ff ff9f 	bl	a334 <ring_buf_get_claim>
    a3f6:	4604      	mov	r4, r0
		if (data) {
    a3f8:	2e00      	cmp	r6, #0
    a3fa:	d1ed      	bne.n	a3d8 <ring_buf_get+0x10>
    a3fc:	e7f2      	b.n	a3e4 <ring_buf_get+0x1c>

	err = ring_buf_get_finish(buf, total_size);
    a3fe:	4639      	mov	r1, r7
    a400:	4640      	mov	r0, r8
    a402:	f7ff ffc3 	bl	a38c <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    a406:	4638      	mov	r0, r7
    a408:	b002      	add	sp, #8
    a40a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a40e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    a40e:	4770      	bx	lr

0000a410 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    a410:	b084      	sub	sp, #16
    a412:	ab04      	add	r3, sp, #16
    a414:	e903 0007 	stmdb	r3, {r0, r1, r2}
    a418:	2300      	movs	r3, #0
    a41a:	f383 8811 	msr	BASEPRI, r3
    a41e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    a422:	b004      	add	sp, #16
    a424:	4770      	bx	lr

0000a426 <usb_vbus_set>:
}
    a426:	2000      	movs	r0, #0
    a428:	4770      	bx	lr

0000a42a <reset_endpoint>:
{
    a42a:	b510      	push	{r4, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    a42c:	7884      	ldrb	r4, [r0, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    a42e:	4620      	mov	r0, r4
    a430:	f7f7 fd4c 	bl	1ecc <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    a434:	4620      	mov	r0, r4
    a436:	f7f9 fc8d 	bl	3d54 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    a43a:	f110 0f78 	cmn.w	r0, #120	; 0x78
    a43e:	d002      	beq.n	a446 <reset_endpoint+0x1c>
	} else if (ret) {
    a440:	b918      	cbnz	r0, a44a <reset_endpoint+0x20>
	return true;
    a442:	2001      	movs	r0, #1
}
    a444:	bd10      	pop	{r4, pc}
	return true;
    a446:	2001      	movs	r0, #1
    a448:	e7fc      	b.n	a444 <reset_endpoint+0x1a>
		return false;
    a44a:	2000      	movs	r0, #0
    a44c:	e7fa      	b.n	a444 <reset_endpoint+0x1a>

0000a44e <usb_eps_reconfigure>:
{
    a44e:	b508      	push	{r3, lr}
	if (cur_alt_setting != alt_setting) {
    a450:	4291      	cmp	r1, r2
    a452:	d002      	beq.n	a45a <usb_eps_reconfigure+0xc>
		ret = reset_endpoint(ep_desc);
    a454:	f7ff ffe9 	bl	a42a <reset_endpoint>
}
    a458:	bd08      	pop	{r3, pc}
		ret = set_endpoint(ep_desc);
    a45a:	f7f7 f809 	bl	1470 <set_endpoint>
    a45e:	e7fb      	b.n	a458 <usb_eps_reconfigure+0xa>

0000a460 <usb_handle_std_interface_req>:
{
    a460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a462:	4604      	mov	r4, r0
    a464:	460e      	mov	r6, r1
    a466:	4615      	mov	r5, r2
	uint8_t *data = *data_buf;
    a468:	6817      	ldr	r7, [r2, #0]
	if (!is_device_configured() ||
    a46a:	f7f6 fefb 	bl	1264 <is_device_configured>
    a46e:	b900      	cbnz	r0, a472 <usb_handle_std_interface_req+0x12>
}
    a470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    a472:	7920      	ldrb	r0, [r4, #4]
    a474:	f7f6 ff00 	bl	1278 <is_interface_valid>
	if (!is_device_configured() ||
    a478:	2800      	cmp	r0, #0
    a47a:	d0f9      	beq.n	a470 <usb_handle_std_interface_req+0x10>
	if (usb_reqtype_is_to_host(setup)) {
    a47c:	f994 3000 	ldrsb.w	r3, [r4]
    a480:	2b00      	cmp	r3, #0
    a482:	db04      	blt.n	a48e <usb_handle_std_interface_req+0x2e>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    a484:	7863      	ldrb	r3, [r4, #1]
    a486:	2b0b      	cmp	r3, #11
    a488:	d013      	beq.n	a4b2 <usb_handle_std_interface_req+0x52>
	return false;
    a48a:	2000      	movs	r0, #0
    a48c:	e7f0      	b.n	a470 <usb_handle_std_interface_req+0x10>
		switch (setup->bRequest) {
    a48e:	7863      	ldrb	r3, [r4, #1]
    a490:	b11b      	cbz	r3, a49a <usb_handle_std_interface_req+0x3a>
    a492:	2b0a      	cmp	r3, #10
    a494:	d007      	beq.n	a4a6 <usb_handle_std_interface_req+0x46>
    a496:	2000      	movs	r0, #0
    a498:	e7ea      	b.n	a470 <usb_handle_std_interface_req+0x10>
			data[0] = 0U;
    a49a:	2300      	movs	r3, #0
    a49c:	703b      	strb	r3, [r7, #0]
			data[1] = 0U;
    a49e:	707b      	strb	r3, [r7, #1]
			*len = 2;
    a4a0:	2302      	movs	r3, #2
    a4a2:	6033      	str	r3, [r6, #0]
			return true;
    a4a4:	e7e4      	b.n	a470 <usb_handle_std_interface_req+0x10>
			return usb_get_interface(setup, len, data_buf);
    a4a6:	462a      	mov	r2, r5
    a4a8:	4631      	mov	r1, r6
    a4aa:	4620      	mov	r0, r4
    a4ac:	f7f6 febc 	bl	1228 <usb_get_interface>
    a4b0:	e7de      	b.n	a470 <usb_handle_std_interface_req+0x10>
			return usb_set_interface(setup);
    a4b2:	4620      	mov	r0, r4
    a4b4:	f7f7 f8a8 	bl	1608 <usb_set_interface>
    a4b8:	e7da      	b.n	a470 <usb_handle_std_interface_req+0x10>

0000a4ba <disable_interface_ep>:
{
    a4ba:	b508      	push	{r3, lr}
	return usb_dc_ep_disable(ep_data->ep_addr);
    a4bc:	7900      	ldrb	r0, [r0, #4]
    a4be:	f7f9 fc49 	bl	3d54 <usb_dc_ep_disable>
}
    a4c2:	bd08      	pop	{r3, pc}

0000a4c4 <usb_get_status_endpoint>:
{
    a4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a4c6:	460e      	mov	r6, r1
	uint8_t ep = setup->wIndex;
    a4c8:	7904      	ldrb	r4, [r0, #4]
	uint8_t *data = *data_buf;
    a4ca:	6817      	ldr	r7, [r2, #0]
	if (!is_ep_valid(ep)) {
    a4cc:	4620      	mov	r0, r4
    a4ce:	f7f6 fee5 	bl	129c <is_ep_valid>
    a4d2:	4605      	mov	r5, r0
    a4d4:	b130      	cbz	r0, a4e4 <usb_get_status_endpoint+0x20>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    a4d6:	f034 0380 	bics.w	r3, r4, #128	; 0x80
    a4da:	d005      	beq.n	a4e8 <usb_get_status_endpoint+0x24>
    a4dc:	f7f6 fec2 	bl	1264 <is_device_configured>
    a4e0:	b910      	cbnz	r0, a4e8 <usb_get_status_endpoint+0x24>
	return false;
    a4e2:	4605      	mov	r5, r0
}
    a4e4:	4628      	mov	r0, r5
    a4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_dc_ep_is_stalled(ep, &data[0]);
    a4e8:	4639      	mov	r1, r7
    a4ea:	4620      	mov	r0, r4
    a4ec:	f7f9 fbe0 	bl	3cb0 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    a4f0:	2300      	movs	r3, #0
    a4f2:	707b      	strb	r3, [r7, #1]
		*len = 2;
    a4f4:	2302      	movs	r3, #2
    a4f6:	6033      	str	r3, [r6, #0]
		return true;
    a4f8:	e7f4      	b.n	a4e4 <usb_get_status_endpoint+0x20>

0000a4fa <usb_handle_std_endpoint_req>:
{
    a4fa:	b508      	push	{r3, lr}
	if (usb_reqtype_is_to_host(setup)) {
    a4fc:	f990 3000 	ldrsb.w	r3, [r0]
    a500:	2b00      	cmp	r3, #0
    a502:	db06      	blt.n	a512 <usb_handle_std_endpoint_req+0x18>
		switch (setup->bRequest) {
    a504:	7843      	ldrb	r3, [r0, #1]
    a506:	2b01      	cmp	r3, #1
    a508:	d00a      	beq.n	a520 <usb_handle_std_endpoint_req+0x26>
    a50a:	2b03      	cmp	r3, #3
    a50c:	d010      	beq.n	a530 <usb_handle_std_endpoint_req+0x36>
    a50e:	2000      	movs	r0, #0
    a510:	e002      	b.n	a518 <usb_handle_std_endpoint_req+0x1e>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    a512:	7843      	ldrb	r3, [r0, #1]
    a514:	b10b      	cbz	r3, a51a <usb_handle_std_endpoint_req+0x20>
	return false;
    a516:	2000      	movs	r0, #0
}
    a518:	bd08      	pop	{r3, pc}
			return usb_get_status_endpoint(setup, len, data_buf);
    a51a:	f7ff ffd3 	bl	a4c4 <usb_get_status_endpoint>
    a51e:	e7fb      	b.n	a518 <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    a520:	8843      	ldrh	r3, [r0, #2]
    a522:	b10b      	cbz	r3, a528 <usb_handle_std_endpoint_req+0x2e>
	return false;
    a524:	2000      	movs	r0, #0
    a526:	e7f7      	b.n	a518 <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, false);
    a528:	2100      	movs	r1, #0
    a52a:	f7f6 ff71 	bl	1410 <usb_halt_endpoint_req>
    a52e:	e7f3      	b.n	a518 <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    a530:	8843      	ldrh	r3, [r0, #2]
    a532:	b10b      	cbz	r3, a538 <usb_handle_std_endpoint_req+0x3e>
	return false;
    a534:	2000      	movs	r0, #0
    a536:	e7ef      	b.n	a518 <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, true);
    a538:	2101      	movs	r1, #1
    a53a:	f7f6 ff69 	bl	1410 <usb_halt_endpoint_req>
    a53e:	e7eb      	b.n	a518 <usb_handle_std_endpoint_req+0x1e>

0000a540 <usb_write>:
{
    a540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a544:	4681      	mov	r9, r0
    a546:	4688      	mov	r8, r1
    a548:	4617      	mov	r7, r2
    a54a:	461e      	mov	r6, r3
	int tries = CONFIG_USB_NUMOF_EP_WRITE_RETRIES;
    a54c:	2503      	movs	r5, #3
    a54e:	e000      	b.n	a552 <usb_write+0x12>
	} while (ret == -EAGAIN && tries--);
    a550:	461d      	mov	r5, r3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    a552:	4633      	mov	r3, r6
    a554:	463a      	mov	r2, r7
    a556:	4641      	mov	r1, r8
    a558:	4648      	mov	r0, r9
    a55a:	f7f9 fc25 	bl	3da8 <usb_dc_ep_write>
    a55e:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    a560:	f110 0f0b 	cmn.w	r0, #11
    a564:	d008      	beq.n	a578 <usb_write+0x38>
	} while (ret == -EAGAIN && tries--);
    a566:	f114 0f0b 	cmn.w	r4, #11
    a56a:	d102      	bne.n	a572 <usb_write+0x32>
    a56c:	1e6b      	subs	r3, r5, #1
    a56e:	2d00      	cmp	r5, #0
    a570:	d1ee      	bne.n	a550 <usb_write+0x10>
}
    a572:	4620      	mov	r0, r4
    a574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_impl_k_yield();
    a578:	f7fe fbe4 	bl	8d44 <z_impl_k_yield>
}
    a57c:	e7f3      	b.n	a566 <usb_write+0x26>

0000a57e <ascii7_to_utf16le>:
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    a57e:	f810 2b02 	ldrb.w	r2, [r0], #2
    a582:	1ed3      	subs	r3, r2, #3
	int ascii_idx_max = USB_BSTRING_ASCII_IDX_MAX(str_descr->bLength);
    a584:	0852      	lsrs	r2, r2, #1
    a586:	3a02      	subs	r2, #2
	for (int i = idx_max; i >= 0; i -= 2) {
    a588:	2b00      	cmp	r3, #0
    a58a:	db0b      	blt.n	a5a4 <ascii7_to_utf16le+0x26>
{
    a58c:	b410      	push	{r4}
		buf[i] = 0U;
    a58e:	2100      	movs	r1, #0
    a590:	54c1      	strb	r1, [r0, r3]
		buf[i - 1] = buf[ascii_idx_max--];
    a592:	1e59      	subs	r1, r3, #1
    a594:	5c84      	ldrb	r4, [r0, r2]
    a596:	5444      	strb	r4, [r0, r1]
	for (int i = idx_max; i >= 0; i -= 2) {
    a598:	3b02      	subs	r3, #2
		buf[i - 1] = buf[ascii_idx_max--];
    a59a:	3a01      	subs	r2, #1
	for (int i = idx_max; i >= 0; i -= 2) {
    a59c:	2b00      	cmp	r3, #0
    a59e:	daf6      	bge.n	a58e <ascii7_to_utf16le+0x10>
}
    a5a0:	bc10      	pop	{r4}
    a5a2:	4770      	bx	lr
    a5a4:	4770      	bx	lr

0000a5a6 <usb_validate_ep_cfg_data>:
{
    a5a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a5aa:	b083      	sub	sp, #12
    a5ac:	4605      	mov	r5, r0
    a5ae:	4689      	mov	r9, r1
    a5b0:	4690      	mov	r8, r2
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    a5b2:	2700      	movs	r7, #0
    a5b4:	e04a      	b.n	a64c <usb_validate_ep_cfg_data+0xa6>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    a5b6:	f8d8 2000 	ldr.w	r2, [r8]
    a5ba:	f104 0110 	add.w	r1, r4, #16
    a5be:	2301      	movs	r3, #1
    a5c0:	408b      	lsls	r3, r1
    a5c2:	421a      	tst	r2, r3
    a5c4:	d108      	bne.n	a5d8 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    a5c6:	f064 037f 	orn	r3, r4, #127	; 0x7f
    a5ca:	f88d 3000 	strb.w	r3, [sp]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    a5ce:	4668      	mov	r0, sp
    a5d0:	f000 fb72 	bl	acb8 <usb_dc_ep_check_cap>
    a5d4:	4603      	mov	r3, r0
    a5d6:	b1d0      	cbz	r0, a60e <usb_validate_ep_cfg_data+0x68>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    a5d8:	3401      	adds	r4, #1
    a5da:	b2e4      	uxtb	r4, r4
    a5dc:	2c0f      	cmp	r4, #15
    a5de:	d834      	bhi.n	a64a <usb_validate_ep_cfg_data+0xa4>
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    a5e0:	78eb      	ldrb	r3, [r5, #3]
    a5e2:	f003 0303 	and.w	r3, r3, #3
    a5e6:	f88d 3004 	strb.w	r3, [sp, #4]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    a5ea:	88ab      	ldrh	r3, [r5, #4]
    a5ec:	f8ad 3002 	strh.w	r3, [sp, #2]
			ep_cfg.ep_addr = ep_descr->bEndpointAddress;
    a5f0:	78ab      	ldrb	r3, [r5, #2]
    a5f2:	f88d 3000 	strb.w	r3, [sp]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    a5f6:	f013 0f80 	tst.w	r3, #128	; 0x80
    a5fa:	d1dc      	bne.n	a5b6 <usb_validate_ep_cfg_data+0x10>
				if ((*requested_ep & (1U << (idx)))) {
    a5fc:	f8d8 2000 	ldr.w	r2, [r8]
    a600:	2301      	movs	r3, #1
    a602:	40a3      	lsls	r3, r4
    a604:	421a      	tst	r2, r3
    a606:	d1e7      	bne.n	a5d8 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = idx;
    a608:	f88d 4000 	strb.w	r4, [sp]
    a60c:	e7df      	b.n	a5ce <usb_validate_ep_cfg_data+0x28>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    a60e:	f89d 2000 	ldrb.w	r2, [sp]
    a612:	70aa      	strb	r2, [r5, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    a614:	7132      	strb	r2, [r6, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    a616:	f012 0f80 	tst.w	r2, #128	; 0x80
    a61a:	d10b      	bne.n	a634 <usb_validate_ep_cfg_data+0x8e>
					*requested_ep |= (1U << idx);
    a61c:	2201      	movs	r2, #1
    a61e:	fa02 f404 	lsl.w	r4, r2, r4
    a622:	f8d8 2000 	ldr.w	r2, [r8]
    a626:	4322      	orrs	r2, r4
    a628:	f8c8 2000 	str.w	r2, [r8]
}
    a62c:	4618      	mov	r0, r3
    a62e:	b003      	add	sp, #12
    a630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					*requested_ep |= (1U << (idx + 16U));
    a634:	f104 0110 	add.w	r1, r4, #16
    a638:	2201      	movs	r2, #1
    a63a:	fa02 f101 	lsl.w	r1, r2, r1
    a63e:	f8d8 2000 	ldr.w	r2, [r8]
    a642:	430a      	orrs	r2, r1
    a644:	f8c8 2000 	str.w	r2, [r8]
    a648:	e7f0      	b.n	a62c <usb_validate_ep_cfg_data+0x86>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    a64a:	3701      	adds	r7, #1
    a64c:	f899 301c 	ldrb.w	r3, [r9, #28]
    a650:	429f      	cmp	r7, r3
    a652:	d209      	bcs.n	a668 <usb_validate_ep_cfg_data+0xc2>
		struct usb_ep_cfg_data *ep_data = cfg_data->endpoint;
    a654:	f8d9 6020 	ldr.w	r6, [r9, #32]
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    a658:	78aa      	ldrb	r2, [r5, #2]
    a65a:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
    a65e:	7933      	ldrb	r3, [r6, #4]
    a660:	429a      	cmp	r2, r3
    a662:	d1f2      	bne.n	a64a <usb_validate_ep_cfg_data+0xa4>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    a664:	2401      	movs	r4, #1
    a666:	e7b9      	b.n	a5dc <usb_validate_ep_cfg_data+0x36>
	return -1;
    a668:	f04f 33ff 	mov.w	r3, #4294967295
    a66c:	e7de      	b.n	a62c <usb_validate_ep_cfg_data+0x86>

0000a66e <usb_get_dev_data_by_cfg>:
	return list->head;
    a66e:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    a670:	b110      	cbz	r0, a678 <usb_get_dev_data_by_cfg+0xa>
    a672:	3804      	subs	r0, #4
    a674:	e000      	b.n	a678 <usb_get_dev_data_by_cfg+0xa>
    a676:	3804      	subs	r0, #4
    a678:	b140      	cbz	r0, a68c <usb_get_dev_data_by_cfg+0x1e>
		const struct device *dev = dev_data->dev;
    a67a:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg_cur = dev->config;
    a67c:	685b      	ldr	r3, [r3, #4]

		if (cfg_cur == cfg) {
    a67e:	4299      	cmp	r1, r3
    a680:	d004      	beq.n	a68c <usb_get_dev_data_by_cfg+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    a682:	1d03      	adds	r3, r0, #4
    a684:	d003      	beq.n	a68e <usb_get_dev_data_by_cfg+0x20>
	return node->next;
    a686:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    a688:	2800      	cmp	r0, #0
    a68a:	d1f4      	bne.n	a676 <usb_get_dev_data_by_cfg+0x8>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    a68c:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    a68e:	4618      	mov	r0, r3
    a690:	e7f2      	b.n	a678 <usb_get_dev_data_by_cfg+0xa>

0000a692 <usb_get_dev_data_by_iface>:
	return list->head;
    a692:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    a694:	b110      	cbz	r0, a69c <usb_get_dev_data_by_iface+0xa>
    a696:	3804      	subs	r0, #4
    a698:	e000      	b.n	a69c <usb_get_dev_data_by_iface+0xa>
    a69a:	3804      	subs	r0, #4
    a69c:	b150      	cbz	r0, a6b4 <usb_get_dev_data_by_iface+0x22>
		const struct device *dev = dev_data->dev;
    a69e:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
    a6a0:	685b      	ldr	r3, [r3, #4]
		const struct usb_if_descriptor *if_desc =
    a6a2:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    a6a4:	789b      	ldrb	r3, [r3, #2]
    a6a6:	428b      	cmp	r3, r1
    a6a8:	d004      	beq.n	a6b4 <usb_get_dev_data_by_iface+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    a6aa:	1d03      	adds	r3, r0, #4
    a6ac:	d003      	beq.n	a6b6 <usb_get_dev_data_by_iface+0x24>
	return node->next;
    a6ae:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    a6b0:	2800      	cmp	r0, #0
    a6b2:	d1f2      	bne.n	a69a <usb_get_dev_data_by_iface+0x8>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    a6b4:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    a6b6:	4618      	mov	r0, r3
    a6b8:	e7f0      	b.n	a69c <usb_get_dev_data_by_iface+0xa>

0000a6ba <usb_get_dev_data_by_ep>:
	return list->head;
    a6ba:	6800      	ldr	r0, [r0, #0]

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    a6bc:	b100      	cbz	r0, a6c0 <usb_get_dev_data_by_ep+0x6>
    a6be:	3804      	subs	r0, #4
    a6c0:	b1d0      	cbz	r0, a6f8 <usb_get_dev_data_by_ep+0x3e>
{
    a6c2:	b430      	push	{r4, r5}
    a6c4:	e005      	b.n	a6d2 <usb_get_dev_data_by_ep+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
    a6c6:	1d03      	adds	r3, r0, #4
    a6c8:	d012      	beq.n	a6f0 <usb_get_dev_data_by_ep+0x36>
	return node->next;
    a6ca:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    a6cc:	b190      	cbz	r0, a6f4 <usb_get_dev_data_by_ep+0x3a>
    a6ce:	3804      	subs	r0, #4
    a6d0:	b180      	cbz	r0, a6f4 <usb_get_dev_data_by_ep+0x3a>
		const struct device *dev = dev_data->dev;
    a6d2:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
    a6d4:	685c      	ldr	r4, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    a6d6:	6a25      	ldr	r5, [r4, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    a6d8:	2300      	movs	r3, #0
    a6da:	7f22      	ldrb	r2, [r4, #28]
    a6dc:	429a      	cmp	r2, r3
    a6de:	d9f2      	bls.n	a6c6 <usb_get_dev_data_by_ep+0xc>
			if (ep_data[i].ep_addr == ep) {
    a6e0:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    a6e4:	7912      	ldrb	r2, [r2, #4]
    a6e6:	428a      	cmp	r2, r1
    a6e8:	d004      	beq.n	a6f4 <usb_get_dev_data_by_ep+0x3a>
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    a6ea:	3301      	adds	r3, #1
    a6ec:	b2db      	uxtb	r3, r3
    a6ee:	e7f4      	b.n	a6da <usb_get_dev_data_by_ep+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    a6f0:	4618      	mov	r0, r3
    a6f2:	e7ed      	b.n	a6d0 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    a6f4:	bc30      	pop	{r4, r5}
    a6f6:	4770      	bx	lr
    a6f8:	4770      	bx	lr

0000a6fa <usb_transfer_is_busy>:
{
    a6fa:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    a6fc:	f7f7 fa96 	bl	1c2c <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    a700:	b128      	cbz	r0, a70e <usb_transfer_is_busy+0x14>
    a702:	6843      	ldr	r3, [r0, #4]
    a704:	f113 0f10 	cmn.w	r3, #16
    a708:	d003      	beq.n	a712 <usb_transfer_is_busy+0x18>
	return false;
    a70a:	2000      	movs	r0, #0
}
    a70c:	bd08      	pop	{r3, pc}
	return false;
    a70e:	2000      	movs	r0, #0
    a710:	e7fc      	b.n	a70c <usb_transfer_is_busy+0x12>
		return true;
    a712:	2001      	movs	r0, #1
    a714:	e7fa      	b.n	a70c <usb_transfer_is_busy+0x12>

0000a716 <cdc_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    a716:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    a718:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    a71a:	1c4b      	adds	r3, r1, #1
    a71c:	b2db      	uxtb	r3, r3
    a71e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    a722:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    a724:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    a728:	4770      	bx	lr

0000a72a <cdc_acm_irq_callback_work_handler>:
{
    a72a:	b508      	push	{r3, lr}
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    a72c:	f850 3c08 	ldr.w	r3, [r0, #-8]
    a730:	f850 1c04 	ldr.w	r1, [r0, #-4]
    a734:	6f80      	ldr	r0, [r0, #120]	; 0x78
    a736:	4798      	blx	r3
}
    a738:	bd08      	pop	{r3, pc}

0000a73a <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a73a:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
    a73c:	2200      	movs	r2, #0
    a73e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
    a742:	4770      	bx	lr

0000a744 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a744:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    a746:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    a74a:	b122      	cbz	r2, a756 <cdc_acm_irq_tx_ready+0x12>
    a74c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    a750:	b91b      	cbnz	r3, a75a <cdc_acm_irq_tx_ready+0x16>
	return 0;
    a752:	2000      	movs	r0, #0
    a754:	4770      	bx	lr
    a756:	2000      	movs	r0, #0
    a758:	4770      	bx	lr
		return 1;
    a75a:	2001      	movs	r0, #1
}
    a75c:	4770      	bx	lr

0000a75e <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a75e:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
    a760:	2200      	movs	r2, #0
    a762:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
    a766:	4770      	bx	lr

0000a768 <cdc_acm_irq_rx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a768:	6903      	ldr	r3, [r0, #16]
	if (dev_data->rx_ready) {
    a76a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    a76e:	b90b      	cbnz	r3, a774 <cdc_acm_irq_rx_ready+0xc>
	return 0;
    a770:	2000      	movs	r0, #0
    a772:	4770      	bx	lr
		return 1;
    a774:	2001      	movs	r0, #1
}
    a776:	4770      	bx	lr

0000a778 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a778:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    a77a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    a77e:	b112      	cbz	r2, a786 <cdc_acm_irq_is_pending+0xe>
    a780:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    a784:	b93a      	cbnz	r2, a796 <cdc_acm_irq_is_pending+0x1e>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    a786:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    a78a:	b132      	cbz	r2, a79a <cdc_acm_irq_is_pending+0x22>
    a78c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    a790:	b92b      	cbnz	r3, a79e <cdc_acm_irq_is_pending+0x26>
		return 0;
    a792:	2000      	movs	r0, #0
    a794:	4770      	bx	lr
		return 1;
    a796:	2001      	movs	r0, #1
    a798:	4770      	bx	lr
		return 0;
    a79a:	2000      	movs	r0, #0
    a79c:	4770      	bx	lr
		return 1;
    a79e:	2001      	movs	r0, #1
}
    a7a0:	4770      	bx	lr

0000a7a2 <cdc_acm_irq_update>:
}
    a7a2:	2001      	movs	r0, #1
    a7a4:	4770      	bx	lr

0000a7a6 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a7a6:	6903      	ldr	r3, [r0, #16]
	dev_data->cb = cb;
    a7a8:	6019      	str	r1, [r3, #0]
	dev_data->cb_data = cb_data;
    a7aa:	605a      	str	r2, [r3, #4]
}
    a7ac:	4770      	bx	lr

0000a7ae <cdc_acm_baudrate_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a7ae:	6903      	ldr	r3, [r0, #16]
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    a7b0:	6759      	str	r1, [r3, #116]	; 0x74
}
    a7b2:	4770      	bx	lr

0000a7b4 <cdc_acm_line_ctrl_get>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a7b4:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    a7b6:	2902      	cmp	r1, #2
    a7b8:	d00a      	beq.n	a7d0 <cdc_acm_line_ctrl_get+0x1c>
    a7ba:	2904      	cmp	r1, #4
    a7bc:	d00f      	beq.n	a7de <cdc_acm_line_ctrl_get+0x2a>
    a7be:	2901      	cmp	r1, #1
    a7c0:	d002      	beq.n	a7c8 <cdc_acm_line_ctrl_get+0x14>
    a7c2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    a7c6:	4770      	bx	lr
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    a7c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    a7ca:	6013      	str	r3, [r2, #0]
		return 0;
    a7cc:	2000      	movs	r0, #0
    a7ce:	4770      	bx	lr
		*val = (dev_data->line_state &
    a7d0:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    a7d4:	f3c3 0340 	ubfx	r3, r3, #1, #1
		*val = (dev_data->line_state &
    a7d8:	6013      	str	r3, [r2, #0]
		return 0;
    a7da:	2000      	movs	r0, #0
    a7dc:	4770      	bx	lr
		*val = (dev_data->line_state &
    a7de:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    a7e2:	f003 0301 	and.w	r3, r3, #1
		*val = (dev_data->line_state &
    a7e6:	6013      	str	r3, [r2, #0]
		return 0;
    a7e8:	2000      	movs	r0, #0
    a7ea:	4770      	bx	lr

0000a7ec <cdc_acm_line_ctrl_set>:
{
    a7ec:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a7ee:	6904      	ldr	r4, [r0, #16]
	switch (ctrl) {
    a7f0:	2940      	cmp	r1, #64	; 0x40
    a7f2:	f000 8081 	beq.w	a8f8 <cdc_acm_line_ctrl_set+0x10c>
    a7f6:	d81b      	bhi.n	a830 <cdc_acm_line_ctrl_set+0x44>
    a7f8:	2920      	cmp	r1, #32
    a7fa:	f200 809f 	bhi.w	a93c <cdc_acm_line_ctrl_set+0x150>
    a7fe:	2900      	cmp	r1, #0
    a800:	f000 809f 	beq.w	a942 <cdc_acm_line_ctrl_set+0x156>
    a804:	1e4b      	subs	r3, r1, #1
    a806:	2b1f      	cmp	r3, #31
    a808:	f200 809e 	bhi.w	a948 <cdc_acm_line_ctrl_set+0x15c>
    a80c:	e8df f003 	tbb	[pc, r3]
    a810:	9c9c9c3d 	.word	0x9c9c9c3d
    a814:	429c9c9c 	.word	0x429c9c9c
    a818:	9c9c9c9c 	.word	0x9c9c9c9c
    a81c:	529c9c9c 	.word	0x529c9c9c
    a820:	9c9c9c9c 	.word	0x9c9c9c9c
    a824:	9c9c9c9c 	.word	0x9c9c9c9c
    a828:	9c9c9c9c 	.word	0x9c9c9c9c
    a82c:	639c9c9c 	.word	0x639c9c9c
    a830:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    a834:	d071      	beq.n	a91a <cdc_acm_line_ctrl_set+0x12e>
    a836:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    a83a:	d110      	bne.n	a85e <cdc_acm_line_ctrl_set+0x72>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    a83c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    a840:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
    a844:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    a848:	b11a      	cbz	r2, a852 <cdc_acm_line_ctrl_set+0x66>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    a84a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a84e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    a852:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    a856:	f7f7 fccb 	bl	21f0 <cdc_acm_send_notification>
		return 0;
    a85a:	2000      	movs	r0, #0
    a85c:	e019      	b.n	a892 <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
    a85e:	2980      	cmp	r1, #128	; 0x80
    a860:	d110      	bne.n	a884 <cdc_acm_line_ctrl_set+0x98>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    a862:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    a866:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    a86a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    a86e:	b11a      	cbz	r2, a878 <cdc_acm_line_ctrl_set+0x8c>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    a870:	f043 0310 	orr.w	r3, r3, #16
    a874:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    a878:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    a87c:	f7f7 fcb8 	bl	21f0 <cdc_acm_send_notification>
		return 0;
    a880:	2000      	movs	r0, #0
    a882:	e006      	b.n	a892 <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
    a884:	f06f 0012 	mvn.w	r0, #18
    a888:	e003      	b.n	a892 <cdc_acm_line_ctrl_set+0xa6>
		cdc_acm_baudrate_set(dev, val);
    a88a:	4611      	mov	r1, r2
    a88c:	f7ff ff8f 	bl	a7ae <cdc_acm_baudrate_set>
		return 0;
    a890:	2000      	movs	r0, #0
}
    a892:	bd10      	pop	{r4, pc}
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    a894:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    a898:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    a89c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    a8a0:	b11a      	cbz	r2, a8aa <cdc_acm_line_ctrl_set+0xbe>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    a8a2:	f043 0301 	orr.w	r3, r3, #1
    a8a6:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    a8aa:	2101      	movs	r1, #1
    a8ac:	f7f7 fca0 	bl	21f0 <cdc_acm_send_notification>
		return 0;
    a8b0:	2000      	movs	r0, #0
    a8b2:	e7ee      	b.n	a892 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    a8b4:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    a8b8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    a8bc:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    a8c0:	b11a      	cbz	r2, a8ca <cdc_acm_line_ctrl_set+0xde>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    a8c2:	f043 0302 	orr.w	r3, r3, #2
    a8c6:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    a8ca:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    a8ce:	f7f7 fc8f 	bl	21f0 <cdc_acm_send_notification>
		return 0;
    a8d2:	2000      	movs	r0, #0
    a8d4:	e7dd      	b.n	a892 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    a8d6:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    a8da:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    a8de:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    a8e2:	b11a      	cbz	r2, a8ec <cdc_acm_line_ctrl_set+0x100>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    a8e4:	f043 0304 	orr.w	r3, r3, #4
    a8e8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    a8ec:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    a8f0:	f7f7 fc7e 	bl	21f0 <cdc_acm_send_notification>
		return 0;
    a8f4:	2000      	movs	r0, #0
    a8f6:	e7cc      	b.n	a892 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    a8f8:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    a8fc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    a900:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    a904:	b11a      	cbz	r2, a90e <cdc_acm_line_ctrl_set+0x122>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    a906:	f043 0308 	orr.w	r3, r3, #8
    a90a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    a90e:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    a912:	f7f7 fc6d 	bl	21f0 <cdc_acm_send_notification>
		return 0;
    a916:	2000      	movs	r0, #0
    a918:	e7bb      	b.n	a892 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    a91a:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    a91e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    a922:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    a926:	b11a      	cbz	r2, a930 <cdc_acm_line_ctrl_set+0x144>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    a928:	f043 0320 	orr.w	r3, r3, #32
    a92c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    a930:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    a934:	f7f7 fc5c 	bl	21f0 <cdc_acm_send_notification>
		return 0;
    a938:	2000      	movs	r0, #0
    a93a:	e7aa      	b.n	a892 <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
    a93c:	f06f 0012 	mvn.w	r0, #18
    a940:	e7a7      	b.n	a892 <cdc_acm_line_ctrl_set+0xa6>
    a942:	f06f 0012 	mvn.w	r0, #18
    a946:	e7a4      	b.n	a892 <cdc_acm_line_ctrl_set+0xa6>
    a948:	f06f 0012 	mvn.w	r0, #18
    a94c:	e7a1      	b.n	a892 <cdc_acm_line_ctrl_set+0xa6>

0000a94e <cdc_acm_fifo_read>:
{
    a94e:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a950:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    a952:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    a954:	f7ff fd38 	bl	a3c8 <ring_buf_get>
    a958:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    a95a:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    a95c:	f7ff fc7c 	bl	a258 <ring_buf_is_empty>
    a960:	b110      	cbz	r0, a968 <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
    a962:	2300      	movs	r3, #0
    a964:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
    a968:	4620      	mov	r0, r4
    a96a:	bd38      	pop	{r3, r4, r5, pc}

0000a96c <cdc_acm_poll_in>:
{
    a96c:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    a96e:	2201      	movs	r2, #1
    a970:	f7ff ffed 	bl	a94e <cdc_acm_fifo_read>
	return ret == 1 ? 0 : -1;
    a974:	2801      	cmp	r0, #1
    a976:	d101      	bne.n	a97c <cdc_acm_poll_in+0x10>
    a978:	2000      	movs	r0, #0
}
    a97a:	bd08      	pop	{r3, pc}
	return ret == 1 ? 0 : -1;
    a97c:	f04f 30ff 	mov.w	r0, #4294967295
    a980:	e7fb      	b.n	a97a <cdc_acm_poll_in+0xe>

0000a982 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    a982:	2200      	movs	r2, #0
    a984:	6002      	str	r2, [r0, #0]
    a986:	6042      	str	r2, [r0, #4]
    a988:	6082      	str	r2, [r0, #8]
}
    a98a:	4770      	bx	lr

0000a98c <abort_function>:
{
    a98c:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    a98e:	2000      	movs	r0, #0
    a990:	f7f6 fb56 	bl	1040 <sys_reboot>

0000a994 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a994:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    a996:	f000 ff38 	bl	b80a <z_fatal_error>
}
    a99a:	bd08      	pop	{r3, pc}

0000a99c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    a99c:	b508      	push	{r3, lr}
    a99e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    a9a0:	6800      	ldr	r0, [r0, #0]
    a9a2:	f7ff fff7 	bl	a994 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    a9a6:	bd08      	pop	{r3, pc}

0000a9a8 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    a9a8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    a9aa:	2100      	movs	r1, #0
    a9ac:	2001      	movs	r0, #1
    a9ae:	f7ff fff1 	bl	a994 <z_arm_fatal_error>
}
    a9b2:	bd08      	pop	{r3, pc}

0000a9b4 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    a9b4:	b508      	push	{r3, lr}
	handler();
    a9b6:	f7f7 ff61 	bl	287c <z_SysNmiOnReset>
	z_arm_int_exit();
    a9ba:	f7f8 f82f 	bl	2a1c <z_arm_exc_exit>
}
    a9be:	bd08      	pop	{r3, pc}

0000a9c0 <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
    a9c0:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    a9c4:	f383 880b 	msr	PSPLIM, r3
}
    a9c8:	4770      	bx	lr

0000a9ca <memory_fault_recoverable>:
}
    a9ca:	2000      	movs	r0, #0
    a9cc:	4770      	bx	lr

0000a9ce <debug_monitor>:
	*recoverable = false;
    a9ce:	2300      	movs	r3, #0
    a9d0:	700b      	strb	r3, [r1, #0]
}
    a9d2:	4770      	bx	lr

0000a9d4 <fault_handle>:
{
    a9d4:	b508      	push	{r3, lr}
	*recoverable = false;
    a9d6:	2300      	movs	r3, #0
    a9d8:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    a9da:	1ecb      	subs	r3, r1, #3
    a9dc:	2b09      	cmp	r3, #9
    a9de:	d81a      	bhi.n	aa16 <fault_handle+0x42>
    a9e0:	e8df f003 	tbb	[pc, r3]
    a9e4:	110d0905 	.word	0x110d0905
    a9e8:	19191919 	.word	0x19191919
    a9ec:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    a9ee:	4611      	mov	r1, r2
    a9f0:	f7f8 f890 	bl	2b14 <hard_fault>
		break;
    a9f4:	e010      	b.n	aa18 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    a9f6:	2100      	movs	r1, #0
    a9f8:	f7f8 f81e 	bl	2a38 <mem_manage_fault>
		break;
    a9fc:	e00c      	b.n	aa18 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    a9fe:	2100      	movs	r1, #0
    aa00:	f7f8 f846 	bl	2a90 <bus_fault>
		break;
    aa04:	e008      	b.n	aa18 <fault_handle+0x44>
		reason = usage_fault(esf);
    aa06:	f7f8 f86d 	bl	2ae4 <usage_fault>
		break;
    aa0a:	e005      	b.n	aa18 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    aa0c:	4611      	mov	r1, r2
    aa0e:	f7ff ffde 	bl	a9ce <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    aa12:	2000      	movs	r0, #0
		break;
    aa14:	e000      	b.n	aa18 <fault_handle+0x44>
	*recoverable = false;
    aa16:	2000      	movs	r0, #0
}
    aa18:	bd08      	pop	{r3, pc}

0000aa1a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    aa1a:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    aa1e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    aa22:	d001      	beq.n	aa28 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
    aa24:	b2c0      	uxtb	r0, r0
    aa26:	4770      	bx	lr
	}

	return -EINVAL;
    aa28:	f06f 0015 	mvn.w	r0, #21
}
    aa2c:	4770      	bx	lr

0000aa2e <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
    aa2e:	6843      	ldr	r3, [r0, #4]
		&&
    aa30:	2b1f      	cmp	r3, #31
    aa32:	d90a      	bls.n	aa4a <mpu_partition_is_valid+0x1c>
		&&
    aa34:	f013 0f1f 	tst.w	r3, #31
    aa38:	d001      	beq.n	aa3e <mpu_partition_is_valid+0x10>
		&&
    aa3a:	2000      	movs	r0, #0
    aa3c:	4770      	bx	lr
		((part->start &
    aa3e:	6803      	ldr	r3, [r0, #0]
		&&
    aa40:	f013 0f1f 	tst.w	r3, #31
    aa44:	d003      	beq.n	aa4e <mpu_partition_is_valid+0x20>
    aa46:	2000      	movs	r0, #0
    aa48:	4770      	bx	lr
    aa4a:	2000      	movs	r0, #0
    aa4c:	4770      	bx	lr
    aa4e:	2001      	movs	r0, #1
}
    aa50:	4770      	bx	lr

0000aa52 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    aa52:	2807      	cmp	r0, #7
    aa54:	d805      	bhi.n	aa62 <region_allocate_and_init+0x10>
{
    aa56:	b510      	push	{r4, lr}
    aa58:	4604      	mov	r4, r0
	region_init(index, region_conf);
    aa5a:	f7f8 f9cf 	bl	2dfc <region_init>
	return index;
    aa5e:	4620      	mov	r0, r4
}
    aa60:	bd10      	pop	{r4, pc}
		return -EINVAL;
    aa62:	f06f 0015 	mvn.w	r0, #21
}
    aa66:	4770      	bx	lr

0000aa68 <mpu_configure_region>:
{
    aa68:	b530      	push	{r4, r5, lr}
    aa6a:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    aa6c:	680b      	ldr	r3, [r1, #0]
    aa6e:	9300      	str	r3, [sp, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    aa70:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    aa72:	890d      	ldrh	r5, [r1, #8]
    aa74:	f89d 2008 	ldrb.w	r2, [sp, #8]
    aa78:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    aa7c:	7a89      	ldrb	r1, [r1, #10]
    aa7e:	f361 1247 	bfi	r2, r1, #5, #3
    aa82:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    aa86:	f023 031f 	bic.w	r3, r3, #31
    aa8a:	4423      	add	r3, r4
    aa8c:	3b01      	subs	r3, #1
    aa8e:	f023 031f 	bic.w	r3, r3, #31
    aa92:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    aa94:	4669      	mov	r1, sp
    aa96:	f7ff ffdc 	bl	aa52 <region_allocate_and_init>
}
    aa9a:	b005      	add	sp, #20
    aa9c:	bd30      	pop	{r4, r5, pc}

0000aa9e <arm_core_mpu_configure_static_mpu_regions>:
{
    aa9e:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    aaa0:	f7f8 fa8a 	bl	2fb8 <mpu_configure_static_mpu_regions>
}
    aaa4:	bd08      	pop	{r3, pc}

0000aaa6 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    aaa6:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    aaa8:	f7f8 fa90 	bl	2fcc <mpu_mark_areas_for_dynamic_regions>
}
    aaac:	bd08      	pop	{r3, pc}

0000aaae <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    aaae:	4603      	mov	r3, r0
    aab0:	b1a2      	cbz	r2, aadc <strncpy+0x2e>
{
    aab2:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    aab4:	780c      	ldrb	r4, [r1, #0]
    aab6:	b12c      	cbz	r4, aac4 <strncpy+0x16>
		*d = *s;
    aab8:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    aabc:	3101      	adds	r1, #1
		d++;
		n--;
    aabe:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    aac0:	2a00      	cmp	r2, #0
    aac2:	d1f7      	bne.n	aab4 <strncpy+0x6>
	}

	while (n > 0) {
    aac4:	b122      	cbz	r2, aad0 <strncpy+0x22>
		*d = '\0';
    aac6:	2100      	movs	r1, #0
    aac8:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    aacc:	3a01      	subs	r2, #1
    aace:	e7f9      	b.n	aac4 <strncpy+0x16>
	}

	return dest;
}
    aad0:	bc10      	pop	{r4}
    aad2:	4770      	bx	lr
		*d = '\0';
    aad4:	2100      	movs	r1, #0
    aad6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    aada:	3a01      	subs	r2, #1
	while (n > 0) {
    aadc:	2a00      	cmp	r2, #0
    aade:	d1f9      	bne.n	aad4 <strncpy+0x26>
    aae0:	4770      	bx	lr

0000aae2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    aae2:	4603      	mov	r3, r0
	size_t n = 0;
    aae4:	2000      	movs	r0, #0

	while (*s != '\0') {
    aae6:	781a      	ldrb	r2, [r3, #0]
    aae8:	b112      	cbz	r2, aaf0 <strlen+0xe>
		s++;
    aaea:	3301      	adds	r3, #1
		n++;
    aaec:	3001      	adds	r0, #1
    aaee:	e7fa      	b.n	aae6 <strlen+0x4>
	}

	return n;
}
    aaf0:	4770      	bx	lr

0000aaf2 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    aaf2:	4603      	mov	r3, r0
	size_t n = 0;
    aaf4:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    aaf6:	781a      	ldrb	r2, [r3, #0]
    aaf8:	b122      	cbz	r2, ab04 <strnlen+0x12>
    aafa:	4288      	cmp	r0, r1
    aafc:	d202      	bcs.n	ab04 <strnlen+0x12>
		s++;
    aafe:	3301      	adds	r3, #1
		n++;
    ab00:	3001      	adds	r0, #1
    ab02:	e7f8      	b.n	aaf6 <strnlen+0x4>
	}

	return n;
}
    ab04:	4770      	bx	lr

0000ab06 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    ab06:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    ab08:	ea80 0301 	eor.w	r3, r0, r1
    ab0c:	f013 0f03 	tst.w	r3, #3
    ab10:	d001      	beq.n	ab16 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
    ab12:	4603      	mov	r3, r0
    ab14:	e017      	b.n	ab46 <memcpy+0x40>
    ab16:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    ab18:	f013 0f03 	tst.w	r3, #3
    ab1c:	d00b      	beq.n	ab36 <memcpy+0x30>
			if (n == 0) {
    ab1e:	b1a2      	cbz	r2, ab4a <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    ab20:	f811 4b01 	ldrb.w	r4, [r1], #1
    ab24:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    ab28:	3a01      	subs	r2, #1
    ab2a:	e7f5      	b.n	ab18 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
    ab2c:	f851 4b04 	ldr.w	r4, [r1], #4
    ab30:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    ab34:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    ab36:	2a03      	cmp	r2, #3
    ab38:	d8f8      	bhi.n	ab2c <memcpy+0x26>
    ab3a:	e004      	b.n	ab46 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    ab3c:	f811 4b01 	ldrb.w	r4, [r1], #1
    ab40:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    ab44:	3a01      	subs	r2, #1
	while (n > 0) {
    ab46:	2a00      	cmp	r2, #0
    ab48:	d1f8      	bne.n	ab3c <memcpy+0x36>
	}

	return d;
}
    ab4a:	bc10      	pop	{r4}
    ab4c:	4770      	bx	lr

0000ab4e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    ab4e:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    ab50:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
    ab52:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    ab54:	f013 0f03 	tst.w	r3, #3
    ab58:	d004      	beq.n	ab64 <memset+0x16>
		if (n == 0) {
    ab5a:	b19a      	cbz	r2, ab84 <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
    ab5c:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    ab60:	3a01      	subs	r2, #1
    ab62:	e7f7      	b.n	ab54 <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    ab64:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    ab66:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    ab6a:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    ab6e:	2a03      	cmp	r2, #3
    ab70:	d906      	bls.n	ab80 <memset+0x32>
		*(d_word++) = c_word;
    ab72:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    ab76:	3a04      	subs	r2, #4
    ab78:	e7f9      	b.n	ab6e <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    ab7a:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    ab7e:	3a01      	subs	r2, #1
	while (n > 0) {
    ab80:	2a00      	cmp	r2, #0
    ab82:	d1fa      	bne.n	ab7a <memset+0x2c>
	}

	return buf;
}
    ab84:	bc10      	pop	{r4}
    ab86:	4770      	bx	lr

0000ab88 <_stdout_hook_default>:
}
    ab88:	f04f 30ff 	mov.w	r0, #4294967295
    ab8c:	4770      	bx	lr

0000ab8e <in_endpoint_ctx>:
{
    ab8e:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    ab90:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    ab94:	f7f8 faaa 	bl	30ec <endpoint_ctx>
}
    ab98:	bd08      	pop	{r3, pc}

0000ab9a <out_endpoint_ctx>:
{
    ab9a:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    ab9c:	f7f8 faa6 	bl	30ec <endpoint_ctx>
}
    aba0:	bd08      	pop	{r3, pc}

0000aba2 <ep_ctx_reset>:
{
    aba2:	b510      	push	{r4, lr}
    aba4:	4604      	mov	r4, r0
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    aba6:	6903      	ldr	r3, [r0, #16]
    aba8:	6143      	str	r3, [r0, #20]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    abaa:	6183      	str	r3, [r0, #24]
	ep_ctx->buf.len  = 0U;
    abac:	2300      	movs	r3, #0
    abae:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    abb0:	7f83      	ldrb	r3, [r0, #30]
    abb2:	b933      	cbnz	r3, abc2 <ep_ctx_reset+0x20>
	ep_ctx->read_complete = true;
    abb4:	2301      	movs	r3, #1
    abb6:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    abb8:	2300      	movs	r3, #0
    abba:	7763      	strb	r3, [r4, #29]
	ep_ctx->write_in_progress = false;
    abbc:	77a3      	strb	r3, [r4, #30]
	ep_ctx->trans_zlp = false;
    abbe:	77e3      	strb	r3, [r4, #31]
}
    abc0:	bd10      	pop	{r4, pc}
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    abc2:	7a40      	ldrb	r0, [r0, #9]
    abc4:	f7fc fef4 	bl	79b0 <nrfx_usbd_ep_abort>
    abc8:	e7f4      	b.n	abb4 <ep_ctx_reset+0x12>

0000abca <hfxo_stop>:
{
    abca:	b510      	push	{r4, lr}
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    abcc:	f100 0320 	add.w	r3, r0, #32
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    abd0:	2200      	movs	r2, #0
    abd2:	e8d3 1fef 	ldaex	r1, [r3]
    abd6:	2901      	cmp	r1, #1
    abd8:	d103      	bne.n	abe2 <hfxo_stop+0x18>
    abda:	e8c3 2fe4 	stlex	r4, r2, [r3]
    abde:	2c00      	cmp	r4, #0
    abe0:	d1f7      	bne.n	abd2 <hfxo_stop+0x8>
    abe2:	d10d      	bne.n	ac00 <hfxo_stop+0x36>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    abe4:	69c4      	ldr	r4, [r0, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    abe6:	f100 010c 	add.w	r1, r0, #12
    abea:	4620      	mov	r0, r4
    abec:	f7fe fed9 	bl	99a2 <onoff_cancel>

	if (rv == -EALREADY) {
    abf0:	f110 0f78 	cmn.w	r0, #120	; 0x78
    abf4:	d000      	beq.n	abf8 <hfxo_stop+0x2e>
}
    abf6:	bd10      	pop	{r4, pc}
		rv = onoff_release(mgr);
    abf8:	4620      	mov	r0, r4
    abfa:	f7fe feac 	bl	9956 <onoff_release>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    abfe:	e7fa      	b.n	abf6 <hfxo_stop+0x2c>
	return 0;
    ac00:	2000      	movs	r0, #0
    ac02:	e7f8      	b.n	abf6 <hfxo_stop+0x2c>

0000ac04 <usbd_enable_endpoints>:
{
    ac04:	b510      	push	{r4, lr}
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    ac06:	2400      	movs	r4, #0
    ac08:	e003      	b.n	ac12 <usbd_enable_endpoints+0xe>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    ac0a:	7a40      	ldrb	r0, [r0, #9]
    ac0c:	f7fc fd34 	bl	7678 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    ac10:	3401      	adds	r4, #1
    ac12:	2c07      	cmp	r4, #7
    ac14:	dc06      	bgt.n	ac24 <usbd_enable_endpoints+0x20>
		ep_ctx = in_endpoint_ctx(i);
    ac16:	b2e0      	uxtb	r0, r4
    ac18:	f7ff ffb9 	bl	ab8e <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
    ac1c:	7a03      	ldrb	r3, [r0, #8]
    ac1e:	2b00      	cmp	r3, #0
    ac20:	d0f6      	beq.n	ac10 <usbd_enable_endpoints+0xc>
    ac22:	e7f2      	b.n	ac0a <usbd_enable_endpoints+0x6>
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
    ac24:	2088      	movs	r0, #136	; 0x88
    ac26:	f7ff ffb2 	bl	ab8e <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
    ac2a:	7a03      	ldrb	r3, [r0, #8]
    ac2c:	b90b      	cbnz	r3, ac32 <usbd_enable_endpoints+0x2e>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    ac2e:	2400      	movs	r4, #0
    ac30:	e007      	b.n	ac42 <usbd_enable_endpoints+0x3e>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    ac32:	7a40      	ldrb	r0, [r0, #9]
    ac34:	f7fc fd20 	bl	7678 <nrfx_usbd_ep_enable>
    ac38:	e7f9      	b.n	ac2e <usbd_enable_endpoints+0x2a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    ac3a:	7a40      	ldrb	r0, [r0, #9]
    ac3c:	f7fc fd1c 	bl	7678 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    ac40:	3401      	adds	r4, #1
    ac42:	2c07      	cmp	r4, #7
    ac44:	dc06      	bgt.n	ac54 <usbd_enable_endpoints+0x50>
		ep_ctx = out_endpoint_ctx(i);
    ac46:	b2e0      	uxtb	r0, r4
    ac48:	f7ff ffa7 	bl	ab9a <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
    ac4c:	7a03      	ldrb	r3, [r0, #8]
    ac4e:	2b00      	cmp	r3, #0
    ac50:	d0f6      	beq.n	ac40 <usbd_enable_endpoints+0x3c>
    ac52:	e7f2      	b.n	ac3a <usbd_enable_endpoints+0x36>
		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
    ac54:	2008      	movs	r0, #8
    ac56:	f7ff ffa0 	bl	ab9a <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
    ac5a:	7a03      	ldrb	r3, [r0, #8]
    ac5c:	b903      	cbnz	r3, ac60 <usbd_enable_endpoints+0x5c>
}
    ac5e:	bd10      	pop	{r4, pc}
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    ac60:	7a40      	ldrb	r0, [r0, #9]
    ac62:	f7fc fd09 	bl	7678 <nrfx_usbd_ep_enable>
}
    ac66:	e7fa      	b.n	ac5e <usbd_enable_endpoints+0x5a>

0000ac68 <hfxo_start>:
{
    ac68:	b508      	push	{r3, lr}
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    ac6a:	f100 0320 	add.w	r3, r0, #32
    ac6e:	2201      	movs	r2, #1
    ac70:	e8d3 1fef 	ldaex	r1, [r3]
    ac74:	2900      	cmp	r1, #0
    ac76:	d104      	bne.n	ac82 <hfxo_start+0x1a>
    ac78:	e8c3 2fec 	stlex	ip, r2, [r3]
    ac7c:	f1bc 0f00 	cmp.w	ip, #0
    ac80:	d1f6      	bne.n	ac70 <hfxo_start+0x8>
    ac82:	d10a      	bne.n	ac9a <hfxo_start+0x32>
	*notify = (struct sys_notify){
    ac84:	2300      	movs	r3, #0
    ac86:	6103      	str	r3, [r0, #16]
    ac88:	6183      	str	r3, [r0, #24]
    ac8a:	2301      	movs	r3, #1
    ac8c:	6143      	str	r3, [r0, #20]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    ac8e:	f100 010c 	add.w	r1, r0, #12
    ac92:	69c0      	ldr	r0, [r0, #28]
    ac94:	f7fe fe03 	bl	989e <onoff_request>
}
    ac98:	bd08      	pop	{r3, pc}
	return 0;
    ac9a:	2000      	movs	r0, #0
    ac9c:	e7fc      	b.n	ac98 <hfxo_start+0x30>

0000ac9e <usb_dc_power_event_handler>:
	switch (event) {
    ac9e:	2801      	cmp	r0, #1
    aca0:	d008      	beq.n	acb4 <usb_dc_power_event_handler+0x16>
    aca2:	2802      	cmp	r0, #2
    aca4:	d002      	beq.n	acac <usb_dc_power_event_handler+0xe>
    aca6:	b100      	cbz	r0, acaa <usb_dc_power_event_handler+0xc>
    aca8:	4770      	bx	lr
    acaa:	2001      	movs	r0, #1
{
    acac:	b508      	push	{r3, lr}
	submit_dc_power_event(new_state);
    acae:	f7f8 fab1 	bl	3214 <submit_dc_power_event>
}
    acb2:	bd08      	pop	{r3, pc}
		new_state = USBD_DETACHED;
    acb4:	2000      	movs	r0, #0
    acb6:	e7f9      	b.n	acac <usb_dc_power_event_handler+0xe>

0000acb8 <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    acb8:	7801      	ldrb	r1, [r0, #0]
    acba:	f001 020f 	and.w	r2, r1, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    acbe:	7903      	ldrb	r3, [r0, #4]
    acc0:	b903      	cbnz	r3, acc4 <usb_dc_ep_check_cap+0xc>
    acc2:	b952      	cbnz	r2, acda <usb_dc_ep_check_cap+0x22>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    acc4:	2a08      	cmp	r2, #8
    acc6:	d80b      	bhi.n	ace0 <usb_dc_ep_check_cap+0x28>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    acc8:	2b01      	cmp	r3, #1
    acca:	d001      	beq.n	acd0 <usb_dc_ep_check_cap+0x18>
	return 0;
    accc:	2000      	movs	r0, #0
    acce:	4770      	bx	lr
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    acd0:	f011 0f08 	tst.w	r1, #8
    acd4:	d007      	beq.n	ace6 <usb_dc_ep_check_cap+0x2e>
	return 0;
    acd6:	2000      	movs	r0, #0
    acd8:	4770      	bx	lr
		return -1;
    acda:	f04f 30ff 	mov.w	r0, #4294967295
    acde:	4770      	bx	lr
		return -1;
    ace0:	f04f 30ff 	mov.w	r0, #4294967295
    ace4:	4770      	bx	lr
		return -1;
    ace6:	f04f 30ff 	mov.w	r0, #4294967295
}
    acea:	4770      	bx	lr

0000acec <usb_dc_ep_read>:
{
    acec:	b570      	push	{r4, r5, r6, lr}
    acee:	4605      	mov	r5, r0
    acf0:	460c      	mov	r4, r1
    acf2:	4616      	mov	r6, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    acf4:	f7f9 f8dc 	bl	3eb0 <usb_dc_ep_read_wait>
	if (ret) {
    acf8:	b918      	cbnz	r0, ad02 <usb_dc_ep_read+0x16>
	if (!data && !max_data_len) {
    acfa:	b11c      	cbz	r4, ad04 <usb_dc_ep_read+0x18>
	ret = usb_dc_ep_read_continue(ep);
    acfc:	4628      	mov	r0, r5
    acfe:	f7f9 f935 	bl	3f6c <usb_dc_ep_read_continue>
}
    ad02:	bd70      	pop	{r4, r5, r6, pc}
	if (!data && !max_data_len) {
    ad04:	2e00      	cmp	r6, #0
    ad06:	d1f9      	bne.n	acfc <usb_dc_ep_read+0x10>
    ad08:	e7fb      	b.n	ad02 <usb_dc_ep_read+0x16>

0000ad0a <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    ad0a:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    ad0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    ad10:	0089      	lsls	r1, r1, #2
    ad12:	3170      	adds	r1, #112	; 0x70
}
    ad14:	4408      	add	r0, r1
    ad16:	4770      	bx	lr

0000ad18 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    ad18:	6840      	ldr	r0, [r0, #4]
}
    ad1a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    ad1e:	4770      	bx	lr

0000ad20 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    ad20:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    ad22:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    ad26:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    ad2a:	4770      	bx	lr

0000ad2c <get_status>:
{
    ad2c:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    ad2e:	b2c9      	uxtb	r1, r1
    ad30:	f7ff ffeb 	bl	ad0a <get_sub_data>
    ad34:	6880      	ldr	r0, [r0, #8]
}
    ad36:	f000 0007 	and.w	r0, r0, #7
    ad3a:	bd08      	pop	{r3, pc}

0000ad3c <set_off_state>:
	__asm__ volatile(
    ad3c:	f04f 0320 	mov.w	r3, #32
    ad40:	f3ef 8211 	mrs	r2, BASEPRI
    ad44:	f383 8812 	msr	BASEPRI_MAX, r3
    ad48:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    ad4c:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    ad4e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    ad52:	d001      	beq.n	ad58 <set_off_state+0x1c>
    ad54:	428b      	cmp	r3, r1
    ad56:	d107      	bne.n	ad68 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    ad58:	2301      	movs	r3, #1
    ad5a:	6003      	str	r3, [r0, #0]
	int err = 0;
    ad5c:	2000      	movs	r0, #0
	__asm__ volatile(
    ad5e:	f382 8811 	msr	BASEPRI, r2
    ad62:	f3bf 8f6f 	isb	sy
}
    ad66:	4770      	bx	lr
		err = -EPERM;
    ad68:	f04f 30ff 	mov.w	r0, #4294967295
    ad6c:	e7f7      	b.n	ad5e <set_off_state+0x22>

0000ad6e <set_starting_state>:
{
    ad6e:	b410      	push	{r4}
	__asm__ volatile(
    ad70:	f04f 0320 	mov.w	r3, #32
    ad74:	f3ef 8211 	mrs	r2, BASEPRI
    ad78:	f383 8812 	msr	BASEPRI_MAX, r3
    ad7c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    ad80:	6803      	ldr	r3, [r0, #0]
    ad82:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    ad86:	f003 0307 	and.w	r3, r3, #7
    ad8a:	2b01      	cmp	r3, #1
    ad8c:	d009      	beq.n	ada2 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
    ad8e:	428c      	cmp	r4, r1
    ad90:	d00a      	beq.n	ada8 <set_starting_state+0x3a>
		err = -EPERM;
    ad92:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    ad96:	f382 8811 	msr	BASEPRI, r2
    ad9a:	f3bf 8f6f 	isb	sy
}
    ad9e:	bc10      	pop	{r4}
    ada0:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    ada2:	6001      	str	r1, [r0, #0]
	int err = 0;
    ada4:	2000      	movs	r0, #0
    ada6:	e7f6      	b.n	ad96 <set_starting_state+0x28>
		err = -EALREADY;
    ada8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    adac:	e7f3      	b.n	ad96 <set_starting_state+0x28>

0000adae <set_on_state>:
	__asm__ volatile(
    adae:	f04f 0320 	mov.w	r3, #32
    adb2:	f3ef 8211 	mrs	r2, BASEPRI
    adb6:	f383 8812 	msr	BASEPRI_MAX, r3
    adba:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    adbe:	6803      	ldr	r3, [r0, #0]
    adc0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    adc4:	f043 0302 	orr.w	r3, r3, #2
    adc8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    adca:	f382 8811 	msr	BASEPRI, r2
    adce:	f3bf 8f6f 	isb	sy
}
    add2:	4770      	bx	lr

0000add4 <clkstarted_handle>:
{
    add4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    add6:	4606      	mov	r6, r0
    add8:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    adda:	f7ff ff96 	bl	ad0a <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    adde:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    ade0:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    ade2:	2300      	movs	r3, #0
    ade4:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    ade8:	f7ff ffe1 	bl	adae <set_on_state>
	if (callback) {
    adec:	b11d      	cbz	r5, adf6 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    adee:	463a      	mov	r2, r7
    adf0:	4621      	mov	r1, r4
    adf2:	4630      	mov	r0, r6
    adf4:	47a8      	blx	r5
}
    adf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000adf8 <stop>:
{
    adf8:	b570      	push	{r4, r5, r6, lr}
    adfa:	4606      	mov	r6, r0
    adfc:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    adfe:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    ae00:	4621      	mov	r1, r4
    ae02:	f7ff ff82 	bl	ad0a <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    ae06:	4629      	mov	r1, r5
    ae08:	3008      	adds	r0, #8
    ae0a:	f7ff ff97 	bl	ad3c <set_off_state>
	if (err < 0) {
    ae0e:	2800      	cmp	r0, #0
    ae10:	db06      	blt.n	ae20 <stop+0x28>
	get_sub_config(dev, type)->stop();
    ae12:	4621      	mov	r1, r4
    ae14:	4630      	mov	r0, r6
    ae16:	f7ff ff7f 	bl	ad18 <get_sub_config>
    ae1a:	6843      	ldr	r3, [r0, #4]
    ae1c:	4798      	blx	r3
	return 0;
    ae1e:	2000      	movs	r0, #0
}
    ae20:	bd70      	pop	{r4, r5, r6, pc}

0000ae22 <api_stop>:
{
    ae22:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    ae24:	2280      	movs	r2, #128	; 0x80
    ae26:	f7ff ffe7 	bl	adf8 <stop>
}
    ae2a:	bd08      	pop	{r3, pc}

0000ae2c <async_start>:
{
    ae2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae30:	4606      	mov	r6, r0
    ae32:	4690      	mov	r8, r2
    ae34:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    ae36:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    ae38:	4629      	mov	r1, r5
    ae3a:	f7ff ff66 	bl	ad0a <get_sub_data>
    ae3e:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    ae40:	9906      	ldr	r1, [sp, #24]
    ae42:	3008      	adds	r0, #8
    ae44:	f7ff ff93 	bl	ad6e <set_starting_state>
	if (err < 0) {
    ae48:	2800      	cmp	r0, #0
    ae4a:	db09      	blt.n	ae60 <async_start+0x34>
	subdata->cb = cb;
    ae4c:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    ae50:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    ae52:	4629      	mov	r1, r5
    ae54:	4630      	mov	r0, r6
    ae56:	f7ff ff5f 	bl	ad18 <get_sub_config>
    ae5a:	6803      	ldr	r3, [r0, #0]
    ae5c:	4798      	blx	r3
	return 0;
    ae5e:	2000      	movs	r0, #0
}
    ae60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ae64 <api_start>:
{
    ae64:	b510      	push	{r4, lr}
    ae66:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    ae68:	2480      	movs	r4, #128	; 0x80
    ae6a:	9400      	str	r4, [sp, #0]
    ae6c:	f7ff ffde 	bl	ae2c <async_start>
}
    ae70:	b002      	add	sp, #8
    ae72:	bd10      	pop	{r4, pc}

0000ae74 <onoff_started_callback>:
{
    ae74:	b510      	push	{r4, lr}
    ae76:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    ae78:	b2c9      	uxtb	r1, r1
    ae7a:	f7ff ff51 	bl	ad20 <get_onoff_manager>
	notify(mgr, 0);
    ae7e:	2100      	movs	r1, #0
    ae80:	47a0      	blx	r4
}
    ae82:	bd10      	pop	{r4, pc}

0000ae84 <hfclk_start>:
{
    ae84:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    ae86:	2001      	movs	r0, #1
    ae88:	f7fa fa22 	bl	52d0 <nrfx_clock_start>
}
    ae8c:	bd08      	pop	{r3, pc}

0000ae8e <hfclkaudio_start>:
{
    ae8e:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    ae90:	2003      	movs	r0, #3
    ae92:	f7fa fa1d 	bl	52d0 <nrfx_clock_start>
}
    ae96:	bd08      	pop	{r3, pc}

0000ae98 <hfclk192m_start>:
{
    ae98:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    ae9a:	2002      	movs	r0, #2
    ae9c:	f7fa fa18 	bl	52d0 <nrfx_clock_start>
}
    aea0:	bd08      	pop	{r3, pc}

0000aea2 <lfclk_start>:
{
    aea2:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    aea4:	2000      	movs	r0, #0
    aea6:	f7fa fa13 	bl	52d0 <nrfx_clock_start>
}
    aeaa:	bd08      	pop	{r3, pc}

0000aeac <hfclk_stop>:
{
    aeac:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    aeae:	2001      	movs	r0, #1
    aeb0:	f7fa fa68 	bl	5384 <nrfx_clock_stop>
}
    aeb4:	bd08      	pop	{r3, pc}

0000aeb6 <hfclkaudio_stop>:
{
    aeb6:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    aeb8:	2003      	movs	r0, #3
    aeba:	f7fa fa63 	bl	5384 <nrfx_clock_stop>
}
    aebe:	bd08      	pop	{r3, pc}

0000aec0 <hfclk192m_stop>:
{
    aec0:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    aec2:	2002      	movs	r0, #2
    aec4:	f7fa fa5e 	bl	5384 <nrfx_clock_stop>
}
    aec8:	bd08      	pop	{r3, pc}

0000aeca <lfclk_stop>:
{
    aeca:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    aecc:	2000      	movs	r0, #0
    aece:	f7fa fa59 	bl	5384 <nrfx_clock_stop>
}
    aed2:	bd08      	pop	{r3, pc}

0000aed4 <blocking_start_callback>:
{
    aed4:	b508      	push	{r3, lr}
    aed6:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    aed8:	f7fd fa8c 	bl	83f4 <z_impl_k_sem_give>
}
    aedc:	bd08      	pop	{r3, pc}

0000aede <get_pull>:
	if (flags & GPIO_PULL_UP) {
    aede:	f010 0f10 	tst.w	r0, #16
    aee2:	d104      	bne.n	aeee <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    aee4:	f010 0f20 	tst.w	r0, #32
    aee8:	d103      	bne.n	aef2 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    aeea:	2000      	movs	r0, #0
    aeec:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    aeee:	2003      	movs	r0, #3
    aef0:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    aef2:	2001      	movs	r0, #1
}
    aef4:	4770      	bx	lr

0000aef6 <gpio_nrfx_port_get_raw>:
	return port->config;
    aef6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    aef8:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    aefa:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    aefc:	600b      	str	r3, [r1, #0]
}
    aefe:	2000      	movs	r0, #0
    af00:	4770      	bx	lr

0000af02 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    af02:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    af04:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    af06:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    af08:	4042      	eors	r2, r0
    af0a:	400a      	ands	r2, r1
    af0c:	4042      	eors	r2, r0
    p_reg->OUT = value;
    af0e:	605a      	str	r2, [r3, #4]
}
    af10:	2000      	movs	r0, #0
    af12:	4770      	bx	lr

0000af14 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    af14:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    af16:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    af18:	6099      	str	r1, [r3, #8]
}
    af1a:	2000      	movs	r0, #0
    af1c:	4770      	bx	lr

0000af1e <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    af1e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    af20:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    af22:	60d9      	str	r1, [r3, #12]
}
    af24:	2000      	movs	r0, #0
    af26:	4770      	bx	lr

0000af28 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    af28:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    af2a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    af2c:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    af2e:	404b      	eors	r3, r1
    p_reg->OUT = value;
    af30:	6053      	str	r3, [r2, #4]
}
    af32:	2000      	movs	r0, #0
    af34:	4770      	bx	lr

0000af36 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    af36:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    af3a:	d007      	beq.n	af4c <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    af3c:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
    af40:	d00d      	beq.n	af5e <get_trigger+0x28>
    af42:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    af46:	d008      	beq.n	af5a <get_trigger+0x24>
    af48:	2001      	movs	r0, #1
}
    af4a:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    af4c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    af50:	d001      	beq.n	af56 <get_trigger+0x20>
    af52:	2005      	movs	r0, #5
    af54:	4770      	bx	lr
    af56:	2004      	movs	r0, #4
    af58:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    af5a:	2002      	movs	r0, #2
    af5c:	4770      	bx	lr
    af5e:	2003      	movs	r0, #3
    af60:	4770      	bx	lr

0000af62 <gpio_nrfx_manage_callback>:
{
    af62:	b470      	push	{r4, r5, r6}
	return port->data;
    af64:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    af66:	1d05      	adds	r5, r0, #4
	return list->head;
    af68:	6843      	ldr	r3, [r0, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    af6a:	b1db      	cbz	r3, afa4 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    af6c:	460e      	mov	r6, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    af6e:	2400      	movs	r4, #0
    af70:	e00a      	b.n	af88 <gpio_nrfx_manage_callback+0x26>
	return node->next;
    af72:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    af74:	6043      	str	r3, [r0, #4]
	return list->tail;
    af76:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    af78:	42a1      	cmp	r1, r4
    af7a:	d10f      	bne.n	af9c <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    af7c:	606b      	str	r3, [r5, #4]
}
    af7e:	e00d      	b.n	af9c <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    af80:	606c      	str	r4, [r5, #4]
}
    af82:	e00b      	b.n	af9c <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    af84:	461c      	mov	r4, r3
    af86:	681b      	ldr	r3, [r3, #0]
    af88:	b15b      	cbz	r3, afa2 <gpio_nrfx_manage_callback+0x40>
    af8a:	429e      	cmp	r6, r3
    af8c:	d1fa      	bne.n	af84 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
    af8e:	2c00      	cmp	r4, #0
    af90:	d0ef      	beq.n	af72 <gpio_nrfx_manage_callback+0x10>
	return node->next;
    af92:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    af94:	6023      	str	r3, [r4, #0]
	return list->tail;
    af96:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    af98:	4299      	cmp	r1, r3
    af9a:	d0f1      	beq.n	af80 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
    af9c:	2300      	movs	r3, #0
    af9e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    afa0:	e000      	b.n	afa4 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
    afa2:	b152      	cbz	r2, afba <gpio_nrfx_manage_callback+0x58>
				return -EINVAL;
			}
		}
	}

	if (set) {
    afa4:	b162      	cbz	r2, afc0 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
    afa6:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
    afa8:	600b      	str	r3, [r1, #0]
	list->head = node;
    afaa:	6041      	str	r1, [r0, #4]
	return list->tail;
    afac:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    afae:	b10b      	cbz	r3, afb4 <gpio_nrfx_manage_callback+0x52>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    afb0:	2000      	movs	r0, #0
    afb2:	e006      	b.n	afc2 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    afb4:	6069      	str	r1, [r5, #4]
    afb6:	2000      	movs	r0, #0
}
    afb8:	e003      	b.n	afc2 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
    afba:	f06f 0015 	mvn.w	r0, #21
    afbe:	e000      	b.n	afc2 <gpio_nrfx_manage_callback+0x60>
	return 0;
    afc0:	2000      	movs	r0, #0
}
    afc2:	bc70      	pop	{r4, r5, r6}
    afc4:	4770      	bx	lr

0000afc6 <nrfx_gpio_handler>:
{
    afc6:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
    afc8:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    afcc:	0940      	lsrs	r0, r0, #5
    afce:	f7f9 fa97 	bl	4500 <get_dev>
	if (port == NULL) {
    afd2:	b1d8      	cbz	r0, b00c <nrfx_gpio_handler+0x46>
    afd4:	4606      	mov	r6, r0
	return port->data;
    afd6:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    afd8:	2501      	movs	r5, #1
    afda:	40a5      	lsls	r5, r4
	return list->head;
    afdc:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    afde:	b119      	cbz	r1, afe8 <nrfx_gpio_handler+0x22>
    afe0:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    afe2:	b149      	cbz	r1, aff8 <nrfx_gpio_handler+0x32>
	return node->next;
    afe4:	680c      	ldr	r4, [r1, #0]
    afe6:	e007      	b.n	aff8 <nrfx_gpio_handler+0x32>
    afe8:	460c      	mov	r4, r1
    afea:	e005      	b.n	aff8 <nrfx_gpio_handler+0x32>
    afec:	b164      	cbz	r4, b008 <nrfx_gpio_handler+0x42>
    afee:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    aff0:	b104      	cbz	r4, aff4 <nrfx_gpio_handler+0x2e>
	return node->next;
    aff2:	6823      	ldr	r3, [r4, #0]
    aff4:	4621      	mov	r1, r4
    aff6:	461c      	mov	r4, r3
    aff8:	b141      	cbz	r1, b00c <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
    affa:	688a      	ldr	r2, [r1, #8]
    affc:	402a      	ands	r2, r5
    affe:	d0f5      	beq.n	afec <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    b000:	684b      	ldr	r3, [r1, #4]
    b002:	4630      	mov	r0, r6
    b004:	4798      	blx	r3
    b006:	e7f1      	b.n	afec <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    b008:	4623      	mov	r3, r4
    b00a:	e7f3      	b.n	aff4 <nrfx_gpio_handler+0x2e>
}
    b00c:	bd70      	pop	{r4, r5, r6, pc}

0000b00e <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    b00e:	b510      	push	{r4, lr}
    b010:	b082      	sub	sp, #8
    b012:	460c      	mov	r4, r1
}

NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
    b014:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    b018:	f8d2 1208 	ldr.w	r1, [r2, #520]	; 0x208
    b01c:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
    b020:	0a1b      	lsrs	r3, r3, #8
    b022:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    b026:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
    b02a:	f8d2 1208 	ldr.w	r1, [r2, #520]	; 0x208
    b02e:	0209      	lsls	r1, r1, #8
    b030:	4011      	ands	r1, r2
    b032:	430b      	orrs	r3, r1
    b034:	f8d2 1208 	ldr.w	r1, [r2, #520]	; 0x208
    b038:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    b03c:	9300      	str	r3, [sp, #0]
    b03e:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
    b042:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
    b046:	0a1b      	lsrs	r3, r3, #8
    b048:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    b04c:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
    b050:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
    b054:	0209      	lsls	r1, r1, #8
    b056:	4011      	ands	r1, r2
    b058:	430b      	orrs	r3, r1
    b05a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    b05e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    b062:	9301      	str	r3, [sp, #4]

	if (length > sizeof(dev_id.id)) {
    b064:	2c08      	cmp	r4, #8
    b066:	d900      	bls.n	b06a <z_impl_hwinfo_get_device_id+0x5c>
		length = sizeof(dev_id.id);
    b068:	2408      	movs	r4, #8
	}

	memcpy(buffer, dev_id.id, length);
    b06a:	4622      	mov	r2, r4
    b06c:	4669      	mov	r1, sp
    b06e:	f7ff fd4a 	bl	ab06 <memcpy>

	return length;
}
    b072:	4620      	mov	r0, r4
    b074:	b002      	add	sp, #8
    b076:	bd10      	pop	{r4, pc}

0000b078 <endtx_isr>:
	return dev->config;
    b078:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b07a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    b07c:	f04f 0120 	mov.w	r1, #32
    b080:	f3ef 8211 	mrs	r2, BASEPRI
    b084:	f381 8812 	msr	BASEPRI_MAX, r1
    b088:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b08c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    b090:	b131      	cbz	r1, b0a0 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b092:	2100      	movs	r1, #0
    b094:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    b098:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b09c:	2101      	movs	r1, #1
    b09e:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    b0a0:	f382 8811 	msr	BASEPRI, r2
    b0a4:	f3bf 8f6f 	isb	sy
}
    b0a8:	4770      	bx	lr

0000b0aa <uarte_nrfx_isr_int>:
{
    b0aa:	b538      	push	{r3, r4, r5, lr}
    b0ac:	4604      	mov	r4, r0
	return dev->config;
    b0ae:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b0b0:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    b0b2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    b0b6:	f413 7f80 	tst.w	r3, #256	; 0x100
    b0ba:	d003      	beq.n	b0c4 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b0bc:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    b0c0:	2b00      	cmp	r3, #0
    b0c2:	d139      	bne.n	b138 <uarte_nrfx_isr_int+0x8e>
	return dev->config;
    b0c4:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b0c6:	685b      	ldr	r3, [r3, #4]
    b0c8:	f013 0f10 	tst.w	r3, #16
    b0cc:	d01a      	beq.n	b104 <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
    b0ce:	f04f 0320 	mov.w	r3, #32
    b0d2:	f3ef 8211 	mrs	r2, BASEPRI
    b0d6:	f383 8812 	msr	BASEPRI_MAX, r3
    b0da:	f3bf 8f6f 	isb	sy
    b0de:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    b0e2:	b113      	cbz	r3, b0ea <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    b0e4:	2300      	movs	r3, #0
    b0e6:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
    b0ea:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    b0ec:	68db      	ldr	r3, [r3, #12]
    b0ee:	b10b      	cbz	r3, b0f4 <uarte_nrfx_isr_int+0x4a>
    b0f0:	691b      	ldr	r3, [r3, #16]
    b0f2:	b91b      	cbnz	r3, b0fc <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
    b0f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    b0f8:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
    b0fc:	f382 8811 	msr	BASEPRI, r2
    b100:	f3bf 8f6f 	isb	sy
	return dev->data;
    b104:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
    b106:	68da      	ldr	r2, [r3, #12]
    b108:	b1aa      	cbz	r2, b136 <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b10a:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    b10e:	b121      	cbz	r1, b11a <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
    b110:	2100      	movs	r1, #0
    b112:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    b114:	68da      	ldr	r2, [r3, #12]
    b116:	7b92      	ldrb	r2, [r2, #14]
    b118:	b98a      	cbnz	r2, b13e <uarte_nrfx_isr_int+0x94>
    b11a:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    b11e:	b122      	cbz	r2, b12a <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b120:	2200      	movs	r2, #0
    b122:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
    b126:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
    b12a:	68da      	ldr	r2, [r3, #12]
    b12c:	6813      	ldr	r3, [r2, #0]
    b12e:	b113      	cbz	r3, b136 <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    b130:	6851      	ldr	r1, [r2, #4]
    b132:	4620      	mov	r0, r4
    b134:	4798      	blx	r3
}
    b136:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    b138:	f7ff ff9e 	bl	b078 <endtx_isr>
    b13c:	e7c2      	b.n	b0c4 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
    b13e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    b142:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    b146:	68db      	ldr	r3, [r3, #12]
    b148:	7399      	strb	r1, [r3, #14]
			return;
    b14a:	e7f4      	b.n	b136 <uarte_nrfx_isr_int+0x8c>

0000b14c <uarte_nrfx_configure>:
{
    b14c:	b530      	push	{r4, r5, lr}
    b14e:	b083      	sub	sp, #12
    b150:	4605      	mov	r5, r0
    b152:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
    b154:	794b      	ldrb	r3, [r1, #5]
    b156:	2b01      	cmp	r3, #1
    b158:	d006      	beq.n	b168 <uarte_nrfx_configure+0x1c>
    b15a:	2b03      	cmp	r3, #3
    b15c:	d011      	beq.n	b182 <uarte_nrfx_configure+0x36>
    b15e:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
    b162:	4610      	mov	r0, r2
    b164:	b003      	add	sp, #12
    b166:	bd30      	pop	{r4, r5, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    b168:	2300      	movs	r3, #0
    b16a:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    b16e:	79a3      	ldrb	r3, [r4, #6]
    b170:	2b03      	cmp	r3, #3
    b172:	d147      	bne.n	b204 <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
    b174:	79e3      	ldrb	r3, [r4, #7]
    b176:	b143      	cbz	r3, b18a <uarte_nrfx_configure+0x3e>
    b178:	2b01      	cmp	r3, #1
    b17a:	d015      	beq.n	b1a8 <uarte_nrfx_configure+0x5c>
    b17c:	f06f 0285 	mvn.w	r2, #133	; 0x85
    b180:	e7ef      	b.n	b162 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    b182:	2310      	movs	r3, #16
    b184:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    b188:	e7f1      	b.n	b16e <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    b18a:	2300      	movs	r3, #0
    b18c:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    b190:	2300      	movs	r3, #0
    b192:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
    b196:	7923      	ldrb	r3, [r4, #4]
    b198:	2b01      	cmp	r3, #1
    b19a:	d02b      	beq.n	b1f4 <uarte_nrfx_configure+0xa8>
    b19c:	2b02      	cmp	r3, #2
    b19e:	d025      	beq.n	b1ec <uarte_nrfx_configure+0xa0>
    b1a0:	b133      	cbz	r3, b1b0 <uarte_nrfx_configure+0x64>
    b1a2:	f06f 0285 	mvn.w	r2, #133	; 0x85
    b1a6:	e7dc      	b.n	b162 <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    b1a8:	2301      	movs	r3, #1
    b1aa:	f88d 3000 	strb.w	r3, [sp]
		break;
    b1ae:	e7ef      	b.n	b190 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    b1b0:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    b1b4:	6821      	ldr	r1, [r4, #0]
    b1b6:	4628      	mov	r0, r5
    b1b8:	f7f9 fbbc 	bl	4934 <baudrate_set>
    b1bc:	4602      	mov	r2, r0
    b1be:	bb20      	cbnz	r0, b20a <uarte_nrfx_configure+0xbe>
	return dev->config;
    b1c0:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
    b1c2:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    b1c4:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
    b1c8:	f89d 0002 	ldrb.w	r0, [sp, #2]
    b1cc:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
    b1ce:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b1d2:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
    b1d4:	f89d 0000 	ldrb.w	r0, [sp]
    b1d8:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    b1da:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	return dev->data;
    b1de:	692b      	ldr	r3, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
    b1e0:	3304      	adds	r3, #4
    b1e2:	e894 0003 	ldmia.w	r4, {r0, r1}
    b1e6:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    b1ea:	e7ba      	b.n	b162 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    b1ec:	230e      	movs	r3, #14
    b1ee:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
    b1f2:	e7df      	b.n	b1b4 <uarte_nrfx_configure+0x68>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    b1f4:	230e      	movs	r3, #14
    b1f6:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    b1fa:	f44f 7380 	mov.w	r3, #256	; 0x100
    b1fe:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
    b202:	e7d7      	b.n	b1b4 <uarte_nrfx_configure+0x68>
		return -ENOTSUP;
    b204:	f06f 0285 	mvn.w	r2, #133	; 0x85
    b208:	e7ab      	b.n	b162 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
    b20a:	f06f 0285 	mvn.w	r2, #133	; 0x85
    b20e:	e7a8      	b.n	b162 <uarte_nrfx_configure+0x16>

0000b210 <uarte_nrfx_config_get>:
{
    b210:	460b      	mov	r3, r1
	return dev->data;
    b212:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
    b214:	6891      	ldr	r1, [r2, #8]
    b216:	6850      	ldr	r0, [r2, #4]
    b218:	e883 0003 	stmia.w	r3, {r0, r1}
}
    b21c:	2000      	movs	r0, #0
    b21e:	4770      	bx	lr

0000b220 <uarte_nrfx_err_check>:
	return dev->config;
    b220:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b222:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    b224:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    b228:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    b22c:	4770      	bx	lr

0000b22e <is_tx_ready>:
	return dev->config;
    b22e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b230:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    b232:	685b      	ldr	r3, [r3, #4]
    b234:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b238:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    b23c:	b929      	cbnz	r1, b24a <is_tx_ready+0x1c>
    b23e:	b933      	cbnz	r3, b24e <is_tx_ready+0x20>
    b240:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    b244:	b92b      	cbnz	r3, b252 <is_tx_ready+0x24>
    b246:	2000      	movs	r0, #0
    b248:	4770      	bx	lr
    b24a:	2001      	movs	r0, #1
    b24c:	4770      	bx	lr
    b24e:	2000      	movs	r0, #0
    b250:	4770      	bx	lr
    b252:	2001      	movs	r0, #1
}
    b254:	4770      	bx	lr

0000b256 <uarte_enable>:
	return dev->config;
    b256:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b258:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    b25a:	2208      	movs	r2, #8
    b25c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    b260:	4770      	bx	lr

0000b262 <tx_start>:
{
    b262:	b510      	push	{r4, lr}
	return dev->config;
    b264:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b266:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b268:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b26c:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b270:	2300      	movs	r3, #0
    b272:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    b276:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    b27a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
    b27e:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
    b282:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b284:	685b      	ldr	r3, [r3, #4]
    b286:	f013 0f10 	tst.w	r3, #16
    b28a:	d102      	bne.n	b292 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b28c:	2301      	movs	r3, #1
    b28e:	60a3      	str	r3, [r4, #8]
}
    b290:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    b292:	2101      	movs	r1, #1
    b294:	f7ff ffdf 	bl	b256 <uarte_enable>
    p_reg->INTENSET = mask;
    b298:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    b29c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    b2a0:	e7f4      	b.n	b28c <tx_start+0x2a>

0000b2a2 <uarte_nrfx_poll_in>:
{
    b2a2:	b410      	push	{r4}
	return dev->data;
    b2a4:	6904      	ldr	r4, [r0, #16]
	return dev->config;
    b2a6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b2a8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b2aa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b2ae:	b152      	cbz	r2, b2c6 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    b2b0:	7d62      	ldrb	r2, [r4, #21]
    b2b2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b2b4:	2000      	movs	r0, #0
    b2b6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    b2ba:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b2be:	2201      	movs	r2, #1
    b2c0:	601a      	str	r2, [r3, #0]
}
    b2c2:	bc10      	pop	{r4}
    b2c4:	4770      	bx	lr
		return -1;
    b2c6:	f04f 30ff 	mov.w	r0, #4294967295
    b2ca:	e7fa      	b.n	b2c2 <uarte_nrfx_poll_in+0x20>

0000b2cc <uarte_nrfx_fifo_fill>:
{
    b2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b2d0:	4680      	mov	r8, r0
	return dev->data;
    b2d2:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    b2d4:	68fb      	ldr	r3, [r7, #12]
    b2d6:	899e      	ldrh	r6, [r3, #12]
    b2d8:	4296      	cmp	r6, r2
    b2da:	bfa8      	it	ge
    b2dc:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    b2de:	3310      	adds	r3, #16
    b2e0:	2201      	movs	r2, #1
    b2e2:	e8d3 0fef 	ldaex	r0, [r3]
    b2e6:	2800      	cmp	r0, #0
    b2e8:	d103      	bne.n	b2f2 <uarte_nrfx_fifo_fill+0x26>
    b2ea:	e8c3 2fe4 	stlex	r4, r2, [r3]
    b2ee:	2c00      	cmp	r4, #0
    b2f0:	d1f7      	bne.n	b2e2 <uarte_nrfx_fifo_fill+0x16>
    b2f2:	d101      	bne.n	b2f8 <uarte_nrfx_fifo_fill+0x2c>
	for (int i = 0; i < len; i++) {
    b2f4:	2300      	movs	r3, #0
    b2f6:	e006      	b.n	b306 <uarte_nrfx_fifo_fill+0x3a>
		return 0;
    b2f8:	2600      	movs	r6, #0
    b2fa:	e019      	b.n	b330 <uarte_nrfx_fifo_fill+0x64>
		data->int_driven->tx_buffer[i] = tx_data[i];
    b2fc:	68fc      	ldr	r4, [r7, #12]
    b2fe:	68a4      	ldr	r4, [r4, #8]
    b300:	5ccd      	ldrb	r5, [r1, r3]
    b302:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
    b304:	3301      	adds	r3, #1
    b306:	42b3      	cmp	r3, r6
    b308:	dbf8      	blt.n	b2fc <uarte_nrfx_fifo_fill+0x30>
	__asm__ volatile(
    b30a:	f04f 0320 	mov.w	r3, #32
    b30e:	f3ef 8411 	mrs	r4, BASEPRI
    b312:	f383 8812 	msr	BASEPRI_MAX, r3
    b316:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    b31a:	4640      	mov	r0, r8
    b31c:	f7ff ff87 	bl	b22e <is_tx_ready>
    b320:	b948      	cbnz	r0, b336 <uarte_nrfx_fifo_fill+0x6a>
		data->int_driven->fifo_fill_lock = 0;
    b322:	68fb      	ldr	r3, [r7, #12]
    b324:	2600      	movs	r6, #0
    b326:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
    b328:	f384 8811 	msr	BASEPRI, r4
    b32c:	f3bf 8f6f 	isb	sy
}
    b330:	4630      	mov	r0, r6
    b332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
    b336:	68fb      	ldr	r3, [r7, #12]
    b338:	4632      	mov	r2, r6
    b33a:	6899      	ldr	r1, [r3, #8]
    b33c:	4640      	mov	r0, r8
    b33e:	f7ff ff90 	bl	b262 <tx_start>
    b342:	e7f1      	b.n	b328 <uarte_nrfx_fifo_fill+0x5c>

0000b344 <uarte_nrfx_fifo_read>:
	return dev->config;
    b344:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b346:	681b      	ldr	r3, [r3, #0]
	return dev->data;
    b348:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b34a:	2a00      	cmp	r2, #0
    b34c:	dd0c      	ble.n	b368 <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b34e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    b352:	b15a      	cbz	r2, b36c <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b354:	2200      	movs	r2, #0
    b356:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    b35a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    b35e:	7d42      	ldrb	r2, [r0, #21]
    b360:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b362:	2001      	movs	r0, #1
    b364:	6018      	str	r0, [r3, #0]
}
    b366:	4770      	bx	lr
	int num_rx = 0;
    b368:	2000      	movs	r0, #0
    b36a:	4770      	bx	lr
    b36c:	2000      	movs	r0, #0
}
    b36e:	4770      	bx	lr

0000b370 <uarte_nrfx_irq_tx_enable>:
	return dev->config;
    b370:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b372:	681a      	ldr	r2, [r3, #0]
	return dev->data;
    b374:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
    b376:	f04f 0020 	mov.w	r0, #32
    b37a:	f3ef 8311 	mrs	r3, BASEPRI
    b37e:	f380 8812 	msr	BASEPRI_MAX, r0
    b382:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    b386:	68c9      	ldr	r1, [r1, #12]
    b388:	2000      	movs	r0, #0
    b38a:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    b38c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    b390:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    b394:	f383 8811 	msr	BASEPRI, r3
    b398:	f3bf 8f6f 	isb	sy
}
    b39c:	4770      	bx	lr

0000b39e <uarte_nrfx_irq_tx_disable>:
	return dev->data;
    b39e:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
    b3a0:	68db      	ldr	r3, [r3, #12]
    b3a2:	2201      	movs	r2, #1
    b3a4:	739a      	strb	r2, [r3, #14]
}
    b3a6:	4770      	bx	lr

0000b3a8 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
    b3a8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b3aa:	6819      	ldr	r1, [r3, #0]
	return dev->data;
    b3ac:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
    b3ae:	68db      	ldr	r3, [r3, #12]
    b3b0:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    b3b2:	b94a      	cbnz	r2, b3c8 <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b3b4:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    b3b8:	b15a      	cbz	r2, b3d2 <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
    b3ba:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    b3be:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
    b3c2:	d008      	beq.n	b3d6 <uarte_nrfx_irq_tx_ready_complete+0x2e>
    b3c4:	2001      	movs	r0, #1
    b3c6:	e000      	b.n	b3ca <uarte_nrfx_irq_tx_ready_complete+0x22>
    b3c8:	2000      	movs	r0, #0
	if (ready) {
    b3ca:	b108      	cbz	r0, b3d0 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    b3cc:	2200      	movs	r2, #0
    b3ce:	611a      	str	r2, [r3, #16]
}
    b3d0:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    b3d2:	2000      	movs	r0, #0
    b3d4:	e7f9      	b.n	b3ca <uarte_nrfx_irq_tx_ready_complete+0x22>
    b3d6:	2000      	movs	r0, #0
    b3d8:	e7f7      	b.n	b3ca <uarte_nrfx_irq_tx_ready_complete+0x22>

0000b3da <uarte_nrfx_irq_rx_ready>:
	return dev->config;
    b3da:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b3dc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b3de:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    b3e2:	3800      	subs	r0, #0
    b3e4:	bf18      	it	ne
    b3e6:	2001      	movne	r0, #1
    b3e8:	4770      	bx	lr

0000b3ea <uarte_nrfx_irq_rx_enable>:
	return dev->config;
    b3ea:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b3ec:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    b3ee:	2210      	movs	r2, #16
    b3f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    b3f4:	4770      	bx	lr

0000b3f6 <uarte_nrfx_irq_rx_disable>:
	return dev->config;
    b3f6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b3f8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    b3fa:	2210      	movs	r2, #16
    b3fc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    b400:	4770      	bx	lr

0000b402 <uarte_nrfx_irq_err_enable>:
	return dev->config;
    b402:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b404:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    b406:	f44f 7200 	mov.w	r2, #512	; 0x200
    b40a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    b40e:	4770      	bx	lr

0000b410 <uarte_nrfx_irq_err_disable>:
	return dev->config;
    b410:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b412:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    b414:	f44f 7200 	mov.w	r2, #512	; 0x200
    b418:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    b41c:	4770      	bx	lr

0000b41e <uarte_nrfx_irq_is_pending>:
{
    b41e:	b538      	push	{r3, r4, r5, lr}
    b420:	4604      	mov	r4, r0
	return dev->config;
    b422:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b424:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    b426:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    b42a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    b42e:	d106      	bne.n	b43e <uarte_nrfx_irq_is_pending+0x20>
    b430:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    b434:	f013 0f10 	tst.w	r3, #16
    b438:	d107      	bne.n	b44a <uarte_nrfx_irq_is_pending+0x2c>
    b43a:	2000      	movs	r0, #0
}
    b43c:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    b43e:	f7ff ffb3 	bl	b3a8 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    b442:	2800      	cmp	r0, #0
    b444:	d0f4      	beq.n	b430 <uarte_nrfx_irq_is_pending+0x12>
		||
    b446:	2001      	movs	r0, #1
    b448:	e7f8      	b.n	b43c <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
    b44a:	4620      	mov	r0, r4
    b44c:	f7ff ffc5 	bl	b3da <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    b450:	2800      	cmp	r0, #0
    b452:	d0f3      	beq.n	b43c <uarte_nrfx_irq_is_pending+0x1e>
		||
    b454:	2001      	movs	r0, #1
    b456:	e7f1      	b.n	b43c <uarte_nrfx_irq_is_pending+0x1e>

0000b458 <uarte_nrfx_irq_update>:
}
    b458:	2001      	movs	r0, #1
    b45a:	4770      	bx	lr

0000b45c <uarte_nrfx_irq_callback_set>:
	return dev->data;
    b45c:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
    b45e:	68d8      	ldr	r0, [r3, #12]
    b460:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    b462:	68db      	ldr	r3, [r3, #12]
    b464:	605a      	str	r2, [r3, #4]
}
    b466:	4770      	bx	lr

0000b468 <wait_tx_ready>:
{
    b468:	b570      	push	{r4, r5, r6, lr}
    b46a:	4606      	mov	r6, r0
    b46c:	e014      	b.n	b498 <wait_tx_ready+0x30>
		if (res) {
    b46e:	b17d      	cbz	r5, b490 <wait_tx_ready+0x28>
	__asm__ volatile(
    b470:	f04f 0320 	mov.w	r3, #32
    b474:	f3ef 8411 	mrs	r4, BASEPRI
    b478:	f383 8812 	msr	BASEPRI_MAX, r3
    b47c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    b480:	4630      	mov	r0, r6
    b482:	f7ff fed4 	bl	b22e <is_tx_ready>
    b486:	b9a0      	cbnz	r0, b4b2 <wait_tx_ready+0x4a>
	__asm__ volatile(
    b488:	f384 8811 	msr	BASEPRI, r4
    b48c:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    b490:	2021      	movs	r0, #33	; 0x21
    b492:	2100      	movs	r1, #0
    b494:	f7fd fcea 	bl	8e6c <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    b498:	2464      	movs	r4, #100	; 0x64
    b49a:	4630      	mov	r0, r6
    b49c:	f7ff fec7 	bl	b22e <is_tx_ready>
    b4a0:	4605      	mov	r5, r0
    b4a2:	2800      	cmp	r0, #0
    b4a4:	d1e3      	bne.n	b46e <wait_tx_ready+0x6>
    b4a6:	2001      	movs	r0, #1
    b4a8:	f000 f8e9 	bl	b67e <nrfx_busy_wait>
    b4ac:	3c01      	subs	r4, #1
    b4ae:	d1f4      	bne.n	b49a <wait_tx_ready+0x32>
    b4b0:	e7dd      	b.n	b46e <wait_tx_ready+0x6>
}
    b4b2:	4620      	mov	r0, r4
    b4b4:	bd70      	pop	{r4, r5, r6, pc}

0000b4b6 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    b4b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b4b8:	4604      	mov	r4, r0
	return dev->config;
    b4ba:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
    b4bc:	6835      	ldr	r5, [r6, #0]
	return dev->data;
    b4be:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    b4c0:	2100      	movs	r1, #0
    b4c2:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    b4c6:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
    b4c8:	f7f9 f94e 	bl	4768 <uarte_nrfx_pins_configure>
	return dev->data;
    b4cc:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    b4ce:	3104      	adds	r1, #4
    b4d0:	4620      	mov	r0, r4
    b4d2:	f7ff fe3b 	bl	b14c <uarte_nrfx_configure>
	if (err) {
    b4d6:	4604      	mov	r4, r0
    b4d8:	bb68      	cbnz	r0, b536 <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    b4da:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    b4dc:	f013 0f02 	tst.w	r3, #2
    b4e0:	d12b      	bne.n	b53a <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    b4e2:	2308      	movs	r3, #8
    b4e4:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    b4e8:	7a33      	ldrb	r3, [r6, #8]
    b4ea:	b95b      	cbnz	r3, b504 <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b4ec:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    b4f0:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    b4f4:	f107 0315 	add.w	r3, r7, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    b4f8:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    b4fc:	2301      	movs	r3, #1
    b4fe:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b502:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    b504:	6873      	ldr	r3, [r6, #4]
    b506:	f013 0f02 	tst.w	r3, #2
    b50a:	d103      	bne.n	b514 <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
    b50c:	f44f 7380 	mov.w	r3, #256	; 0x100
    b510:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b514:	6873      	ldr	r3, [r6, #4]
    b516:	f013 0f10 	tst.w	r3, #16
    b51a:	d003      	beq.n	b524 <uarte_instance_init+0x6e>
    b51c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    b520:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    b524:	3714      	adds	r7, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b526:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b52a:	2300      	movs	r3, #0
    b52c:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b530:	2301      	movs	r3, #1
    b532:	60ab      	str	r3, [r5, #8]
    b534:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    b536:	4620      	mov	r0, r4
    b538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    b53a:	4639      	mov	r1, r7
    b53c:	4628      	mov	r0, r5
    b53e:	f7f9 fad9 	bl	4af4 <endtx_stoptx_ppi_init>
		if (err < 0) {
    b542:	2800      	cmp	r0, #0
    b544:	dacd      	bge.n	b4e2 <uarte_instance_init+0x2c>
			return err;
    b546:	4604      	mov	r4, r0
    b548:	e7f5      	b.n	b536 <uarte_instance_init+0x80>

0000b54a <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    b54a:	b510      	push	{r4, lr}
    b54c:	4604      	mov	r4, r0
    b54e:	2200      	movs	r2, #0
    b550:	2101      	movs	r1, #1
    b552:	2008      	movs	r0, #8
    b554:	f7f7 f97c 	bl	2850 <z_arm_irq_priority_set>
    b558:	2008      	movs	r0, #8
    b55a:	f7f7 f947 	bl	27ec <arch_irq_enable>
    b55e:	2101      	movs	r1, #1
    b560:	4620      	mov	r0, r4
    b562:	f7ff ffa8 	bl	b4b6 <uarte_instance_init>
    b566:	bd10      	pop	{r4, pc}

0000b568 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    b568:	4770      	bx	lr

0000b56a <counter_sub>:
	return (a - b) & COUNTER_MAX;
    b56a:	1a40      	subs	r0, r0, r1
}
    b56c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b570:	4770      	bx	lr

0000b572 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    b572:	f100 0350 	add.w	r3, r0, #80	; 0x50
    b576:	009b      	lsls	r3, r3, #2
    b578:	b29b      	uxth	r3, r3
    b57a:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    b57e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b582:	2200      	movs	r2, #0
    b584:	601a      	str	r2, [r3, #0]
    b586:	681b      	ldr	r3, [r3, #0]
}
    b588:	4770      	bx	lr

0000b58a <absolute_time_to_cc>:
}
    b58a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b58e:	4770      	bx	lr

0000b590 <full_int_lock>:
	__asm__ volatile(
    b590:	f04f 0320 	mov.w	r3, #32
    b594:	f3ef 8011 	mrs	r0, BASEPRI
    b598:	f383 8812 	msr	BASEPRI_MAX, r3
    b59c:	f3bf 8f6f 	isb	sy
}
    b5a0:	4770      	bx	lr

0000b5a2 <full_int_unlock>:
	__asm__ volatile(
    b5a2:	f380 8811 	msr	BASEPRI, r0
    b5a6:	f3bf 8f6f 	isb	sy
}
    b5aa:	4770      	bx	lr

0000b5ac <set_absolute_alarm>:
{
    b5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b5ae:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    b5b0:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    b5b4:	f7f9 fac8 	bl	4b48 <get_comparator>
    b5b8:	4607      	mov	r7, r0
    b5ba:	e019      	b.n	b5f0 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    b5bc:	2013      	movs	r0, #19
    b5be:	f000 fc94 	bl	beea <z_impl_k_busy_wait>
}
    b5c2:	e022      	b.n	b60a <set_absolute_alarm+0x5e>
		event_clear(chan);
    b5c4:	4630      	mov	r0, r6
    b5c6:	f7ff ffd4 	bl	b572 <event_clear>
		event_enable(chan);
    b5ca:	4630      	mov	r0, r6
    b5cc:	f7f9 fac4 	bl	4b58 <event_enable>
		set_comparator(chan, cc_val);
    b5d0:	4629      	mov	r1, r5
    b5d2:	4630      	mov	r0, r6
    b5d4:	f7f9 faae 	bl	4b34 <set_comparator>
		now2 = counter();
    b5d8:	f7f9 fad2 	bl	4b80 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    b5dc:	4284      	cmp	r4, r0
    b5de:	d01e      	beq.n	b61e <set_absolute_alarm+0x72>
    b5e0:	1c81      	adds	r1, r0, #2
    b5e2:	4628      	mov	r0, r5
    b5e4:	f7ff ffc1 	bl	b56a <counter_sub>
	} while ((now2 != now) &&
    b5e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b5ec:	d917      	bls.n	b61e <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    b5ee:	462f      	mov	r7, r5
		now = counter();
    b5f0:	f7f9 fac6 	bl	4b80 <counter>
    b5f4:	4604      	mov	r4, r0
		set_comparator(chan, now);
    b5f6:	4601      	mov	r1, r0
    b5f8:	4630      	mov	r0, r6
    b5fa:	f7f9 fa9b 	bl	4b34 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    b5fe:	4621      	mov	r1, r4
    b600:	4638      	mov	r0, r7
    b602:	f7ff ffb2 	bl	b56a <counter_sub>
    b606:	2801      	cmp	r0, #1
    b608:	d0d8      	beq.n	b5bc <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    b60a:	1ca7      	adds	r7, r4, #2
    b60c:	4639      	mov	r1, r7
    b60e:	4628      	mov	r0, r5
    b610:	f7ff ffab 	bl	b56a <counter_sub>
    b614:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b618:	d9d4      	bls.n	b5c4 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    b61a:	463d      	mov	r5, r7
    b61c:	e7d2      	b.n	b5c4 <set_absolute_alarm+0x18>
}
    b61e:	4628      	mov	r0, r5
    b620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b622 <compare_set>:
{
    b622:	b5f0      	push	{r4, r5, r6, r7, lr}
    b624:	b083      	sub	sp, #12
    b626:	4604      	mov	r4, r0
    b628:	4617      	mov	r7, r2
    b62a:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    b62c:	f7f9 faae 	bl	4b8c <compare_int_lock>
    b630:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    b632:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b634:	9301      	str	r3, [sp, #4]
    b636:	9b08      	ldr	r3, [sp, #32]
    b638:	9300      	str	r3, [sp, #0]
    b63a:	463a      	mov	r2, r7
    b63c:	462b      	mov	r3, r5
    b63e:	4620      	mov	r0, r4
    b640:	f7f9 fb82 	bl	4d48 <compare_set_nolocks>
    b644:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    b646:	4631      	mov	r1, r6
    b648:	4620      	mov	r0, r4
    b64a:	f7f9 faf9 	bl	4c40 <compare_int_unlock>
}
    b64e:	4628      	mov	r0, r5
    b650:	b003      	add	sp, #12
    b652:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b654 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    b654:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    b656:	2000      	movs	r0, #0
    b658:	f7f7 fb48 	bl	2cec <sys_arch_reboot>

0000b65c <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    b65c:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    b65e:	f7fd fe5d 	bl	931c <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    b662:	bd08      	pop	{r3, pc}

0000b664 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    b664:	b510      	push	{r4, lr}
    b666:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    b668:	f7f6 ffbc 	bl	25e4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    b66c:	f7f7 f88c 	bl	2788 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    b670:	4620      	mov	r0, r4
    b672:	f7ff fff3 	bl	b65c <hw_cc3xx_init_internal>
	return res;
}
    b676:	bd10      	pop	{r4, pc}

0000b678 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    b678:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    b67a:	4780      	blx	r0
}
    b67c:	bd08      	pop	{r3, pc}

0000b67e <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    b67e:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    b680:	f000 fc33 	bl	beea <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    b684:	bd08      	pop	{r3, pc}

0000b686 <pin_is_task_output>:
{
    b686:	b510      	push	{r4, lr}
    b688:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    b68a:	f7f9 ffdf 	bl	564c <pin_is_output>
    b68e:	b128      	cbz	r0, b69c <pin_is_task_output+0x16>
    b690:	4620      	mov	r0, r4
    b692:	f7f9 ffc5 	bl	5620 <pin_in_use_by_te>
    b696:	b118      	cbz	r0, b6a0 <pin_is_task_output+0x1a>
    b698:	2001      	movs	r0, #1
    b69a:	e000      	b.n	b69e <pin_is_task_output+0x18>
    b69c:	2000      	movs	r0, #0
}
    b69e:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    b6a0:	2000      	movs	r0, #0
    b6a2:	e7fc      	b.n	b69e <pin_is_task_output+0x18>

0000b6a4 <pin_is_input>:
{
    b6a4:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    b6a6:	f7f9 ffd1 	bl	564c <pin_is_output>
    b6aa:	f080 0001 	eor.w	r0, r0, #1
}
    b6ae:	b2c0      	uxtb	r0, r0
    b6b0:	bd08      	pop	{r3, pc}

0000b6b2 <gpiote_polarity_to_trigger>:
}
    b6b2:	4770      	bx	lr

0000b6b4 <gpiote_trigger_to_polarity>:
}
    b6b4:	4770      	bx	lr

0000b6b6 <is_level>:
}
    b6b6:	2803      	cmp	r0, #3
    b6b8:	bf94      	ite	ls
    b6ba:	2000      	movls	r0, #0
    b6bc:	2001      	movhi	r0, #1
    b6be:	4770      	bx	lr

0000b6c0 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    b6c0:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    b6c2:	f7fa fcbb 	bl	603c <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
    b6c6:	f7f9 ff39 	bl	553c <nrfx_clock_irq_handler>
}
    b6ca:	bd08      	pop	{r3, pc}

0000b6cc <nrf52_errata_166>:
                }
            }
        #endif
        return false;
    #endif
}
    b6cc:	2000      	movs	r0, #0
    b6ce:	4770      	bx	lr

0000b6d0 <nrf52_errata_171>:
                }
            }
        #endif
        return false;
    #endif
}
    b6d0:	2000      	movs	r0, #0
    b6d2:	4770      	bx	lr

0000b6d4 <nrf52_errata_187>:
                }
            }
        #endif
        return false;
    #endif
}
    b6d4:	2000      	movs	r0, #0
    b6d6:	4770      	bx	lr

0000b6d8 <nrf52_errata_199>:
                }
            }
        #endif
        return false;
    #endif
}
    b6d8:	2000      	movs	r0, #0
    b6da:	4770      	bx	lr

0000b6dc <nrf52_errata_223>:
                }
            }
        #endif
        return false;
    #endif
}
    b6dc:	2000      	movs	r0, #0
    b6de:	4770      	bx	lr

0000b6e0 <nrfx_usbd_consumer>:
{
    b6e0:	b430      	push	{r4, r5}
    size_t size = p_transfer->size;
    b6e2:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    b6e4:	42a3      	cmp	r3, r4
    b6e6:	d908      	bls.n	b6fa <nrfx_usbd_consumer+0x1a>
        p_next->size = 0;
    b6e8:	2500      	movs	r5, #0
    b6ea:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    b6ec:	6809      	ldr	r1, [r1, #0]
    b6ee:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
    b6f0:	429a      	cmp	r2, r3
    b6f2:	d00b      	beq.n	b70c <nrfx_usbd_consumer+0x2c>
    b6f4:	2000      	movs	r0, #0
}
    b6f6:	bc30      	pop	{r4, r5}
    b6f8:	4770      	bx	lr
        p_next->size = data_size;
    b6fa:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    b6fc:	680d      	ldr	r5, [r1, #0]
    b6fe:	6005      	str	r5, [r0, #0]
        size -= data_size;
    b700:	1ae4      	subs	r4, r4, r3
        p_transfer->size = size;
    b702:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    b704:	6808      	ldr	r0, [r1, #0]
    b706:	4418      	add	r0, r3
    b708:	6008      	str	r0, [r1, #0]
    b70a:	e7f1      	b.n	b6f0 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
    b70c:	b90c      	cbnz	r4, b712 <nrfx_usbd_consumer+0x32>
    b70e:	2000      	movs	r0, #0
    b710:	e7f1      	b.n	b6f6 <nrfx_usbd_consumer+0x16>
    b712:	2001      	movs	r0, #1
    b714:	e7ef      	b.n	b6f6 <nrfx_usbd_consumer+0x16>

0000b716 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
    b716:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
    b718:	4293      	cmp	r3, r2
    b71a:	d800      	bhi.n	b71e <nrfx_usbd_feeder_ram+0x8>
    size_t tx_size = p_transfer->size;
    b71c:	461a      	mov	r2, r3
    p_next->p_data = p_transfer->p_data;
    b71e:	680b      	ldr	r3, [r1, #0]
    b720:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
    b722:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
    b724:	6848      	ldr	r0, [r1, #4]
    b726:	1a80      	subs	r0, r0, r2
    b728:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    b72a:	680b      	ldr	r3, [r1, #0]
    b72c:	441a      	add	r2, r3
    b72e:	600a      	str	r2, [r1, #0]
}
    b730:	3800      	subs	r0, #0
    b732:	bf18      	it	ne
    b734:	2001      	movne	r0, #1
    b736:	4770      	bx	lr

0000b738 <nrfx_usbd_feeder_ram_zlp>:
    size_t tx_size = p_transfer->size;
    b738:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
    b73a:	4293      	cmp	r3, r2
    b73c:	d800      	bhi.n	b740 <nrfx_usbd_feeder_ram_zlp+0x8>
    size_t tx_size = p_transfer->size;
    b73e:	461a      	mov	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    b740:	b162      	cbz	r2, b75c <nrfx_usbd_feeder_ram_zlp+0x24>
    b742:	680b      	ldr	r3, [r1, #0]
    b744:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
    b746:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
    b748:	684b      	ldr	r3, [r1, #4]
    b74a:	1a9b      	subs	r3, r3, r2
    b74c:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    b74e:	680b      	ldr	r3, [r1, #0]
    b750:	4413      	add	r3, r2
    b752:	600b      	str	r3, [r1, #0]
}
    b754:	1e10      	subs	r0, r2, #0
    b756:	bf18      	it	ne
    b758:	2001      	movne	r0, #1
    b75a:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    b75c:	2300      	movs	r3, #0
    b75e:	e7f1      	b.n	b744 <nrfx_usbd_feeder_ram_zlp+0xc>

0000b760 <ev_started_handler>:
}
    b760:	4770      	bx	lr

0000b762 <usbd_dma_scheduler_algorithm>:
}
    b762:	fa90 f0a0 	rbit	r0, r0
    b766:	fab0 f080 	clz	r0, r0
    b76a:	4770      	bx	lr

0000b76c <nrfx_usbd_feeder_flash>:
{
    b76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b770:	4606      	mov	r6, r0
    b772:	460c      	mov	r4, r1
    b774:	4615      	mov	r5, r2
    size_t tx_size  = p_transfer->size;
    b776:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
    b77a:	f7fb fa5d 	bl	6c38 <nrfx_usbd_feeder_buffer_get>
    b77e:	4607      	mov	r7, r0
    if (tx_size > ep_size)
    b780:	45a8      	cmp	r8, r5
    b782:	d800      	bhi.n	b786 <nrfx_usbd_feeder_flash+0x1a>
    size_t tx_size  = p_transfer->size;
    b784:	4645      	mov	r5, r8
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    b786:	462a      	mov	r2, r5
    b788:	6821      	ldr	r1, [r4, #0]
    b78a:	4638      	mov	r0, r7
    b78c:	f7ff f9bb 	bl	ab06 <memcpy>
    p_next->p_data.tx = p_buffer;
    b790:	6037      	str	r7, [r6, #0]
    p_next->size = tx_size;
    b792:	6075      	str	r5, [r6, #4]
    p_transfer->size -= tx_size;
    b794:	6860      	ldr	r0, [r4, #4]
    b796:	1b40      	subs	r0, r0, r5
    b798:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    b79a:	6822      	ldr	r2, [r4, #0]
    b79c:	442a      	add	r2, r5
    b79e:	6022      	str	r2, [r4, #0]
}
    b7a0:	3800      	subs	r0, #0
    b7a2:	bf18      	it	ne
    b7a4:	2001      	movne	r0, #1
    b7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b7aa <nrfx_usbd_feeder_flash_zlp>:
{
    b7aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7ae:	4606      	mov	r6, r0
    b7b0:	460d      	mov	r5, r1
    b7b2:	4614      	mov	r4, r2
    size_t tx_size  = p_transfer->size;
    b7b4:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
    b7b8:	f7fb fa3e 	bl	6c38 <nrfx_usbd_feeder_buffer_get>
    b7bc:	4607      	mov	r7, r0
    if (tx_size > ep_size)
    b7be:	45a0      	cmp	r8, r4
    b7c0:	d800      	bhi.n	b7c4 <nrfx_usbd_feeder_flash_zlp+0x1a>
    size_t tx_size  = p_transfer->size;
    b7c2:	4644      	mov	r4, r8
    if (tx_size != 0)
    b7c4:	b96c      	cbnz	r4, b7e2 <nrfx_usbd_feeder_flash_zlp+0x38>
        p_next->p_data.tx = NULL;
    b7c6:	2300      	movs	r3, #0
    b7c8:	6033      	str	r3, [r6, #0]
    p_next->size = tx_size;
    b7ca:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
    b7cc:	686b      	ldr	r3, [r5, #4]
    b7ce:	1b1b      	subs	r3, r3, r4
    b7d0:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    b7d2:	682b      	ldr	r3, [r5, #0]
    b7d4:	4423      	add	r3, r4
    b7d6:	602b      	str	r3, [r5, #0]
}
    b7d8:	1e20      	subs	r0, r4, #0
    b7da:	bf18      	it	ne
    b7dc:	2001      	movne	r0, #1
    b7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    b7e2:	4622      	mov	r2, r4
    b7e4:	6829      	ldr	r1, [r5, #0]
    b7e6:	4638      	mov	r0, r7
    b7e8:	f7ff f98d 	bl	ab06 <memcpy>
        p_next->p_data.tx = p_buffer;
    b7ec:	6037      	str	r7, [r6, #0]
    b7ee:	e7ec      	b.n	b7ca <nrfx_usbd_feeder_flash_zlp+0x20>

0000b7f0 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    b7f0:	b148      	cbz	r0, b806 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    b7f2:	68c3      	ldr	r3, [r0, #12]
    b7f4:	8818      	ldrh	r0, [r3, #0]
    b7f6:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b7fa:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    b7fe:	bf14      	ite	ne
    b800:	2000      	movne	r0, #0
    b802:	2001      	moveq	r0, #1
    b804:	4770      	bx	lr
		return false;
    b806:	2000      	movs	r0, #0
}
    b808:	4770      	bx	lr

0000b80a <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    b80a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b80c:	4605      	mov	r5, r0
    b80e:	460e      	mov	r6, r1
	__asm__ volatile(
    b810:	f04f 0320 	mov.w	r3, #32
    b814:	f3ef 8711 	mrs	r7, BASEPRI
    b818:	f383 8812 	msr	BASEPRI_MAX, r3
    b81c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    b820:	f7fd fb50 	bl	8ec4 <z_impl_z_current_get>
    b824:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    b826:	4631      	mov	r1, r6
    b828:	4628      	mov	r0, r5
    b82a:	f7ff ff13 	bl	b654 <k_sys_fatal_error_handler>
	__asm__ volatile(
    b82e:	f387 8811 	msr	BASEPRI, r7
    b832:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    b836:	4620      	mov	r0, r4
    b838:	f7f7 faa4 	bl	2d84 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    b83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b83e <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    b83e:	68c2      	ldr	r2, [r0, #12]
    b840:	6903      	ldr	r3, [r0, #16]
    b842:	431a      	orrs	r2, r3
    b844:	f012 0203 	ands.w	r2, r2, #3
    b848:	d10d      	bne.n	b866 <create_free_list+0x28>
	slab->free_list = NULL;
    b84a:	2100      	movs	r1, #0
    b84c:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    b84e:	e005      	b.n	b85c <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    b850:	6941      	ldr	r1, [r0, #20]
    b852:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    b854:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    b856:	68c1      	ldr	r1, [r0, #12]
    b858:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    b85a:	3201      	adds	r2, #1
    b85c:	6881      	ldr	r1, [r0, #8]
    b85e:	4291      	cmp	r1, r2
    b860:	d8f6      	bhi.n	b850 <create_free_list+0x12>
	return 0;
    b862:	2000      	movs	r0, #0
    b864:	4770      	bx	lr
		return -EINVAL;
    b866:	f06f 0015 	mvn.w	r0, #21
}
    b86a:	4770      	bx	lr

0000b86c <k_mem_slab_init>:
{
    b86c:	b510      	push	{r4, lr}
    b86e:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    b870:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    b872:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    b874:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    b876:	2300      	movs	r3, #0
    b878:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    b87a:	f7ff ffe0 	bl	b83e <create_free_list>
	if (rc < 0) {
    b87e:	2800      	cmp	r0, #0
    b880:	db01      	blt.n	b886 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    b882:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    b884:	6064      	str	r4, [r4, #4]
}
    b886:	bd10      	pop	{r4, pc}

0000b888 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    b888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b88a:	4604      	mov	r4, r0
    b88c:	460d      	mov	r5, r1
	__asm__ volatile(
    b88e:	f04f 0320 	mov.w	r3, #32
    b892:	f3ef 8611 	mrs	r6, BASEPRI
    b896:	f383 8812 	msr	BASEPRI_MAX, r3
    b89a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    b89e:	6943      	ldr	r3, [r0, #20]
    b8a0:	b163      	cbz	r3, b8bc <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    b8a2:	682b      	ldr	r3, [r5, #0]
    b8a4:	6962      	ldr	r2, [r4, #20]
    b8a6:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    b8a8:	682b      	ldr	r3, [r5, #0]
    b8aa:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    b8ac:	69a3      	ldr	r3, [r4, #24]
    b8ae:	3b01      	subs	r3, #1
    b8b0:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    b8b2:	f386 8811 	msr	BASEPRI, r6
    b8b6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    b8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b8bc:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    b8c0:	f000 fa22 	bl	bd08 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    b8c4:	2800      	cmp	r0, #0
    b8c6:	d0ec      	beq.n	b8a2 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    b8c8:	682a      	ldr	r2, [r5, #0]
    b8ca:	2100      	movs	r1, #0
    b8cc:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    b8d0:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    b8d2:	f000 f97e 	bl	bbd2 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    b8d6:	4631      	mov	r1, r6
    b8d8:	4638      	mov	r0, r7
    b8da:	f7fc ff99 	bl	8810 <z_reschedule>
			return;
    b8de:	e7ec      	b.n	b8ba <k_mem_slab_free+0x32>

0000b8e0 <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    b8e0:	3207      	adds	r2, #7
    b8e2:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    b8e6:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    b8ea:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    b8ee:	2300      	movs	r3, #0
    b8f0:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
    b8f4:	1888      	adds	r0, r1, r2
    b8f6:	4770      	bx	lr

0000b8f8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b8f8:	f3ef 8005 	mrs	r0, IPSR
}
    b8fc:	3800      	subs	r0, #0
    b8fe:	bf18      	it	ne
    b900:	2001      	movne	r0, #1
    b902:	4770      	bx	lr

0000b904 <z_impl_k_thread_start>:
{
    b904:	b508      	push	{r3, lr}
	z_sched_start(thread);
    b906:	f7fd f8ad 	bl	8a64 <z_sched_start>
}
    b90a:	bd08      	pop	{r3, pc}

0000b90c <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    b90c:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    b90e:	2400      	movs	r4, #0
    b910:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    b912:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    b914:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    b916:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    b918:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    b91a:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    b91c:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    b91e:	bc10      	pop	{r4}
    b920:	4770      	bx	lr

0000b922 <z_impl_k_thread_create>:
{
    b922:	b5f0      	push	{r4, r5, r6, r7, lr}
    b924:	b087      	sub	sp, #28
    b926:	4604      	mov	r4, r0
    b928:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b92c:	2500      	movs	r5, #0
    b92e:	9505      	str	r5, [sp, #20]
    b930:	9d10      	ldr	r5, [sp, #64]	; 0x40
    b932:	9504      	str	r5, [sp, #16]
    b934:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    b936:	9503      	str	r5, [sp, #12]
    b938:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    b93a:	9502      	str	r5, [sp, #8]
    b93c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    b93e:	9501      	str	r5, [sp, #4]
    b940:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b942:	9500      	str	r5, [sp, #0]
    b944:	f7fc fb82 	bl	804c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    b948:	f1b7 3fff 	cmp.w	r7, #4294967295
    b94c:	bf08      	it	eq
    b94e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    b952:	d102      	bne.n	b95a <z_impl_k_thread_create+0x38>
}
    b954:	4620      	mov	r0, r4
    b956:	b007      	add	sp, #28
    b958:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
    b95a:	4632      	mov	r2, r6
    b95c:	463b      	mov	r3, r7
    b95e:	4620      	mov	r0, r4
    b960:	f7fc fb62 	bl	8028 <schedule_new_thread>
    b964:	e7f6      	b.n	b954 <z_impl_k_thread_create+0x32>

0000b966 <z_pm_save_idle_exit>:
{
    b966:	b508      	push	{r3, lr}
	pm_system_resume();
    b968:	f7f6 fd2a 	bl	23c0 <pm_system_resume>
	sys_clock_idle_exit();
    b96c:	f7ff fdfc 	bl	b568 <sys_clock_idle_exit>
}
    b970:	bd08      	pop	{r3, pc}

0000b972 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    b972:	4288      	cmp	r0, r1
    b974:	da00      	bge.n	b978 <new_prio_for_inheritance+0x6>
    b976:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    b978:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    b97c:	db01      	blt.n	b982 <new_prio_for_inheritance+0x10>
    b97e:	4608      	mov	r0, r1
    b980:	4770      	bx	lr
    b982:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    b986:	4770      	bx	lr

0000b988 <adjust_owner_prio>:
{
    b988:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    b98a:	6880      	ldr	r0, [r0, #8]
    b98c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    b990:	428b      	cmp	r3, r1
    b992:	d101      	bne.n	b998 <adjust_owner_prio+0x10>
	return false;
    b994:	2000      	movs	r0, #0
}
    b996:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    b998:	f7fd f8b2 	bl	8b00 <z_set_prio>
    b99c:	e7fb      	b.n	b996 <adjust_owner_prio+0xe>

0000b99e <z_impl_k_mutex_init>:
{
    b99e:	4603      	mov	r3, r0
	mutex->owner = NULL;
    b9a0:	2000      	movs	r0, #0
    b9a2:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    b9a4:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    b9a6:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    b9a8:	605b      	str	r3, [r3, #4]
}
    b9aa:	4770      	bx	lr

0000b9ac <prepare_thread_to_run>:
{
    b9ac:	b508      	push	{r3, lr}
    b9ae:	2200      	movs	r2, #0
    b9b0:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
    b9b4:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
    b9b6:	f000 f90c 	bl	bbd2 <z_ready_thread>
}
    b9ba:	bd08      	pop	{r3, pc}

0000b9bc <queue_insert>:
{
    b9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b9c0:	4605      	mov	r5, r0
    b9c2:	460e      	mov	r6, r1
    b9c4:	4614      	mov	r4, r2
    b9c6:	461f      	mov	r7, r3
    b9c8:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    b9cc:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
    b9d0:	f04f 0320 	mov.w	r3, #32
    b9d4:	f3ef 8911 	mrs	r9, BASEPRI
    b9d8:	f383 8812 	msr	BASEPRI_MAX, r3
    b9dc:	f3bf 8f6f 	isb	sy
	if (is_append) {
    b9e0:	b102      	cbz	r2, b9e4 <queue_insert+0x28>
	return list->tail;
    b9e2:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    b9e4:	4640      	mov	r0, r8
    b9e6:	f000 f98f 	bl	bd08 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    b9ea:	b9a0      	cbnz	r0, ba16 <queue_insert+0x5a>
	if (alloc) {
    b9ec:	b9e7      	cbnz	r7, ba28 <queue_insert+0x6c>
	node->next_and_flags = flags;
    b9ee:	2300      	movs	r3, #0
    b9f0:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    b9f2:	b356      	cbz	r6, ba4a <queue_insert+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    b9f4:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    b9f6:	f033 0303 	bics.w	r3, r3, #3
    b9fa:	d134      	bne.n	ba66 <queue_insert+0xaa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    b9fc:	6823      	ldr	r3, [r4, #0]
    b9fe:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    ba02:	6023      	str	r3, [r4, #0]
	return list->tail;
    ba04:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    ba06:	b35a      	cbz	r2, ba60 <queue_insert+0xa4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    ba08:	6813      	ldr	r3, [r2, #0]
    ba0a:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    ba0e:	4323      	orrs	r3, r4
    ba10:	6013      	str	r3, [r2, #0]
	list->tail = node;
    ba12:	606c      	str	r4, [r5, #4]
}
    ba14:	e031      	b.n	ba7a <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
    ba16:	4621      	mov	r1, r4
    ba18:	f7ff ffc8 	bl	b9ac <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
    ba1c:	4649      	mov	r1, r9
    ba1e:	4640      	mov	r0, r8
    ba20:	f7fc fef6 	bl	8810 <z_reschedule>
		return 0;
    ba24:	2000      	movs	r0, #0
    ba26:	e02d      	b.n	ba84 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
    ba28:	2108      	movs	r1, #8
    ba2a:	2000      	movs	r0, #0
    ba2c:	f7fd fc28 	bl	9280 <z_thread_aligned_alloc>
		if (anode == NULL) {
    ba30:	b120      	cbz	r0, ba3c <queue_insert+0x80>
		anode->data = data;
    ba32:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
    ba34:	2201      	movs	r2, #1
    ba36:	6002      	str	r2, [r0, #0]
		data = anode;
    ba38:	4604      	mov	r4, r0
    ba3a:	e7da      	b.n	b9f2 <queue_insert+0x36>
	__asm__ volatile(
    ba3c:	f389 8811 	msr	BASEPRI, r9
    ba40:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    ba44:	f06f 000b 	mvn.w	r0, #11
    ba48:	e01c      	b.n	ba84 <queue_insert+0xc8>
	return list->head;
    ba4a:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    ba4c:	6823      	ldr	r3, [r4, #0]
    ba4e:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    ba52:	4313      	orrs	r3, r2
    ba54:	6023      	str	r3, [r4, #0]
	list->head = node;
    ba56:	602c      	str	r4, [r5, #0]
	return list->tail;
    ba58:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
    ba5a:	b973      	cbnz	r3, ba7a <queue_insert+0xbe>
	list->tail = node;
    ba5c:	606c      	str	r4, [r5, #4]
}
    ba5e:	e00c      	b.n	ba7a <queue_insert+0xbe>
	list->tail = node;
    ba60:	606c      	str	r4, [r5, #4]
	list->head = node;
    ba62:	602c      	str	r4, [r5, #0]
}
    ba64:	e009      	b.n	ba7a <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    ba66:	6822      	ldr	r2, [r4, #0]
    ba68:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    ba6c:	4313      	orrs	r3, r2
    ba6e:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    ba70:	6833      	ldr	r3, [r6, #0]
    ba72:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    ba76:	431c      	orrs	r4, r3
    ba78:	6034      	str	r4, [r6, #0]
	z_reschedule(&queue->lock, key);
    ba7a:	4649      	mov	r1, r9
    ba7c:	4640      	mov	r0, r8
    ba7e:	f7fc fec7 	bl	8810 <z_reschedule>
	return 0;
    ba82:	2000      	movs	r0, #0
}
    ba84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000ba88 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    ba88:	b160      	cbz	r0, baa4 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    ba8a:	6803      	ldr	r3, [r0, #0]
    ba8c:	f013 0f03 	tst.w	r3, #3
    ba90:	d008      	beq.n	baa4 <z_queue_node_peek+0x1c>
{
    ba92:	b510      	push	{r4, lr}
		ret = anode->data;
    ba94:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    ba96:	b909      	cbnz	r1, ba9c <z_queue_node_peek+0x14>
		ret = anode->data;
    ba98:	4620      	mov	r0, r4
}
    ba9a:	bd10      	pop	{r4, pc}
			k_free(anode);
    ba9c:	f000 fa75 	bl	bf8a <k_free>
		ret = anode->data;
    baa0:	4620      	mov	r0, r4
    baa2:	e7fa      	b.n	ba9a <z_queue_node_peek+0x12>
}
    baa4:	4770      	bx	lr

0000baa6 <k_queue_append>:
{
    baa6:	b500      	push	{lr}
    baa8:	b083      	sub	sp, #12
    baaa:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    baac:	2301      	movs	r3, #1
    baae:	9300      	str	r3, [sp, #0]
    bab0:	2300      	movs	r3, #0
    bab2:	4619      	mov	r1, r3
    bab4:	f7ff ff82 	bl	b9bc <queue_insert>
}
    bab8:	b003      	add	sp, #12
    baba:	f85d fb04 	ldr.w	pc, [sp], #4

0000babe <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    babe:	b13a      	cbz	r2, bad0 <z_impl_k_sem_init+0x12>
    bac0:	428a      	cmp	r2, r1
    bac2:	d308      	bcc.n	bad6 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    bac4:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    bac6:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    bac8:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    baca:	6040      	str	r0, [r0, #4]
	return 0;
    bacc:	2000      	movs	r0, #0
    bace:	4770      	bx	lr
		return -EINVAL;
    bad0:	f06f 0015 	mvn.w	r0, #21
    bad4:	4770      	bx	lr
    bad6:	f06f 0015 	mvn.w	r0, #21
}
    bada:	4770      	bx	lr

0000badc <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    badc:	2300      	movs	r3, #0
    bade:	6003      	str	r3, [r0, #0]
    bae0:	6083      	str	r3, [r0, #8]
    bae2:	60c3      	str	r3, [r0, #12]
    bae4:	6041      	str	r1, [r0, #4]
}
    bae6:	4770      	bx	lr

0000bae8 <k_work_submit_to_queue>:
{
    bae8:	b530      	push	{r4, r5, lr}
    baea:	b083      	sub	sp, #12
    baec:	9001      	str	r0, [sp, #4]
    baee:	4608      	mov	r0, r1
	__asm__ volatile(
    baf0:	f04f 0320 	mov.w	r3, #32
    baf4:	f3ef 8511 	mrs	r5, BASEPRI
    baf8:	f383 8812 	msr	BASEPRI_MAX, r3
    bafc:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    bb00:	a901      	add	r1, sp, #4
    bb02:	f7fc fcc5 	bl	8490 <submit_to_queue_locked>
    bb06:	4604      	mov	r4, r0
	__asm__ volatile(
    bb08:	f385 8811 	msr	BASEPRI, r5
    bb0c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    bb10:	2800      	cmp	r0, #0
    bb12:	dc02      	bgt.n	bb1a <k_work_submit_to_queue+0x32>
}
    bb14:	4620      	mov	r0, r4
    bb16:	b003      	add	sp, #12
    bb18:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
    bb1a:	f7fd f9d9 	bl	8ed0 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    bb1e:	2800      	cmp	r0, #0
    bb20:	d0f8      	beq.n	bb14 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
    bb22:	f7fd f90f 	bl	8d44 <z_impl_k_yield>
	return ret;
    bb26:	e7f5      	b.n	bb14 <k_work_submit_to_queue+0x2c>

0000bb28 <thread_active_elsewhere>:
}
    bb28:	2000      	movs	r0, #0
    bb2a:	4770      	bx	lr

0000bb2c <pended_on_thread>:
}
    bb2c:	6880      	ldr	r0, [r0, #8]
    bb2e:	4770      	bx	lr

0000bb30 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    bb30:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    bb34:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    bb38:	4283      	cmp	r3, r0
    bb3a:	d001      	beq.n	bb40 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    bb3c:	1ac0      	subs	r0, r0, r3
    bb3e:	4770      	bx	lr
	return 0;
    bb40:	2000      	movs	r0, #0
}
    bb42:	4770      	bx	lr

0000bb44 <z_reschedule_irqlock>:
{
    bb44:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    bb46:	4603      	mov	r3, r0
    bb48:	b920      	cbnz	r0, bb54 <z_reschedule_irqlock+0x10>
    bb4a:	f3ef 8205 	mrs	r2, IPSR
    bb4e:	b942      	cbnz	r2, bb62 <z_reschedule_irqlock+0x1e>
    bb50:	2201      	movs	r2, #1
    bb52:	e000      	b.n	bb56 <z_reschedule_irqlock+0x12>
    bb54:	2200      	movs	r2, #0
	if (resched(key)) {
    bb56:	b932      	cbnz	r2, bb66 <z_reschedule_irqlock+0x22>
    bb58:	f383 8811 	msr	BASEPRI, r3
    bb5c:	f3bf 8f6f 	isb	sy
}
    bb60:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    bb62:	2200      	movs	r2, #0
    bb64:	e7f7      	b.n	bb56 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    bb66:	4618      	mov	r0, r3
    bb68:	f7f6 fea8 	bl	28bc <arch_swap>
	return ret;
    bb6c:	e7f8      	b.n	bb60 <z_reschedule_irqlock+0x1c>

0000bb6e <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    bb6e:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    bb70:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    bb72:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    bb74:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    bb76:	2300      	movs	r3, #0
    bb78:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    bb7a:	604b      	str	r3, [r1, #4]
}
    bb7c:	4770      	bx	lr

0000bb7e <z_unpend_thread>:
{
    bb7e:	b538      	push	{r3, r4, r5, lr}
    bb80:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    bb82:	2300      	movs	r3, #0
	__asm__ volatile(
    bb84:	f04f 0220 	mov.w	r2, #32
    bb88:	f3ef 8511 	mrs	r5, BASEPRI
    bb8c:	f382 8812 	msr	BASEPRI_MAX, r2
    bb90:	f3bf 8f6f 	isb	sy
    bb94:	b98b      	cbnz	r3, bbba <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    bb96:	4620      	mov	r0, r4
    bb98:	f7ff ffc8 	bl	bb2c <pended_on_thread>
    bb9c:	4621      	mov	r1, r4
    bb9e:	f7ff ffe6 	bl	bb6e <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    bba2:	7b63      	ldrb	r3, [r4, #13]
    bba4:	f023 0302 	bic.w	r3, r3, #2
    bba8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    bbaa:	2300      	movs	r3, #0
    bbac:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    bbae:	f385 8811 	msr	BASEPRI, r5
    bbb2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    bbb6:	2301      	movs	r3, #1
    bbb8:	e7ec      	b.n	bb94 <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
    bbba:	f104 0018 	add.w	r0, r4, #24
    bbbe:	f000 f931 	bl	be24 <z_abort_timeout>
}
    bbc2:	bd38      	pop	{r3, r4, r5, pc}

0000bbc4 <z_priq_dumb_best>:
{
    bbc4:	4603      	mov	r3, r0
	return list->head == list;
    bbc6:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bbc8:	4283      	cmp	r3, r0
    bbca:	d000      	beq.n	bbce <z_priq_dumb_best+0xa>
}
    bbcc:	4770      	bx	lr
	struct k_thread *thread = NULL;
    bbce:	2000      	movs	r0, #0
	return thread;
    bbd0:	e7fc      	b.n	bbcc <z_priq_dumb_best+0x8>

0000bbd2 <z_ready_thread>:
{
    bbd2:	b538      	push	{r3, r4, r5, lr}
    bbd4:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    bbd6:	2300      	movs	r3, #0
	__asm__ volatile(
    bbd8:	f04f 0220 	mov.w	r2, #32
    bbdc:	f3ef 8511 	mrs	r5, BASEPRI
    bbe0:	f382 8812 	msr	BASEPRI_MAX, r2
    bbe4:	f3bf 8f6f 	isb	sy
    bbe8:	e007      	b.n	bbfa <z_ready_thread+0x28>
			ready_thread(thread);
    bbea:	4620      	mov	r0, r4
    bbec:	f7fc fefa 	bl	89e4 <ready_thread>
	__asm__ volatile(
    bbf0:	f385 8811 	msr	BASEPRI, r5
    bbf4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    bbf8:	2301      	movs	r3, #1
    bbfa:	b92b      	cbnz	r3, bc08 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    bbfc:	4620      	mov	r0, r4
    bbfe:	f7ff ff93 	bl	bb28 <thread_active_elsewhere>
    bc02:	2800      	cmp	r0, #0
    bc04:	d1f4      	bne.n	bbf0 <z_ready_thread+0x1e>
    bc06:	e7f0      	b.n	bbea <z_ready_thread+0x18>
}
    bc08:	bd38      	pop	{r3, r4, r5, pc}

0000bc0a <z_thread_timeout>:
{
    bc0a:	b570      	push	{r4, r5, r6, lr}
    bc0c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    bc0e:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    bc12:	2300      	movs	r3, #0
	__asm__ volatile(
    bc14:	f04f 0220 	mov.w	r2, #32
    bc18:	f3ef 8611 	mrs	r6, BASEPRI
    bc1c:	f382 8812 	msr	BASEPRI_MAX, r2
    bc20:	f3bf 8f6f 	isb	sy
    bc24:	e019      	b.n	bc5a <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    bc26:	4628      	mov	r0, r5
    bc28:	f7ff ff80 	bl	bb2c <pended_on_thread>
    bc2c:	4629      	mov	r1, r5
    bc2e:	f7ff ff9e 	bl	bb6e <z_priq_dumb_remove>
    bc32:	7b6b      	ldrb	r3, [r5, #13]
    bc34:	f023 0302 	bic.w	r3, r3, #2
    bc38:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    bc3a:	2300      	movs	r3, #0
    bc3c:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    bc3e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    bc42:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    bc46:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    bc4a:	4628      	mov	r0, r5
    bc4c:	f7fc feca 	bl	89e4 <ready_thread>
	__asm__ volatile(
    bc50:	f386 8811 	msr	BASEPRI, r6
    bc54:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    bc58:	2301      	movs	r3, #1
    bc5a:	b94b      	cbnz	r3, bc70 <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    bc5c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    bc60:	f013 0f28 	tst.w	r3, #40	; 0x28
    bc64:	d1f4      	bne.n	bc50 <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
    bc66:	f854 3c10 	ldr.w	r3, [r4, #-16]
    bc6a:	2b00      	cmp	r3, #0
    bc6c:	d1db      	bne.n	bc26 <z_thread_timeout+0x1c>
    bc6e:	e7e6      	b.n	bc3e <z_thread_timeout+0x34>
}
    bc70:	bd70      	pop	{r4, r5, r6, pc}

0000bc72 <add_to_waitq_locked>:
{
    bc72:	b570      	push	{r4, r5, r6, lr}
    bc74:	4605      	mov	r5, r0
    bc76:	460e      	mov	r6, r1
	unready_thread(thread);
    bc78:	f7fc ff12 	bl	8aa0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    bc7c:	7b6b      	ldrb	r3, [r5, #13]
    bc7e:	f043 0302 	orr.w	r3, r3, #2
    bc82:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    bc84:	b1b6      	cbz	r6, bcb4 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    bc86:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    bc88:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bc8a:	42a6      	cmp	r6, r4
    bc8c:	d019      	beq.n	bcc2 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bc8e:	b164      	cbz	r4, bcaa <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    bc90:	4621      	mov	r1, r4
    bc92:	4628      	mov	r0, r5
    bc94:	f7ff ff4c 	bl	bb30 <z_sched_prio_cmp>
    bc98:	2800      	cmp	r0, #0
    bc9a:	dc0c      	bgt.n	bcb6 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    bc9c:	b12c      	cbz	r4, bcaa <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    bc9e:	6873      	ldr	r3, [r6, #4]
    bca0:	429c      	cmp	r4, r3
    bca2:	d002      	beq.n	bcaa <add_to_waitq_locked+0x38>
    bca4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bca6:	2c00      	cmp	r4, #0
    bca8:	d1f1      	bne.n	bc8e <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    bcaa:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    bcac:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    bcae:	606b      	str	r3, [r5, #4]
	tail->next = node;
    bcb0:	601d      	str	r5, [r3, #0]
	list->tail = node;
    bcb2:	6075      	str	r5, [r6, #4]
}
    bcb4:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    bcb6:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    bcb8:	606b      	str	r3, [r5, #4]
	node->next = successor;
    bcba:	602c      	str	r4, [r5, #0]
	prev->next = node;
    bcbc:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    bcbe:	6065      	str	r5, [r4, #4]
}
    bcc0:	e7f8      	b.n	bcb4 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bcc2:	2400      	movs	r4, #0
    bcc4:	e7e3      	b.n	bc8e <add_to_waitq_locked+0x1c>

0000bcc6 <pend>:
{
    bcc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bcca:	4605      	mov	r5, r0
    bccc:	460f      	mov	r7, r1
    bcce:	4691      	mov	r9, r2
    bcd0:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    bcd2:	2400      	movs	r4, #0
	__asm__ volatile(
    bcd4:	f04f 0320 	mov.w	r3, #32
    bcd8:	f3ef 8611 	mrs	r6, BASEPRI
    bcdc:	f383 8812 	msr	BASEPRI_MAX, r3
    bce0:	f3bf 8f6f 	isb	sy
    bce4:	b94c      	cbnz	r4, bcfa <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
    bce6:	4639      	mov	r1, r7
    bce8:	4628      	mov	r0, r5
    bcea:	f7ff ffc2 	bl	bc72 <add_to_waitq_locked>
	__asm__ volatile(
    bcee:	f386 8811 	msr	BASEPRI, r6
    bcf2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    bcf6:	2401      	movs	r4, #1
    bcf8:	e7f4      	b.n	bce4 <pend+0x1e>
	add_thread_timeout(thread, timeout);
    bcfa:	464a      	mov	r2, r9
    bcfc:	4643      	mov	r3, r8
    bcfe:	4628      	mov	r0, r5
    bd00:	f7fc fd24 	bl	874c <add_thread_timeout>
}
    bd04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000bd08 <z_unpend_first_thread>:
{
    bd08:	b570      	push	{r4, r5, r6, lr}
    bd0a:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    bd0c:	2300      	movs	r3, #0
	__asm__ volatile(
    bd0e:	f04f 0220 	mov.w	r2, #32
    bd12:	f3ef 8511 	mrs	r5, BASEPRI
    bd16:	f382 8812 	msr	BASEPRI_MAX, r2
    bd1a:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    bd1e:	461c      	mov	r4, r3
    bd20:	e013      	b.n	bd4a <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    bd22:	f7ff ff03 	bl	bb2c <pended_on_thread>
    bd26:	4621      	mov	r1, r4
    bd28:	f7ff ff21 	bl	bb6e <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    bd2c:	7b63      	ldrb	r3, [r4, #13]
    bd2e:	f023 0302 	bic.w	r3, r3, #2
    bd32:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    bd34:	2300      	movs	r3, #0
    bd36:	60a3      	str	r3, [r4, #8]
    bd38:	f104 0018 	add.w	r0, r4, #24
    bd3c:	f000 f872 	bl	be24 <z_abort_timeout>
	__asm__ volatile(
    bd40:	f385 8811 	msr	BASEPRI, r5
    bd44:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    bd48:	2301      	movs	r3, #1
    bd4a:	b933      	cbnz	r3, bd5a <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    bd4c:	4630      	mov	r0, r6
    bd4e:	f7ff ff39 	bl	bbc4 <z_priq_dumb_best>
		if (thread != NULL) {
    bd52:	4604      	mov	r4, r0
    bd54:	2800      	cmp	r0, #0
    bd56:	d1e4      	bne.n	bd22 <z_unpend_first_thread+0x1a>
    bd58:	e7f2      	b.n	bd40 <z_unpend_first_thread+0x38>
}
    bd5a:	4620      	mov	r0, r4
    bd5c:	bd70      	pop	{r4, r5, r6, pc}

0000bd5e <z_unpend_all>:
{
    bd5e:	b538      	push	{r3, r4, r5, lr}
    bd60:	4605      	mov	r5, r0
	int need_sched = 0;
    bd62:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    bd64:	e006      	b.n	bd74 <z_unpend_all+0x16>
		z_unpend_thread(thread);
    bd66:	4620      	mov	r0, r4
    bd68:	f7ff ff09 	bl	bb7e <z_unpend_thread>
		z_ready_thread(thread);
    bd6c:	4620      	mov	r0, r4
    bd6e:	f7ff ff30 	bl	bbd2 <z_ready_thread>
		need_sched = 1;
    bd72:	2001      	movs	r0, #1
	return list->head == list;
    bd74:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bd76:	42a5      	cmp	r5, r4
    bd78:	d001      	beq.n	bd7e <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    bd7a:	2c00      	cmp	r4, #0
    bd7c:	d1f3      	bne.n	bd66 <z_unpend_all+0x8>
}
    bd7e:	bd38      	pop	{r3, r4, r5, pc}

0000bd80 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    bd80:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    bd82:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    bd84:	6083      	str	r3, [r0, #8]
}
    bd86:	4770      	bx	lr

0000bd88 <z_sched_wake>:
{
    bd88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bd8c:	4606      	mov	r6, r0
    bd8e:	4688      	mov	r8, r1
    bd90:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
    bd92:	2300      	movs	r3, #0
	__asm__ volatile(
    bd94:	f04f 0220 	mov.w	r2, #32
    bd98:	f3ef 8511 	mrs	r5, BASEPRI
    bd9c:	f382 8812 	msr	BASEPRI_MAX, r2
    bda0:	f3bf 8f6f 	isb	sy
	bool ret = false;
    bda4:	4699      	mov	r9, r3
    bda6:	e01b      	b.n	bde0 <z_sched_wake+0x58>
    bda8:	f8c0 80ac 	str.w	r8, [r0, #172]	; 0xac
	thread->base.swap_data = data;
    bdac:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    bdae:	f7ff febd 	bl	bb2c <pended_on_thread>
    bdb2:	4621      	mov	r1, r4
    bdb4:	f7ff fedb 	bl	bb6e <z_priq_dumb_remove>
    bdb8:	7b63      	ldrb	r3, [r4, #13]
    bdba:	f023 0302 	bic.w	r3, r3, #2
    bdbe:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    bdc0:	2300      	movs	r3, #0
    bdc2:	60a3      	str	r3, [r4, #8]
    bdc4:	f104 0018 	add.w	r0, r4, #24
    bdc8:	f000 f82c 	bl	be24 <z_abort_timeout>
			ready_thread(thread);
    bdcc:	4620      	mov	r0, r4
    bdce:	f7fc fe09 	bl	89e4 <ready_thread>
			ret = true;
    bdd2:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
    bdd6:	f385 8811 	msr	BASEPRI, r5
    bdda:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    bdde:	2301      	movs	r3, #1
    bde0:	b933      	cbnz	r3, bdf0 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
    bde2:	4630      	mov	r0, r6
    bde4:	f7ff feee 	bl	bbc4 <z_priq_dumb_best>
		if (thread != NULL) {
    bde8:	4604      	mov	r4, r0
    bdea:	2800      	cmp	r0, #0
    bdec:	d1dc      	bne.n	bda8 <z_sched_wake+0x20>
    bdee:	e7f2      	b.n	bdd6 <z_sched_wake+0x4e>
}
    bdf0:	4648      	mov	r0, r9
    bdf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000bdf6 <remove_timeout>:
{
    bdf6:	b538      	push	{r3, r4, r5, lr}
    bdf8:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    bdfa:	f7fd f8d7 	bl	8fac <next>
    bdfe:	b148      	cbz	r0, be14 <remove_timeout+0x1e>
    be00:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    be02:	6920      	ldr	r0, [r4, #16]
    be04:	6965      	ldr	r5, [r4, #20]
    be06:	6913      	ldr	r3, [r2, #16]
    be08:	6951      	ldr	r1, [r2, #20]
    be0a:	181b      	adds	r3, r3, r0
    be0c:	eb45 0101 	adc.w	r1, r5, r1
    be10:	6113      	str	r3, [r2, #16]
    be12:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    be14:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    be16:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    be18:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    be1a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    be1c:	2300      	movs	r3, #0
    be1e:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    be20:	6063      	str	r3, [r4, #4]
}
    be22:	bd38      	pop	{r3, r4, r5, pc}

0000be24 <z_abort_timeout>:
{
    be24:	b570      	push	{r4, r5, r6, lr}
    be26:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    be28:	2300      	movs	r3, #0
	__asm__ volatile(
    be2a:	f04f 0220 	mov.w	r2, #32
    be2e:	f3ef 8611 	mrs	r6, BASEPRI
    be32:	f382 8812 	msr	BASEPRI_MAX, r2
    be36:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    be3a:	f06f 0015 	mvn.w	r0, #21
    be3e:	e008      	b.n	be52 <z_abort_timeout+0x2e>
			remove_timeout(to);
    be40:	4620      	mov	r0, r4
    be42:	f7ff ffd8 	bl	bdf6 <remove_timeout>
			ret = 0;
    be46:	4628      	mov	r0, r5
	__asm__ volatile(
    be48:	f386 8811 	msr	BASEPRI, r6
    be4c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    be50:	2301      	movs	r3, #1
    be52:	461d      	mov	r5, r3
    be54:	b91b      	cbnz	r3, be5e <z_abort_timeout+0x3a>
	return node->next != NULL;
    be56:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    be58:	2b00      	cmp	r3, #0
    be5a:	d1f1      	bne.n	be40 <z_abort_timeout+0x1c>
    be5c:	e7f4      	b.n	be48 <z_abort_timeout+0x24>
}
    be5e:	bd70      	pop	{r4, r5, r6, pc}

0000be60 <z_get_next_timeout_expiry>:
{
    be60:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    be62:	2300      	movs	r3, #0
	__asm__ volatile(
    be64:	f04f 0220 	mov.w	r2, #32
    be68:	f3ef 8411 	mrs	r4, BASEPRI
    be6c:	f382 8812 	msr	BASEPRI_MAX, r2
    be70:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    be74:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
    be78:	b93b      	cbnz	r3, be8a <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
    be7a:	f7fd f8af 	bl	8fdc <next_timeout>
	__asm__ volatile(
    be7e:	f384 8811 	msr	BASEPRI, r4
    be82:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    be86:	2301      	movs	r3, #1
    be88:	e7f6      	b.n	be78 <z_get_next_timeout_expiry+0x18>
}
    be8a:	bd10      	pop	{r4, pc}

0000be8c <z_set_timeout_expiry>:
{
    be8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    be8e:	4606      	mov	r6, r0
    be90:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    be92:	2300      	movs	r3, #0
	__asm__ volatile(
    be94:	f04f 0220 	mov.w	r2, #32
    be98:	f3ef 8511 	mrs	r5, BASEPRI
    be9c:	f382 8812 	msr	BASEPRI_MAX, r2
    bea0:	f3bf 8f6f 	isb	sy
    bea4:	e00a      	b.n	bebc <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    bea6:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    bea8:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    beac:	2801      	cmp	r0, #1
    beae:	dd00      	ble.n	beb2 <z_set_timeout_expiry+0x26>
    beb0:	b97c      	cbnz	r4, bed2 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    beb2:	f385 8811 	msr	BASEPRI, r5
    beb6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    beba:	2301      	movs	r3, #1
    bebc:	461c      	mov	r4, r3
    bebe:	b97b      	cbnz	r3, bee0 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    bec0:	f7fd f88c 	bl	8fdc <next_timeout>
			      || (ticks <= next_to);
    bec4:	f1b0 3fff 	cmp.w	r0, #4294967295
    bec8:	d0ed      	beq.n	bea6 <z_set_timeout_expiry+0x1a>
    beca:	42b0      	cmp	r0, r6
    becc:	dbec      	blt.n	bea8 <z_set_timeout_expiry+0x1c>
    bece:	2401      	movs	r4, #1
    bed0:	e7ea      	b.n	bea8 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    bed2:	4639      	mov	r1, r7
    bed4:	42b0      	cmp	r0, r6
    bed6:	bfa8      	it	ge
    bed8:	4630      	movge	r0, r6
    beda:	f7f9 f82d 	bl	4f38 <sys_clock_set_timeout>
    bede:	e7e8      	b.n	beb2 <z_set_timeout_expiry+0x26>
}
    bee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000bee2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    bee2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    bee4:	f7fd f9ac 	bl	9240 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    bee8:	bd08      	pop	{r3, pc}

0000beea <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    beea:	b900      	cbnz	r0, beee <z_impl_k_busy_wait+0x4>
    beec:	4770      	bx	lr
{
    beee:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    bef0:	f7f5 f8f0 	bl	10d4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    bef4:	bd08      	pop	{r3, pc}

0000bef6 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
    bef6:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    bef8:	f1b1 3fff 	cmp.w	r1, #4294967295
    befc:	bf08      	it	eq
    befe:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    bf02:	d024      	beq.n	bf4e <sys_clock_timeout_end_calc+0x58>
    bf04:	4604      	mov	r4, r0
    bf06:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    bf08:	ea54 0105 	orrs.w	r1, r4, r5
    bf0c:	d00d      	beq.n	bf2a <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    bf0e:	f06f 0101 	mvn.w	r1, #1
    bf12:	1a0a      	subs	r2, r1, r0
    bf14:	f04f 31ff 	mov.w	r1, #4294967295
    bf18:	eb61 0305 	sbc.w	r3, r1, r5
    bf1c:	2a00      	cmp	r2, #0
    bf1e:	f173 0100 	sbcs.w	r1, r3, #0
    bf22:	db05      	blt.n	bf30 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
    bf24:	4610      	mov	r0, r2
    bf26:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    bf28:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
    bf2a:	f7fd f989 	bl	9240 <sys_clock_tick_get>
    bf2e:	e7fb      	b.n	bf28 <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
    bf30:	f7fd f986 	bl	9240 <sys_clock_tick_get>
    bf34:	4623      	mov	r3, r4
    bf36:	462a      	mov	r2, r5
    bf38:	2c01      	cmp	r4, #1
    bf3a:	f175 0400 	sbcs.w	r4, r5, #0
    bf3e:	db03      	blt.n	bf48 <sys_clock_timeout_end_calc+0x52>
    bf40:	18c0      	adds	r0, r0, r3
    bf42:	eb42 0101 	adc.w	r1, r2, r1
    bf46:	e7ef      	b.n	bf28 <sys_clock_timeout_end_calc+0x32>
    bf48:	2301      	movs	r3, #1
    bf4a:	2200      	movs	r2, #0
    bf4c:	e7f8      	b.n	bf40 <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
    bf4e:	f04f 30ff 	mov.w	r0, #4294967295
    bf52:	4601      	mov	r1, r0
    bf54:	e7e8      	b.n	bf28 <sys_clock_timeout_end_calc+0x32>

0000bf56 <z_heap_aligned_alloc>:
{
    bf56:	b5d0      	push	{r4, r6, r7, lr}
    bf58:	b082      	sub	sp, #8
    bf5a:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    bf5c:	2000      	movs	r0, #0
    bf5e:	2304      	movs	r3, #4
    bf60:	18d2      	adds	r2, r2, r3
    bf62:	d20e      	bcs.n	bf82 <z_heap_aligned_alloc+0x2c>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
    bf64:	b978      	cbnz	r0, bf86 <z_heap_aligned_alloc+0x30>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    bf66:	2600      	movs	r6, #0
    bf68:	2700      	movs	r7, #0
    bf6a:	e9cd 6700 	strd	r6, r7, [sp]
    bf6e:	f041 0104 	orr.w	r1, r1, #4
    bf72:	4620      	mov	r0, r4
    bf74:	f000 f81a 	bl	bfac <k_heap_aligned_alloc>
	if (mem == NULL) {
    bf78:	b108      	cbz	r0, bf7e <z_heap_aligned_alloc+0x28>
	*heap_ref = heap;
    bf7a:	f840 4b04 	str.w	r4, [r0], #4
}
    bf7e:	b002      	add	sp, #8
    bf80:	bdd0      	pop	{r4, r6, r7, pc}
    bf82:	2001      	movs	r0, #1
    bf84:	e7ee      	b.n	bf64 <z_heap_aligned_alloc+0xe>
		return NULL;
    bf86:	2000      	movs	r0, #0
    bf88:	e7f9      	b.n	bf7e <z_heap_aligned_alloc+0x28>

0000bf8a <k_free>:
	if (ptr != NULL) {
    bf8a:	b130      	cbz	r0, bf9a <k_free+0x10>
{
    bf8c:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
    bf8e:	1f01      	subs	r1, r0, #4
    bf90:	f850 0c04 	ldr.w	r0, [r0, #-4]
    bf94:	f000 f855 	bl	c042 <k_heap_free>
}
    bf98:	bd08      	pop	{r3, pc}
    bf9a:	4770      	bx	lr

0000bf9c <k_heap_init>:
{
    bf9c:	b510      	push	{r4, lr}
    bf9e:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    bfa2:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    bfa4:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    bfa6:	f7fe f829 	bl	9ffc <sys_heap_init>
}
    bfaa:	bd10      	pop	{r4, pc}

0000bfac <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    bfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bfb0:	b087      	sub	sp, #28
    bfb2:	4680      	mov	r8, r0
    bfb4:	9103      	str	r1, [sp, #12]
    bfb6:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    bfb8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    bfbc:	f7ff ff9b 	bl	bef6 <sys_clock_timeout_end_calc>
    bfc0:	4681      	mov	r9, r0
    bfc2:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    bfc4:	f108 0314 	add.w	r3, r8, #20
    bfc8:	9305      	str	r3, [sp, #20]
	__asm__ volatile(
    bfca:	f04f 0320 	mov.w	r3, #32
    bfce:	f3ef 8511 	mrs	r5, BASEPRI
    bfd2:	f383 8812 	msr	BASEPRI_MAX, r3
    bfd6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
    bfda:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
    bfde:	4654      	mov	r4, sl

	while (ret == NULL) {
    bfe0:	e00f      	b.n	c002 <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    bfe2:	e9cd 6700 	strd	r6, r7, [sp]
    bfe6:	f108 020c 	add.w	r2, r8, #12
    bfea:	4629      	mov	r1, r5
    bfec:	9805      	ldr	r0, [sp, #20]
    bfee:	f7fc fd73 	bl	8ad8 <z_pend_curr>
    bff2:	f04f 0320 	mov.w	r3, #32
    bff6:	f3ef 8511 	mrs	r5, BASEPRI
    bffa:	f383 8812 	msr	BASEPRI_MAX, r3
    bffe:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
    c002:	b9b4      	cbnz	r4, c032 <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    c004:	9a04      	ldr	r2, [sp, #16]
    c006:	9903      	ldr	r1, [sp, #12]
    c008:	4640      	mov	r0, r8
    c00a:	f7fd ff69 	bl	9ee0 <sys_heap_aligned_alloc>
    c00e:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
    c010:	f7fd f916 	bl	9240 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    c014:	b96c      	cbnz	r4, c032 <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
    c016:	ebb9 0600 	subs.w	r6, r9, r0
    c01a:	eb6b 0701 	sbc.w	r7, fp, r1
    c01e:	2e01      	cmp	r6, #1
    c020:	f177 0300 	sbcs.w	r3, r7, #0
    c024:	db05      	blt.n	c032 <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
    c026:	f1ba 0f00 	cmp.w	sl, #0
    c02a:	d1da      	bne.n	bfe2 <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
    c02c:	f04f 0a01 	mov.w	sl, #1
    c030:	e7d7      	b.n	bfe2 <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
    c032:	f385 8811 	msr	BASEPRI, r5
    c036:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    c03a:	4620      	mov	r0, r4
    c03c:	b007      	add	sp, #28
    c03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c042 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    c042:	b570      	push	{r4, r5, r6, lr}
    c044:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    c046:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    c04a:	f04f 0320 	mov.w	r3, #32
    c04e:	f3ef 8511 	mrs	r5, BASEPRI
    c052:	f383 8812 	msr	BASEPRI_MAX, r3
    c056:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
    c05a:	f7fd fedf 	bl	9e1c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    c05e:	f104 000c 	add.w	r0, r4, #12
    c062:	f7ff fe7c 	bl	bd5e <z_unpend_all>
    c066:	b920      	cbnz	r0, c072 <k_heap_free+0x30>
	__asm__ volatile(
    c068:	f385 8811 	msr	BASEPRI, r5
    c06c:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    c070:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
    c072:	4629      	mov	r1, r5
    c074:	4630      	mov	r0, r6
    c076:	f7fc fbcb 	bl	8810 <z_reschedule>
    c07a:	e7f9      	b.n	c070 <k_heap_free+0x2e>

0000c07c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    c07c:	4770      	bx	lr
	...

0000c080 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    c080:	f7f9 b832 	b.w	50e8 <SystemInit>
