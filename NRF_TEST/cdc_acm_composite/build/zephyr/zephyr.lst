
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20002fe8 	.word	0x20002fe8
}
   4:	00004725 	.word	0x00004725
   8:	0000d497 	.word	0x0000d497
   c:	000046dd 	.word	0x000046dd
  10:	000046dd 	.word	0x000046dd
  14:	000046dd 	.word	0x000046dd
  18:	000046dd 	.word	0x000046dd
  1c:	000046dd 	.word	0x000046dd
	...
  2c:	00003e7d 	.word	0x00003e7d
  30:	000046dd 	.word	0x000046dd
  34:	00000000 	.word	0x00000000
  38:	00003e21 	.word	0x00003e21
  3c:	000046dd 	.word	0x000046dd

00000040 <_irq_vector_table>:
  40:	00003f09 00003f09 00003f09 00003f09     .?...?...?...?..
  50:	00003f09 00003f09 00003f09 00003f09     .?...?...?...?..
  60:	00003f09 00003f09 00003f09 00003f09     .?...?...?...?..
  70:	00003f09 00003f09 00003f09 00003f09     .?...?...?...?..
  80:	00003f09 00003f09 00003f09 00003f09     .?...?...?...?..
  90:	00003f09 00003f09 00003f09 00003f09     .?...?...?...?..
  a0:	00003f09 00003f09 00003f09 00003f09     .?...?...?...?..
  b0:	00003f09 00003f09 00003f09 00003f09     .?...?...?...?..
  c0:	00003f09 00003f09 00003f09 00003f09     .?...?...?...?..
  d0:	00003f09 00003f09 00003f09 00003f09     .?...?...?...?..
  e0:	00003f09 00003f09 00003f09 00003f09     .?...?...?...?..
  f0:	00003f09 00003f09 00003f09 00003f09     .?...?...?...?..
 100:	00003f09 00003f09 00003f09 00003f09     .?...?...?...?..
 110:	00003f09 00003f09 00003f09 00003f09     .?...?...?...?..
 120:	00003f09 00003f09 00003f09 00003f09     .?...?...?...?..
 130:	00003f09 00003f09 00003f09 00003f09     .?...?...?...?..
 140:	00003f09 00003f09 00003f09 00003f09     .?...?...?...?..
 150:	00003f09                                .?..

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
     164:	f04f 30ff 	movne.w	r0, #4294967295
     168:	f000 b970 	b.w	44c <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f806 	bl	184 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__udivmoddi4>:
     184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     188:	9e08      	ldr	r6, [sp, #32]
     18a:	460d      	mov	r5, r1
     18c:	4604      	mov	r4, r0
     18e:	468a      	mov	sl, r1
     190:	2b00      	cmp	r3, #0
     192:	d17f      	bne.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     194:	428a      	cmp	r2, r1
     196:	4617      	mov	r7, r2
     198:	d941      	bls.n	21e <CONFIG_USB_CDC_ACM_RINGBUF_SIZE+0x1e>
     19a:	fab2 f282 	clz	r2, r2
     19e:	b14a      	cbz	r2, 1b4 <__udivmoddi4+0x30>
     1a0:	f1c2 0120 	rsb	r1, r2, #32
     1a4:	fa05 f302 	lsl.w	r3, r5, r2
     1a8:	4097      	lsls	r7, r2
     1aa:	4094      	lsls	r4, r2
     1ac:	fa20 f101 	lsr.w	r1, r0, r1
     1b0:	ea41 0a03 	orr.w	sl, r1, r3
     1b4:	ea4f 4817 	mov.w	r8, r7, lsr #16
     1b8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     1bc:	fa1f f987 	uxth.w	r9, r7
     1c0:	fbba fef8 	udiv	lr, sl, r8
     1c4:	fb08 a31e 	mls	r3, r8, lr, sl
     1c8:	fb0e f109 	mul.w	r1, lr, r9
     1cc:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     1d0:	4299      	cmp	r1, r3
     1d2:	d906      	bls.n	1e2 <CONFIG_SRAM_SIZE+0x22>
     1d4:	18fb      	adds	r3, r7, r3
     1d6:	d202      	bcs.n	1de <CONFIG_SRAM_SIZE+0x1e>
     1d8:	4299      	cmp	r1, r3
     1da:	f200 8124 	bhi.w	426 <CONFIG_FLASH_SIZE+0x26>
     1de:	f10e 3eff 	add.w	lr, lr, #4294967295
     1e2:	1a59      	subs	r1, r3, r1
     1e4:	b2a3      	uxth	r3, r4
     1e6:	fbb1 f0f8 	udiv	r0, r1, r8
     1ea:	fb08 1110 	mls	r1, r8, r0, r1
     1ee:	fb00 f909 	mul.w	r9, r0, r9
     1f2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1f6:	45a1      	cmp	r9, r4
     1f8:	d905      	bls.n	206 <CONFIG_USB_CDC_ACM_RINGBUF_SIZE+0x6>
     1fa:	193c      	adds	r4, r7, r4
     1fc:	d202      	bcs.n	204 <CONFIG_USB_CDC_ACM_RINGBUF_SIZE+0x4>
     1fe:	45a1      	cmp	r9, r4
     200:	f200 810e 	bhi.w	420 <CONFIG_FLASH_SIZE+0x20>
     204:	3801      	subs	r0, #1
     206:	eba4 0409 	sub.w	r4, r4, r9
     20a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     20e:	2100      	movs	r1, #0
     210:	b11e      	cbz	r6, 21a <CONFIG_USB_CDC_ACM_RINGBUF_SIZE+0x1a>
     212:	40d4      	lsrs	r4, r2
     214:	2300      	movs	r3, #0
     216:	e9c6 4300 	strd	r4, r3, [r6]
     21a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     21e:	b902      	cbnz	r2, 222 <CONFIG_USB_CDC_ACM_RINGBUF_SIZE+0x22>
     220:	deff      	udf	#255	; 0xff
     222:	fab2 f282 	clz	r2, r2
     226:	2a00      	cmp	r2, #0
     228:	d14f      	bne.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     22a:	1bcb      	subs	r3, r1, r7
     22c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     230:	fa1f f887 	uxth.w	r8, r7
     234:	2101      	movs	r1, #1
     236:	0c25      	lsrs	r5, r4, #16
     238:	fbb3 fcfe 	udiv	ip, r3, lr
     23c:	fb0e 301c 	mls	r0, lr, ip, r3
     240:	462b      	mov	r3, r5
     242:	fb08 f90c 	mul.w	r9, r8, ip
     246:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     24a:	45a9      	cmp	r9, r5
     24c:	d90a      	bls.n	264 <CONFIG_USB_CDC_ACM_RINGBUF_SIZE+0x64>
     24e:	197d      	adds	r5, r7, r5
     250:	bf2c      	ite	cs
     252:	2301      	movcs	r3, #1
     254:	2300      	movcc	r3, #0
     256:	45a9      	cmp	r9, r5
     258:	d902      	bls.n	260 <CONFIG_USB_CDC_ACM_RINGBUF_SIZE+0x60>
     25a:	2b00      	cmp	r3, #0
     25c:	f000 80d9 	beq.w	412 <CONFIG_FLASH_SIZE+0x12>
     260:	f10c 3cff 	add.w	ip, ip, #4294967295
     264:	eba5 0509 	sub.w	r5, r5, r9
     268:	b2a3      	uxth	r3, r4
     26a:	fbb5 f0fe 	udiv	r0, r5, lr
     26e:	fb0e 5510 	mls	r5, lr, r0, r5
     272:	fb08 f800 	mul.w	r8, r8, r0
     276:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     27a:	45a0      	cmp	r8, r4
     27c:	d905      	bls.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     27e:	193c      	adds	r4, r7, r4
     280:	d202      	bcs.n	288 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8>
     282:	45a0      	cmp	r8, r4
     284:	f200 80c9 	bhi.w	41a <CONFIG_FLASH_SIZE+0x1a>
     288:	3801      	subs	r0, #1
     28a:	eba4 0408 	sub.w	r4, r4, r8
     28e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     292:	e7bd      	b.n	210 <CONFIG_USB_CDC_ACM_RINGBUF_SIZE+0x10>
     294:	428b      	cmp	r3, r1
     296:	d908      	bls.n	2aa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x2a>
     298:	2e00      	cmp	r6, #0
     29a:	f000 80b1 	beq.w	400 <CONFIG_FLASH_SIZE>
     29e:	2100      	movs	r1, #0
     2a0:	e9c6 0500 	strd	r0, r5, [r6]
     2a4:	4608      	mov	r0, r1
     2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2aa:	fab3 f183 	clz	r1, r3
     2ae:	2900      	cmp	r1, #0
     2b0:	d146      	bne.n	340 <__data_size+0x3>
     2b2:	42ab      	cmp	r3, r5
     2b4:	f0c0 80a7 	bcc.w	406 <CONFIG_FLASH_SIZE+0x6>
     2b8:	4282      	cmp	r2, r0
     2ba:	f240 80a4 	bls.w	406 <CONFIG_FLASH_SIZE+0x6>
     2be:	4608      	mov	r0, r1
     2c0:	2e00      	cmp	r6, #0
     2c2:	d0aa      	beq.n	21a <CONFIG_USB_CDC_ACM_RINGBUF_SIZE+0x1a>
     2c4:	e9c6 4a00 	strd	r4, sl, [r6]
     2c8:	e7a7      	b.n	21a <CONFIG_USB_CDC_ACM_RINGBUF_SIZE+0x1a>
     2ca:	f1c2 0020 	rsb	r0, r2, #32
     2ce:	4097      	lsls	r7, r2
     2d0:	fa01 f302 	lsl.w	r3, r1, r2
     2d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2d8:	40c1      	lsrs	r1, r0
     2da:	fa24 f500 	lsr.w	r5, r4, r0
     2de:	fa1f f887 	uxth.w	r8, r7
     2e2:	4094      	lsls	r4, r2
     2e4:	431d      	orrs	r5, r3
     2e6:	fbb1 f0fe 	udiv	r0, r1, lr
     2ea:	0c2b      	lsrs	r3, r5, #16
     2ec:	fb0e 1110 	mls	r1, lr, r0, r1
     2f0:	fb00 fc08 	mul.w	ip, r0, r8
     2f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f8:	459c      	cmp	ip, r3
     2fa:	d909      	bls.n	310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
     2fc:	18fb      	adds	r3, r7, r3
     2fe:	bf2c      	ite	cs
     300:	2101      	movcs	r1, #1
     302:	2100      	movcc	r1, #0
     304:	459c      	cmp	ip, r3
     306:	d902      	bls.n	30e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe>
     308:	2900      	cmp	r1, #0
     30a:	f000 8095 	beq.w	438 <CONFIG_FLASH_SIZE+0x38>
     30e:	3801      	subs	r0, #1
     310:	eba3 030c 	sub.w	r3, r3, ip
     314:	b2ad      	uxth	r5, r5
     316:	fbb3 f1fe 	udiv	r1, r3, lr
     31a:	fb0e 3311 	mls	r3, lr, r1, r3
     31e:	fb01 fc08 	mul.w	ip, r1, r8
     322:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     326:	45ac      	cmp	ip, r5
     328:	d905      	bls.n	336 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x36>
     32a:	197d      	adds	r5, r7, r5
     32c:	d202      	bcs.n	334 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x34>
     32e:	45ac      	cmp	ip, r5
     330:	f200 8089 	bhi.w	446 <CONFIG_FLASH_SIZE+0x46>
     334:	3901      	subs	r1, #1
     336:	eba5 030c 	sub.w	r3, r5, ip
     33a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     33e:	e77a      	b.n	236 <CONFIG_USB_CDC_ACM_RINGBUF_SIZE+0x36>
     340:	f1c1 0420 	rsb	r4, r1, #32
     344:	408b      	lsls	r3, r1
     346:	fa02 f701 	lsl.w	r7, r2, r1
     34a:	fa05 fc01 	lsl.w	ip, r5, r1
     34e:	40e2      	lsrs	r2, r4
     350:	fa20 f804 	lsr.w	r8, r0, r4
     354:	40e5      	lsrs	r5, r4
     356:	fa00 fe01 	lsl.w	lr, r0, r1
     35a:	4313      	orrs	r3, r2
     35c:	ea48 020c 	orr.w	r2, r8, ip
     360:	ea4f 4813 	mov.w	r8, r3, lsr #16
     364:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     368:	fa1f f983 	uxth.w	r9, r3
     36c:	fbb5 faf8 	udiv	sl, r5, r8
     370:	fb08 551a 	mls	r5, r8, sl, r5
     374:	fb0a f009 	mul.w	r0, sl, r9
     378:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     37c:	4560      	cmp	r0, ip
     37e:	d90a      	bls.n	396 <__data_size+0x59>
     380:	eb13 0c0c 	adds.w	ip, r3, ip
     384:	bf2c      	ite	cs
     386:	2501      	movcs	r5, #1
     388:	2500      	movcc	r5, #0
     38a:	4560      	cmp	r0, ip
     38c:	d901      	bls.n	392 <__data_size+0x55>
     38e:	2d00      	cmp	r5, #0
     390:	d055      	beq.n	43e <CONFIG_FLASH_SIZE+0x3e>
     392:	f10a 3aff 	add.w	sl, sl, #4294967295
     396:	ebac 0c00 	sub.w	ip, ip, r0
     39a:	b292      	uxth	r2, r2
     39c:	fbbc f0f8 	udiv	r0, ip, r8
     3a0:	fb08 cc10 	mls	ip, r8, r0, ip
     3a4:	fb00 f909 	mul.w	r9, r0, r9
     3a8:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     3ac:	45e1      	cmp	r9, ip
     3ae:	d905      	bls.n	3bc <__data_size+0x7f>
     3b0:	eb13 0c0c 	adds.w	ip, r3, ip
     3b4:	d201      	bcs.n	3ba <__data_size+0x7d>
     3b6:	45e1      	cmp	r9, ip
     3b8:	d83b      	bhi.n	432 <CONFIG_FLASH_SIZE+0x32>
     3ba:	3801      	subs	r0, #1
     3bc:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     3c0:	ebac 0c09 	sub.w	ip, ip, r9
     3c4:	fba0 8907 	umull	r8, r9, r0, r7
     3c8:	45cc      	cmp	ip, r9
     3ca:	4645      	mov	r5, r8
     3cc:	464a      	mov	r2, r9
     3ce:	d302      	bcc.n	3d6 <__data_size+0x99>
     3d0:	d106      	bne.n	3e0 <__data_size+0xa3>
     3d2:	45c6      	cmp	lr, r8
     3d4:	d204      	bcs.n	3e0 <__data_size+0xa3>
     3d6:	3801      	subs	r0, #1
     3d8:	ebb8 0507 	subs.w	r5, r8, r7
     3dc:	eb69 0203 	sbc.w	r2, r9, r3
     3e0:	b32e      	cbz	r6, 42e <CONFIG_FLASH_SIZE+0x2e>
     3e2:	ebbe 0305 	subs.w	r3, lr, r5
     3e6:	eb6c 0c02 	sbc.w	ip, ip, r2
     3ea:	fa23 f201 	lsr.w	r2, r3, r1
     3ee:	fa0c f404 	lsl.w	r4, ip, r4
     3f2:	fa2c f301 	lsr.w	r3, ip, r1
     3f6:	2100      	movs	r1, #0
     3f8:	4314      	orrs	r4, r2
     3fa:	e9c6 4300 	strd	r4, r3, [r6]
     3fe:	e70c      	b.n	21a <CONFIG_USB_CDC_ACM_RINGBUF_SIZE+0x1a>
     400:	4631      	mov	r1, r6
     402:	4630      	mov	r0, r6
     404:	e709      	b.n	21a <CONFIG_USB_CDC_ACM_RINGBUF_SIZE+0x1a>
     406:	1a84      	subs	r4, r0, r2
     408:	eb65 0303 	sbc.w	r3, r5, r3
     40c:	2001      	movs	r0, #1
     40e:	469a      	mov	sl, r3
     410:	e756      	b.n	2c0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x40>
     412:	f1ac 0c02 	sub.w	ip, ip, #2
     416:	443d      	add	r5, r7
     418:	e724      	b.n	264 <CONFIG_USB_CDC_ACM_RINGBUF_SIZE+0x64>
     41a:	3802      	subs	r0, #2
     41c:	443c      	add	r4, r7
     41e:	e734      	b.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     420:	3802      	subs	r0, #2
     422:	443c      	add	r4, r7
     424:	e6ef      	b.n	206 <CONFIG_USB_CDC_ACM_RINGBUF_SIZE+0x6>
     426:	f1ae 0e02 	sub.w	lr, lr, #2
     42a:	443b      	add	r3, r7
     42c:	e6d9      	b.n	1e2 <CONFIG_SRAM_SIZE+0x22>
     42e:	4631      	mov	r1, r6
     430:	e6f3      	b.n	21a <CONFIG_USB_CDC_ACM_RINGBUF_SIZE+0x1a>
     432:	3802      	subs	r0, #2
     434:	449c      	add	ip, r3
     436:	e7c1      	b.n	3bc <__data_size+0x7f>
     438:	3802      	subs	r0, #2
     43a:	443b      	add	r3, r7
     43c:	e768      	b.n	310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
     43e:	f1aa 0a02 	sub.w	sl, sl, #2
     442:	449c      	add	ip, r3
     444:	e7a7      	b.n	396 <__data_size+0x59>
     446:	3902      	subs	r1, #2
     448:	443d      	add	r5, r7
     44a:	e774      	b.n	336 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x36>

0000044c <__aeabi_idiv0>:
     44c:	4770      	bx	lr
     44e:	bf00      	nop

00000450 <interrupt_handler>:
};

BUILD_ASSERT(ARRAY_SIZE(peers) >= 2, "Not enough CDC ACM instances");

static void interrupt_handler(const struct device *dev, void *user_data)
{
     450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     454:	b090      	sub	sp, #64	; 0x40
     456:	4604      	mov	r4, r0
     458:	460e      	mov	r6, r1
	struct serial_peer *peer = user_data;

	while (uart_irq_update(dev) && uart_irq_is_pending(dev)) {
     45a:	e01a      	b.n	492 <interrupt_handler+0x42>
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->fifo_read == NULL) {
		return -ENOSYS;
     45c:	f06f 0857 	mvn.w	r8, #87	; 0x57
     460:	e036      	b.n	4d0 <interrupt_handler+0x80>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
     462:	4b2f      	ldr	r3, [pc, #188]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     464:	4a2f      	ldr	r2, [pc, #188]	; (524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>)
     466:	1a9b      	subs	r3, r3, r2
     468:	08db      	lsrs	r3, r3, #3
				read = 0;
			};

			wrote = ring_buf_put(rb, buf, read);
			if (wrote < read) {
				LOG_ERR("Drop %zu bytes", read - wrote);
     46a:	2201      	movs	r2, #1
     46c:	f362 0702 	bfi	r7, r2, #0, #3
     470:	f36f 07c5 	bfc	r7, #3, #3
     474:	f363 178f 	bfi	r7, r3, #6, #10
     478:	463a      	mov	r2, r7
     47a:	eba8 0100 	sub.w	r1, r8, r0
     47e:	482a      	ldr	r0, [pc, #168]	; (528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>)
     480:	f001 fa30 	bl	18e4 <log_1>
     484:	e02c      	b.n	4e0 <interrupt_handler+0x90>
	const struct uart_driver_api *api =
     486:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_fill == NULL) {
     488:	695b      	ldr	r3, [r3, #20]
     48a:	b113      	cbz	r3, 492 <interrupt_handler+0x42>
	return api->fifo_fill(dev, tx_data, size);
     48c:	4669      	mov	r1, sp
     48e:	4620      	mov	r0, r4
     490:	4798      	blx	r3
__syscall int uart_irq_update(const struct device *dev);

static inline int z_impl_uart_irq_update(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
     492:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
     494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     496:	b11b      	cbz	r3, 4a0 <interrupt_handler+0x50>
		return -ENOSYS;
	}
	return api->irq_update(dev);
     498:	4620      	mov	r0, r4
     49a:	4798      	blx	r3
	while (uart_irq_update(dev) && uart_irq_is_pending(dev)) {
     49c:	2800      	cmp	r0, #0
     49e:	d03c      	beq.n	51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
	const struct uart_driver_api *api =
     4a0:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_is_pending == NULL) {
     4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     4a4:	b11b      	cbz	r3, 4ae <interrupt_handler+0x5e>
	return api->irq_is_pending(dev);
     4a6:	4620      	mov	r0, r4
     4a8:	4798      	blx	r3
     4aa:	2800      	cmp	r0, #0
     4ac:	d035      	beq.n	51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
	const struct uart_driver_api *api =
     4ae:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_rx_ready == NULL) {
     4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     4b2:	b113      	cbz	r3, 4ba <interrupt_handler+0x6a>
	return api->irq_rx_ready(dev);
     4b4:	4620      	mov	r0, r4
     4b6:	4798      	blx	r3
		if (uart_irq_rx_ready(dev)) {
     4b8:	b1c0      	cbz	r0, 4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
			struct ring_buf *rb = &peer->data->rb;
     4ba:	6875      	ldr	r5, [r6, #4]
     4bc:	3508      	adds	r5, #8
	const struct uart_driver_api *api =
     4be:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_read == NULL) {
     4c0:	699b      	ldr	r3, [r3, #24]
     4c2:	2b00      	cmp	r3, #0
     4c4:	d0ca      	beq.n	45c <interrupt_handler+0xc>
	return api->fifo_read(dev, rx_data, size);
     4c6:	2240      	movs	r2, #64	; 0x40
     4c8:	4669      	mov	r1, sp
     4ca:	4620      	mov	r0, r4
     4cc:	4798      	blx	r3
     4ce:	4680      	mov	r8, r0
			wrote = ring_buf_put(rb, buf, read);
     4d0:	4642      	mov	r2, r8
     4d2:	4669      	mov	r1, sp
     4d4:	4628      	mov	r0, r5
     4d6:	f00c f9b9 	bl	c84c <ring_buf_put>
     4da:	4605      	mov	r5, r0
			if (wrote < read) {
     4dc:	4540      	cmp	r0, r8
     4de:	d3c0      	bcc.n	462 <interrupt_handler+0x12>
			}

			LOG_DBG("dev %p -> dev %p send %zu bytes",
				dev, peer->dev, wrote);
			if (wrote) {
     4e0:	b125      	cbz	r5, 4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
				uart_irq_tx_enable(peer->dev);
     4e2:	6830      	ldr	r0, [r6, #0]
	const struct uart_driver_api *api =
     4e4:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_enable != NULL) {
     4e6:	69db      	ldr	r3, [r3, #28]
     4e8:	b103      	cbz	r3, 4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
		api->irq_tx_enable(dev);
     4ea:	4798      	blx	r3
	const struct uart_driver_api *api =
     4ec:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_tx_ready == NULL) {
     4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     4f0:	b11b      	cbz	r3, 4fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12>
	return api->irq_tx_ready(dev);
     4f2:	4620      	mov	r0, r4
     4f4:	4798      	blx	r3
			}
		}

		if (uart_irq_tx_ready(dev)) {
     4f6:	2800      	cmp	r0, #0
     4f8:	d0cb      	beq.n	492 <interrupt_handler+0x42>
			uint8_t buf[64];
			size_t wrote, len;

			len = ring_buf_get(&peer->rb, buf, sizeof(buf));
     4fa:	2240      	movs	r2, #64	; 0x40
     4fc:	4669      	mov	r1, sp
     4fe:	f106 0008 	add.w	r0, r6, #8
     502:	f00c fa0d 	bl	c920 <ring_buf_get>
			if (!len) {
     506:	4602      	mov	r2, r0
     508:	2800      	cmp	r0, #0
     50a:	d1bc      	bne.n	486 <interrupt_handler+0x36>
	const struct uart_driver_api *api =
     50c:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_tx_disable != NULL) {
     50e:	6a1b      	ldr	r3, [r3, #32]
     510:	2b00      	cmp	r3, #0
     512:	d0be      	beq.n	492 <interrupt_handler+0x42>
		api->irq_tx_disable(dev);
     514:	4620      	mov	r0, r4
     516:	4798      	blx	r3
     518:	e7bb      	b.n	492 <interrupt_handler+0x42>
				wrote = uart_fifo_fill(dev, buf, len);
				LOG_DBG("dev %p wrote len %zu", dev, wrote);
			}
		}
	}
}
     51a:	b010      	add	sp, #64	; 0x40
     51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     520:	0000eefc 	.word	0x0000eefc
     524:	0000eefc 	.word	0x0000eefc
     528:	0000f008 	.word	0x0000f008

0000052c <uart_line_set>:

static void uart_line_set(const struct device *dev)
{
     52c:	b510      	push	{r4, lr}
     52e:	b082      	sub	sp, #8
     530:	4604      	mov	r4, r0

static inline int z_impl_uart_line_ctrl_set(const struct device *dev,
					    uint32_t ctrl, uint32_t val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
     532:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_set == NULL) {
     534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     536:	b113      	cbz	r3, 53e <uart_line_set+0x12>
		return -ENOSYS;
	}
	return api->line_ctrl_set(dev, ctrl, val);
     538:	2201      	movs	r2, #1
     53a:	2108      	movs	r1, #8
     53c:	4798      	blx	r3
	const struct uart_driver_api *api =
     53e:	68a3      	ldr	r3, [r4, #8]
	if (api->line_ctrl_set == NULL) {
     540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     542:	b11b      	cbz	r3, 54c <uart_line_set+0x20>
	return api->line_ctrl_set(dev, ctrl, val);
     544:	2201      	movs	r2, #1
     546:	2110      	movs	r1, #16
     548:	4620      	mov	r0, r4
     54a:	4798      	blx	r3
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
     54c:	4805      	ldr	r0, [pc, #20]	; (564 <uart_line_set+0x38>)
     54e:	f00e fa3a 	bl	e9c6 <z_impl_k_busy_wait>

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
     552:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
     554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     556:	b11b      	cbz	r3, 560 <uart_line_set+0x34>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
     558:	aa01      	add	r2, sp, #4
     55a:	2101      	movs	r1, #1
     55c:	4620      	mov	r0, r4
     55e:	4798      	blx	r3
	if (ret) {
		LOG_DBG("Failed to get baudrate, ret code %d", ret);
	} else {
		LOG_DBG("Baudrate detected: %d", baudrate);
	}
}
     560:	b002      	add	sp, #8
     562:	bd10      	pop	{r4, pc}
     564:	000f4240 	.word	0x000f4240

00000568 <main>:

void main(void)
{
     568:	b570      	push	{r4, r5, r6, lr}
     56a:	b082      	sub	sp, #8
	uint32_t dtr = 0U;
     56c:	2400      	movs	r4, #0
     56e:	9401      	str	r4, [sp, #4]
	int ret;

	for (int idx = 0; idx < ARRAY_SIZE(peers); idx++) {
     570:	e000      	b.n	574 <main+0xc>
     572:	3401      	adds	r4, #1
     574:	2c01      	cmp	r4, #1
     576:	dc1f      	bgt.n	5b8 <main+0x50>
		if (!device_is_ready(peers[idx].dev)) {
     578:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
     57c:	4a59      	ldr	r2, [pc, #356]	; (6e4 <main+0x17c>)
     57e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
     582:	f00d fe75 	bl	e270 <z_device_ready>
     586:	2800      	cmp	r0, #0
     588:	d1f3      	bne.n	572 <main+0xa>
     58a:	4b57      	ldr	r3, [pc, #348]	; (6e8 <main+0x180>)
     58c:	4a57      	ldr	r2, [pc, #348]	; (6ec <main+0x184>)
     58e:	1a9b      	subs	r3, r3, r2
     590:	08db      	lsrs	r3, r3, #3
			LOG_ERR("CDC ACM device %s is not ready",
     592:	f04f 0200 	mov.w	r2, #0
     596:	2101      	movs	r1, #1
     598:	f361 0202 	bfi	r2, r1, #0, #3
     59c:	f36f 02c5 	bfc	r2, #3, #3
     5a0:	f363 128f 	bfi	r2, r3, #6, #10
     5a4:	2324      	movs	r3, #36	; 0x24
     5a6:	fb03 f404 	mul.w	r4, r3, r4
     5aa:	4b4e      	ldr	r3, [pc, #312]	; (6e4 <main+0x17c>)
     5ac:	591b      	ldr	r3, [r3, r4]
     5ae:	6819      	ldr	r1, [r3, #0]
     5b0:	484f      	ldr	r0, [pc, #316]	; (6f0 <main+0x188>)
     5b2:	f001 f997 	bl	18e4 <log_1>
				peers[idx].dev->name);
			return;
     5b6:	e092      	b.n	6de <main+0x176>
		}
	}

	ret = usb_enable(NULL);
     5b8:	2000      	movs	r0, #0
     5ba:	f002 fa25 	bl	2a08 <usb_enable>
	if (ret != 0) {
     5be:	b9f8      	cbnz	r0, 600 <main+0x98>
     5c0:	4b49      	ldr	r3, [pc, #292]	; (6e8 <main+0x180>)
     5c2:	4a4a      	ldr	r2, [pc, #296]	; (6ec <main+0x184>)
     5c4:	1a9b      	subs	r3, r3, r2
     5c6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to enable USB");
		return;
	}

	LOG_INF("Wait for DTR");
     5c8:	f04f 0100 	mov.w	r1, #0
     5cc:	2203      	movs	r2, #3
     5ce:	f362 0102 	bfi	r1, r2, #0, #3
     5d2:	f36f 01c5 	bfc	r1, #3, #3
     5d6:	f363 118f 	bfi	r1, r3, #6, #10
     5da:	4846      	ldr	r0, [pc, #280]	; (6f4 <main+0x18c>)
     5dc:	f001 f9f4 	bl	19c8 <log_0>

	while (1) {
		uart_line_ctrl_get(peers[0].dev, UART_LINE_CTRL_DTR, &dtr);
     5e0:	4b40      	ldr	r3, [pc, #256]	; (6e4 <main+0x17c>)
     5e2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
     5e4:	6883      	ldr	r3, [r0, #8]
	if (api->line_ctrl_get == NULL) {
     5e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     5e8:	b113      	cbz	r3, 5f0 <main+0x88>
	return api->line_ctrl_get(dev, ctrl, val);
     5ea:	aa01      	add	r2, sp, #4
     5ec:	2104      	movs	r1, #4
     5ee:	4798      	blx	r3
		if (dtr) {
     5f0:	9b01      	ldr	r3, [sp, #4]
     5f2:	b9b3      	cbnz	r3, 622 <main+0xba>
	return z_impl_k_sleep(timeout);
     5f4:	f640 40cd 	movw	r0, #3277	; 0xccd
     5f8:	2100      	movs	r1, #0
     5fa:	f00a fe29 	bl	b250 <z_impl_k_sleep>
	while (1) {
     5fe:	e7ef      	b.n	5e0 <main+0x78>
     600:	4b39      	ldr	r3, [pc, #228]	; (6e8 <main+0x180>)
     602:	4a3a      	ldr	r2, [pc, #232]	; (6ec <main+0x184>)
     604:	1a9b      	subs	r3, r3, r2
     606:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to enable USB");
     608:	f04f 0100 	mov.w	r1, #0
     60c:	2201      	movs	r2, #1
     60e:	f362 0102 	bfi	r1, r2, #0, #3
     612:	f36f 01c5 	bfc	r1, #3, #3
     616:	f363 118f 	bfi	r1, r3, #6, #10
     61a:	4837      	ldr	r0, [pc, #220]	; (6f8 <main+0x190>)
     61c:	f001 f9d4 	bl	19c8 <log_0>
		return;
     620:	e05d      	b.n	6de <main+0x176>

		k_sleep(K_MSEC(100));
	}

	while (1) {
		uart_line_ctrl_get(peers[1].dev, UART_LINE_CTRL_DTR, &dtr);
     622:	4b30      	ldr	r3, [pc, #192]	; (6e4 <main+0x17c>)
     624:	6a58      	ldr	r0, [r3, #36]	; 0x24
	const struct uart_driver_api *api =
     626:	6883      	ldr	r3, [r0, #8]
	if (api->line_ctrl_get == NULL) {
     628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     62a:	b113      	cbz	r3, 632 <main+0xca>
	return api->line_ctrl_get(dev, ctrl, val);
     62c:	aa01      	add	r2, sp, #4
     62e:	2104      	movs	r1, #4
     630:	4798      	blx	r3
		if (dtr) {
     632:	9b01      	ldr	r3, [sp, #4]
     634:	b92b      	cbnz	r3, 642 <main+0xda>
     636:	f640 40cd 	movw	r0, #3277	; 0xccd
     63a:	2100      	movs	r1, #0
     63c:	f00a fe08 	bl	b250 <z_impl_k_sleep>
	while (1) {
     640:	e7ef      	b.n	622 <main+0xba>
     642:	4b29      	ldr	r3, [pc, #164]	; (6e8 <main+0x180>)
     644:	4a29      	ldr	r2, [pc, #164]	; (6ec <main+0x184>)
     646:	1a9b      	subs	r3, r3, r2
     648:	08db      	lsrs	r3, r3, #3
		}

		k_sleep(K_MSEC(100));
	}

	LOG_INF("DTR set, start test");
     64a:	f04f 0100 	mov.w	r1, #0
     64e:	2203      	movs	r2, #3
     650:	f362 0102 	bfi	r1, r2, #0, #3
     654:	f36f 01c5 	bfc	r1, #3, #3
     658:	f363 118f 	bfi	r1, r3, #6, #10
     65c:	4827      	ldr	r0, [pc, #156]	; (6fc <main+0x194>)
     65e:	f001 f9b3 	bl	19c8 <log_0>

	uart_line_set(peers[0].dev);
     662:	4c20      	ldr	r4, [pc, #128]	; (6e4 <main+0x17c>)
     664:	6820      	ldr	r0, [r4, #0]
     666:	f7ff ff61 	bl	52c <uart_line_set>
	uart_line_set(peers[1].dev);
     66a:	4625      	mov	r5, r4
     66c:	f855 0f24 	ldr.w	r0, [r5, #36]!
     670:	f7ff ff5c 	bl	52c <uart_line_set>

	peers[0].data = &peers[1];
     674:	6065      	str	r5, [r4, #4]
	peers[1].data = &peers[0];
     676:	62a4      	str	r4, [r4, #40]	; 0x28
				 uint32_t size,
				 void *data)
{
	__ASSERT(size < RING_BUFFER_MAX_SIZE, RING_BUFFER_SIZE_ASSERT_MSG);

	memset(buf, 0, sizeof(struct ring_buf));
     678:	221c      	movs	r2, #28
     67a:	2100      	movs	r1, #0
     67c:	f104 0008 	add.w	r0, r4, #8
     680:	f00c ffca 	bl	d618 <memset>
	buf->size = size;
     684:	2680      	movs	r6, #128	; 0x80
     686:	61a6      	str	r6, [r4, #24]
	buf->buf.buf32 = (uint32_t *)data;
     688:	4b1d      	ldr	r3, [pc, #116]	; (700 <main+0x198>)
     68a:	61e3      	str	r3, [r4, #28]
	if (is_power_of_two(size)) {
		buf->mask = size - 1U;
     68c:	257f      	movs	r5, #127	; 0x7f
     68e:	6225      	str	r5, [r4, #32]
	memset(buf, 0, sizeof(struct ring_buf));
     690:	221c      	movs	r2, #28
     692:	2100      	movs	r1, #0
     694:	f104 002c 	add.w	r0, r4, #44	; 0x2c
     698:	f00c ffbe 	bl	d618 <memset>
	buf->size = size;
     69c:	63e6      	str	r6, [r4, #60]	; 0x3c
	buf->buf.buf32 = (uint32_t *)data;
     69e:	4b19      	ldr	r3, [pc, #100]	; (704 <main+0x19c>)
     6a0:	6423      	str	r3, [r4, #64]	; 0x40
		buf->mask = size - 1U;
     6a2:	6465      	str	r5, [r4, #68]	; 0x44

	ring_buf_init(&peers[0].rb, sizeof(buffer0), buffer0);
	ring_buf_init(&peers[1].rb, sizeof(buffer1), buffer1);

	uart_irq_callback_user_data_set(peers[1].dev, interrupt_handler, &peers[0]);
     6a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
	const struct uart_driver_api *api =
     6a6:	6883      	ldr	r3, [r0, #8]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
     6a8:	b123      	cbz	r3, 6b4 <main+0x14c>
     6aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     6ac:	b113      	cbz	r3, 6b4 <main+0x14c>
		api->irq_callback_set(dev, cb, user_data);
     6ae:	4622      	mov	r2, r4
     6b0:	4915      	ldr	r1, [pc, #84]	; (708 <main+0x1a0>)
     6b2:	4798      	blx	r3
	uart_irq_callback_user_data_set(peers[0].dev, interrupt_handler, &peers[1]);
     6b4:	4b0b      	ldr	r3, [pc, #44]	; (6e4 <main+0x17c>)
     6b6:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
     6b8:	6883      	ldr	r3, [r0, #8]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
     6ba:	b123      	cbz	r3, 6c6 <main+0x15e>
     6bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     6be:	b113      	cbz	r3, 6c6 <main+0x15e>
		api->irq_callback_set(dev, cb, user_data);
     6c0:	4a12      	ldr	r2, [pc, #72]	; (70c <main+0x1a4>)
     6c2:	4911      	ldr	r1, [pc, #68]	; (708 <main+0x1a0>)
     6c4:	4798      	blx	r3

	/* Enable rx interrupts */
	uart_irq_rx_enable(peers[0].dev);
     6c6:	4b07      	ldr	r3, [pc, #28]	; (6e4 <main+0x17c>)
     6c8:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
     6ca:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_enable != NULL) {
     6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     6ce:	b103      	cbz	r3, 6d2 <main+0x16a>
		api->irq_rx_enable(dev);
     6d0:	4798      	blx	r3
	uart_irq_rx_enable(peers[1].dev);
     6d2:	4b04      	ldr	r3, [pc, #16]	; (6e4 <main+0x17c>)
     6d4:	6a58      	ldr	r0, [r3, #36]	; 0x24
	const struct uart_driver_api *api =
     6d6:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_enable != NULL) {
     6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     6da:	b103      	cbz	r3, 6de <main+0x176>
		api->irq_rx_enable(dev);
     6dc:	4798      	blx	r3
}
     6de:	b002      	add	sp, #8
     6e0:	bd70      	pop	{r4, r5, r6, pc}
     6e2:	bf00      	nop
     6e4:	20000000 	.word	0x20000000
     6e8:	0000eefc 	.word	0x0000eefc
     6ec:	0000eefc 	.word	0x0000eefc
     6f0:	0000f018 	.word	0x0000f018
     6f4:	0000f050 	.word	0x0000f050
     6f8:	0000f038 	.word	0x0000f038
     6fc:	0000f060 	.word	0x0000f060
     700:	20000a38 	.word	0x20000a38
     704:	20000ab8 	.word	0x20000ab8
     708:	00000451 	.word	0x00000451
     70c:	20000024 	.word	0x20000024

00000710 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     710:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     712:	680b      	ldr	r3, [r1, #0]
     714:	3301      	adds	r3, #1
     716:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     718:	4b01      	ldr	r3, [pc, #4]	; (720 <char_out+0x10>)
     71a:	681b      	ldr	r3, [r3, #0]
     71c:	4798      	blx	r3
}
     71e:	bd08      	pop	{r3, pc}
     720:	20000048 	.word	0x20000048

00000724 <__printk_hook_install>:
	_char_out = fn;
     724:	4b01      	ldr	r3, [pc, #4]	; (72c <__printk_hook_install+0x8>)
     726:	6018      	str	r0, [r3, #0]
}
     728:	4770      	bx	lr
     72a:	bf00      	nop
     72c:	20000048 	.word	0x20000048

00000730 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     730:	b500      	push	{lr}
     732:	b083      	sub	sp, #12
     734:	4602      	mov	r2, r0
     736:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     738:	2100      	movs	r1, #0
     73a:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     73c:	a901      	add	r1, sp, #4
     73e:	4803      	ldr	r0, [pc, #12]	; (74c <vprintk+0x1c>)
     740:	f000 f8c8 	bl	8d4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     744:	b003      	add	sp, #12
     746:	f85d fb04 	ldr.w	pc, [sp], #4
     74a:	bf00      	nop
     74c:	00000711 	.word	0x00000711

00000750 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     750:	b510      	push	{r4, lr}
     752:	b084      	sub	sp, #16
     754:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     756:	9001      	str	r0, [sp, #4]
     758:	9102      	str	r1, [sp, #8]
     75a:	2100      	movs	r1, #0
     75c:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
     75e:	a901      	add	r1, sp, #4
     760:	4805      	ldr	r0, [pc, #20]	; (778 <vsnprintk+0x28>)
     762:	f000 f8b7 	bl	8d4 <cbvprintf>

	if (ctx.count < ctx.max) {
     766:	9b03      	ldr	r3, [sp, #12]
     768:	9a02      	ldr	r2, [sp, #8]
     76a:	4293      	cmp	r3, r2
     76c:	da01      	bge.n	772 <vsnprintk+0x22>
		str[ctx.count] = '\0';
     76e:	2200      	movs	r2, #0
     770:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
     772:	9803      	ldr	r0, [sp, #12]
     774:	b004      	add	sp, #16
     776:	bd10      	pop	{r4, pc}
     778:	0000bba1 	.word	0x0000bba1

0000077c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     77c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     780:	b083      	sub	sp, #12
     782:	4604      	mov	r4, r0
     784:	4608      	mov	r0, r1
     786:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     788:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     78a:	f013 0f08 	tst.w	r3, #8
     78e:	d105      	bne.n	79c <process_event+0x20>
     790:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     794:	2300      	movs	r3, #0
     796:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     798:	9301      	str	r3, [sp, #4]
}
     79a:	e069      	b.n	870 <CONFIG_ISR_STACK_SIZE+0x70>
		if (evt == EVT_COMPLETE) {
     79c:	2901      	cmp	r1, #1
     79e:	d009      	beq.n	7b4 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     7a0:	f043 0320 	orr.w	r3, r3, #32
     7a4:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     7a6:	f385 8811 	msr	BASEPRI, r5
     7aa:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     7ae:	b003      	add	sp, #12
     7b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     7b4:	f043 0310 	orr.w	r3, r3, #16
     7b8:	8323      	strh	r3, [r4, #24]
     7ba:	e7f4      	b.n	7a6 <process_event+0x2a>
			evt = process_recheck(mgr);
     7bc:	4620      	mov	r0, r4
     7be:	f00b fa4a 	bl	bc56 <process_recheck>
     7c2:	e057      	b.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
			res = mgr->last_res;
     7c4:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     7c8:	464a      	mov	r2, r9
     7ca:	4669      	mov	r1, sp
     7cc:	4620      	mov	r0, r4
     7ce:	f00b fa5b 	bl	bc88 <process_complete>
		onoff_transition_fn transit = NULL;
     7d2:	2700      	movs	r7, #0
     7d4:	e05a      	b.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
			transit = mgr->transitions->start;
     7d6:	6923      	ldr	r3, [r4, #16]
     7d8:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
     7da:	2106      	movs	r1, #6
     7dc:	4620      	mov	r0, r4
     7de:	f00b fa13 	bl	bc08 <set_state>
		res = 0;
     7e2:	f04f 0900 	mov.w	r9, #0
     7e6:	e051      	b.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
			transit = mgr->transitions->stop;
     7e8:	6923      	ldr	r3, [r4, #16]
     7ea:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     7ec:	2104      	movs	r1, #4
     7ee:	4620      	mov	r0, r4
     7f0:	f00b fa0a 	bl	bc08 <set_state>
		res = 0;
     7f4:	f04f 0900 	mov.w	r9, #0
     7f8:	e048      	b.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
			transit = mgr->transitions->reset;
     7fa:	6923      	ldr	r3, [r4, #16]
     7fc:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     7fe:	2105      	movs	r1, #5
     800:	4620      	mov	r0, r4
     802:	f00b fa01 	bl	bc08 <set_state>
		res = 0;
     806:	f04f 0900 	mov.w	r9, #0
     80a:	e03f      	b.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
				   && !sys_slist_is_empty(&mgr->monitors);
     80c:	2200      	movs	r2, #0
     80e:	e046      	b.n	89e <CONFIG_ISR_STACK_SIZE+0x9e>
     810:	2200      	movs	r2, #0
     812:	e044      	b.n	89e <CONFIG_ISR_STACK_SIZE+0x9e>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     814:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     818:	8323      	strh	r3, [r4, #24]
     81a:	f385 8811 	msr	BASEPRI, r5
     81e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     822:	2900      	cmp	r1, #0
     824:	d144      	bne.n	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     826:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     828:	b12b      	cbz	r3, 836 <CONFIG_ISR_STACK_SIZE+0x36>
				notify_all(mgr, &clients, state, res);
     82a:	464b      	mov	r3, r9
     82c:	4642      	mov	r2, r8
     82e:	4669      	mov	r1, sp
     830:	4620      	mov	r0, r4
     832:	f00b fa9f 	bl	bd74 <notify_all>
			if (transit != NULL) {
     836:	b117      	cbz	r7, 83e <CONFIG_ISR_STACK_SIZE+0x3e>
				transit(mgr, transition_complete);
     838:	4925      	ldr	r1, [pc, #148]	; (8d0 <CONFIG_ISR_STACK_SIZE+0xd0>)
     83a:	4620      	mov	r0, r4
     83c:	47b8      	blx	r7
	__asm__ volatile(
     83e:	f04f 0320 	mov.w	r3, #32
     842:	f3ef 8511 	mrs	r5, BASEPRI
     846:	f383 8812 	msr	BASEPRI_MAX, r3
     84a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     84e:	8b23      	ldrh	r3, [r4, #24]
     850:	f023 0308 	bic.w	r3, r3, #8
     854:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     856:	8b23      	ldrh	r3, [r4, #24]
     858:	f013 0f10 	tst.w	r3, #16
     85c:	d02e      	beq.n	8bc <CONFIG_ISR_STACK_SIZE+0xbc>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     85e:	f023 0310 	bic.w	r3, r3, #16
     862:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     864:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     866:	8b26      	ldrh	r6, [r4, #24]
     868:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     86c:	2800      	cmp	r0, #0
     86e:	d09a      	beq.n	7a6 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     870:	2802      	cmp	r0, #2
     872:	d0a3      	beq.n	7bc <process_event+0x40>
		if (evt == EVT_NOP) {
     874:	2800      	cmp	r0, #0
     876:	d096      	beq.n	7a6 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     878:	2801      	cmp	r0, #1
     87a:	d0a3      	beq.n	7c4 <process_event+0x48>
		} else if (evt == EVT_START) {
     87c:	2803      	cmp	r0, #3
     87e:	d0aa      	beq.n	7d6 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
     880:	2804      	cmp	r0, #4
     882:	d0b1      	beq.n	7e8 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
     884:	2805      	cmp	r0, #5
     886:	d0b8      	beq.n	7fa <process_event+0x7e>
		onoff_transition_fn transit = NULL;
     888:	2700      	movs	r7, #0
		res = 0;
     88a:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     88c:	8b23      	ldrh	r3, [r4, #24]
     88e:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     892:	45b0      	cmp	r8, r6
     894:	d0ba      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
     896:	68a2      	ldr	r2, [r4, #8]
     898:	2a00      	cmp	r2, #0
     89a:	d0b9      	beq.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
     89c:	2201      	movs	r2, #1
		if (do_monitors
     89e:	4611      	mov	r1, r2
     8a0:	2a00      	cmp	r2, #0
     8a2:	d1b7      	bne.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
     8a4:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     8a6:	2a00      	cmp	r2, #0
     8a8:	d1b4      	bne.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
		    || (transit != NULL)) {
     8aa:	2f00      	cmp	r7, #0
     8ac:	d1b2      	bne.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
     8ae:	e7d2      	b.n	856 <CONFIG_ISR_STACK_SIZE+0x56>
				notify_monitors(mgr, state, res);
     8b0:	464a      	mov	r2, r9
     8b2:	4641      	mov	r1, r8
     8b4:	4620      	mov	r0, r4
     8b6:	f00b f9af 	bl	bc18 <notify_monitors>
     8ba:	e7b4      	b.n	826 <CONFIG_ISR_STACK_SIZE+0x26>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     8bc:	f013 0f20 	tst.w	r3, #32
     8c0:	d004      	beq.n	8cc <CONFIG_ISR_STACK_SIZE+0xcc>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     8c2:	f023 0320 	bic.w	r3, r3, #32
     8c6:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     8c8:	2002      	movs	r0, #2
     8ca:	e7cc      	b.n	866 <CONFIG_ISR_STACK_SIZE+0x66>
		evt = EVT_NOP;
     8cc:	2000      	movs	r0, #0
     8ce:	e7ca      	b.n	866 <CONFIG_ISR_STACK_SIZE+0x66>
     8d0:	0000bda3 	.word	0x0000bda3

000008d4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8d8:	b093      	sub	sp, #76	; 0x4c
     8da:	4606      	mov	r6, r0
     8dc:	460d      	mov	r5, r1
     8de:	4692      	mov	sl, r2
     8e0:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     8e2:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     8e4:	f89a 0000 	ldrb.w	r0, [sl]
     8e8:	2800      	cmp	r0, #0
     8ea:	f000 84d6 	beq.w	129a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x29a>
		if (*fp != '%') {
     8ee:	2825      	cmp	r0, #37	; 0x25
     8f0:	d008      	beq.n	904 <cbvprintf+0x30>
			OUTC(*fp++);
     8f2:	f10a 0a01 	add.w	sl, sl, #1
     8f6:	4629      	mov	r1, r5
     8f8:	47b0      	blx	r6
     8fa:	2800      	cmp	r0, #0
     8fc:	f2c0 84ce 	blt.w	129c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x29c>
     900:	3401      	adds	r4, #1
			continue;
     902:	e7ef      	b.n	8e4 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     904:	2300      	movs	r3, #0
     906:	9306      	str	r3, [sp, #24]
     908:	9307      	str	r3, [sp, #28]
     90a:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
     90c:	9308      	str	r3, [sp, #32]
     90e:	9309      	str	r3, [sp, #36]	; 0x24
     910:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
     912:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
     916:	f89a 3001 	ldrb.w	r3, [sl, #1]
     91a:	2b25      	cmp	r3, #37	; 0x25
     91c:	d001      	beq.n	922 <cbvprintf+0x4e>
	bool loop = true;
     91e:	2701      	movs	r7, #1
     920:	e02c      	b.n	97c <cbvprintf+0xa8>
		conv->specifier = *sp++;
     922:	f10a 0802 	add.w	r8, sl, #2
     926:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
     92a:	e1a8      	b.n	c7e <cbvprintf+0x3aa>
			conv->flag_dash = true;
     92c:	f89d 3020 	ldrb.w	r3, [sp, #32]
     930:	f043 0304 	orr.w	r3, r3, #4
     934:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
     938:	b1ff      	cbz	r7, 97a <cbvprintf+0xa6>
			++sp;
     93a:	f108 0801 	add.w	r8, r8, #1
     93e:	e01c      	b.n	97a <cbvprintf+0xa6>
			conv->flag_plus = true;
     940:	f89d 3020 	ldrb.w	r3, [sp, #32]
     944:	f043 0308 	orr.w	r3, r3, #8
     948:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     94c:	e7f4      	b.n	938 <cbvprintf+0x64>
			conv->flag_space = true;
     94e:	f89d 3020 	ldrb.w	r3, [sp, #32]
     952:	f043 0310 	orr.w	r3, r3, #16
     956:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     95a:	e7ed      	b.n	938 <cbvprintf+0x64>
			conv->flag_hash = true;
     95c:	f89d 3020 	ldrb.w	r3, [sp, #32]
     960:	f043 0320 	orr.w	r3, r3, #32
     964:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     968:	e7e6      	b.n	938 <cbvprintf+0x64>
			conv->flag_zero = true;
     96a:	f89d 3020 	ldrb.w	r3, [sp, #32]
     96e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     972:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     976:	e7df      	b.n	938 <cbvprintf+0x64>
		switch (*sp) {
     978:	2700      	movs	r7, #0
	} while (loop);
     97a:	b34f      	cbz	r7, 9d0 <cbvprintf+0xfc>
		switch (*sp) {
     97c:	f898 3000 	ldrb.w	r3, [r8]
     980:	3b20      	subs	r3, #32
     982:	2b10      	cmp	r3, #16
     984:	d8f8      	bhi.n	978 <cbvprintf+0xa4>
     986:	a201      	add	r2, pc, #4	; (adr r2, 98c <cbvprintf+0xb8>)
     988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     98c:	0000094f 	.word	0x0000094f
     990:	00000979 	.word	0x00000979
     994:	00000979 	.word	0x00000979
     998:	0000095d 	.word	0x0000095d
     99c:	00000979 	.word	0x00000979
     9a0:	00000979 	.word	0x00000979
     9a4:	00000979 	.word	0x00000979
     9a8:	00000979 	.word	0x00000979
     9ac:	00000979 	.word	0x00000979
     9b0:	00000979 	.word	0x00000979
     9b4:	00000979 	.word	0x00000979
     9b8:	00000941 	.word	0x00000941
     9bc:	00000979 	.word	0x00000979
     9c0:	0000092d 	.word	0x0000092d
     9c4:	00000979 	.word	0x00000979
     9c8:	00000979 	.word	0x00000979
     9cc:	0000096b 	.word	0x0000096b
	if (conv->flag_zero && conv->flag_dash) {
     9d0:	f89d 3020 	ldrb.w	r3, [sp, #32]
     9d4:	f003 0344 	and.w	r3, r3, #68	; 0x44
     9d8:	2b44      	cmp	r3, #68	; 0x44
     9da:	d06d      	beq.n	ab8 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
     9dc:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
     9e0:	f89d 3020 	ldrb.w	r3, [sp, #32]
     9e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     9e8:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
     9ec:	f898 3000 	ldrb.w	r3, [r8]
     9f0:	2b2a      	cmp	r3, #42	; 0x2a
     9f2:	d068      	beq.n	ac6 <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
     9f4:	a805      	add	r0, sp, #20
     9f6:	f00b fe31 	bl	c65c <extract_decimal>
	if (sp != wp) {
     9fa:	9b05      	ldr	r3, [sp, #20]
     9fc:	4598      	cmp	r8, r3
     9fe:	d012      	beq.n	a26 <cbvprintf+0x152>
		conv->width_present = true;
     a00:	f89d 3020 	ldrb.w	r3, [sp, #32]
     a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     a08:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
     a0c:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
     a0e:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     a12:	2800      	cmp	r0, #0
     a14:	db60      	blt.n	ad8 <cbvprintf+0x204>
     a16:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     a18:	4313      	orrs	r3, r2
     a1a:	f89d 2020 	ldrb.w	r2, [sp, #32]
     a1e:	f363 0241 	bfi	r2, r3, #1, #1
     a22:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     a26:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
     a28:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
     a2a:	781b      	ldrb	r3, [r3, #0]
     a2c:	2b2e      	cmp	r3, #46	; 0x2e
     a2e:	bf14      	ite	ne
     a30:	2300      	movne	r3, #0
     a32:	2301      	moveq	r3, #1
     a34:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     a38:	f363 0241 	bfi	r2, r3, #1, #1
     a3c:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
     a40:	2b00      	cmp	r3, #0
     a42:	d04b      	beq.n	adc <cbvprintf+0x208>
	++sp;
     a44:	9b05      	ldr	r3, [sp, #20]
     a46:	1c5a      	adds	r2, r3, #1
     a48:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
     a4a:	785b      	ldrb	r3, [r3, #1]
     a4c:	2b2a      	cmp	r3, #42	; 0x2a
     a4e:	d048      	beq.n	ae2 <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
     a50:	a805      	add	r0, sp, #20
     a52:	f00b fe03 	bl	c65c <extract_decimal>
	conv->prec_value = prec;
     a56:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
     a58:	f89d 3020 	ldrb.w	r3, [sp, #32]
     a5c:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     a60:	2800      	cmp	r0, #0
     a62:	db47      	blt.n	af4 <cbvprintf+0x220>
     a64:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     a66:	4313      	orrs	r3, r2
     a68:	f89d 2020 	ldrb.w	r2, [sp, #32]
     a6c:	f363 0241 	bfi	r2, r3, #1, #1
     a70:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     a74:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
     a78:	f898 3000 	ldrb.w	r3, [r8]
     a7c:	3b4c      	subs	r3, #76	; 0x4c
     a7e:	2b2e      	cmp	r3, #46	; 0x2e
     a80:	f200 80dc 	bhi.w	c3c <cbvprintf+0x368>
     a84:	e8df f003 	tbb	[pc, r3]
     a88:	dadadaca 	.word	0xdadadaca
     a8c:	dadadada 	.word	0xdadadada
     a90:	dadadada 	.word	0xdadadada
     a94:	dadadada 	.word	0xdadadada
     a98:	dadadada 	.word	0xdadadada
     a9c:	dadadada 	.word	0xdadadada
     aa0:	dadadada 	.word	0xdadadada
     aa4:	da6ada38 	.word	0xda6ada38
     aa8:	dadada51 	.word	0xdadada51
     aac:	dadadada 	.word	0xdadadada
     ab0:	dadadac0 	.word	0xdadadac0
     ab4:	dada      	.short	0xdada
     ab6:	b6          	.byte	0xb6
     ab7:	00          	.byte	0x00
		conv->flag_zero = false;
     ab8:	f89d 3020 	ldrb.w	r3, [sp, #32]
     abc:	f36f 1386 	bfc	r3, #6, #1
     ac0:	f88d 3020 	strb.w	r3, [sp, #32]
     ac4:	e78a      	b.n	9dc <cbvprintf+0x108>
		conv->width_star = true;
     ac6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     aca:	f043 0301 	orr.w	r3, r3, #1
     ace:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     ad2:	4643      	mov	r3, r8
     ad4:	3301      	adds	r3, #1
     ad6:	e7a7      	b.n	a28 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
     ad8:	2201      	movs	r2, #1
     ada:	e79d      	b.n	a18 <cbvprintf+0x144>
		return sp;
     adc:	f8dd 8014 	ldr.w	r8, [sp, #20]
     ae0:	e7ca      	b.n	a78 <cbvprintf+0x1a4>
		conv->prec_star = true;
     ae2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     ae6:	f043 0304 	orr.w	r3, r3, #4
     aea:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     aee:	f102 0801 	add.w	r8, r2, #1
     af2:	e7c1      	b.n	a78 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
     af4:	2201      	movs	r2, #1
     af6:	e7b6      	b.n	a66 <cbvprintf+0x192>
		if (*++sp == 'h') {
     af8:	f108 0201 	add.w	r2, r8, #1
     afc:	f898 3001 	ldrb.w	r3, [r8, #1]
     b00:	2b68      	cmp	r3, #104	; 0x68
     b02:	d008      	beq.n	b16 <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
     b04:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     b08:	2102      	movs	r1, #2
     b0a:	f361 03c6 	bfi	r3, r1, #3, #4
     b0e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
     b12:	4690      	mov	r8, r2
     b14:	e02b      	b.n	b6e <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
     b16:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     b1a:	2201      	movs	r2, #1
     b1c:	f362 03c6 	bfi	r3, r2, #3, #4
     b20:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     b24:	f108 0802 	add.w	r8, r8, #2
     b28:	e021      	b.n	b6e <cbvprintf+0x29a>
		if (*++sp == 'l') {
     b2a:	f108 0201 	add.w	r2, r8, #1
     b2e:	f898 3001 	ldrb.w	r3, [r8, #1]
     b32:	2b6c      	cmp	r3, #108	; 0x6c
     b34:	d008      	beq.n	b48 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
     b36:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     b3a:	2103      	movs	r1, #3
     b3c:	f361 03c6 	bfi	r3, r1, #3, #4
     b40:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
     b44:	4690      	mov	r8, r2
     b46:	e012      	b.n	b6e <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
     b48:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     b4c:	2204      	movs	r2, #4
     b4e:	f362 03c6 	bfi	r3, r2, #3, #4
     b52:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     b56:	f108 0802 	add.w	r8, r8, #2
     b5a:	e008      	b.n	b6e <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
     b5c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     b60:	2205      	movs	r2, #5
     b62:	f362 03c6 	bfi	r3, r2, #3, #4
     b66:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     b6a:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
     b6e:	f818 3b01 	ldrb.w	r3, [r8], #1
     b72:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
     b76:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     b7a:	2a37      	cmp	r2, #55	; 0x37
     b7c:	f200 8150 	bhi.w	e20 <cbvprintf+0x54c>
     b80:	e8df f012 	tbh	[pc, r2, lsl #1]
     b84:	014e0126 	.word	0x014e0126
     b88:	014e014e 	.word	0x014e014e
     b8c:	01260126 	.word	0x01260126
     b90:	014e0126 	.word	0x014e0126
     b94:	014e014e 	.word	0x014e014e
     b98:	014e014e 	.word	0x014e014e
     b9c:	014e014e 	.word	0x014e014e
     ba0:	014e014e 	.word	0x014e014e
     ba4:	014e014e 	.word	0x014e014e
     ba8:	014e014e 	.word	0x014e014e
     bac:	014e014e 	.word	0x014e014e
     bb0:	0113014e 	.word	0x0113014e
     bb4:	014e014e 	.word	0x014e014e
     bb8:	014e014e 	.word	0x014e014e
     bbc:	014e014e 	.word	0x014e014e
     bc0:	014e014e 	.word	0x014e014e
     bc4:	014e0126 	.word	0x014e0126
     bc8:	00630113 	.word	0x00630113
     bcc:	01260126 	.word	0x01260126
     bd0:	014e0126 	.word	0x014e0126
     bd4:	014e0063 	.word	0x014e0063
     bd8:	014e014e 	.word	0x014e014e
     bdc:	012f014e 	.word	0x012f014e
     be0:	013f0113 	.word	0x013f0113
     be4:	014e014e 	.word	0x014e014e
     be8:	014e013f 	.word	0x014e013f
     bec:	014e0113 	.word	0x014e0113
     bf0:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
     bf4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     bf8:	2206      	movs	r2, #6
     bfa:	f362 03c6 	bfi	r3, r2, #3, #4
     bfe:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     c02:	f108 0801 	add.w	r8, r8, #1
		break;
     c06:	e7b2      	b.n	b6e <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
     c08:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     c0c:	2207      	movs	r2, #7
     c0e:	f362 03c6 	bfi	r3, r2, #3, #4
     c12:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     c16:	f108 0801 	add.w	r8, r8, #1
		break;
     c1a:	e7a8      	b.n	b6e <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
     c1c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     c20:	2208      	movs	r2, #8
     c22:	f362 03c6 	bfi	r3, r2, #3, #4
     c26:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     c2a:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
     c2e:	f89d 3020 	ldrb.w	r3, [sp, #32]
     c32:	f043 0302 	orr.w	r3, r3, #2
     c36:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     c3a:	e798      	b.n	b6e <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
     c3c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     c40:	f36f 03c6 	bfc	r3, #3, #4
     c44:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
     c48:	e791      	b.n	b6e <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
     c4a:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     c4e:	2101      	movs	r1, #1
     c50:	f361 0202 	bfi	r2, r1, #0, #3
     c54:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     c58:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     c5c:	f002 0278 	and.w	r2, r2, #120	; 0x78
     c60:	2a40      	cmp	r2, #64	; 0x40
     c62:	f000 80aa 	beq.w	dba <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
     c66:	2b63      	cmp	r3, #99	; 0x63
     c68:	f000 80ae 	beq.w	dc8 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
     c6c:	f89d 3020 	ldrb.w	r3, [sp, #32]
     c70:	f3c3 0240 	ubfx	r2, r3, #1, #1
     c74:	4317      	orrs	r7, r2
     c76:	f367 0341 	bfi	r3, r7, #1, #1
     c7a:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     c7e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     c82:	f013 0f01 	tst.w	r3, #1
     c86:	f000 80da 	beq.w	e3e <cbvprintf+0x56a>
			width = va_arg(ap, int);
     c8a:	9b03      	ldr	r3, [sp, #12]
     c8c:	1d1a      	adds	r2, r3, #4
     c8e:	9203      	str	r2, [sp, #12]
     c90:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     c92:	2f00      	cmp	r7, #0
     c94:	f2c0 80cb 	blt.w	e2e <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     c98:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     c9c:	f013 0f04 	tst.w	r3, #4
     ca0:	f000 80df 	beq.w	e62 <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
     ca4:	9b03      	ldr	r3, [sp, #12]
     ca6:	1d1a      	adds	r2, r3, #4
     ca8:	9203      	str	r2, [sp, #12]
     caa:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
     cae:	f1bb 0f00 	cmp.w	fp, #0
     cb2:	f2c0 80cd 	blt.w	e50 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     cb6:	2300      	movs	r3, #0
     cb8:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
     cba:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     cbc:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     cc0:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     cc4:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
     cc8:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     ccc:	2b01      	cmp	r3, #1
     cce:	f000 80d1 	beq.w	e74 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     cd2:	2b02      	cmp	r3, #2
     cd4:	f000 8116 	beq.w	f04 <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     cd8:	2b04      	cmp	r3, #4
     cda:	f000 8167 	beq.w	fac <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     cde:	2b03      	cmp	r3, #3
     ce0:	f000 817e 	beq.w	fe0 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     ce4:	f89d 9020 	ldrb.w	r9, [sp, #32]
     ce8:	f019 0303 	ands.w	r3, r9, #3
     cec:	9302      	str	r3, [sp, #8]
     cee:	f040 817d 	bne.w	fec <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     cf2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
     cf6:	3b25      	subs	r3, #37	; 0x25
     cf8:	2b53      	cmp	r3, #83	; 0x53
     cfa:	f200 8233 	bhi.w	1164 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x164>
     cfe:	e8df f013 	tbh	[pc, r3, lsl #1]
     d02:	0181      	.short	0x0181
     d04:	02310231 	.word	0x02310231
     d08:	02310231 	.word	0x02310231
     d0c:	02310231 	.word	0x02310231
     d10:	02310231 	.word	0x02310231
     d14:	02310231 	.word	0x02310231
     d18:	02310231 	.word	0x02310231
     d1c:	02310231 	.word	0x02310231
     d20:	02310231 	.word	0x02310231
     d24:	02310231 	.word	0x02310231
     d28:	02310231 	.word	0x02310231
     d2c:	02310231 	.word	0x02310231
     d30:	02310231 	.word	0x02310231
     d34:	02310231 	.word	0x02310231
     d38:	02310231 	.word	0x02310231
     d3c:	02310231 	.word	0x02310231
     d40:	02310231 	.word	0x02310231
     d44:	02310231 	.word	0x02310231
     d48:	02310231 	.word	0x02310231
     d4c:	02310231 	.word	0x02310231
     d50:	02310231 	.word	0x02310231
     d54:	02310231 	.word	0x02310231
     d58:	02310231 	.word	0x02310231
     d5c:	02310231 	.word	0x02310231
     d60:	02310231 	.word	0x02310231
     d64:	02310231 	.word	0x02310231
     d68:	023101c7 	.word	0x023101c7
     d6c:	02310231 	.word	0x02310231
     d70:	02310231 	.word	0x02310231
     d74:	02310231 	.word	0x02310231
     d78:	02310231 	.word	0x02310231
     d7c:	01a10231 	.word	0x01a10231
     d80:	023101ab 	.word	0x023101ab
     d84:	02310231 	.word	0x02310231
     d88:	01ab0231 	.word	0x01ab0231
     d8c:	02310231 	.word	0x02310231
     d90:	02310231 	.word	0x02310231
     d94:	01c70208 	.word	0x01c70208
     d98:	023101ea 	.word	0x023101ea
     d9c:	018f0231 	.word	0x018f0231
     da0:	01c70231 	.word	0x01c70231
     da4:	02310231 	.word	0x02310231
     da8:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
     daa:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     dae:	2102      	movs	r1, #2
     db0:	f361 0202 	bfi	r2, r1, #0, #3
     db4:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
     db8:	e74e      	b.n	c58 <cbvprintf+0x384>
			conv->invalid = true;
     dba:	f89d 1020 	ldrb.w	r1, [sp, #32]
     dbe:	f041 0101 	orr.w	r1, r1, #1
     dc2:	f88d 1020 	strb.w	r1, [sp, #32]
     dc6:	e74e      	b.n	c66 <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
     dc8:	1e17      	subs	r7, r2, #0
     dca:	bf18      	it	ne
     dcc:	2701      	movne	r7, #1
     dce:	e74d      	b.n	c6c <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
     dd0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     dd4:	2204      	movs	r2, #4
     dd6:	f362 0302 	bfi	r3, r2, #0, #3
     dda:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
     dde:	2701      	movs	r7, #1
			break;
     de0:	e744      	b.n	c6c <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
     de2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     de6:	2203      	movs	r2, #3
     de8:	f362 0302 	bfi	r3, r2, #0, #3
     dec:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     df0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     df4:	f003 0378 	and.w	r3, r3, #120	; 0x78
     df8:	2b40      	cmp	r3, #64	; 0x40
     dfa:	f47f af37 	bne.w	c6c <cbvprintf+0x398>
			unsupported = true;
     dfe:	2701      	movs	r7, #1
     e00:	e734      	b.n	c6c <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
     e02:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     e06:	2203      	movs	r2, #3
     e08:	f362 0302 	bfi	r3, r2, #0, #3
     e0c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
     e10:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     e14:	f013 0f78 	tst.w	r3, #120	; 0x78
     e18:	f43f af28 	beq.w	c6c <cbvprintf+0x398>
			unsupported = true;
     e1c:	2701      	movs	r7, #1
     e1e:	e725      	b.n	c6c <cbvprintf+0x398>
		conv->invalid = true;
     e20:	f89d 3020 	ldrb.w	r3, [sp, #32]
     e24:	f043 0301 	orr.w	r3, r3, #1
     e28:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     e2c:	e71e      	b.n	c6c <cbvprintf+0x398>
				conv->flag_dash = true;
     e2e:	f89d 3020 	ldrb.w	r3, [sp, #32]
     e32:	f043 0304 	orr.w	r3, r3, #4
     e36:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
     e3a:	427f      	negs	r7, r7
     e3c:	e72c      	b.n	c98 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
     e3e:	f99d 3020 	ldrsb.w	r3, [sp, #32]
     e42:	2b00      	cmp	r3, #0
     e44:	db02      	blt.n	e4c <cbvprintf+0x578>
		int width = -1;
     e46:	f04f 37ff 	mov.w	r7, #4294967295
     e4a:	e725      	b.n	c98 <cbvprintf+0x3c4>
			width = conv->width_value;
     e4c:	9f09      	ldr	r7, [sp, #36]	; 0x24
     e4e:	e723      	b.n	c98 <cbvprintf+0x3c4>
				conv->prec_present = false;
     e50:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     e54:	f36f 0341 	bfc	r3, #1, #1
     e58:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
     e5c:	f04f 3bff 	mov.w	fp, #4294967295
     e60:	e729      	b.n	cb6 <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
     e62:	f013 0f02 	tst.w	r3, #2
     e66:	d002      	beq.n	e6e <cbvprintf+0x59a>
			precision = conv->prec_value;
     e68:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
     e6c:	e723      	b.n	cb6 <cbvprintf+0x3e2>
		int precision = -1;
     e6e:	f04f 3bff 	mov.w	fp, #4294967295
     e72:	e720      	b.n	cb6 <cbvprintf+0x3e2>
			switch (length_mod) {
     e74:	1ecb      	subs	r3, r1, #3
     e76:	2b04      	cmp	r3, #4
     e78:	d804      	bhi.n	e84 <cbvprintf+0x5b0>
     e7a:	e8df f003 	tbb	[pc, r3]
     e7e:	1d0b      	.short	0x1d0b
     e80:	3529      	.short	0x3529
     e82:	35          	.byte	0x35
     e83:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     e84:	9b03      	ldr	r3, [sp, #12]
     e86:	1d1a      	adds	r2, r3, #4
     e88:	9203      	str	r2, [sp, #12]
     e8a:	681a      	ldr	r2, [r3, #0]
     e8c:	17d3      	asrs	r3, r2, #31
     e8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     e92:	e006      	b.n	ea2 <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
     e94:	9b03      	ldr	r3, [sp, #12]
     e96:	1d1a      	adds	r2, r3, #4
     e98:	9203      	str	r2, [sp, #12]
     e9a:	681a      	ldr	r2, [r3, #0]
     e9c:	17d3      	asrs	r3, r2, #31
     e9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
     ea2:	2901      	cmp	r1, #1
     ea4:	d028      	beq.n	ef8 <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
     ea6:	2902      	cmp	r1, #2
     ea8:	f47f af1c 	bne.w	ce4 <cbvprintf+0x410>
				value->sint = (short)value->sint;
     eac:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
     eb0:	17d3      	asrs	r3, r2, #31
     eb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
     eb6:	e715      	b.n	ce4 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
     eb8:	9b03      	ldr	r3, [sp, #12]
     eba:	3307      	adds	r3, #7
     ebc:	f023 0307 	bic.w	r3, r3, #7
     ec0:	f103 0208 	add.w	r2, r3, #8
     ec4:	9203      	str	r2, [sp, #12]
     ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     eca:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     ece:	e7e8      	b.n	ea2 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
     ed0:	9b03      	ldr	r3, [sp, #12]
     ed2:	3307      	adds	r3, #7
     ed4:	f023 0307 	bic.w	r3, r3, #7
     ed8:	f103 0208 	add.w	r2, r3, #8
     edc:	9203      	str	r2, [sp, #12]
     ede:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     ee2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     ee6:	e7dc      	b.n	ea2 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     ee8:	9b03      	ldr	r3, [sp, #12]
     eea:	1d1a      	adds	r2, r3, #4
     eec:	9203      	str	r2, [sp, #12]
     eee:	681a      	ldr	r2, [r3, #0]
     ef0:	17d3      	asrs	r3, r2, #31
				value->sint =
     ef2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     ef6:	e7d4      	b.n	ea2 <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
     ef8:	f89d 3018 	ldrb.w	r3, [sp, #24]
     efc:	9306      	str	r3, [sp, #24]
     efe:	2300      	movs	r3, #0
     f00:	9307      	str	r3, [sp, #28]
     f02:	e6ef      	b.n	ce4 <cbvprintf+0x410>
			switch (length_mod) {
     f04:	1ecb      	subs	r3, r1, #3
     f06:	2b04      	cmp	r3, #4
     f08:	d804      	bhi.n	f14 <cbvprintf+0x640>
     f0a:	e8df f003 	tbb	[pc, r3]
     f0e:	1f0b      	.short	0x1f0b
     f10:	4135      	.short	0x4135
     f12:	41          	.byte	0x41
     f13:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     f14:	9b03      	ldr	r3, [sp, #12]
     f16:	1d1a      	adds	r2, r3, #4
     f18:	9203      	str	r2, [sp, #12]
     f1a:	681b      	ldr	r3, [r3, #0]
     f1c:	9306      	str	r3, [sp, #24]
     f1e:	2300      	movs	r3, #0
     f20:	9307      	str	r3, [sp, #28]
				break;
     f22:	e01e      	b.n	f62 <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
     f24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
     f28:	2b63      	cmp	r3, #99	; 0x63
     f2a:	d007      	beq.n	f3c <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
     f2c:	9b03      	ldr	r3, [sp, #12]
     f2e:	1d1a      	adds	r2, r3, #4
     f30:	9203      	str	r2, [sp, #12]
     f32:	681b      	ldr	r3, [r3, #0]
     f34:	9306      	str	r3, [sp, #24]
     f36:	2300      	movs	r3, #0
     f38:	9307      	str	r3, [sp, #28]
     f3a:	e012      	b.n	f62 <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
     f3c:	9b03      	ldr	r3, [sp, #12]
     f3e:	1d1a      	adds	r2, r3, #4
     f40:	9203      	str	r2, [sp, #12]
     f42:	681b      	ldr	r3, [r3, #0]
     f44:	9306      	str	r3, [sp, #24]
     f46:	2300      	movs	r3, #0
     f48:	9307      	str	r3, [sp, #28]
     f4a:	e00a      	b.n	f62 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
     f4c:	9b03      	ldr	r3, [sp, #12]
     f4e:	3307      	adds	r3, #7
     f50:	f023 0307 	bic.w	r3, r3, #7
     f54:	f103 0208 	add.w	r2, r3, #8
     f58:	9203      	str	r2, [sp, #12]
     f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     f5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
     f62:	2901      	cmp	r1, #1
     f64:	d01c      	beq.n	fa0 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
     f66:	2902      	cmp	r1, #2
     f68:	f47f aebc 	bne.w	ce4 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
     f6c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
     f70:	9306      	str	r3, [sp, #24]
     f72:	2300      	movs	r3, #0
     f74:	9307      	str	r3, [sp, #28]
     f76:	e6b5      	b.n	ce4 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
     f78:	9b03      	ldr	r3, [sp, #12]
     f7a:	3307      	adds	r3, #7
     f7c:	f023 0307 	bic.w	r3, r3, #7
     f80:	f103 0208 	add.w	r2, r3, #8
     f84:	9203      	str	r2, [sp, #12]
     f86:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     f8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     f8e:	e7e8      	b.n	f62 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
     f90:	9b03      	ldr	r3, [sp, #12]
     f92:	1d1a      	adds	r2, r3, #4
     f94:	9203      	str	r2, [sp, #12]
     f96:	681b      	ldr	r3, [r3, #0]
				value->uint =
     f98:	9306      	str	r3, [sp, #24]
     f9a:	2300      	movs	r3, #0
     f9c:	9307      	str	r3, [sp, #28]
				break;
     f9e:	e7e0      	b.n	f62 <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
     fa0:	f89d 3018 	ldrb.w	r3, [sp, #24]
     fa4:	9306      	str	r3, [sp, #24]
     fa6:	2300      	movs	r3, #0
     fa8:	9307      	str	r3, [sp, #28]
     faa:	e69b      	b.n	ce4 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
     fac:	2908      	cmp	r1, #8
     fae:	d00b      	beq.n	fc8 <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
     fb0:	9b03      	ldr	r3, [sp, #12]
     fb2:	3307      	adds	r3, #7
     fb4:	f023 0307 	bic.w	r3, r3, #7
     fb8:	f103 0208 	add.w	r2, r3, #8
     fbc:	9203      	str	r2, [sp, #12]
     fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
     fc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
     fc6:	e68d      	b.n	ce4 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
     fc8:	9b03      	ldr	r3, [sp, #12]
     fca:	3307      	adds	r3, #7
     fcc:	f023 0307 	bic.w	r3, r3, #7
     fd0:	f103 0208 	add.w	r2, r3, #8
     fd4:	9203      	str	r2, [sp, #12]
     fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
     fda:	e9cd 2306 	strd	r2, r3, [sp, #24]
     fde:	e681      	b.n	ce4 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
     fe0:	9b03      	ldr	r3, [sp, #12]
     fe2:	1d1a      	adds	r2, r3, #4
     fe4:	9203      	str	r2, [sp, #12]
     fe6:	681b      	ldr	r3, [r3, #0]
     fe8:	9306      	str	r3, [sp, #24]
     fea:	e67b      	b.n	ce4 <cbvprintf+0x410>
			OUTS(sp, fp);
     fec:	4643      	mov	r3, r8
     fee:	4652      	mov	r2, sl
     ff0:	4629      	mov	r1, r5
     ff2:	4630      	mov	r0, r6
     ff4:	f00b fbaf 	bl	c756 <outs>
     ff8:	2800      	cmp	r0, #0
     ffa:	f2c0 814f 	blt.w	129c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x29c>
     ffe:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    1000:	46c2      	mov	sl, r8
			continue;
    1002:	e46f      	b.n	8e4 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    1004:	4629      	mov	r1, r5
    1006:	2025      	movs	r0, #37	; 0x25
    1008:	47b0      	blx	r6
    100a:	2800      	cmp	r0, #0
    100c:	f2c0 8146 	blt.w	129c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x29c>
    1010:	3401      	adds	r4, #1
		char sign = 0;
    1012:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    1016:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    101a:	f04f 0a00 	mov.w	sl, #0
			break;
    101e:	e0a7      	b.n	1170 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x170>
		case 's': {
			bps = (const char *)value->ptr;
    1020:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    1024:	f1bb 0f00 	cmp.w	fp, #0
    1028:	db08      	blt.n	103c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3c>
				len = strnlen(bps, precision);
    102a:	4659      	mov	r1, fp
    102c:	4650      	mov	r0, sl
    102e:	f00c fac5 	bl	d5bc <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    1032:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    1036:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    103a:	e099      	b.n	1170 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x170>
				len = strlen(bps);
    103c:	4650      	mov	r0, sl
    103e:	f00c fab5 	bl	d5ac <strlen>
    1042:	e7f6      	b.n	1032 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x32>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1044:	9b06      	ldr	r3, [sp, #24]
    1046:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    104a:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    104e:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    1052:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    1056:	e08b      	b.n	1170 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x170>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    1058:	f019 0f08 	tst.w	r9, #8
    105c:	d105      	bne.n	106a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x6a>
				sign = '+';
			} else if (conv->flag_space) {
    105e:	f019 0910 	ands.w	r9, r9, #16
    1062:	d004      	beq.n	106e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x6e>
				sign = ' ';
    1064:	f04f 0920 	mov.w	r9, #32
    1068:	e001      	b.n	106e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x6e>
				sign = '+';
    106a:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    106e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    1072:	2a00      	cmp	r2, #0
    1074:	f173 0100 	sbcs.w	r1, r3, #0
    1078:	db02      	blt.n	1080 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x80>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    107a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    107e:	e009      	b.n	1094 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x94>
				value->uint = (uint_value_type)-sint;
    1080:	4252      	negs	r2, r2
    1082:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1086:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    108a:	f04f 092d 	mov.w	r9, #45	; 0x2d
    108e:	e001      	b.n	1094 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x94>
		switch (conv->specifier) {
    1090:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    1094:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    1098:	9300      	str	r3, [sp, #0]
    109a:	ab0c      	add	r3, sp, #48	; 0x30
    109c:	aa08      	add	r2, sp, #32
    109e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    10a2:	f00b faee 	bl	c682 <encode_uint>
    10a6:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    10a8:	f1bb 0f00 	cmp.w	fp, #0
    10ac:	f2c0 8090 	blt.w	11d0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1d0>
				size_t len = bpe - bps;
    10b0:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    10b4:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    10b8:	f89d 2020 	ldrb.w	r2, [sp, #32]
    10bc:	f36f 1286 	bfc	r2, #6, #1
    10c0:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    10c4:	459b      	cmp	fp, r3
    10c6:	f240 8086 	bls.w	11d6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1d6>
					conv->pad0_value = precision - (int)len;
    10ca:	ebab 0303 	sub.w	r3, fp, r3
    10ce:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    10d0:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    10d4:	e04c      	b.n	1170 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x170>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    10d6:	9806      	ldr	r0, [sp, #24]
    10d8:	b930      	cbnz	r0, 10e8 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xe8>
		char sign = 0;
    10da:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    10de:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 12a4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2a4>
			bps = "(nil)";
    10e2:	f1ab 0a05 	sub.w	sl, fp, #5
    10e6:	e043      	b.n	1170 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x170>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    10e8:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    10ec:	9300      	str	r3, [sp, #0]
    10ee:	ab0c      	add	r3, sp, #48	; 0x30
    10f0:	aa08      	add	r2, sp, #32
    10f2:	2100      	movs	r1, #0
    10f4:	f00b fac5 	bl	c682 <encode_uint>
    10f8:	4682      	mov	sl, r0
				conv->altform_0c = true;
    10fa:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    10fe:	f043 0310 	orr.w	r3, r3, #16
    1102:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    1106:	2378      	movs	r3, #120	; 0x78
    1108:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    110c:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    1110:	e7ca      	b.n	10a8 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xa8>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    1112:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    1114:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1118:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    111c:	2b07      	cmp	r3, #7
    111e:	d806      	bhi.n	112e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x12e>
    1120:	e8df f003 	tbb	[pc, r3]
    1124:	100e0c04 	.word	0x100e0c04
    1128:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    112c:	6014      	str	r4, [r2, #0]
		char sign = 0;
    112e:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    1132:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    1136:	f04f 0a00 	mov.w	sl, #0
}
    113a:	e019      	b.n	1170 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x170>
		*(signed char *)dp = (signed char)count;
    113c:	7014      	strb	r4, [r2, #0]
		break;
    113e:	e7f6      	b.n	112e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x12e>
		*(short *)dp = (short)count;
    1140:	8014      	strh	r4, [r2, #0]
		break;
    1142:	e7f4      	b.n	112e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x12e>
		*(long *)dp = (long)count;
    1144:	6014      	str	r4, [r2, #0]
		break;
    1146:	e7f2      	b.n	112e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x12e>
		*(long long *)dp = (long long)count;
    1148:	4620      	mov	r0, r4
    114a:	17e1      	asrs	r1, r4, #31
    114c:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    1150:	e7ed      	b.n	112e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x12e>
		*(intmax_t *)dp = (intmax_t)count;
    1152:	4620      	mov	r0, r4
    1154:	17e1      	asrs	r1, r4, #31
    1156:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    115a:	e7e8      	b.n	112e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x12e>
		*(size_t *)dp = (size_t)count;
    115c:	6014      	str	r4, [r2, #0]
		break;
    115e:	e7e6      	b.n	112e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x12e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1160:	6014      	str	r4, [r2, #0]
		break;
    1162:	e7e4      	b.n	112e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x12e>
		switch (conv->specifier) {
    1164:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1168:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    116c:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    1170:	f1ba 0f00 	cmp.w	sl, #0
    1174:	f000 808e 	beq.w	1294 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x294>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    1178:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    117c:	f1b9 0f00 	cmp.w	r9, #0
    1180:	d000      	beq.n	1184 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x184>
			nj_len += 1U;
    1182:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    1184:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    1188:	f011 0f10 	tst.w	r1, #16
    118c:	d026      	beq.n	11dc <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1dc>
			nj_len += 2U;
    118e:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    1190:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1192:	4413      	add	r3, r2
		if (conv->pad_fp) {
    1194:	f011 0f40 	tst.w	r1, #64	; 0x40
    1198:	d001      	beq.n	119e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x19e>
			nj_len += conv->pad0_pre_exp;
    119a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    119c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    119e:	2f00      	cmp	r7, #0
    11a0:	dd32      	ble.n	1208 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x208>
			width -= (int)nj_len;
    11a2:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    11a4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    11a8:	f013 0f04 	tst.w	r3, #4
    11ac:	d12c      	bne.n	1208 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x208>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    11ae:	f013 0f40 	tst.w	r3, #64	; 0x40
    11b2:	d018      	beq.n	11e6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1e6>
					if (sign != 0) {
    11b4:	f1b9 0f00 	cmp.w	r9, #0
    11b8:	d018      	beq.n	11ec <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1ec>
						OUTC(sign);
    11ba:	4629      	mov	r1, r5
    11bc:	4648      	mov	r0, r9
    11be:	47b0      	blx	r6
    11c0:	2800      	cmp	r0, #0
    11c2:	db6b      	blt.n	129c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x29c>
    11c4:	3401      	adds	r4, #1
						sign = 0;
    11c6:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    11ca:	2330      	movs	r3, #48	; 0x30
    11cc:	9302      	str	r3, [sp, #8]
    11ce:	e00f      	b.n	11f0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1f0>
		const char *bpe = buf + sizeof(buf);
    11d0:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    11d4:	e7cc      	b.n	1170 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x170>
    11d6:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    11da:	e7c9      	b.n	1170 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x170>
		} else if (conv->altform_0) {
    11dc:	f011 0f08 	tst.w	r1, #8
    11e0:	d0d6      	beq.n	1190 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x190>
			nj_len += 1U;
    11e2:	3201      	adds	r2, #1
    11e4:	e7d4      	b.n	1190 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x190>
				char pad = ' ';
    11e6:	2320      	movs	r3, #32
    11e8:	9302      	str	r3, [sp, #8]
    11ea:	e001      	b.n	11f0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1f0>
					pad = '0';
    11ec:	2330      	movs	r3, #48	; 0x30
    11ee:	9302      	str	r3, [sp, #8]
    11f0:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    11f2:	1e5f      	subs	r7, r3, #1
    11f4:	2b00      	cmp	r3, #0
    11f6:	dd07      	ble.n	1208 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x208>
					OUTC(pad);
    11f8:	4629      	mov	r1, r5
    11fa:	9802      	ldr	r0, [sp, #8]
    11fc:	47b0      	blx	r6
    11fe:	2800      	cmp	r0, #0
    1200:	db4c      	blt.n	129c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x29c>
    1202:	3401      	adds	r4, #1
				while (width-- > 0) {
    1204:	463b      	mov	r3, r7
    1206:	e7f4      	b.n	11f2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1f2>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    1208:	f1b9 0f00 	cmp.w	r9, #0
    120c:	d005      	beq.n	121a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x21a>
			OUTC(sign);
    120e:	4629      	mov	r1, r5
    1210:	4648      	mov	r0, r9
    1212:	47b0      	blx	r6
    1214:	2800      	cmp	r0, #0
    1216:	db41      	blt.n	129c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x29c>
    1218:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    121a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    121e:	f3c3 1200 	ubfx	r2, r3, #4, #1
    1222:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1226:	4313      	orrs	r3, r2
    1228:	d005      	beq.n	1236 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x236>
				OUTC('0');
    122a:	4629      	mov	r1, r5
    122c:	2030      	movs	r0, #48	; 0x30
    122e:	47b0      	blx	r6
    1230:	2800      	cmp	r0, #0
    1232:	db33      	blt.n	129c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x29c>
    1234:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    1236:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    123a:	f013 0f10 	tst.w	r3, #16
    123e:	d006      	beq.n	124e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x24e>
				OUTC(conv->specifier);
    1240:	4629      	mov	r1, r5
    1242:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    1246:	47b0      	blx	r6
    1248:	2800      	cmp	r0, #0
    124a:	db27      	blt.n	129c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x29c>
    124c:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    124e:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    1250:	f103 39ff 	add.w	r9, r3, #4294967295
    1254:	2b00      	cmp	r3, #0
    1256:	dd07      	ble.n	1268 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x268>
				OUTC('0');
    1258:	4629      	mov	r1, r5
    125a:	2030      	movs	r0, #48	; 0x30
    125c:	47b0      	blx	r6
    125e:	2800      	cmp	r0, #0
    1260:	db1c      	blt.n	129c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x29c>
    1262:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    1264:	464b      	mov	r3, r9
    1266:	e7f3      	b.n	1250 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x250>
			}

			OUTS(bps, bpe);
    1268:	465b      	mov	r3, fp
    126a:	4652      	mov	r2, sl
    126c:	4629      	mov	r1, r5
    126e:	4630      	mov	r0, r6
    1270:	f00b fa71 	bl	c756 <outs>
    1274:	2800      	cmp	r0, #0
    1276:	db11      	blt.n	129c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x29c>
    1278:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    127a:	2f00      	cmp	r7, #0
    127c:	dd07      	ble.n	128e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x28e>
			OUTC(' ');
    127e:	4629      	mov	r1, r5
    1280:	2020      	movs	r0, #32
    1282:	47b0      	blx	r6
    1284:	2800      	cmp	r0, #0
    1286:	db09      	blt.n	129c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x29c>
    1288:	3401      	adds	r4, #1
			--width;
    128a:	3f01      	subs	r7, #1
    128c:	e7f5      	b.n	127a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x27a>
		fp = extract_conversion(conv, sp);
    128e:	46c2      	mov	sl, r8
    1290:	f7ff bb28 	b.w	8e4 <cbvprintf+0x10>
    1294:	46c2      	mov	sl, r8
    1296:	f7ff bb25 	b.w	8e4 <cbvprintf+0x10>
		}
	}

	return count;
    129a:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    129c:	b013      	add	sp, #76	; 0x4c
    129e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12a2:	bf00      	nop
    12a4:	0000f08d 	.word	0x0000f08d

000012a8 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    12a8:	b508      	push	{r3, lr}
    12aa:	f04f 0220 	mov.w	r2, #32
    12ae:	f3ef 8311 	mrs	r3, BASEPRI
    12b2:	f382 8812 	msr	BASEPRI_MAX, r2
    12b6:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    12ba:	f003 fa63 	bl	4784 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    12be:	4803      	ldr	r0, [pc, #12]	; (12cc <sys_reboot+0x24>)
    12c0:	f00a fc86 	bl	bbd0 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    12c4:	f002 fcc2 	bl	3c4c <arch_cpu_idle>
    12c8:	e7fc      	b.n	12c4 <sys_reboot+0x1c>
    12ca:	bf00      	nop
    12cc:	0000f090 	.word	0x0000f090

000012d0 <nordicsemi_nrf53_init>:

#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf53_init(const struct device *arg)
{
    12d0:	b410      	push	{r4}
    12d2:	f04f 0320 	mov.w	r3, #32
    12d6:	f3ef 8411 	mrs	r4, BASEPRI
    12da:	f383 8812 	msr	BASEPRI_MAX, r3
    12de:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    12e2:	2101      	movs	r1, #1
    12e4:	4b12      	ldr	r3, [pc, #72]	; (1330 <nordicsemi_nrf53_init+0x60>)
    12e6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    12ea:	4a12      	ldr	r2, [pc, #72]	; (1334 <nordicsemi_nrf53_init+0x64>)
    12ec:	2302      	movs	r3, #2
    12ee:	f8c2 36d0 	str.w	r3, [r2, #1744]	; 0x6d0

#if defined(GPIO_PIN_CNF_MCUSEL_Msk)
NRF_STATIC_INLINE void nrf_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_mcusel_t mcu)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    12f2:	4811      	ldr	r0, [pc, #68]	; (1338 <nordicsemi_nrf53_init+0x68>)
    12f4:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    12f8:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    12fc:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    1300:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    1304:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
    1308:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    130c:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    1310:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    1314:	f8c2 1704 	str.w	r1, [r2, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    1318:	f8c2 1904 	str.w	r1, [r2, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    131c:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
	__asm__ volatile(
    1320:	f384 8811 	msr	BASEPRI, r4
    1324:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1328:	2000      	movs	r0, #0
    132a:	bc10      	pop	{r4}
    132c:	4770      	bx	lr
    132e:	bf00      	nop
    1330:	50001000 	.word	0x50001000
    1334:	50004000 	.word	0x50004000
    1338:	50842500 	.word	0x50842500

0000133c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    133c:	b170      	cbz	r0, 135c <arch_busy_wait+0x20>

void arch_busy_wait(uint32_t time_us)
{
    133e:	b508      	push	{r3, lr}
    1340:	4602      	mov	r2, r0

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    1342:	4b07      	ldr	r3, [pc, #28]	; (1360 <arch_busy_wait+0x24>)
    1344:	681b      	ldr	r3, [r3, #0]
    1346:	4807      	ldr	r0, [pc, #28]	; (1364 <arch_busy_wait+0x28>)
    1348:	fba0 1303 	umull	r1, r3, r0, r3
    134c:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
    134e:	fb03 f002 	mul.w	r0, r3, r2
    1352:	4b05      	ldr	r3, [pc, #20]	; (1368 <arch_busy_wait+0x2c>)
    1354:	f043 0301 	orr.w	r3, r3, #1
    1358:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    135a:	bd08      	pop	{r3, pc}
    135c:	4770      	bx	lr
    135e:	bf00      	nop
    1360:	20000250 	.word	0x20000250
    1364:	431bde83 	.word	0x431bde83
    1368:	0000f000 	.word	0x0000f000

0000136c <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    136c:	b084      	sub	sp, #16
    136e:	ab04      	add	r3, sp, #16
    1370:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    1374:	f89d 3004 	ldrb.w	r3, [sp, #4]
    1378:	2b06      	cmp	r3, #6
    137a:	d001      	beq.n	1380 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    137c:	b004      	add	sp, #16
    137e:	4770      	bx	lr
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    1380:	4b03      	ldr	r3, [pc, #12]	; (1390 <pm_power_state_set+0x24>)
    1382:	2201      	movs	r2, #1
    1384:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1388:	f3bf 8f4f 	dsb	sy
        __WFE();
    138c:	bf20      	wfe
    while (true)
    138e:	e7fd      	b.n	138c <pm_power_state_set+0x20>
    1390:	50004000 	.word	0x50004000

00001394 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    1394:	4b05      	ldr	r3, [pc, #20]	; (13ac <is_rodata+0x18>)
    1396:	4298      	cmp	r0, r3
    1398:	d304      	bcc.n	13a4 <is_rodata+0x10>
    139a:	4b05      	ldr	r3, [pc, #20]	; (13b0 <is_rodata+0x1c>)
    139c:	4298      	cmp	r0, r3
    139e:	d303      	bcc.n	13a8 <is_rodata+0x14>
    13a0:	2000      	movs	r0, #0
    13a2:	4770      	bx	lr
    13a4:	2000      	movs	r0, #0
    13a6:	4770      	bx	lr
    13a8:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
    13aa:	4770      	bx	lr
    13ac:	0000ebb4 	.word	0x0000ebb4
    13b0:	00010298 	.word	0x00010298

000013b4 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
    13b4:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    13b6:	4b06      	ldr	r3, [pc, #24]	; (13d0 <thread_set+0x1c>)
    13b8:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    13ba:	b118      	cbz	r0, 13c4 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    13bc:	4b05      	ldr	r3, [pc, #20]	; (13d4 <thread_set+0x20>)
    13be:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    13c0:	2b09      	cmp	r3, #9
    13c2:	dc00      	bgt.n	13c6 <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
    13c4:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    13c6:	4804      	ldr	r0, [pc, #16]	; (13d8 <thread_set+0x24>)
    13c8:	f009 fa06 	bl	a7d8 <z_impl_k_sem_give>
}
    13cc:	e7fa      	b.n	13c4 <thread_set+0x10>
    13ce:	bf00      	nop
    13d0:	20000b68 	.word	0x20000b68
    13d4:	20000b38 	.word	0x20000b38
    13d8:	200003d8 	.word	0x200003d8

000013dc <log_process_thread_timer_expiry_fn>:

	return 0;
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    13dc:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    13de:	4802      	ldr	r0, [pc, #8]	; (13e8 <log_process_thread_timer_expiry_fn+0xc>)
    13e0:	f009 f9fa 	bl	a7d8 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    13e4:	bd08      	pop	{r3, pc}
    13e6:	bf00      	nop
    13e8:	200003d8 	.word	0x200003d8

000013ec <next_pending>:
{
    13ec:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
    13ee:	4803      	ldr	r0, [pc, #12]	; (13fc <next_pending+0x10>)
    13f0:	f00b fad3 	bl	c99a <log_list_head_peek>
}
    13f4:	3800      	subs	r0, #0
    13f6:	bf18      	it	ne
    13f8:	2001      	movne	r0, #1
    13fa:	bd08      	pop	{r3, pc}
    13fc:	20000b44 	.word	0x20000b44

00001400 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    1400:	b530      	push	{r4, r5, lr}
    1402:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    1404:	2200      	movs	r2, #0
    1406:	490f      	ldr	r1, [pc, #60]	; (1444 <enable_logger+0x44>)
    1408:	480f      	ldr	r0, [pc, #60]	; (1448 <enable_logger+0x48>)
    140a:	f00d fb12 	bl	ea32 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    140e:	4d0f      	ldr	r5, [pc, #60]	; (144c <enable_logger+0x4c>)
    1410:	2200      	movs	r2, #0
    1412:	2300      	movs	r3, #0
    1414:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1418:	2400      	movs	r4, #0
    141a:	9404      	str	r4, [sp, #16]
    141c:	230e      	movs	r3, #14
    141e:	9303      	str	r3, [sp, #12]
    1420:	9402      	str	r4, [sp, #8]
    1422:	9401      	str	r4, [sp, #4]
    1424:	9400      	str	r4, [sp, #0]
    1426:	4b0a      	ldr	r3, [pc, #40]	; (1450 <enable_logger+0x50>)
    1428:	f44f 7240 	mov.w	r2, #768	; 0x300
    142c:	4909      	ldr	r1, [pc, #36]	; (1454 <enable_logger+0x54>)
    142e:	4628      	mov	r0, r5
    1430:	f00c ff9f 	bl	e372 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    1434:	4908      	ldr	r1, [pc, #32]	; (1458 <enable_logger+0x58>)
    1436:	4628      	mov	r0, r5
    1438:	f008 ffd6 	bl	a3e8 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    143c:	4620      	mov	r0, r4
    143e:	b009      	add	sp, #36	; 0x24
    1440:	bd30      	pop	{r4, r5, pc}
    1442:	bf00      	nop
    1444:	000013dd 	.word	0x000013dd
    1448:	20000558 	.word	0x20000558
    144c:	20000590 	.word	0x20000590
    1450:	00001a81 	.word	0x00001a81
    1454:	200020e8 	.word	0x200020e8
    1458:	0000f0c0 	.word	0x0000f0c0

0000145c <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    145c:	4b16      	ldr	r3, [pc, #88]	; (14b8 <log_init+0x5c>)
    145e:	e8d3 2fef 	ldaex	r2, [r3]
    1462:	1c51      	adds	r1, r2, #1
    1464:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1468:	2800      	cmp	r0, #0
    146a:	d1f8      	bne.n	145e <log_init+0x2>
	if (atomic_inc(&initialized) != 0) {
    146c:	bb1a      	cbnz	r2, 14b6 <log_init+0x5a>
{
    146e:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
    1470:	2400      	movs	r4, #0
    1472:	e009      	b.n	1488 <log_init+0x2c>
					   backend->cb->ctx,
    1474:	4b11      	ldr	r3, [pc, #68]	; (14bc <log_init+0x60>)
    1476:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    147a:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    147c:	2204      	movs	r2, #4
    147e:	6819      	ldr	r1, [r3, #0]
    1480:	4628      	mov	r0, r5
    1482:	f000 fb3d 	bl	1b00 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1486:	3401      	adds	r4, #1
    1488:	4b0d      	ldr	r3, [pc, #52]	; (14c0 <log_init+0x64>)
    148a:	4a0c      	ldr	r2, [pc, #48]	; (14bc <log_init+0x60>)
    148c:	1a9b      	subs	r3, r3, r2
    148e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1492:	da0f      	bge.n	14b4 <log_init+0x58>
		const struct log_backend *backend = log_backend_get(i);
    1494:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
    1496:	4d09      	ldr	r5, [pc, #36]	; (14bc <log_init+0x60>)
    1498:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    149c:	7b2b      	ldrb	r3, [r5, #12]
    149e:	2b00      	cmp	r3, #0
    14a0:	d0f1      	beq.n	1486 <log_init+0x2a>
			if (backend->api->init != NULL) {
    14a2:	0123      	lsls	r3, r4, #4
    14a4:	4a05      	ldr	r2, [pc, #20]	; (14bc <log_init+0x60>)
    14a6:	58d3      	ldr	r3, [r2, r3]
    14a8:	699b      	ldr	r3, [r3, #24]
    14aa:	2b00      	cmp	r3, #0
    14ac:	d0e2      	beq.n	1474 <log_init+0x18>
				backend->api->init(backend);
    14ae:	4628      	mov	r0, r5
    14b0:	4798      	blx	r3
    14b2:	e7df      	b.n	1474 <log_init+0x18>
}
    14b4:	bd70      	pop	{r4, r5, r6, pc}
    14b6:	4770      	bx	lr
    14b8:	20000b40 	.word	0x20000b40
    14bc:	0000ef74 	.word	0x0000ef74
    14c0:	0000ef84 	.word	0x0000ef84

000014c4 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    14c4:	b138      	cbz	r0, 14d6 <log_set_timestamp_func+0x12>
{
    14c6:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    14c8:	4a04      	ldr	r2, [pc, #16]	; (14dc <log_set_timestamp_func+0x18>)
    14ca:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    14cc:	4608      	mov	r0, r1
    14ce:	f000 fd8f 	bl	1ff0 <log_output_timestamp_freq_set>
	return 0;
    14d2:	2000      	movs	r0, #0
}
    14d4:	bd08      	pop	{r3, pc}
		return -EINVAL;
    14d6:	f06f 0015 	mvn.w	r0, #21
}
    14da:	4770      	bx	lr
    14dc:	2000004c 	.word	0x2000004c

000014e0 <log_core_init>:
{
    14e0:	b508      	push	{r3, lr}
	panic_mode = false;
    14e2:	2300      	movs	r3, #0
    14e4:	4a0a      	ldr	r2, [pc, #40]	; (1510 <log_core_init+0x30>)
    14e6:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    14e8:	4a0a      	ldr	r2, [pc, #40]	; (1514 <log_core_init+0x34>)
    14ea:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    14ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    14f0:	4809      	ldr	r0, [pc, #36]	; (1518 <log_core_init+0x38>)
    14f2:	f7ff ffe7 	bl	14c4 <log_set_timestamp_func>
		log_msg_pool_init();
    14f6:	f000 fb25 	bl	1b44 <log_msg_pool_init>
		log_list_init(&list);
    14fa:	4808      	ldr	r0, [pc, #32]	; (151c <log_core_init+0x3c>)
    14fc:	f00b fa3f 	bl	c97e <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    1500:	2304      	movs	r3, #4
    1502:	2228      	movs	r2, #40	; 0x28
    1504:	4906      	ldr	r1, [pc, #24]	; (1520 <log_core_init+0x40>)
    1506:	4807      	ldr	r0, [pc, #28]	; (1524 <log_core_init+0x44>)
    1508:	f00c fed6 	bl	e2b8 <k_mem_slab_init>
}
    150c:	bd08      	pop	{r3, pc}
    150e:	bf00      	nop
    1510:	20001f1d 	.word	0x20001f1d
    1514:	20000b3c 	.word	0x20000b3c
    1518:	0000c9b3 	.word	0x0000c9b3
    151c:	20000b44 	.word	0x20000b44
    1520:	20003d28 	.word	0x20003d28
    1524:	20000b4c 	.word	0x20000b4c

00001528 <get_msg>:
{
    1528:	b510      	push	{r4, lr}
	__asm__ volatile(
    152a:	f04f 0320 	mov.w	r3, #32
    152e:	f3ef 8411 	mrs	r4, BASEPRI
    1532:	f383 8812 	msr	BASEPRI_MAX, r3
    1536:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    153a:	4804      	ldr	r0, [pc, #16]	; (154c <get_msg+0x24>)
    153c:	f00b fa2f 	bl	c99e <log_list_head_get>
	__asm__ volatile(
    1540:	f384 8811 	msr	BASEPRI, r4
    1544:	f3bf 8f6f 	isb	sy
}
    1548:	bd10      	pop	{r4, pc}
    154a:	bf00      	nop
    154c:	20000b44 	.word	0x20000b44

00001550 <z_log_notify_backend_enabled>:
{
    1550:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    1552:	4b05      	ldr	r3, [pc, #20]	; (1568 <z_log_notify_backend_enabled+0x18>)
    1554:	781b      	ldrb	r3, [r3, #0]
    1556:	b11b      	cbz	r3, 1560 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    1558:	4b03      	ldr	r3, [pc, #12]	; (1568 <z_log_notify_backend_enabled+0x18>)
    155a:	2201      	movs	r2, #1
    155c:	701a      	strb	r2, [r3, #0]
}
    155e:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    1560:	4802      	ldr	r0, [pc, #8]	; (156c <z_log_notify_backend_enabled+0x1c>)
    1562:	f009 f939 	bl	a7d8 <z_impl_k_sem_give>
}
    1566:	e7f7      	b.n	1558 <z_log_notify_backend_enabled+0x8>
    1568:	20001f1c 	.word	0x20001f1c
    156c:	200003d8 	.word	0x200003d8

00001570 <z_log_dropped>:
    1570:	4b08      	ldr	r3, [pc, #32]	; (1594 <z_log_dropped+0x24>)
    1572:	e8d3 2fef 	ldaex	r2, [r3]
    1576:	3201      	adds	r2, #1
    1578:	e8c3 2fe1 	stlex	r1, r2, [r3]
    157c:	2900      	cmp	r1, #0
    157e:	d1f8      	bne.n	1572 <z_log_dropped+0x2>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1580:	4b05      	ldr	r3, [pc, #20]	; (1598 <z_log_dropped+0x28>)
    1582:	e8d3 2fef 	ldaex	r2, [r3]
    1586:	3a01      	subs	r2, #1
    1588:	e8c3 2fe1 	stlex	r1, r2, [r3]
    158c:	2900      	cmp	r1, #0
    158e:	d1f8      	bne.n	1582 <z_log_dropped+0x12>
}
    1590:	4770      	bx	lr
    1592:	bf00      	nop
    1594:	20000b3c 	.word	0x20000b3c
    1598:	20000b38 	.word	0x20000b38

0000159c <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    159c:	4b04      	ldr	r3, [pc, #16]	; (15b0 <z_log_dropped_read_and_clear+0x14>)
}
    159e:	2000      	movs	r0, #0
    15a0:	4602      	mov	r2, r0
    15a2:	e8d3 0fef 	ldaex	r0, [r3]
    15a6:	e8c3 2fe1 	stlex	r1, r2, [r3]
    15aa:	2900      	cmp	r1, #0
    15ac:	d1f9      	bne.n	15a2 <z_log_dropped_read_and_clear+0x6>
    15ae:	4770      	bx	lr
    15b0:	20000b3c 	.word	0x20000b3c

000015b4 <dropped_notify>:
{
    15b4:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    15b6:	f7ff fff1 	bl	159c <z_log_dropped_read_and_clear>
    15ba:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
    15bc:	2400      	movs	r4, #0
    15be:	e000      	b.n	15c2 <dropped_notify+0xe>
    15c0:	3401      	adds	r4, #1
    15c2:	4b0b      	ldr	r3, [pc, #44]	; (15f0 <dropped_notify+0x3c>)
    15c4:	4a0b      	ldr	r2, [pc, #44]	; (15f4 <dropped_notify+0x40>)
    15c6:	1a9b      	subs	r3, r3, r2
    15c8:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    15cc:	da0f      	bge.n	15ee <dropped_notify+0x3a>
    15ce:	4809      	ldr	r0, [pc, #36]	; (15f4 <dropped_notify+0x40>)
    15d0:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    15d4:	6843      	ldr	r3, [r0, #4]
    15d6:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    15d8:	2b00      	cmp	r3, #0
    15da:	d0f1      	beq.n	15c0 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
    15dc:	0123      	lsls	r3, r4, #4
    15de:	4a05      	ldr	r2, [pc, #20]	; (15f4 <dropped_notify+0x40>)
    15e0:	58d3      	ldr	r3, [r2, r3]
    15e2:	691b      	ldr	r3, [r3, #16]
    15e4:	2b00      	cmp	r3, #0
    15e6:	d0eb      	beq.n	15c0 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
    15e8:	4629      	mov	r1, r5
    15ea:	4798      	blx	r3
    15ec:	e7e8      	b.n	15c0 <dropped_notify+0xc>
}
    15ee:	bd38      	pop	{r3, r4, r5, pc}
    15f0:	0000ef84 	.word	0x0000ef84
    15f4:	0000ef74 	.word	0x0000ef74

000015f8 <z_log_dropped_pending>:
	return dropped_cnt > 0;
    15f8:	4b03      	ldr	r3, [pc, #12]	; (1608 <z_log_dropped_pending+0x10>)
    15fa:	6818      	ldr	r0, [r3, #0]
}
    15fc:	2800      	cmp	r0, #0
    15fe:	bfd4      	ite	le
    1600:	2000      	movle	r0, #0
    1602:	2001      	movgt	r0, #1
    1604:	4770      	bx	lr
    1606:	bf00      	nop
    1608:	20000b3c 	.word	0x20000b3c

0000160c <z_log_strdup>:
{
    160c:	b510      	push	{r4, lr}
    160e:	b082      	sub	sp, #8
    1610:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
    1612:	f7ff febf 	bl	1394 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    1616:	b9f0      	cbnz	r0, 1656 <z_log_strdup+0x4a>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    1618:	2200      	movs	r2, #0
    161a:	2300      	movs	r3, #0
    161c:	a901      	add	r1, sp, #4
    161e:	480f      	ldr	r0, [pc, #60]	; (165c <z_log_strdup+0x50>)
    1620:	f008 fe8c 	bl	a33c <k_mem_slab_alloc>
	if (err != 0) {
    1624:	b108      	cbz	r0, 162a <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
    1626:	4c0e      	ldr	r4, [pc, #56]	; (1660 <z_log_strdup+0x54>)
    1628:	e015      	b.n	1656 <z_log_strdup+0x4a>
	(void)atomic_set(&dup->refcount, 1);
    162a:	9b01      	ldr	r3, [sp, #4]
    162c:	2201      	movs	r2, #1
    162e:	e8d3 1fef 	ldaex	r1, [r3]
    1632:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1636:	2800      	cmp	r0, #0
    1638:	d1f9      	bne.n	162e <z_log_strdup+0x22>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    163a:	221f      	movs	r2, #31
    163c:	4621      	mov	r1, r4
    163e:	9801      	ldr	r0, [sp, #4]
    1640:	3004      	adds	r0, #4
    1642:	f00b ff99 	bl	d578 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    1646:	9c01      	ldr	r4, [sp, #4]
    1648:	237e      	movs	r3, #126	; 0x7e
    164a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    164e:	2300      	movs	r3, #0
    1650:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	return dup->buf;
    1654:	3404      	adds	r4, #4
}
    1656:	4620      	mov	r0, r4
    1658:	b002      	add	sp, #8
    165a:	bd10      	pop	{r4, pc}
    165c:	20000b4c 	.word	0x20000b4c
    1660:	0000f0c8 	.word	0x0000f0c8

00001664 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    1664:	b138      	cbz	r0, 1676 <log_is_strdup+0x12>
    1666:	4a07      	ldr	r2, [pc, #28]	; (1684 <log_is_strdup+0x20>)
    1668:	4290      	cmp	r0, r2
    166a:	d306      	bcc.n	167a <log_is_strdup+0x16>
    166c:	32a0      	adds	r2, #160	; 0xa0
    166e:	4290      	cmp	r0, r2
    1670:	d305      	bcc.n	167e <log_is_strdup+0x1a>
    1672:	2000      	movs	r0, #0
    1674:	4770      	bx	lr
    1676:	2000      	movs	r0, #0
    1678:	4770      	bx	lr
    167a:	2000      	movs	r0, #0
    167c:	4770      	bx	lr
    167e:	2001      	movs	r0, #1
}
    1680:	4770      	bx	lr
    1682:	bf00      	nop
    1684:	20003d28 	.word	0x20003d28

00001688 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1688:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
    168a:	f013 0f01 	tst.w	r3, #1
    168e:	d000      	beq.n	1692 <detect_missed_strdup+0xa>
    1690:	4770      	bx	lr
{
    1692:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1696:	b083      	sub	sp, #12
    1698:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
    169a:	f00b fa42 	bl	cb22 <log_msg_str_get>
    169e:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    16a0:	4630      	mov	r0, r6
    16a2:	f00b fa29 	bl	caf8 <log_msg_nargs_get>
    16a6:	4601      	mov	r1, r0
    16a8:	4638      	mov	r0, r7
    16aa:	f00b f986 	bl	c9ba <z_log_get_s_mask>
    16ae:	4605      	mov	r5, r0
	while (mask) {
    16b0:	e004      	b.n	16bc <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
    16b2:	2301      	movs	r3, #1
    16b4:	fa03 f404 	lsl.w	r4, r3, r4
    16b8:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
    16bc:	b36d      	cbz	r5, 171a <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
    16be:	fab5 f485 	clz	r4, r5
    16c2:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    16c6:	4621      	mov	r1, r4
    16c8:	4630      	mov	r0, r6
    16ca:	f00b fa18 	bl	cafe <log_msg_arg_get>
    16ce:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
    16d0:	f7ff fe60 	bl	1394 <is_rodata>
    16d4:	2800      	cmp	r0, #0
    16d6:	d1ec      	bne.n	16b2 <detect_missed_strdup+0x2a>
    16d8:	4648      	mov	r0, r9
    16da:	f7ff ffc3 	bl	1664 <log_is_strdup>
    16de:	2800      	cmp	r0, #0
    16e0:	d1e7      	bne.n	16b2 <detect_missed_strdup+0x2a>
    16e2:	4b0f      	ldr	r3, [pc, #60]	; (1720 <detect_missed_strdup+0x98>)
    16e4:	4599      	cmp	r9, r3
    16e6:	d0e4      	beq.n	16b2 <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
    16e8:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    16ea:	f3c1 1189 	ubfx	r1, r1, #6, #10
    16ee:	f000 f9f7 	bl	1ae0 <log_source_name_get>
    16f2:	4602      	mov	r2, r0
    16f4:	4b0b      	ldr	r3, [pc, #44]	; (1724 <detect_missed_strdup+0x9c>)
    16f6:	490c      	ldr	r1, [pc, #48]	; (1728 <detect_missed_strdup+0xa0>)
    16f8:	1a5b      	subs	r3, r3, r1
    16fa:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    16fc:	2101      	movs	r1, #1
    16fe:	f361 0802 	bfi	r8, r1, #0, #3
    1702:	f36f 08c5 	bfc	r8, #3, #3
    1706:	f363 188f 	bfi	r8, r3, #6, #10
    170a:	f8ad 8000 	strh.w	r8, [sp]
    170e:	463b      	mov	r3, r7
    1710:	4621      	mov	r1, r4
    1712:	4806      	ldr	r0, [pc, #24]	; (172c <detect_missed_strdup+0xa4>)
    1714:	f000 f8a8 	bl	1868 <log_3>
    1718:	e7cb      	b.n	16b2 <detect_missed_strdup+0x2a>
}
    171a:	b003      	add	sp, #12
    171c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1720:	0000f0c8 	.word	0x0000f0c8
    1724:	0000ef14 	.word	0x0000ef14
    1728:	0000eefc 	.word	0x0000eefc
    172c:	0000f0e4 	.word	0x0000f0e4

00001730 <msg_process>:
{
    1730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1732:	4606      	mov	r6, r0
	if (!bypass) {
    1734:	bb19      	cbnz	r1, 177e <msg_process+0x4e>
		    !panic_mode) {
    1736:	4b14      	ldr	r3, [pc, #80]	; (1788 <msg_process+0x58>)
    1738:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
    173a:	b10b      	cbz	r3, 1740 <msg_process+0x10>
{
    173c:	2400      	movs	r4, #0
    173e:	e003      	b.n	1748 <msg_process+0x18>
			detect_missed_strdup(msg.msg);
    1740:	f7ff ffa2 	bl	1688 <detect_missed_strdup>
    1744:	e7fa      	b.n	173c <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
    1746:	3401      	adds	r4, #1
    1748:	4b10      	ldr	r3, [pc, #64]	; (178c <msg_process+0x5c>)
    174a:	4a11      	ldr	r2, [pc, #68]	; (1790 <msg_process+0x60>)
    174c:	1a9b      	subs	r3, r3, r2
    174e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1752:	da14      	bge.n	177e <msg_process+0x4e>
	return &__log_backends_start[idx];
    1754:	4d0e      	ldr	r5, [pc, #56]	; (1790 <msg_process+0x60>)
    1756:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
    175a:	686b      	ldr	r3, [r5, #4]
    175c:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
    175e:	2b00      	cmp	r3, #0
    1760:	d0f1      	beq.n	1746 <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
    1762:	4631      	mov	r1, r6
    1764:	4628      	mov	r0, r5
    1766:	f00b f922 	bl	c9ae <msg_filter_check>
			if (log_backend_is_active(backend) &&
    176a:	2800      	cmp	r0, #0
    176c:	d0eb      	beq.n	1746 <msg_process+0x16>
	backend->api->put(backend, msg);
    176e:	0127      	lsls	r7, r4, #4
    1770:	4b07      	ldr	r3, [pc, #28]	; (1790 <msg_process+0x60>)
    1772:	59db      	ldr	r3, [r3, r7]
    1774:	685b      	ldr	r3, [r3, #4]
    1776:	4631      	mov	r1, r6
    1778:	4628      	mov	r0, r5
    177a:	4798      	blx	r3
}
    177c:	e7e3      	b.n	1746 <msg_process+0x16>
			log_msg_put(msg.msg);
    177e:	4630      	mov	r0, r6
    1780:	f00b f9d1 	bl	cb26 <log_msg_put>
}
    1784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1786:	bf00      	nop
    1788:	20001f1d 	.word	0x20001f1d
    178c:	0000ef84 	.word	0x0000ef84
    1790:	0000ef74 	.word	0x0000ef74

00001794 <z_impl_log_process>:
{
    1794:	b510      	push	{r4, lr}
    1796:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    1798:	4b0f      	ldr	r3, [pc, #60]	; (17d8 <z_impl_log_process+0x44>)
    179a:	781b      	ldrb	r3, [r3, #0]
    179c:	b903      	cbnz	r3, 17a0 <z_impl_log_process+0xc>
    179e:	b1b0      	cbz	r0, 17ce <z_impl_log_process+0x3a>
	msg = get_msg();
    17a0:	f7ff fec2 	bl	1528 <get_msg>
	if (msg.msg) {
    17a4:	4603      	mov	r3, r0
    17a6:	b160      	cbz	r0, 17c2 <z_impl_log_process+0x2e>
		if (!bypass) {
    17a8:	b93c      	cbnz	r4, 17ba <z_impl_log_process+0x26>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    17aa:	4a0c      	ldr	r2, [pc, #48]	; (17dc <z_impl_log_process+0x48>)
    17ac:	e8d2 1fef 	ldaex	r1, [r2]
    17b0:	3901      	subs	r1, #1
    17b2:	e8c2 1fe0 	stlex	r0, r1, [r2]
    17b6:	2800      	cmp	r0, #0
    17b8:	d1f8      	bne.n	17ac <z_impl_log_process+0x18>
		msg_process(msg, bypass);
    17ba:	4621      	mov	r1, r4
    17bc:	4618      	mov	r0, r3
    17be:	f7ff ffb7 	bl	1730 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
    17c2:	b914      	cbnz	r4, 17ca <z_impl_log_process+0x36>
    17c4:	f7ff ff18 	bl	15f8 <z_log_dropped_pending>
    17c8:	b910      	cbnz	r0, 17d0 <z_impl_log_process+0x3c>
	return next_pending();
    17ca:	f7ff fe0f 	bl	13ec <next_pending>
}
    17ce:	bd10      	pop	{r4, pc}
		dropped_notify();
    17d0:	f7ff fef0 	bl	15b4 <dropped_notify>
    17d4:	e7f9      	b.n	17ca <z_impl_log_process+0x36>
    17d6:	bf00      	nop
    17d8:	20001f1c 	.word	0x20001f1c
    17dc:	20000b38 	.word	0x20000b38

000017e0 <z_log_msg_post_finalize>:
{
    17e0:	b510      	push	{r4, lr}
    17e2:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    17e4:	4b1b      	ldr	r3, [pc, #108]	; (1854 <z_log_msg_post_finalize+0x74>)
    17e6:	e8d3 2fef 	ldaex	r2, [r3]
    17ea:	1c51      	adds	r1, r2, #1
    17ec:	e8c3 1fe0 	stlex	r0, r1, [r3]
    17f0:	2800      	cmp	r0, #0
    17f2:	d1f8      	bne.n	17e6 <z_log_msg_post_finalize+0x6>
	if (panic_mode) {
    17f4:	4b18      	ldr	r3, [pc, #96]	; (1858 <z_log_msg_post_finalize+0x78>)
    17f6:	781b      	ldrb	r3, [r3, #0]
    17f8:	b93b      	cbnz	r3, 180a <z_log_msg_post_finalize+0x2a>
	} else if (proc_tid != NULL && cnt == 0) {
    17fa:	4b18      	ldr	r3, [pc, #96]	; (185c <z_log_msg_post_finalize+0x7c>)
    17fc:	681b      	ldr	r3, [r3, #0]
    17fe:	b103      	cbz	r3, 1802 <z_log_msg_post_finalize+0x22>
    1800:	b19a      	cbz	r2, 182a <z_log_msg_post_finalize+0x4a>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    1802:	2a0a      	cmp	r2, #10
    1804:	d01c      	beq.n	1840 <z_log_msg_post_finalize+0x60>
}
    1806:	b002      	add	sp, #8
    1808:	bd10      	pop	{r4, pc}
	__asm__ volatile(
    180a:	f04f 0320 	mov.w	r3, #32
    180e:	f3ef 8411 	mrs	r4, BASEPRI
    1812:	f383 8812 	msr	BASEPRI_MAX, r3
    1816:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    181a:	2000      	movs	r0, #0
    181c:	f7ff ffba 	bl	1794 <z_impl_log_process>
	__asm__ volatile(
    1820:	f384 8811 	msr	BASEPRI, r4
    1824:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1828:	e7ed      	b.n	1806 <z_log_msg_post_finalize+0x26>
	z_impl_k_timer_start(timer, duration, period);
    182a:	2200      	movs	r2, #0
    182c:	2300      	movs	r3, #0
    182e:	e9cd 2300 	strd	r2, r3, [sp]
    1832:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1836:	2300      	movs	r3, #0
    1838:	4809      	ldr	r0, [pc, #36]	; (1860 <z_log_msg_post_finalize+0x80>)
    183a:	f009 ff5d 	bl	b6f8 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
    183e:	e7e2      	b.n	1806 <z_log_msg_post_finalize+0x26>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    1840:	2b00      	cmp	r3, #0
    1842:	d0e0      	beq.n	1806 <z_log_msg_post_finalize+0x26>
	z_impl_k_timer_stop(timer);
    1844:	4806      	ldr	r0, [pc, #24]	; (1860 <z_log_msg_post_finalize+0x80>)
    1846:	f00d f900 	bl	ea4a <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    184a:	4806      	ldr	r0, [pc, #24]	; (1864 <z_log_msg_post_finalize+0x84>)
    184c:	f008 ffc4 	bl	a7d8 <z_impl_k_sem_give>
}
    1850:	e7d9      	b.n	1806 <z_log_msg_post_finalize+0x26>
    1852:	bf00      	nop
    1854:	20000b38 	.word	0x20000b38
    1858:	20001f1d 	.word	0x20001f1d
    185c:	20000b68 	.word	0x20000b68
    1860:	20000558 	.word	0x20000558
    1864:	200003d8 	.word	0x200003d8

00001868 <log_3>:
{
    1868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    186c:	4680      	mov	r8, r0
    186e:	460f      	mov	r7, r1
    1870:	4616      	mov	r6, r2
    1872:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    1874:	f000 f98a 	bl	1b8c <log_msg_chunk_alloc>

	if (msg != NULL) {
    1878:	4604      	mov	r4, r0
    187a:	b140      	cbz	r0, 188e <log_3+0x26>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    187c:	2301      	movs	r3, #1
    187e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    1880:	2200      	movs	r2, #0
    1882:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    1884:	f04f 0300 	mov.w	r3, #0
    1888:	f362 0300 	bfi	r3, r2, #0, #1
    188c:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
    188e:	b14c      	cbz	r4, 18a4 <log_3+0x3c>
		msg->str = str;
    1890:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
    1894:	7a63      	ldrb	r3, [r4, #9]
    1896:	2203      	movs	r2, #3
    1898:	f362 1307 	bfi	r3, r2, #4, #4
    189c:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    189e:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
    18a0:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
    18a2:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
    18a4:	b1c4      	cbz	r4, 18d8 <log_3+0x70>
	msg->hdr.ids = src_level;
    18a6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    18aa:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    18ac:	4b0b      	ldr	r3, [pc, #44]	; (18dc <log_3+0x74>)
    18ae:	681b      	ldr	r3, [r3, #0]
    18b0:	4798      	blx	r3
    18b2:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    18b4:	f04f 0320 	mov.w	r3, #32
    18b8:	f3ef 8511 	mrs	r5, BASEPRI
    18bc:	f383 8812 	msr	BASEPRI_MAX, r3
    18c0:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    18c4:	4621      	mov	r1, r4
    18c6:	4806      	ldr	r0, [pc, #24]	; (18e0 <log_3+0x78>)
    18c8:	f00b f85d 	bl	c986 <log_list_add_tail>
	__asm__ volatile(
    18cc:	f385 8811 	msr	BASEPRI, r5
    18d0:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    18d4:	f7ff ff84 	bl	17e0 <z_log_msg_post_finalize>
}
    18d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18dc:	2000004c 	.word	0x2000004c
    18e0:	20000b44 	.word	0x20000b44

000018e4 <log_1>:
{
    18e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18e6:	4606      	mov	r6, r0
    18e8:	460d      	mov	r5, r1
    18ea:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    18ec:	f000 f94e 	bl	1b8c <log_msg_chunk_alloc>
	if (msg != NULL) {
    18f0:	4604      	mov	r4, r0
    18f2:	b140      	cbz	r0, 1906 <log_1+0x22>
		msg->hdr.ref_cnt = 1;
    18f4:	2301      	movs	r3, #1
    18f6:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    18f8:	2100      	movs	r1, #0
    18fa:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    18fc:	f04f 0300 	mov.w	r3, #0
    1900:	f361 0300 	bfi	r3, r1, #0, #1
    1904:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    1906:	b134      	cbz	r4, 1916 <log_1+0x32>
		msg->str = str;
    1908:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
    190a:	7a63      	ldrb	r3, [r4, #9]
    190c:	2201      	movs	r2, #1
    190e:	f362 1307 	bfi	r3, r2, #4, #4
    1912:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    1914:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
    1916:	b1b4      	cbz	r4, 1946 <log_1+0x62>
	msg->hdr.ids = src_level;
    1918:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    191a:	4b0b      	ldr	r3, [pc, #44]	; (1948 <log_1+0x64>)
    191c:	681b      	ldr	r3, [r3, #0]
    191e:	4798      	blx	r3
    1920:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    1922:	f04f 0320 	mov.w	r3, #32
    1926:	f3ef 8511 	mrs	r5, BASEPRI
    192a:	f383 8812 	msr	BASEPRI_MAX, r3
    192e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1932:	4621      	mov	r1, r4
    1934:	4805      	ldr	r0, [pc, #20]	; (194c <log_1+0x68>)
    1936:	f00b f826 	bl	c986 <log_list_add_tail>
	__asm__ volatile(
    193a:	f385 8811 	msr	BASEPRI, r5
    193e:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    1942:	f7ff ff4d 	bl	17e0 <z_log_msg_post_finalize>
}
    1946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1948:	2000004c 	.word	0x2000004c
    194c:	20000b44 	.word	0x20000b44

00001950 <log_2>:
{
    1950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1954:	4607      	mov	r7, r0
    1956:	460e      	mov	r6, r1
    1958:	4615      	mov	r5, r2
    195a:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    195c:	f000 f916 	bl	1b8c <log_msg_chunk_alloc>
	if (msg != NULL) {
    1960:	4604      	mov	r4, r0
    1962:	b140      	cbz	r0, 1976 <log_2+0x26>
		msg->hdr.ref_cnt = 1;
    1964:	2301      	movs	r3, #1
    1966:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    1968:	2200      	movs	r2, #0
    196a:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    196c:	f04f 0300 	mov.w	r3, #0
    1970:	f362 0300 	bfi	r3, r2, #0, #1
    1974:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    1976:	b13c      	cbz	r4, 1988 <log_2+0x38>
		msg->str = str;
    1978:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
    197a:	7a63      	ldrb	r3, [r4, #9]
    197c:	2202      	movs	r2, #2
    197e:	f362 1307 	bfi	r3, r2, #4, #4
    1982:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    1984:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
    1986:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
    1988:	b1bc      	cbz	r4, 19ba <log_2+0x6a>
	msg->hdr.ids = src_level;
    198a:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    198e:	4b0c      	ldr	r3, [pc, #48]	; (19c0 <log_2+0x70>)
    1990:	681b      	ldr	r3, [r3, #0]
    1992:	4798      	blx	r3
    1994:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    1996:	f04f 0320 	mov.w	r3, #32
    199a:	f3ef 8511 	mrs	r5, BASEPRI
    199e:	f383 8812 	msr	BASEPRI_MAX, r3
    19a2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    19a6:	4621      	mov	r1, r4
    19a8:	4806      	ldr	r0, [pc, #24]	; (19c4 <log_2+0x74>)
    19aa:	f00a ffec 	bl	c986 <log_list_add_tail>
	__asm__ volatile(
    19ae:	f385 8811 	msr	BASEPRI, r5
    19b2:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    19b6:	f7ff ff13 	bl	17e0 <z_log_msg_post_finalize>
}
    19ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    19be:	bf00      	nop
    19c0:	2000004c 	.word	0x2000004c
    19c4:	20000b44 	.word	0x20000b44

000019c8 <log_0>:
{
    19c8:	b570      	push	{r4, r5, r6, lr}
    19ca:	4605      	mov	r5, r0
    19cc:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    19ce:	f000 f8dd 	bl	1b8c <log_msg_chunk_alloc>
	if (msg != NULL) {
    19d2:	4604      	mov	r4, r0
    19d4:	b140      	cbz	r0, 19e8 <log_0+0x20>
		msg->hdr.ref_cnt = 1;
    19d6:	2301      	movs	r3, #1
    19d8:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    19da:	2200      	movs	r2, #0
    19dc:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    19de:	f04f 0300 	mov.w	r3, #0
    19e2:	f362 0300 	bfi	r3, r2, #0, #1
    19e6:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    19e8:	b104      	cbz	r4, 19ec <log_0+0x24>
		msg->str = str;
    19ea:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
    19ec:	b1b4      	cbz	r4, 1a1c <log_0+0x54>
	msg->hdr.ids = src_level;
    19ee:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    19f0:	4b0b      	ldr	r3, [pc, #44]	; (1a20 <log_0+0x58>)
    19f2:	681b      	ldr	r3, [r3, #0]
    19f4:	4798      	blx	r3
    19f6:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    19f8:	f04f 0320 	mov.w	r3, #32
    19fc:	f3ef 8511 	mrs	r5, BASEPRI
    1a00:	f383 8812 	msr	BASEPRI_MAX, r3
    1a04:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1a08:	4621      	mov	r1, r4
    1a0a:	4806      	ldr	r0, [pc, #24]	; (1a24 <log_0+0x5c>)
    1a0c:	f00a ffbb 	bl	c986 <log_list_add_tail>
	__asm__ volatile(
    1a10:	f385 8811 	msr	BASEPRI, r5
    1a14:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    1a18:	f7ff fee2 	bl	17e0 <z_log_msg_post_finalize>
}
    1a1c:	bd70      	pop	{r4, r5, r6, pc}
    1a1e:	bf00      	nop
    1a20:	2000004c 	.word	0x2000004c
    1a24:	20000b44 	.word	0x20000b44

00001a28 <z_impl_log_panic>:
	if (panic_mode) {
    1a28:	4b12      	ldr	r3, [pc, #72]	; (1a74 <z_impl_log_panic+0x4c>)
    1a2a:	781b      	ldrb	r3, [r3, #0]
    1a2c:	b103      	cbz	r3, 1a30 <z_impl_log_panic+0x8>
    1a2e:	4770      	bx	lr
{
    1a30:	b510      	push	{r4, lr}
	log_init();
    1a32:	f7ff fd13 	bl	145c <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    1a36:	2400      	movs	r4, #0
    1a38:	e000      	b.n	1a3c <z_impl_log_panic+0x14>
    1a3a:	3401      	adds	r4, #1
    1a3c:	4b0e      	ldr	r3, [pc, #56]	; (1a78 <z_impl_log_panic+0x50>)
    1a3e:	4a0f      	ldr	r2, [pc, #60]	; (1a7c <z_impl_log_panic+0x54>)
    1a40:	1a9b      	subs	r3, r3, r2
    1a42:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1a46:	da0c      	bge.n	1a62 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
    1a48:	480c      	ldr	r0, [pc, #48]	; (1a7c <z_impl_log_panic+0x54>)
    1a4a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    1a4e:	6843      	ldr	r3, [r0, #4]
    1a50:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1a52:	2b00      	cmp	r3, #0
    1a54:	d0f1      	beq.n	1a3a <z_impl_log_panic+0x12>
	backend->api->panic(backend);
    1a56:	0123      	lsls	r3, r4, #4
    1a58:	4a08      	ldr	r2, [pc, #32]	; (1a7c <z_impl_log_panic+0x54>)
    1a5a:	58d3      	ldr	r3, [r2, r3]
    1a5c:	695b      	ldr	r3, [r3, #20]
    1a5e:	4798      	blx	r3
}
    1a60:	e7eb      	b.n	1a3a <z_impl_log_panic+0x12>
    1a62:	2000      	movs	r0, #0
    1a64:	f7ff fe96 	bl	1794 <z_impl_log_process>
		while (log_process(false) == true) {
    1a68:	2800      	cmp	r0, #0
    1a6a:	d1fa      	bne.n	1a62 <z_impl_log_panic+0x3a>
	panic_mode = true;
    1a6c:	4b01      	ldr	r3, [pc, #4]	; (1a74 <z_impl_log_panic+0x4c>)
    1a6e:	2201      	movs	r2, #1
    1a70:	701a      	strb	r2, [r3, #0]
}
    1a72:	bd10      	pop	{r4, pc}
    1a74:	20001f1d 	.word	0x20001f1d
    1a78:	0000ef84 	.word	0x0000ef84
    1a7c:	0000ef74 	.word	0x0000ef74

00001a80 <log_process_thread_func>:
{
    1a80:	b508      	push	{r3, lr}
	log_init();
    1a82:	f7ff fceb 	bl	145c <log_init>
	return z_impl_z_current_get();
    1a86:	f009 fc0f 	bl	b2a8 <z_impl_z_current_get>
	thread_set(k_current_get());
    1a8a:	f7ff fc93 	bl	13b4 <thread_set>
    1a8e:	e006      	b.n	1a9e <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
    1a90:	f04f 32ff 	mov.w	r2, #4294967295
    1a94:	f04f 33ff 	mov.w	r3, #4294967295
    1a98:	4804      	ldr	r0, [pc, #16]	; (1aac <log_process_thread_func+0x2c>)
    1a9a:	f008 fec1 	bl	a820 <z_impl_k_sem_take>
    1a9e:	2000      	movs	r0, #0
    1aa0:	f7ff fe78 	bl	1794 <z_impl_log_process>
		if (log_process(false) == false) {
    1aa4:	2800      	cmp	r0, #0
    1aa6:	d1fa      	bne.n	1a9e <log_process_thread_func+0x1e>
    1aa8:	e7f2      	b.n	1a90 <log_process_thread_func+0x10>
    1aaa:	bf00      	nop
    1aac:	200003d8 	.word	0x200003d8

00001ab0 <z_log_free>:
{
    1ab0:	b500      	push	{lr}
    1ab2:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    1ab4:	3804      	subs	r0, #4
    1ab6:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1ab8:	e8d0 3fef 	ldaex	r3, [r0]
    1abc:	1e5a      	subs	r2, r3, #1
    1abe:	e8c0 2fe1 	stlex	r1, r2, [r0]
    1ac2:	2900      	cmp	r1, #0
    1ac4:	d1f8      	bne.n	1ab8 <z_log_free+0x8>
	if (atomic_dec(&dup->refcount) == 1) {
    1ac6:	2b01      	cmp	r3, #1
    1ac8:	d002      	beq.n	1ad0 <z_log_free+0x20>
}
    1aca:	b003      	add	sp, #12
    1acc:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    1ad0:	a901      	add	r1, sp, #4
    1ad2:	4802      	ldr	r0, [pc, #8]	; (1adc <z_log_free+0x2c>)
    1ad4:	f00c fbfe 	bl	e2d4 <k_mem_slab_free>
}
    1ad8:	e7f7      	b.n	1aca <z_log_free+0x1a>
    1ada:	bf00      	nop
    1adc:	20000b4c 	.word	0x20000b4c

00001ae0 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1ae0:	4b05      	ldr	r3, [pc, #20]	; (1af8 <log_source_name_get+0x18>)
    1ae2:	4a06      	ldr	r2, [pc, #24]	; (1afc <log_source_name_get+0x1c>)
    1ae4:	1a9b      	subs	r3, r3, r2
    1ae6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    1aea:	d202      	bcs.n	1af2 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    1aec:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    1af0:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1af2:	2000      	movs	r0, #0
}
    1af4:	4770      	bx	lr
    1af6:	bf00      	nop
    1af8:	0000ef74 	.word	0x0000ef74
    1afc:	0000eefc 	.word	0x0000eefc

00001b00 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    1b00:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1b02:	4b07      	ldr	r3, [pc, #28]	; (1b20 <log_backend_enable+0x20>)
    1b04:	1ac3      	subs	r3, r0, r3
    1b06:	111b      	asrs	r3, r3, #4
    1b08:	3301      	adds	r3, #1
	backend->cb->id = id;
    1b0a:	6842      	ldr	r2, [r0, #4]
    1b0c:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
    1b0e:	6843      	ldr	r3, [r0, #4]
    1b10:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1b12:	6843      	ldr	r3, [r0, #4]
    1b14:	2201      	movs	r2, #1
    1b16:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    1b18:	f7ff fd1a 	bl	1550 <z_log_notify_backend_enabled>
}
    1b1c:	bd08      	pop	{r3, pc}
    1b1e:	bf00      	nop
    1b20:	0000ef74 	.word	0x0000ef74

00001b24 <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
    1b24:	b510      	push	{r4, lr}
    1b26:	b082      	sub	sp, #8
    1b28:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
    1b2a:	9b01      	ldr	r3, [sp, #4]
    1b2c:	b133      	cbz	r3, 1b3c <cont_free+0x18>
		next = cont->next;
    1b2e:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    1b30:	a901      	add	r1, sp, #4
    1b32:	4803      	ldr	r0, [pc, #12]	; (1b40 <cont_free+0x1c>)
    1b34:	f00c fbce 	bl	e2d4 <k_mem_slab_free>
		cont = next;
    1b38:	9401      	str	r4, [sp, #4]
    1b3a:	e7f6      	b.n	1b2a <cont_free+0x6>
	}
}
    1b3c:	b002      	add	sp, #8
    1b3e:	bd10      	pop	{r4, pc}
    1b40:	20000b6c 	.word	0x20000b6c

00001b44 <log_msg_pool_init>:
{
    1b44:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    1b46:	2320      	movs	r3, #32
    1b48:	461a      	mov	r2, r3
    1b4a:	4902      	ldr	r1, [pc, #8]	; (1b54 <log_msg_pool_init+0x10>)
    1b4c:	4802      	ldr	r0, [pc, #8]	; (1b58 <log_msg_pool_init+0x14>)
    1b4e:	f00c fbb3 	bl	e2b8 <k_mem_slab_init>
}
    1b52:	bd08      	pop	{r3, pc}
    1b54:	20003dc8 	.word	0x20003dc8
    1b58:	20000b6c 	.word	0x20000b6c

00001b5c <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    1b5c:	b510      	push	{r4, lr}
    1b5e:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
    1b60:	2300      	movs	r3, #0
    1b62:	9301      	str	r3, [sp, #4]
    1b64:	2001      	movs	r0, #1
    1b66:	f7ff fe15 	bl	1794 <z_impl_log_process>
    1b6a:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
    1b6c:	f7ff fd00 	bl	1570 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    1b70:	2200      	movs	r2, #0
    1b72:	2300      	movs	r3, #0
    1b74:	a901      	add	r1, sp, #4
    1b76:	4804      	ldr	r0, [pc, #16]	; (1b88 <log_msg_no_space_handle+0x2c>)
    1b78:	f008 fbe0 	bl	a33c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    1b7c:	b108      	cbz	r0, 1b82 <log_msg_no_space_handle+0x26>
    1b7e:	2c00      	cmp	r4, #0
    1b80:	d1f0      	bne.n	1b64 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    1b82:	9801      	ldr	r0, [sp, #4]
    1b84:	b002      	add	sp, #8
    1b86:	bd10      	pop	{r4, pc}
    1b88:	20000b6c 	.word	0x20000b6c

00001b8c <log_msg_chunk_alloc>:
{
    1b8c:	b500      	push	{lr}
    1b8e:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
    1b90:	2300      	movs	r3, #0
    1b92:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
    1b94:	f00a ff34 	bl	ca00 <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    1b98:	b150      	cbz	r0, 1bb0 <log_msg_chunk_alloc+0x24>
    1b9a:	2200      	movs	r2, #0
    1b9c:	2300      	movs	r3, #0
    1b9e:	a901      	add	r1, sp, #4
    1ba0:	4807      	ldr	r0, [pc, #28]	; (1bc0 <log_msg_chunk_alloc+0x34>)
    1ba2:	f008 fbcb 	bl	a33c <k_mem_slab_alloc>
	if (err != 0) {
    1ba6:	b930      	cbnz	r0, 1bb6 <log_msg_chunk_alloc+0x2a>
}
    1ba8:	9801      	ldr	r0, [sp, #4]
    1baa:	b003      	add	sp, #12
    1bac:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    1bb0:	2200      	movs	r2, #0
    1bb2:	2300      	movs	r3, #0
    1bb4:	e7f3      	b.n	1b9e <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
    1bb6:	f7ff ffd1 	bl	1b5c <log_msg_no_space_handle>
    1bba:	9001      	str	r0, [sp, #4]
    1bbc:	e7f4      	b.n	1ba8 <log_msg_chunk_alloc+0x1c>
    1bbe:	bf00      	nop
    1bc0:	20000b6c 	.word	0x20000b6c

00001bc4 <msg_free>:
{
    1bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bc6:	b083      	sub	sp, #12
    1bc8:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
    1bca:	4604      	mov	r4, r0
    1bcc:	f00a ff94 	bl	caf8 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1bd0:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
    1bd2:	f013 0f01 	tst.w	r3, #1
    1bd6:	d101      	bne.n	1bdc <msg_free+0x18>
    1bd8:	4606      	mov	r6, r0
    1bda:	bb50      	cbnz	r0, 1c32 <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
    1bdc:	9b01      	ldr	r3, [sp, #4]
    1bde:	7a1a      	ldrb	r2, [r3, #8]
    1be0:	f012 0f02 	tst.w	r2, #2
    1be4:	d128      	bne.n	1c38 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    1be6:	a901      	add	r1, sp, #4
    1be8:	4815      	ldr	r0, [pc, #84]	; (1c40 <msg_free+0x7c>)
    1bea:	f00c fb73 	bl	e2d4 <k_mem_slab_free>
}
    1bee:	b003      	add	sp, #12
    1bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
    1bf2:	9801      	ldr	r0, [sp, #4]
    1bf4:	f00a ff95 	bl	cb22 <log_msg_str_get>
    1bf8:	4631      	mov	r1, r6
    1bfa:	f00a fede 	bl	c9ba <z_log_get_s_mask>
					if (smask == 0U) {
    1bfe:	4607      	mov	r7, r0
    1c00:	b988      	cbnz	r0, 1c26 <msg_free+0x62>
    1c02:	e7eb      	b.n	1bdc <msg_free+0x18>
					z_log_free(buf);
    1c04:	4628      	mov	r0, r5
    1c06:	f7ff ff53 	bl	1ab0 <z_log_free>
		for (i = 0U; i < nargs; i++) {
    1c0a:	3401      	adds	r4, #1
    1c0c:	42b4      	cmp	r4, r6
    1c0e:	d2e5      	bcs.n	1bdc <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
    1c10:	4621      	mov	r1, r4
    1c12:	9801      	ldr	r0, [sp, #4]
    1c14:	f00a ff73 	bl	cafe <log_msg_arg_get>
    1c18:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
    1c1a:	f7ff fd23 	bl	1664 <log_is_strdup>
    1c1e:	2800      	cmp	r0, #0
    1c20:	d0f3      	beq.n	1c0a <msg_free+0x46>
				if (smask == 0U) {
    1c22:	2f00      	cmp	r7, #0
    1c24:	d0e5      	beq.n	1bf2 <msg_free+0x2e>
				if (smask & BIT(i)) {
    1c26:	fa27 f304 	lsr.w	r3, r7, r4
    1c2a:	f013 0f01 	tst.w	r3, #1
    1c2e:	d0ec      	beq.n	1c0a <msg_free+0x46>
    1c30:	e7e8      	b.n	1c04 <msg_free+0x40>
		uint32_t smask = 0U;
    1c32:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
    1c34:	463c      	mov	r4, r7
    1c36:	e7e9      	b.n	1c0c <msg_free+0x48>
		cont_free(msg->payload.ext.next);
    1c38:	6958      	ldr	r0, [r3, #20]
    1c3a:	f7ff ff73 	bl	1b24 <cont_free>
    1c3e:	e7d2      	b.n	1be6 <msg_free+0x22>
    1c40:	20000b6c 	.word	0x20000b6c

00001c44 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1c44:	b40e      	push	{r1, r2, r3}
    1c46:	b500      	push	{lr}
    1c48:	b082      	sub	sp, #8
    1c4a:	4601      	mov	r1, r0
    1c4c:	ab03      	add	r3, sp, #12
    1c4e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    1c52:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1c54:	4803      	ldr	r0, [pc, #12]	; (1c64 <print_formatted+0x20>)
    1c56:	f7fe fe3d 	bl	8d4 <cbvprintf>
	va_end(args);

	return length;
}
    1c5a:	b002      	add	sp, #8
    1c5c:	f85d eb04 	ldr.w	lr, [sp], #4
    1c60:	b003      	add	sp, #12
    1c62:	4770      	bx	lr
    1c64:	0000ce6f 	.word	0x0000ce6f

00001c68 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
    1c68:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c6a:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
    1c6c:	f011 0f44 	tst.w	r1, #68	; 0x44
    1c70:	d005      	beq.n	1c7e <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
    1c72:	4b1a      	ldr	r3, [pc, #104]	; (1cdc <timestamp_print+0x74>)
    1c74:	681c      	ldr	r4, [r3, #0]
    1c76:	b934      	cbnz	r4, 1c86 <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
    1c78:	2000      	movs	r0, #0
	}

	return length;
}
    1c7a:	b005      	add	sp, #20
    1c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    1c7e:	4918      	ldr	r1, [pc, #96]	; (1ce0 <timestamp_print+0x78>)
    1c80:	f7ff ffe0 	bl	1c44 <print_formatted>
    1c84:	e7f9      	b.n	1c7a <timestamp_print+0x12>
		timestamp /= timestamp_div;
    1c86:	4b17      	ldr	r3, [pc, #92]	; (1ce4 <timestamp_print+0x7c>)
    1c88:	6819      	ldr	r1, [r3, #0]
    1c8a:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    1c8e:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
    1c92:	4a15      	ldr	r2, [pc, #84]	; (1ce8 <timestamp_print+0x80>)
    1c94:	fba2 3205 	umull	r3, r2, r2, r5
    1c98:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    1c9a:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    1c9e:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
    1ca2:	4b12      	ldr	r3, [pc, #72]	; (1cec <timestamp_print+0x84>)
    1ca4:	fba3 7306 	umull	r7, r3, r3, r6
    1ca8:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    1caa:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
    1cae:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    1cb2:	fb05 f101 	mul.w	r1, r5, r1
    1cb6:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1cba:	fb07 1114 	mls	r1, r7, r4, r1
    1cbe:	fb05 f101 	mul.w	r1, r5, r1
    1cc2:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
    1cc6:	9402      	str	r4, [sp, #8]
    1cc8:	9701      	str	r7, [sp, #4]
    1cca:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    1cce:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
    1cd2:	9100      	str	r1, [sp, #0]
    1cd4:	4906      	ldr	r1, [pc, #24]	; (1cf0 <timestamp_print+0x88>)
    1cd6:	f7ff ffb5 	bl	1c44 <print_formatted>
    1cda:	e7ce      	b.n	1c7a <timestamp_print+0x12>
    1cdc:	20000b88 	.word	0x20000b88
    1ce0:	0000f128 	.word	0x0000f128
    1ce4:	20000b8c 	.word	0x20000b8c
    1ce8:	91a2b3c5 	.word	0x91a2b3c5
    1cec:	88888889 	.word	0x88888889
    1cf0:	0000f134 	.word	0x0000f134

00001cf4 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    1cf4:	b161      	cbz	r1, 1d10 <color_print+0x1c>
{
    1cf6:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1cf8:	b12a      	cbz	r2, 1d06 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    1cfa:	4a06      	ldr	r2, [pc, #24]	; (1d14 <color_print+0x20>)
    1cfc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1d00:	b912      	cbnz	r2, 1d08 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1d02:	4a05      	ldr	r2, [pc, #20]	; (1d18 <color_print+0x24>)
    1d04:	e000      	b.n	1d08 <color_print+0x14>
    1d06:	4a04      	ldr	r2, [pc, #16]	; (1d18 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    1d08:	4904      	ldr	r1, [pc, #16]	; (1d1c <color_print+0x28>)
    1d0a:	f7ff ff9b 	bl	1c44 <print_formatted>
	}
}
    1d0e:	bd08      	pop	{r3, pc}
    1d10:	4770      	bx	lr
    1d12:	bf00      	nop
    1d14:	0000f1ac 	.word	0x0000f1ac
    1d18:	0000f150 	.word	0x0000f150
    1d1c:	0000f158 	.word	0x0000f158

00001d20 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1d20:	f011 0f10 	tst.w	r1, #16
    1d24:	d10b      	bne.n	1d3e <newline_print+0x1e>
{
    1d26:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1d28:	f011 0f20 	tst.w	r1, #32
    1d2c:	d003      	beq.n	1d36 <newline_print+0x16>
		print_formatted(ctx, "\n");
    1d2e:	4904      	ldr	r1, [pc, #16]	; (1d40 <newline_print+0x20>)
    1d30:	f7ff ff88 	bl	1c44 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    1d34:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    1d36:	4903      	ldr	r1, [pc, #12]	; (1d44 <newline_print+0x24>)
    1d38:	f7ff ff84 	bl	1c44 <print_formatted>
    1d3c:	e7fa      	b.n	1d34 <newline_print+0x14>
    1d3e:	4770      	bx	lr
    1d40:	0000fbc4 	.word	0x0000fbc4
    1d44:	00010274 	.word	0x00010274

00001d48 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    1d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d4c:	4605      	mov	r5, r0
    1d4e:	460f      	mov	r7, r1
    1d50:	4616      	mov	r6, r2
    1d52:	4698      	mov	r8, r3
	newline_print(output, flags);
    1d54:	9906      	ldr	r1, [sp, #24]
    1d56:	f7ff ffe3 	bl	1d20 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    1d5a:	2400      	movs	r4, #0
    1d5c:	4544      	cmp	r4, r8
    1d5e:	da05      	bge.n	1d6c <hexdump_line_print+0x24>
		print_formatted(output, " ");
    1d60:	4923      	ldr	r1, [pc, #140]	; (1df0 <hexdump_line_print+0xa8>)
    1d62:	4628      	mov	r0, r5
    1d64:	f7ff ff6e 	bl	1c44 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1d68:	3401      	adds	r4, #1
    1d6a:	e7f7      	b.n	1d5c <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1d6c:	2400      	movs	r4, #0
    1d6e:	e009      	b.n	1d84 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    1d70:	491f      	ldr	r1, [pc, #124]	; (1df0 <hexdump_line_print+0xa8>)
    1d72:	4628      	mov	r0, r5
    1d74:	f7ff ff66 	bl	1c44 <print_formatted>
    1d78:	e00b      	b.n	1d92 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    1d7a:	491e      	ldr	r1, [pc, #120]	; (1df4 <hexdump_line_print+0xac>)
    1d7c:	4628      	mov	r0, r5
    1d7e:	f7ff ff61 	bl	1c44 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1d82:	3401      	adds	r4, #1
    1d84:	2c0f      	cmp	r4, #15
    1d86:	dc0c      	bgt.n	1da2 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    1d88:	2c00      	cmp	r4, #0
    1d8a:	dd02      	ble.n	1d92 <hexdump_line_print+0x4a>
    1d8c:	f014 0f07 	tst.w	r4, #7
    1d90:	d0ee      	beq.n	1d70 <hexdump_line_print+0x28>
		if (i < length) {
    1d92:	42b4      	cmp	r4, r6
    1d94:	d2f1      	bcs.n	1d7a <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    1d96:	5d3a      	ldrb	r2, [r7, r4]
    1d98:	4917      	ldr	r1, [pc, #92]	; (1df8 <hexdump_line_print+0xb0>)
    1d9a:	4628      	mov	r0, r5
    1d9c:	f7ff ff52 	bl	1c44 <print_formatted>
    1da0:	e7ef      	b.n	1d82 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    1da2:	4916      	ldr	r1, [pc, #88]	; (1dfc <hexdump_line_print+0xb4>)
    1da4:	4628      	mov	r0, r5
    1da6:	f7ff ff4d 	bl	1c44 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1daa:	2400      	movs	r4, #0
    1dac:	e009      	b.n	1dc2 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    1dae:	4910      	ldr	r1, [pc, #64]	; (1df0 <hexdump_line_print+0xa8>)
    1db0:	4628      	mov	r0, r5
    1db2:	f7ff ff47 	bl	1c44 <print_formatted>
    1db6:	e00b      	b.n	1dd0 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    1db8:	4911      	ldr	r1, [pc, #68]	; (1e00 <hexdump_line_print+0xb8>)
    1dba:	4628      	mov	r0, r5
    1dbc:	f7ff ff42 	bl	1c44 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1dc0:	3401      	adds	r4, #1
    1dc2:	2c0f      	cmp	r4, #15
    1dc4:	dc12      	bgt.n	1dec <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    1dc6:	2c00      	cmp	r4, #0
    1dc8:	dd02      	ble.n	1dd0 <hexdump_line_print+0x88>
    1dca:	f014 0f07 	tst.w	r4, #7
    1dce:	d0ee      	beq.n	1dae <hexdump_line_print+0x66>
		if (i < length) {
    1dd0:	42b4      	cmp	r4, r6
    1dd2:	d206      	bcs.n	1de2 <hexdump_line_print+0x9a>
			char c = (char)data[i];
    1dd4:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    1dd6:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    1dda:	2b5e      	cmp	r3, #94	; 0x5e
    1ddc:	d9ec      	bls.n	1db8 <hexdump_line_print+0x70>
    1dde:	222e      	movs	r2, #46	; 0x2e
    1de0:	e7ea      	b.n	1db8 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    1de2:	4903      	ldr	r1, [pc, #12]	; (1df0 <hexdump_line_print+0xa8>)
    1de4:	4628      	mov	r0, r5
    1de6:	f7ff ff2d 	bl	1c44 <print_formatted>
    1dea:	e7e9      	b.n	1dc0 <hexdump_line_print+0x78>
		}
	}
}
    1dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1df0:	0000f180 	.word	0x0000f180
    1df4:	0000f164 	.word	0x0000f164
    1df8:	0000f15c 	.word	0x0000f15c
    1dfc:	0000f168 	.word	0x0000f168
    1e00:	0000f16c 	.word	0x0000f16c

00001e04 <ids_print>:
{
    1e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e08:	4680      	mov	r8, r0
    1e0a:	4616      	mov	r6, r2
    1e0c:	461d      	mov	r5, r3
    1e0e:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    1e12:	b959      	cbnz	r1, 1e2c <ids_print+0x28>
	int total = 0;
    1e14:	2400      	movs	r4, #0
	if (source_id >= 0) {
    1e16:	2f00      	cmp	r7, #0
    1e18:	db1c      	blt.n	1e54 <ids_print+0x50>
		total += print_formatted(output,
    1e1a:	b186      	cbz	r6, 1e3e <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1e1c:	2301      	movs	r3, #1
    1e1e:	9a07      	ldr	r2, [sp, #28]
    1e20:	4093      	lsls	r3, r2
				(func_on &&
    1e22:	f013 0f10 	tst.w	r3, #16
    1e26:	d118      	bne.n	1e5a <ids_print+0x56>
		total += print_formatted(output,
    1e28:	4e0d      	ldr	r6, [pc, #52]	; (1e60 <ids_print+0x5c>)
    1e2a:	e009      	b.n	1e40 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    1e2c:	4b0d      	ldr	r3, [pc, #52]	; (1e64 <ids_print+0x60>)
    1e2e:	9a07      	ldr	r2, [sp, #28]
    1e30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1e34:	490c      	ldr	r1, [pc, #48]	; (1e68 <ids_print+0x64>)
    1e36:	f7ff ff05 	bl	1c44 <print_formatted>
    1e3a:	4604      	mov	r4, r0
    1e3c:	e7eb      	b.n	1e16 <ids_print+0x12>
		total += print_formatted(output,
    1e3e:	4e08      	ldr	r6, [pc, #32]	; (1e60 <ids_print+0x5c>)
    1e40:	4639      	mov	r1, r7
    1e42:	4628      	mov	r0, r5
    1e44:	f7ff fe4c 	bl	1ae0 <log_source_name_get>
    1e48:	4602      	mov	r2, r0
    1e4a:	4631      	mov	r1, r6
    1e4c:	4640      	mov	r0, r8
    1e4e:	f7ff fef9 	bl	1c44 <print_formatted>
    1e52:	4404      	add	r4, r0
}
    1e54:	4620      	mov	r0, r4
    1e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    1e5a:	4e04      	ldr	r6, [pc, #16]	; (1e6c <ids_print+0x68>)
    1e5c:	e7f0      	b.n	1e40 <ids_print+0x3c>
    1e5e:	bf00      	nop
    1e60:	0000f170 	.word	0x0000f170
    1e64:	0000f1e8 	.word	0x0000f1e8
    1e68:	0000f17c 	.word	0x0000f17c
    1e6c:	0000f178 	.word	0x0000f178

00001e70 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    1e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e74:	b085      	sub	sp, #20
    1e76:	4605      	mov	r5, r0
    1e78:	460c      	mov	r4, r1
    1e7a:	4616      	mov	r6, r2
    1e7c:	9303      	str	r3, [sp, #12]
    1e7e:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1e82:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1e86:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1e8a:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    1e8e:	f00a fdb5 	bl	c9fc <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    1e92:	b1e8      	cbz	r0, 1ed0 <prefix_print+0x60>
    1e94:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    1e96:	4913      	ldr	r1, [pc, #76]	; (1ee4 <prefix_print+0x74>)
    1e98:	4628      	mov	r0, r5
    1e9a:	f7ff fed3 	bl	1c44 <print_formatted>
    1e9e:	4607      	mov	r7, r0
	}

	if (stamp) {
    1ea0:	f1bb 0f00 	cmp.w	fp, #0
    1ea4:	d116      	bne.n	1ed4 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    1ea6:	4642      	mov	r2, r8
    1ea8:	4651      	mov	r1, sl
    1eaa:	4628      	mov	r0, r5
    1eac:	f00a fe5f 	bl	cb6e <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    1eb0:	f8cd 8004 	str.w	r8, [sp, #4]
    1eb4:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    1eb8:	9300      	str	r3, [sp, #0]
    1eba:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    1ebe:	4632      	mov	r2, r6
    1ec0:	4649      	mov	r1, r9
    1ec2:	4628      	mov	r0, r5
    1ec4:	f7ff ff9e 	bl	1e04 <ids_print>
			domain_id, source_id, level);


	return length;
}
    1ec8:	4438      	add	r0, r7
    1eca:	b005      	add	sp, #20
    1ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    1ed0:	2700      	movs	r7, #0
    1ed2:	e7e5      	b.n	1ea0 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    1ed4:	9a03      	ldr	r2, [sp, #12]
    1ed6:	4621      	mov	r1, r4
    1ed8:	4628      	mov	r0, r5
    1eda:	f7ff fec5 	bl	1c68 <timestamp_print>
    1ede:	4407      	add	r7, r0
    1ee0:	e7e1      	b.n	1ea6 <prefix_print+0x36>
    1ee2:	bf00      	nop
    1ee4:	0000f184 	.word	0x0000f184

00001ee8 <hexdump_print>:
{
    1ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1eec:	b089      	sub	sp, #36	; 0x24
    1eee:	4607      	mov	r7, r0
    1ef0:	460e      	mov	r6, r1
    1ef2:	4691      	mov	r9, r2
    1ef4:	4698      	mov	r8, r3
	print_formatted(output, "%s", log_msg_str_get(msg));
    1ef6:	f00a fe14 	bl	cb22 <log_msg_str_get>
    1efa:	4602      	mov	r2, r0
    1efc:	490e      	ldr	r1, [pc, #56]	; (1f38 <hexdump_print+0x50>)
    1efe:	4630      	mov	r0, r6
    1f00:	f7ff fea0 	bl	1c44 <print_formatted>
	uint32_t offset = 0U;
    1f04:	2400      	movs	r4, #0
		length = sizeof(buf);
    1f06:	2510      	movs	r5, #16
    1f08:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    1f0a:	4623      	mov	r3, r4
    1f0c:	aa03      	add	r2, sp, #12
    1f0e:	eb0d 0105 	add.w	r1, sp, r5
    1f12:	4638      	mov	r0, r7
    1f14:	f00a fe16 	bl	cb44 <log_msg_hexdump_data_get>
		if (length) {
    1f18:	9a03      	ldr	r2, [sp, #12]
    1f1a:	b152      	cbz	r2, 1f32 <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
    1f1c:	f8cd 8000 	str.w	r8, [sp]
    1f20:	464b      	mov	r3, r9
    1f22:	eb0d 0105 	add.w	r1, sp, r5
    1f26:	4630      	mov	r0, r6
    1f28:	f7ff ff0e 	bl	1d48 <hexdump_line_print>
			offset += length;
    1f2c:	9d03      	ldr	r5, [sp, #12]
    1f2e:	442c      	add	r4, r5
		length = sizeof(buf);
    1f30:	e7e9      	b.n	1f06 <hexdump_print+0x1e>
}
    1f32:	b009      	add	sp, #36	; 0x24
    1f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1f38:	0000f158 	.word	0x0000f158

00001f3c <raw_string_print>:
{
    1f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f3e:	b083      	sub	sp, #12
    1f40:	4606      	mov	r6, r0
    1f42:	460c      	mov	r4, r1
	bool eol = false;
    1f44:	2700      	movs	r7, #0
	size_t offset = 0;
    1f46:	463d      	mov	r5, r7
    1f48:	e00d      	b.n	1f66 <raw_string_print+0x2a>
			eol = (output->buf[length - 1] == '\n');
    1f4a:	68a2      	ldr	r2, [r4, #8]
    1f4c:	4413      	add	r3, r2
    1f4e:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    1f52:	2f0a      	cmp	r7, #10
    1f54:	bf14      	ite	ne
    1f56:	2700      	movne	r7, #0
    1f58:	2701      	moveq	r7, #1
		log_output_flush(output);
    1f5a:	4620      	mov	r0, r4
    1f5c:	f00a ff7a 	bl	ce54 <log_output_flush>
		offset += length;
    1f60:	9b01      	ldr	r3, [sp, #4]
    1f62:	441d      	add	r5, r3
	} while (length > 0);
    1f64:	b173      	cbz	r3, 1f84 <raw_string_print+0x48>
		length = output->size;
    1f66:	68e3      	ldr	r3, [r4, #12]
    1f68:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    1f6a:	462b      	mov	r3, r5
    1f6c:	aa01      	add	r2, sp, #4
    1f6e:	68a1      	ldr	r1, [r4, #8]
    1f70:	4630      	mov	r0, r6
    1f72:	f00a fde7 	bl	cb44 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    1f76:	6863      	ldr	r3, [r4, #4]
    1f78:	9a01      	ldr	r2, [sp, #4]
    1f7a:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    1f7c:	9b01      	ldr	r3, [sp, #4]
    1f7e:	2b00      	cmp	r3, #0
    1f80:	d0eb      	beq.n	1f5a <raw_string_print+0x1e>
    1f82:	e7e2      	b.n	1f4a <raw_string_print+0xe>
	if (eol) {
    1f84:	b90f      	cbnz	r7, 1f8a <raw_string_print+0x4e>
}
    1f86:	b003      	add	sp, #12
    1f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
    1f8a:	4902      	ldr	r1, [pc, #8]	; (1f94 <raw_string_print+0x58>)
    1f8c:	4620      	mov	r0, r4
    1f8e:	f7ff fe59 	bl	1c44 <print_formatted>
}
    1f92:	e7f8      	b.n	1f86 <raw_string_print+0x4a>
    1f94:	0000f188 	.word	0x0000f188

00001f98 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    1f98:	b570      	push	{r4, r5, r6, lr}
    1f9a:	b082      	sub	sp, #8
    1f9c:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    1f9e:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1fa0:	f242 730f 	movw	r3, #9999	; 0x270f
    1fa4:	428b      	cmp	r3, r1
    1fa6:	bf28      	it	cs
    1fa8:	460b      	movcs	r3, r1
    1faa:	4a0e      	ldr	r2, [pc, #56]	; (1fe4 <log_output_dropped_process+0x4c>)
    1fac:	2105      	movs	r1, #5
    1fae:	4668      	mov	r0, sp
    1fb0:	f009 fe1c 	bl	bbec <snprintk>
    1fb4:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    1fb6:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1fb8:	685b      	ldr	r3, [r3, #4]
    1fba:	220b      	movs	r2, #11
    1fbc:	490a      	ldr	r1, [pc, #40]	; (1fe8 <log_output_dropped_process+0x50>)
    1fbe:	4628      	mov	r0, r5
    1fc0:	f00a fdc8 	bl	cb54 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    1fc4:	6863      	ldr	r3, [r4, #4]
    1fc6:	685b      	ldr	r3, [r3, #4]
    1fc8:	4632      	mov	r2, r6
    1fca:	4669      	mov	r1, sp
    1fcc:	4628      	mov	r0, r5
    1fce:	f00a fdc1 	bl	cb54 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    1fd2:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    1fd4:	685b      	ldr	r3, [r3, #4]
    1fd6:	221b      	movs	r2, #27
    1fd8:	4904      	ldr	r1, [pc, #16]	; (1fec <log_output_dropped_process+0x54>)
    1fda:	4628      	mov	r0, r5
    1fdc:	f00a fdba 	bl	cb54 <buffer_write>
}
    1fe0:	b002      	add	sp, #8
    1fe2:	bd70      	pop	{r4, r5, r6, pc}
    1fe4:	0000fd44 	.word	0x0000fd44
    1fe8:	0000f1dc 	.word	0x0000f1dc
    1fec:	0000f1c0 	.word	0x0000f1c0

00001ff0 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    1ff0:	4b07      	ldr	r3, [pc, #28]	; (2010 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10>)
    1ff2:	2201      	movs	r2, #1
    1ff4:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1ff6:	4b07      	ldr	r3, [pc, #28]	; (2014 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x14>)
    1ff8:	4298      	cmp	r0, r3
    1ffa:	d905      	bls.n	2008 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8>
		frequency /= 2U;
    1ffc:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1ffe:	4a04      	ldr	r2, [pc, #16]	; (2010 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10>)
    2000:	6813      	ldr	r3, [r2, #0]
    2002:	005b      	lsls	r3, r3, #1
    2004:	6013      	str	r3, [r2, #0]
    2006:	e7f6      	b.n	1ff6 <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
    2008:	4b03      	ldr	r3, [pc, #12]	; (2018 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x18>)
    200a:	6018      	str	r0, [r3, #0]
}
    200c:	4770      	bx	lr
    200e:	bf00      	nop
    2010:	20000b8c 	.word	0x20000b8c
    2014:	000f4240 	.word	0x000f4240
    2018:	20000b88 	.word	0x20000b88

0000201c <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    201c:	b570      	push	{r4, r5, r6, lr}
    201e:	4606      	mov	r6, r0
    2020:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    2022:	2400      	movs	r4, #0
    2024:	42ac      	cmp	r4, r5
    2026:	d207      	bcs.n	2038 <char_out+0x1c>
			uart_poll_out(uart_dev, data[i]);
    2028:	4b04      	ldr	r3, [pc, #16]	; (203c <char_out+0x20>)
    202a:	6818      	ldr	r0, [r3, #0]
    202c:	5d31      	ldrb	r1, [r6, r4]
	const struct uart_driver_api *api =
    202e:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    2030:	685b      	ldr	r3, [r3, #4]
    2032:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    2034:	3401      	adds	r4, #1
    2036:	e7f5      	b.n	2024 <char_out+0x8>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    2038:	4628      	mov	r0, r5
    203a:	bd70      	pop	{r4, r5, r6, pc}
    203c:	20000ba4 	.word	0x20000ba4

00002040 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2040:	4b01      	ldr	r3, [pc, #4]	; (2048 <log_backend_uart_init+0x8>)
    2042:	4a02      	ldr	r2, [pc, #8]	; (204c <log_backend_uart_init+0xc>)
    2044:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    2046:	4770      	bx	lr
    2048:	20000ba4 	.word	0x20000ba4
    204c:	0000ecbc 	.word	0x0000ecbc

00002050 <panic>:

static void panic(struct log_backend const *const backend)
{
    2050:	b508      	push	{r3, lr}
	in_panic = true;
    2052:	4b03      	ldr	r3, [pc, #12]	; (2060 <panic+0x10>)
    2054:	2201      	movs	r2, #1
    2056:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    2058:	4802      	ldr	r0, [pc, #8]	; (2064 <panic+0x14>)
    205a:	f00a fefb 	bl	ce54 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    205e:	bd08      	pop	{r3, pc}
    2060:	20001f1e 	.word	0x20001f1e
    2064:	0000f238 	.word	0x0000f238

00002068 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    2068:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    206a:	4802      	ldr	r0, [pc, #8]	; (2074 <dropped+0xc>)
    206c:	f7ff ff94 	bl	1f98 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
    2070:	bd08      	pop	{r3, pc}
    2072:	bf00      	nop
    2074:	0000f238 	.word	0x0000f238

00002078 <put>:
{
    2078:	b510      	push	{r4, lr}
    207a:	460c      	mov	r4, r1
	log_msg_get(msg);
    207c:	4608      	mov	r0, r1
    207e:	f00a fd32 	bl	cae6 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    2082:	220f      	movs	r2, #15
    2084:	4621      	mov	r1, r4
    2086:	4803      	ldr	r0, [pc, #12]	; (2094 <put+0x1c>)
    2088:	f00a ff09 	bl	ce9e <log_output_msg_process>
	log_msg_put(msg);
    208c:	4620      	mov	r0, r4
    208e:	f00a fd4a 	bl	cb26 <log_msg_put>
}
    2092:	bd10      	pop	{r4, pc}
    2094:	0000f238 	.word	0x0000f238

00002098 <usb_set_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
}

static bool usb_set_alt_setting(uint8_t iface, uint8_t alt_setting)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    2098:	2807      	cmp	r0, #7
    209a:	d901      	bls.n	20a0 <usb_set_alt_setting+0x8>
		usb_dev.alt_setting[iface] = alt_setting;
		return true;
	}

	return false;
    209c:	2000      	movs	r0, #0
}
    209e:	4770      	bx	lr
		usb_dev.alt_setting[iface] = alt_setting;
    20a0:	4b02      	ldr	r3, [pc, #8]	; (20ac <usb_set_alt_setting+0x14>)
    20a2:	4418      	add	r0, r3
    20a4:	f880 10bb 	strb.w	r1, [r0, #187]	; 0xbb
		return true;
    20a8:	2001      	movs	r0, #1
    20aa:	4770      	bx	lr
    20ac:	20000bac 	.word	0x20000bac

000020b0 <usb_get_alt_setting>:

static uint8_t usb_get_alt_setting(uint8_t iface)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    20b0:	2807      	cmp	r0, #7
    20b2:	d901      	bls.n	20b8 <usb_get_alt_setting+0x8>
		return usb_dev.alt_setting[iface];
	}

	return 0;
    20b4:	2000      	movs	r0, #0
}
    20b6:	4770      	bx	lr
		return usb_dev.alt_setting[iface];
    20b8:	4b02      	ldr	r3, [pc, #8]	; (20c4 <usb_get_alt_setting+0x14>)
    20ba:	4418      	add	r0, r3
    20bc:	f890 00bb 	ldrb.w	r0, [r0, #187]	; 0xbb
    20c0:	4770      	bx	lr
    20c2:	bf00      	nop
    20c4:	20000bac 	.word	0x20000bac

000020c8 <usb_handle_request>:
 *
 * @return true if the request was handles successfully
 */
static bool usb_handle_request(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
    20c8:	b510      	push	{r4, lr}
	uint32_t type = setup->RequestType.type;
    20ca:	7803      	ldrb	r3, [r0, #0]
    20cc:	f3c3 1341 	ubfx	r3, r3, #5, #2
	if (type >= MAX_NUM_REQ_HANDLERS) {
		LOG_DBG("Error Incorrect iType %d", type);
		return false;
	}

	handler = usb_dev.req_handlers[type];
    20d0:	330a      	adds	r3, #10
    20d2:	4c06      	ldr	r4, [pc, #24]	; (20ec <usb_handle_request+0x24>)
    20d4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	if (handler == NULL) {
    20d8:	b123      	cbz	r3, 20e4 <usb_handle_request+0x1c>
		LOG_DBG("No handler for reqtype %d", type);
		return false;
	}

	if ((*handler)(setup, len, data) < 0) {
    20da:	4798      	blx	r3
    20dc:	2800      	cmp	r0, #0
    20de:	db03      	blt.n	20e8 <usb_handle_request+0x20>
		LOG_DBG("Handler Error %d", type);
		usb_print_setup(setup);
		return false;
	}

	return true;
    20e0:	2001      	movs	r0, #1
}
    20e2:	bd10      	pop	{r4, pc}
		return false;
    20e4:	2000      	movs	r0, #0
    20e6:	e7fc      	b.n	20e2 <usb_handle_request+0x1a>
		return false;
    20e8:	2000      	movs	r0, #0
    20ea:	e7fa      	b.n	20e2 <usb_handle_request+0x1a>
    20ec:	20000bac 	.word	0x20000bac

000020f0 <usb_register_request_handler>:
 * @return N/A
 */
static void usb_register_request_handler(int32_t type,
					 usb_request_handler handler)
{
	usb_dev.req_handlers[type] = handler;
    20f0:	300a      	adds	r0, #10
    20f2:	4b02      	ldr	r3, [pc, #8]	; (20fc <usb_register_request_handler+0xc>)
    20f4:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    20f8:	4770      	bx	lr
    20fa:	bf00      	nop
    20fc:	20000bac 	.word	0x20000bac

00002100 <usb_register_descriptors>:
 *
 * @param [in] usb_descriptors The descriptor byte array
 */
static void usb_register_descriptors(const uint8_t *usb_descriptors)
{
	usb_dev.descriptors = usb_descriptors;
    2100:	4b01      	ldr	r3, [pc, #4]	; (2108 <usb_register_descriptors+0x8>)
    2102:	6258      	str	r0, [r3, #36]	; 0x24
}
    2104:	4770      	bx	lr
    2106:	bf00      	nop
    2108:	20000bac 	.word	0x20000bac

0000210c <usb_get_status>:

static bool usb_get_status(struct usb_setup_packet *setup,
			   int32_t *len, uint8_t **data_buf)
{
	uint8_t *data = *data_buf;
    210c:	6813      	ldr	r3, [r2, #0]

	LOG_DBG("Get Status request");
	data[0] = 0U;
	data[1] = 0U;
    210e:	2200      	movs	r2, #0
    2110:	705a      	strb	r2, [r3, #1]

	if (IS_ENABLED(CONFIG_USB_SELF_POWERED)) {
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    2112:	2201      	movs	r2, #1
    2114:	701a      	strb	r2, [r3, #0]
	}

	if (IS_ENABLED(CONFIG_USB_DEVICE_REMOTE_WAKEUP)) {
		data[0] |= (usb_dev.remote_wakeup ?
    2116:	4a07      	ldr	r2, [pc, #28]	; (2134 <usb_get_status+0x28>)
    2118:	f892 20c3 	ldrb.w	r2, [r2, #195]	; 0xc3
    211c:	b13a      	cbz	r2, 212e <usb_get_status+0x22>
    211e:	2202      	movs	r2, #2
    2120:	f042 0201 	orr.w	r2, r2, #1
    2124:	701a      	strb	r2, [r3, #0]
			    USB_GET_STATUS_REMOTE_WAKEUP : 0);
	}

	*len = 2;
    2126:	2302      	movs	r3, #2
    2128:	600b      	str	r3, [r1, #0]

	return true;
}
    212a:	2001      	movs	r0, #1
    212c:	4770      	bx	lr
		data[0] |= (usb_dev.remote_wakeup ?
    212e:	2200      	movs	r2, #0
    2130:	e7f6      	b.n	2120 <usb_get_status+0x14>
    2132:	bf00      	nop
    2134:	20000bac 	.word	0x20000bac

00002138 <usb_get_descriptor>:
 *
 * @return true if the descriptor was found, false otherwise
 */
static bool usb_get_descriptor(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
    2138:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t *p = NULL;
	uint32_t cur_index = 0U;
	bool found = false;

	LOG_DBG("Get Descriptor request");
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    213a:	8847      	ldrh	r7, [r0, #2]
    213c:	0a3d      	lsrs	r5, r7, #8

	/*
	 * Invalid types of descriptors,
	 * see USB Spec. Revision 2.0, 9.4.3 Get Descriptor
	 */
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    213e:	1f2b      	subs	r3, r5, #4
    2140:	b2db      	uxtb	r3, r3
    2142:	2b01      	cmp	r3, #1
    2144:	d91e      	bls.n	2184 <usb_get_descriptor+0x4c>
    2146:	b2ff      	uxtb	r7, r7
    2148:	2d07      	cmp	r5, #7
    214a:	d81e      	bhi.n	218a <usb_get_descriptor+0x52>
	    (type > USB_DESC_OTHER_SPEED)) {
		return false;
	}

	p = (uint8_t *)usb_dev.descriptors;
    214c:	4b10      	ldr	r3, [pc, #64]	; (2190 <usb_get_descriptor+0x58>)
    214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	cur_index = 0U;
    2150:	2600      	movs	r6, #0

	while (p[DESC_bLength] != 0U) {
    2152:	e000      	b.n	2156 <usb_get_descriptor+0x1e>
				break;
			}
			cur_index++;
		}
		/* skip to next descriptor */
		p += p[DESC_bLength];
    2154:	4403      	add	r3, r0
	while (p[DESC_bLength] != 0U) {
    2156:	7818      	ldrb	r0, [r3, #0]
    2158:	b138      	cbz	r0, 216a <usb_get_descriptor+0x32>
		if (p[DESC_bDescriptorType] == type) {
    215a:	785c      	ldrb	r4, [r3, #1]
    215c:	42ac      	cmp	r4, r5
    215e:	d1f9      	bne.n	2154 <usb_get_descriptor+0x1c>
			if (cur_index == index) {
    2160:	42b7      	cmp	r7, r6
    2162:	d001      	beq.n	2168 <usb_get_descriptor+0x30>
			cur_index++;
    2164:	3601      	adds	r6, #1
    2166:	e7f5      	b.n	2154 <usb_get_descriptor+0x1c>
				found = true;
    2168:	2001      	movs	r0, #1
	}

	if (found) {
    216a:	b160      	cbz	r0, 2186 <usb_get_descriptor+0x4e>
		/* set data pointer */
		*data = p;
    216c:	6013      	str	r3, [r2, #0]
		/* get length from structure */
		if (type == USB_DESC_CONFIGURATION) {
    216e:	2d02      	cmp	r5, #2
    2170:	d002      	beq.n	2178 <usb_get_descriptor+0x40>
			 */
			*len = (p[CONF_DESC_wTotalLength]) |
			    (p[CONF_DESC_wTotalLength + 1] << 8);
		} else {
			/* normally length is at offset 0 */
			*len = p[DESC_bLength];
    2172:	781b      	ldrb	r3, [r3, #0]
    2174:	600b      	str	r3, [r1, #0]
    2176:	e006      	b.n	2186 <usb_get_descriptor+0x4e>
			*len = (p[CONF_DESC_wTotalLength]) |
    2178:	789a      	ldrb	r2, [r3, #2]
			    (p[CONF_DESC_wTotalLength + 1] << 8);
    217a:	78db      	ldrb	r3, [r3, #3]
			*len = (p[CONF_DESC_wTotalLength]) |
    217c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    2180:	600b      	str	r3, [r1, #0]
    2182:	e000      	b.n	2186 <usb_get_descriptor+0x4e>
		return false;
    2184:	2000      	movs	r0, #0
	} else {
		/* nothing found */
		LOG_DBG("Desc %x not found!", setup->wValue);
	}
	return found;
}
    2186:	bcf0      	pop	{r4, r5, r6, r7}
    2188:	4770      	bx	lr
		return false;
    218a:	2000      	movs	r0, #0
    218c:	e7fb      	b.n	2186 <usb_get_descriptor+0x4e>
    218e:	bf00      	nop
    2190:	20000bac 	.word	0x20000bac

00002194 <usb_get_interface>:
	return ret;
}

static bool usb_get_interface(struct usb_setup_packet *setup,
			      int32_t *len, uint8_t **data_buf)
{
    2194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2196:	4684      	mov	ip, r0
    2198:	460e      	mov	r6, r1
	const uint8_t *p = usb_dev.descriptors;
    219a:	4b0c      	ldr	r3, [pc, #48]	; (21cc <usb_get_interface+0x38>)
    219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	uint8_t *data = *data_buf;
    219e:	6817      	ldr	r7, [r2, #0]
	uint8_t cur_iface;

	while (p[DESC_bLength] != 0U) {
    21a0:	e000      	b.n	21a4 <usb_get_interface+0x10>
				return true;
			}
		}

		/* skip to next descriptor */
		p += p[DESC_bLength];
    21a2:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
    21a4:	781a      	ldrb	r2, [r3, #0]
    21a6:	b172      	cbz	r2, 21c6 <usb_get_interface+0x32>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    21a8:	785c      	ldrb	r4, [r3, #1]
    21aa:	2c04      	cmp	r4, #4
    21ac:	d1f9      	bne.n	21a2 <usb_get_interface+0xe>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    21ae:	7898      	ldrb	r0, [r3, #2]
			if (cur_iface == setup->wIndex) {
    21b0:	b285      	uxth	r5, r0
    21b2:	f8bc 4004 	ldrh.w	r4, [ip, #4]
    21b6:	42a5      	cmp	r5, r4
    21b8:	d1f3      	bne.n	21a2 <usb_get_interface+0xe>
				data[0] = usb_get_alt_setting(cur_iface);
    21ba:	f7ff ff79 	bl	20b0 <usb_get_alt_setting>
    21be:	7038      	strb	r0, [r7, #0]
				*len = 1;
    21c0:	2001      	movs	r0, #1
    21c2:	6030      	str	r0, [r6, #0]
				return true;
    21c4:	e000      	b.n	21c8 <usb_get_interface+0x34>
	}

	return false;
    21c6:	2000      	movs	r0, #0
}
    21c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21ca:	bf00      	nop
    21cc:	20000bac 	.word	0x20000bac

000021d0 <is_device_configured>:
 *
 * @return true if Configured, false otherwise.
 */
static bool is_device_configured(void)
{
	return (usb_dev.configuration != 0);
    21d0:	4b03      	ldr	r3, [pc, #12]	; (21e0 <is_device_configured+0x10>)
    21d2:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
}
    21d6:	3800      	subs	r0, #0
    21d8:	bf18      	it	ne
    21da:	2001      	movne	r0, #1
    21dc:	4770      	bx	lr
    21de:	bf00      	nop
    21e0:	20000bac 	.word	0x20000bac

000021e4 <is_interface_valid>:
 *
 * @return true if interface exists - valid
 */
static bool is_interface_valid(uint8_t interface)
{
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    21e4:	4b07      	ldr	r3, [pc, #28]	; (2204 <is_interface_valid+0x20>)
    21e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	const struct usb_cfg_descriptor *cfg_descr;

	/* Search through descriptor for matching interface */
	while (p[DESC_bLength] != 0U) {
    21e8:	e000      	b.n	21ec <is_interface_valid+0x8>
			cfg_descr = (const struct usb_cfg_descriptor *)p;
			if (interface < cfg_descr->bNumInterfaces) {
				return true;
			}
		}
		p += p[DESC_bLength];
    21ea:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
    21ec:	781a      	ldrb	r2, [r3, #0]
    21ee:	b13a      	cbz	r2, 2200 <is_interface_valid+0x1c>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    21f0:	7859      	ldrb	r1, [r3, #1]
    21f2:	2902      	cmp	r1, #2
    21f4:	d1f9      	bne.n	21ea <is_interface_valid+0x6>
			if (interface < cfg_descr->bNumInterfaces) {
    21f6:	7919      	ldrb	r1, [r3, #4]
    21f8:	4281      	cmp	r1, r0
    21fa:	d9f6      	bls.n	21ea <is_interface_valid+0x6>
				return true;
    21fc:	2001      	movs	r0, #1
	}

	return false;
}
    21fe:	4770      	bx	lr
	return false;
    2200:	2000      	movs	r0, #0
    2202:	4770      	bx	lr
    2204:	20000bac 	.word	0x20000bac

00002208 <is_ep_valid>:
static bool is_ep_valid(uint8_t ep)
{
	const struct usb_ep_cfg_data *ep_data;

	/* Check if its Endpoint 0 */
	if (USB_EP_GET_IDX(ep) == 0) {
    2208:	f030 0380 	bics.w	r3, r0, #128	; 0x80
    220c:	d018      	beq.n	2240 <is_ep_valid+0x38>
		return true;
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    220e:	4910      	ldr	r1, [pc, #64]	; (2250 <is_ep_valid+0x48>)
    2210:	4b10      	ldr	r3, [pc, #64]	; (2254 <is_ep_valid+0x4c>)
    2212:	4299      	cmp	r1, r3
    2214:	d219      	bcs.n	224a <is_ep_valid+0x42>
{
    2216:	b410      	push	{r4}
    2218:	e003      	b.n	2222 <is_ep_valid+0x1a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    221a:	3124      	adds	r1, #36	; 0x24
    221c:	4b0d      	ldr	r3, [pc, #52]	; (2254 <is_ep_valid+0x4c>)
    221e:	4299      	cmp	r1, r3
    2220:	d20c      	bcs.n	223c <is_ep_valid+0x34>
		ep_data = cfg_data->endpoint;
    2222:	6a0c      	ldr	r4, [r1, #32]

		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2224:	2300      	movs	r3, #0
    2226:	7f0a      	ldrb	r2, [r1, #28]
    2228:	429a      	cmp	r2, r3
    222a:	d9f6      	bls.n	221a <is_ep_valid+0x12>
			if (ep_data[n].ep_addr == ep) {
    222c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    2230:	7912      	ldrb	r2, [r2, #4]
    2232:	4282      	cmp	r2, r0
    2234:	d006      	beq.n	2244 <is_ep_valid+0x3c>
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2236:	3301      	adds	r3, #1
    2238:	b2db      	uxtb	r3, r3
    223a:	e7f4      	b.n	2226 <is_ep_valid+0x1e>
				return true;
			}
		}
	}

	return false;
    223c:	2000      	movs	r0, #0
    223e:	e002      	b.n	2246 <is_ep_valid+0x3e>
		return true;
    2240:	2001      	movs	r0, #1
    2242:	4770      	bx	lr
				return true;
    2244:	2001      	movs	r0, #1
}
    2246:	bc10      	pop	{r4}
    2248:	4770      	bx	lr
	return false;
    224a:	2000      	movs	r0, #0
}
    224c:	4770      	bx	lr
    224e:	bf00      	nop
    2250:	20000510 	.word	0x20000510
    2254:	20000558 	.word	0x20000558

00002258 <usb_register_custom_req_handler>:
 *
 * @param [in] handler Callback function pointer
 */
static void usb_register_custom_req_handler(usb_request_handler handler)
{
	usb_dev.custom_req_handler = handler;
    2258:	4b01      	ldr	r3, [pc, #4]	; (2260 <usb_register_custom_req_handler+0x8>)
    225a:	6198      	str	r0, [r3, #24]
}
    225c:	4770      	bx	lr
    225e:	bf00      	nop
    2260:	20000bac 	.word	0x20000bac

00002264 <usb_register_status_callback>:
 *
 * @param [in] cb Callback function pointer
 */
static void usb_register_status_callback(usb_dc_status_callback cb)
{
	usb_dev.status_callback = cb;
    2264:	4b01      	ldr	r3, [pc, #4]	; (226c <usb_register_status_callback+0x8>)
    2266:	61d8      	str	r0, [r3, #28]
}
    2268:	4770      	bx	lr
    226a:	bf00      	nop
    226c:	20000bac 	.word	0x20000bac

00002270 <foreach_ep>:

static int foreach_ep(int (* endpoint_callback)(const struct usb_ep_cfg_data *))
{
    2270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2272:	4606      	mov	r6, r0
	struct usb_ep_cfg_data *ep_data;

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2274:	4d0a      	ldr	r5, [pc, #40]	; (22a0 <foreach_ep+0x30>)
    2276:	4b0b      	ldr	r3, [pc, #44]	; (22a4 <foreach_ep+0x34>)
    2278:	429d      	cmp	r5, r3
    227a:	d20e      	bcs.n	229a <foreach_ep+0x2a>
		ep_data = cfg_data->endpoint;
    227c:	6a2f      	ldr	r7, [r5, #32]

		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    227e:	2400      	movs	r4, #0
    2280:	7f2b      	ldrb	r3, [r5, #28]
    2282:	42a3      	cmp	r3, r4
    2284:	d907      	bls.n	2296 <foreach_ep+0x26>
			int ret;

			ret = endpoint_callback(&ep_data[n]);
    2286:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
    228a:	47b0      	blx	r6
			if (ret < 0) {
    228c:	2800      	cmp	r0, #0
    228e:	db05      	blt.n	229c <foreach_ep+0x2c>
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2290:	3401      	adds	r4, #1
    2292:	b2e4      	uxtb	r4, r4
    2294:	e7f4      	b.n	2280 <foreach_ep+0x10>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2296:	3524      	adds	r5, #36	; 0x24
    2298:	e7ed      	b.n	2276 <foreach_ep+0x6>
				return ret;
			}
		}
	}

	return 0;
    229a:	2000      	movs	r0, #0
}
    229c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    229e:	bf00      	nop
    22a0:	20000510 	.word	0x20000510
    22a4:	20000558 	.word	0x20000558

000022a8 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    22a8:	b570      	push	{r4, r5, r6, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    22aa:	4b0b      	ldr	r3, [pc, #44]	; (22d8 <class_handler+0x30>)
    22ac:	e000      	b.n	22b0 <class_handler+0x8>
    22ae:	3324      	adds	r3, #36	; 0x24
    22b0:	4c0a      	ldr	r4, [pc, #40]	; (22dc <class_handler+0x34>)
    22b2:	42a3      	cmp	r3, r4
    22b4:	d20d      	bcs.n	22d2 <class_handler+0x2a>
		iface = &cfg_data->interface;
		if_descr = cfg_data->interface_descriptor;
    22b6:	685c      	ldr	r4, [r3, #4]
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    22b8:	4d09      	ldr	r5, [pc, #36]	; (22e0 <class_handler+0x38>)
    22ba:	6a6d      	ldr	r5, [r5, #36]	; 0x24
    22bc:	42ac      	cmp	r4, r5
    22be:	d3f6      	bcc.n	22ae <class_handler+0x6>
			continue;
		}

		if (iface->class_handler &&
    22c0:	691d      	ldr	r5, [r3, #16]
    22c2:	2d00      	cmp	r5, #0
    22c4:	d0f3      	beq.n	22ae <class_handler+0x6>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    22c6:	78a6      	ldrb	r6, [r4, #2]
    22c8:	7904      	ldrb	r4, [r0, #4]
		if (iface->class_handler &&
    22ca:	42a6      	cmp	r6, r4
    22cc:	d1ef      	bne.n	22ae <class_handler+0x6>
			return iface->class_handler(pSetup, len, data);
    22ce:	47a8      	blx	r5
    22d0:	e001      	b.n	22d6 <class_handler+0x2e>
		}
	}

	return -ENOTSUP;
    22d2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    22d6:	bd70      	pop	{r4, r5, r6, pc}
    22d8:	20000510 	.word	0x20000510
    22dc:	20000558 	.word	0x20000558
    22e0:	20000bac 	.word	0x20000bac

000022e4 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    22e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    22e8:	4606      	mov	r6, r0
    22ea:	460f      	mov	r7, r1
    22ec:	4690      	mov	r8, r2
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    22ee:	4c11      	ldr	r4, [pc, #68]	; (2334 <custom_handler+0x50>)
    22f0:	e005      	b.n	22fe <custom_handler+0x1a>
		if (iface->custom_handler == NULL) {
			continue;
		}

		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
			return iface->custom_handler(pSetup, len, data);
    22f2:	4642      	mov	r2, r8
    22f4:	4639      	mov	r1, r7
    22f6:	4630      	mov	r0, r6
    22f8:	47a8      	blx	r5
    22fa:	e019      	b.n	2330 <custom_handler+0x4c>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    22fc:	3424      	adds	r4, #36	; 0x24
    22fe:	4b0e      	ldr	r3, [pc, #56]	; (2338 <custom_handler+0x54>)
    2300:	429c      	cmp	r4, r3
    2302:	d213      	bcs.n	232c <custom_handler+0x48>
		if_descr = cfg_data->interface_descriptor;
    2304:	6863      	ldr	r3, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2306:	4d0d      	ldr	r5, [pc, #52]	; (233c <custom_handler+0x58>)
    2308:	6a6d      	ldr	r5, [r5, #36]	; 0x24
    230a:	42ab      	cmp	r3, r5
    230c:	d3f6      	bcc.n	22fc <custom_handler+0x18>
		if (iface->custom_handler == NULL) {
    230e:	69a5      	ldr	r5, [r4, #24]
    2310:	2d00      	cmp	r5, #0
    2312:	d0f3      	beq.n	22fc <custom_handler+0x18>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    2314:	7899      	ldrb	r1, [r3, #2]
    2316:	7932      	ldrb	r2, [r6, #4]
    2318:	4291      	cmp	r1, r2
    231a:	d0ea      	beq.n	22f2 <custom_handler+0xe>
			 * the first interface, but the request may be for
			 * subsequent ones, so forward each request to audio.
			 * The class does not actively engage in request
			 * handling and therefore we can ignore return value.
			 */
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    231c:	795b      	ldrb	r3, [r3, #5]
    231e:	2b01      	cmp	r3, #1
    2320:	d1ec      	bne.n	22fc <custom_handler+0x18>
				(void)iface->custom_handler(pSetup, len, data);
    2322:	4642      	mov	r2, r8
    2324:	4639      	mov	r1, r7
    2326:	4630      	mov	r0, r6
    2328:	47a8      	blx	r5
    232a:	e7e7      	b.n	22fc <custom_handler+0x18>
			}
		}
	}

	return -ENOTSUP;
    232c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2334:	20000510 	.word	0x20000510
    2338:	20000558 	.word	0x20000558
    233c:	20000bac 	.word	0x20000bac

00002340 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    2340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2342:	4607      	mov	r7, r0
    2344:	460e      	mov	r6, r1
    2346:	4615      	mov	r5, r2
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2348:	4c0a      	ldr	r4, [pc, #40]	; (2374 <vendor_handler+0x34>)
    234a:	e000      	b.n	234e <vendor_handler+0xe>
    234c:	3424      	adds	r4, #36	; 0x24
    234e:	4b0a      	ldr	r3, [pc, #40]	; (2378 <vendor_handler+0x38>)
    2350:	429c      	cmp	r4, r3
    2352:	d20a      	bcs.n	236a <vendor_handler+0x2a>
		iface = &cfg_data->interface;
		if (iface->vendor_handler) {
    2354:	6963      	ldr	r3, [r4, #20]
    2356:	2b00      	cmp	r3, #0
    2358:	d0f8      	beq.n	234c <vendor_handler+0xc>
			if (!iface->vendor_handler(pSetup, len, data)) {
    235a:	462a      	mov	r2, r5
    235c:	4631      	mov	r1, r6
    235e:	4638      	mov	r0, r7
    2360:	4798      	blx	r3
    2362:	4603      	mov	r3, r0
    2364:	2800      	cmp	r0, #0
    2366:	d1f1      	bne.n	234c <vendor_handler+0xc>
    2368:	e001      	b.n	236e <vendor_handler+0x2e>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    236a:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    236e:	4618      	mov	r0, r3
    2370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2372:	bf00      	nop
    2374:	20000510 	.word	0x20000510
    2378:	20000558 	.word	0x20000558

0000237c <usb_halt_endpoint_req>:
{
    237c:	b570      	push	{r4, r5, r6, lr}
    237e:	b082      	sub	sp, #8
    2380:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    2382:	7904      	ldrb	r4, [r0, #4]
    2384:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!is_ep_valid(ep)) {
    2388:	4620      	mov	r0, r4
    238a:	f7ff ff3d 	bl	2208 <is_ep_valid>
    238e:	4606      	mov	r6, r0
    2390:	b130      	cbz	r0, 23a0 <usb_halt_endpoint_req+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    2392:	f034 0380 	bics.w	r3, r4, #128	; 0x80
    2396:	d006      	beq.n	23a6 <usb_halt_endpoint_req+0x2a>
    2398:	f7ff ff1a 	bl	21d0 <is_device_configured>
    239c:	b918      	cbnz	r0, 23a6 <usb_halt_endpoint_req+0x2a>
	return false;
    239e:	4606      	mov	r6, r0
}
    23a0:	4630      	mov	r0, r6
    23a2:	b002      	add	sp, #8
    23a4:	bd70      	pop	{r4, r5, r6, pc}
		if (halt) {
    23a6:	b15d      	cbz	r5, 23c0 <usb_halt_endpoint_req+0x44>
			usb_dc_ep_set_stall(ep);
    23a8:	4620      	mov	r0, r4
    23aa:	f003 fcad 	bl	5d08 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    23ae:	4b0a      	ldr	r3, [pc, #40]	; (23d8 <usb_halt_endpoint_req+0x5c>)
    23b0:	69db      	ldr	r3, [r3, #28]
    23b2:	2b00      	cmp	r3, #0
    23b4:	d0f4      	beq.n	23a0 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    23b6:	f10d 0107 	add.w	r1, sp, #7
    23ba:	2008      	movs	r0, #8
    23bc:	4798      	blx	r3
    23be:	e7ef      	b.n	23a0 <usb_halt_endpoint_req+0x24>
			usb_dc_ep_clear_stall(ep);
    23c0:	4620      	mov	r0, r4
    23c2:	f003 fce7 	bl	5d94 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    23c6:	4b04      	ldr	r3, [pc, #16]	; (23d8 <usb_halt_endpoint_req+0x5c>)
    23c8:	69db      	ldr	r3, [r3, #28]
    23ca:	2b00      	cmp	r3, #0
    23cc:	d0e8      	beq.n	23a0 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    23ce:	f10d 0107 	add.w	r1, sp, #7
    23d2:	2009      	movs	r0, #9
    23d4:	4798      	blx	r3
		return true;
    23d6:	e7e3      	b.n	23a0 <usb_halt_endpoint_req+0x24>
    23d8:	20000bac 	.word	0x20000bac

000023dc <set_endpoint>:
{
    23dc:	b500      	push	{lr}
    23de:	b083      	sub	sp, #12
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    23e0:	7883      	ldrb	r3, [r0, #2]
    23e2:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    23e6:	8883      	ldrh	r3, [r0, #4]
    23e8:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    23ec:	78c3      	ldrb	r3, [r0, #3]
    23ee:	f003 0303 	and.w	r3, r3, #3
    23f2:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
    23f6:	4668      	mov	r0, sp
    23f8:	f003 fc48 	bl	5c8c <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    23fc:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2400:	d000      	beq.n	2404 <set_endpoint+0x28>
	} else if (ret) {
    2402:	b970      	cbnz	r0, 2422 <set_endpoint+0x46>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    2404:	f89d 0000 	ldrb.w	r0, [sp]
    2408:	f003 fd0e 	bl	5e28 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    240c:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2410:	d000      	beq.n	2414 <set_endpoint+0x38>
	} else if (ret) {
    2412:	b9d0      	cbnz	r0, 244a <set_endpoint+0x6e>
	usb_dev.configured = true;
    2414:	2001      	movs	r0, #1
    2416:	4b17      	ldr	r3, [pc, #92]	; (2474 <set_endpoint+0x98>)
    2418:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
}
    241c:	b003      	add	sp, #12
    241e:	f85d fb04 	ldr.w	pc, [sp], #4
    2422:	4b15      	ldr	r3, [pc, #84]	; (2478 <set_endpoint+0x9c>)
    2424:	4a15      	ldr	r2, [pc, #84]	; (247c <set_endpoint+0xa0>)
    2426:	1a9b      	subs	r3, r3, r2
    2428:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    242a:	f04f 0200 	mov.w	r2, #0
    242e:	2101      	movs	r1, #1
    2430:	f361 0202 	bfi	r2, r1, #0, #3
    2434:	f36f 02c5 	bfc	r2, #3, #3
    2438:	f363 128f 	bfi	r2, r3, #6, #10
    243c:	f89d 1000 	ldrb.w	r1, [sp]
    2440:	480f      	ldr	r0, [pc, #60]	; (2480 <set_endpoint+0xa4>)
    2442:	f7ff fa4f 	bl	18e4 <log_1>
		return false;
    2446:	2000      	movs	r0, #0
    2448:	e7e8      	b.n	241c <set_endpoint+0x40>
    244a:	4b0b      	ldr	r3, [pc, #44]	; (2478 <set_endpoint+0x9c>)
    244c:	4a0b      	ldr	r2, [pc, #44]	; (247c <set_endpoint+0xa0>)
    244e:	1a9b      	subs	r3, r3, r2
    2450:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    2452:	f04f 0200 	mov.w	r2, #0
    2456:	2101      	movs	r1, #1
    2458:	f361 0202 	bfi	r2, r1, #0, #3
    245c:	f36f 02c5 	bfc	r2, #3, #3
    2460:	f363 128f 	bfi	r2, r3, #6, #10
    2464:	f89d 1000 	ldrb.w	r1, [sp]
    2468:	4806      	ldr	r0, [pc, #24]	; (2484 <set_endpoint+0xa8>)
    246a:	f7ff fa3b 	bl	18e4 <log_1>
		return false;
    246e:	2000      	movs	r0, #0
    2470:	e7d4      	b.n	241c <set_endpoint+0x40>
    2472:	bf00      	nop
    2474:	20000bac 	.word	0x20000bac
    2478:	0000ef5c 	.word	0x0000ef5c
    247c:	0000eefc 	.word	0x0000eefc
    2480:	0000f248 	.word	0x0000f248
    2484:	0000f26c 	.word	0x0000f26c

00002488 <usb_reset_alt_setting>:
{
    2488:	b508      	push	{r3, lr}
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    248a:	2208      	movs	r2, #8
    248c:	2100      	movs	r1, #0
    248e:	4802      	ldr	r0, [pc, #8]	; (2498 <usb_reset_alt_setting+0x10>)
    2490:	f00b f8c2 	bl	d618 <memset>
}
    2494:	bd08      	pop	{r3, pc}
    2496:	bf00      	nop
    2498:	20000c67 	.word	0x20000c67

0000249c <usb_set_configuration>:
{
    249c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    24a0:	4605      	mov	r5, r0
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    24a2:	4b23      	ldr	r3, [pc, #140]	; (2530 <usb_set_configuration+0x94>)
    24a4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	if (setup->wValue == 0U) {
    24a6:	8843      	ldrh	r3, [r0, #2]
    24a8:	b11b      	cbz	r3, 24b2 <usb_set_configuration+0x16>
	bool found = false;
    24aa:	2700      	movs	r7, #0
	uint8_t cur_config = 0xFF;
    24ac:	26ff      	movs	r6, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    24ae:	46b0      	mov	r8, r6
    24b0:	e010      	b.n	24d4 <usb_set_configuration+0x38>
		usb_reset_alt_setting();
    24b2:	f7ff ffe9 	bl	2488 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    24b6:	886a      	ldrh	r2, [r5, #2]
    24b8:	4b1d      	ldr	r3, [pc, #116]	; (2530 <usb_set_configuration+0x94>)
    24ba:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
    24be:	69db      	ldr	r3, [r3, #28]
    24c0:	b113      	cbz	r3, 24c8 <usb_set_configuration+0x2c>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    24c2:	491c      	ldr	r1, [pc, #112]	; (2534 <usb_set_configuration+0x98>)
    24c4:	2003      	movs	r0, #3
    24c6:	4798      	blx	r3
		return true;
    24c8:	2701      	movs	r7, #1
    24ca:	e020      	b.n	250e <usb_set_configuration+0x72>
			cur_alt_setting =
    24cc:	f894 8003 	ldrb.w	r8, [r4, #3]
		p += p[DESC_bLength];
    24d0:	7823      	ldrb	r3, [r4, #0]
    24d2:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    24d4:	7823      	ldrb	r3, [r4, #0]
    24d6:	b1cb      	cbz	r3, 250c <usb_set_configuration+0x70>
		switch (p[DESC_bDescriptorType]) {
    24d8:	7863      	ldrb	r3, [r4, #1]
    24da:	2b04      	cmp	r3, #4
    24dc:	d0f6      	beq.n	24cc <usb_set_configuration+0x30>
    24de:	2b05      	cmp	r3, #5
    24e0:	d008      	beq.n	24f4 <usb_set_configuration+0x58>
    24e2:	2b02      	cmp	r3, #2
    24e4:	d1f4      	bne.n	24d0 <usb_set_configuration+0x34>
			cur_config = p[CONF_DESC_bConfigurationValue];
    24e6:	7966      	ldrb	r6, [r4, #5]
			if (cur_config == setup->wValue) {
    24e8:	b2b2      	uxth	r2, r6
    24ea:	886b      	ldrh	r3, [r5, #2]
    24ec:	429a      	cmp	r2, r3
    24ee:	d1ef      	bne.n	24d0 <usb_set_configuration+0x34>
				found = true;
    24f0:	2701      	movs	r7, #1
    24f2:	e7ed      	b.n	24d0 <usb_set_configuration+0x34>
			if ((cur_config != setup->wValue) ||
    24f4:	b2b3      	uxth	r3, r6
    24f6:	886a      	ldrh	r2, [r5, #2]
    24f8:	4293      	cmp	r3, r2
    24fa:	d1e9      	bne.n	24d0 <usb_set_configuration+0x34>
    24fc:	f1b8 0f00 	cmp.w	r8, #0
    2500:	d1e6      	bne.n	24d0 <usb_set_configuration+0x34>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    2502:	4620      	mov	r0, r4
    2504:	f7ff ff6a 	bl	23dc <set_endpoint>
    2508:	4607      	mov	r7, r0
			break;
    250a:	e7e1      	b.n	24d0 <usb_set_configuration+0x34>
	if (found) {
    250c:	b917      	cbnz	r7, 2514 <usb_set_configuration+0x78>
}
    250e:	4638      	mov	r0, r7
    2510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		usb_reset_alt_setting();
    2514:	f7ff ffb8 	bl	2488 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    2518:	886a      	ldrh	r2, [r5, #2]
    251a:	4b05      	ldr	r3, [pc, #20]	; (2530 <usb_set_configuration+0x94>)
    251c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
    2520:	69db      	ldr	r3, [r3, #28]
    2522:	2b00      	cmp	r3, #0
    2524:	d0f3      	beq.n	250e <usb_set_configuration+0x72>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    2526:	4903      	ldr	r1, [pc, #12]	; (2534 <usb_set_configuration+0x98>)
    2528:	2003      	movs	r0, #3
    252a:	4798      	blx	r3
    252c:	e7ef      	b.n	250e <usb_set_configuration+0x72>
    252e:	bf00      	nop
    2530:	20000bac 	.word	0x20000bac
    2534:	20000c66 	.word	0x20000c66

00002538 <usb_handle_std_device_req>:
{
    2538:	b510      	push	{r4, lr}
	uint8_t *data = *data_buf;
    253a:	6814      	ldr	r4, [r2, #0]
	if (usb_reqtype_is_to_host(setup)) {
    253c:	f990 3000 	ldrsb.w	r3, [r0]
    2540:	2b00      	cmp	r3, #0
    2542:	db0a      	blt.n	255a <usb_handle_std_device_req+0x22>
		switch (setup->bRequest) {
    2544:	7843      	ldrb	r3, [r0, #1]
    2546:	3b01      	subs	r3, #1
    2548:	2b08      	cmp	r3, #8
    254a:	d83a      	bhi.n	25c2 <usb_handle_std_device_req+0x8a>
    254c:	e8df f003 	tbb	[pc, r3]
    2550:	392f3924 	.word	0x392f3924
    2554:	3939391a 	.word	0x3939391a
    2558:	21          	.byte	0x21
    2559:	00          	.byte	0x00
		switch (setup->bRequest) {
    255a:	7843      	ldrb	r3, [r0, #1]
    255c:	2b06      	cmp	r3, #6
    255e:	d007      	beq.n	2570 <usb_handle_std_device_req+0x38>
    2560:	2b08      	cmp	r3, #8
    2562:	d008      	beq.n	2576 <usb_handle_std_device_req+0x3e>
    2564:	b10b      	cbz	r3, 256a <usb_handle_std_device_req+0x32>
    2566:	2000      	movs	r0, #0
}
    2568:	bd10      	pop	{r4, pc}
			return usb_get_status(setup, len, data_buf);
    256a:	f7ff fdcf 	bl	210c <usb_get_status>
    256e:	e7fb      	b.n	2568 <usb_handle_std_device_req+0x30>
			return usb_get_descriptor(setup, len, data_buf);
    2570:	f7ff fde2 	bl	2138 <usb_get_descriptor>
    2574:	e7f8      	b.n	2568 <usb_handle_std_device_req+0x30>
			data[0] = usb_dev.configuration;
    2576:	4b14      	ldr	r3, [pc, #80]	; (25c8 <usb_handle_std_device_req+0x90>)
    2578:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
    257c:	7023      	strb	r3, [r4, #0]
			*len = 1;
    257e:	2001      	movs	r0, #1
    2580:	6008      	str	r0, [r1, #0]
			return true;
    2582:	e7f1      	b.n	2568 <usb_handle_std_device_req+0x30>
			return !usb_dc_set_address(setup->wValue);
    2584:	7880      	ldrb	r0, [r0, #2]
    2586:	f003 fb2b 	bl	5be0 <usb_dc_set_address>
    258a:	fab0 f080 	clz	r0, r0
    258e:	0940      	lsrs	r0, r0, #5
    2590:	e7ea      	b.n	2568 <usb_handle_std_device_req+0x30>
			return usb_set_configuration(setup);
    2592:	f7ff ff83 	bl	249c <usb_set_configuration>
    2596:	e7e7      	b.n	2568 <usb_handle_std_device_req+0x30>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    2598:	8843      	ldrh	r3, [r0, #2]
    259a:	2b01      	cmp	r3, #1
    259c:	d001      	beq.n	25a2 <usb_handle_std_device_req+0x6a>
	return false;
    259e:	2000      	movs	r0, #0
    25a0:	e7e2      	b.n	2568 <usb_handle_std_device_req+0x30>
					usb_dev.remote_wakeup = false;
    25a2:	4b09      	ldr	r3, [pc, #36]	; (25c8 <usb_handle_std_device_req+0x90>)
    25a4:	2200      	movs	r2, #0
    25a6:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
					return true;
    25aa:	2001      	movs	r0, #1
    25ac:	e7dc      	b.n	2568 <usb_handle_std_device_req+0x30>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    25ae:	8843      	ldrh	r3, [r0, #2]
    25b0:	2b01      	cmp	r3, #1
    25b2:	d001      	beq.n	25b8 <usb_handle_std_device_req+0x80>
	return false;
    25b4:	2000      	movs	r0, #0
    25b6:	e7d7      	b.n	2568 <usb_handle_std_device_req+0x30>
					usb_dev.remote_wakeup = true;
    25b8:	2001      	movs	r0, #1
    25ba:	4b03      	ldr	r3, [pc, #12]	; (25c8 <usb_handle_std_device_req+0x90>)
    25bc:	f883 00c3 	strb.w	r0, [r3, #195]	; 0xc3
					return true;
    25c0:	e7d2      	b.n	2568 <usb_handle_std_device_req+0x30>
		switch (setup->bRequest) {
    25c2:	2000      	movs	r0, #0
    25c4:	e7d0      	b.n	2568 <usb_handle_std_device_req+0x30>
    25c6:	bf00      	nop
    25c8:	20000bac 	.word	0x20000bac

000025cc <reset_endpoint>:
{
    25cc:	b510      	push	{r4, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    25ce:	7884      	ldrb	r4, [r0, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    25d0:	4620      	mov	r0, r4
    25d2:	f000 fd99 	bl	3108 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    25d6:	4620      	mov	r0, r4
    25d8:	f003 fc54 	bl	5e84 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    25dc:	f110 0f78 	cmn.w	r0, #120	; 0x78
    25e0:	d015      	beq.n	260e <reset_endpoint+0x42>
	} else if (ret) {
    25e2:	b908      	cbnz	r0, 25e8 <reset_endpoint+0x1c>
	return true;
    25e4:	2001      	movs	r0, #1
}
    25e6:	bd10      	pop	{r4, pc}
    25e8:	4b0a      	ldr	r3, [pc, #40]	; (2614 <reset_endpoint+0x48>)
    25ea:	4a0b      	ldr	r2, [pc, #44]	; (2618 <reset_endpoint+0x4c>)
    25ec:	1a9b      	subs	r3, r3, r2
    25ee:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    25f0:	f04f 0200 	mov.w	r2, #0
    25f4:	2101      	movs	r1, #1
    25f6:	f361 0202 	bfi	r2, r1, #0, #3
    25fa:	f36f 02c5 	bfc	r2, #3, #3
    25fe:	f363 128f 	bfi	r2, r3, #6, #10
    2602:	4621      	mov	r1, r4
    2604:	4805      	ldr	r0, [pc, #20]	; (261c <reset_endpoint+0x50>)
    2606:	f7ff f96d 	bl	18e4 <log_1>
		return false;
    260a:	2000      	movs	r0, #0
    260c:	e7eb      	b.n	25e6 <reset_endpoint+0x1a>
	return true;
    260e:	2001      	movs	r0, #1
    2610:	e7e9      	b.n	25e6 <reset_endpoint+0x1a>
    2612:	bf00      	nop
    2614:	0000ef5c 	.word	0x0000ef5c
    2618:	0000eefc 	.word	0x0000eefc
    261c:	0000f290 	.word	0x0000f290

00002620 <usb_set_interface>:
{
    2620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2624:	4606      	mov	r6, r0
	const uint8_t *p = usb_dev.descriptors;
    2626:	4b1b      	ldr	r3, [pc, #108]	; (2694 <usb_set_interface+0x74>)
    2628:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	bool ret = false;
    262a:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    262c:	25ff      	movs	r5, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    262e:	46a8      	mov	r8, r5
	const uint8_t *if_desc = NULL;
    2630:	46b9      	mov	r9, r7
    2632:	e008      	b.n	2646 <usb_set_interface+0x26>
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    2634:	f894 8003 	ldrb.w	r8, [r4, #3]
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    2638:	78a5      	ldrb	r5, [r4, #2]
			if (cur_iface == setup->wIndex &&
    263a:	b2ab      	uxth	r3, r5
    263c:	88b0      	ldrh	r0, [r6, #4]
    263e:	4283      	cmp	r3, r0
    2640:	d013      	beq.n	266a <usb_set_interface+0x4a>
		p += p[DESC_bLength];
    2642:	7823      	ldrb	r3, [r4, #0]
    2644:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    2646:	7823      	ldrb	r3, [r4, #0]
    2648:	b1db      	cbz	r3, 2682 <usb_set_interface+0x62>
		switch (p[DESC_bDescriptorType]) {
    264a:	7863      	ldrb	r3, [r4, #1]
    264c:	2b04      	cmp	r3, #4
    264e:	d0f1      	beq.n	2634 <usb_set_interface+0x14>
    2650:	2b05      	cmp	r3, #5
    2652:	d1f6      	bne.n	2642 <usb_set_interface+0x22>
			if (cur_iface == setup->wIndex) {
    2654:	b2ab      	uxth	r3, r5
    2656:	88b2      	ldrh	r2, [r6, #4]
    2658:	4293      	cmp	r3, r2
    265a:	d1f2      	bne.n	2642 <usb_set_interface+0x22>
				ret = usb_eps_reconfigure(ep, cur_alt_setting,
    265c:	78b2      	ldrb	r2, [r6, #2]
    265e:	4641      	mov	r1, r8
    2660:	4620      	mov	r0, r4
    2662:	f00a fc5d 	bl	cf20 <usb_eps_reconfigure>
    2666:	4607      	mov	r7, r0
    2668:	e7eb      	b.n	2642 <usb_set_interface+0x22>
			    cur_alt_setting == setup->wValue) {
    266a:	fa1f f388 	uxth.w	r3, r8
    266e:	8871      	ldrh	r1, [r6, #2]
			if (cur_iface == setup->wIndex &&
    2670:	428b      	cmp	r3, r1
    2672:	d1e6      	bne.n	2642 <usb_set_interface+0x22>
				ret = usb_set_alt_setting(setup->wIndex,
    2674:	b2c9      	uxtb	r1, r1
    2676:	b2c0      	uxtb	r0, r0
    2678:	f7ff fd0e 	bl	2098 <usb_set_alt_setting>
    267c:	4607      	mov	r7, r0
				if_desc = (void *)p;
    267e:	46a1      	mov	r9, r4
    2680:	e7df      	b.n	2642 <usb_set_interface+0x22>
	if (usb_dev.status_callback) {
    2682:	4b04      	ldr	r3, [pc, #16]	; (2694 <usb_set_interface+0x74>)
    2684:	69db      	ldr	r3, [r3, #28]
    2686:	b113      	cbz	r3, 268e <usb_set_interface+0x6e>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    2688:	4649      	mov	r1, r9
    268a:	2007      	movs	r0, #7
    268c:	4798      	blx	r3
}
    268e:	4638      	mov	r0, r7
    2690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2694:	20000bac 	.word	0x20000bac

00002698 <usb_handle_standard_request>:
{
    2698:	b570      	push	{r4, r5, r6, lr}
    269a:	4604      	mov	r4, r0
    269c:	460d      	mov	r5, r1
    269e:	4616      	mov	r6, r2
	if (usb_dev.custom_req_handler &&
    26a0:	4b18      	ldr	r3, [pc, #96]	; (2704 <usb_handle_standard_request+0x6c>)
    26a2:	699b      	ldr	r3, [r3, #24]
    26a4:	b10b      	cbz	r3, 26aa <usb_handle_standard_request+0x12>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    26a6:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    26a8:	b148      	cbz	r0, 26be <usb_handle_standard_request+0x26>
	switch (setup->RequestType.recipient) {
    26aa:	7823      	ldrb	r3, [r4, #0]
    26ac:	f003 031f 	and.w	r3, r3, #31
    26b0:	2b01      	cmp	r3, #1
    26b2:	d00d      	beq.n	26d0 <usb_handle_standard_request+0x38>
    26b4:	2b02      	cmp	r3, #2
    26b6:	d013      	beq.n	26e0 <usb_handle_standard_request+0x48>
    26b8:	b113      	cbz	r3, 26c0 <usb_handle_standard_request+0x28>
    26ba:	f06f 0015 	mvn.w	r0, #21
}
    26be:	bd70      	pop	{r4, r5, r6, pc}
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    26c0:	4632      	mov	r2, r6
    26c2:	4629      	mov	r1, r5
    26c4:	4620      	mov	r0, r4
    26c6:	f7ff ff37 	bl	2538 <usb_handle_std_device_req>
    26ca:	b188      	cbz	r0, 26f0 <usb_handle_standard_request+0x58>
	int rc = 0;
    26cc:	2000      	movs	r0, #0
    26ce:	e7f6      	b.n	26be <usb_handle_standard_request+0x26>
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    26d0:	4632      	mov	r2, r6
    26d2:	4629      	mov	r1, r5
    26d4:	4620      	mov	r0, r4
    26d6:	f00a fc2c 	bl	cf32 <usb_handle_std_interface_req>
    26da:	b160      	cbz	r0, 26f6 <usb_handle_standard_request+0x5e>
	int rc = 0;
    26dc:	2000      	movs	r0, #0
    26de:	e7ee      	b.n	26be <usb_handle_standard_request+0x26>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    26e0:	4632      	mov	r2, r6
    26e2:	4629      	mov	r1, r5
    26e4:	4620      	mov	r0, r4
    26e6:	f00a fc71 	bl	cfcc <usb_handle_std_endpoint_req>
    26ea:	b138      	cbz	r0, 26fc <usb_handle_standard_request+0x64>
	int rc = 0;
    26ec:	2000      	movs	r0, #0
    26ee:	e7e6      	b.n	26be <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    26f0:	f06f 0015 	mvn.w	r0, #21
    26f4:	e7e3      	b.n	26be <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    26f6:	f06f 0015 	mvn.w	r0, #21
    26fa:	e7e0      	b.n	26be <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    26fc:	f06f 0015 	mvn.w	r0, #21
    2700:	e7dd      	b.n	26be <usb_handle_standard_request+0x26>
    2702:	bf00      	nop
    2704:	20000bac 	.word	0x20000bac

00002708 <composite_setup_ep_cb>:

static int composite_setup_ep_cb(void)
{
    2708:	b570      	push	{r4, r5, r6, lr}
	struct usb_ep_cfg_data *ep_data;

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    270a:	4e0d      	ldr	r6, [pc, #52]	; (2740 <composite_setup_ep_cb+0x38>)
    270c:	4b0d      	ldr	r3, [pc, #52]	; (2744 <composite_setup_ep_cb+0x3c>)
    270e:	429e      	cmp	r6, r3
    2710:	d211      	bcs.n	2736 <composite_setup_ep_cb+0x2e>
		ep_data = cfg_data->endpoint;
    2712:	6a35      	ldr	r5, [r6, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2714:	2400      	movs	r4, #0
    2716:	7f33      	ldrb	r3, [r6, #28]
    2718:	429c      	cmp	r4, r3
    271a:	d20a      	bcs.n	2732 <composite_setup_ep_cb+0x2a>
			LOG_DBG("set cb, ep: 0x%x", ep_data[n].ep_addr);
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    271c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
    2720:	f855 1034 	ldr.w	r1, [r5, r4, lsl #3]
    2724:	7918      	ldrb	r0, [r3, #4]
    2726:	f003 fdc9 	bl	62bc <usb_dc_ep_set_callback>
    272a:	b930      	cbnz	r0, 273a <composite_setup_ep_cb+0x32>
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    272c:	3401      	adds	r4, #1
    272e:	b2e4      	uxtb	r4, r4
    2730:	e7f1      	b.n	2716 <composite_setup_ep_cb+0xe>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2732:	3624      	adds	r6, #36	; 0x24
    2734:	e7ea      	b.n	270c <composite_setup_ep_cb+0x4>
				return -1;
			}
		}
	}

	return 0;
    2736:	2000      	movs	r0, #0
    2738:	e001      	b.n	273e <composite_setup_ep_cb+0x36>
				return -1;
    273a:	f04f 30ff 	mov.w	r0, #4294967295
}
    273e:	bd70      	pop	{r4, r5, r6, pc}
    2740:	20000510 	.word	0x20000510
    2744:	20000558 	.word	0x20000558

00002748 <forward_status_cb>:
{
    2748:	b570      	push	{r4, r5, r6, lr}
    274a:	4605      	mov	r5, r0
    274c:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
    274e:	2804      	cmp	r0, #4
    2750:	d005      	beq.n	275e <forward_status_cb+0x16>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND) {
    2752:	1f2b      	subs	r3, r5, #4
    2754:	b2db      	uxtb	r3, r3
    2756:	2b01      	cmp	r3, #1
    2758:	d904      	bls.n	2764 <forward_status_cb+0x1c>
{
    275a:	4c14      	ldr	r4, [pc, #80]	; (27ac <forward_status_cb+0x64>)
    275c:	e014      	b.n	2788 <forward_status_cb+0x40>
		usb_reset_alt_setting();
    275e:	f7ff fe93 	bl	2488 <usb_reset_alt_setting>
    2762:	e7f6      	b.n	2752 <forward_status_cb+0xa>
		if (usb_dev.configured) {
    2764:	4b12      	ldr	r3, [pc, #72]	; (27b0 <forward_status_cb+0x68>)
    2766:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
    276a:	2b00      	cmp	r3, #0
    276c:	d0f5      	beq.n	275a <forward_status_cb+0x12>
			usb_cancel_transfers();
    276e:	f000 fceb 	bl	3148 <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED) {
    2772:	2d04      	cmp	r5, #4
    2774:	d1f1      	bne.n	275a <forward_status_cb+0x12>
				foreach_ep(disable_interface_ep);
    2776:	480f      	ldr	r0, [pc, #60]	; (27b4 <forward_status_cb+0x6c>)
    2778:	f7ff fd7a 	bl	2270 <foreach_ep>
				usb_dev.configured = false;
    277c:	4b0c      	ldr	r3, [pc, #48]	; (27b0 <forward_status_cb+0x68>)
    277e:	2200      	movs	r2, #0
    2780:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    2784:	e7e9      	b.n	275a <forward_status_cb+0x12>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2786:	3424      	adds	r4, #36	; 0x24
    2788:	4b0b      	ldr	r3, [pc, #44]	; (27b8 <forward_status_cb+0x70>)
    278a:	429c      	cmp	r4, r3
    278c:	d207      	bcs.n	279e <forward_status_cb+0x56>
		if (cfg_data->cb_usb_status) {
    278e:	68e3      	ldr	r3, [r4, #12]
    2790:	2b00      	cmp	r3, #0
    2792:	d0f8      	beq.n	2786 <forward_status_cb+0x3e>
			cfg_data->cb_usb_status(cfg_data, status, param);
    2794:	4632      	mov	r2, r6
    2796:	4629      	mov	r1, r5
    2798:	4620      	mov	r0, r4
    279a:	4798      	blx	r3
    279c:	e7f3      	b.n	2786 <forward_status_cb+0x3e>
	if (usb_dev.user_status_callback) {
    279e:	4b04      	ldr	r3, [pc, #16]	; (27b0 <forward_status_cb+0x68>)
    27a0:	6a1b      	ldr	r3, [r3, #32]
    27a2:	b113      	cbz	r3, 27aa <forward_status_cb+0x62>
		usb_dev.user_status_callback(status, param);
    27a4:	4631      	mov	r1, r6
    27a6:	4628      	mov	r0, r5
    27a8:	4798      	blx	r3
}
    27aa:	bd70      	pop	{r4, r5, r6, pc}
    27ac:	20000510 	.word	0x20000510
    27b0:	20000bac 	.word	0x20000bac
    27b4:	0000cf8d 	.word	0x0000cf8d
    27b8:	20000558 	.word	0x20000558

000027bc <usb_data_to_host>:
{
    27bc:	b510      	push	{r4, lr}
    27be:	b082      	sub	sp, #8
	if (usb_dev.zlp_flag == false) {
    27c0:	4b13      	ldr	r3, [pc, #76]	; (2810 <usb_data_to_host+0x54>)
    27c2:	7d1b      	ldrb	r3, [r3, #20]
    27c4:	b9cb      	cbnz	r3, 27fa <usb_data_to_host+0x3e>
		uint32_t chunk = usb_dev.data_buf_residue;
    27c6:	4c12      	ldr	r4, [pc, #72]	; (2810 <usb_data_to_host+0x54>)
    27c8:	68e2      	ldr	r2, [r4, #12]
    27ca:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    27cc:	ab01      	add	r3, sp, #4
    27ce:	68a1      	ldr	r1, [r4, #8]
    27d0:	2080      	movs	r0, #128	; 0x80
    27d2:	f00a fc1e 	bl	d012 <usb_write>
		usb_dev.data_buf += chunk;
    27d6:	9901      	ldr	r1, [sp, #4]
    27d8:	68a2      	ldr	r2, [r4, #8]
    27da:	440a      	add	r2, r1
    27dc:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    27de:	68e3      	ldr	r3, [r4, #12]
    27e0:	1a5b      	subs	r3, r3, r1
    27e2:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue &&
    27e4:	b98b      	cbnz	r3, 280a <usb_data_to_host+0x4e>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    27e6:	88e2      	ldrh	r2, [r4, #6]
    27e8:	6923      	ldr	r3, [r4, #16]
		if (!usb_dev.data_buf_residue &&
    27ea:	429a      	cmp	r2, r3
    27ec:	dd0d      	ble.n	280a <usb_data_to_host+0x4e>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    27ee:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    27f2:	d10a      	bne.n	280a <usb_data_to_host+0x4e>
				usb_dev.zlp_flag = true;
    27f4:	2201      	movs	r2, #1
    27f6:	7522      	strb	r2, [r4, #20]
    27f8:	e007      	b.n	280a <usb_data_to_host+0x4e>
		usb_dev.zlp_flag = false;
    27fa:	2100      	movs	r1, #0
    27fc:	4b04      	ldr	r3, [pc, #16]	; (2810 <usb_data_to_host+0x54>)
    27fe:	7519      	strb	r1, [r3, #20]
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    2800:	460b      	mov	r3, r1
    2802:	460a      	mov	r2, r1
    2804:	2080      	movs	r0, #128	; 0x80
    2806:	f003 fb67 	bl	5ed8 <usb_dc_ep_write>
}
    280a:	b002      	add	sp, #8
    280c:	bd10      	pop	{r4, pc}
    280e:	bf00      	nop
    2810:	20000bac 	.word	0x20000bac

00002814 <usb_handle_control_transfer>:
{
    2814:	b510      	push	{r4, lr}
    2816:	b084      	sub	sp, #16
	uint32_t chunk = 0U;
    2818:	2300      	movs	r3, #0
    281a:	9303      	str	r3, [sp, #12]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    281c:	4604      	mov	r4, r0
    281e:	b900      	cbnz	r0, 2822 <usb_handle_control_transfer+0xe>
    2820:	b331      	cbz	r1, 2870 <usb_handle_control_transfer+0x5c>
	} else if (ep == USB_CONTROL_EP_OUT) {
    2822:	2c00      	cmp	r4, #0
    2824:	f040 8094 	bne.w	2950 <usb_handle_control_transfer+0x13c>
		if (usb_dev.data_buf_residue <= 0) {
    2828:	4b50      	ldr	r3, [pc, #320]	; (296c <usb_handle_control_transfer+0x158>)
    282a:	68da      	ldr	r2, [r3, #12]
    282c:	2a00      	cmp	r2, #0
    282e:	dd77      	ble.n	2920 <usb_handle_control_transfer+0x10c>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2830:	ab03      	add	r3, sp, #12
    2832:	494e      	ldr	r1, [pc, #312]	; (296c <usb_handle_control_transfer+0x158>)
    2834:	6889      	ldr	r1, [r1, #8]
    2836:	2000      	movs	r0, #0
    2838:	f00a ff96 	bl	d768 <usb_dc_ep_read>
    283c:	2800      	cmp	r0, #0
    283e:	db7c      	blt.n	293a <usb_handle_control_transfer+0x126>
		usb_dev.data_buf += chunk;
    2840:	9803      	ldr	r0, [sp, #12]
    2842:	4a4a      	ldr	r2, [pc, #296]	; (296c <usb_handle_control_transfer+0x158>)
    2844:	6891      	ldr	r1, [r2, #8]
    2846:	4401      	add	r1, r0
    2848:	6091      	str	r1, [r2, #8]
		usb_dev.data_buf_residue -= chunk;
    284a:	68d3      	ldr	r3, [r2, #12]
    284c:	1a1b      	subs	r3, r3, r0
    284e:	60d3      	str	r3, [r2, #12]
		if (usb_dev.data_buf_residue == 0) {
    2850:	2b00      	cmp	r3, #0
    2852:	d17f      	bne.n	2954 <usb_handle_control_transfer+0x140>
			usb_dev.data_buf = usb_dev.req_data;
    2854:	4610      	mov	r0, r2
    2856:	f102 0338 	add.w	r3, r2, #56	; 0x38
    285a:	f842 3f08 	str.w	r3, [r2, #8]!
			if (!usb_handle_request(setup,
    285e:	f100 0110 	add.w	r1, r0, #16
    2862:	f7ff fc31 	bl	20c8 <usb_handle_request>
    2866:	2800      	cmp	r0, #0
    2868:	d06e      	beq.n	2948 <usb_handle_control_transfer+0x134>
			usb_data_to_host();
    286a:	f7ff ffa7 	bl	27bc <usb_data_to_host>
    286e:	e071      	b.n	2954 <usb_handle_control_transfer+0x140>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    2870:	2208      	movs	r2, #8
    2872:	a901      	add	r1, sp, #4
    2874:	f00a ff78 	bl	d768 <usb_dc_ep_read>
    2878:	2800      	cmp	r0, #0
    287a:	db2e      	blt.n	28da <usb_handle_control_transfer+0xc6>
		setup->bmRequestType = setup_raw.bmRequestType;
    287c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2880:	4b3a      	ldr	r3, [pc, #232]	; (296c <usb_handle_control_transfer+0x158>)
    2882:	7018      	strb	r0, [r3, #0]
		setup->bRequest = setup_raw.bRequest;
    2884:	f89d 2005 	ldrb.w	r2, [sp, #5]
    2888:	705a      	strb	r2, [r3, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    288a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    288e:	805a      	strh	r2, [r3, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    2890:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    2894:	809a      	strh	r2, [r3, #4]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    2896:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    289a:	80d9      	strh	r1, [r3, #6]
		usb_dev.data_buf = usb_dev.req_data;
    289c:	f103 0238 	add.w	r2, r3, #56	; 0x38
    28a0:	609a      	str	r2, [r3, #8]
		usb_dev.zlp_flag = false;
    28a2:	2200      	movs	r2, #0
    28a4:	751a      	strb	r2, [r3, #20]
		usb_dev.data_buf_len = 0;
    28a6:	611a      	str	r2, [r3, #16]
		usb_dev.data_buf_residue = 0;
    28a8:	60da      	str	r2, [r3, #12]
		if (usb_reqtype_is_to_device(setup)) {
    28aa:	f010 0f80 	tst.w	r0, #128	; 0x80
    28ae:	d102      	bne.n	28b6 <usb_handle_control_transfer+0xa2>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    28b0:	2980      	cmp	r1, #128	; 0x80
    28b2:	d816      	bhi.n	28e2 <usb_handle_control_transfer+0xce>
			if (setup->wLength) {
    28b4:	bb61      	cbnz	r1, 2910 <usb_handle_control_transfer+0xfc>
		if (!usb_handle_request(setup,
    28b6:	482d      	ldr	r0, [pc, #180]	; (296c <usb_handle_control_transfer+0x158>)
    28b8:	f100 0208 	add.w	r2, r0, #8
    28bc:	f100 0110 	add.w	r1, r0, #16
    28c0:	f7ff fc02 	bl	20c8 <usb_handle_request>
    28c4:	b340      	cbz	r0, 2918 <usb_handle_control_transfer+0x104>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    28c6:	4b29      	ldr	r3, [pc, #164]	; (296c <usb_handle_control_transfer+0x158>)
    28c8:	88da      	ldrh	r2, [r3, #6]
    28ca:	6919      	ldr	r1, [r3, #16]
    28cc:	428a      	cmp	r2, r1
    28ce:	bfa8      	it	ge
    28d0:	460a      	movge	r2, r1
    28d2:	60da      	str	r2, [r3, #12]
		usb_data_to_host();
    28d4:	f7ff ff72 	bl	27bc <usb_data_to_host>
    28d8:	e03c      	b.n	2954 <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    28da:	2080      	movs	r0, #128	; 0x80
    28dc:	f003 fa14 	bl	5d08 <usb_dc_ep_set_stall>
			return;
    28e0:	e038      	b.n	2954 <usb_handle_control_transfer+0x140>
    28e2:	4b23      	ldr	r3, [pc, #140]	; (2970 <usb_handle_control_transfer+0x15c>)
    28e4:	4a23      	ldr	r2, [pc, #140]	; (2974 <usb_handle_control_transfer+0x160>)
    28e6:	1a9b      	subs	r3, r3, r2
    28e8:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Request buffer too small");
    28ea:	f04f 0100 	mov.w	r1, #0
    28ee:	2201      	movs	r2, #1
    28f0:	f362 0102 	bfi	r1, r2, #0, #3
    28f4:	f36f 01c5 	bfc	r1, #3, #3
    28f8:	f363 118f 	bfi	r1, r3, #6, #10
    28fc:	481e      	ldr	r0, [pc, #120]	; (2978 <usb_handle_control_transfer+0x164>)
    28fe:	f7ff f863 	bl	19c8 <log_0>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2902:	2080      	movs	r0, #128	; 0x80
    2904:	f003 fa00 	bl	5d08 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2908:	2000      	movs	r0, #0
    290a:	f003 f9fd 	bl	5d08 <usb_dc_ep_set_stall>
				return;
    290e:	e021      	b.n	2954 <usb_handle_control_transfer+0x140>
				usb_dev.data_buf_len = setup->wLength;
    2910:	4b16      	ldr	r3, [pc, #88]	; (296c <usb_handle_control_transfer+0x158>)
    2912:	6119      	str	r1, [r3, #16]
				usb_dev.data_buf_residue = setup->wLength;
    2914:	60d9      	str	r1, [r3, #12]
				return;
    2916:	e01d      	b.n	2954 <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2918:	2080      	movs	r0, #128	; 0x80
    291a:	f003 f9f5 	bl	5d08 <usb_dc_ep_set_stall>
			return;
    291e:	e019      	b.n	2954 <usb_handle_control_transfer+0x140>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2920:	ab03      	add	r3, sp, #12
    2922:	2200      	movs	r2, #0
    2924:	4911      	ldr	r1, [pc, #68]	; (296c <usb_handle_control_transfer+0x158>)
    2926:	6889      	ldr	r1, [r1, #8]
    2928:	4610      	mov	r0, r2
    292a:	f00a ff1d 	bl	d768 <usb_dc_ep_read>
    292e:	2800      	cmp	r0, #0
    2930:	da10      	bge.n	2954 <usb_handle_control_transfer+0x140>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2932:	2080      	movs	r0, #128	; 0x80
    2934:	f003 f9e8 	bl	5d08 <usb_dc_ep_set_stall>
			return;
    2938:	e00c      	b.n	2954 <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    293a:	2080      	movs	r0, #128	; 0x80
    293c:	f003 f9e4 	bl	5d08 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2940:	2000      	movs	r0, #0
    2942:	f003 f9e1 	bl	5d08 <usb_dc_ep_set_stall>
			return;
    2946:	e005      	b.n	2954 <usb_handle_control_transfer+0x140>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2948:	2080      	movs	r0, #128	; 0x80
    294a:	f003 f9dd 	bl	5d08 <usb_dc_ep_set_stall>
				return;
    294e:	e001      	b.n	2954 <usb_handle_control_transfer+0x140>
	} else if (ep == USB_CONTROL_EP_IN) {
    2950:	2c80      	cmp	r4, #128	; 0x80
    2952:	d001      	beq.n	2958 <usb_handle_control_transfer+0x144>
}
    2954:	b004      	add	sp, #16
    2956:	bd10      	pop	{r4, pc}
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    2958:	4b04      	ldr	r3, [pc, #16]	; (296c <usb_handle_control_transfer+0x158>)
    295a:	68db      	ldr	r3, [r3, #12]
    295c:	b91b      	cbnz	r3, 2966 <usb_handle_control_transfer+0x152>
    295e:	4b03      	ldr	r3, [pc, #12]	; (296c <usb_handle_control_transfer+0x158>)
    2960:	7d1b      	ldrb	r3, [r3, #20]
    2962:	2b00      	cmp	r3, #0
    2964:	d0f6      	beq.n	2954 <usb_handle_control_transfer+0x140>
			usb_data_to_host();
    2966:	f7ff ff29 	bl	27bc <usb_data_to_host>
		__ASSERT_NO_MSG(false);
    296a:	e7f3      	b.n	2954 <usb_handle_control_transfer+0x140>
    296c:	20000bac 	.word	0x20000bac
    2970:	0000ef5c 	.word	0x0000ef5c
    2974:	0000eefc 	.word	0x0000eefc
    2978:	0000f2b4 	.word	0x0000f2b4

0000297c <usb_set_config>:

int usb_set_config(const uint8_t *device_descriptor)
{
    297c:	b508      	push	{r3, lr}
	/* register descriptors */
	usb_register_descriptors(device_descriptor);
    297e:	f7ff fbbf 	bl	2100 <usb_register_descriptors>

	/* register standard request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_STANDARD,
    2982:	4908      	ldr	r1, [pc, #32]	; (29a4 <usb_set_config+0x28>)
    2984:	2000      	movs	r0, #0
    2986:	f7ff fbb3 	bl	20f0 <usb_register_request_handler>
				     usb_handle_standard_request);

	/* register class request handlers for each interface*/
	usb_register_request_handler(USB_REQTYPE_TYPE_CLASS, class_handler);
    298a:	4907      	ldr	r1, [pc, #28]	; (29a8 <usb_set_config+0x2c>)
    298c:	2001      	movs	r0, #1
    298e:	f7ff fbaf 	bl	20f0 <usb_register_request_handler>

	/* register vendor request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_VENDOR, vendor_handler);
    2992:	4906      	ldr	r1, [pc, #24]	; (29ac <usb_set_config+0x30>)
    2994:	2002      	movs	r0, #2
    2996:	f7ff fbab 	bl	20f0 <usb_register_request_handler>

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);
    299a:	4805      	ldr	r0, [pc, #20]	; (29b0 <usb_set_config+0x34>)
    299c:	f7ff fc5c 	bl	2258 <usb_register_custom_req_handler>

	return 0;
}
    29a0:	2000      	movs	r0, #0
    29a2:	bd08      	pop	{r3, pc}
    29a4:	00002699 	.word	0x00002699
    29a8:	000022a9 	.word	0x000022a9
    29ac:	00002341 	.word	0x00002341
    29b0:	000022e5 	.word	0x000022e5

000029b4 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
    29b4:	b508      	push	{r3, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    29b6:	4b10      	ldr	r3, [pc, #64]	; (29f8 <usb_device_init+0x44>)
    29b8:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    29bc:	b10b      	cbz	r3, 29c2 <usb_device_init+0xe>
		return 0;
    29be:	2000      	movs	r0, #0
	}

	usb_set_config(device_descriptor);

	return 0;
}
    29c0:	bd08      	pop	{r3, pc}
	device_descriptor = usb_get_device_descriptor();
    29c2:	f000 f9c3 	bl	2d4c <usb_get_device_descriptor>
	if (!device_descriptor) {
    29c6:	b118      	cbz	r0, 29d0 <usb_device_init+0x1c>
	usb_set_config(device_descriptor);
    29c8:	f7ff ffd8 	bl	297c <usb_set_config>
	return 0;
    29cc:	2000      	movs	r0, #0
    29ce:	e7f7      	b.n	29c0 <usb_device_init+0xc>
    29d0:	4b0a      	ldr	r3, [pc, #40]	; (29fc <usb_device_init+0x48>)
    29d2:	4a0b      	ldr	r2, [pc, #44]	; (2a00 <usb_device_init+0x4c>)
    29d4:	1a9b      	subs	r3, r3, r2
    29d6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to configure USB device stack");
    29d8:	f04f 0100 	mov.w	r1, #0
    29dc:	2201      	movs	r2, #1
    29de:	f362 0102 	bfi	r1, r2, #0, #3
    29e2:	f36f 01c5 	bfc	r1, #3, #3
    29e6:	f363 118f 	bfi	r1, r3, #6, #10
    29ea:	4806      	ldr	r0, [pc, #24]	; (2a04 <usb_device_init+0x50>)
    29ec:	f7fe ffec 	bl	19c8 <log_0>
		return -1;
    29f0:	f04f 30ff 	mov.w	r0, #4294967295
    29f4:	e7e4      	b.n	29c0 <usb_device_init+0xc>
    29f6:	bf00      	nop
    29f8:	20000bac 	.word	0x20000bac
    29fc:	0000ef5c 	.word	0x0000ef5c
    2a00:	0000eefc 	.word	0x0000eefc
    2a04:	0000f2d0 	.word	0x0000f2d0

00002a08 <usb_enable>:
{
    2a08:	b530      	push	{r4, r5, lr}
    2a0a:	b083      	sub	sp, #12
    2a0c:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    2a0e:	f04f 32ff 	mov.w	r2, #4294967295
    2a12:	f04f 33ff 	mov.w	r3, #4294967295
    2a16:	482d      	ldr	r0, [pc, #180]	; (2acc <usb_enable+0xc4>)
    2a18:	f007 fdd4 	bl	a5c4 <z_impl_k_mutex_lock>
	if (usb_dev.enabled == true) {
    2a1c:	4b2c      	ldr	r3, [pc, #176]	; (2ad0 <usb_enable+0xc8>)
    2a1e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    2a22:	2b00      	cmp	r3, #0
    2a24:	d14a      	bne.n	2abc <usb_enable+0xb4>
	ret = usb_vbus_set(true);
    2a26:	2001      	movs	r0, #1
    2a28:	f00a fa78 	bl	cf1c <usb_vbus_set>
	if (ret < 0) {
    2a2c:	1e04      	subs	r4, r0, #0
    2a2e:	db46      	blt.n	2abe <usb_enable+0xb6>
	usb_dev.user_status_callback = status_cb;
    2a30:	4b27      	ldr	r3, [pc, #156]	; (2ad0 <usb_enable+0xc8>)
    2a32:	621d      	str	r5, [r3, #32]
	usb_register_status_callback(forward_status_cb);
    2a34:	4c27      	ldr	r4, [pc, #156]	; (2ad4 <usb_enable+0xcc>)
    2a36:	4620      	mov	r0, r4
    2a38:	f7ff fc14 	bl	2264 <usb_register_status_callback>
	usb_dc_set_status_callback(forward_status_cb);
    2a3c:	4620      	mov	r0, r4
    2a3e:	f003 fc51 	bl	62e4 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    2a42:	f003 f885 	bl	5b50 <usb_dc_attach>
	if (ret < 0) {
    2a46:	1e04      	subs	r4, r0, #0
    2a48:	db39      	blt.n	2abe <usb_enable+0xb6>
	ret = usb_transfer_init();
    2a4a:	f000 fba9 	bl	31a0 <usb_transfer_init>
	if (ret < 0) {
    2a4e:	1e04      	subs	r4, r0, #0
    2a50:	db35      	blt.n	2abe <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    2a52:	2340      	movs	r3, #64	; 0x40
    2a54:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    2a58:	2300      	movs	r3, #0
    2a5a:	f88d 3004 	strb.w	r3, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    2a5e:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    2a62:	4668      	mov	r0, sp
    2a64:	f003 f912 	bl	5c8c <usb_dc_ep_configure>
	if (ret < 0) {
    2a68:	1e04      	subs	r4, r0, #0
    2a6a:	db28      	blt.n	2abe <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    2a6c:	2380      	movs	r3, #128	; 0x80
    2a6e:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    2a72:	4668      	mov	r0, sp
    2a74:	f003 f90a 	bl	5c8c <usb_dc_ep_configure>
	if (ret < 0) {
    2a78:	1e04      	subs	r4, r0, #0
    2a7a:	db20      	blt.n	2abe <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    2a7c:	4916      	ldr	r1, [pc, #88]	; (2ad8 <usb_enable+0xd0>)
    2a7e:	2000      	movs	r0, #0
    2a80:	f003 fc1c 	bl	62bc <usb_dc_ep_set_callback>
	if (ret < 0) {
    2a84:	1e04      	subs	r4, r0, #0
    2a86:	db1a      	blt.n	2abe <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    2a88:	4913      	ldr	r1, [pc, #76]	; (2ad8 <usb_enable+0xd0>)
    2a8a:	2080      	movs	r0, #128	; 0x80
    2a8c:	f003 fc16 	bl	62bc <usb_dc_ep_set_callback>
	if (ret < 0) {
    2a90:	1e04      	subs	r4, r0, #0
    2a92:	db14      	blt.n	2abe <usb_enable+0xb6>
	ret = composite_setup_ep_cb();
    2a94:	f7ff fe38 	bl	2708 <composite_setup_ep_cb>
	if (ret < 0) {
    2a98:	1e04      	subs	r4, r0, #0
    2a9a:	db10      	blt.n	2abe <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    2a9c:	2000      	movs	r0, #0
    2a9e:	f003 f9c3 	bl	5e28 <usb_dc_ep_enable>
	if (ret < 0) {
    2aa2:	1e04      	subs	r4, r0, #0
    2aa4:	db0b      	blt.n	2abe <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    2aa6:	2080      	movs	r0, #128	; 0x80
    2aa8:	f003 f9be 	bl	5e28 <usb_dc_ep_enable>
	if (ret < 0) {
    2aac:	1e04      	subs	r4, r0, #0
    2aae:	db06      	blt.n	2abe <usb_enable+0xb6>
	usb_dev.enabled = true;
    2ab0:	4b07      	ldr	r3, [pc, #28]	; (2ad0 <usb_enable+0xc8>)
    2ab2:	2201      	movs	r2, #1
    2ab4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	ret = 0;
    2ab8:	2400      	movs	r4, #0
    2aba:	e000      	b.n	2abe <usb_enable+0xb6>
		ret = 0;
    2abc:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    2abe:	4803      	ldr	r0, [pc, #12]	; (2acc <usb_enable+0xc4>)
    2ac0:	f007 fe0a 	bl	a6d8 <z_impl_k_mutex_unlock>
}
    2ac4:	4620      	mov	r0, r4
    2ac6:	b003      	add	sp, #12
    2ac8:	bd30      	pop	{r4, r5, pc}
    2aca:	bf00      	nop
    2acc:	200003c4 	.word	0x200003c4
    2ad0:	20000bac 	.word	0x20000bac
    2ad4:	00002749 	.word	0x00002749
    2ad8:	00002815 	.word	0x00002815

00002adc <usb_get_cfg_data>:
 * The interface descriptor of a USB function must be assigned to the
 * usb_cfg_data so that usb_ep_cfg_data and matching endpoint descriptor
 * can be found.
 */
static struct usb_cfg_data *usb_get_cfg_data(struct usb_if_descriptor *iface)
{
    2adc:	4602      	mov	r2, r0
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2ade:	4805      	ldr	r0, [pc, #20]	; (2af4 <usb_get_cfg_data+0x18>)
    2ae0:	4b05      	ldr	r3, [pc, #20]	; (2af8 <usb_get_cfg_data+0x1c>)
    2ae2:	4298      	cmp	r0, r3
    2ae4:	d204      	bcs.n	2af0 <usb_get_cfg_data+0x14>
		if (cfg_data->interface_descriptor == iface) {
    2ae6:	6843      	ldr	r3, [r0, #4]
    2ae8:	4293      	cmp	r3, r2
    2aea:	d002      	beq.n	2af2 <usb_get_cfg_data+0x16>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2aec:	3024      	adds	r0, #36	; 0x24
    2aee:	e7f7      	b.n	2ae0 <usb_get_cfg_data+0x4>
			return cfg_data;
		}
	}

	return NULL;
    2af0:	2000      	movs	r0, #0
}
    2af2:	4770      	bx	lr
    2af4:	20000510 	.word	0x20000510
    2af8:	20000558 	.word	0x20000558

00002afc <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    2afc:	b530      	push	{r4, r5, lr}
    2afe:	b08b      	sub	sp, #44	; 0x2c
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    2b00:	ac01      	add	r4, sp, #4
    2b02:	4d1b      	ldr	r5, [pc, #108]	; (2b70 <usb_update_sn_string_descriptor+0x74>)
    2b04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2b08:	682b      	ldr	r3, [r5, #0]
    2b0a:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    2b0c:	2210      	movs	r2, #16
    2b0e:	2100      	movs	r1, #0
    2b10:	a806      	add	r0, sp, #24
    2b12:	f00a fd81 	bl	d618 <memset>
	memset(sn, 0, sizeof(sn));
    2b16:	2212      	movs	r2, #18
    2b18:	2100      	movs	r1, #0
    2b1a:	4816      	ldr	r0, [pc, #88]	; (2b74 <usb_update_sn_string_descriptor+0x78>)
    2b1c:	f00a fd7c 	bl	d618 <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    2b20:	2110      	movs	r1, #16
    2b22:	a806      	add	r0, sp, #24
    2b24:	f00a ffb3 	bl	da8e <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    2b28:	2800      	cmp	r0, #0
    2b2a:	dd1d      	ble.n	2b68 <usb_update_sn_string_descriptor+0x6c>
		skip = MAX(0, hwlen - usblen);
    2b2c:	3808      	subs	r0, #8
    2b2e:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    2b32:	2200      	movs	r2, #0
    2b34:	e016      	b.n	2b64 <usb_update_sn_string_descriptor+0x68>
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2b36:	18a3      	adds	r3, r4, r2
    2b38:	a90a      	add	r1, sp, #40	; 0x28
    2b3a:	440b      	add	r3, r1
    2b3c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    2b40:	0051      	lsls	r1, r2, #1
    2b42:	a80a      	add	r0, sp, #40	; 0x28
    2b44:	eb00 1013 	add.w	r0, r0, r3, lsr #4
    2b48:	f810 5c24 	ldrb.w	r5, [r0, #-36]
    2b4c:	4809      	ldr	r0, [pc, #36]	; (2b74 <usb_update_sn_string_descriptor+0x78>)
    2b4e:	f800 5012 	strb.w	r5, [r0, r2, lsl #1]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2b52:	f003 030f 	and.w	r3, r3, #15
    2b56:	3101      	adds	r1, #1
    2b58:	ad0a      	add	r5, sp, #40	; 0x28
    2b5a:	442b      	add	r3, r5
    2b5c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
    2b60:	5443      	strb	r3, [r0, r1]
		for (int i = 0; i < usblen; i++) {
    2b62:	3201      	adds	r2, #1
    2b64:	2a07      	cmp	r2, #7
    2b66:	dde6      	ble.n	2b36 <usb_update_sn_string_descriptor+0x3a>
		}
	}

	return sn;
}
    2b68:	4802      	ldr	r0, [pc, #8]	; (2b74 <usb_update_sn_string_descriptor+0x78>)
    2b6a:	b00b      	add	sp, #44	; 0x2c
    2b6c:	bd30      	pop	{r4, r5, pc}
    2b6e:	bf00      	nop
    2b70:	0000f304 	.word	0x0000f304
    2b74:	20000c70 	.word	0x20000c70

00002b78 <usb_fix_ascii_sn_string_descriptor>:

static void usb_fix_ascii_sn_string_descriptor(struct usb_sn_descriptor *sn)
{
    2b78:	b570      	push	{r4, r5, r6, lr}
    2b7a:	4604      	mov	r4, r0
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    2b7c:	f7ff ffbe 	bl	2afc <usb_update_sn_string_descriptor>
	int runtime_sn_len, default_sn_len;

	if (!runtime_sn) {
    2b80:	b120      	cbz	r0, 2b8c <usb_fix_ascii_sn_string_descriptor+0x14>
    2b82:	4605      	mov	r5, r0
		return;
	}

	runtime_sn_len = strlen(runtime_sn);
    2b84:	f00a fd12 	bl	d5ac <strlen>
	if (!runtime_sn_len) {
    2b88:	4606      	mov	r6, r0
    2b8a:	b900      	cbnz	r0, 2b8e <usb_fix_ascii_sn_string_descriptor+0x16>
			"length as CONFIG_USB_DEVICE_SN");
		return;
	}

	memcpy(sn->bString, runtime_sn, runtime_sn_len);
}
    2b8c:	bd70      	pop	{r4, r5, r6, pc}
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    2b8e:	480e      	ldr	r0, [pc, #56]	; (2bc8 <usb_fix_ascii_sn_string_descriptor+0x50>)
    2b90:	f00a fd0c 	bl	d5ac <strlen>
	if (runtime_sn_len != default_sn_len) {
    2b94:	4286      	cmp	r6, r0
    2b96:	d010      	beq.n	2bba <usb_fix_ascii_sn_string_descriptor+0x42>
    2b98:	4b0c      	ldr	r3, [pc, #48]	; (2bcc <usb_fix_ascii_sn_string_descriptor+0x54>)
    2b9a:	4a0d      	ldr	r2, [pc, #52]	; (2bd0 <usb_fix_ascii_sn_string_descriptor+0x58>)
    2b9c:	1a9b      	subs	r3, r3, r2
    2b9e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("the new SN descriptor doesn't have the same "
    2ba0:	f04f 0100 	mov.w	r1, #0
    2ba4:	2201      	movs	r2, #1
    2ba6:	f362 0102 	bfi	r1, r2, #0, #3
    2baa:	f36f 01c5 	bfc	r1, #3, #3
    2bae:	f363 118f 	bfi	r1, r3, #6, #10
    2bb2:	4808      	ldr	r0, [pc, #32]	; (2bd4 <usb_fix_ascii_sn_string_descriptor+0x5c>)
    2bb4:	f7fe ff08 	bl	19c8 <log_0>
		return;
    2bb8:	e7e8      	b.n	2b8c <usb_fix_ascii_sn_string_descriptor+0x14>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    2bba:	4632      	mov	r2, r6
    2bbc:	4629      	mov	r1, r5
    2bbe:	1ca0      	adds	r0, r4, #2
    2bc0:	f00a fd06 	bl	d5d0 <memcpy>
    2bc4:	e7e2      	b.n	2b8c <usb_fix_ascii_sn_string_descriptor+0x14>
    2bc6:	bf00      	nop
    2bc8:	0000f304 	.word	0x0000f304
    2bcc:	0000ef54 	.word	0x0000ef54
    2bd0:	0000eefc 	.word	0x0000eefc
    2bd4:	0000f318 	.word	0x0000f318

00002bd8 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    2bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2bdc:	b082      	sub	sp, #8
    2bde:	4604      	mov	r4, r0
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
	uint32_t requested_ep = BIT(16) | BIT(0);
    2be0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2be4:	9301      	str	r3, [sp, #4]
	uint8_t str_descr_idx = 0U;
    2be6:	2500      	movs	r5, #0
	uint8_t numof_ifaces = 0U;
    2be8:	462f      	mov	r7, r5
	struct usb_cfg_data *cfg_data = NULL;
    2bea:	46a8      	mov	r8, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
    2bec:	462e      	mov	r6, r5

	while (head->bLength != 0U) {
    2bee:	e062      	b.n	2cb6 <usb_fix_descriptor+0xde>
			LOG_DBG("Association descriptor %p", head);
			break;
		case USB_DESC_INTERFACE:
			if_descr = (struct usb_if_descriptor *)head;
			LOG_DBG("Interface descriptor %p", head);
			if (if_descr->bAlternateSetting) {
    2bf0:	78e3      	ldrb	r3, [r4, #3]
    2bf2:	2b00      	cmp	r3, #0
    2bf4:	d15d      	bne.n	2cb2 <usb_fix_descriptor+0xda>
				LOG_DBG("Skip alternate interface");
				break;
			}

			if (if_descr->bInterfaceNumber == 0U) {
    2bf6:	78a3      	ldrb	r3, [r4, #2]
    2bf8:	b94b      	cbnz	r3, 2c0e <usb_fix_descriptor+0x36>
				cfg_data = usb_get_cfg_data(if_descr);
    2bfa:	4620      	mov	r0, r4
    2bfc:	f7ff ff6e 	bl	2adc <usb_get_cfg_data>
				if (!cfg_data) {
    2c00:	4680      	mov	r8, r0
    2c02:	b138      	cbz	r0, 2c14 <usb_fix_descriptor+0x3c>
					LOG_ERR("There is no usb_cfg_data "
						"for %p", head);
					return -1;
				}

				if (cfg_data->interface_config) {
    2c04:	6883      	ldr	r3, [r0, #8]
    2c06:	b113      	cbz	r3, 2c0e <usb_fix_descriptor+0x36>
					cfg_data->interface_config(head,
    2c08:	4639      	mov	r1, r7
    2c0a:	4620      	mov	r0, r4
    2c0c:	4798      	blx	r3
							numof_ifaces);
				}
			}

			numof_ifaces++;
    2c0e:	3701      	adds	r7, #1
    2c10:	b2ff      	uxtb	r7, r7
			break;
    2c12:	e04e      	b.n	2cb2 <usb_fix_descriptor+0xda>
    2c14:	4b46      	ldr	r3, [pc, #280]	; (2d30 <usb_fix_descriptor+0x158>)
    2c16:	4a47      	ldr	r2, [pc, #284]	; (2d34 <usb_fix_descriptor+0x15c>)
    2c18:	1a9b      	subs	r3, r3, r2
    2c1a:	08db      	lsrs	r3, r3, #3
					LOG_ERR("There is no usb_cfg_data "
    2c1c:	f04f 0200 	mov.w	r2, #0
    2c20:	2101      	movs	r1, #1
    2c22:	f361 0202 	bfi	r2, r1, #0, #3
    2c26:	f36f 02c5 	bfc	r2, #3, #3
    2c2a:	f363 128f 	bfi	r2, r3, #6, #10
    2c2e:	4621      	mov	r1, r4
    2c30:	4841      	ldr	r0, [pc, #260]	; (2d38 <usb_fix_descriptor+0x160>)
    2c32:	f7fe fe57 	bl	18e4 <log_1>
					return -1;
    2c36:	f04f 30ff 	mov.w	r0, #4294967295
    2c3a:	e073      	b.n	2d24 <usb_fix_descriptor+0x14c>
		case USB_DESC_ENDPOINT:
			if (!cfg_data) {
    2c3c:	f1b8 0f00 	cmp.w	r8, #0
    2c40:	d018      	beq.n	2c74 <usb_fix_descriptor+0x9c>
				return -1;
			}

			LOG_DBG("Endpoint descriptor %p", head);
			ep_descr = (struct usb_ep_descriptor *)head;
			if (usb_validate_ep_cfg_data(ep_descr,
    2c42:	aa01      	add	r2, sp, #4
    2c44:	4641      	mov	r1, r8
    2c46:	4620      	mov	r0, r4
    2c48:	f00a fa16 	bl	d078 <usb_validate_ep_cfg_data>
    2c4c:	b388      	cbz	r0, 2cb2 <usb_fix_descriptor+0xda>
    2c4e:	4b38      	ldr	r3, [pc, #224]	; (2d30 <usb_fix_descriptor+0x158>)
    2c50:	4a38      	ldr	r2, [pc, #224]	; (2d34 <usb_fix_descriptor+0x15c>)
    2c52:	1a9b      	subs	r3, r3, r2
    2c54:	08db      	lsrs	r3, r3, #3
						     cfg_data,
						     &requested_ep)) {
				LOG_ERR("Failed to validate endpoints");
    2c56:	f04f 0100 	mov.w	r1, #0
    2c5a:	2201      	movs	r2, #1
    2c5c:	f362 0102 	bfi	r1, r2, #0, #3
    2c60:	f36f 01c5 	bfc	r1, #3, #3
    2c64:	f363 118f 	bfi	r1, r3, #6, #10
    2c68:	4834      	ldr	r0, [pc, #208]	; (2d3c <usb_fix_descriptor+0x164>)
    2c6a:	f7fe fead 	bl	19c8 <log_0>
				return -1;
    2c6e:	f04f 30ff 	mov.w	r0, #4294967295
    2c72:	e057      	b.n	2d24 <usb_fix_descriptor+0x14c>
    2c74:	4b2e      	ldr	r3, [pc, #184]	; (2d30 <usb_fix_descriptor+0x158>)
    2c76:	4a2f      	ldr	r2, [pc, #188]	; (2d34 <usb_fix_descriptor+0x15c>)
    2c78:	1a9b      	subs	r3, r3, r2
    2c7a:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    2c7c:	f04f 0100 	mov.w	r1, #0
    2c80:	2201      	movs	r2, #1
    2c82:	f362 0102 	bfi	r1, r2, #0, #3
    2c86:	f36f 01c5 	bfc	r1, #3, #3
    2c8a:	f363 118f 	bfi	r1, r3, #6, #10
    2c8e:	482c      	ldr	r0, [pc, #176]	; (2d40 <usb_fix_descriptor+0x168>)
    2c90:	f7fe fe9a 	bl	19c8 <log_0>
				return -1;
    2c94:	f04f 30ff 	mov.w	r0, #4294967295
    2c98:	e044      	b.n	2d24 <usb_fix_descriptor+0x14c>
		case 0:
		case USB_DESC_STRING:
			/*
			 * Copy runtime SN string descriptor first, if has
			 */
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    2c9a:	2d03      	cmp	r5, #3
    2c9c:	d020      	beq.n	2ce0 <usb_fix_descriptor+0x108>
			}
			/*
			 * Skip language descriptor but correct
			 * wTotalLength and bNumInterfaces once.
			 */
			if (str_descr_idx) {
    2c9e:	bb1d      	cbnz	r5, 2ce8 <usb_fix_descriptor+0x110>
				ascii7_to_utf16le(head);
			} else {
				if (!cfg_descr) {
    2ca0:	b336      	cbz	r6, 2cf0 <usb_fix_descriptor+0x118>
					return -1;
				}

				LOG_DBG("Now the wTotalLength is %zd",
					(uint8_t *)head - (uint8_t *)cfg_descr);
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    2ca2:	1ba3      	subs	r3, r4, r6
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    2ca4:	70b3      	strb	r3, [r6, #2]
	dst[1] = val >> 8;
    2ca6:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2caa:	70f3      	strb	r3, [r6, #3]
					     (uint8_t *)&cfg_descr->wTotalLength);
				cfg_descr->bNumInterfaces = numof_ifaces;
    2cac:	7137      	strb	r7, [r6, #4]
			}

			str_descr_idx += 1U;
    2cae:	3501      	adds	r5, #1
    2cb0:	b2ed      	uxtb	r5, r5
		default:
			break;
		}

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    2cb2:	7823      	ldrb	r3, [r4, #0]
    2cb4:	441c      	add	r4, r3
	while (head->bLength != 0U) {
    2cb6:	7823      	ldrb	r3, [r4, #0]
    2cb8:	b37b      	cbz	r3, 2d1a <usb_fix_descriptor+0x142>
		switch (head->bDescriptorType) {
    2cba:	7863      	ldrb	r3, [r4, #1]
    2cbc:	2b05      	cmp	r3, #5
    2cbe:	d8f8      	bhi.n	2cb2 <usb_fix_descriptor+0xda>
    2cc0:	a201      	add	r2, pc, #4	; (adr r2, 2cc8 <usb_fix_descriptor+0xf0>)
    2cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2cc6:	bf00      	nop
    2cc8:	00002c9b 	.word	0x00002c9b
    2ccc:	00002cb3 	.word	0x00002cb3
    2cd0:	00002d17 	.word	0x00002d17
    2cd4:	00002c9b 	.word	0x00002c9b
    2cd8:	00002bf1 	.word	0x00002bf1
    2cdc:	00002c3d 	.word	0x00002c3d
				usb_fix_ascii_sn_string_descriptor(sn);
    2ce0:	4620      	mov	r0, r4
    2ce2:	f7ff ff49 	bl	2b78 <usb_fix_ascii_sn_string_descriptor>
    2ce6:	e7da      	b.n	2c9e <usb_fix_descriptor+0xc6>
				ascii7_to_utf16le(head);
    2ce8:	4620      	mov	r0, r4
    2cea:	f00a f9b1 	bl	d050 <ascii7_to_utf16le>
    2cee:	e7de      	b.n	2cae <usb_fix_descriptor+0xd6>
    2cf0:	4b0f      	ldr	r3, [pc, #60]	; (2d30 <usb_fix_descriptor+0x158>)
    2cf2:	4a10      	ldr	r2, [pc, #64]	; (2d34 <usb_fix_descriptor+0x15c>)
    2cf4:	1a9b      	subs	r3, r3, r2
    2cf6:	08db      	lsrs	r3, r3, #3
					LOG_ERR("Incomplete device descriptor");
    2cf8:	f04f 0100 	mov.w	r1, #0
    2cfc:	2201      	movs	r2, #1
    2cfe:	f362 0102 	bfi	r1, r2, #0, #3
    2d02:	f36f 01c5 	bfc	r1, #3, #3
    2d06:	f363 118f 	bfi	r1, r3, #6, #10
    2d0a:	480e      	ldr	r0, [pc, #56]	; (2d44 <usb_fix_descriptor+0x16c>)
    2d0c:	f7fe fe5c 	bl	19c8 <log_0>
					return -1;
    2d10:	f04f 30ff 	mov.w	r0, #4294967295
    2d14:	e006      	b.n	2d24 <usb_fix_descriptor+0x14c>
			cfg_descr = (struct usb_cfg_descriptor *)head;
    2d16:	4626      	mov	r6, r4
    2d18:	e7cb      	b.n	2cb2 <usb_fix_descriptor+0xda>
	}

	if ((head + 1) != __usb_descriptor_end) {
    2d1a:	1ca0      	adds	r0, r4, #2
    2d1c:	4b0a      	ldr	r3, [pc, #40]	; (2d48 <usb_fix_descriptor+0x170>)
    2d1e:	4298      	cmp	r0, r3
    2d20:	d103      	bne.n	2d2a <usb_fix_descriptor+0x152>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
    2d22:	2000      	movs	r0, #0
}
    2d24:	b002      	add	sp, #8
    2d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return usb_fix_descriptor(head + 1);
    2d2a:	f7ff ff55 	bl	2bd8 <usb_fix_descriptor>
    2d2e:	e7f9      	b.n	2d24 <usb_fix_descriptor+0x14c>
    2d30:	0000ef54 	.word	0x0000ef54
    2d34:	0000eefc 	.word	0x0000eefc
    2d38:	0000f364 	.word	0x0000f364
    2d3c:	0000f3c8 	.word	0x0000f3c8
    2d40:	0000f384 	.word	0x0000f384
    2d44:	0000f3e8 	.word	0x0000f3e8
    2d48:	2000050d 	.word	0x2000050d

00002d4c <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    2d4c:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    2d4e:	480c      	ldr	r0, [pc, #48]	; (2d80 <usb_get_device_descriptor+0x34>)
    2d50:	f7ff ff42 	bl	2bd8 <usb_fix_descriptor>
    2d54:	b908      	cbnz	r0, 2d5a <usb_get_device_descriptor+0xe>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    2d56:	480a      	ldr	r0, [pc, #40]	; (2d80 <usb_get_device_descriptor+0x34>)
}
    2d58:	bd08      	pop	{r3, pc}
    2d5a:	4b0a      	ldr	r3, [pc, #40]	; (2d84 <usb_get_device_descriptor+0x38>)
    2d5c:	4a0a      	ldr	r2, [pc, #40]	; (2d88 <usb_get_device_descriptor+0x3c>)
    2d5e:	1a9b      	subs	r3, r3, r2
    2d60:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to fixup USB descriptor");
    2d62:	f04f 0100 	mov.w	r1, #0
    2d66:	2201      	movs	r2, #1
    2d68:	f362 0102 	bfi	r1, r2, #0, #3
    2d6c:	f36f 01c5 	bfc	r1, #3, #3
    2d70:	f363 118f 	bfi	r1, r3, #6, #10
    2d74:	4805      	ldr	r0, [pc, #20]	; (2d8c <usb_get_device_descriptor+0x40>)
    2d76:	f7fe fe27 	bl	19c8 <log_0>
		return NULL;
    2d7a:	2000      	movs	r0, #0
    2d7c:	e7ec      	b.n	2d58 <usb_get_device_descriptor+0xc>
    2d7e:	bf00      	nop
    2d80:	200003f8 	.word	0x200003f8
    2d84:	0000ef54 	.word	0x0000ef54
    2d88:	0000eefc 	.word	0x0000eefc
    2d8c:	0000f408 	.word	0x0000f408

00002d90 <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2d90:	2300      	movs	r3, #0
    2d92:	e000      	b.n	2d96 <usb_ep_get_transfer+0x6>
    2d94:	3301      	adds	r3, #1
    2d96:	2b03      	cmp	r3, #3
    2d98:	dc0c      	bgt.n	2db4 <usb_ep_get_transfer+0x24>
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    2d9a:	019a      	lsls	r2, r3, #6
    2d9c:	4906      	ldr	r1, [pc, #24]	; (2db8 <usb_ep_get_transfer+0x28>)
    2d9e:	5c8a      	ldrb	r2, [r1, r2]
    2da0:	4282      	cmp	r2, r0
    2da2:	d1f7      	bne.n	2d94 <usb_ep_get_transfer+0x4>
    2da4:	eb01 1283 	add.w	r2, r1, r3, lsl #6
    2da8:	6852      	ldr	r2, [r2, #4]
    2daa:	2a00      	cmp	r2, #0
    2dac:	d0f2      	beq.n	2d94 <usb_ep_get_transfer+0x4>
			return &ut_data[i];
    2dae:	eb01 1083 	add.w	r0, r1, r3, lsl #6
    2db2:	4770      	bx	lr
		}
	}

	return NULL;
    2db4:	2000      	movs	r0, #0
}
    2db6:	4770      	bx	lr
    2db8:	20000c84 	.word	0x20000c84

00002dbc <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    2dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2dc0:	b082      	sub	sp, #8
    2dc2:	4604      	mov	r4, r0
	int ret = 0;
	uint32_t bytes;
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;
    2dc4:	f810 5c2c 	ldrb.w	r5, [r0, #-44]

	if (trans->status != -EBUSY) {
    2dc8:	f850 3c28 	ldr.w	r3, [r0, #-40]
    2dcc:	f113 0f10 	cmn.w	r3, #16
    2dd0:	d10c      	bne.n	2dec <usb_transfer_work+0x30>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    2dd2:	6903      	ldr	r3, [r0, #16]
    2dd4:	f013 0f02 	tst.w	r3, #2
    2dd8:	d062      	beq.n	2ea0 <usb_transfer_work+0xe4>
		if (!trans->bsize) {
    2dda:	f850 2c20 	ldr.w	r2, [r0, #-32]
    2dde:	bb82      	cbnz	r2, 2e42 <usb_transfer_work+0x86>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    2de0:	f013 0f04 	tst.w	r3, #4
    2de4:	d026      	beq.n	2e34 <usb_transfer_work+0x78>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
			}
			trans->status = 0;
    2de6:	2300      	movs	r3, #0
    2de8:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    2dec:	f854 3c28 	ldr.w	r3, [r4, #-40]
    2df0:	f113 0f10 	cmn.w	r3, #16
    2df4:	d01b      	beq.n	2e2e <usb_transfer_work+0x72>
    2df6:	f854 6c18 	ldr.w	r6, [r4, #-24]
    2dfa:	b1c6      	cbz	r6, 2e2e <usb_transfer_work+0x72>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    2dfc:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
    2e00:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
    2e04:	f00b fa9e 	bl	e344 <k_is_in_isr>
    2e08:	2800      	cmp	r0, #0
    2e0a:	f040 808f 	bne.w	2f2c <usb_transfer_work+0x170>
		}

		LOG_DBG("Transfer done, ep 0x%02x, status %d, size %zu",
			trans->ep, trans->status, trans->tsize);

		trans->cb = NULL;
    2e0e:	2300      	movs	r3, #0
    2e10:	f844 3c18 	str.w	r3, [r4, #-24]
		k_sem_give(&trans->sem);
    2e14:	f1a4 0010 	sub.w	r0, r4, #16
	z_impl_k_sem_give(sem);
    2e18:	f007 fcde 	bl	a7d8 <z_impl_k_sem_give>

		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
    2e1c:	f854 3c28 	ldr.w	r3, [r4, #-40]
    2e20:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
    2e24:	d003      	beq.n	2e2e <usb_transfer_work+0x72>
			cb(ep, tsize, priv);
    2e26:	4642      	mov	r2, r8
    2e28:	4639      	mov	r1, r7
    2e2a:	4628      	mov	r0, r5
    2e2c:	47b0      	blx	r6
		}
	}
}
    2e2e:	b002      	add	sp, #8
    2e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_write(ep, NULL, 0, NULL);
    2e34:	2300      	movs	r3, #0
    2e36:	461a      	mov	r2, r3
    2e38:	4619      	mov	r1, r3
    2e3a:	4628      	mov	r0, r5
    2e3c:	f00a f8e9 	bl	d012 <usb_write>
    2e40:	e7d1      	b.n	2de6 <usb_transfer_work+0x2a>
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    2e42:	ab01      	add	r3, sp, #4
    2e44:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2e48:	4628      	mov	r0, r5
    2e4a:	f00a f8e2 	bl	d012 <usb_write>
		if (ret) {
    2e4e:	4601      	mov	r1, r0
    2e50:	b980      	cbnz	r0, 2e74 <usb_transfer_work+0xb8>
		trans->buffer += bytes;
    2e52:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2e56:	9a01      	ldr	r2, [sp, #4]
    2e58:	4413      	add	r3, r2
    2e5a:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    2e5e:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2e62:	1a9b      	subs	r3, r3, r2
    2e64:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2e68:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2e6c:	4413      	add	r3, r2
    2e6e:	f844 3c1c 	str.w	r3, [r4, #-28]
    2e72:	e7bb      	b.n	2dec <usb_transfer_work+0x30>
    2e74:	4a30      	ldr	r2, [pc, #192]	; (2f38 <usb_transfer_work+0x17c>)
    2e76:	4b31      	ldr	r3, [pc, #196]	; (2f3c <usb_transfer_work+0x180>)
    2e78:	1ad2      	subs	r2, r2, r3
    2e7a:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    2e7c:	f04f 0300 	mov.w	r3, #0
    2e80:	2001      	movs	r0, #1
    2e82:	f360 0302 	bfi	r3, r0, #0, #3
    2e86:	f36f 03c5 	bfc	r3, #3, #3
    2e8a:	f362 138f 	bfi	r3, r2, #6, #10
    2e8e:	462a      	mov	r2, r5
    2e90:	482b      	ldr	r0, [pc, #172]	; (2f40 <usb_transfer_work+0x184>)
    2e92:	f7fe fd5d 	bl	1950 <log_2>
			trans->status = -EINVAL;
    2e96:	f06f 0315 	mvn.w	r3, #21
    2e9a:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    2e9e:	e7a5      	b.n	2dec <usb_transfer_work+0x30>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    2ea0:	ab01      	add	r3, sp, #4
    2ea2:	f850 2c20 	ldr.w	r2, [r0, #-32]
    2ea6:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2eaa:	4628      	mov	r0, r5
    2eac:	f003 f8c4 	bl	6038 <usb_dc_ep_read_wait>
		if (ret) {
    2eb0:	4601      	mov	r1, r0
    2eb2:	b9a0      	cbnz	r0, 2ede <usb_transfer_work+0x122>
		trans->buffer += bytes;
    2eb4:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2eb8:	9e01      	ldr	r6, [sp, #4]
    2eba:	4433      	add	r3, r6
    2ebc:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    2ec0:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2ec4:	1b9b      	subs	r3, r3, r6
    2ec6:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2eca:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2ece:	4433      	add	r3, r6
    2ed0:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    2ed4:	b9ce      	cbnz	r6, 2f0a <usb_transfer_work+0x14e>
			trans->status = 0;
    2ed6:	2300      	movs	r3, #0
    2ed8:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    2edc:	e786      	b.n	2dec <usb_transfer_work+0x30>
    2ede:	4a16      	ldr	r2, [pc, #88]	; (2f38 <usb_transfer_work+0x17c>)
    2ee0:	4b16      	ldr	r3, [pc, #88]	; (2f3c <usb_transfer_work+0x180>)
    2ee2:	1ad2      	subs	r2, r2, r3
    2ee4:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    2ee6:	f04f 0300 	mov.w	r3, #0
    2eea:	2001      	movs	r0, #1
    2eec:	f360 0302 	bfi	r3, r0, #0, #3
    2ef0:	f36f 03c5 	bfc	r3, #3, #3
    2ef4:	f362 138f 	bfi	r3, r2, #6, #10
    2ef8:	462a      	mov	r2, r5
    2efa:	4811      	ldr	r0, [pc, #68]	; (2f40 <usb_transfer_work+0x184>)
    2efc:	f7fe fd28 	bl	1950 <log_2>
			trans->status = -EINVAL;
    2f00:	f06f 0315 	mvn.w	r3, #21
    2f04:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    2f08:	e770      	b.n	2dec <usb_transfer_work+0x30>
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    2f0a:	4628      	mov	r0, r5
    2f0c:	f003 f9f0 	bl	62f0 <usb_dc_ep_mps>
    2f10:	fbb6 f3f0 	udiv	r3, r6, r0
    2f14:	fb00 6013 	mls	r0, r0, r3, r6
    2f18:	2800      	cmp	r0, #0
    2f1a:	d1dc      	bne.n	2ed6 <usb_transfer_work+0x11a>
    2f1c:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2f20:	2b00      	cmp	r3, #0
    2f22:	d0d8      	beq.n	2ed6 <usb_transfer_work+0x11a>
		usb_dc_ep_read_continue(ep);
    2f24:	4628      	mov	r0, r5
    2f26:	f003 f901 	bl	612c <usb_dc_ep_read_continue>
    2f2a:	e75f      	b.n	2dec <usb_transfer_work+0x30>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2f2c:	4621      	mov	r1, r4
    2f2e:	4805      	ldr	r0, [pc, #20]	; (2f44 <usb_transfer_work+0x188>)
    2f30:	f00b fb02 	bl	e538 <k_work_submit_to_queue>
			return;
    2f34:	e77b      	b.n	2e2e <usb_transfer_work+0x72>
    2f36:	bf00      	nop
    2f38:	0000ef6c 	.word	0x0000ef6c
    2f3c:	0000eefc 	.word	0x0000eefc
    2f40:	0000f438 	.word	0x0000f438
    2f44:	20000640 	.word	0x20000640

00002f48 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
    2f48:	b570      	push	{r4, r5, r6, lr}
    2f4a:	b082      	sub	sp, #8
    2f4c:	4606      	mov	r6, r0
    2f4e:	460c      	mov	r4, r1
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    2f50:	f7ff ff1e 	bl	2d90 <usb_ep_get_transfer>

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    2f54:	1e63      	subs	r3, r4, #1
    2f56:	b2db      	uxtb	r3, r3
    2f58:	2b01      	cmp	r3, #1
    2f5a:	d80a      	bhi.n	2f72 <usb_transfer_ep_callback+0x2a>
    2f5c:	4605      	mov	r5, r0
		return;
	}

	if (!trans) {
    2f5e:	b150      	cbz	r0, 2f76 <usb_transfer_ep_callback+0x2e>
			LOG_ERR("RX data lost, no transfer");
		}
		return;
	}

	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    2f60:	f00b f9f0 	bl	e344 <k_is_in_isr>
    2f64:	b108      	cbz	r0, 2f6a <usb_transfer_ep_callback+0x22>
    2f66:	2c01      	cmp	r4, #1
    2f68:	d122      	bne.n	2fb0 <usb_transfer_ep_callback+0x68>
		/* If we are not in IRQ context, no need to defer work */
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
    2f6a:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    2f6e:	f7ff ff25 	bl	2dbc <usb_transfer_work>
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    2f72:	b002      	add	sp, #8
    2f74:	bd70      	pop	{r4, r5, r6, pc}
		if (status == USB_DC_EP_DATA_OUT) {
    2f76:	2c01      	cmp	r4, #1
    2f78:	d1fb      	bne.n	2f72 <usb_transfer_ep_callback+0x2a>
				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    2f7a:	ab01      	add	r3, sp, #4
    2f7c:	2201      	movs	r2, #1
    2f7e:	f10d 0103 	add.w	r1, sp, #3
    2f82:	4630      	mov	r0, r6
    2f84:	f003 f858 	bl	6038 <usb_dc_ep_read_wait>
			} while (bytes);
    2f88:	9b01      	ldr	r3, [sp, #4]
    2f8a:	2b00      	cmp	r3, #0
    2f8c:	d1f5      	bne.n	2f7a <usb_transfer_ep_callback+0x32>
    2f8e:	4b0b      	ldr	r3, [pc, #44]	; (2fbc <usb_transfer_ep_callback+0x74>)
    2f90:	4a0b      	ldr	r2, [pc, #44]	; (2fc0 <usb_transfer_ep_callback+0x78>)
    2f92:	1a9b      	subs	r3, r3, r2
    2f94:	08db      	lsrs	r3, r3, #3
			LOG_ERR("RX data lost, no transfer");
    2f96:	f04f 0100 	mov.w	r1, #0
    2f9a:	2201      	movs	r2, #1
    2f9c:	f362 0102 	bfi	r1, r2, #0, #3
    2fa0:	f36f 01c5 	bfc	r1, #3, #3
    2fa4:	f363 118f 	bfi	r1, r3, #6, #10
    2fa8:	4806      	ldr	r0, [pc, #24]	; (2fc4 <usb_transfer_ep_callback+0x7c>)
    2faa:	f7fe fd0d 	bl	19c8 <log_0>
		return;
    2fae:	e7e0      	b.n	2f72 <usb_transfer_ep_callback+0x2a>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2fb0:	f105 012c 	add.w	r1, r5, #44	; 0x2c
    2fb4:	4804      	ldr	r0, [pc, #16]	; (2fc8 <usb_transfer_ep_callback+0x80>)
    2fb6:	f00b fabf 	bl	e538 <k_work_submit_to_queue>
    2fba:	e7da      	b.n	2f72 <usb_transfer_ep_callback+0x2a>
    2fbc:	0000ef6c 	.word	0x0000ef6c
    2fc0:	0000eefc 	.word	0x0000eefc
    2fc4:	0000f458 	.word	0x0000f458
    2fc8:	20000640 	.word	0x20000640

00002fcc <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    2fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2fd0:	4605      	mov	r5, r0
    2fd2:	4688      	mov	r8, r1
    2fd4:	4617      	mov	r7, r2
    2fd6:	461e      	mov	r6, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    2fd8:	f00a f8f8 	bl	d1cc <usb_transfer_is_busy>
    2fdc:	2800      	cmp	r0, #0
    2fde:	f040 8083 	bne.w	30e8 <CONFIG_USB_DEVICE_VID+0x105>
	__asm__ volatile(
    2fe2:	f04f 0320 	mov.w	r3, #32
    2fe6:	f3ef 8911 	mrs	r9, BASEPRI
    2fea:	f383 8812 	msr	BASEPRI_MAX, r3
    2fee:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2ff2:	2400      	movs	r4, #0
    2ff4:	2c03      	cmp	r4, #3
    2ff6:	dc10      	bgt.n	301a <CONFIG_USB_DEVICE_VID+0x37>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    2ff8:	01a0      	lsls	r0, r4, #6
    2ffa:	f100 0318 	add.w	r3, r0, #24
    2ffe:	483c      	ldr	r0, [pc, #240]	; (30f0 <CONFIG_USB_DEVICE_VID+0x10d>)
    3000:	4418      	add	r0, r3
    3002:	3004      	adds	r0, #4
	return z_impl_k_sem_take(sem, timeout);
    3004:	2200      	movs	r2, #0
    3006:	2300      	movs	r3, #0
    3008:	f007 fc0a 	bl	a820 <z_impl_k_sem_take>
    300c:	b108      	cbz	r0, 3012 <CONFIG_USB_DEVICE_VID+0x2f>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    300e:	3401      	adds	r4, #1
    3010:	e7f0      	b.n	2ff4 <CONFIG_USB_DEVICE_VID+0x11>
			trans = &ut_data[i];
    3012:	4837      	ldr	r0, [pc, #220]	; (30f0 <CONFIG_USB_DEVICE_VID+0x10d>)
    3014:	eb00 1484 	add.w	r4, r0, r4, lsl #6
			break;
    3018:	e000      	b.n	301c <CONFIG_USB_DEVICE_VID+0x39>
	struct usb_transfer_data *trans = NULL;
    301a:	2400      	movs	r4, #0
		}
	}

	if (!trans) {
    301c:	b344      	cbz	r4, 3070 <CONFIG_USB_DEVICE_VID+0x8d>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    301e:	f8d4 a004 	ldr.w	sl, [r4, #4]
    3022:	f11a 0f10 	cmn.w	sl, #16
    3026:	d036      	beq.n	3096 <CONFIG_USB_DEVICE_VID+0xb3>
		ret = -EBUSY;
		goto done;
	}

	/* Configure new transfer */
	trans->ep = ep;
    3028:	7025      	strb	r5, [r4, #0]
	trans->buffer = data;
    302a:	f8c4 8008 	str.w	r8, [r4, #8]
	trans->bsize = dlen;
    302e:	60e7      	str	r7, [r4, #12]
	trans->tsize = 0;
    3030:	2300      	movs	r3, #0
    3032:	6123      	str	r3, [r4, #16]
	trans->cb = cb;
    3034:	9b08      	ldr	r3, [sp, #32]
    3036:	6163      	str	r3, [r4, #20]
	trans->flags = flags;
    3038:	63e6      	str	r6, [r4, #60]	; 0x3c
	trans->priv = cb_data;
    303a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    303c:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
    303e:	f06f 030f 	mvn.w	r3, #15
    3042:	6063      	str	r3, [r4, #4]

	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    3044:	4628      	mov	r0, r5
    3046:	f003 f953 	bl	62f0 <usb_dc_ep_mps>
    304a:	2800      	cmp	r0, #0
    304c:	d139      	bne.n	30c2 <CONFIG_USB_DEVICE_VID+0xdf>
		/* no need to send ZLP since last packet will be a short one */
		trans->flags |= USB_TRANS_NO_ZLP;
	}

	if (flags & USB_TRANS_WRITE) {
    304e:	f016 0f02 	tst.w	r6, #2
    3052:	d044      	beq.n	30de <CONFIG_USB_DEVICE_VID+0xfb>
		/* start writing first chunk */
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3054:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    3058:	4826      	ldr	r0, [pc, #152]	; (30f4 <CONFIG_USB_DEVICE_VID+0x111>)
    305a:	f00b fa6d 	bl	e538 <k_work_submit_to_queue>
	int i, key, ret = 0;
    305e:	f04f 0a00 	mov.w	sl, #0
	__asm__ volatile(
    3062:	f389 8811 	msr	BASEPRI, r9
    3066:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    306a:	4650      	mov	r0, sl
    306c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3070:	4b21      	ldr	r3, [pc, #132]	; (30f8 <CONFIG_USB_DEVICE_VID+0x115>)
    3072:	4a22      	ldr	r2, [pc, #136]	; (30fc <CONFIG_USB_DEVICE_VID+0x119>)
    3074:	1a9b      	subs	r3, r3, r2
    3076:	08db      	lsrs	r3, r3, #3
		LOG_ERR("No transfer slot available");
    3078:	f04f 0100 	mov.w	r1, #0
    307c:	2201      	movs	r2, #1
    307e:	f362 0102 	bfi	r1, r2, #0, #3
    3082:	f36f 01c5 	bfc	r1, #3, #3
    3086:	f363 118f 	bfi	r1, r3, #6, #10
    308a:	481d      	ldr	r0, [pc, #116]	; (3100 <CONFIG_USB_DEVICE_VID+0x11d>)
    308c:	f7fe fc9c 	bl	19c8 <log_0>
		ret = -ENOMEM;
    3090:	f06f 0a0b 	mvn.w	sl, #11
		goto done;
    3094:	e7e5      	b.n	3062 <CONFIG_USB_DEVICE_VID+0x7f>
    3096:	4b18      	ldr	r3, [pc, #96]	; (30f8 <CONFIG_USB_DEVICE_VID+0x115>)
    3098:	4a18      	ldr	r2, [pc, #96]	; (30fc <CONFIG_USB_DEVICE_VID+0x119>)
    309a:	1a9b      	subs	r3, r3, r2
    309c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
    309e:	f04f 0200 	mov.w	r2, #0
    30a2:	2101      	movs	r1, #1
    30a4:	f361 0202 	bfi	r2, r1, #0, #3
    30a8:	f36f 02c5 	bfc	r2, #3, #3
    30ac:	f363 128f 	bfi	r2, r3, #6, #10
    30b0:	4629      	mov	r1, r5
    30b2:	4814      	ldr	r0, [pc, #80]	; (3104 <CONFIG_USB_DEVICE_VID+0x121>)
    30b4:	f7fe fc16 	bl	18e4 <log_1>
		k_sem_give(&trans->sem);
    30b8:	f104 001c 	add.w	r0, r4, #28
	z_impl_k_sem_give(sem);
    30bc:	f007 fb8c 	bl	a7d8 <z_impl_k_sem_give>
		goto done;
    30c0:	e7cf      	b.n	3062 <CONFIG_USB_DEVICE_VID+0x7f>
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    30c2:	4628      	mov	r0, r5
    30c4:	f003 f914 	bl	62f0 <usb_dc_ep_mps>
    30c8:	fbb7 f3f0 	udiv	r3, r7, r0
    30cc:	fb00 7013 	mls	r0, r0, r3, r7
    30d0:	2800      	cmp	r0, #0
    30d2:	d0bc      	beq.n	304e <CONFIG_USB_DEVICE_VID+0x6b>
		trans->flags |= USB_TRANS_NO_ZLP;
    30d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    30d6:	f043 0304 	orr.w	r3, r3, #4
    30da:	63e3      	str	r3, [r4, #60]	; 0x3c
    30dc:	e7b7      	b.n	304e <CONFIG_USB_DEVICE_VID+0x6b>
		ret = usb_dc_ep_read_continue(ep);
    30de:	4628      	mov	r0, r5
    30e0:	f003 f824 	bl	612c <usb_dc_ep_read_continue>
    30e4:	4682      	mov	sl, r0
    30e6:	e7bc      	b.n	3062 <CONFIG_USB_DEVICE_VID+0x7f>
		return -EBUSY;
    30e8:	f06f 0a0f 	mvn.w	sl, #15
    30ec:	e7bd      	b.n	306a <CONFIG_USB_DEVICE_VID+0x87>
    30ee:	bf00      	nop
    30f0:	20000c84 	.word	0x20000c84
    30f4:	20000640 	.word	0x20000640
    30f8:	0000ef6c 	.word	0x0000ef6c
    30fc:	0000eefc 	.word	0x0000eefc
    3100:	0000f474 	.word	0x0000f474
    3104:	0000f490 	.word	0x0000f490

00003108 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    3108:	b510      	push	{r4, lr}
	__asm__ volatile(
    310a:	f04f 0320 	mov.w	r3, #32
    310e:	f3ef 8411 	mrs	r4, BASEPRI
    3112:	f383 8812 	msr	BASEPRI_MAX, r3
    3116:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    311a:	f7ff fe39 	bl	2d90 <usb_ep_get_transfer>
	if (!trans) {
    311e:	b120      	cbz	r0, 312a <usb_cancel_transfer+0x22>
    3120:	4601      	mov	r1, r0
		goto done;
	}

	if (trans->status != -EBUSY) {
    3122:	6843      	ldr	r3, [r0, #4]
    3124:	f113 0f10 	cmn.w	r3, #16
    3128:	d004      	beq.n	3134 <usb_cancel_transfer+0x2c>
	__asm__ volatile(
    312a:	f384 8811 	msr	BASEPRI, r4
    312e:	f3bf 8f6f 	isb	sy
	trans->status = -ECANCELED;
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);

done:
	irq_unlock(key);
}
    3132:	bd10      	pop	{r4, pc}
	trans->status = -ECANCELED;
    3134:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    3138:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    313a:	312c      	adds	r1, #44	; 0x2c
    313c:	4801      	ldr	r0, [pc, #4]	; (3144 <usb_cancel_transfer+0x3c>)
    313e:	f00b f9fb 	bl	e538 <k_work_submit_to_queue>
    3142:	e7f2      	b.n	312a <usb_cancel_transfer+0x22>
    3144:	20000640 	.word	0x20000640

00003148 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    3148:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    314a:	2400      	movs	r4, #0
    314c:	e011      	b.n	3172 <usb_cancel_transfers+0x2a>
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
    314e:	4b12      	ldr	r3, [pc, #72]	; (3198 <usb_cancel_transfers+0x50>)
    3150:	01a1      	lsls	r1, r4, #6
    3152:	eb03 1284 	add.w	r2, r3, r4, lsl #6
    3156:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    315a:	6050      	str	r0, [r2, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    315c:	3128      	adds	r1, #40	; 0x28
    315e:	4419      	add	r1, r3
    3160:	3104      	adds	r1, #4
    3162:	480e      	ldr	r0, [pc, #56]	; (319c <usb_cancel_transfers+0x54>)
    3164:	f00b f9e8 	bl	e538 <k_work_submit_to_queue>
    3168:	f385 8811 	msr	BASEPRI, r5
    316c:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3170:	3401      	adds	r4, #1
    3172:	2c03      	cmp	r4, #3
    3174:	dc0f      	bgt.n	3196 <usb_cancel_transfers+0x4e>
	__asm__ volatile(
    3176:	f04f 0320 	mov.w	r3, #32
    317a:	f3ef 8511 	mrs	r5, BASEPRI
    317e:	f383 8812 	msr	BASEPRI_MAX, r3
    3182:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    3186:	4b04      	ldr	r3, [pc, #16]	; (3198 <usb_cancel_transfers+0x50>)
    3188:	eb03 1384 	add.w	r3, r3, r4, lsl #6
    318c:	685b      	ldr	r3, [r3, #4]
    318e:	f113 0f10 	cmn.w	r3, #16
    3192:	d1e9      	bne.n	3168 <usb_cancel_transfers+0x20>
    3194:	e7db      	b.n	314e <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    3196:	bd38      	pop	{r3, r4, r5, pc}
    3198:	20000c84 	.word	0x20000c84
    319c:	20000640 	.word	0x20000640

000031a0 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    31a0:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    31a2:	2600      	movs	r6, #0
    31a4:	e011      	b.n	31ca <usb_transfer_init+0x2a>
		k_work_init(&ut_data[i].work, usb_transfer_work);
    31a6:	4c0b      	ldr	r4, [pc, #44]	; (31d4 <usb_transfer_init+0x34>)
    31a8:	01b5      	lsls	r5, r6, #6
    31aa:	f105 0028 	add.w	r0, r5, #40	; 0x28
    31ae:	4420      	add	r0, r4
    31b0:	4909      	ldr	r1, [pc, #36]	; (31d8 <usb_transfer_init+0x38>)
    31b2:	3004      	adds	r0, #4
    31b4:	f00b f9ba 	bl	e52c <k_work_init>
		k_sem_init(&ut_data[i].sem, 1, 1);
    31b8:	f105 0018 	add.w	r0, r5, #24
    31bc:	4420      	add	r0, r4
    31be:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
    31c0:	2201      	movs	r2, #1
    31c2:	4611      	mov	r1, r2
    31c4:	f00b f9a3 	bl	e50e <z_impl_k_sem_init>
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    31c8:	3601      	adds	r6, #1
    31ca:	2e03      	cmp	r6, #3
    31cc:	ddeb      	ble.n	31a6 <usb_transfer_init+0x6>
	}

	return 0;
}
    31ce:	2000      	movs	r0, #0
    31d0:	bd70      	pop	{r4, r5, r6, pc}
    31d2:	bf00      	nop
    31d4:	20000c84 	.word	0x20000c84
    31d8:	00002dbd 	.word	0x00002dbd

000031dc <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    31dc:	b570      	push	{r4, r5, r6, lr}
    31de:	4604      	mov	r4, r0
    31e0:	460e      	mov	r6, r1
    31e2:	4615      	mov	r5, r2
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    31e4:	7901      	ldrb	r1, [r0, #4]
    31e6:	481e      	ldr	r0, [pc, #120]	; (3260 <cdc_acm_class_handle_req+0x84>)
    31e8:	f009 ffbc 	bl	d164 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    31ec:	b158      	cbz	r0, 3206 <cdc_acm_class_handle_req+0x2a>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    31ee:	f994 2000 	ldrsb.w	r2, [r4]
    31f2:	2a00      	cmp	r2, #0
    31f4:	db27      	blt.n	3246 <cdc_acm_class_handle_req+0x6a>
		switch (setup->bRequest) {
    31f6:	7862      	ldrb	r2, [r4, #1]
    31f8:	2a20      	cmp	r2, #32
    31fa:	d018      	beq.n	322e <cdc_acm_class_handle_req+0x52>
    31fc:	2a22      	cmp	r2, #34	; 0x22
    31fe:	d01d      	beq.n	323c <cdc_acm_class_handle_req+0x60>
    3200:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3204:	e028      	b.n	3258 <cdc_acm_class_handle_req+0x7c>
    3206:	4b17      	ldr	r3, [pc, #92]	; (3264 <cdc_acm_class_handle_req+0x88>)
    3208:	4a17      	ldr	r2, [pc, #92]	; (3268 <cdc_acm_class_handle_req+0x8c>)
    320a:	1a9b      	subs	r3, r3, r2
    320c:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for interface %u",
    320e:	f04f 0200 	mov.w	r2, #0
    3212:	2102      	movs	r1, #2
    3214:	f361 0202 	bfi	r2, r1, #0, #3
    3218:	f36f 02c5 	bfc	r2, #3, #3
    321c:	f363 128f 	bfi	r2, r3, #6, #10
    3220:	88a1      	ldrh	r1, [r4, #4]
    3222:	4812      	ldr	r0, [pc, #72]	; (326c <cdc_acm_class_handle_req+0x90>)
    3224:	f7fe fb5e 	bl	18e4 <log_1>
		return -ENODEV;
    3228:	f06f 0012 	mvn.w	r0, #18
    322c:	e014      	b.n	3258 <cdc_acm_class_handle_req+0x7c>
		case SET_LINE_CODING:
			rate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
			memcpy(&dev_data->line_coding, *data,
    322e:	2207      	movs	r2, #7
    3230:	6829      	ldr	r1, [r5, #0]
    3232:	380c      	subs	r0, #12
    3234:	f00a f9cc 	bl	d5d0 <memcpy>
#if defined(CONFIG_CDC_ACM_DTE_RATE_CALLBACK_SUPPORT)
			if (rate != new_rate && dev_data->rate_cb != NULL) {
				dev_data->rate_cb(common->dev, new_rate);
			}
#endif
			return 0;
    3238:	2000      	movs	r0, #0
    323a:	e00d      	b.n	3258 <cdc_acm_class_handle_req+0x7c>

		case SET_CONTROL_LINE_STATE:
			dev_data->line_state = (uint8_t)setup->wValue;
    323c:	78a2      	ldrb	r2, [r4, #2]
    323e:	f800 2c05 	strb.w	r2, [r0, #-5]
			LOG_DBG("CDC_SET_CONTROL_LINE_STATE 0x%x",
				dev_data->line_state);
			return 0;
    3242:	2000      	movs	r0, #0
    3244:	e008      	b.n	3258 <cdc_acm_class_handle_req+0x7c>

		default:
			break;
		}
	} else {
		if (setup->bRequest == GET_LINE_CODING) {
    3246:	7862      	ldrb	r2, [r4, #1]
    3248:	2a21      	cmp	r2, #33	; 0x21
    324a:	d106      	bne.n	325a <cdc_acm_class_handle_req+0x7e>
			*data = (uint8_t *)(&dev_data->line_coding);
    324c:	f1a0 030c 	sub.w	r3, r0, #12
    3250:	602b      	str	r3, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    3252:	2307      	movs	r3, #7
    3254:	6033      	str	r3, [r6, #0]
			LOG_DBG("CDC_GET_LINE_CODING %d %d %d %d",
				sys_le32_to_cpu(dev_data->line_coding.dwDTERate),
				dev_data->line_coding.bCharFormat,
				dev_data->line_coding.bParityType,
				dev_data->line_coding.bDataBits);
			return 0;
    3256:	2000      	movs	r0, #0
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
}
    3258:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOTSUP;
    325a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    325e:	e7fb      	b.n	3258 <cdc_acm_class_handle_req+0x7c>
    3260:	20000d84 	.word	0x20000d84
    3264:	0000ef4c 	.word	0x0000ef4c
    3268:	0000eefc 	.word	0x0000eefc
    326c:	0000f4cc 	.word	0x0000f4cc

00003270 <cdc_acm_int_in>:
 * @param ep_status Endpoint status code.
 *
 * @return  N/A.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    3270:	b510      	push	{r4, lr}
    3272:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    3274:	4601      	mov	r1, r0
    3276:	480d      	ldr	r0, [pc, #52]	; (32ac <cdc_acm_int_in+0x3c>)
    3278:	f009 ff88 	bl	d18c <usb_get_dev_data_by_ep>
	if (common == NULL) {
    327c:	b118      	cbz	r0, 3286 <cdc_acm_int_in+0x16>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    327e:	2201      	movs	r2, #1
    3280:	f800 2c03 	strb.w	r2, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    3284:	bd10      	pop	{r4, pc}
    3286:	4b0a      	ldr	r3, [pc, #40]	; (32b0 <cdc_acm_int_in+0x40>)
    3288:	4a0a      	ldr	r2, [pc, #40]	; (32b4 <cdc_acm_int_in+0x44>)
    328a:	1a9b      	subs	r3, r3, r2
    328c:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for endpoint %u", ep);
    328e:	f04f 0200 	mov.w	r2, #0
    3292:	2102      	movs	r1, #2
    3294:	f361 0202 	bfi	r2, r1, #0, #3
    3298:	f36f 02c5 	bfc	r2, #3, #3
    329c:	f363 128f 	bfi	r2, r3, #6, #10
    32a0:	4621      	mov	r1, r4
    32a2:	4805      	ldr	r0, [pc, #20]	; (32b8 <cdc_acm_int_in+0x48>)
    32a4:	f7fe fb1e 	bl	18e4 <log_1>
		return;
    32a8:	e7ec      	b.n	3284 <cdc_acm_int_in+0x14>
    32aa:	bf00      	nop
    32ac:	20000d84 	.word	0x20000d84
    32b0:	0000ef4c 	.word	0x0000ef4c
    32b4:	0000eefc 	.word	0x0000eefc
    32b8:	0000f4f4 	.word	0x0000f4f4

000032bc <cdc_acm_irq_rx_enable>:
 * @param dev CDC ACM device struct.
 *
 * @return N/A
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
    32bc:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    32be:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    32c0:	2301      	movs	r3, #1
    32c2:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    32c6:	680b      	ldr	r3, [r1, #0]
    32c8:	b113      	cbz	r3, 32d0 <cdc_acm_irq_rx_enable+0x14>
    32ca:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    32ce:	b903      	cbnz	r3, 32d2 <cdc_acm_irq_rx_enable+0x16>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
	}
}
    32d0:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    32d2:	3108      	adds	r1, #8
    32d4:	4801      	ldr	r0, [pc, #4]	; (32dc <cdc_acm_irq_rx_enable+0x20>)
    32d6:	f00b f92f 	bl	e538 <k_work_submit_to_queue>
}
    32da:	e7f9      	b.n	32d0 <cdc_acm_irq_rx_enable+0x14>
    32dc:	20000640 	.word	0x20000640

000032e0 <cdc_acm_irq_tx_enable>:
{
    32e0:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    32e2:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    32e4:	2301      	movs	r3, #1
    32e6:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    32ea:	680b      	ldr	r3, [r1, #0]
    32ec:	b113      	cbz	r3, 32f4 <cdc_acm_irq_tx_enable+0x14>
    32ee:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    32f2:	b903      	cbnz	r3, 32f6 <cdc_acm_irq_tx_enable+0x16>
}
    32f4:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    32f6:	3108      	adds	r1, #8
    32f8:	4801      	ldr	r0, [pc, #4]	; (3300 <cdc_acm_irq_tx_enable+0x20>)
    32fa:	f00b f91d 	bl	e538 <k_work_submit_to_queue>
}
    32fe:	e7f9      	b.n	32f4 <cdc_acm_irq_tx_enable+0x14>
    3300:	20000640 	.word	0x20000640

00003304 <cdc_acm_reset_port>:
{
    3304:	b510      	push	{r4, lr}
    3306:	4603      	mov	r3, r0
	dev_data->configured = false;
    3308:	2400      	movs	r4, #0
    330a:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
	dev_data->suspended = false;
    330e:	f880 407f 	strb.w	r4, [r0, #127]	; 0x7f
	dev_data->rx_ready = false;
    3312:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
	dev_data->tx_ready = false;
    3316:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    331a:	4a0a      	ldr	r2, [pc, #40]	; (3344 <cdc_acm_reset_port+0x40>)
    331c:	e892 0003 	ldmia.w	r2, {r0, r1}
    3320:	6758      	str	r0, [r3, #116]	; 0x74
    3322:	f8a3 1078 	strh.w	r1, [r3, #120]	; 0x78
    3326:	0c09      	lsrs	r1, r1, #16
    3328:	f883 107a 	strb.w	r1, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
    332c:	f883 407c 	strb.w	r4, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
    3330:	f883 407b 	strb.w	r4, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    3334:	2240      	movs	r2, #64	; 0x40
    3336:	4621      	mov	r1, r4
    3338:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    333c:	f00a f96c 	bl	d618 <memset>
}
    3340:	bd10      	pop	{r4, pc}
    3342:	bf00      	nop
    3344:	0000eff0 	.word	0x0000eff0

00003348 <cdc_acm_fifo_fill>:
{
    3348:	b570      	push	{r4, r5, r6, lr}
    334a:	4614      	mov	r4, r2
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    334c:	6906      	ldr	r6, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    334e:	f896 307e 	ldrb.w	r3, [r6, #126]	; 0x7e
    3352:	b113      	cbz	r3, 335a <cdc_acm_fifo_fill+0x12>
    3354:	f896 307f 	ldrb.w	r3, [r6, #127]	; 0x7f
    3358:	b193      	cbz	r3, 3380 <cdc_acm_fifo_fill+0x38>
    335a:	4b1a      	ldr	r3, [pc, #104]	; (33c4 <cdc_acm_fifo_fill+0x7c>)
    335c:	4a1a      	ldr	r2, [pc, #104]	; (33c8 <cdc_acm_fifo_fill+0x80>)
    335e:	1a9b      	subs	r3, r3, r2
    3360:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device not configured or suspended, drop %d bytes",
    3362:	f04f 0200 	mov.w	r2, #0
    3366:	2102      	movs	r1, #2
    3368:	f361 0202 	bfi	r2, r1, #0, #3
    336c:	f36f 02c5 	bfc	r2, #3, #3
    3370:	f363 128f 	bfi	r2, r3, #6, #10
    3374:	4621      	mov	r1, r4
    3376:	4815      	ldr	r0, [pc, #84]	; (33cc <cdc_acm_fifo_fill+0x84>)
    3378:	f7fe fab4 	bl	18e4 <log_1>
		return 0;
    337c:	2000      	movs	r0, #0
}
    337e:	bd70      	pop	{r4, r5, r6, pc}
	dev_data->tx_ready = false;
    3380:	2300      	movs	r3, #0
    3382:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    3386:	6f30      	ldr	r0, [r6, #112]	; 0x70
    3388:	f009 fa60 	bl	c84c <ring_buf_put>
    338c:	4605      	mov	r5, r0
	if (wrote < len) {
    338e:	4284      	cmp	r4, r0
    3390:	d806      	bhi.n	33a0 <cdc_acm_fifo_fill+0x58>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    3392:	f106 0118 	add.w	r1, r6, #24
    3396:	480e      	ldr	r0, [pc, #56]	; (33d0 <cdc_acm_fifo_fill+0x88>)
    3398:	f00b f8ce 	bl	e538 <k_work_submit_to_queue>
	return wrote;
    339c:	4628      	mov	r0, r5
    339e:	e7ee      	b.n	337e <cdc_acm_fifo_fill+0x36>
    33a0:	4b08      	ldr	r3, [pc, #32]	; (33c4 <cdc_acm_fifo_fill+0x7c>)
    33a2:	4a09      	ldr	r2, [pc, #36]	; (33c8 <cdc_acm_fifo_fill+0x80>)
    33a4:	1a9b      	subs	r3, r3, r2
    33a6:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Ring buffer full, drop %zd bytes", len - wrote);
    33a8:	f04f 0200 	mov.w	r2, #0
    33ac:	2102      	movs	r1, #2
    33ae:	f361 0202 	bfi	r2, r1, #0, #3
    33b2:	f36f 02c5 	bfc	r2, #3, #3
    33b6:	f363 128f 	bfi	r2, r3, #6, #10
    33ba:	1a21      	subs	r1, r4, r0
    33bc:	4805      	ldr	r0, [pc, #20]	; (33d4 <cdc_acm_fifo_fill+0x8c>)
    33be:	f7fe fa91 	bl	18e4 <log_1>
    33c2:	e7e6      	b.n	3392 <cdc_acm_fifo_fill+0x4a>
    33c4:	0000ef4c 	.word	0x0000ef4c
    33c8:	0000eefc 	.word	0x0000eefc
    33cc:	0000f51c 	.word	0x0000f51c
    33d0:	20000640 	.word	0x20000640
    33d4:	0000f550 	.word	0x0000f550

000033d8 <cdc_acm_read_cb>:
{
    33d8:	b570      	push	{r4, r5, r6, lr}
    33da:	b082      	sub	sp, #8
    33dc:	4606      	mov	r6, r0
    33de:	4614      	mov	r4, r2
	if (size <= 0) {
    33e0:	1e0d      	subs	r5, r1, #0
    33e2:	dd0f      	ble.n	3404 <cdc_acm_read_cb+0x2c>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    33e4:	462a      	mov	r2, r5
    33e6:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    33ea:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    33ec:	f009 fa2e 	bl	c84c <ring_buf_put>
	if (wrote < size) {
    33f0:	4285      	cmp	r5, r0
    33f2:	d813      	bhi.n	341c <cdc_acm_read_cb+0x44>
	dev_data->rx_ready = true;
    33f4:	2301      	movs	r3, #1
    33f6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    33fa:	6823      	ldr	r3, [r4, #0]
    33fc:	b113      	cbz	r3, 3404 <cdc_acm_read_cb+0x2c>
    33fe:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    3402:	b9eb      	cbnz	r3, 3440 <cdc_acm_read_cb+0x68>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    3404:	9401      	str	r4, [sp, #4]
    3406:	4b11      	ldr	r3, [pc, #68]	; (344c <cdc_acm_read_cb+0x74>)
    3408:	9300      	str	r3, [sp, #0]
    340a:	2301      	movs	r3, #1
    340c:	2240      	movs	r2, #64	; 0x40
    340e:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    3412:	4630      	mov	r0, r6
    3414:	f7ff fdda 	bl	2fcc <usb_transfer>
}
    3418:	b002      	add	sp, #8
    341a:	bd70      	pop	{r4, r5, r6, pc}
    341c:	4b0c      	ldr	r3, [pc, #48]	; (3450 <cdc_acm_read_cb+0x78>)
    341e:	4a0d      	ldr	r2, [pc, #52]	; (3454 <cdc_acm_read_cb+0x7c>)
    3420:	1a9b      	subs	r3, r3, r2
    3422:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Ring buffer full, drop %zd bytes", size - wrote);
    3424:	f04f 0200 	mov.w	r2, #0
    3428:	2101      	movs	r1, #1
    342a:	f361 0202 	bfi	r2, r1, #0, #3
    342e:	f36f 02c5 	bfc	r2, #3, #3
    3432:	f363 128f 	bfi	r2, r3, #6, #10
    3436:	1a29      	subs	r1, r5, r0
    3438:	4807      	ldr	r0, [pc, #28]	; (3458 <cdc_acm_read_cb+0x80>)
    343a:	f7fe fa53 	bl	18e4 <log_1>
    343e:	e7d9      	b.n	33f4 <cdc_acm_read_cb+0x1c>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3440:	f104 0108 	add.w	r1, r4, #8
    3444:	4805      	ldr	r0, [pc, #20]	; (345c <cdc_acm_read_cb+0x84>)
    3446:	f00b f877 	bl	e538 <k_work_submit_to_queue>
    344a:	e7db      	b.n	3404 <cdc_acm_read_cb+0x2c>
    344c:	000033d9 	.word	0x000033d9
    3450:	0000ef4c 	.word	0x0000ef4c
    3454:	0000eefc 	.word	0x0000eefc
    3458:	0000f550 	.word	0x0000f550
    345c:	20000640 	.word	0x20000640

00003460 <cdc_acm_do_cb>:
{
    3460:	b538      	push	{r3, r4, r5, lr}
    3462:	4604      	mov	r4, r0
	const struct device *dev = dev_data->common.dev;
    3464:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	struct usb_cfg_data *cfg = (void *)dev->config;
    3468:	685d      	ldr	r5, [r3, #4]
	switch (status) {
    346a:	3901      	subs	r1, #1
    346c:	2905      	cmp	r1, #5
    346e:	d806      	bhi.n	347e <cdc_acm_do_cb+0x1e>
    3470:	e8df f001 	tbb	[pc, r1]
    3474:	37060503 	.word	0x37060503
    3478:	5f4b      	.short	0x5f4b
		cdc_acm_reset_port(dev_data);
    347a:	f7ff ff43 	bl	3304 <cdc_acm_reset_port>
}
    347e:	bd38      	pop	{r3, r4, r5, pc}
    3480:	4b45      	ldr	r3, [pc, #276]	; (3598 <cdc_acm_do_cb+0x138>)
    3482:	4a46      	ldr	r2, [pc, #280]	; (359c <cdc_acm_do_cb+0x13c>)
    3484:	1a9b      	subs	r3, r3, r2
    3486:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device configured");
    3488:	f04f 0100 	mov.w	r1, #0
    348c:	2203      	movs	r2, #3
    348e:	f362 0102 	bfi	r1, r2, #0, #3
    3492:	f36f 01c5 	bfc	r1, #3, #3
    3496:	f363 118f 	bfi	r1, r3, #6, #10
    349a:	4841      	ldr	r0, [pc, #260]	; (35a0 <cdc_acm_do_cb+0x140>)
    349c:	f7fe fa94 	bl	19c8 <log_0>
		if (!dev_data->configured) {
    34a0:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    34a4:	b19b      	cbz	r3, 34ce <cdc_acm_do_cb+0x6e>
		if (!dev_data->tx_ready) {
    34a6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    34aa:	2b00      	cmp	r3, #0
    34ac:	d1e7      	bne.n	347e <cdc_acm_do_cb+0x1e>
			dev_data->tx_ready = true;
    34ae:	2301      	movs	r3, #1
    34b0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    34b4:	6823      	ldr	r3, [r4, #0]
    34b6:	2b00      	cmp	r3, #0
    34b8:	d0e1      	beq.n	347e <cdc_acm_do_cb+0x1e>
    34ba:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    34be:	2b00      	cmp	r3, #0
    34c0:	d0dd      	beq.n	347e <cdc_acm_do_cb+0x1e>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    34c2:	f104 0108 	add.w	r1, r4, #8
    34c6:	4837      	ldr	r0, [pc, #220]	; (35a4 <cdc_acm_do_cb+0x144>)
    34c8:	f00b f836 	bl	e538 <k_work_submit_to_queue>
    34cc:	e7d7      	b.n	347e <cdc_acm_do_cb+0x1e>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    34ce:	6a2b      	ldr	r3, [r5, #32]
    34d0:	4622      	mov	r2, r4
    34d2:	2100      	movs	r1, #0
    34d4:	7b18      	ldrb	r0, [r3, #12]
    34d6:	f7ff ff7f 	bl	33d8 <cdc_acm_read_cb>
			dev_data->configured = true;
    34da:	2301      	movs	r3, #1
    34dc:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
    34e0:	e7e1      	b.n	34a6 <cdc_acm_do_cb+0x46>
    34e2:	4b2d      	ldr	r3, [pc, #180]	; (3598 <cdc_acm_do_cb+0x138>)
    34e4:	4a2d      	ldr	r2, [pc, #180]	; (359c <cdc_acm_do_cb+0x13c>)
    34e6:	1a9b      	subs	r3, r3, r2
    34e8:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device disconnected");
    34ea:	f04f 0100 	mov.w	r1, #0
    34ee:	2203      	movs	r2, #3
    34f0:	f362 0102 	bfi	r1, r2, #0, #3
    34f4:	f36f 01c5 	bfc	r1, #3, #3
    34f8:	f363 118f 	bfi	r1, r3, #6, #10
    34fc:	482a      	ldr	r0, [pc, #168]	; (35a8 <cdc_acm_do_cb+0x148>)
    34fe:	f7fe fa63 	bl	19c8 <log_0>
		cdc_acm_reset_port(dev_data);
    3502:	4620      	mov	r0, r4
    3504:	f7ff fefe 	bl	3304 <cdc_acm_reset_port>
		break;
    3508:	e7b9      	b.n	347e <cdc_acm_do_cb+0x1e>
    350a:	4b23      	ldr	r3, [pc, #140]	; (3598 <cdc_acm_do_cb+0x138>)
    350c:	4a23      	ldr	r2, [pc, #140]	; (359c <cdc_acm_do_cb+0x13c>)
    350e:	1a9b      	subs	r3, r3, r2
    3510:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device suspended");
    3512:	f04f 0100 	mov.w	r1, #0
    3516:	2203      	movs	r2, #3
    3518:	f362 0102 	bfi	r1, r2, #0, #3
    351c:	f36f 01c5 	bfc	r1, #3, #3
    3520:	f363 118f 	bfi	r1, r3, #6, #10
    3524:	4821      	ldr	r0, [pc, #132]	; (35ac <cdc_acm_do_cb+0x14c>)
    3526:	f7fe fa4f 	bl	19c8 <log_0>
		dev_data->suspended = true;
    352a:	2301      	movs	r3, #1
    352c:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
		break;
    3530:	e7a5      	b.n	347e <cdc_acm_do_cb+0x1e>
    3532:	4b19      	ldr	r3, [pc, #100]	; (3598 <cdc_acm_do_cb+0x138>)
    3534:	4a19      	ldr	r2, [pc, #100]	; (359c <cdc_acm_do_cb+0x13c>)
    3536:	1a9b      	subs	r3, r3, r2
    3538:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device resumed");
    353a:	f04f 0100 	mov.w	r1, #0
    353e:	2203      	movs	r2, #3
    3540:	f362 0102 	bfi	r1, r2, #0, #3
    3544:	f36f 01c5 	bfc	r1, #3, #3
    3548:	f363 118f 	bfi	r1, r3, #6, #10
    354c:	4818      	ldr	r0, [pc, #96]	; (35b0 <cdc_acm_do_cb+0x150>)
    354e:	f7fe fa3b 	bl	19c8 <log_0>
		if (dev_data->suspended) {
    3552:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    3556:	2b00      	cmp	r3, #0
    3558:	d091      	beq.n	347e <cdc_acm_do_cb+0x1e>
    355a:	4b0f      	ldr	r3, [pc, #60]	; (3598 <cdc_acm_do_cb+0x138>)
    355c:	4a0f      	ldr	r2, [pc, #60]	; (359c <cdc_acm_do_cb+0x13c>)
    355e:	1a9b      	subs	r3, r3, r2
    3560:	08db      	lsrs	r3, r3, #3
			LOG_INF("from suspend");
    3562:	f04f 0100 	mov.w	r1, #0
    3566:	2203      	movs	r2, #3
    3568:	f362 0102 	bfi	r1, r2, #0, #3
    356c:	f36f 01c5 	bfc	r1, #3, #3
    3570:	f363 118f 	bfi	r1, r3, #6, #10
    3574:	480f      	ldr	r0, [pc, #60]	; (35b4 <cdc_acm_do_cb+0x154>)
    3576:	f7fe fa27 	bl	19c8 <log_0>
			dev_data->suspended = false;
    357a:	2300      	movs	r3, #0
    357c:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
			if (dev_data->configured) {
    3580:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    3584:	2b00      	cmp	r3, #0
    3586:	f43f af7a 	beq.w	347e <cdc_acm_do_cb+0x1e>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    358a:	6a2b      	ldr	r3, [r5, #32]
    358c:	4622      	mov	r2, r4
    358e:	2100      	movs	r1, #0
    3590:	7b18      	ldrb	r0, [r3, #12]
    3592:	f7ff ff21 	bl	33d8 <cdc_acm_read_cb>
}
    3596:	e772      	b.n	347e <cdc_acm_do_cb+0x1e>
    3598:	0000ef4c 	.word	0x0000ef4c
    359c:	0000eefc 	.word	0x0000eefc
    35a0:	0000f574 	.word	0x0000f574
    35a4:	20000640 	.word	0x20000640
    35a8:	0000f588 	.word	0x0000f588
    35ac:	0000f59c 	.word	0x0000f59c
    35b0:	0000f5b0 	.word	0x0000f5b0
    35b4:	0000f5c0 	.word	0x0000f5c0

000035b8 <cdc_acm_dev_status_cb>:
{
    35b8:	b570      	push	{r4, r5, r6, lr}
    35ba:	4604      	mov	r4, r0
    35bc:	460d      	mov	r5, r1
    35be:	4616      	mov	r6, r2
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    35c0:	4601      	mov	r1, r0
    35c2:	480e      	ldr	r0, [pc, #56]	; (35fc <cdc_acm_dev_status_cb+0x44>)
    35c4:	f009 fdbc 	bl	d140 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    35c8:	b128      	cbz	r0, 35d6 <cdc_acm_dev_status_cb+0x1e>
	cdc_acm_do_cb(dev_data, status, param);
    35ca:	4632      	mov	r2, r6
    35cc:	4629      	mov	r1, r5
    35ce:	3880      	subs	r0, #128	; 0x80
    35d0:	f7ff ff46 	bl	3460 <cdc_acm_do_cb>
}
    35d4:	bd70      	pop	{r4, r5, r6, pc}
    35d6:	4b0a      	ldr	r3, [pc, #40]	; (3600 <cdc_acm_dev_status_cb+0x48>)
    35d8:	4a0a      	ldr	r2, [pc, #40]	; (3604 <cdc_acm_dev_status_cb+0x4c>)
    35da:	1a9b      	subs	r3, r3, r2
    35dc:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for cfg %p", cfg);
    35de:	f04f 0200 	mov.w	r2, #0
    35e2:	2102      	movs	r1, #2
    35e4:	f361 0202 	bfi	r2, r1, #0, #3
    35e8:	f36f 02c5 	bfc	r2, #3, #3
    35ec:	f363 128f 	bfi	r2, r3, #6, #10
    35f0:	4621      	mov	r1, r4
    35f2:	4805      	ldr	r0, [pc, #20]	; (3608 <cdc_acm_dev_status_cb+0x50>)
    35f4:	f7fe f976 	bl	18e4 <log_1>
		return;
    35f8:	e7ec      	b.n	35d4 <cdc_acm_dev_status_cb+0x1c>
    35fa:	bf00      	nop
    35fc:	20000d84 	.word	0x20000d84
    3600:	0000ef4c 	.word	0x0000ef4c
    3604:	0000eefc 	.word	0x0000eefc
    3608:	0000f5d0 	.word	0x0000f5d0

0000360c <cdc_acm_send_notification>:
 *
 * @return  N/A.
 */
static int cdc_acm_send_notification(const struct device *dev,
				     uint16_t serial_state)
{
    360c:	b530      	push	{r4, r5, lr}
    360e:	b085      	sub	sp, #20
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    3610:	6905      	ldr	r5, [r0, #16]
	struct usb_cfg_data * const cfg = (void *)dev->config;
    3612:	6843      	ldr	r3, [r0, #4]
	struct cdc_acm_notification notification;
	uint32_t cnt = 0U;

	notification.bmRequestType = 0xA1;
    3614:	22a1      	movs	r2, #161	; 0xa1
    3616:	f88d 2004 	strb.w	r2, [sp, #4]
	notification.bNotificationType = 0x20;
    361a:	2220      	movs	r2, #32
    361c:	f88d 2005 	strb.w	r2, [sp, #5]
	notification.wValue = 0U;
    3620:	2400      	movs	r4, #0
    3622:	f8ad 4006 	strh.w	r4, [sp, #6]
	notification.wIndex = 0U;
    3626:	f8ad 4008 	strh.w	r4, [sp, #8]
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    362a:	2202      	movs	r2, #2
    362c:	f8ad 200a 	strh.w	r2, [sp, #10]
	notification.data = sys_cpu_to_le16(serial_state);
    3630:	f8ad 100c 	strh.w	r1, [sp, #12]

	dev_data->notification_sent = 0U;
    3634:	f885 407d 	strb.w	r4, [r5, #125]	; 0x7d

	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    3638:	6a18      	ldr	r0, [r3, #32]
    363a:	4623      	mov	r3, r4
    363c:	220a      	movs	r2, #10
    363e:	a901      	add	r1, sp, #4
    3640:	7900      	ldrb	r0, [r0, #4]
    3642:	f009 fce6 	bl	d012 <usb_write>
		  (const uint8_t *)&notification, sizeof(notification), NULL);

	/* Wait for notification to be sent */
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    3646:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    364a:	b94b      	cbnz	r3, 3660 <cdc_acm_send_notification+0x54>
	z_impl_k_busy_wait(usec_to_wait);
    364c:	2001      	movs	r0, #1
    364e:	f00b f9ba 	bl	e9c6 <z_impl_k_busy_wait>
		k_busy_wait(1);

		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    3652:	3401      	adds	r4, #1
    3654:	4b04      	ldr	r3, [pc, #16]	; (3668 <cdc_acm_send_notification+0x5c>)
    3656:	429c      	cmp	r4, r3
    3658:	d9f5      	bls.n	3646 <cdc_acm_send_notification+0x3a>
			LOG_DBG("CDC ACM notification timeout!");
			return -EIO;
    365a:	f06f 0004 	mvn.w	r0, #4
    365e:	e000      	b.n	3662 <cdc_acm_send_notification+0x56>
		}
	}

	return 0;
    3660:	2000      	movs	r0, #0
}
    3662:	b005      	add	sp, #20
    3664:	bd30      	pop	{r4, r5, pc}
    3666:	bf00      	nop
    3668:	000186a0 	.word	0x000186a0

0000366c <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    366c:	b510      	push	{r4, lr}
    366e:	b082      	sub	sp, #8
    3670:	f88d 1007 	strb.w	r1, [sp, #7]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    3674:	6904      	ldr	r4, [r0, #16]

	if (!dev_data->configured || dev_data->suspended) {
    3676:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    367a:	b113      	cbz	r3, 3682 <cdc_acm_poll_out+0x16>
    367c:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    3680:	b18b      	cbz	r3, 36a6 <cdc_acm_poll_out+0x3a>
    3682:	4b28      	ldr	r3, [pc, #160]	; (3724 <cdc_acm_poll_out+0xb8>)
    3684:	4a28      	ldr	r2, [pc, #160]	; (3728 <cdc_acm_poll_out+0xbc>)
    3686:	1a9b      	subs	r3, r3, r2
    3688:	08db      	lsrs	r3, r3, #3
		LOG_INF("USB device not ready, drop data");
    368a:	f04f 0100 	mov.w	r1, #0
    368e:	2203      	movs	r2, #3
    3690:	f362 0102 	bfi	r1, r2, #0, #3
    3694:	f36f 01c5 	bfc	r1, #3, #3
    3698:	f363 118f 	bfi	r1, r3, #6, #10
    369c:	4823      	ldr	r0, [pc, #140]	; (372c <cdc_acm_poll_out+0xc0>)
    369e:	f7fe f993 	bl	19c8 <log_0>
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
}
    36a2:	b002      	add	sp, #8
    36a4:	bd10      	pop	{r4, pc}
	dev_data->tx_ready = false;
    36a6:	2300      	movs	r3, #0
    36a8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    36ac:	2201      	movs	r2, #1
    36ae:	f10d 0107 	add.w	r1, sp, #7
    36b2:	6f20      	ldr	r0, [r4, #112]	; 0x70
    36b4:	f009 f8ca 	bl	c84c <ring_buf_put>
    36b8:	b9e0      	cbnz	r0, 36f4 <cdc_acm_poll_out+0x88>
    36ba:	4b1a      	ldr	r3, [pc, #104]	; (3724 <cdc_acm_poll_out+0xb8>)
    36bc:	4a1a      	ldr	r2, [pc, #104]	; (3728 <cdc_acm_poll_out+0xbc>)
    36be:	1a9b      	subs	r3, r3, r2
    36c0:	08db      	lsrs	r3, r3, #3
		LOG_INF("Ring buffer full, drain buffer");
    36c2:	f04f 0100 	mov.w	r1, #0
    36c6:	2203      	movs	r2, #3
    36c8:	f362 0102 	bfi	r1, r2, #0, #3
    36cc:	f36f 01c5 	bfc	r1, #3, #3
    36d0:	f363 118f 	bfi	r1, r3, #6, #10
    36d4:	4816      	ldr	r0, [pc, #88]	; (3730 <cdc_acm_poll_out+0xc4>)
    36d6:	f7fe f977 	bl	19c8 <log_0>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    36da:	2201      	movs	r2, #1
    36dc:	2100      	movs	r1, #0
    36de:	6f20      	ldr	r0, [r4, #112]	; 0x70
    36e0:	f009 f91e 	bl	c920 <ring_buf_get>
    36e4:	b160      	cbz	r0, 3700 <cdc_acm_poll_out+0x94>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    36e6:	2201      	movs	r2, #1
    36e8:	f10d 0107 	add.w	r1, sp, #7
    36ec:	6f20      	ldr	r0, [r4, #112]	; 0x70
    36ee:	f009 f8ad 	bl	c84c <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    36f2:	b128      	cbz	r0, 3700 <cdc_acm_poll_out+0x94>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    36f4:	f104 0118 	add.w	r1, r4, #24
    36f8:	480e      	ldr	r0, [pc, #56]	; (3734 <cdc_acm_poll_out+0xc8>)
    36fa:	f00a ff1d 	bl	e538 <k_work_submit_to_queue>
    36fe:	e7d0      	b.n	36a2 <cdc_acm_poll_out+0x36>
    3700:	4b08      	ldr	r3, [pc, #32]	; (3724 <cdc_acm_poll_out+0xb8>)
    3702:	4a09      	ldr	r2, [pc, #36]	; (3728 <cdc_acm_poll_out+0xbc>)
    3704:	1a9b      	subs	r3, r3, r2
    3706:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to drain buffer");
    3708:	f04f 0100 	mov.w	r1, #0
    370c:	2201      	movs	r2, #1
    370e:	f362 0102 	bfi	r1, r2, #0, #3
    3712:	f36f 01c5 	bfc	r1, #3, #3
    3716:	f363 118f 	bfi	r1, r3, #6, #10
    371a:	4807      	ldr	r0, [pc, #28]	; (3738 <cdc_acm_poll_out+0xcc>)
    371c:	f7fe f954 	bl	19c8 <log_0>
			return;
    3720:	e7bf      	b.n	36a2 <cdc_acm_poll_out+0x36>
    3722:	bf00      	nop
    3724:	0000ef4c 	.word	0x0000ef4c
    3728:	0000eefc 	.word	0x0000eefc
    372c:	0000f5f4 	.word	0x0000f5f4
    3730:	0000f614 	.word	0x0000f614
    3734:	20000640 	.word	0x20000640
    3738:	0000f634 	.word	0x0000f634

0000373c <cdc_acm_write_cb>:
{
    373c:	b510      	push	{r4, lr}
    373e:	4614      	mov	r4, r2
	dev_data->tx_ready = true;
    3740:	2301      	movs	r3, #1
    3742:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    3746:	6813      	ldr	r3, [r2, #0]
    3748:	b113      	cbz	r3, 3750 <cdc_acm_write_cb+0x14>
    374a:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    374e:	b923      	cbnz	r3, 375a <cdc_acm_write_cb+0x1e>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    3750:	6f20      	ldr	r0, [r4, #112]	; 0x70
    3752:	f009 f82d 	bl	c7b0 <ring_buf_is_empty>
    3756:	b130      	cbz	r0, 3766 <cdc_acm_write_cb+0x2a>
}
    3758:	bd10      	pop	{r4, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    375a:	f102 0108 	add.w	r1, r2, #8
    375e:	4805      	ldr	r0, [pc, #20]	; (3774 <cdc_acm_write_cb+0x38>)
    3760:	f00a feea 	bl	e538 <k_work_submit_to_queue>
    3764:	e7f4      	b.n	3750 <cdc_acm_write_cb+0x14>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    3766:	f104 0118 	add.w	r1, r4, #24
    376a:	4802      	ldr	r0, [pc, #8]	; (3774 <cdc_acm_write_cb+0x38>)
    376c:	f00a fee4 	bl	e538 <k_work_submit_to_queue>
    3770:	e7f2      	b.n	3758 <cdc_acm_write_cb+0x1c>
    3772:	bf00      	nop
    3774:	20000640 	.word	0x20000640

00003778 <cdc_acm_init>:
{
    3778:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    377a:	6904      	ldr	r4, [r0, #16]
	dev_data->common.dev = dev;
    377c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    3780:	f104 0384 	add.w	r3, r4, #132	; 0x84
	parent->next = child;
    3784:	2200      	movs	r2, #0
    3786:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    378a:	4a0b      	ldr	r2, [pc, #44]	; (37b8 <cdc_acm_init+0x40>)
    378c:	6852      	ldr	r2, [r2, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    378e:	b172      	cbz	r2, 37ae <cdc_acm_init+0x36>
	parent->next = child;
    3790:	6013      	str	r3, [r2, #0]
	list->tail = node;
    3792:	4a09      	ldr	r2, [pc, #36]	; (37b8 <cdc_acm_init+0x40>)
    3794:	6053      	str	r3, [r2, #4]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    3796:	4909      	ldr	r1, [pc, #36]	; (37bc <cdc_acm_init+0x44>)
    3798:	f104 0008 	add.w	r0, r4, #8
    379c:	f00a fec6 	bl	e52c <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    37a0:	4907      	ldr	r1, [pc, #28]	; (37c0 <cdc_acm_init+0x48>)
    37a2:	f104 0018 	add.w	r0, r4, #24
    37a6:	f00a fec1 	bl	e52c <k_work_init>
}
    37aa:	2000      	movs	r0, #0
    37ac:	bd10      	pop	{r4, pc}
    37ae:	4a02      	ldr	r2, [pc, #8]	; (37b8 <cdc_acm_init+0x40>)
    37b0:	6053      	str	r3, [r2, #4]
	list->head = node;
    37b2:	6013      	str	r3, [r2, #0]
}
    37b4:	e7ef      	b.n	3796 <cdc_acm_init+0x1e>
    37b6:	bf00      	nop
    37b8:	20000d84 	.word	0x20000d84
    37bc:	0000d1fd 	.word	0x0000d1fd
    37c0:	000037c5 	.word	0x000037c5

000037c4 <tx_work_handler>:
{
    37c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    37c6:	b085      	sub	sp, #20
    37c8:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data =
    37ca:	f1a0 0718 	sub.w	r7, r0, #24
	const struct device *dev = dev_data->common.dev;
    37ce:	6e83      	ldr	r3, [r0, #104]	; 0x68
	struct usb_cfg_data *cfg = (void *)dev->config;
    37d0:	685b      	ldr	r3, [r3, #4]
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    37d2:	6a1b      	ldr	r3, [r3, #32]
    37d4:	7d1d      	ldrb	r5, [r3, #20]
	if (usb_transfer_is_busy(ep)) {
    37d6:	4628      	mov	r0, r5
    37d8:	f009 fcf8 	bl	d1cc <usb_transfer_is_busy>
    37dc:	b108      	cbz	r0, 37e2 <tx_work_handler+0x1e>
}
    37de:	b005      	add	sp, #20
    37e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    37e2:	f44f 7200 	mov.w	r2, #512	; 0x200
    37e6:	a903      	add	r1, sp, #12
    37e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    37ea:	f009 f84f 	bl	c88c <ring_buf_get_claim>
	if (!len) {
    37ee:	4606      	mov	r6, r0
    37f0:	2800      	cmp	r0, #0
    37f2:	d0f4      	beq.n	37de <tx_work_handler+0x1a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    37f4:	f010 0f3f 	tst.w	r0, #63	; 0x3f
    37f8:	d100      	bne.n	37fc <tx_work_handler+0x38>
		len -= 1;
    37fa:	1e46      	subs	r6, r0, #1
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    37fc:	9701      	str	r7, [sp, #4]
    37fe:	4b06      	ldr	r3, [pc, #24]	; (3818 <tx_work_handler+0x54>)
    3800:	9300      	str	r3, [sp, #0]
    3802:	2302      	movs	r3, #2
    3804:	4632      	mov	r2, r6
    3806:	9903      	ldr	r1, [sp, #12]
    3808:	4628      	mov	r0, r5
    380a:	f7ff fbdf 	bl	2fcc <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    380e:	4631      	mov	r1, r6
    3810:	6da0      	ldr	r0, [r4, #88]	; 0x58
    3812:	f009 f867 	bl	c8e4 <ring_buf_get_finish>
    3816:	e7e2      	b.n	37de <tx_work_handler+0x1a>
    3818:	0000373d 	.word	0x0000373d

0000381c <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    381c:	b530      	push	{r4, r5, lr}
    381e:	b083      	sub	sp, #12
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    3820:	4d08      	ldr	r5, [pc, #32]	; (3844 <z_usb_work_q_init+0x28>)
    3822:	2400      	movs	r4, #0
    3824:	9400      	str	r4, [sp, #0]
    3826:	f04f 33ff 	mov.w	r3, #4294967295
    382a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    382e:	4906      	ldr	r1, [pc, #24]	; (3848 <z_usb_work_q_init+0x2c>)
    3830:	4628      	mov	r0, r5
    3832:	f007 f93f 	bl	aab4 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    3836:	4905      	ldr	r1, [pc, #20]	; (384c <z_usb_work_q_init+0x30>)
    3838:	4628      	mov	r0, r5
    383a:	f006 fdd5 	bl	a3e8 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    383e:	4620      	mov	r0, r4
    3840:	b003      	add	sp, #12
    3842:	bd30      	pop	{r4, r5, pc}
    3844:	20000640 	.word	0x20000640
    3848:	200023e8 	.word	0x200023e8
    384c:	0000f6c4 	.word	0x0000f6c4

00003850 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    3850:	b570      	push	{r4, r5, r6, lr}
    3852:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
    3854:	4b2a      	ldr	r3, [pc, #168]	; (3900 <pm_system_resume+0xb0>)
    3856:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3858:	f004 031f 	and.w	r3, r4, #31
    385c:	2201      	movs	r2, #1
    385e:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3860:	0961      	lsrs	r1, r4, #5
    3862:	4b28      	ldr	r3, [pc, #160]	; (3904 <pm_system_resume+0xb4>)
    3864:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3868:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    386a:	e8d3 1fef 	ldaex	r1, [r3]
    386e:	ea01 0500 	and.w	r5, r1, r0
    3872:	e8c3 5fe6 	stlex	r6, r5, [r3]
    3876:	2e00      	cmp	r6, #0
    3878:	d1f7      	bne.n	386a <pm_system_resume+0x1a>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    387a:	420a      	tst	r2, r1
    387c:	d03d      	beq.n	38fa <pm_system_resume+0xaa>
		exit_pos_ops(z_power_states[id]);
    387e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3882:	009a      	lsls	r2, r3, #2
    3884:	4b20      	ldr	r3, [pc, #128]	; (3908 <pm_system_resume+0xb8>)
    3886:	4413      	add	r3, r2
    3888:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    388c:	ab04      	add	r3, sp, #16
    388e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    3892:	4b1e      	ldr	r3, [pc, #120]	; (390c <pm_system_resume+0xbc>)
    3894:	b163      	cbz	r3, 38b0 <pm_system_resume+0x60>
		pm_power_state_exit_post_ops(info);
    3896:	f009 f867 	bl	c968 <pm_power_state_exit_post_ops>
    389a:	f04f 0320 	mov.w	r3, #32
    389e:	f3ef 8611 	mrs	r6, BASEPRI
    38a2:	f383 8812 	msr	BASEPRI_MAX, r3
    38a6:	f3bf 8f6f 	isb	sy
	return list->head;
    38aa:	4b19      	ldr	r3, [pc, #100]	; (3910 <pm_system_resume+0xc0>)
    38ac:	681d      	ldr	r5, [r3, #0]
    38ae:	e00a      	b.n	38c6 <pm_system_resume+0x76>
	__asm__ volatile(
    38b0:	2300      	movs	r3, #0
    38b2:	f383 8811 	msr	BASEPRI, r3
    38b6:	f3bf 8f6f 	isb	sy
}
    38ba:	e7ee      	b.n	389a <pm_system_resume+0x4a>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    38bc:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    38be:	b10d      	cbz	r5, 38c4 <pm_system_resume+0x74>
	return node->next;
    38c0:	682b      	ldr	r3, [r5, #0]
    38c2:	b16b      	cbz	r3, 38e0 <pm_system_resume+0x90>
{
    38c4:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    38c6:	b15d      	cbz	r5, 38e0 <pm_system_resume+0x90>
			callback = notifier->state_exit;
    38c8:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
    38ca:	2a00      	cmp	r2, #0
    38cc:	d0f6      	beq.n	38bc <pm_system_resume+0x6c>
			callback(z_power_states[_current_cpu->id].state);
    38ce:	4b0c      	ldr	r3, [pc, #48]	; (3900 <pm_system_resume+0xb0>)
    38d0:	7d1b      	ldrb	r3, [r3, #20]
    38d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    38d6:	0099      	lsls	r1, r3, #2
    38d8:	4b0b      	ldr	r3, [pc, #44]	; (3908 <pm_system_resume+0xb8>)
    38da:	5c58      	ldrb	r0, [r3, r1]
    38dc:	4790      	blx	r2
    38de:	e7ed      	b.n	38bc <pm_system_resume+0x6c>
	__asm__ volatile(
    38e0:	f386 8811 	msr	BASEPRI, r6
    38e4:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    38e8:	4807      	ldr	r0, [pc, #28]	; (3908 <pm_system_resume+0xb8>)
    38ea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    38ee:	00a2      	lsls	r2, r4, #2
    38f0:	1881      	adds	r1, r0, r2
    38f2:	2300      	movs	r3, #0
    38f4:	5083      	str	r3, [r0, r2]
    38f6:	604b      	str	r3, [r1, #4]
    38f8:	608b      	str	r3, [r1, #8]
			0, 0};
	}
}
    38fa:	b004      	add	sp, #16
    38fc:	bd70      	pop	{r4, r5, r6, pc}
    38fe:	bf00      	nop
    3900:	20001ec0 	.word	0x20001ec0
    3904:	20000d94 	.word	0x20000d94
    3908:	20000d98 	.word	0x20000d98
    390c:	0000c969 	.word	0x0000c969
    3910:	20000d8c 	.word	0x20000d8c

00003914 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    3914:	b5f0      	push	{r4, r5, r6, r7, lr}
    3916:	b089      	sub	sp, #36	; 0x24
    3918:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    391a:	4b4e      	ldr	r3, [pc, #312]	; (3a54 <pm_system_suspend+0x140>)
    391c:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    391e:	f004 031f 	and.w	r3, r4, #31
    3922:	2201      	movs	r2, #1
    3924:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3926:	0961      	lsrs	r1, r4, #5
    3928:	4b4b      	ldr	r3, [pc, #300]	; (3a58 <pm_system_suspend+0x144>)
    392a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    392e:	e8d3 1fef 	ldaex	r1, [r3]
    3932:	ea41 0002 	orr.w	r0, r1, r2
    3936:	e8c3 0fe6 	stlex	r6, r0, [r3]
    393a:	2e00      	cmp	r6, #0
    393c:	d1f7      	bne.n	392e <pm_system_suspend+0x1a>

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    393e:	420a      	tst	r2, r1
    3940:	d016      	beq.n	3970 <pm_system_suspend+0x5c>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    3942:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3946:	4a45      	ldr	r2, [pc, #276]	; (3a5c <pm_system_suspend+0x148>)
    3948:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    394c:	2b00      	cmp	r3, #0
    394e:	d07f      	beq.n	3a50 <pm_system_suspend+0x13c>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    3950:	f1b5 3fff 	cmp.w	r5, #4294967295
    3954:	d11c      	bne.n	3990 <pm_system_suspend+0x7c>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3956:	f007 f969 	bl	ac2c <k_sched_lock>
	__asm__ volatile(
    395a:	f04f 0320 	mov.w	r3, #32
    395e:	f3ef 8611 	mrs	r6, BASEPRI
    3962:	f383 8812 	msr	BASEPRI_MAX, r3
    3966:	f3bf 8f6f 	isb	sy
	return list->head;
    396a:	4b3d      	ldr	r3, [pc, #244]	; (3a60 <pm_system_suspend+0x14c>)
    396c:	681d      	ldr	r5, [r3, #0]
    396e:	e02a      	b.n	39c6 <pm_system_suspend+0xb2>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    3970:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    3974:	4b39      	ldr	r3, [pc, #228]	; (3a5c <pm_system_suspend+0x148>)
    3976:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    397a:	466f      	mov	r7, sp
    397c:	462a      	mov	r2, r5
    397e:	4621      	mov	r1, r4
    3980:	4638      	mov	r0, r7
    3982:	f009 fd67 	bl	d454 <pm_policy_next_state>
    3986:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    398a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    398e:	e7d8      	b.n	3942 <pm_system_suspend+0x2e>
		     k_us_to_ticks_ceil32(
    3990:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3994:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3998:	689b      	ldr	r3, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    399a:	0c59      	lsrs	r1, r3, #17
    399c:	03d8      	lsls	r0, r3, #15
    399e:	4e31      	ldr	r6, [pc, #196]	; (3a64 <pm_system_suspend+0x150>)
    39a0:	4a31      	ldr	r2, [pc, #196]	; (3a68 <pm_system_suspend+0x154>)
    39a2:	2300      	movs	r3, #0
    39a4:	1980      	adds	r0, r0, r6
    39a6:	f04f 0600 	mov.w	r6, #0
    39aa:	eb46 0101 	adc.w	r1, r6, r1
    39ae:	f7fc fbd1 	bl	154 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    39b2:	2101      	movs	r1, #1
    39b4:	1a28      	subs	r0, r5, r0
    39b6:	f00a ffd7 	bl	e968 <z_set_timeout_expiry>
    39ba:	e7cc      	b.n	3956 <pm_system_suspend+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    39bc:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    39be:	b10d      	cbz	r5, 39c4 <pm_system_suspend+0xb0>
	return node->next;
    39c0:	682b      	ldr	r3, [r5, #0]
    39c2:	b16b      	cbz	r3, 39e0 <pm_system_suspend+0xcc>
{
    39c4:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    39c6:	b15d      	cbz	r5, 39e0 <pm_system_suspend+0xcc>
			callback = notifier->state_entry;
    39c8:	686a      	ldr	r2, [r5, #4]
		if (callback) {
    39ca:	2a00      	cmp	r2, #0
    39cc:	d0f6      	beq.n	39bc <pm_system_suspend+0xa8>
			callback(z_power_states[_current_cpu->id].state);
    39ce:	4b21      	ldr	r3, [pc, #132]	; (3a54 <pm_system_suspend+0x140>)
    39d0:	7d1b      	ldrb	r3, [r3, #20]
    39d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    39d6:	4921      	ldr	r1, [pc, #132]	; (3a5c <pm_system_suspend+0x148>)
    39d8:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    39dc:	4790      	blx	r2
    39de:	e7ed      	b.n	39bc <pm_system_suspend+0xa8>
	__asm__ volatile(
    39e0:	f386 8811 	msr	BASEPRI, r6
    39e4:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    39e8:	f004 031f 	and.w	r3, r4, #31
    39ec:	2101      	movs	r1, #1
    39ee:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    39f0:	0963      	lsrs	r3, r4, #5
    39f2:	4a1e      	ldr	r2, [pc, #120]	; (3a6c <pm_system_suspend+0x158>)
    39f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    39f8:	e8d3 2fef 	ldaex	r2, [r3]
    39fc:	430a      	orrs	r2, r1
    39fe:	e8c3 2fe0 	stlex	r0, r2, [r3]
    3a02:	2800      	cmp	r0, #0
    3a04:	d1f8      	bne.n	39f8 <pm_system_suspend+0xe4>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    3a06:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3a0a:	4a14      	ldr	r2, [pc, #80]	; (3a5c <pm_system_suspend+0x148>)
    3a0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3a10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3a14:	ab08      	add	r3, sp, #32
    3a16:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    3a1a:	4b15      	ldr	r3, [pc, #84]	; (3a70 <pm_system_suspend+0x15c>)
    3a1c:	b10b      	cbz	r3, 3a22 <pm_system_suspend+0x10e>
		pm_power_state_set(info);
    3a1e:	f7fd fca5 	bl	136c <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    3a22:	f7ff ff15 	bl	3850 <pm_system_resume>
	k_sched_unlock();
    3a26:	f007 faff 	bl	b028 <k_sched_unlock>
	bool ret = true;
    3a2a:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    3a2c:	f004 021f 	and.w	r2, r4, #31
    3a30:	2301      	movs	r3, #1
    3a32:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a34:	0964      	lsrs	r4, r4, #5
    3a36:	4a08      	ldr	r2, [pc, #32]	; (3a58 <pm_system_suspend+0x144>)
    3a38:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    3a3c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3a3e:	e8d4 2fef 	ldaex	r2, [r4]
    3a42:	401a      	ands	r2, r3
    3a44:	e8c4 2fe1 	stlex	r1, r2, [r4]
    3a48:	2900      	cmp	r1, #0
    3a4a:	d1f8      	bne.n	3a3e <pm_system_suspend+0x12a>
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    3a4c:	b009      	add	sp, #36	; 0x24
    3a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = false;
    3a50:	2000      	movs	r0, #0
    3a52:	e7eb      	b.n	3a2c <pm_system_suspend+0x118>
    3a54:	20001ec0 	.word	0x20001ec0
    3a58:	20000da4 	.word	0x20000da4
    3a5c:	20000d98 	.word	0x20000d98
    3a60:	20000d8c 	.word	0x20000d8c
    3a64:	000f423f 	.word	0x000f423f
    3a68:	000f4240 	.word	0x000f4240
    3a6c:	20000d94 	.word	0x20000d94
    3a70:	0000136d 	.word	0x0000136d

00003a74 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    3a74:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    3a76:	4802      	ldr	r0, [pc, #8]	; (3a80 <nrf_cc3xx_platform_abort_init+0xc>)
    3a78:	f007 ff4a 	bl	b910 <nrf_cc3xx_platform_set_abort>
}
    3a7c:	bd08      	pop	{r3, pc}
    3a7e:	bf00      	nop
    3a80:	0000f6d4 	.word	0x0000f6d4

00003a84 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3a84:	b308      	cbz	r0, 3aca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3a86:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3a88:	6843      	ldr	r3, [r0, #4]
    3a8a:	2b04      	cmp	r3, #4
    3a8c:	d007      	beq.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
    3a8e:	2b08      	cmp	r3, #8
    3a90:	d012      	beq.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3a92:	b1fb      	cbz	r3, 3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    3a94:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    3a96:	f006 fe1f 	bl	a6d8 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3a9a:	2000      	movs	r0, #0
    3a9c:	e014      	b.n	3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    3a9e:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3aa0:	2200      	movs	r2, #0
    3aa2:	e8d3 1fef 	ldaex	r1, [r3]
    3aa6:	2901      	cmp	r1, #1
    3aa8:	d103      	bne.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
    3aaa:	e8c3 2fe0 	stlex	r0, r2, [r3]
    3aae:	2800      	cmp	r0, #0
    3ab0:	d1f7      	bne.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3ab2:	d10d      	bne.n	3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>
    3ab4:	4610      	mov	r0, r2
    3ab6:	e007      	b.n	3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    3ab8:	6803      	ldr	r3, [r0, #0]
    3aba:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    3abc:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3ac0:	2000      	movs	r0, #0
    3ac2:	4a05      	ldr	r2, [pc, #20]	; (3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>)
    3ac4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    }
}
    3ac8:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3aca:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    3ace:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3ad0:	4802      	ldr	r0, [pc, #8]	; (3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>)
    3ad2:	e7f9      	b.n	3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3ad4:	4802      	ldr	r0, [pc, #8]	; (3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>)
    3ad6:	e7f7      	b.n	3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>
    3ad8:	50030000 	.word	0x50030000
    3adc:	ffff8fe9 	.word	0xffff8fe9
    3ae0:	ffff8fea 	.word	0xffff8fea

00003ae4 <mutex_lock_platform>:
    if(mutex == NULL) {
    3ae4:	b370      	cbz	r0, 3b44 <mutex_lock_platform+0x60>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3ae6:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    3ae8:	6843      	ldr	r3, [r0, #4]
    3aea:	2b04      	cmp	r3, #4
    3aec:	d004      	beq.n	3af8 <mutex_lock_platform+0x14>
    3aee:	2b08      	cmp	r3, #8
    3af0:	d00f      	beq.n	3b12 <mutex_lock_platform+0x2e>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3af2:	b9c3      	cbnz	r3, 3b26 <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3af4:	4815      	ldr	r0, [pc, #84]	; (3b4c <mutex_lock_platform+0x68>)
    3af6:	e00b      	b.n	3b10 <mutex_lock_platform+0x2c>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    3af8:	6803      	ldr	r3, [r0, #0]
    3afa:	2201      	movs	r2, #1
    3afc:	e8d3 1fef 	ldaex	r1, [r3]
    3b00:	2900      	cmp	r1, #0
    3b02:	d103      	bne.n	3b0c <mutex_lock_platform+0x28>
    3b04:	e8c3 2fe0 	stlex	r0, r2, [r3]
    3b08:	2800      	cmp	r0, #0
    3b0a:	d1f7      	bne.n	3afc <mutex_lock_platform+0x18>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3b0c:	d116      	bne.n	3b3c <mutex_lock_platform+0x58>
    3b0e:	2000      	movs	r0, #0
}
    3b10:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    3b12:	6803      	ldr	r3, [r0, #0]
    3b14:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    3b16:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3b1a:	4a0d      	ldr	r2, [pc, #52]	; (3b50 <mutex_lock_platform+0x6c>)
    3b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3b20:	b973      	cbnz	r3, 3b40 <mutex_lock_platform+0x5c>
    3b22:	2000      	movs	r0, #0
    3b24:	e7f4      	b.n	3b10 <mutex_lock_platform+0x2c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3b26:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3b28:	f04f 32ff 	mov.w	r2, #4294967295
    3b2c:	f04f 33ff 	mov.w	r3, #4294967295
    3b30:	f006 fd48 	bl	a5c4 <z_impl_k_mutex_lock>
        if (ret == 0) {
    3b34:	2800      	cmp	r0, #0
    3b36:	d0eb      	beq.n	3b10 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    3b38:	4806      	ldr	r0, [pc, #24]	; (3b54 <mutex_lock_platform+0x70>)
    3b3a:	e7e9      	b.n	3b10 <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3b3c:	4805      	ldr	r0, [pc, #20]	; (3b54 <mutex_lock_platform+0x70>)
    3b3e:	e7e7      	b.n	3b10 <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3b40:	4804      	ldr	r0, [pc, #16]	; (3b54 <mutex_lock_platform+0x70>)
    3b42:	e7e5      	b.n	3b10 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3b44:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    3b48:	4770      	bx	lr
    3b4a:	bf00      	nop
    3b4c:	ffff8fea 	.word	0xffff8fea
    3b50:	50030000 	.word	0x50030000
    3b54:	ffff8fe9 	.word	0xffff8fe9

00003b58 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3b58:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3b5a:	4604      	mov	r4, r0
    3b5c:	b188      	cbz	r0, 3b82 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3b5e:	6863      	ldr	r3, [r4, #4]
    3b60:	2b04      	cmp	r3, #4
    3b62:	d00d      	beq.n	3b80 <mutex_free_platform+0x28>
    3b64:	2b08      	cmp	r3, #8
    3b66:	d00b      	beq.n	3b80 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3b68:	b153      	cbz	r3, 3b80 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3b6a:	f013 0f02 	tst.w	r3, #2
    3b6e:	d00d      	beq.n	3b8c <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3b70:	4621      	mov	r1, r4
    3b72:	4809      	ldr	r0, [pc, #36]	; (3b98 <mutex_free_platform+0x40>)
    3b74:	f00a fbae 	bl	e2d4 <k_mem_slab_free>
        mutex->mutex = NULL;
    3b78:	2300      	movs	r3, #0
    3b7a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3b7c:	2300      	movs	r3, #0
    3b7e:	6063      	str	r3, [r4, #4]
}
    3b80:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    3b82:	4b06      	ldr	r3, [pc, #24]	; (3b9c <mutex_free_platform+0x44>)
    3b84:	685b      	ldr	r3, [r3, #4]
    3b86:	4806      	ldr	r0, [pc, #24]	; (3ba0 <mutex_free_platform+0x48>)
    3b88:	4798      	blx	r3
    3b8a:	e7e8      	b.n	3b5e <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3b8c:	2214      	movs	r2, #20
    3b8e:	2100      	movs	r1, #0
    3b90:	6820      	ldr	r0, [r4, #0]
    3b92:	f009 fd41 	bl	d618 <memset>
    3b96:	e7f1      	b.n	3b7c <mutex_free_platform+0x24>
    3b98:	20000da8 	.word	0x20000da8
    3b9c:	200002dc 	.word	0x200002dc
    3ba0:	0000f6dc 	.word	0x0000f6dc

00003ba4 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3ba4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3ba6:	4604      	mov	r4, r0
    3ba8:	b178      	cbz	r0, 3bca <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3baa:	6863      	ldr	r3, [r4, #4]
    3bac:	2b04      	cmp	r3, #4
    3bae:	d00b      	beq.n	3bc8 <mutex_init_platform+0x24>
    3bb0:	2b08      	cmp	r3, #8
    3bb2:	d009      	beq.n	3bc8 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3bb4:	b90b      	cbnz	r3, 3bba <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    3bb6:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3bb8:	b163      	cbz	r3, 3bd4 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    3bba:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3bbc:	f00a fc17 	bl	e3ee <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3bc0:	6863      	ldr	r3, [r4, #4]
    3bc2:	f043 0301 	orr.w	r3, r3, #1
    3bc6:	6063      	str	r3, [r4, #4]
}
    3bc8:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    3bca:	4b0f      	ldr	r3, [pc, #60]	; (3c08 <mutex_init_platform+0x64>)
    3bcc:	685b      	ldr	r3, [r3, #4]
    3bce:	480f      	ldr	r0, [pc, #60]	; (3c0c <mutex_init_platform+0x68>)
    3bd0:	4798      	blx	r3
    3bd2:	e7ea      	b.n	3baa <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3bd4:	f04f 32ff 	mov.w	r2, #4294967295
    3bd8:	f04f 33ff 	mov.w	r3, #4294967295
    3bdc:	4621      	mov	r1, r4
    3bde:	480c      	ldr	r0, [pc, #48]	; (3c10 <mutex_init_platform+0x6c>)
    3be0:	f006 fbac 	bl	a33c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3be4:	b908      	cbnz	r0, 3bea <mutex_init_platform+0x46>
    3be6:	6823      	ldr	r3, [r4, #0]
    3be8:	b91b      	cbnz	r3, 3bf2 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    3bea:	4b07      	ldr	r3, [pc, #28]	; (3c08 <mutex_init_platform+0x64>)
    3bec:	685b      	ldr	r3, [r3, #4]
    3bee:	4809      	ldr	r0, [pc, #36]	; (3c14 <mutex_init_platform+0x70>)
    3bf0:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3bf2:	2214      	movs	r2, #20
    3bf4:	2100      	movs	r1, #0
    3bf6:	6820      	ldr	r0, [r4, #0]
    3bf8:	f009 fd0e 	bl	d618 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3bfc:	6863      	ldr	r3, [r4, #4]
    3bfe:	f043 0302 	orr.w	r3, r3, #2
    3c02:	6063      	str	r3, [r4, #4]
    3c04:	e7d9      	b.n	3bba <mutex_init_platform+0x16>
    3c06:	bf00      	nop
    3c08:	200002dc 	.word	0x200002dc
    3c0c:	0000f6dc 	.word	0x0000f6dc
    3c10:	20000da8 	.word	0x20000da8
    3c14:	0000f704 	.word	0x0000f704

00003c18 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3c18:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3c1a:	2340      	movs	r3, #64	; 0x40
    3c1c:	2214      	movs	r2, #20
    3c1e:	4904      	ldr	r1, [pc, #16]	; (3c30 <nrf_cc3xx_platform_mutex_init+0x18>)
    3c20:	4804      	ldr	r0, [pc, #16]	; (3c34 <nrf_cc3xx_platform_mutex_init+0x1c>)
    3c22:	f00a fb49 	bl	e2b8 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3c26:	4904      	ldr	r1, [pc, #16]	; (3c38 <nrf_cc3xx_platform_mutex_init+0x20>)
    3c28:	4804      	ldr	r0, [pc, #16]	; (3c3c <nrf_cc3xx_platform_mutex_init+0x24>)
    3c2a:	f007 fecf 	bl	b9cc <nrf_cc3xx_platform_set_mutexes>
}
    3c2e:	bd08      	pop	{r3, pc}
    3c30:	20000dc4 	.word	0x20000dc4
    3c34:	20000da8 	.word	0x20000da8
    3c38:	0000f744 	.word	0x0000f744
    3c3c:	0000f734 	.word	0x0000f734

00003c40 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3c40:	4901      	ldr	r1, [pc, #4]	; (3c48 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3c42:	2210      	movs	r2, #16
	str	r2, [r1]
    3c44:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3c46:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3c48:	e000ed10 	.word	0xe000ed10

00003c4c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3c4c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3c4e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3c50:	f380 8811 	msr	BASEPRI, r0
	isb
    3c54:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3c58:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3c5c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3c5e:	b662      	cpsie	i
	isb
    3c60:	f3bf 8f6f 	isb	sy

	bx	lr
    3c64:	4770      	bx	lr
    3c66:	bf00      	nop

00003c68 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3c68:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3c6a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3c6c:	f381 8811 	msr	BASEPRI, r1

	wfe
    3c70:	bf20      	wfe

	msr	BASEPRI, r0
    3c72:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3c76:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3c78:	4770      	bx	lr
    3c7a:	bf00      	nop

00003c7c <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    3c7c:	b570      	push	{r4, r5, r6, lr}
    3c7e:	b082      	sub	sp, #8
    3c80:	4604      	mov	r4, r0
    3c82:	4d1f      	ldr	r5, [pc, #124]	; (3d00 <esf_dump+0x84>)
    3c84:	4b1f      	ldr	r3, [pc, #124]	; (3d04 <esf_dump+0x88>)
    3c86:	1aed      	subs	r5, r5, r3
    3c88:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3c8a:	2601      	movs	r6, #1
    3c8c:	f04f 0300 	mov.w	r3, #0
    3c90:	f366 0302 	bfi	r3, r6, #0, #3
    3c94:	f36f 03c5 	bfc	r3, #3, #3
    3c98:	f365 138f 	bfi	r3, r5, #6, #10
    3c9c:	f8ad 3000 	strh.w	r3, [sp]
    3ca0:	6883      	ldr	r3, [r0, #8]
    3ca2:	6842      	ldr	r2, [r0, #4]
    3ca4:	6801      	ldr	r1, [r0, #0]
    3ca6:	4818      	ldr	r0, [pc, #96]	; (3d08 <esf_dump+0x8c>)
    3ca8:	f7fd fdde 	bl	1868 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3cac:	f04f 0300 	mov.w	r3, #0
    3cb0:	f366 0302 	bfi	r3, r6, #0, #3
    3cb4:	f36f 03c5 	bfc	r3, #3, #3
    3cb8:	f365 138f 	bfi	r3, r5, #6, #10
    3cbc:	f8ad 3000 	strh.w	r3, [sp]
    3cc0:	6963      	ldr	r3, [r4, #20]
    3cc2:	6922      	ldr	r2, [r4, #16]
    3cc4:	68e1      	ldr	r1, [r4, #12]
    3cc6:	4811      	ldr	r0, [pc, #68]	; (3d0c <esf_dump+0x90>)
    3cc8:	f7fd fdce 	bl	1868 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3ccc:	f04f 0200 	mov.w	r2, #0
    3cd0:	f366 0202 	bfi	r2, r6, #0, #3
    3cd4:	f36f 02c5 	bfc	r2, #3, #3
    3cd8:	f365 128f 	bfi	r2, r5, #6, #10
    3cdc:	69e1      	ldr	r1, [r4, #28]
    3cde:	480c      	ldr	r0, [pc, #48]	; (3d10 <esf_dump+0x94>)
    3ce0:	f7fd fe00 	bl	18e4 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    3ce4:	f04f 0200 	mov.w	r2, #0
    3ce8:	f366 0202 	bfi	r2, r6, #0, #3
    3cec:	f36f 02c5 	bfc	r2, #3, #3
    3cf0:	f365 128f 	bfi	r2, r5, #6, #10
    3cf4:	69a1      	ldr	r1, [r4, #24]
    3cf6:	4807      	ldr	r0, [pc, #28]	; (3d14 <esf_dump+0x98>)
    3cf8:	f7fd fdf4 	bl	18e4 <log_1>
		esf->basic.pc);
}
    3cfc:	b002      	add	sp, #8
    3cfe:	bd70      	pop	{r4, r5, r6, pc}
    3d00:	0000ef2c 	.word	0x0000ef2c
    3d04:	0000eefc 	.word	0x0000eefc
    3d08:	0000f758 	.word	0x0000f758
    3d0c:	0000f788 	.word	0x0000f788
    3d10:	0000f7b8 	.word	0x0000f7b8
    3d14:	0000f7c8 	.word	0x0000f7c8

00003d18 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3d18:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3d1a:	2b00      	cmp	r3, #0
    3d1c:	db08      	blt.n	3d30 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d1e:	f000 001f 	and.w	r0, r0, #31
    3d22:	095b      	lsrs	r3, r3, #5
    3d24:	2201      	movs	r2, #1
    3d26:	fa02 f000 	lsl.w	r0, r2, r0
    3d2a:	4a02      	ldr	r2, [pc, #8]	; (3d34 <arch_irq_enable+0x1c>)
    3d2c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    3d30:	4770      	bx	lr
    3d32:	bf00      	nop
    3d34:	e000e100 	.word	0xe000e100

00003d38 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3d38:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3d3a:	2b00      	cmp	r3, #0
    3d3c:	db0d      	blt.n	3d5a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d3e:	f000 001f 	and.w	r0, r0, #31
    3d42:	095b      	lsrs	r3, r3, #5
    3d44:	2201      	movs	r2, #1
    3d46:	fa02 f000 	lsl.w	r0, r2, r0
    3d4a:	3320      	adds	r3, #32
    3d4c:	4a03      	ldr	r2, [pc, #12]	; (3d5c <arch_irq_disable+0x24>)
    3d4e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    3d52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3d56:	f3bf 8f6f 	isb	sy
}
    3d5a:	4770      	bx	lr
    3d5c:	e000e100 	.word	0xe000e100

00003d60 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3d60:	0942      	lsrs	r2, r0, #5
    3d62:	4b05      	ldr	r3, [pc, #20]	; (3d78 <arch_irq_is_enabled+0x18>)
    3d64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3d68:	f000 001f 	and.w	r0, r0, #31
    3d6c:	2301      	movs	r3, #1
    3d6e:	fa03 f000 	lsl.w	r0, r3, r0
}
    3d72:	4010      	ands	r0, r2
    3d74:	4770      	bx	lr
    3d76:	bf00      	nop
    3d78:	e000e100 	.word	0xe000e100

00003d7c <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    3d7c:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3d7e:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3d80:	2b00      	cmp	r3, #0
    3d82:	db08      	blt.n	3d96 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3d84:	0149      	lsls	r1, r1, #5
    3d86:	b2c9      	uxtb	r1, r1
    3d88:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3d8c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3d90:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    3d94:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3d96:	f000 000f 	and.w	r0, r0, #15
    3d9a:	0149      	lsls	r1, r1, #5
    3d9c:	b2c9      	uxtb	r1, r1
    3d9e:	4b01      	ldr	r3, [pc, #4]	; (3da4 <z_arm_irq_priority_set+0x28>)
    3da0:	5419      	strb	r1, [r3, r0]
}
    3da2:	4770      	bx	lr
    3da4:	e000ed14 	.word	0xe000ed14

00003da8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3da8:	bf30      	wfi
    b z_SysNmiOnReset
    3daa:	f7ff bffd 	b.w	3da8 <z_SysNmiOnReset>
    3dae:	bf00      	nop

00003db0 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    3db0:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3db2:	4b0b      	ldr	r3, [pc, #44]	; (3de0 <z_arm_prep_c+0x30>)
    3db4:	4a0b      	ldr	r2, [pc, #44]	; (3de4 <z_arm_prep_c+0x34>)
    3db6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3dba:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    3dbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3dc0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3dc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3dc8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3dd0:	f006 fa52 	bl	a278 <z_bss_zero>
	z_data_copy();
    3dd4:	f007 fab8 	bl	b348 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3dd8:	f000 fc8a 	bl	46f0 <z_arm_interrupt_init>
	z_cstart();
    3ddc:	f006 fa58 	bl	a290 <z_cstart>
    3de0:	e000ed00 	.word	0xe000ed00
    3de4:	00000000 	.word	0x00000000

00003de8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3de8:	4a0a      	ldr	r2, [pc, #40]	; (3e14 <arch_swap+0x2c>)
    3dea:	6893      	ldr	r3, [r2, #8]
    3dec:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    3df0:	4909      	ldr	r1, [pc, #36]	; (3e18 <arch_swap+0x30>)
    3df2:	6809      	ldr	r1, [r1, #0]
    3df4:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3df8:	4908      	ldr	r1, [pc, #32]	; (3e1c <arch_swap+0x34>)
    3dfa:	684b      	ldr	r3, [r1, #4]
    3dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3e00:	604b      	str	r3, [r1, #4]
    3e02:	2300      	movs	r3, #0
    3e04:	f383 8811 	msr	BASEPRI, r3
    3e08:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3e0c:	6893      	ldr	r3, [r2, #8]
}
    3e0e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    3e12:	4770      	bx	lr
    3e14:	20001ec0 	.word	0x20001ec0
    3e18:	000100e0 	.word	0x000100e0
    3e1c:	e000ed00 	.word	0xe000ed00

00003e20 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3e20:	4914      	ldr	r1, [pc, #80]	; (3e74 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3e22:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3e24:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3e28:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3e2a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3e2e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3e32:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3e34:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3e38:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3e3c:	4f0e      	ldr	r7, [pc, #56]	; (3e78 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3e3e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3e42:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    3e44:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3e46:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3e48:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    3e4c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3e4e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3e52:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3e56:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3e5a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3e5e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    3e62:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    3e66:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    3e68:	f009 fb1b 	bl	d4a2 <configure_builtin_stack_guard>
    pop {r2, lr}
    3e6c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3e70:	4770      	bx	lr
    3e72:	0000      	.short	0x0000
    ldr r1, =_kernel
    3e74:	20001ec0 	.word	0x20001ec0
    ldr v4, =_SCS_ICSR
    3e78:	e000ed04 	.word	0xe000ed04

00003e7c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3e7c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3e80:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3e82:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3e86:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3e8a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3e8c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3e90:	2902      	cmp	r1, #2
    beq _oops
    3e92:	d0ff      	beq.n	3e94 <_oops>

00003e94 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3e94:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    3e96:	f009 faf2 	bl	d47e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3e9a:	bd01      	pop	{r0, pc}

00003e9c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    3e9c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3e9e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    3ea2:	490d      	ldr	r1, [pc, #52]	; (3ed8 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    3ea4:	f021 0101 	bic.w	r1, r1, #1
    3ea8:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    3eac:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3eb0:	9b01      	ldr	r3, [sp, #4]
    3eb2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    3eb6:	9b02      	ldr	r3, [sp, #8]
    3eb8:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3ebc:	9b03      	ldr	r3, [sp, #12]
    3ebe:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3ec2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3ec6:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    3eca:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3ecc:	2300      	movs	r3, #0
    3ece:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3ed2:	bc10      	pop	{r4}
    3ed4:	4770      	bx	lr
    3ed6:	bf00      	nop
    3ed8:	0000bf6f 	.word	0x0000bf6f

00003edc <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3edc:	4b09      	ldr	r3, [pc, #36]	; (3f04 <arch_switch_to_main_thread+0x28>)
    3ede:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    3ee0:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    3ee4:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3ee8:	4610      	mov	r0, r2
    3eea:	f381 8809 	msr	PSP, r1
    3eee:	2100      	movs	r1, #0
    3ef0:	b663      	cpsie	if
    3ef2:	f381 8811 	msr	BASEPRI, r1
    3ef6:	f3bf 8f6f 	isb	sy
    3efa:	2200      	movs	r2, #0
    3efc:	2300      	movs	r3, #0
    3efe:	f008 f836 	bl	bf6e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3f02:	bf00      	nop
    3f04:	20001ec0 	.word	0x20001ec0

00003f08 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3f08:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3f0a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3f0c:	4a0b      	ldr	r2, [pc, #44]	; (3f3c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3f0e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    3f10:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3f12:	bf1e      	ittt	ne
	movne	r1, #0
    3f14:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3f16:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3f18:	f00a fa4d 	blne	e3b6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3f1c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3f1e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3f22:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3f26:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3f2a:	4905      	ldr	r1, [pc, #20]	; (3f40 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3f2c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3f2e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3f30:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3f32:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3f36:	4903      	ldr	r1, [pc, #12]	; (3f44 <_isr_wrapper+0x3c>)
	bx r1
    3f38:	4708      	bx	r1
    3f3a:	0000      	.short	0x0000
	ldr r2, =_kernel
    3f3c:	20001ec0 	.word	0x20001ec0
	ldr r1, =_sw_isr_table
    3f40:	0000ecd4 	.word	0x0000ecd4
	ldr r1, =z_arm_int_exit
    3f44:	00003f49 	.word	0x00003f49

00003f48 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3f48:	4b04      	ldr	r3, [pc, #16]	; (3f5c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3f4a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3f4c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    3f4e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3f50:	d003      	beq.n	3f5a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3f52:	4903      	ldr	r1, [pc, #12]	; (3f60 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3f58:	600a      	str	r2, [r1, #0]

00003f5a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3f5a:	4770      	bx	lr
	ldr r3, =_kernel
    3f5c:	20001ec0 	.word	0x20001ec0
	ldr r1, =_SCS_ICSR
    3f60:	e000ed04 	.word	0xe000ed04

00003f64 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    3f64:	b510      	push	{r4, lr}
    3f66:	4b5a      	ldr	r3, [pc, #360]	; (40d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
    3f68:	4a5a      	ldr	r2, [pc, #360]	; (40d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>)
    3f6a:	1a9b      	subs	r3, r3, r2
    3f6c:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    3f6e:	f04f 0100 	mov.w	r1, #0
    3f72:	2201      	movs	r2, #1
    3f74:	f362 0102 	bfi	r1, r2, #0, #3
    3f78:	f36f 01c5 	bfc	r1, #3, #3
    3f7c:	f363 118f 	bfi	r1, r3, #6, #10
    3f80:	4855      	ldr	r0, [pc, #340]	; (40d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>)
    3f82:	f7fd fd21 	bl	19c8 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3f86:	4b55      	ldr	r3, [pc, #340]	; (40dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>)
    3f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f8a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    3f8e:	d126      	bne.n	3fde <usage_fault+0x7a>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3f90:	4b52      	ldr	r3, [pc, #328]	; (40dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>)
    3f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f94:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    3f98:	d132      	bne.n	4000 <CONFIG_FPROTECT_BLOCK_SIZE>
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    3f9a:	4b50      	ldr	r3, [pc, #320]	; (40dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>)
    3f9c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    3f9e:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    3fa2:	d13e      	bne.n	4022 <CONFIG_FPROTECT_BLOCK_SIZE+0x22>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3fa4:	4b4d      	ldr	r3, [pc, #308]	; (40dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>)
    3fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3fa8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    3fac:	d14b      	bne.n	4046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3fae:	4b4b      	ldr	r3, [pc, #300]	; (40dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>)
    3fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3fb2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    3fb6:	d157      	bne.n	4068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3fb8:	4b48      	ldr	r3, [pc, #288]	; (40dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>)
    3fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3fbc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    3fc0:	d163      	bne.n	408a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3fc2:	4b46      	ldr	r3, [pc, #280]	; (40dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>)
    3fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3fc6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3fca:	d16f      	bne.n	40ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3fcc:	4a43      	ldr	r2, [pc, #268]	; (40dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>)
    3fce:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3fd0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3fd4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3fd8:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    3fda:	4620      	mov	r0, r4
    3fdc:	bd10      	pop	{r4, pc}
    3fde:	4b3c      	ldr	r3, [pc, #240]	; (40d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
    3fe0:	4a3c      	ldr	r2, [pc, #240]	; (40d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>)
    3fe2:	1a9b      	subs	r3, r3, r2
    3fe4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
    3fe6:	f04f 0100 	mov.w	r1, #0
    3fea:	2201      	movs	r2, #1
    3fec:	f362 0102 	bfi	r1, r2, #0, #3
    3ff0:	f36f 01c5 	bfc	r1, #3, #3
    3ff4:	f363 118f 	bfi	r1, r3, #6, #10
    3ff8:	4839      	ldr	r0, [pc, #228]	; (40e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>)
    3ffa:	f7fd fce5 	bl	19c8 <log_0>
    3ffe:	e7c7      	b.n	3f90 <usage_fault+0x2c>
    4000:	4b33      	ldr	r3, [pc, #204]	; (40d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
    4002:	4a34      	ldr	r2, [pc, #208]	; (40d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>)
    4004:	1a9b      	subs	r3, r3, r2
    4006:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
    4008:	f04f 0100 	mov.w	r1, #0
    400c:	2201      	movs	r2, #1
    400e:	f362 0102 	bfi	r1, r2, #0, #3
    4012:	f36f 01c5 	bfc	r1, #3, #3
    4016:	f363 118f 	bfi	r1, r3, #6, #10
    401a:	4832      	ldr	r0, [pc, #200]	; (40e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>)
    401c:	f7fd fcd4 	bl	19c8 <log_0>
    4020:	e7bb      	b.n	3f9a <usage_fault+0x36>
    4022:	4b2b      	ldr	r3, [pc, #172]	; (40d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
    4024:	4a2b      	ldr	r2, [pc, #172]	; (40d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>)
    4026:	1a9b      	subs	r3, r3, r2
    4028:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    402a:	f04f 0100 	mov.w	r1, #0
    402e:	2201      	movs	r2, #1
    4030:	f362 0102 	bfi	r1, r2, #0, #3
    4034:	f36f 01c5 	bfc	r1, #3, #3
    4038:	f363 118f 	bfi	r1, r3, #6, #10
    403c:	482a      	ldr	r0, [pc, #168]	; (40e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>)
    403e:	f7fd fcc3 	bl	19c8 <log_0>
		reason = K_ERR_STACK_CHK_FAIL;
    4042:	2402      	movs	r4, #2
    4044:	e7ae      	b.n	3fa4 <usage_fault+0x40>
    4046:	4b22      	ldr	r3, [pc, #136]	; (40d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
    4048:	4a22      	ldr	r2, [pc, #136]	; (40d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>)
    404a:	1a9b      	subs	r3, r3, r2
    404c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
    404e:	f04f 0100 	mov.w	r1, #0
    4052:	2201      	movs	r2, #1
    4054:	f362 0102 	bfi	r1, r2, #0, #3
    4058:	f36f 01c5 	bfc	r1, #3, #3
    405c:	f363 118f 	bfi	r1, r3, #6, #10
    4060:	4822      	ldr	r0, [pc, #136]	; (40ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>)
    4062:	f7fd fcb1 	bl	19c8 <log_0>
    4066:	e7a2      	b.n	3fae <usage_fault+0x4a>
    4068:	4b19      	ldr	r3, [pc, #100]	; (40d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
    406a:	4a1a      	ldr	r2, [pc, #104]	; (40d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>)
    406c:	1a9b      	subs	r3, r3, r2
    406e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    4070:	f04f 0100 	mov.w	r1, #0
    4074:	2201      	movs	r2, #1
    4076:	f362 0102 	bfi	r1, r2, #0, #3
    407a:	f36f 01c5 	bfc	r1, #3, #3
    407e:	f363 118f 	bfi	r1, r3, #6, #10
    4082:	481b      	ldr	r0, [pc, #108]	; (40f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
    4084:	f7fd fca0 	bl	19c8 <log_0>
    4088:	e796      	b.n	3fb8 <usage_fault+0x54>
    408a:	4b11      	ldr	r3, [pc, #68]	; (40d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
    408c:	4a11      	ldr	r2, [pc, #68]	; (40d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>)
    408e:	1a9b      	subs	r3, r3, r2
    4090:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
    4092:	f04f 0100 	mov.w	r1, #0
    4096:	2201      	movs	r2, #1
    4098:	f362 0102 	bfi	r1, r2, #0, #3
    409c:	f36f 01c5 	bfc	r1, #3, #3
    40a0:	f363 118f 	bfi	r1, r3, #6, #10
    40a4:	4813      	ldr	r0, [pc, #76]	; (40f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>)
    40a6:	f7fd fc8f 	bl	19c8 <log_0>
    40aa:	e78a      	b.n	3fc2 <usage_fault+0x5e>
    40ac:	4b08      	ldr	r3, [pc, #32]	; (40d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
    40ae:	4a09      	ldr	r2, [pc, #36]	; (40d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>)
    40b0:	1a9b      	subs	r3, r3, r2
    40b2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    40b4:	f04f 0100 	mov.w	r1, #0
    40b8:	2201      	movs	r2, #1
    40ba:	f362 0102 	bfi	r1, r2, #0, #3
    40be:	f36f 01c5 	bfc	r1, #3, #3
    40c2:	f363 118f 	bfi	r1, r3, #6, #10
    40c6:	480c      	ldr	r0, [pc, #48]	; (40f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
    40c8:	f7fd fc7e 	bl	19c8 <log_0>
    40cc:	e77e      	b.n	3fcc <usage_fault+0x68>
    40ce:	bf00      	nop
    40d0:	0000ef2c 	.word	0x0000ef2c
    40d4:	0000eefc 	.word	0x0000eefc
    40d8:	0000f7f8 	.word	0x0000f7f8
    40dc:	e000ed00 	.word	0xe000ed00
    40e0:	0000f810 	.word	0x0000f810
    40e4:	0000f824 	.word	0x0000f824
    40e8:	0000f840 	.word	0x0000f840
    40ec:	0000f86c 	.word	0x0000f86c
    40f0:	0000f88c 	.word	0x0000f88c
    40f4:	0000f8b4 	.word	0x0000f8b4
    40f8:	0000f8d0 	.word	0x0000f8d0

000040fc <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    40fc:	b508      	push	{r3, lr}
	*recoverable = false;
    40fe:	2200      	movs	r2, #0
    4100:	700a      	strb	r2, [r1, #0]
    4102:	4b08      	ldr	r3, [pc, #32]	; (4124 <debug_monitor+0x28>)
    4104:	4908      	ldr	r1, [pc, #32]	; (4128 <debug_monitor+0x2c>)
    4106:	1a5b      	subs	r3, r3, r1
    4108:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
    410a:	f04f 0100 	mov.w	r1, #0
    410e:	2001      	movs	r0, #1
    4110:	f360 0102 	bfi	r1, r0, #0, #3
    4114:	f362 01c5 	bfi	r1, r2, #3, #3
    4118:	f363 118f 	bfi	r1, r3, #6, #10
    411c:	4803      	ldr	r0, [pc, #12]	; (412c <debug_monitor+0x30>)
    411e:	f7fd fc53 	bl	19c8 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    4122:	bd08      	pop	{r3, pc}
    4124:	0000ef2c 	.word	0x0000ef2c
    4128:	0000eefc 	.word	0x0000eefc
    412c:	0000f8fc 	.word	0x0000f8fc

00004130 <mem_manage_fault>:
{
    4130:	b570      	push	{r4, r5, r6, lr}
    4132:	4605      	mov	r5, r0
    4134:	460e      	mov	r6, r1
    4136:	4614      	mov	r4, r2
    4138:	4b56      	ldr	r3, [pc, #344]	; (4294 <mem_manage_fault+0x164>)
    413a:	4a57      	ldr	r2, [pc, #348]	; (4298 <mem_manage_fault+0x168>)
    413c:	1a9b      	subs	r3, r3, r2
    413e:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    4140:	f04f 0100 	mov.w	r1, #0
    4144:	2201      	movs	r2, #1
    4146:	f362 0102 	bfi	r1, r2, #0, #3
    414a:	f36f 01c5 	bfc	r1, #3, #3
    414e:	f363 118f 	bfi	r1, r3, #6, #10
    4152:	4852      	ldr	r0, [pc, #328]	; (429c <mem_manage_fault+0x16c>)
    4154:	f7fd fc38 	bl	19c8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4158:	4b51      	ldr	r3, [pc, #324]	; (42a0 <mem_manage_fault+0x170>)
    415a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    415c:	f013 0f10 	tst.w	r3, #16
    4160:	d126      	bne.n	41b0 <mem_manage_fault+0x80>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4162:	4b4f      	ldr	r3, [pc, #316]	; (42a0 <mem_manage_fault+0x170>)
    4164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4166:	f013 0f08 	tst.w	r3, #8
    416a:	d132      	bne.n	41d2 <mem_manage_fault+0xa2>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    416c:	4b4c      	ldr	r3, [pc, #304]	; (42a0 <mem_manage_fault+0x170>)
    416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4170:	f013 0f02 	tst.w	r3, #2
    4174:	d13e      	bne.n	41f4 <mem_manage_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4176:	4b4a      	ldr	r3, [pc, #296]	; (42a0 <mem_manage_fault+0x170>)
    4178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    417a:	f013 0f01 	tst.w	r3, #1
    417e:	d167      	bne.n	4250 <mem_manage_fault+0x120>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4180:	4b47      	ldr	r3, [pc, #284]	; (42a0 <mem_manage_fault+0x170>)
    4182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4184:	f013 0f20 	tst.w	r3, #32
    4188:	d173      	bne.n	4272 <mem_manage_fault+0x142>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    418a:	4b45      	ldr	r3, [pc, #276]	; (42a0 <mem_manage_fault+0x170>)
    418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    418e:	f013 0f10 	tst.w	r3, #16
    4192:	d101      	bne.n	4198 <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4194:	4b42      	ldr	r3, [pc, #264]	; (42a0 <mem_manage_fault+0x170>)
    4196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4198:	4a41      	ldr	r2, [pc, #260]	; (42a0 <mem_manage_fault+0x170>)
    419a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    419c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    41a0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    41a2:	2101      	movs	r1, #1
    41a4:	4628      	mov	r0, r5
    41a6:	f009 f981 	bl	d4ac <memory_fault_recoverable>
    41aa:	7020      	strb	r0, [r4, #0]
}
    41ac:	2000      	movs	r0, #0
    41ae:	bd70      	pop	{r4, r5, r6, pc}
    41b0:	4b38      	ldr	r3, [pc, #224]	; (4294 <mem_manage_fault+0x164>)
    41b2:	4a39      	ldr	r2, [pc, #228]	; (4298 <mem_manage_fault+0x168>)
    41b4:	1a9b      	subs	r3, r3, r2
    41b6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
    41b8:	f04f 0100 	mov.w	r1, #0
    41bc:	2201      	movs	r2, #1
    41be:	f362 0102 	bfi	r1, r2, #0, #3
    41c2:	f36f 01c5 	bfc	r1, #3, #3
    41c6:	f363 118f 	bfi	r1, r3, #6, #10
    41ca:	4836      	ldr	r0, [pc, #216]	; (42a4 <mem_manage_fault+0x174>)
    41cc:	f7fd fbfc 	bl	19c8 <log_0>
    41d0:	e7c7      	b.n	4162 <mem_manage_fault+0x32>
    41d2:	4b30      	ldr	r3, [pc, #192]	; (4294 <mem_manage_fault+0x164>)
    41d4:	4a30      	ldr	r2, [pc, #192]	; (4298 <mem_manage_fault+0x168>)
    41d6:	1a9b      	subs	r3, r3, r2
    41d8:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    41da:	f04f 0100 	mov.w	r1, #0
    41de:	2201      	movs	r2, #1
    41e0:	f362 0102 	bfi	r1, r2, #0, #3
    41e4:	f36f 01c5 	bfc	r1, #3, #3
    41e8:	f363 118f 	bfi	r1, r3, #6, #10
    41ec:	482e      	ldr	r0, [pc, #184]	; (42a8 <mem_manage_fault+0x178>)
    41ee:	f7fd fbeb 	bl	19c8 <log_0>
    41f2:	e7bb      	b.n	416c <mem_manage_fault+0x3c>
    41f4:	4b27      	ldr	r3, [pc, #156]	; (4294 <mem_manage_fault+0x164>)
    41f6:	4a28      	ldr	r2, [pc, #160]	; (4298 <mem_manage_fault+0x168>)
    41f8:	1a9b      	subs	r3, r3, r2
    41fa:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
    41fc:	f04f 0100 	mov.w	r1, #0
    4200:	2201      	movs	r2, #1
    4202:	f362 0102 	bfi	r1, r2, #0, #3
    4206:	f36f 01c5 	bfc	r1, #3, #3
    420a:	f363 118f 	bfi	r1, r3, #6, #10
    420e:	4827      	ldr	r0, [pc, #156]	; (42ac <mem_manage_fault+0x17c>)
    4210:	f7fd fbda 	bl	19c8 <log_0>
		uint32_t temp = SCB->MMFAR;
    4214:	4b22      	ldr	r3, [pc, #136]	; (42a0 <mem_manage_fault+0x170>)
    4216:	6b59      	ldr	r1, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    421a:	f013 0f80 	tst.w	r3, #128	; 0x80
    421e:	d0aa      	beq.n	4176 <mem_manage_fault+0x46>
    4220:	4b1c      	ldr	r3, [pc, #112]	; (4294 <mem_manage_fault+0x164>)
    4222:	4a1d      	ldr	r2, [pc, #116]	; (4298 <mem_manage_fault+0x168>)
    4224:	1a9b      	subs	r3, r3, r2
    4226:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4228:	f04f 0200 	mov.w	r2, #0
    422c:	2001      	movs	r0, #1
    422e:	f360 0202 	bfi	r2, r0, #0, #3
    4232:	f36f 02c5 	bfc	r2, #3, #3
    4236:	f363 128f 	bfi	r2, r3, #6, #10
    423a:	481d      	ldr	r0, [pc, #116]	; (42b0 <mem_manage_fault+0x180>)
    423c:	f7fd fb52 	bl	18e4 <log_1>
			if (from_hard_fault != 0) {
    4240:	2e00      	cmp	r6, #0
    4242:	d098      	beq.n	4176 <mem_manage_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4244:	4a16      	ldr	r2, [pc, #88]	; (42a0 <mem_manage_fault+0x170>)
    4246:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    424c:	6293      	str	r3, [r2, #40]	; 0x28
    424e:	e792      	b.n	4176 <mem_manage_fault+0x46>
    4250:	4b10      	ldr	r3, [pc, #64]	; (4294 <mem_manage_fault+0x164>)
    4252:	4a11      	ldr	r2, [pc, #68]	; (4298 <mem_manage_fault+0x168>)
    4254:	1a9b      	subs	r3, r3, r2
    4256:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
    4258:	f04f 0100 	mov.w	r1, #0
    425c:	2201      	movs	r2, #1
    425e:	f362 0102 	bfi	r1, r2, #0, #3
    4262:	f36f 01c5 	bfc	r1, #3, #3
    4266:	f363 118f 	bfi	r1, r3, #6, #10
    426a:	4812      	ldr	r0, [pc, #72]	; (42b4 <mem_manage_fault+0x184>)
    426c:	f7fd fbac 	bl	19c8 <log_0>
    4270:	e786      	b.n	4180 <mem_manage_fault+0x50>
    4272:	4b08      	ldr	r3, [pc, #32]	; (4294 <mem_manage_fault+0x164>)
    4274:	4a08      	ldr	r2, [pc, #32]	; (4298 <mem_manage_fault+0x168>)
    4276:	1a9b      	subs	r3, r3, r2
    4278:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
    427a:	f04f 0100 	mov.w	r1, #0
    427e:	2201      	movs	r2, #1
    4280:	f362 0102 	bfi	r1, r2, #0, #3
    4284:	f36f 01c5 	bfc	r1, #3, #3
    4288:	f363 118f 	bfi	r1, r3, #6, #10
    428c:	480a      	ldr	r0, [pc, #40]	; (42b8 <mem_manage_fault+0x188>)
    428e:	f7fd fb9b 	bl	19c8 <log_0>
    4292:	e77a      	b.n	418a <mem_manage_fault+0x5a>
    4294:	0000ef2c 	.word	0x0000ef2c
    4298:	0000eefc 	.word	0x0000eefc
    429c:	0000f920 	.word	0x0000f920
    42a0:	e000ed00 	.word	0xe000ed00
    42a4:	0000f938 	.word	0x0000f938
    42a8:	0000f96c 	.word	0x0000f96c
    42ac:	0000f980 	.word	0x0000f980
    42b0:	0000f998 	.word	0x0000f998
    42b4:	0000f9b0 	.word	0x0000f9b0
    42b8:	0000f9d0 	.word	0x0000f9d0

000042bc <bus_fault>:
{
    42bc:	b570      	push	{r4, r5, r6, lr}
    42be:	4605      	mov	r5, r0
    42c0:	460e      	mov	r6, r1
    42c2:	4614      	mov	r4, r2
    42c4:	4b5e      	ldr	r3, [pc, #376]	; (4440 <bus_fault+0x184>)
    42c6:	4a5f      	ldr	r2, [pc, #380]	; (4444 <bus_fault+0x188>)
    42c8:	1a9b      	subs	r3, r3, r2
    42ca:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    42cc:	f04f 0100 	mov.w	r1, #0
    42d0:	2201      	movs	r2, #1
    42d2:	f362 0102 	bfi	r1, r2, #0, #3
    42d6:	f36f 01c5 	bfc	r1, #3, #3
    42da:	f363 118f 	bfi	r1, r3, #6, #10
    42de:	485a      	ldr	r0, [pc, #360]	; (4448 <bus_fault+0x18c>)
    42e0:	f7fd fb72 	bl	19c8 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    42e4:	4b59      	ldr	r3, [pc, #356]	; (444c <bus_fault+0x190>)
    42e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    42e8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    42ec:	d124      	bne.n	4338 <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    42ee:	4b57      	ldr	r3, [pc, #348]	; (444c <bus_fault+0x190>)
    42f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    42f2:	f413 6f00 	tst.w	r3, #2048	; 0x800
    42f6:	d130      	bne.n	435a <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    42f8:	4b54      	ldr	r3, [pc, #336]	; (444c <bus_fault+0x190>)
    42fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    42fc:	f413 7f00 	tst.w	r3, #512	; 0x200
    4300:	d13c      	bne.n	437c <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4302:	4b52      	ldr	r3, [pc, #328]	; (444c <bus_fault+0x190>)
    4304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4306:	f413 6f80 	tst.w	r3, #1024	; 0x400
    430a:	d165      	bne.n	43d8 <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    430c:	4b4f      	ldr	r3, [pc, #316]	; (444c <bus_fault+0x190>)
    430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4310:	f413 7f80 	tst.w	r3, #256	; 0x100
    4314:	d171      	bne.n	43fa <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4316:	4b4d      	ldr	r3, [pc, #308]	; (444c <bus_fault+0x190>)
    4318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    431a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    431e:	d17d      	bne.n	441c <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4320:	4a4a      	ldr	r2, [pc, #296]	; (444c <bus_fault+0x190>)
    4322:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4324:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4328:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    432a:	2101      	movs	r1, #1
    432c:	4628      	mov	r0, r5
    432e:	f009 f8bd 	bl	d4ac <memory_fault_recoverable>
    4332:	7020      	strb	r0, [r4, #0]
}
    4334:	2000      	movs	r0, #0
    4336:	bd70      	pop	{r4, r5, r6, pc}
    4338:	4b41      	ldr	r3, [pc, #260]	; (4440 <bus_fault+0x184>)
    433a:	4a42      	ldr	r2, [pc, #264]	; (4444 <bus_fault+0x188>)
    433c:	1a9b      	subs	r3, r3, r2
    433e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
    4340:	f04f 0100 	mov.w	r1, #0
    4344:	2201      	movs	r2, #1
    4346:	f362 0102 	bfi	r1, r2, #0, #3
    434a:	f36f 01c5 	bfc	r1, #3, #3
    434e:	f363 118f 	bfi	r1, r3, #6, #10
    4352:	483f      	ldr	r0, [pc, #252]	; (4450 <bus_fault+0x194>)
    4354:	f7fd fb38 	bl	19c8 <log_0>
    4358:	e7c9      	b.n	42ee <bus_fault+0x32>
    435a:	4b39      	ldr	r3, [pc, #228]	; (4440 <bus_fault+0x184>)
    435c:	4a39      	ldr	r2, [pc, #228]	; (4444 <bus_fault+0x188>)
    435e:	1a9b      	subs	r3, r3, r2
    4360:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    4362:	f04f 0100 	mov.w	r1, #0
    4366:	2201      	movs	r2, #1
    4368:	f362 0102 	bfi	r1, r2, #0, #3
    436c:	f36f 01c5 	bfc	r1, #3, #3
    4370:	f363 118f 	bfi	r1, r3, #6, #10
    4374:	4837      	ldr	r0, [pc, #220]	; (4454 <bus_fault+0x198>)
    4376:	f7fd fb27 	bl	19c8 <log_0>
    437a:	e7bd      	b.n	42f8 <bus_fault+0x3c>
    437c:	4b30      	ldr	r3, [pc, #192]	; (4440 <bus_fault+0x184>)
    437e:	4a31      	ldr	r2, [pc, #196]	; (4444 <bus_fault+0x188>)
    4380:	1a9b      	subs	r3, r3, r2
    4382:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
    4384:	f04f 0100 	mov.w	r1, #0
    4388:	2201      	movs	r2, #1
    438a:	f362 0102 	bfi	r1, r2, #0, #3
    438e:	f36f 01c5 	bfc	r1, #3, #3
    4392:	f363 118f 	bfi	r1, r3, #6, #10
    4396:	4830      	ldr	r0, [pc, #192]	; (4458 <bus_fault+0x19c>)
    4398:	f7fd fb16 	bl	19c8 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    439c:	4b2b      	ldr	r3, [pc, #172]	; (444c <bus_fault+0x190>)
    439e:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    43a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43a2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    43a6:	d0ac      	beq.n	4302 <bus_fault+0x46>
    43a8:	4b25      	ldr	r3, [pc, #148]	; (4440 <bus_fault+0x184>)
    43aa:	4a26      	ldr	r2, [pc, #152]	; (4444 <bus_fault+0x188>)
    43ac:	1a9b      	subs	r3, r3, r2
    43ae:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
    43b0:	f04f 0200 	mov.w	r2, #0
    43b4:	2001      	movs	r0, #1
    43b6:	f360 0202 	bfi	r2, r0, #0, #3
    43ba:	f36f 02c5 	bfc	r2, #3, #3
    43be:	f363 128f 	bfi	r2, r3, #6, #10
    43c2:	4826      	ldr	r0, [pc, #152]	; (445c <bus_fault+0x1a0>)
    43c4:	f7fd fa8e 	bl	18e4 <log_1>
			if (from_hard_fault != 0) {
    43c8:	2e00      	cmp	r6, #0
    43ca:	d09a      	beq.n	4302 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    43cc:	4a1f      	ldr	r2, [pc, #124]	; (444c <bus_fault+0x190>)
    43ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
    43d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    43d4:	6293      	str	r3, [r2, #40]	; 0x28
    43d6:	e794      	b.n	4302 <bus_fault+0x46>
    43d8:	4b19      	ldr	r3, [pc, #100]	; (4440 <bus_fault+0x184>)
    43da:	4a1a      	ldr	r2, [pc, #104]	; (4444 <bus_fault+0x188>)
    43dc:	1a9b      	subs	r3, r3, r2
    43de:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
    43e0:	f04f 0100 	mov.w	r1, #0
    43e4:	2201      	movs	r2, #1
    43e6:	f362 0102 	bfi	r1, r2, #0, #3
    43ea:	f36f 01c5 	bfc	r1, #3, #3
    43ee:	f363 118f 	bfi	r1, r3, #6, #10
    43f2:	481b      	ldr	r0, [pc, #108]	; (4460 <bus_fault+0x1a4>)
    43f4:	f7fd fae8 	bl	19c8 <log_0>
    43f8:	e788      	b.n	430c <bus_fault+0x50>
    43fa:	4b11      	ldr	r3, [pc, #68]	; (4440 <bus_fault+0x184>)
    43fc:	4a11      	ldr	r2, [pc, #68]	; (4444 <bus_fault+0x188>)
    43fe:	1a9b      	subs	r3, r3, r2
    4400:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
    4402:	f04f 0100 	mov.w	r1, #0
    4406:	2201      	movs	r2, #1
    4408:	f362 0102 	bfi	r1, r2, #0, #3
    440c:	f36f 01c5 	bfc	r1, #3, #3
    4410:	f363 118f 	bfi	r1, r3, #6, #10
    4414:	4813      	ldr	r0, [pc, #76]	; (4464 <bus_fault+0x1a8>)
    4416:	f7fd fad7 	bl	19c8 <log_0>
    441a:	e781      	b.n	4320 <bus_fault+0x64>
    441c:	4b08      	ldr	r3, [pc, #32]	; (4440 <bus_fault+0x184>)
    441e:	4a09      	ldr	r2, [pc, #36]	; (4444 <bus_fault+0x188>)
    4420:	1a9b      	subs	r3, r3, r2
    4422:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4424:	f04f 0100 	mov.w	r1, #0
    4428:	2201      	movs	r2, #1
    442a:	f362 0102 	bfi	r1, r2, #0, #3
    442e:	f36f 01c5 	bfc	r1, #3, #3
    4432:	f363 118f 	bfi	r1, r3, #6, #10
    4436:	480c      	ldr	r0, [pc, #48]	; (4468 <bus_fault+0x1ac>)
    4438:	f7fd fac6 	bl	19c8 <log_0>
    443c:	e770      	b.n	4320 <bus_fault+0x64>
    443e:	bf00      	nop
    4440:	0000ef2c 	.word	0x0000ef2c
    4444:	0000eefc 	.word	0x0000eefc
    4448:	0000fa00 	.word	0x0000fa00
    444c:	e000ed00 	.word	0xe000ed00
    4450:	0000fa18 	.word	0x0000fa18
    4454:	0000f96c 	.word	0x0000f96c
    4458:	0000fa2c 	.word	0x0000fa2c
    445c:	0000fa48 	.word	0x0000fa48
    4460:	0000fa60 	.word	0x0000fa60
    4464:	0000fa7c 	.word	0x0000fa7c
    4468:	0000f9d0 	.word	0x0000f9d0

0000446c <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    446c:	b570      	push	{r4, r5, r6, lr}
    446e:	4605      	mov	r5, r0
    4470:	460c      	mov	r4, r1
    4472:	4b47      	ldr	r3, [pc, #284]	; (4590 <hard_fault+0x124>)
    4474:	4a47      	ldr	r2, [pc, #284]	; (4594 <hard_fault+0x128>)
    4476:	1a9b      	subs	r3, r3, r2
    4478:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
    447a:	f04f 0100 	mov.w	r1, #0
    447e:	2201      	movs	r2, #1
    4480:	f362 0102 	bfi	r1, r2, #0, #3
    4484:	f36f 01c5 	bfc	r1, #3, #3
    4488:	f363 118f 	bfi	r1, r3, #6, #10
    448c:	4842      	ldr	r0, [pc, #264]	; (4598 <hard_fault+0x12c>)
    448e:	f7fd fa9b 	bl	19c8 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    4492:	2300      	movs	r3, #0
    4494:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4496:	4b41      	ldr	r3, [pc, #260]	; (459c <hard_fault+0x130>)
    4498:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    449a:	f016 0602 	ands.w	r6, r6, #2
    449e:	d109      	bne.n	44b4 <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    44a0:	4b3e      	ldr	r3, [pc, #248]	; (459c <hard_fault+0x130>)
    44a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    44a4:	2b00      	cmp	r3, #0
    44a6:	db17      	blt.n	44d8 <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    44a8:	4b3c      	ldr	r3, [pc, #240]	; (459c <hard_fault+0x130>)
    44aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    44ac:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    44b0:	d124      	bne.n	44fc <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    44b2:	bd70      	pop	{r4, r5, r6, pc}
    44b4:	4b36      	ldr	r3, [pc, #216]	; (4590 <hard_fault+0x124>)
    44b6:	4a37      	ldr	r2, [pc, #220]	; (4594 <hard_fault+0x128>)
    44b8:	1a9b      	subs	r3, r3, r2
    44ba:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
    44bc:	f04f 0100 	mov.w	r1, #0
    44c0:	2201      	movs	r2, #1
    44c2:	f362 0102 	bfi	r1, r2, #0, #3
    44c6:	f36f 01c5 	bfc	r1, #3, #3
    44ca:	f363 118f 	bfi	r1, r3, #6, #10
    44ce:	4834      	ldr	r0, [pc, #208]	; (45a0 <hard_fault+0x134>)
    44d0:	f7fd fa7a 	bl	19c8 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    44d4:	2000      	movs	r0, #0
    44d6:	e7ec      	b.n	44b2 <hard_fault+0x46>
    44d8:	4b2d      	ldr	r3, [pc, #180]	; (4590 <hard_fault+0x124>)
    44da:	4a2e      	ldr	r2, [pc, #184]	; (4594 <hard_fault+0x128>)
    44dc:	1a9b      	subs	r3, r3, r2
    44de:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
    44e0:	f04f 0100 	mov.w	r1, #0
    44e4:	2201      	movs	r2, #1
    44e6:	f362 0102 	bfi	r1, r2, #0, #3
    44ea:	f36f 01c5 	bfc	r1, #3, #3
    44ee:	f363 118f 	bfi	r1, r3, #6, #10
    44f2:	482c      	ldr	r0, [pc, #176]	; (45a4 <hard_fault+0x138>)
    44f4:	f7fd fa68 	bl	19c8 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    44f8:	4630      	mov	r0, r6
    44fa:	e7da      	b.n	44b2 <hard_fault+0x46>
    44fc:	4b24      	ldr	r3, [pc, #144]	; (4590 <hard_fault+0x124>)
    44fe:	4a25      	ldr	r2, [pc, #148]	; (4594 <hard_fault+0x128>)
    4500:	1a9b      	subs	r3, r3, r2
    4502:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
    4504:	f04f 0100 	mov.w	r1, #0
    4508:	2201      	movs	r2, #1
    450a:	f362 0102 	bfi	r1, r2, #0, #3
    450e:	f36f 01c5 	bfc	r1, #3, #3
    4512:	f363 118f 	bfi	r1, r3, #6, #10
    4516:	4824      	ldr	r0, [pc, #144]	; (45a8 <hard_fault+0x13c>)
    4518:	f7fd fa56 	bl	19c8 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    451c:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    451e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    4522:	f64d 7302 	movw	r3, #57090	; 0xdf02
    4526:	429a      	cmp	r2, r3
    4528:	d00e      	beq.n	4548 <hard_fault+0xdc>
		} else if (SCB_MMFSR != 0) {
    452a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    452e:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    4532:	781b      	ldrb	r3, [r3, #0]
    4534:	b9db      	cbnz	r3, 456e <hard_fault+0x102>
		} else if (SCB_BFSR != 0) {
    4536:	4b1d      	ldr	r3, [pc, #116]	; (45ac <hard_fault+0x140>)
    4538:	781b      	ldrb	r3, [r3, #0]
    453a:	b9f3      	cbnz	r3, 457a <hard_fault+0x10e>
		} else if (SCB_UFSR != 0) {
    453c:	4b1c      	ldr	r3, [pc, #112]	; (45b0 <hard_fault+0x144>)
    453e:	881b      	ldrh	r3, [r3, #0]
    4540:	b29b      	uxth	r3, r3
    4542:	bb03      	cbnz	r3, 4586 <hard_fault+0x11a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4544:	4630      	mov	r0, r6
	return reason;
    4546:	e7b4      	b.n	44b2 <hard_fault+0x46>
    4548:	4b11      	ldr	r3, [pc, #68]	; (4590 <hard_fault+0x124>)
    454a:	4a12      	ldr	r2, [pc, #72]	; (4594 <hard_fault+0x128>)
    454c:	1a9b      	subs	r3, r3, r2
    454e:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    4550:	f04f 0200 	mov.w	r2, #0
    4554:	2101      	movs	r1, #1
    4556:	f361 0202 	bfi	r2, r1, #0, #3
    455a:	f36f 02c5 	bfc	r2, #3, #3
    455e:	f363 128f 	bfi	r2, r3, #6, #10
    4562:	6829      	ldr	r1, [r5, #0]
    4564:	4813      	ldr	r0, [pc, #76]	; (45b4 <hard_fault+0x148>)
    4566:	f7fd f9bd 	bl	18e4 <log_1>
			reason = esf->basic.r0;
    456a:	6828      	ldr	r0, [r5, #0]
    456c:	e7a1      	b.n	44b2 <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
    456e:	4622      	mov	r2, r4
    4570:	2101      	movs	r1, #1
    4572:	4628      	mov	r0, r5
    4574:	f7ff fddc 	bl	4130 <mem_manage_fault>
    4578:	e79b      	b.n	44b2 <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
    457a:	4622      	mov	r2, r4
    457c:	2101      	movs	r1, #1
    457e:	4628      	mov	r0, r5
    4580:	f7ff fe9c 	bl	42bc <bus_fault>
    4584:	e795      	b.n	44b2 <hard_fault+0x46>
			reason = usage_fault(esf);
    4586:	4628      	mov	r0, r5
    4588:	f7ff fcec 	bl	3f64 <usage_fault>
    458c:	e791      	b.n	44b2 <hard_fault+0x46>
    458e:	bf00      	nop
    4590:	0000ef2c 	.word	0x0000ef2c
    4594:	0000eefc 	.word	0x0000eefc
    4598:	0000fa94 	.word	0x0000fa94
    459c:	e000ed00 	.word	0xe000ed00
    45a0:	0000faac 	.word	0x0000faac
    45a4:	0000fad0 	.word	0x0000fad0
    45a8:	0000fae0 	.word	0x0000fae0
    45ac:	e000ed29 	.word	0xe000ed29
    45b0:	e000ed2a 	.word	0xe000ed2a
    45b4:	0000fb00 	.word	0x0000fb00

000045b8 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    45b8:	b508      	push	{r3, lr}
    45ba:	460a      	mov	r2, r1
    45bc:	480b      	ldr	r0, [pc, #44]	; (45ec <reserved_exception+0x34>)
    45be:	4b0c      	ldr	r3, [pc, #48]	; (45f0 <reserved_exception+0x38>)
    45c0:	1ac0      	subs	r0, r0, r3
    45c2:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    45c4:	f04f 0300 	mov.w	r3, #0
    45c8:	2101      	movs	r1, #1
    45ca:	f361 0302 	bfi	r3, r1, #0, #3
    45ce:	f36f 03c5 	bfc	r3, #3, #3
    45d2:	f360 138f 	bfi	r3, r0, #6, #10
    45d6:	2a0f      	cmp	r2, #15
    45d8:	dc05      	bgt.n	45e6 <reserved_exception+0x2e>
    45da:	4906      	ldr	r1, [pc, #24]	; (45f4 <reserved_exception+0x3c>)
    45dc:	3a10      	subs	r2, #16
    45de:	4806      	ldr	r0, [pc, #24]	; (45f8 <reserved_exception+0x40>)
    45e0:	f7fd f9b6 	bl	1950 <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    45e4:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    45e6:	4905      	ldr	r1, [pc, #20]	; (45fc <reserved_exception+0x44>)
    45e8:	e7f8      	b.n	45dc <reserved_exception+0x24>
    45ea:	bf00      	nop
    45ec:	0000ef2c 	.word	0x0000ef2c
    45f0:	0000eefc 	.word	0x0000eefc
    45f4:	0000fb1c 	.word	0x0000fb1c
    45f8:	0000fb50 	.word	0x0000fb50
    45fc:	0000fb34 	.word	0x0000fb34

00004600 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4600:	b570      	push	{r4, r5, r6, lr}
    4602:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4604:	4b2b      	ldr	r3, [pc, #172]	; (46b4 <z_arm_fault+0xb4>)
    4606:	685d      	ldr	r5, [r3, #4]
    4608:	f3c5 0508 	ubfx	r5, r5, #0, #9
    460c:	2300      	movs	r3, #0
    460e:	f383 8811 	msr	BASEPRI, r3
    4612:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4616:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    461a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    461e:	d12a      	bne.n	4676 <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4620:	f002 030c 	and.w	r3, r2, #12
    4624:	2b08      	cmp	r3, #8
    4626:	d010      	beq.n	464a <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4628:	f012 0f08 	tst.w	r2, #8
    462c:	d020      	beq.n	4670 <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
    462e:	460c      	mov	r4, r1
	*nested_exc = false;
    4630:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    4632:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    4636:	4629      	mov	r1, r5
    4638:	4620      	mov	r0, r4
    463a:	f008 ff39 	bl	d4b0 <fault_handle>
    463e:	4605      	mov	r5, r0
	if (recoverable) {
    4640:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4644:	b1d3      	cbz	r3, 467c <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    4646:	b00a      	add	sp, #40	; 0x28
    4648:	bd70      	pop	{r4, r5, r6, pc}
    464a:	4b1b      	ldr	r3, [pc, #108]	; (46b8 <z_arm_fault+0xb8>)
    464c:	4a1b      	ldr	r2, [pc, #108]	; (46bc <z_arm_fault+0xbc>)
    464e:	1a9b      	subs	r3, r3, r2
    4650:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4652:	f04f 0100 	mov.w	r1, #0
    4656:	2201      	movs	r2, #1
    4658:	f362 0102 	bfi	r1, r2, #0, #3
    465c:	f36f 01c5 	bfc	r1, #3, #3
    4660:	f363 118f 	bfi	r1, r3, #6, #10
    4664:	4816      	ldr	r0, [pc, #88]	; (46c0 <z_arm_fault+0xc0>)
    4666:	f7fd f9af 	bl	19c8 <log_0>
	*nested_exc = false;
    466a:	2600      	movs	r6, #0
		return NULL;
    466c:	4634      	mov	r4, r6
    466e:	e7e0      	b.n	4632 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    4670:	4604      	mov	r4, r0
			*nested_exc = true;
    4672:	2601      	movs	r6, #1
    4674:	e7dd      	b.n	4632 <z_arm_fault+0x32>
	*nested_exc = false;
    4676:	2600      	movs	r6, #0
		return NULL;
    4678:	4634      	mov	r4, r6
    467a:	e7da      	b.n	4632 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    467c:	2220      	movs	r2, #32
    467e:	4621      	mov	r1, r4
    4680:	a801      	add	r0, sp, #4
    4682:	f008 ffa5 	bl	d5d0 <memcpy>
	if (nested_exc) {
    4686:	b14e      	cbz	r6, 469c <z_arm_fault+0x9c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4688:	9b08      	ldr	r3, [sp, #32]
    468a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    468e:	b95a      	cbnz	r2, 46a8 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4690:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4694:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    4698:	9308      	str	r3, [sp, #32]
    469a:	e005      	b.n	46a8 <z_arm_fault+0xa8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    469c:	9b08      	ldr	r3, [sp, #32]
    469e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    46a2:	f023 0301 	bic.w	r3, r3, #1
    46a6:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    46a8:	a901      	add	r1, sp, #4
    46aa:	4628      	mov	r0, r5
    46ac:	f008 fedb 	bl	d466 <z_arm_fatal_error>
    46b0:	e7c9      	b.n	4646 <z_arm_fault+0x46>
    46b2:	bf00      	nop
    46b4:	e000ed00 	.word	0xe000ed00
    46b8:	0000ef2c 	.word	0x0000ef2c
    46bc:	0000eefc 	.word	0x0000eefc
    46c0:	0000fb64 	.word	0x0000fb64

000046c4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    46c4:	4b04      	ldr	r3, [pc, #16]	; (46d8 <z_arm_fault_init+0x14>)
    46c6:	695a      	ldr	r2, [r3, #20]
    46c8:	f042 0210 	orr.w	r2, r2, #16
    46cc:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    46ce:	695a      	ldr	r2, [r3, #20]
    46d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    46d4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    46d6:	4770      	bx	lr
    46d8:	e000ed00 	.word	0xe000ed00

000046dc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    46dc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    46e0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    46e4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    46e6:	4672      	mov	r2, lr
	bl z_arm_fault
    46e8:	f7ff ff8a 	bl	4600 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    46ec:	bd01      	pop	{r0, pc}
    46ee:	bf00      	nop

000046f0 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    46f0:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    46f2:	e006      	b.n	4702 <z_arm_interrupt_init+0x12>
    46f4:	f002 010f 	and.w	r1, r2, #15
    46f8:	4b09      	ldr	r3, [pc, #36]	; (4720 <z_arm_interrupt_init+0x30>)
    46fa:	440b      	add	r3, r1
    46fc:	2120      	movs	r1, #32
    46fe:	7619      	strb	r1, [r3, #24]
    4700:	3201      	adds	r2, #1
    4702:	2a44      	cmp	r2, #68	; 0x44
    4704:	dc0a      	bgt.n	471c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    4706:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    4708:	2b00      	cmp	r3, #0
    470a:	dbf3      	blt.n	46f4 <z_arm_interrupt_init+0x4>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    470c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4710:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4714:	2120      	movs	r1, #32
    4716:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    471a:	e7f1      	b.n	4700 <z_arm_interrupt_init+0x10>
	}
}
    471c:	4770      	bx	lr
    471e:	bf00      	nop
    4720:	e000ecfc 	.word	0xe000ecfc

00004724 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4724:	2000      	movs	r0, #0
    msr CONTROL, r0
    4726:	f380 8814 	msr	CONTROL, r0
    isb
    472a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    472e:	2000      	movs	r0, #0
    msr MSPLIM, r0
    4730:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    4734:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    4738:	f00a fa36 	bl	eba8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    473c:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    473e:	490e      	ldr	r1, [pc, #56]	; (4778 <__start+0x54>)
    str r0, [r1]
    4740:	6008      	str	r0, [r1, #0]
    dsb
    4742:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4746:	480d      	ldr	r0, [pc, #52]	; (477c <__start+0x58>)
    msr msp, r0
    4748:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    474c:	f000 f83c 	bl	47c8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4750:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4752:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4756:	480a      	ldr	r0, [pc, #40]	; (4780 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4758:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    475c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    475e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4762:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4766:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4768:	4308      	orrs	r0, r1
    msr CONTROL, r0
    476a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    476e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4772:	f7ff fb1d 	bl	3db0 <z_arm_prep_c>
    4776:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    4778:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    477c:	20002fe8 	.word	0x20002fe8
    ldr r0, =z_interrupt_stacks
    4780:	20003128 	.word	0x20003128

00004784 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    4784:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4788:	4905      	ldr	r1, [pc, #20]	; (47a0 <sys_arch_reboot+0x1c>)
    478a:	68ca      	ldr	r2, [r1, #12]
    478c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4790:	4b04      	ldr	r3, [pc, #16]	; (47a4 <sys_arch_reboot+0x20>)
    4792:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4794:	60cb      	str	r3, [r1, #12]
    4796:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    479a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    479c:	e7fd      	b.n	479a <sys_arch_reboot+0x16>
    479e:	bf00      	nop
    47a0:	e000ed00 	.word	0xe000ed00
    47a4:	05fa0004 	.word	0x05fa0004

000047a8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    47a8:	4b06      	ldr	r3, [pc, #24]	; (47c4 <z_arm_clear_arm_mpu_config+0x1c>)
    47aa:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    47ac:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    47b0:	2300      	movs	r3, #0
    47b2:	4283      	cmp	r3, r0
    47b4:	da05      	bge.n	47c2 <z_arm_clear_arm_mpu_config+0x1a>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
    47b6:	4a03      	ldr	r2, [pc, #12]	; (47c4 <z_arm_clear_arm_mpu_config+0x1c>)
    47b8:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    47ba:	2100      	movs	r1, #0
    47bc:	6111      	str	r1, [r2, #16]
    47be:	3301      	adds	r3, #1
    47c0:	e7f7      	b.n	47b2 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    47c2:	4770      	bx	lr
    47c4:	e000ed90 	.word	0xe000ed90

000047c8 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    47c8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    47ca:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    47cc:	2400      	movs	r4, #0
    47ce:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    47d2:	f7ff ffe9 	bl	47a8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    47d6:	4623      	mov	r3, r4
    47d8:	2b0f      	cmp	r3, #15
    47da:	d809      	bhi.n	47f0 <z_arm_init_arch_hw_at_boot+0x28>
		NVIC->ICER[i] = 0xFFFFFFFF;
    47dc:	f103 0120 	add.w	r1, r3, #32
    47e0:	4a0d      	ldr	r2, [pc, #52]	; (4818 <z_arm_init_arch_hw_at_boot+0x50>)
    47e2:	f04f 30ff 	mov.w	r0, #4294967295
    47e6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    47ea:	3301      	adds	r3, #1
    47ec:	b2db      	uxtb	r3, r3
    47ee:	e7f3      	b.n	47d8 <z_arm_init_arch_hw_at_boot+0x10>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    47f0:	2300      	movs	r3, #0
    47f2:	2b0f      	cmp	r3, #15
    47f4:	d809      	bhi.n	480a <z_arm_init_arch_hw_at_boot+0x42>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    47f6:	f103 0160 	add.w	r1, r3, #96	; 0x60
    47fa:	4a07      	ldr	r2, [pc, #28]	; (4818 <z_arm_init_arch_hw_at_boot+0x50>)
    47fc:	f04f 30ff 	mov.w	r0, #4294967295
    4800:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4804:	3301      	adds	r3, #1
    4806:	b2db      	uxtb	r3, r3
    4808:	e7f3      	b.n	47f2 <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
    480a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    480c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4810:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4814:	bd10      	pop	{r4, pc}
    4816:	bf00      	nop
    4818:	e000e100 	.word	0xe000e100

0000481c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    481c:	b508      	push	{r3, lr}
	if (_current == thread) {
    481e:	4b08      	ldr	r3, [pc, #32]	; (4840 <z_impl_k_thread_abort+0x24>)
    4820:	689b      	ldr	r3, [r3, #8]
    4822:	4283      	cmp	r3, r0
    4824:	d002      	beq.n	482c <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    4826:	f006 fd55 	bl	b2d4 <z_thread_abort>
}
    482a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    482c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4830:	2b00      	cmp	r3, #0
    4832:	d0f8      	beq.n	4826 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4834:	4a03      	ldr	r2, [pc, #12]	; (4844 <z_impl_k_thread_abort+0x28>)
    4836:	6853      	ldr	r3, [r2, #4]
    4838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    483c:	6053      	str	r3, [r2, #4]
    483e:	e7f2      	b.n	4826 <z_impl_k_thread_abort+0xa>
    4840:	20001ec0 	.word	0x20001ec0
    4844:	e000ed00 	.word	0xe000ed00

00004848 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    4848:	b510      	push	{r4, lr}
    484a:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    484c:	4c09      	ldr	r4, [pc, #36]	; (4874 <z_arm_configure_static_mpu_regions+0x2c>)
    484e:	4623      	mov	r3, r4
    4850:	4a09      	ldr	r2, [pc, #36]	; (4878 <z_arm_configure_static_mpu_regions+0x30>)
    4852:	2101      	movs	r1, #1
    4854:	4809      	ldr	r0, [pc, #36]	; (487c <z_arm_configure_static_mpu_regions+0x34>)
    4856:	f008 fe87 	bl	d568 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    485a:	2300      	movs	r3, #0
    485c:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    485e:	4b08      	ldr	r3, [pc, #32]	; (4880 <z_arm_configure_static_mpu_regions+0x38>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    4860:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    4862:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    4864:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    4866:	2101      	movs	r1, #1
    4868:	a801      	add	r0, sp, #4
    486a:	f008 fe81 	bl	d570 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    486e:	b004      	add	sp, #16
    4870:	bd10      	pop	{r4, pc}
    4872:	bf00      	nop
    4874:	20070000 	.word	0x20070000
    4878:	20000000 	.word	0x20000000
    487c:	0000fb94 	.word	0x0000fb94
    4880:	20000558 	.word	0x20000558

00004884 <mpu_init>:

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
    4884:	4b01      	ldr	r3, [pc, #4]	; (488c <mpu_init+0x8>)
    4886:	4a02      	ldr	r2, [pc, #8]	; (4890 <mpu_init+0xc>)
    4888:	631a      	str	r2, [r3, #48]	; 0x30
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
    488a:	4770      	bx	lr
    488c:	e000ed90 	.word	0xe000ed90
    4890:	0044ffaa 	.word	0x0044ffaa

00004894 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    4894:	b410      	push	{r4}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    4896:	680b      	ldr	r3, [r1, #0]
    4898:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    489c:	7a0c      	ldrb	r4, [r1, #8]
    489e:	f004 031f 	and.w	r3, r4, #31
    48a2:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    48a4:	68cb      	ldr	r3, [r1, #12]
    48a6:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    48aa:	0964      	lsrs	r4, r4, #5
    48ac:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    48b0:	f043 0301 	orr.w	r3, r3, #1
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    48b4:	4902      	ldr	r1, [pc, #8]	; (48c0 <region_init+0x2c>)
    48b6:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    48b8:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    48ba:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    48bc:	bc10      	pop	{r4}
    48be:	4770      	bx	lr
    48c0:	e000ed90 	.word	0xe000ed90

000048c4 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    48c4:	b510      	push	{r4, lr}
    48c6:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    48c8:	2807      	cmp	r0, #7
    48ca:	d803      	bhi.n	48d4 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    48cc:	f7ff ffe2 	bl	4894 <region_init>

	return index;
    48d0:	4620      	mov	r0, r4
}
    48d2:	bd10      	pop	{r4, pc}
    48d4:	4b09      	ldr	r3, [pc, #36]	; (48fc <region_allocate_and_init+0x38>)
    48d6:	4a0a      	ldr	r2, [pc, #40]	; (4900 <region_allocate_and_init+0x3c>)
    48d8:	1a9b      	subs	r3, r3, r2
    48da:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    48dc:	f04f 0200 	mov.w	r2, #0
    48e0:	2101      	movs	r1, #1
    48e2:	f361 0202 	bfi	r2, r1, #0, #3
    48e6:	f36f 02c5 	bfc	r2, #3, #3
    48ea:	f363 128f 	bfi	r2, r3, #6, #10
    48ee:	4601      	mov	r1, r0
    48f0:	4804      	ldr	r0, [pc, #16]	; (4904 <region_allocate_and_init+0x40>)
    48f2:	f7fc fff7 	bl	18e4 <log_1>
		return -EINVAL;
    48f6:	f06f 0015 	mvn.w	r0, #21
    48fa:	e7ea      	b.n	48d2 <region_allocate_and_init+0xe>
    48fc:	0000ef24 	.word	0x0000ef24
    4900:	0000eefc 	.word	0x0000eefc
    4904:	0000fba0 	.word	0x0000fba0

00004908 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    490c:	b087      	sub	sp, #28
    490e:	4681      	mov	r9, r0
    4910:	9100      	str	r1, [sp, #0]
    4912:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    4914:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    4916:	2600      	movs	r6, #0
    4918:	e05d      	b.n	49d6 <mpu_configure_regions_and_partition+0xce>
    491a:	4b6c      	ldr	r3, [pc, #432]	; (4acc <mpu_configure_regions_and_partition+0x1c4>)
    491c:	4a6c      	ldr	r2, [pc, #432]	; (4ad0 <mpu_configure_regions_and_partition+0x1c8>)
    491e:	1a9b      	subs	r3, r3, r2
    4920:	08db      	lsrs	r3, r3, #3
		}
		/* Non-empty region. */

		if (do_sanity_check &&
			(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    4922:	f04f 0200 	mov.w	r2, #0
    4926:	2101      	movs	r1, #1
    4928:	f361 0202 	bfi	r2, r1, #0, #3
    492c:	f36f 02c5 	bfc	r2, #3, #3
    4930:	f363 128f 	bfi	r2, r3, #6, #10
    4934:	4631      	mov	r1, r6
    4936:	4867      	ldr	r0, [pc, #412]	; (4ad4 <mpu_configure_regions_and_partition+0x1cc>)
    4938:	f7fc ffd4 	bl	18e4 <log_1>
			return -EINVAL;
    493c:	f06f 0415 	mvn.w	r4, #21
    4940:	e015      	b.n	496e <mpu_configure_regions_and_partition+0x66>
	return -EINVAL;
    4942:	f06f 0715 	mvn.w	r7, #21
    4946:	e068      	b.n	4a1a <mpu_configure_regions_and_partition+0x112>
    4948:	4b60      	ldr	r3, [pc, #384]	; (4acc <mpu_configure_regions_and_partition+0x1c4>)
    494a:	4a61      	ldr	r2, [pc, #388]	; (4ad0 <mpu_configure_regions_and_partition+0x1c8>)
    494c:	1a9b      	subs	r3, r3, r2
    494e:	08db      	lsrs	r3, r3, #3
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    4950:	f04f 0200 	mov.w	r2, #0
    4954:	2101      	movs	r1, #1
    4956:	f361 0202 	bfi	r2, r1, #0, #3
    495a:	f36f 02c5 	bfc	r2, #3, #3
    495e:	f363 128f 	bfi	r2, r3, #6, #10
    4962:	4639      	mov	r1, r7
    4964:	485c      	ldr	r0, [pc, #368]	; (4ad8 <mpu_configure_regions_and_partition+0x1d0>)
    4966:	f7fc ffbd 	bl	18e4 <log_1>
				u_reg_index);
			return -EINVAL;
    496a:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    496e:	4620      	mov	r0, r4
    4970:	b007      	add	sp, #28
    4972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((regions[i].start == u_reg_base) &&
    4976:	45d8      	cmp	r8, fp
    4978:	d167      	bne.n	4a4a <mpu_configure_regions_and_partition+0x142>
			mpu_configure_region(u_reg_index, &regions[i]);
    497a:	4629      	mov	r1, r5
    497c:	b2f8      	uxtb	r0, r7
    497e:	f008 fdd8 	bl	d532 <mpu_configure_region>
    4982:	e027      	b.n	49d4 <mpu_configure_regions_and_partition+0xcc>
	MPU->RNR = index;
    4984:	4b55      	ldr	r3, [pc, #340]	; (4adc <mpu_configure_regions_and_partition+0x1d4>)
    4986:	6098      	str	r0, [r3, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    4988:	68d9      	ldr	r1, [r3, #12]
    498a:	f001 011f 	and.w	r1, r1, #31
		| (base & MPU_RBAR_BASE_Msk);
    498e:	f022 021f 	bic.w	r2, r2, #31
    4992:	430a      	orrs	r2, r1
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    4994:	60da      	str	r2, [r3, #12]
				mpu_configure_region(reg_index, &regions[i]);
    4996:	4629      	mov	r1, r5
    4998:	b2e0      	uxtb	r0, r4
    499a:	f008 fdca 	bl	d532 <mpu_configure_region>
    499e:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    49a0:	f110 0f16 	cmn.w	r0, #22
    49a4:	d0e3      	beq.n	496e <mpu_configure_regions_and_partition+0x66>
			reg_index++;
    49a6:	3401      	adds	r4, #1
    49a8:	e014      	b.n	49d4 <mpu_configure_regions_and_partition+0xcc>
				regions[i].start - 1);
    49aa:	3b01      	subs	r3, #1
	MPU->RNR = index;
    49ac:	4a4b      	ldr	r2, [pc, #300]	; (4adc <mpu_configure_regions_and_partition+0x1d4>)
    49ae:	6090      	str	r0, [r2, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    49b0:	6911      	ldr	r1, [r2, #16]
    49b2:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    49b6:	f023 031f 	bic.w	r3, r3, #31
    49ba:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    49bc:	6113      	str	r3, [r2, #16]
				mpu_configure_region(reg_index, &regions[i]);
    49be:	4629      	mov	r1, r5
    49c0:	b2e0      	uxtb	r0, r4
    49c2:	f008 fdb6 	bl	d532 <mpu_configure_region>
    49c6:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    49c8:	f110 0f16 	cmn.w	r0, #22
    49cc:	d0cf      	beq.n	496e <mpu_configure_regions_and_partition+0x66>
			reg_index++;
    49ce:	3401      	adds	r4, #1
    49d0:	e000      	b.n	49d4 <mpu_configure_regions_and_partition+0xcc>
			reg_index++;
    49d2:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    49d4:	3601      	adds	r6, #1
    49d6:	9b00      	ldr	r3, [sp, #0]
    49d8:	429e      	cmp	r6, r3
    49da:	dac8      	bge.n	496e <mpu_configure_regions_and_partition+0x66>
		if (regions[i].size == 0U) {
    49dc:	eb06 0546 	add.w	r5, r6, r6, lsl #1
    49e0:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    49e4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    49e8:	f8d5 8004 	ldr.w	r8, [r5, #4]
    49ec:	f1b8 0f00 	cmp.w	r8, #0
    49f0:	d0f0      	beq.n	49d4 <mpu_configure_regions_and_partition+0xcc>
		if (do_sanity_check &&
    49f2:	9b01      	ldr	r3, [sp, #4]
    49f4:	b123      	cbz	r3, 4a00 <mpu_configure_regions_and_partition+0xf8>
			(!mpu_partition_is_valid(&regions[i]))) {
    49f6:	4628      	mov	r0, r5
    49f8:	f008 fd89 	bl	d50e <mpu_partition_is_valid>
		if (do_sanity_check &&
    49fc:	2800      	cmp	r0, #0
    49fe:	d08c      	beq.n	491a <mpu_configure_regions_and_partition+0x12>
			get_region_index(regions[i].start, regions[i].size);
    4a00:	f859 b00a 	ldr.w	fp, [r9, sl]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4a04:	4658      	mov	r0, fp
    4a06:	f008 fd78 	bl	d4fa <arm_cmse_mpu_region_get>
    4a0a:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    4a0c:	eb08 000b 	add.w	r0, r8, fp
    4a10:	3801      	subs	r0, #1
    4a12:	f008 fd72 	bl	d4fa <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    4a16:	4287      	cmp	r7, r0
    4a18:	d193      	bne.n	4942 <mpu_configure_regions_and_partition+0x3a>
		if ((u_reg_index == -EINVAL) ||
    4a1a:	f117 0f16 	cmn.w	r7, #22
    4a1e:	d093      	beq.n	4948 <mpu_configure_regions_and_partition+0x40>
			(u_reg_index > (reg_index - 1))) {
    4a20:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    4a22:	42bb      	cmp	r3, r7
    4a24:	db90      	blt.n	4948 <mpu_configure_regions_and_partition+0x40>
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
    4a26:	4638      	mov	r0, r7
	MPU->RNR = index;
    4a28:	4b2c      	ldr	r3, [pc, #176]	; (4adc <mpu_configure_regions_and_partition+0x1d4>)
    4a2a:	609f      	str	r7, [r3, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    4a2c:	68d9      	ldr	r1, [r3, #12]
    4a2e:	f021 011f 	bic.w	r1, r1, #31
	MPU->RNR = index;
    4a32:	609f      	str	r7, [r3, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    4a34:	691b      	ldr	r3, [r3, #16]
    4a36:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    4a3a:	f859 300a 	ldr.w	r3, [r9, sl]
    4a3e:	686a      	ldr	r2, [r5, #4]
    4a40:	441a      	add	r2, r3
    4a42:	f102 3bff 	add.w	fp, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    4a46:	4299      	cmp	r1, r3
    4a48:	d095      	beq.n	4976 <mpu_configure_regions_and_partition+0x6e>
		} else if (regions[i].start == u_reg_base) {
    4a4a:	4299      	cmp	r1, r3
    4a4c:	d09a      	beq.n	4984 <mpu_configure_regions_and_partition+0x7c>
		} else if (reg_last == u_reg_last) {
    4a4e:	45d8      	cmp	r8, fp
    4a50:	d0ab      	beq.n	49aa <mpu_configure_regions_and_partition+0xa2>
				regions[i].start - 1);
    4a52:	3b01      	subs	r3, #1
	MPU->RNR = index;
    4a54:	4921      	ldr	r1, [pc, #132]	; (4adc <mpu_configure_regions_and_partition+0x1d4>)
    4a56:	4607      	mov	r7, r0
    4a58:	6088      	str	r0, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    4a5a:	690a      	ldr	r2, [r1, #16]
    4a5c:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    4a60:	f023 031f 	bic.w	r3, r3, #31
    4a64:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    4a66:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, &regions[i]);
    4a68:	4629      	mov	r1, r5
    4a6a:	b2e0      	uxtb	r0, r4
    4a6c:	f008 fd61 	bl	d532 <mpu_configure_region>
    4a70:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    4a72:	f110 0f16 	cmn.w	r0, #22
    4a76:	f43f af7a 	beq.w	496e <mpu_configure_regions_and_partition+0x66>
			reg_index++;
    4a7a:	3001      	adds	r0, #1
	MPU->RNR = index;
    4a7c:	4b17      	ldr	r3, [pc, #92]	; (4adc <mpu_configure_regions_and_partition+0x1d4>)
    4a7e:	609f      	str	r7, [r3, #8]
	attr->rbar = MPU->RBAR &
    4a80:	68d9      	ldr	r1, [r3, #12]
    4a82:	f89d 2010 	ldrb.w	r2, [sp, #16]
    4a86:	f361 0204 	bfi	r2, r1, #0, #5
    4a8a:	f88d 2010 	strb.w	r2, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    4a8e:	691b      	ldr	r3, [r3, #16]
    4a90:	f3c3 0342 	ubfx	r3, r3, #1, #3
    4a94:	b2d2      	uxtb	r2, r2
    4a96:	f363 1247 	bfi	r2, r3, #5, #3
    4a9a:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i].start +
    4a9e:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
    4aa2:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
    4aa4:	4413      	add	r3, r2
    4aa6:	9302      	str	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    4aa8:	f023 031f 	bic.w	r3, r3, #31
    4aac:	eba8 080b 	sub.w	r8, r8, fp
    4ab0:	4443      	add	r3, r8
    4ab2:	3b01      	subs	r3, #1
    4ab4:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    4ab8:	9305      	str	r3, [sp, #20]
				region_allocate_and_init(reg_index,
    4aba:	a902      	add	r1, sp, #8
    4abc:	b2c0      	uxtb	r0, r0
    4abe:	f7ff ff01 	bl	48c4 <region_allocate_and_init>
    4ac2:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    4ac4:	f110 0f16 	cmn.w	r0, #22
    4ac8:	d183      	bne.n	49d2 <mpu_configure_regions_and_partition+0xca>
    4aca:	e750      	b.n	496e <mpu_configure_regions_and_partition+0x66>
    4acc:	0000ef24 	.word	0x0000ef24
    4ad0:	0000eefc 	.word	0x0000eefc
    4ad4:	0000fbc8 	.word	0x0000fbc8
    4ad8:	0000fbec 	.word	0x0000fbec
    4adc:	e000ed90 	.word	0xe000ed90

00004ae0 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    4ae0:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    4ae2:	4c03      	ldr	r4, [pc, #12]	; (4af0 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    4ae4:	2301      	movs	r3, #1
    4ae6:	7822      	ldrb	r2, [r4, #0]
    4ae8:	f7ff ff0e 	bl	4908 <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4aec:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    4aee:	bd10      	pop	{r4, pc}
    4af0:	20001f1f 	.word	0x20001f1f

00004af4 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    4af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4af8:	4607      	mov	r7, r0
    4afa:	4688      	mov	r8, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    4afc:	2400      	movs	r4, #0
    4afe:	e003      	b.n	4b08 <mpu_mark_areas_for_dynamic_regions+0x14>
	return -EINVAL;
    4b00:	f06f 0515 	mvn.w	r5, #21
    4b04:	e017      	b.n	4b36 <mpu_mark_areas_for_dynamic_regions+0x42>
	for (int i = 0; i < dyn_region_areas_num; i++) {
    4b06:	3401      	adds	r4, #1
    4b08:	45a0      	cmp	r8, r4
    4b0a:	dd3c      	ble.n	4b86 <mpu_mark_areas_for_dynamic_regions+0x92>
		if (dyn_region_areas[i].size == 0U) {
    4b0c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    4b10:	009a      	lsls	r2, r3, #2
    4b12:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    4b16:	685e      	ldr	r6, [r3, #4]
    4b18:	2e00      	cmp	r6, #0
    4b1a:	d0f4      	beq.n	4b06 <mpu_mark_areas_for_dynamic_regions+0x12>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    4b1c:	f857 9002 	ldr.w	r9, [r7, r2]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4b20:	4648      	mov	r0, r9
    4b22:	f008 fcea 	bl	d4fa <arm_cmse_mpu_region_get>
    4b26:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    4b28:	eb06 0009 	add.w	r0, r6, r9
    4b2c:	3801      	subs	r0, #1
    4b2e:	f008 fce4 	bl	d4fa <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    4b32:	4285      	cmp	r5, r0
    4b34:	d1e4      	bne.n	4b00 <mpu_mark_areas_for_dynamic_regions+0xc>
		dyn_reg_info[i].index =
    4b36:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4b3a:	4a16      	ldr	r2, [pc, #88]	; (4b94 <mpu_mark_areas_for_dynamic_regions+0xa0>)
    4b3c:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    4b40:	f115 0f16 	cmn.w	r5, #22
    4b44:	d020      	beq.n	4b88 <mpu_mark_areas_for_dynamic_regions+0x94>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    4b46:	4b14      	ldr	r3, [pc, #80]	; (4b98 <mpu_mark_areas_for_dynamic_regions+0xa4>)
    4b48:	781b      	ldrb	r3, [r3, #0]
    4b4a:	42ab      	cmp	r3, r5
    4b4c:	dd1f      	ble.n	4b8e <mpu_mark_areas_for_dynamic_regions+0x9a>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    4b4e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4b52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	MPU->RNR = index;
    4b56:	4a11      	ldr	r2, [pc, #68]	; (4b9c <mpu_mark_areas_for_dynamic_regions+0xa8>)
    4b58:	6095      	str	r5, [r2, #8]
	MPU->RNR = index;
    4b5a:	6095      	str	r5, [r2, #8]
	attr->rbar = MPU->RBAR &
    4b5c:	68d5      	ldr	r5, [r2, #12]
    4b5e:	7b18      	ldrb	r0, [r3, #12]
    4b60:	f365 0004 	bfi	r0, r5, #0, #5
    4b64:	7318      	strb	r0, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    4b66:	6910      	ldr	r0, [r2, #16]
    4b68:	f3c0 0042 	ubfx	r0, r0, #1, #3
    4b6c:	7b1d      	ldrb	r5, [r3, #12]
    4b6e:	f360 1547 	bfi	r5, r0, #5, #3
    4b72:	731d      	strb	r5, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    4b74:	68d1      	ldr	r1, [r2, #12]
    4b76:	f021 011f 	bic.w	r1, r1, #31
    4b7a:	6059      	str	r1, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    4b7c:	6912      	ldr	r2, [r2, #16]
    4b7e:	f022 021f 	bic.w	r2, r2, #31
    4b82:	611a      	str	r2, [r3, #16]
}
    4b84:	e7bf      	b.n	4b06 <mpu_mark_areas_for_dynamic_regions+0x12>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    4b86:	2500      	movs	r5, #0
}
    4b88:	4628      	mov	r0, r5
    4b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    4b8e:	f06f 0515 	mvn.w	r5, #21
    4b92:	e7f9      	b.n	4b88 <mpu_mark_areas_for_dynamic_regions+0x94>
    4b94:	200012c4 	.word	0x200012c4
    4b98:	20001f1f 	.word	0x20001f1f
    4b9c:	e000ed90 	.word	0xe000ed90

00004ba0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4ba0:	4b03      	ldr	r3, [pc, #12]	; (4bb0 <arm_core_mpu_enable+0x10>)
    4ba2:	2205      	movs	r2, #5
    4ba4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    4ba6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4baa:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4bae:	4770      	bx	lr
    4bb0:	e000ed90 	.word	0xe000ed90

00004bb4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4bb4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4bb8:	4b01      	ldr	r3, [pc, #4]	; (4bc0 <arm_core_mpu_disable+0xc>)
    4bba:	2200      	movs	r2, #0
    4bbc:	605a      	str	r2, [r3, #4]
}
    4bbe:	4770      	bx	lr
    4bc0:	e000ed90 	.word	0xe000ed90

00004bc4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    4bc4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4bc6:	4b0e      	ldr	r3, [pc, #56]	; (4c00 <z_arm_mpu_init+0x3c>)
    4bc8:	681d      	ldr	r5, [r3, #0]
    4bca:	2d08      	cmp	r5, #8
    4bcc:	d815      	bhi.n	4bfa <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4bce:	f7ff fff1 	bl	4bb4 <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    4bd2:	f7ff fe57 	bl	4884 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4bd6:	2400      	movs	r4, #0
    4bd8:	42a5      	cmp	r5, r4
    4bda:	d908      	bls.n	4bee <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    4bdc:	4b08      	ldr	r3, [pc, #32]	; (4c00 <z_arm_mpu_init+0x3c>)
    4bde:	6859      	ldr	r1, [r3, #4]
    4be0:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    4be4:	4620      	mov	r0, r4
    4be6:	f7ff fe55 	bl	4894 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4bea:	3401      	adds	r4, #1
    4bec:	e7f4      	b.n	4bd8 <z_arm_mpu_init+0x14>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4bee:	4b05      	ldr	r3, [pc, #20]	; (4c04 <z_arm_mpu_init+0x40>)
    4bf0:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    4bf2:	f7ff ffd5 	bl	4ba0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    4bf6:	2000      	movs	r0, #0
}
    4bf8:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    4bfa:	f04f 30ff 	mov.w	r0, #4294967295
    4bfe:	e7fb      	b.n	4bf8 <z_arm_mpu_init+0x34>
    4c00:	0000fc20 	.word	0x0000fc20
    4c04:	20001f1f 	.word	0x20001f1f

00004c08 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4c08:	4b01      	ldr	r3, [pc, #4]	; (4c10 <__stdout_hook_install+0x8>)
    4c0a:	6018      	str	r0, [r3, #0]
}
    4c0c:	4770      	bx	lr
    4c0e:	bf00      	nop
    4c10:	20000220 	.word	0x20000220

00004c14 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    4c14:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
    4c18:	b242      	sxtb	r2, r0
    4c1a:	2a00      	cmp	r2, #0
    4c1c:	db12      	blt.n	4c44 <endpoint_ctx+0x30>
			if (ep_num >= CFG_EPIN_CNT) {
				return false;
			}
		}
	} else {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    4c1e:	2b08      	cmp	r3, #8
    4c20:	d002      	beq.n	4c28 <endpoint_ctx+0x14>
			if (CFG_EP_ISOOUT_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPOUT_CNT) {
    4c22:	f010 0f78 	tst.w	r0, #120	; 0x78
    4c26:	d11d      	bne.n	4c64 <endpoint_ctx+0x50>
	if (!ep_is_valid(ep)) {
		return NULL;
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);
    4c28:	f000 030f 	and.w	r3, r0, #15

	if (NRF_USBD_EPIN_CHECK(ep)) {
    4c2c:	2a00      	cmp	r2, #0
    4c2e:	db10      	blt.n	4c52 <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4c30:	f010 0f08 	tst.w	r0, #8
    4c34:	d11a      	bne.n	4c6c <endpoint_ctx+0x58>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
					    CFG_EP_ISOIN_CNT +
    4c36:	3309      	adds	r3, #9
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    4c38:	015b      	lsls	r3, r3, #5
    4c3a:	3348      	adds	r3, #72	; 0x48
    4c3c:	480c      	ldr	r0, [pc, #48]	; (4c70 <endpoint_ctx+0x5c>)
    4c3e:	4403      	add	r3, r0
    4c40:	1d18      	adds	r0, r3, #4
    4c42:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    4c44:	2b08      	cmp	r3, #8
    4c46:	d0ef      	beq.n	4c28 <endpoint_ctx+0x14>
			if (ep_num >= CFG_EPIN_CNT) {
    4c48:	f010 0f78 	tst.w	r0, #120	; 0x78
    4c4c:	d0ec      	beq.n	4c28 <endpoint_ctx+0x14>
		return NULL;
    4c4e:	2000      	movs	r0, #0
    4c50:	4770      	bx	lr
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4c52:	f010 0f08 	tst.w	r0, #8
    4c56:	d107      	bne.n	4c68 <endpoint_ctx+0x54>
			return &ctx->ep_ctx[ep_num];
    4c58:	015b      	lsls	r3, r3, #5
    4c5a:	3348      	adds	r3, #72	; 0x48
    4c5c:	4804      	ldr	r0, [pc, #16]	; (4c70 <endpoint_ctx+0x5c>)
    4c5e:	4403      	add	r3, r0
    4c60:	1d18      	adds	r0, r3, #4
    4c62:	4770      	bx	lr
		return NULL;
    4c64:	2000      	movs	r0, #0
    4c66:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    4c68:	4802      	ldr	r0, [pc, #8]	; (4c74 <endpoint_ctx+0x60>)
    4c6a:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    4c6c:	4802      	ldr	r0, [pc, #8]	; (4c78 <endpoint_ctx+0x64>)
					    ep_num];
		}
	}

	return NULL;
}
    4c6e:	4770      	bx	lr
    4c70:	200018d8 	.word	0x200018d8
    4c74:	20001a24 	.word	0x20001a24
    4c78:	20001b44 	.word	0x20001b44

00004c7c <eps_ctx_init>:
 * Endpoint buffers are allocated during the first call of this function.
 * This function may also be called again on every USB reset event
 * to reinitialize the state of all endpoints.
 */
static int eps_ctx_init(void)
{
    4c7c:	b510      	push	{r4, lr}
	struct nrf_usbd_ep_ctx *ep_ctx;
	uint32_t i;

	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4c7e:	2400      	movs	r4, #0
    4c80:	e005      	b.n	4c8e <eps_ctx_init+0x12>
		ep_ctx = in_endpoint_ctx(i);
    4c82:	b2e0      	uxtb	r0, r4
    4c84:	f008 fce8 	bl	d658 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
    4c88:	f008 fcf0 	bl	d66c <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4c8c:	3401      	adds	r4, #1
    4c8e:	2c07      	cmp	r4, #7
    4c90:	d9f7      	bls.n	4c82 <eps_ctx_init+0x6>
	}

	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4c92:	2400      	movs	r4, #0
    4c94:	e006      	b.n	4ca4 <eps_ctx_init+0x28>
		ep_ctx = out_endpoint_ctx(i);
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
			ep_ctx->buf.block.data = ep_out_bufs[i];
    4c96:	4b10      	ldr	r3, [pc, #64]	; (4cd8 <eps_ctx_init+0x5c>)
    4c98:	eb03 1384 	add.w	r3, r3, r4, lsl #6
    4c9c:	6103      	str	r3, [r0, #16]
		}

		ep_ctx_reset(ep_ctx);
    4c9e:	f008 fce5 	bl	d66c <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4ca2:	3401      	adds	r4, #1
    4ca4:	2c07      	cmp	r4, #7
    4ca6:	d806      	bhi.n	4cb6 <eps_ctx_init+0x3a>
		ep_ctx = out_endpoint_ctx(i);
    4ca8:	b2e0      	uxtb	r0, r4
    4caa:	f008 fcdb 	bl	d664 <out_endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    4cae:	6903      	ldr	r3, [r0, #16]
    4cb0:	2b00      	cmp	r3, #0
    4cb2:	d1f4      	bne.n	4c9e <eps_ctx_init+0x22>
    4cb4:	e7ef      	b.n	4c96 <eps_ctx_init+0x1a>
	}

	if (CFG_EP_ISOIN_CNT) {
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
    4cb6:	2088      	movs	r0, #136	; 0x88
    4cb8:	f008 fcce 	bl	d658 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
    4cbc:	f008 fcd6 	bl	d66c <ep_ctx_reset>
	}

	if (CFG_EP_ISOOUT_CNT) {
		BUILD_ASSERT(CFG_EP_ISOOUT_CNT <= 1);

		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
    4cc0:	2008      	movs	r0, #8
    4cc2:	f008 fccf 	bl	d664 <out_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
    4cc6:	6903      	ldr	r3, [r0, #16]
    4cc8:	b11b      	cbz	r3, 4cd2 <eps_ctx_init+0x56>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
		}

		ep_ctx_reset(ep_ctx);
    4cca:	f008 fccf 	bl	d66c <ep_ctx_reset>
	}

	return 0;
}
    4cce:	2000      	movs	r0, #0
    4cd0:	bd10      	pop	{r4, pc}
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    4cd2:	4b02      	ldr	r3, [pc, #8]	; (4cdc <eps_ctx_init+0x60>)
    4cd4:	6103      	str	r3, [r0, #16]
    4cd6:	e7f8      	b.n	4cca <eps_ctx_init+0x4e>
    4cd8:	200016d8 	.word	0x200016d8
    4cdc:	200012d8 	.word	0x200012d8

00004ce0 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    4ce0:	b510      	push	{r4, lr}
    4ce2:	b082      	sub	sp, #8

#ifdef CONFIG_HAS_HW_NRF_USBREG
	/* Use CLOCK/POWER priority for compatibility with other series where
	 * USB events are handled by CLOCK interrupt handler.
	 */
	IRQ_CONNECT(USBREGULATOR_IRQn,
    4ce4:	2200      	movs	r2, #0
    4ce6:	2101      	movs	r1, #1
    4ce8:	2037      	movs	r0, #55	; 0x37
    4cea:	f7ff f847 	bl	3d7c <z_arm_irq_priority_set>
		    DT_IRQ(DT_INST(0, nordic_nrf_clock), priority),
		    nrfx_isr, nrfx_usbreg_irq_handler, 0);
	irq_enable(USBREGULATOR_IRQn);
    4cee:	2037      	movs	r0, #55	; 0x37
    4cf0:	f7ff f812 	bl	3d18 <arch_irq_enable>
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    4cf4:	480b      	ldr	r0, [pc, #44]	; (4d24 <usb_init+0x44>)
    4cf6:	f003 fab7 	bl	8268 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);
    4cfa:	480b      	ldr	r0, [pc, #44]	; (4d28 <usb_init+0x48>)
    4cfc:	f005 f908 	bl	9f10 <nrfx_usbreg_init>

	k_work_queue_start(&usbd_work_queue,
    4d00:	2400      	movs	r4, #0
    4d02:	9400      	str	r4, [sp, #0]
    4d04:	f04f 33ff 	mov.w	r3, #4294967295
    4d08:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4d0c:	4907      	ldr	r1, [pc, #28]	; (4d2c <usb_init+0x4c>)
    4d0e:	4808      	ldr	r0, [pc, #32]	; (4d30 <usb_init+0x50>)
    4d10:	f005 fed0 	bl	aab4 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
    4d14:	4907      	ldr	r1, [pc, #28]	; (4d34 <usb_init+0x54>)
    4d16:	4808      	ldr	r0, [pc, #32]	; (4d38 <usb_init+0x58>)
    4d18:	f009 fc08 	bl	e52c <k_work_init>

	return 0;
}
    4d1c:	4620      	mov	r0, r4
    4d1e:	b002      	add	sp, #8
    4d20:	bd10      	pop	{r4, pc}
    4d22:	bf00      	nop
    4d24:	0000fe68 	.word	0x0000fe68
    4d28:	0000fe6c 	.word	0x0000fe6c
    4d2c:	200027e8 	.word	0x200027e8
    4d30:	20000710 	.word	0x20000710
    4d34:	00004fb1 	.word	0x00004fb1
    4d38:	20001900 	.word	0x20001900

00004d3c <submit_dc_power_event>:
{
    4d3c:	b530      	push	{r4, r5, lr}
    4d3e:	b083      	sub	sp, #12
    4d40:	4605      	mov	r5, r0
	if (k_mem_slab_alloc(&fifo_elem_slab,
    4d42:	2200      	movs	r2, #0
    4d44:	2300      	movs	r3, #0
    4d46:	a901      	add	r1, sp, #4
    4d48:	482e      	ldr	r0, [pc, #184]	; (4e04 <submit_dc_power_event+0xc8>)
    4d4a:	f005 faf7 	bl	a33c <k_mem_slab_alloc>
    4d4e:	b980      	cbnz	r0, 4d72 <submit_dc_power_event+0x36>
	ev = (struct usbd_event *)block.data;
    4d50:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    4d52:	6064      	str	r4, [r4, #4]
	if (!ev) {
    4d54:	b15c      	cbz	r4, 4d6e <submit_dc_power_event+0x32>
	ev->evt_type = USBD_EVT_POWER;
    4d56:	2300      	movs	r3, #0
    4d58:	7423      	strb	r3, [r4, #16]
	ev->evt.pwr_evt.state = state;
    4d5a:	7225      	strb	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    4d5c:	4621      	mov	r1, r4
    4d5e:	482a      	ldr	r0, [pc, #168]	; (4e08 <submit_dc_power_event+0xcc>)
    4d60:	f009 fbc9 	bl	e4f6 <k_queue_append>
	if (usbd_ctx.attached) {
    4d64:	4b29      	ldr	r3, [pc, #164]	; (4e0c <submit_dc_power_event+0xd0>)
    4d66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4d6a:	2b00      	cmp	r3, #0
    4d6c:	d144      	bne.n	4df8 <submit_dc_power_event+0xbc>
}
    4d6e:	b003      	add	sp, #12
    4d70:	bd30      	pop	{r4, r5, pc}
    4d72:	4b27      	ldr	r3, [pc, #156]	; (4e10 <submit_dc_power_event+0xd4>)
    4d74:	4a27      	ldr	r2, [pc, #156]	; (4e14 <submit_dc_power_event+0xd8>)
    4d76:	1a9b      	subs	r3, r3, r2
    4d78:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    4d7a:	f04f 0100 	mov.w	r1, #0
    4d7e:	2201      	movs	r2, #1
    4d80:	f362 0102 	bfi	r1, r2, #0, #3
    4d84:	f36f 01c5 	bfc	r1, #3, #3
    4d88:	f363 118f 	bfi	r1, r3, #6, #10
    4d8c:	4822      	ldr	r0, [pc, #136]	; (4e18 <submit_dc_power_event+0xdc>)
    4d8e:	f7fc fe1b 	bl	19c8 <log_0>
static inline void usbd_evt_flush(void)
    4d92:	e004      	b.n	4d9e <submit_dc_power_event+0x62>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4d94:	1d01      	adds	r1, r0, #4
    4d96:	481b      	ldr	r0, [pc, #108]	; (4e04 <submit_dc_power_event+0xc8>)
    4d98:	f009 fa9c 	bl	e2d4 <k_mem_slab_free>
	} while (ev != NULL);
    4d9c:	b144      	cbz	r4, 4db0 <submit_dc_power_event+0x74>
	return z_impl_k_queue_get(queue, timeout);
    4d9e:	2200      	movs	r2, #0
    4da0:	2300      	movs	r3, #0
    4da2:	4819      	ldr	r0, [pc, #100]	; (4e08 <submit_dc_power_event+0xcc>)
    4da4:	f005 fcdc 	bl	a760 <z_impl_k_queue_get>
		if (ev) {
    4da8:	4604      	mov	r4, r0
    4daa:	2800      	cmp	r0, #0
    4dac:	d1f2      	bne.n	4d94 <submit_dc_power_event+0x58>
    4dae:	e7f5      	b.n	4d9c <submit_dc_power_event+0x60>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    4db0:	2200      	movs	r2, #0
    4db2:	2300      	movs	r3, #0
    4db4:	a901      	add	r1, sp, #4
    4db6:	4813      	ldr	r0, [pc, #76]	; (4e04 <submit_dc_power_event+0xc8>)
    4db8:	f005 fac0 	bl	a33c <k_mem_slab_alloc>
    4dbc:	b180      	cbz	r0, 4de0 <submit_dc_power_event+0xa4>
    4dbe:	4b14      	ldr	r3, [pc, #80]	; (4e10 <submit_dc_power_event+0xd4>)
    4dc0:	4a14      	ldr	r2, [pc, #80]	; (4e14 <submit_dc_power_event+0xd8>)
    4dc2:	1a9b      	subs	r3, r3, r2
    4dc4:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    4dc6:	f04f 0100 	mov.w	r1, #0
    4dca:	2201      	movs	r2, #1
    4dcc:	f362 0102 	bfi	r1, r2, #0, #3
    4dd0:	f36f 01c5 	bfc	r1, #3, #3
    4dd4:	f363 118f 	bfi	r1, r3, #6, #10
    4dd8:	4810      	ldr	r0, [pc, #64]	; (4e1c <submit_dc_power_event+0xe0>)
    4dda:	f7fc fdf5 	bl	19c8 <log_0>
			return NULL;
    4dde:	e7b9      	b.n	4d54 <submit_dc_power_event+0x18>
		ev = (struct usbd_event *)block.data;
    4de0:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    4de2:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    4de4:	2304      	movs	r3, #4
    4de6:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    4de8:	4807      	ldr	r0, [pc, #28]	; (4e08 <submit_dc_power_event+0xcc>)
    4dea:	f009 fb84 	bl	e4f6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    4dee:	490c      	ldr	r1, [pc, #48]	; (4e20 <submit_dc_power_event+0xe4>)
    4df0:	480c      	ldr	r0, [pc, #48]	; (4e24 <submit_dc_power_event+0xe8>)
    4df2:	f009 fba1 	bl	e538 <k_work_submit_to_queue>
		return NULL;
    4df6:	e7ad      	b.n	4d54 <submit_dc_power_event+0x18>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    4df8:	4909      	ldr	r1, [pc, #36]	; (4e20 <submit_dc_power_event+0xe4>)
    4dfa:	480a      	ldr	r0, [pc, #40]	; (4e24 <submit_dc_power_event+0xe8>)
    4dfc:	f009 fb9c 	bl	e538 <k_work_submit_to_queue>
}
    4e00:	e7b5      	b.n	4d6e <submit_dc_power_event+0x32>
    4e02:	bf00      	nop
    4e04:	20000358 	.word	0x20000358
    4e08:	200003e8 	.word	0x200003e8
    4e0c:	200018d8 	.word	0x200018d8
    4e10:	0000ef64 	.word	0x0000ef64
    4e14:	0000eefc 	.word	0x0000eefc
    4e18:	0000fc48 	.word	0x0000fc48
    4e1c:	0000fc68 	.word	0x0000fc68
    4e20:	20001900 	.word	0x20001900
    4e24:	20000710 	.word	0x20000710

00004e28 <usb_dc_power_event_handler>:
{
    4e28:	b508      	push	{r3, lr}
	switch (event) {
    4e2a:	2801      	cmp	r0, #1
    4e2c:	d014      	beq.n	4e58 <usb_dc_power_event_handler+0x30>
    4e2e:	2802      	cmp	r0, #2
    4e30:	d015      	beq.n	4e5e <usb_dc_power_event_handler+0x36>
    4e32:	b198      	cbz	r0, 4e5c <usb_dc_power_event_handler+0x34>
    4e34:	4b0b      	ldr	r3, [pc, #44]	; (4e64 <usb_dc_power_event_handler+0x3c>)
    4e36:	4a0c      	ldr	r2, [pc, #48]	; (4e68 <usb_dc_power_event_handler+0x40>)
    4e38:	1a9b      	subs	r3, r3, r2
    4e3a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unknown USB power event %d", event);
    4e3c:	f04f 0200 	mov.w	r2, #0
    4e40:	2101      	movs	r1, #1
    4e42:	f361 0202 	bfi	r2, r1, #0, #3
    4e46:	f36f 02c5 	bfc	r2, #3, #3
    4e4a:	f363 128f 	bfi	r2, r3, #6, #10
    4e4e:	4601      	mov	r1, r0
    4e50:	4806      	ldr	r0, [pc, #24]	; (4e6c <usb_dc_power_event_handler+0x44>)
    4e52:	f7fc fd47 	bl	18e4 <log_1>
    4e56:	e004      	b.n	4e62 <usb_dc_power_event_handler+0x3a>
		new_state = USBD_DETACHED;
    4e58:	2000      	movs	r0, #0
    4e5a:	e000      	b.n	4e5e <usb_dc_power_event_handler+0x36>
	switch (event) {
    4e5c:	2001      	movs	r0, #1
	submit_dc_power_event(new_state);
    4e5e:	f7ff ff6d 	bl	4d3c <submit_dc_power_event>
}
    4e62:	bd08      	pop	{r3, pc}
    4e64:	0000ef64 	.word	0x0000ef64
    4e68:	0000eefc 	.word	0x0000eefc
    4e6c:	0000fc84 	.word	0x0000fc84

00004e70 <usbd_sof_trigger_iso_read>:
{
    4e70:	b530      	push	{r4, r5, lr}
    4e72:	b083      	sub	sp, #12
	ep_ctx = endpoint_ctx(NRFX_USBD_EPOUT8);
    4e74:	2008      	movs	r0, #8
    4e76:	f7ff fecd 	bl	4c14 <endpoint_ctx>
	if (!ep_ctx) {
    4e7a:	b120      	cbz	r0, 4e86 <usbd_sof_trigger_iso_read+0x16>
    4e7c:	4605      	mov	r5, r0
	if (ep_ctx->cfg.en) {
    4e7e:	7a03      	ldrb	r3, [r0, #8]
    4e80:	b993      	cbnz	r3, 4ea8 <usbd_sof_trigger_iso_read+0x38>
}
    4e82:	b003      	add	sp, #12
    4e84:	bd30      	pop	{r4, r5, pc}
    4e86:	4b40      	ldr	r3, [pc, #256]	; (4f88 <usbd_sof_trigger_iso_read+0x118>)
    4e88:	4a40      	ldr	r2, [pc, #256]	; (4f8c <usbd_sof_trigger_iso_read+0x11c>)
    4e8a:	1a9b      	subs	r3, r3, r2
    4e8c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("There is no ISO ep");
    4e8e:	f04f 0100 	mov.w	r1, #0
    4e92:	2201      	movs	r2, #1
    4e94:	f362 0102 	bfi	r1, r2, #0, #3
    4e98:	f36f 01c5 	bfc	r1, #3, #3
    4e9c:	f363 118f 	bfi	r1, r3, #6, #10
    4ea0:	483b      	ldr	r0, [pc, #236]	; (4f90 <usbd_sof_trigger_iso_read+0x120>)
    4ea2:	f7fc fd91 	bl	19c8 <log_0>
		return;
    4ea6:	e7ec      	b.n	4e82 <usbd_sof_trigger_iso_read+0x12>
		ep_ctx->read_pending = true;
    4ea8:	2301      	movs	r3, #1
    4eaa:	7743      	strb	r3, [r0, #29]
		ep_ctx->read_complete = true;
    4eac:	7703      	strb	r3, [r0, #28]
	if (k_mem_slab_alloc(&fifo_elem_slab,
    4eae:	2200      	movs	r2, #0
    4eb0:	2300      	movs	r3, #0
    4eb2:	a901      	add	r1, sp, #4
    4eb4:	4837      	ldr	r0, [pc, #220]	; (4f94 <usbd_sof_trigger_iso_read+0x124>)
    4eb6:	f005 fa41 	bl	a33c <k_mem_slab_alloc>
    4eba:	b980      	cbnz	r0, 4ede <usbd_sof_trigger_iso_read+0x6e>
	ev = (struct usbd_event *)block.data;
    4ebc:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    4ebe:	6064      	str	r4, [r4, #4]
		if (!ev) {
    4ec0:	2c00      	cmp	r4, #0
    4ec2:	d04f      	beq.n	4f64 <usbd_sof_trigger_iso_read+0xf4>
		ev->evt_type = USBD_EVT_EP;
    4ec4:	2301      	movs	r3, #1
    4ec6:	7423      	strb	r3, [r4, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4ec8:	7323      	strb	r3, [r4, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    4eca:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    4ecc:	4621      	mov	r1, r4
    4ece:	4832      	ldr	r0, [pc, #200]	; (4f98 <usbd_sof_trigger_iso_read+0x128>)
    4ed0:	f009 fb11 	bl	e4f6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    4ed4:	4931      	ldr	r1, [pc, #196]	; (4f9c <usbd_sof_trigger_iso_read+0x12c>)
    4ed6:	4832      	ldr	r0, [pc, #200]	; (4fa0 <usbd_sof_trigger_iso_read+0x130>)
    4ed8:	f009 fb2e 	bl	e538 <k_work_submit_to_queue>
}
    4edc:	e7d1      	b.n	4e82 <usbd_sof_trigger_iso_read+0x12>
    4ede:	4b2a      	ldr	r3, [pc, #168]	; (4f88 <usbd_sof_trigger_iso_read+0x118>)
    4ee0:	4a2a      	ldr	r2, [pc, #168]	; (4f8c <usbd_sof_trigger_iso_read+0x11c>)
    4ee2:	1a9b      	subs	r3, r3, r2
    4ee4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    4ee6:	f04f 0100 	mov.w	r1, #0
    4eea:	2201      	movs	r2, #1
    4eec:	f362 0102 	bfi	r1, r2, #0, #3
    4ef0:	f36f 01c5 	bfc	r1, #3, #3
    4ef4:	f363 118f 	bfi	r1, r3, #6, #10
    4ef8:	482a      	ldr	r0, [pc, #168]	; (4fa4 <usbd_sof_trigger_iso_read+0x134>)
    4efa:	f7fc fd65 	bl	19c8 <log_0>
static inline void usbd_evt_flush(void)
    4efe:	e000      	b.n	4f02 <usbd_sof_trigger_iso_read+0x92>
	} while (ev != NULL);
    4f00:	b164      	cbz	r4, 4f1c <usbd_sof_trigger_iso_read+0xac>
    4f02:	2200      	movs	r2, #0
    4f04:	2300      	movs	r3, #0
    4f06:	4824      	ldr	r0, [pc, #144]	; (4f98 <usbd_sof_trigger_iso_read+0x128>)
    4f08:	f005 fc2a 	bl	a760 <z_impl_k_queue_get>
		if (ev) {
    4f0c:	4604      	mov	r4, r0
    4f0e:	2800      	cmp	r0, #0
    4f10:	d0f6      	beq.n	4f00 <usbd_sof_trigger_iso_read+0x90>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4f12:	1d01      	adds	r1, r0, #4
    4f14:	481f      	ldr	r0, [pc, #124]	; (4f94 <usbd_sof_trigger_iso_read+0x124>)
    4f16:	f009 f9dd 	bl	e2d4 <k_mem_slab_free>
}
    4f1a:	e7f1      	b.n	4f00 <usbd_sof_trigger_iso_read+0x90>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    4f1c:	2200      	movs	r2, #0
    4f1e:	2300      	movs	r3, #0
    4f20:	a901      	add	r1, sp, #4
    4f22:	481c      	ldr	r0, [pc, #112]	; (4f94 <usbd_sof_trigger_iso_read+0x124>)
    4f24:	f005 fa0a 	bl	a33c <k_mem_slab_alloc>
    4f28:	b180      	cbz	r0, 4f4c <usbd_sof_trigger_iso_read+0xdc>
    4f2a:	4b17      	ldr	r3, [pc, #92]	; (4f88 <usbd_sof_trigger_iso_read+0x118>)
    4f2c:	4a17      	ldr	r2, [pc, #92]	; (4f8c <usbd_sof_trigger_iso_read+0x11c>)
    4f2e:	1a9b      	subs	r3, r3, r2
    4f30:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    4f32:	f04f 0100 	mov.w	r1, #0
    4f36:	2201      	movs	r2, #1
    4f38:	f362 0102 	bfi	r1, r2, #0, #3
    4f3c:	f36f 01c5 	bfc	r1, #3, #3
    4f40:	f363 118f 	bfi	r1, r3, #6, #10
    4f44:	4818      	ldr	r0, [pc, #96]	; (4fa8 <usbd_sof_trigger_iso_read+0x138>)
    4f46:	f7fc fd3f 	bl	19c8 <log_0>
			return NULL;
    4f4a:	e7b9      	b.n	4ec0 <usbd_sof_trigger_iso_read+0x50>
		ev = (struct usbd_event *)block.data;
    4f4c:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    4f4e:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    4f50:	2304      	movs	r3, #4
    4f52:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    4f54:	4810      	ldr	r0, [pc, #64]	; (4f98 <usbd_sof_trigger_iso_read+0x128>)
    4f56:	f009 face 	bl	e4f6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    4f5a:	4910      	ldr	r1, [pc, #64]	; (4f9c <usbd_sof_trigger_iso_read+0x12c>)
    4f5c:	4810      	ldr	r0, [pc, #64]	; (4fa0 <usbd_sof_trigger_iso_read+0x130>)
    4f5e:	f009 faeb 	bl	e538 <k_work_submit_to_queue>
		return NULL;
    4f62:	e7ad      	b.n	4ec0 <usbd_sof_trigger_iso_read+0x50>
    4f64:	4b08      	ldr	r3, [pc, #32]	; (4f88 <usbd_sof_trigger_iso_read+0x118>)
    4f66:	4a09      	ldr	r2, [pc, #36]	; (4f8c <usbd_sof_trigger_iso_read+0x11c>)
    4f68:	1a9b      	subs	r3, r3, r2
    4f6a:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to alloc evt");
    4f6c:	f04f 0100 	mov.w	r1, #0
    4f70:	2201      	movs	r2, #1
    4f72:	f362 0102 	bfi	r1, r2, #0, #3
    4f76:	f36f 01c5 	bfc	r1, #3, #3
    4f7a:	f363 118f 	bfi	r1, r3, #6, #10
    4f7e:	480b      	ldr	r0, [pc, #44]	; (4fac <usbd_sof_trigger_iso_read+0x13c>)
    4f80:	f7fc fd22 	bl	19c8 <log_0>
			return;
    4f84:	e77d      	b.n	4e82 <usbd_sof_trigger_iso_read+0x12>
    4f86:	bf00      	nop
    4f88:	0000ef64 	.word	0x0000ef64
    4f8c:	0000eefc 	.word	0x0000eefc
    4f90:	0000fca0 	.word	0x0000fca0
    4f94:	20000358 	.word	0x20000358
    4f98:	200003e8 	.word	0x200003e8
    4f9c:	20001900 	.word	0x20001900
    4fa0:	20000710 	.word	0x20000710
    4fa4:	0000fc48 	.word	0x0000fc48
    4fa8:	0000fc68 	.word	0x0000fc68
    4fac:	0000fcb4 	.word	0x0000fcb4

00004fb0 <usbd_work_handler>:
{
    4fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fb4:	b085      	sub	sp, #20
    4fb6:	4605      	mov	r5, r0
	while ((ev = usbd_evt_get()) != NULL) {
    4fb8:	e18f      	b.n	52da <usbd_work_handler+0x32a>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4fba:	1d21      	adds	r1, r4, #4
    4fbc:	48b5      	ldr	r0, [pc, #724]	; (5294 <usbd_work_handler+0x2e4>)
    4fbe:	f009 f989 	bl	e2d4 <k_mem_slab_free>
			continue;
    4fc2:	e18a      	b.n	52da <usbd_work_handler+0x32a>
			if (!ctx->attached) {
    4fc4:	f815 3c04 	ldrb.w	r3, [r5, #-4]
    4fc8:	b14b      	cbz	r3, 4fde <usbd_work_handler+0x2e>
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    4fca:	f8d4 a008 	ldr.w	sl, [r4, #8]
	switch (ep_evt->evt_type) {
    4fce:	7b23      	ldrb	r3, [r4, #12]
    4fd0:	2b03      	cmp	r3, #3
    4fd2:	f200 817e 	bhi.w	52d2 <usbd_work_handler+0x322>
    4fd6:	e8df f003 	tbb	[pc, r3]
    4fda:	6114      	.short	0x6114
    4fdc:	a49d      	.short	0xa49d
    4fde:	4bae      	ldr	r3, [pc, #696]	; (5298 <usbd_work_handler+0x2e8>)
    4fe0:	4aae      	ldr	r2, [pc, #696]	; (529c <usbd_work_handler+0x2ec>)
    4fe2:	1a9b      	subs	r3, r3, r2
    4fe4:	08db      	lsrs	r3, r3, #3
				LOG_ERR("not attached, EP 0x%02x event dropped",
    4fe6:	2201      	movs	r2, #1
    4fe8:	f362 0702 	bfi	r7, r2, #0, #3
    4fec:	f36f 07c5 	bfc	r7, #3, #3
    4ff0:	f363 178f 	bfi	r7, r3, #6, #10
    4ff4:	68a3      	ldr	r3, [r4, #8]
    4ff6:	463a      	mov	r2, r7
    4ff8:	7a59      	ldrb	r1, [r3, #9]
    4ffa:	48a9      	ldr	r0, [pc, #676]	; (52a0 <usbd_work_handler+0x2f0>)
    4ffc:	f7fc fc72 	bl	18e4 <log_1>
    5000:	e7e3      	b.n	4fca <usbd_work_handler+0x1a>
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    5002:	f8da b014 	ldr.w	fp, [sl, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    5006:	2208      	movs	r2, #8
    5008:	2100      	movs	r1, #0
    500a:	4658      	mov	r0, fp
    500c:	f008 fb04 	bl	d618 <memset>
    return ret;
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_bmrequesttype_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    5010:	4ba4      	ldr	r3, [pc, #656]	; (52a4 <usbd_work_handler+0x2f4>)
    5012:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
	usbd_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    5016:	f88b 2000 	strb.w	r2, [fp]
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_brequest_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BREQUEST);
    501a:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
	usbd_setup->bRequest = nrf_usbd_setup_brequest_get(NRF_USBD);
    501e:	f88b 2001 	strb.w	r2, [fp, #1]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wvalue_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WVALUEL;
    5022:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    5026:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    5028:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    502c:	0209      	lsls	r1, r1, #8
    502e:	b289      	uxth	r1, r1
    5030:	430a      	orrs	r2, r1
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    5032:	f8ab 2002 	strh.w	r2, [fp, #2]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_windex_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WINDEXL;
    5036:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    503a:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    503c:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    5040:	0209      	lsls	r1, r1, #8
    5042:	b289      	uxth	r1, r1
    5044:	430a      	orrs	r2, r1
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    5046:	f8ab 2004 	strh.w	r2, [fp, #4]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wlength_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WLENGTHL;
    504a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    504e:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    5050:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    5054:	021b      	lsls	r3, r3, #8
    5056:	b29b      	uxth	r3, r3
    5058:	4313      	orrs	r3, r2
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    505a:	f8ab 3006 	strh.w	r3, [fp, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    505e:	2208      	movs	r2, #8
    5060:	f8ca 200c 	str.w	r2, [sl, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    5064:	4659      	mov	r1, fp
    5066:	4890      	ldr	r0, [pc, #576]	; (52a8 <usbd_work_handler+0x2f8>)
    5068:	f008 fab2 	bl	d5d0 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    506c:	f8da 3000 	ldr.w	r3, [sl]
    5070:	2100      	movs	r1, #0
    5072:	f89a 0009 	ldrb.w	r0, [sl, #9]
    5076:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    5078:	f99b 3000 	ldrsb.w	r3, [fp]
    507c:	2b00      	cmp	r3, #0
    507e:	db02      	blt.n	5086 <usbd_work_handler+0xd6>
    5080:	f8bb 3006 	ldrh.w	r3, [fp, #6]
    5084:	b923      	cbnz	r3, 5090 <usbd_work_handler+0xe0>
		ctx->ctrl_read_len = 0U;
    5086:	4b89      	ldr	r3, [pc, #548]	; (52ac <usbd_work_handler+0x2fc>)
    5088:	2200      	movs	r2, #0
    508a:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
}
    508e:	e120      	b.n	52d2 <usbd_work_handler+0x322>
		ctx->ctrl_read_len = usbd_setup->wLength;
    5090:	4a86      	ldr	r2, [pc, #536]	; (52ac <usbd_work_handler+0x2fc>)
    5092:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    5096:	f004 faa1 	bl	95dc <nrfx_usbd_setup_data_clear>
    509a:	e11a      	b.n	52d2 <usbd_work_handler+0x322>
	if (!ep_ctx->read_pending) {
    509c:	f89a 301d 	ldrb.w	r3, [sl, #29]
    50a0:	2b00      	cmp	r3, #0
    50a2:	f000 8116 	beq.w	52d2 <usbd_work_handler+0x322>
	if (!ep_ctx->read_complete) {
    50a6:	f89a 301c 	ldrb.w	r3, [sl, #28]
    50aa:	2b00      	cmp	r3, #0
    50ac:	f000 8111 	beq.w	52d2 <usbd_work_handler+0x322>
	ep_ctx->read_pending = false;
    50b0:	f04f 0b00 	mov.w	fp, #0
    50b4:	f88a b01d 	strb.w	fp, [sl, #29]
	ep_ctx->read_complete = false;
    50b8:	f88a b01c 	strb.w	fp, [sl, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
    50bc:	f04f 32ff 	mov.w	r2, #4294967295
    50c0:	f04f 33ff 	mov.w	r3, #4294967295
    50c4:	487a      	ldr	r0, [pc, #488]	; (52b0 <usbd_work_handler+0x300>)
    50c6:	f005 fa7d 	bl	a5c4 <z_impl_k_mutex_lock>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    50ca:	f8da 3014 	ldr.w	r3, [sl, #20]
    50ce:	9301      	str	r3, [sp, #4]
    50d0:	f8da 3004 	ldr.w	r3, [sl, #4]
    50d4:	9302      	str	r3, [sp, #8]
    50d6:	f8cd b00c 	str.w	fp, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    50da:	a901      	add	r1, sp, #4
    50dc:	f89a 0009 	ldrb.w	r0, [sl, #9]
    50e0:	f003 fe6c 	bl	8dbc <nrfx_usbd_ep_transfer>
    50e4:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
    50e6:	4b73      	ldr	r3, [pc, #460]	; (52b4 <usbd_work_handler+0x304>)
    50e8:	4298      	cmp	r0, r3
    50ea:	d103      	bne.n	50f4 <usbd_work_handler+0x144>
	return z_impl_k_mutex_unlock(mutex);
    50ec:	4870      	ldr	r0, [pc, #448]	; (52b0 <usbd_work_handler+0x300>)
    50ee:	f005 faf3 	bl	a6d8 <z_impl_k_mutex_unlock>
    50f2:	e0ee      	b.n	52d2 <usbd_work_handler+0x322>
    50f4:	4b68      	ldr	r3, [pc, #416]	; (5298 <usbd_work_handler+0x2e8>)
    50f6:	4a69      	ldr	r2, [pc, #420]	; (529c <usbd_work_handler+0x2ec>)
    50f8:	1a9b      	subs	r3, r3, r2
    50fa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    50fc:	2201      	movs	r2, #1
    50fe:	f362 0802 	bfi	r8, r2, #0, #3
    5102:	f36f 08c5 	bfc	r8, #3, #3
    5106:	f363 188f 	bfi	r8, r3, #6, #10
    510a:	4642      	mov	r2, r8
    510c:	486a      	ldr	r0, [pc, #424]	; (52b8 <usbd_work_handler+0x308>)
    510e:	f7fc fbe9 	bl	18e4 <log_1>
    5112:	e7eb      	b.n	50ec <usbd_work_handler+0x13c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    5114:	f8da 3000 	ldr.w	r3, [sl]
    5118:	2101      	movs	r1, #1
    511a:	f89a 0009 	ldrb.w	r0, [sl, #9]
    511e:	4798      	blx	r3
		break;
    5120:	e0d7      	b.n	52d2 <usbd_work_handler+0x322>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    5122:	f89a 300a 	ldrb.w	r3, [sl, #10]
    5126:	b913      	cbnz	r3, 512e <usbd_work_handler+0x17e>
		    !ep_ctx->trans_zlp) {
    5128:	f89a 301f 	ldrb.w	r3, [sl, #31]
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    512c:	b133      	cbz	r3, 513c <usbd_work_handler+0x18c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    512e:	f8da 3000 	ldr.w	r3, [sl]
    5132:	2102      	movs	r1, #2
    5134:	f89a 0009 	ldrb.w	r0, [sl, #9]
    5138:	4798      	blx	r3
}
    513a:	e0ca      	b.n	52d2 <usbd_work_handler+0x322>
	return z_impl_k_mutex_lock(mutex, timeout);
    513c:	f8df b170 	ldr.w	fp, [pc, #368]	; 52b0 <usbd_work_handler+0x300>
    5140:	f04f 32ff 	mov.w	r2, #4294967295
    5144:	f04f 33ff 	mov.w	r3, #4294967295
    5148:	4658      	mov	r0, fp
    514a:	f005 fa3b 	bl	a5c4 <z_impl_k_mutex_lock>
			nrfx_usbd_setup_clear();
    514e:	f004 fa8f 	bl	9670 <nrfx_usbd_setup_clear>
	return z_impl_k_mutex_unlock(mutex);
    5152:	4658      	mov	r0, fp
    5154:	f005 fac0 	bl	a6d8 <z_impl_k_mutex_unlock>
    5158:	e7e9      	b.n	512e <usbd_work_handler+0x17e>
	switch (pwr_evt->state) {
    515a:	7a23      	ldrb	r3, [r4, #8]
    515c:	2b04      	cmp	r3, #4
    515e:	f200 80b8 	bhi.w	52d2 <usbd_work_handler+0x322>
    5162:	e8df f003 	tbb	[pc, r3]
    5166:	0322      	.short	0x0322
    5168:	350e      	.short	0x350e
    516a:	44          	.byte	0x44
    516b:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    516c:	f003 fdb4 	bl	8cd8 <nrfx_usbd_is_enabled>
    5170:	2800      	cmp	r0, #0
    5172:	f040 80ae 	bne.w	52d2 <usbd_work_handler+0x322>
			nrfx_usbd_enable();
    5176:	f003 fcf9 	bl	8b6c <nrfx_usbd_enable>
			err = hfxo_start(ctx);
    517a:	484c      	ldr	r0, [pc, #304]	; (52ac <usbd_work_handler+0x2fc>)
    517c:	f008 fad9 	bl	d732 <hfxo_start>
    5180:	e0a7      	b.n	52d2 <usbd_work_handler+0x322>
		usbd_enable_endpoints(ctx);
    5182:	f8df a128 	ldr.w	sl, [pc, #296]	; 52ac <usbd_work_handler+0x2fc>
    5186:	4650      	mov	r0, sl
    5188:	f008 faa1 	bl	d6ce <usbd_enable_endpoints>
		nrfx_usbd_start(true);
    518c:	2001      	movs	r0, #1
    518e:	f003 fd87 	bl	8ca0 <nrfx_usbd_start>
		ctx->ready = true;
    5192:	2301      	movs	r3, #1
    5194:	f88a 3025 	strb.w	r3, [sl, #37]	; 0x25
		if (ctx->status_cb) {
    5198:	f8da 3000 	ldr.w	r3, [sl]
    519c:	2b00      	cmp	r3, #0
    519e:	f000 8098 	beq.w	52d2 <usbd_work_handler+0x322>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    51a2:	2100      	movs	r1, #0
    51a4:	2002      	movs	r0, #2
    51a6:	4798      	blx	r3
    51a8:	e093      	b.n	52d2 <usbd_work_handler+0x322>
		ctx->ready = false;
    51aa:	f8df a100 	ldr.w	sl, [pc, #256]	; 52ac <usbd_work_handler+0x2fc>
    51ae:	2300      	movs	r3, #0
    51b0:	f88a 3025 	strb.w	r3, [sl, #37]	; 0x25
		nrfx_usbd_disable();
    51b4:	f004 fcf8 	bl	9ba8 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    51b8:	4650      	mov	r0, sl
    51ba:	f008 fa6b 	bl	d694 <hfxo_stop>
		if (ctx->status_cb) {
    51be:	f8da 3000 	ldr.w	r3, [sl]
    51c2:	2b00      	cmp	r3, #0
    51c4:	f000 8085 	beq.w	52d2 <usbd_work_handler+0x322>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    51c8:	2100      	movs	r1, #0
    51ca:	2004      	movs	r0, #4
    51cc:	4798      	blx	r3
    51ce:	e080      	b.n	52d2 <usbd_work_handler+0x322>
	return get_usbd_ctx()->ready;
    51d0:	4b36      	ldr	r3, [pc, #216]	; (52ac <usbd_work_handler+0x2fc>)
    51d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (dev_ready()) {
    51d6:	2b00      	cmp	r3, #0
    51d8:	d07b      	beq.n	52d2 <usbd_work_handler+0x322>
			nrfx_usbd_suspend();
    51da:	f004 fd07 	bl	9bec <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    51de:	4b33      	ldr	r3, [pc, #204]	; (52ac <usbd_work_handler+0x2fc>)
    51e0:	681b      	ldr	r3, [r3, #0]
    51e2:	2b00      	cmp	r3, #0
    51e4:	d075      	beq.n	52d2 <usbd_work_handler+0x322>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    51e6:	2100      	movs	r1, #0
    51e8:	2005      	movs	r0, #5
    51ea:	4798      	blx	r3
    51ec:	e071      	b.n	52d2 <usbd_work_handler+0x322>
		if (ctx->status_cb && dev_ready()) {
    51ee:	4b2f      	ldr	r3, [pc, #188]	; (52ac <usbd_work_handler+0x2fc>)
    51f0:	681b      	ldr	r3, [r3, #0]
    51f2:	2b00      	cmp	r3, #0
    51f4:	d06d      	beq.n	52d2 <usbd_work_handler+0x322>
	return get_usbd_ctx()->ready;
    51f6:	4a2d      	ldr	r2, [pc, #180]	; (52ac <usbd_work_handler+0x2fc>)
    51f8:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
		if (ctx->status_cb && dev_ready()) {
    51fc:	2a00      	cmp	r2, #0
    51fe:	d068      	beq.n	52d2 <usbd_work_handler+0x322>
			ctx->status_cb(USB_DC_RESUME, NULL);
    5200:	2100      	movs	r1, #0
    5202:	2006      	movs	r0, #6
    5204:	4798      	blx	r3
}
    5206:	e064      	b.n	52d2 <usbd_work_handler+0x322>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5208:	f105 0a10 	add.w	sl, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    520c:	f04f 32ff 	mov.w	r2, #4294967295
    5210:	f04f 33ff 	mov.w	r3, #4294967295
    5214:	4650      	mov	r0, sl
    5216:	f005 f9d5 	bl	a5c4 <z_impl_k_mutex_lock>
			eps_ctx_init();
    521a:	f7ff fd2f 	bl	4c7c <eps_ctx_init>
	return z_impl_k_mutex_unlock(mutex);
    521e:	4650      	mov	r0, sl
    5220:	f005 fa5a 	bl	a6d8 <z_impl_k_mutex_unlock>
			if (ctx->status_cb) {
    5224:	f855 3c28 	ldr.w	r3, [r5, #-40]
    5228:	2b00      	cmp	r3, #0
    522a:	d052      	beq.n	52d2 <usbd_work_handler+0x322>
				ctx->status_cb(USB_DC_RESET, NULL);
    522c:	2100      	movs	r1, #0
    522e:	2001      	movs	r0, #1
    5230:	4798      	blx	r3
    5232:	e04e      	b.n	52d2 <usbd_work_handler+0x322>
			usbd_sof_trigger_iso_read();
    5234:	f7ff fe1c 	bl	4e70 <usbd_sof_trigger_iso_read>
			if (ctx->status_cb) {
    5238:	f855 3c28 	ldr.w	r3, [r5, #-40]
    523c:	2b00      	cmp	r3, #0
    523e:	d048      	beq.n	52d2 <usbd_work_handler+0x322>
				ctx->status_cb(USB_DC_SOF, NULL);
    5240:	2100      	movs	r1, #0
    5242:	200a      	movs	r0, #10
    5244:	4798      	blx	r3
    5246:	e044      	b.n	52d2 <usbd_work_handler+0x322>
    5248:	4b13      	ldr	r3, [pc, #76]	; (5298 <usbd_work_handler+0x2e8>)
    524a:	4a14      	ldr	r2, [pc, #80]	; (529c <usbd_work_handler+0x2ec>)
    524c:	1a9b      	subs	r3, r3, r2
    524e:	08db      	lsrs	r3, r3, #3
				LOG_ERR("USBD event queue full!");
    5250:	2201      	movs	r2, #1
    5252:	f362 0602 	bfi	r6, r2, #0, #3
    5256:	f36f 06c5 	bfc	r6, #3, #3
    525a:	f363 168f 	bfi	r6, r3, #6, #10
    525e:	4631      	mov	r1, r6
    5260:	4816      	ldr	r0, [pc, #88]	; (52bc <usbd_work_handler+0x30c>)
    5262:	f7fc fbb1 	bl	19c8 <log_0>
	nrfx_power_usbevt_disable();
    5266:	f004 fe3f 	bl	9ee8 <nrfx_usbreg_disable>
	nrfx_usbd_disable();
    526a:	f004 fc9d 	bl	9ba8 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    526e:	f003 fc73 	bl	8b58 <nrfx_usbd_uninit>
static inline void usbd_evt_flush(void)
    5272:	e006      	b.n	5282 <usbd_work_handler+0x2d2>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5274:	1d01      	adds	r1, r0, #4
    5276:	4807      	ldr	r0, [pc, #28]	; (5294 <usbd_work_handler+0x2e4>)
    5278:	f009 f82c 	bl	e2d4 <k_mem_slab_free>
	} while (ev != NULL);
    527c:	f1ba 0f00 	cmp.w	sl, #0
    5280:	d020      	beq.n	52c4 <usbd_work_handler+0x314>
	return z_impl_k_queue_get(queue, timeout);
    5282:	2200      	movs	r2, #0
    5284:	2300      	movs	r3, #0
    5286:	480e      	ldr	r0, [pc, #56]	; (52c0 <usbd_work_handler+0x310>)
    5288:	f005 fa6a 	bl	a760 <z_impl_k_queue_get>
		if (ev) {
    528c:	4682      	mov	sl, r0
    528e:	2800      	cmp	r0, #0
    5290:	d1f0      	bne.n	5274 <usbd_work_handler+0x2c4>
    5292:	e7f3      	b.n	527c <usbd_work_handler+0x2cc>
    5294:	20000358 	.word	0x20000358
    5298:	0000ef64 	.word	0x0000ef64
    529c:	0000eefc 	.word	0x0000eefc
    52a0:	0000fcc8 	.word	0x0000fcc8
    52a4:	50036000 	.word	0x50036000
    52a8:	200018dc 	.word	0x200018dc
    52ac:	200018d8 	.word	0x200018d8
    52b0:	20001910 	.word	0x20001910
    52b4:	0bad0000 	.word	0x0bad0000
    52b8:	0000fcf0 	.word	0x0000fcf0
    52bc:	0000fd18 	.word	0x0000fd18
    52c0:	200003e8 	.word	0x200003e8
	ret = eps_ctx_init();
    52c4:	f7ff fcda 	bl	4c7c <eps_ctx_init>
	nrfx_power_usbevt_enable();
    52c8:	f004 fe06 	bl	9ed8 <nrfx_usbreg_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    52cc:	481c      	ldr	r0, [pc, #112]	; (5340 <usbd_work_handler+0x390>)
    52ce:	f003 fd1d 	bl	8d0c <nrfx_usbd_init>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    52d2:	1d21      	adds	r1, r4, #4
    52d4:	481b      	ldr	r0, [pc, #108]	; (5344 <usbd_work_handler+0x394>)
    52d6:	f008 fffd 	bl	e2d4 <k_mem_slab_free>
    52da:	2200      	movs	r2, #0
    52dc:	2300      	movs	r3, #0
    52de:	481a      	ldr	r0, [pc, #104]	; (5348 <usbd_work_handler+0x398>)
    52e0:	f005 fa3e 	bl	a760 <z_impl_k_queue_get>
	while ((ev = usbd_evt_get()) != NULL) {
    52e4:	4604      	mov	r4, r0
    52e6:	b338      	cbz	r0, 5338 <usbd_work_handler+0x388>
	return get_usbd_ctx()->ready;
    52e8:	4b18      	ldr	r3, [pc, #96]	; (534c <usbd_work_handler+0x39c>)
    52ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    52ee:	b91b      	cbnz	r3, 52f8 <usbd_work_handler+0x348>
    52f0:	7c23      	ldrb	r3, [r4, #16]
    52f2:	2b00      	cmp	r3, #0
    52f4:	f47f ae61 	bne.w	4fba <usbd_work_handler+0xa>
		switch (ev->evt_type) {
    52f8:	7c21      	ldrb	r1, [r4, #16]
    52fa:	2904      	cmp	r1, #4
    52fc:	d80c      	bhi.n	5318 <usbd_work_handler+0x368>
    52fe:	a301      	add	r3, pc, #4	; (adr r3, 5304 <usbd_work_handler+0x354>)
    5300:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    5304:	0000515b 	.word	0x0000515b
    5308:	00004fc5 	.word	0x00004fc5
    530c:	00005209 	.word	0x00005209
    5310:	00005235 	.word	0x00005235
    5314:	00005249 	.word	0x00005249
    5318:	4b0d      	ldr	r3, [pc, #52]	; (5350 <usbd_work_handler+0x3a0>)
    531a:	4a0e      	ldr	r2, [pc, #56]	; (5354 <usbd_work_handler+0x3a4>)
    531c:	1a9b      	subs	r3, r3, r2
    531e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    5320:	2201      	movs	r2, #1
    5322:	f362 0902 	bfi	r9, r2, #0, #3
    5326:	f36f 09c5 	bfc	r9, #3, #3
    532a:	f363 198f 	bfi	r9, r3, #6, #10
    532e:	464a      	mov	r2, r9
    5330:	4809      	ldr	r0, [pc, #36]	; (5358 <usbd_work_handler+0x3a8>)
    5332:	f7fc fad7 	bl	18e4 <log_1>
    5336:	e7cc      	b.n	52d2 <usbd_work_handler+0x322>
}
    5338:	b005      	add	sp, #20
    533a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    533e:	bf00      	nop
    5340:	000059b9 	.word	0x000059b9
    5344:	20000358 	.word	0x20000358
    5348:	200003e8 	.word	0x200003e8
    534c:	200018d8 	.word	0x200018d8
    5350:	0000ef64 	.word	0x0000ef64
    5354:	0000eefc 	.word	0x0000eefc
    5358:	0000fd30 	.word	0x0000fd30

0000535c <usbd_event_transfer_ctrl>:
{
    535c:	b570      	push	{r4, r5, r6, lr}
    535e:	b082      	sub	sp, #8
    5360:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    5362:	7886      	ldrb	r6, [r0, #2]
    5364:	4630      	mov	r0, r6
    5366:	f7ff fc55 	bl	4c14 <endpoint_ctx>
    536a:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    536c:	f016 0f80 	tst.w	r6, #128	; 0x80
    5370:	d122      	bne.n	53b8 <usbd_event_transfer_ctrl+0x5c>
		switch (p_event->data.eptransfer.status) {
    5372:	78e1      	ldrb	r1, [r4, #3]
    5374:	2900      	cmp	r1, #0
    5376:	f000 80d8 	beq.w	552a <usbd_event_transfer_ctrl+0x1ce>
    537a:	2901      	cmp	r1, #1
    537c:	f040 815c 	bne.w	5638 <usbd_event_transfer_ctrl+0x2dc>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    5380:	2200      	movs	r2, #0
    5382:	2300      	movs	r3, #0
    5384:	a901      	add	r1, sp, #4
    5386:	48b6      	ldr	r0, [pc, #728]	; (5660 <usbd_event_transfer_ctrl+0x304>)
    5388:	f004 ffd8 	bl	a33c <k_mem_slab_alloc>
    538c:	2800      	cmp	r0, #0
    538e:	f040 8089 	bne.w	54a4 <usbd_event_transfer_ctrl+0x148>
	ev = (struct usbd_event *)block.data;
    5392:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    5394:	6064      	str	r4, [r4, #4]
			if (!ev) {
    5396:	2c00      	cmp	r4, #0
    5398:	f000 815f 	beq.w	565a <usbd_event_transfer_ctrl+0x2fe>
			ep_ctx->read_pending = true;
    539c:	2301      	movs	r3, #1
    539e:	776b      	strb	r3, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    53a0:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    53a2:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    53a4:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    53a6:	4621      	mov	r1, r4
    53a8:	48ae      	ldr	r0, [pc, #696]	; (5664 <usbd_event_transfer_ctrl+0x308>)
    53aa:	f009 f8a4 	bl	e4f6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    53ae:	49ae      	ldr	r1, [pc, #696]	; (5668 <usbd_event_transfer_ctrl+0x30c>)
    53b0:	48ae      	ldr	r0, [pc, #696]	; (566c <usbd_event_transfer_ctrl+0x310>)
    53b2:	f009 f8c1 	bl	e538 <k_work_submit_to_queue>
}
    53b6:	e150      	b.n	565a <usbd_event_transfer_ctrl+0x2fe>
		switch (p_event->data.eptransfer.status) {
    53b8:	78e1      	ldrb	r1, [r4, #3]
    53ba:	b1a1      	cbz	r1, 53e6 <usbd_event_transfer_ctrl+0x8a>
    53bc:	2903      	cmp	r1, #3
    53be:	f000 814c 	beq.w	565a <usbd_event_transfer_ctrl+0x2fe>
    53c2:	4aab      	ldr	r2, [pc, #684]	; (5670 <usbd_event_transfer_ctrl+0x314>)
    53c4:	4bab      	ldr	r3, [pc, #684]	; (5674 <usbd_event_transfer_ctrl+0x318>)
    53c6:	1ad2      	subs	r2, r2, r3
    53c8:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    53ca:	f04f 0300 	mov.w	r3, #0
    53ce:	2001      	movs	r0, #1
    53d0:	f360 0302 	bfi	r3, r0, #0, #3
    53d4:	f36f 03c5 	bfc	r3, #3, #3
    53d8:	f362 138f 	bfi	r3, r2, #6, #10
    53dc:	4632      	mov	r2, r6
    53de:	48a6      	ldr	r0, [pc, #664]	; (5678 <usbd_event_transfer_ctrl+0x31c>)
    53e0:	f7fc fab6 	bl	1950 <log_2>
    53e4:	e139      	b.n	565a <usbd_event_transfer_ctrl+0x2fe>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    53e6:	2200      	movs	r2, #0
    53e8:	2300      	movs	r3, #0
    53ea:	a901      	add	r1, sp, #4
    53ec:	489c      	ldr	r0, [pc, #624]	; (5660 <usbd_event_transfer_ctrl+0x304>)
    53ee:	f004 ffa5 	bl	a33c <k_mem_slab_alloc>
    53f2:	b9a0      	cbnz	r0, 541e <usbd_event_transfer_ctrl+0xc2>
	ev = (struct usbd_event *)block.data;
    53f4:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    53f6:	6064      	str	r4, [r4, #4]
			if (!ev) {
    53f8:	2c00      	cmp	r4, #0
    53fa:	f000 812e 	beq.w	565a <usbd_event_transfer_ctrl+0x2fe>
			ep_ctx->write_in_progress = false;
    53fe:	2300      	movs	r3, #0
    5400:	77ab      	strb	r3, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    5402:	2301      	movs	r3, #1
    5404:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    5406:	2303      	movs	r3, #3
    5408:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    540a:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    540c:	4621      	mov	r1, r4
    540e:	4895      	ldr	r0, [pc, #596]	; (5664 <usbd_event_transfer_ctrl+0x308>)
    5410:	f009 f871 	bl	e4f6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5414:	4994      	ldr	r1, [pc, #592]	; (5668 <usbd_event_transfer_ctrl+0x30c>)
    5416:	4895      	ldr	r0, [pc, #596]	; (566c <usbd_event_transfer_ctrl+0x310>)
    5418:	f009 f88e 	bl	e538 <k_work_submit_to_queue>
}
    541c:	e11d      	b.n	565a <usbd_event_transfer_ctrl+0x2fe>
    541e:	4b94      	ldr	r3, [pc, #592]	; (5670 <usbd_event_transfer_ctrl+0x314>)
    5420:	4a94      	ldr	r2, [pc, #592]	; (5674 <usbd_event_transfer_ctrl+0x318>)
    5422:	1a9b      	subs	r3, r3, r2
    5424:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    5426:	f04f 0100 	mov.w	r1, #0
    542a:	2201      	movs	r2, #1
    542c:	f362 0102 	bfi	r1, r2, #0, #3
    5430:	f36f 01c5 	bfc	r1, #3, #3
    5434:	f363 118f 	bfi	r1, r3, #6, #10
    5438:	4890      	ldr	r0, [pc, #576]	; (567c <usbd_event_transfer_ctrl+0x320>)
    543a:	f7fc fac5 	bl	19c8 <log_0>
static inline void usbd_evt_flush(void)
    543e:	e000      	b.n	5442 <usbd_event_transfer_ctrl+0xe6>
	} while (ev != NULL);
    5440:	b164      	cbz	r4, 545c <usbd_event_transfer_ctrl+0x100>
    5442:	2200      	movs	r2, #0
    5444:	2300      	movs	r3, #0
    5446:	4887      	ldr	r0, [pc, #540]	; (5664 <usbd_event_transfer_ctrl+0x308>)
    5448:	f005 f98a 	bl	a760 <z_impl_k_queue_get>
		if (ev) {
    544c:	4604      	mov	r4, r0
    544e:	2800      	cmp	r0, #0
    5450:	d0f6      	beq.n	5440 <usbd_event_transfer_ctrl+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5452:	1d01      	adds	r1, r0, #4
    5454:	4882      	ldr	r0, [pc, #520]	; (5660 <usbd_event_transfer_ctrl+0x304>)
    5456:	f008 ff3d 	bl	e2d4 <k_mem_slab_free>
}
    545a:	e7f1      	b.n	5440 <usbd_event_transfer_ctrl+0xe4>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    545c:	2200      	movs	r2, #0
    545e:	2300      	movs	r3, #0
    5460:	a901      	add	r1, sp, #4
    5462:	487f      	ldr	r0, [pc, #508]	; (5660 <usbd_event_transfer_ctrl+0x304>)
    5464:	f004 ff6a 	bl	a33c <k_mem_slab_alloc>
    5468:	b180      	cbz	r0, 548c <usbd_event_transfer_ctrl+0x130>
    546a:	4b81      	ldr	r3, [pc, #516]	; (5670 <usbd_event_transfer_ctrl+0x314>)
    546c:	4a81      	ldr	r2, [pc, #516]	; (5674 <usbd_event_transfer_ctrl+0x318>)
    546e:	1a9b      	subs	r3, r3, r2
    5470:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    5472:	f04f 0100 	mov.w	r1, #0
    5476:	2201      	movs	r2, #1
    5478:	f362 0102 	bfi	r1, r2, #0, #3
    547c:	f36f 01c5 	bfc	r1, #3, #3
    5480:	f363 118f 	bfi	r1, r3, #6, #10
    5484:	487e      	ldr	r0, [pc, #504]	; (5680 <usbd_event_transfer_ctrl+0x324>)
    5486:	f7fc fa9f 	bl	19c8 <log_0>
			return NULL;
    548a:	e7b5      	b.n	53f8 <usbd_event_transfer_ctrl+0x9c>
		ev = (struct usbd_event *)block.data;
    548c:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    548e:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5490:	2304      	movs	r3, #4
    5492:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    5494:	4873      	ldr	r0, [pc, #460]	; (5664 <usbd_event_transfer_ctrl+0x308>)
    5496:	f009 f82e 	bl	e4f6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    549a:	4973      	ldr	r1, [pc, #460]	; (5668 <usbd_event_transfer_ctrl+0x30c>)
    549c:	4873      	ldr	r0, [pc, #460]	; (566c <usbd_event_transfer_ctrl+0x310>)
    549e:	f009 f84b 	bl	e538 <k_work_submit_to_queue>
		return NULL;
    54a2:	e7a9      	b.n	53f8 <usbd_event_transfer_ctrl+0x9c>
    54a4:	4b72      	ldr	r3, [pc, #456]	; (5670 <usbd_event_transfer_ctrl+0x314>)
    54a6:	4a73      	ldr	r2, [pc, #460]	; (5674 <usbd_event_transfer_ctrl+0x318>)
    54a8:	1a9b      	subs	r3, r3, r2
    54aa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    54ac:	f04f 0100 	mov.w	r1, #0
    54b0:	2201      	movs	r2, #1
    54b2:	f362 0102 	bfi	r1, r2, #0, #3
    54b6:	f36f 01c5 	bfc	r1, #3, #3
    54ba:	f363 118f 	bfi	r1, r3, #6, #10
    54be:	486f      	ldr	r0, [pc, #444]	; (567c <usbd_event_transfer_ctrl+0x320>)
    54c0:	f7fc fa82 	bl	19c8 <log_0>
static inline void usbd_evt_flush(void)
    54c4:	e004      	b.n	54d0 <usbd_event_transfer_ctrl+0x174>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    54c6:	1d01      	adds	r1, r0, #4
    54c8:	4865      	ldr	r0, [pc, #404]	; (5660 <usbd_event_transfer_ctrl+0x304>)
    54ca:	f008 ff03 	bl	e2d4 <k_mem_slab_free>
	} while (ev != NULL);
    54ce:	b144      	cbz	r4, 54e2 <usbd_event_transfer_ctrl+0x186>
    54d0:	2200      	movs	r2, #0
    54d2:	2300      	movs	r3, #0
    54d4:	4863      	ldr	r0, [pc, #396]	; (5664 <usbd_event_transfer_ctrl+0x308>)
    54d6:	f005 f943 	bl	a760 <z_impl_k_queue_get>
		if (ev) {
    54da:	4604      	mov	r4, r0
    54dc:	2800      	cmp	r0, #0
    54de:	d1f2      	bne.n	54c6 <usbd_event_transfer_ctrl+0x16a>
    54e0:	e7f5      	b.n	54ce <usbd_event_transfer_ctrl+0x172>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    54e2:	2200      	movs	r2, #0
    54e4:	2300      	movs	r3, #0
    54e6:	a901      	add	r1, sp, #4
    54e8:	485d      	ldr	r0, [pc, #372]	; (5660 <usbd_event_transfer_ctrl+0x304>)
    54ea:	f004 ff27 	bl	a33c <k_mem_slab_alloc>
    54ee:	b180      	cbz	r0, 5512 <usbd_event_transfer_ctrl+0x1b6>
    54f0:	4b5f      	ldr	r3, [pc, #380]	; (5670 <usbd_event_transfer_ctrl+0x314>)
    54f2:	4a60      	ldr	r2, [pc, #384]	; (5674 <usbd_event_transfer_ctrl+0x318>)
    54f4:	1a9b      	subs	r3, r3, r2
    54f6:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    54f8:	f04f 0100 	mov.w	r1, #0
    54fc:	2201      	movs	r2, #1
    54fe:	f362 0102 	bfi	r1, r2, #0, #3
    5502:	f36f 01c5 	bfc	r1, #3, #3
    5506:	f363 118f 	bfi	r1, r3, #6, #10
    550a:	485d      	ldr	r0, [pc, #372]	; (5680 <usbd_event_transfer_ctrl+0x324>)
    550c:	f7fc fa5c 	bl	19c8 <log_0>
			return NULL;
    5510:	e741      	b.n	5396 <usbd_event_transfer_ctrl+0x3a>
		ev = (struct usbd_event *)block.data;
    5512:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    5514:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5516:	2304      	movs	r3, #4
    5518:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    551a:	4852      	ldr	r0, [pc, #328]	; (5664 <usbd_event_transfer_ctrl+0x308>)
    551c:	f008 ffeb 	bl	e4f6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5520:	4951      	ldr	r1, [pc, #324]	; (5668 <usbd_event_transfer_ctrl+0x30c>)
    5522:	4852      	ldr	r0, [pc, #328]	; (566c <usbd_event_transfer_ctrl+0x310>)
    5524:	f009 f808 	bl	e538 <k_work_submit_to_queue>
		return NULL;
    5528:	e735      	b.n	5396 <usbd_event_transfer_ctrl+0x3a>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    552a:	2200      	movs	r2, #0
    552c:	2300      	movs	r3, #0
    552e:	a901      	add	r1, sp, #4
    5530:	484b      	ldr	r0, [pc, #300]	; (5660 <usbd_event_transfer_ctrl+0x304>)
    5532:	f004 ff03 	bl	a33c <k_mem_slab_alloc>
    5536:	bb20      	cbnz	r0, 5582 <usbd_event_transfer_ctrl+0x226>
	ev = (struct usbd_event *)block.data;
    5538:	9e01      	ldr	r6, [sp, #4]
	ev->block = block;
    553a:	6076      	str	r6, [r6, #4]
			if (!ev) {
    553c:	2e00      	cmp	r6, #0
    553e:	f000 808c 	beq.w	565a <usbd_event_transfer_ctrl+0x2fe>
			ev->evt_type = USBD_EVT_EP;
    5542:	2301      	movs	r3, #1
    5544:	7433      	strb	r3, [r6, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    5546:	2302      	movs	r3, #2
    5548:	7333      	strb	r3, [r6, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    554a:	60b5      	str	r5, [r6, #8]
			err_code = nrfx_usbd_ep_status_get(
    554c:	f105 010c 	add.w	r1, r5, #12
    5550:	78a0      	ldrb	r0, [r4, #2]
    5552:	f003 fcc9 	bl	8ee8 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    5556:	4601      	mov	r1, r0
    5558:	2800      	cmp	r0, #0
    555a:	d155      	bne.n	5608 <usbd_event_transfer_ctrl+0x2ac>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    555c:	4b49      	ldr	r3, [pc, #292]	; (5684 <usbd_event_transfer_ctrl+0x328>)
    555e:	f8b3 328c 	ldrh.w	r3, [r3, #652]	; 0x28c
    5562:	68ea      	ldr	r2, [r5, #12]
    5564:	4293      	cmp	r3, r2
    5566:	d860      	bhi.n	562a <usbd_event_transfer_ctrl+0x2ce>
				ctx->ctrl_read_len = 0U;
    5568:	4b46      	ldr	r3, [pc, #280]	; (5684 <usbd_event_transfer_ctrl+0x328>)
    556a:	2200      	movs	r2, #0
    556c:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
	k_fifo_put(&usbd_evt_fifo, ev);
    5570:	4631      	mov	r1, r6
    5572:	483c      	ldr	r0, [pc, #240]	; (5664 <usbd_event_transfer_ctrl+0x308>)
    5574:	f008 ffbf 	bl	e4f6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5578:	493b      	ldr	r1, [pc, #236]	; (5668 <usbd_event_transfer_ctrl+0x30c>)
    557a:	483c      	ldr	r0, [pc, #240]	; (566c <usbd_event_transfer_ctrl+0x310>)
    557c:	f008 ffdc 	bl	e538 <k_work_submit_to_queue>
}
    5580:	e06b      	b.n	565a <usbd_event_transfer_ctrl+0x2fe>
    5582:	4b3b      	ldr	r3, [pc, #236]	; (5670 <usbd_event_transfer_ctrl+0x314>)
    5584:	4a3b      	ldr	r2, [pc, #236]	; (5674 <usbd_event_transfer_ctrl+0x318>)
    5586:	1a9b      	subs	r3, r3, r2
    5588:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    558a:	f04f 0100 	mov.w	r1, #0
    558e:	2201      	movs	r2, #1
    5590:	f362 0102 	bfi	r1, r2, #0, #3
    5594:	f36f 01c5 	bfc	r1, #3, #3
    5598:	f363 118f 	bfi	r1, r3, #6, #10
    559c:	4837      	ldr	r0, [pc, #220]	; (567c <usbd_event_transfer_ctrl+0x320>)
    559e:	f7fc fa13 	bl	19c8 <log_0>
static inline void usbd_evt_flush(void)
    55a2:	e004      	b.n	55ae <usbd_event_transfer_ctrl+0x252>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    55a4:	1d01      	adds	r1, r0, #4
    55a6:	482e      	ldr	r0, [pc, #184]	; (5660 <usbd_event_transfer_ctrl+0x304>)
    55a8:	f008 fe94 	bl	e2d4 <k_mem_slab_free>
	} while (ev != NULL);
    55ac:	b146      	cbz	r6, 55c0 <usbd_event_transfer_ctrl+0x264>
    55ae:	2200      	movs	r2, #0
    55b0:	2300      	movs	r3, #0
    55b2:	482c      	ldr	r0, [pc, #176]	; (5664 <usbd_event_transfer_ctrl+0x308>)
    55b4:	f005 f8d4 	bl	a760 <z_impl_k_queue_get>
		if (ev) {
    55b8:	4606      	mov	r6, r0
    55ba:	2800      	cmp	r0, #0
    55bc:	d1f2      	bne.n	55a4 <usbd_event_transfer_ctrl+0x248>
    55be:	e7f5      	b.n	55ac <usbd_event_transfer_ctrl+0x250>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    55c0:	2200      	movs	r2, #0
    55c2:	2300      	movs	r3, #0
    55c4:	a901      	add	r1, sp, #4
    55c6:	4826      	ldr	r0, [pc, #152]	; (5660 <usbd_event_transfer_ctrl+0x304>)
    55c8:	f004 feb8 	bl	a33c <k_mem_slab_alloc>
    55cc:	b180      	cbz	r0, 55f0 <usbd_event_transfer_ctrl+0x294>
    55ce:	4b28      	ldr	r3, [pc, #160]	; (5670 <usbd_event_transfer_ctrl+0x314>)
    55d0:	4a28      	ldr	r2, [pc, #160]	; (5674 <usbd_event_transfer_ctrl+0x318>)
    55d2:	1a9b      	subs	r3, r3, r2
    55d4:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    55d6:	f04f 0100 	mov.w	r1, #0
    55da:	2201      	movs	r2, #1
    55dc:	f362 0102 	bfi	r1, r2, #0, #3
    55e0:	f36f 01c5 	bfc	r1, #3, #3
    55e4:	f363 118f 	bfi	r1, r3, #6, #10
    55e8:	4825      	ldr	r0, [pc, #148]	; (5680 <usbd_event_transfer_ctrl+0x324>)
    55ea:	f7fc f9ed 	bl	19c8 <log_0>
			return NULL;
    55ee:	e7a5      	b.n	553c <usbd_event_transfer_ctrl+0x1e0>
		ev = (struct usbd_event *)block.data;
    55f0:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    55f2:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    55f4:	2304      	movs	r3, #4
    55f6:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    55f8:	481a      	ldr	r0, [pc, #104]	; (5664 <usbd_event_transfer_ctrl+0x308>)
    55fa:	f008 ff7c 	bl	e4f6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    55fe:	491a      	ldr	r1, [pc, #104]	; (5668 <usbd_event_transfer_ctrl+0x30c>)
    5600:	481a      	ldr	r0, [pc, #104]	; (566c <usbd_event_transfer_ctrl+0x310>)
    5602:	f008 ff99 	bl	e538 <k_work_submit_to_queue>
		return NULL;
    5606:	e799      	b.n	553c <usbd_event_transfer_ctrl+0x1e0>
    5608:	4b19      	ldr	r3, [pc, #100]	; (5670 <usbd_event_transfer_ctrl+0x314>)
    560a:	4a1a      	ldr	r2, [pc, #104]	; (5674 <usbd_event_transfer_ctrl+0x318>)
    560c:	1a9b      	subs	r3, r3, r2
    560e:	08db      	lsrs	r3, r3, #3
				LOG_ERR("_ep_status_get failed! Code: %d",
    5610:	f04f 0200 	mov.w	r2, #0
    5614:	2001      	movs	r0, #1
    5616:	f360 0202 	bfi	r2, r0, #0, #3
    561a:	f36f 02c5 	bfc	r2, #3, #3
    561e:	f363 128f 	bfi	r2, r3, #6, #10
    5622:	4819      	ldr	r0, [pc, #100]	; (5688 <usbd_event_transfer_ctrl+0x32c>)
    5624:	f7fc f95e 	bl	18e4 <log_1>
    5628:	e798      	b.n	555c <usbd_event_transfer_ctrl+0x200>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    562a:	1a9b      	subs	r3, r3, r2
    562c:	4a15      	ldr	r2, [pc, #84]	; (5684 <usbd_event_transfer_ctrl+0x328>)
    562e:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    5632:	f003 ffd3 	bl	95dc <nrfx_usbd_setup_data_clear>
    5636:	e79b      	b.n	5570 <usbd_event_transfer_ctrl+0x214>
    5638:	4a0d      	ldr	r2, [pc, #52]	; (5670 <usbd_event_transfer_ctrl+0x314>)
    563a:	4b0e      	ldr	r3, [pc, #56]	; (5674 <usbd_event_transfer_ctrl+0x318>)
    563c:	1ad2      	subs	r2, r2, r3
    563e:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    5640:	f04f 0300 	mov.w	r3, #0
    5644:	2001      	movs	r0, #1
    5646:	f360 0302 	bfi	r3, r0, #0, #3
    564a:	f36f 03c5 	bfc	r3, #3, #3
    564e:	f362 138f 	bfi	r3, r2, #6, #10
    5652:	4632      	mov	r2, r6
    5654:	4808      	ldr	r0, [pc, #32]	; (5678 <usbd_event_transfer_ctrl+0x31c>)
    5656:	f7fc f97b 	bl	1950 <log_2>
}
    565a:	b002      	add	sp, #8
    565c:	bd70      	pop	{r4, r5, r6, pc}
    565e:	bf00      	nop
    5660:	20000358 	.word	0x20000358
    5664:	200003e8 	.word	0x200003e8
    5668:	20001900 	.word	0x20001900
    566c:	20000710 	.word	0x20000710
    5670:	0000ef64 	.word	0x0000ef64
    5674:	0000eefc 	.word	0x0000eefc
    5678:	0000fd48 	.word	0x0000fd48
    567c:	0000fc48 	.word	0x0000fc48
    5680:	0000fc68 	.word	0x0000fc68
    5684:	200018d8 	.word	0x200018d8
    5688:	0000fd74 	.word	0x0000fd74

0000568c <usbd_event_transfer_data>:
{
    568c:	b570      	push	{r4, r5, r6, lr}
    568e:	b082      	sub	sp, #8
    5690:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    5692:	7886      	ldrb	r6, [r0, #2]
    5694:	4630      	mov	r0, r6
    5696:	f7ff fabd 	bl	4c14 <endpoint_ctx>
    569a:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    569c:	f016 0f80 	tst.w	r6, #128	; 0x80
    56a0:	d122      	bne.n	56e8 <usbd_event_transfer_data+0x5c>
		switch (p_event->data.eptransfer.status) {
    56a2:	78e1      	ldrb	r1, [r4, #3]
    56a4:	2900      	cmp	r1, #0
    56a6:	f000 80d8 	beq.w	585a <usbd_event_transfer_data+0x1ce>
    56aa:	2901      	cmp	r1, #1
    56ac:	f040 815d 	bne.w	596a <usbd_event_transfer_data+0x2de>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    56b0:	2200      	movs	r2, #0
    56b2:	2300      	movs	r3, #0
    56b4:	a901      	add	r1, sp, #4
    56b6:	48b6      	ldr	r0, [pc, #728]	; (5990 <usbd_event_transfer_data+0x304>)
    56b8:	f004 fe40 	bl	a33c <k_mem_slab_alloc>
    56bc:	2800      	cmp	r0, #0
    56be:	f040 8089 	bne.w	57d4 <usbd_event_transfer_data+0x148>
	ev = (struct usbd_event *)block.data;
    56c2:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    56c4:	6064      	str	r4, [r4, #4]
			if (!ev) {
    56c6:	2c00      	cmp	r4, #0
    56c8:	f000 8160 	beq.w	598c <usbd_event_transfer_data+0x300>
			ep_ctx->read_pending = true;
    56cc:	2301      	movs	r3, #1
    56ce:	776b      	strb	r3, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    56d0:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    56d2:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    56d4:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    56d6:	4621      	mov	r1, r4
    56d8:	48ae      	ldr	r0, [pc, #696]	; (5994 <usbd_event_transfer_data+0x308>)
    56da:	f008 ff0c 	bl	e4f6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    56de:	49ae      	ldr	r1, [pc, #696]	; (5998 <usbd_event_transfer_data+0x30c>)
    56e0:	48ae      	ldr	r0, [pc, #696]	; (599c <usbd_event_transfer_data+0x310>)
    56e2:	f008 ff29 	bl	e538 <k_work_submit_to_queue>
}
    56e6:	e151      	b.n	598c <usbd_event_transfer_data+0x300>
		switch (p_event->data.eptransfer.status) {
    56e8:	78e1      	ldrb	r1, [r4, #3]
    56ea:	b1a1      	cbz	r1, 5716 <usbd_event_transfer_data+0x8a>
    56ec:	2903      	cmp	r1, #3
    56ee:	f000 814d 	beq.w	598c <usbd_event_transfer_data+0x300>
    56f2:	4aab      	ldr	r2, [pc, #684]	; (59a0 <usbd_event_transfer_data+0x314>)
    56f4:	4bab      	ldr	r3, [pc, #684]	; (59a4 <usbd_event_transfer_data+0x318>)
    56f6:	1ad2      	subs	r2, r2, r3
    56f8:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    56fa:	f04f 0300 	mov.w	r3, #0
    56fe:	2001      	movs	r0, #1
    5700:	f360 0302 	bfi	r3, r0, #0, #3
    5704:	f36f 03c5 	bfc	r3, #3, #3
    5708:	f362 138f 	bfi	r3, r2, #6, #10
    570c:	4632      	mov	r2, r6
    570e:	48a6      	ldr	r0, [pc, #664]	; (59a8 <usbd_event_transfer_data+0x31c>)
    5710:	f7fc f91e 	bl	1950 <log_2>
    5714:	e13a      	b.n	598c <usbd_event_transfer_data+0x300>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    5716:	2200      	movs	r2, #0
    5718:	2300      	movs	r3, #0
    571a:	a901      	add	r1, sp, #4
    571c:	489c      	ldr	r0, [pc, #624]	; (5990 <usbd_event_transfer_data+0x304>)
    571e:	f004 fe0d 	bl	a33c <k_mem_slab_alloc>
    5722:	b9a0      	cbnz	r0, 574e <usbd_event_transfer_data+0xc2>
	ev = (struct usbd_event *)block.data;
    5724:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    5726:	6064      	str	r4, [r4, #4]
			if (!ev) {
    5728:	2c00      	cmp	r4, #0
    572a:	f000 812f 	beq.w	598c <usbd_event_transfer_data+0x300>
			ep_ctx->write_in_progress = false;
    572e:	2300      	movs	r3, #0
    5730:	77ab      	strb	r3, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    5732:	2301      	movs	r3, #1
    5734:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    5736:	2303      	movs	r3, #3
    5738:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    573a:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    573c:	4621      	mov	r1, r4
    573e:	4895      	ldr	r0, [pc, #596]	; (5994 <usbd_event_transfer_data+0x308>)
    5740:	f008 fed9 	bl	e4f6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5744:	4994      	ldr	r1, [pc, #592]	; (5998 <usbd_event_transfer_data+0x30c>)
    5746:	4895      	ldr	r0, [pc, #596]	; (599c <usbd_event_transfer_data+0x310>)
    5748:	f008 fef6 	bl	e538 <k_work_submit_to_queue>
}
    574c:	e11e      	b.n	598c <usbd_event_transfer_data+0x300>
    574e:	4b94      	ldr	r3, [pc, #592]	; (59a0 <usbd_event_transfer_data+0x314>)
    5750:	4a94      	ldr	r2, [pc, #592]	; (59a4 <usbd_event_transfer_data+0x318>)
    5752:	1a9b      	subs	r3, r3, r2
    5754:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    5756:	f04f 0100 	mov.w	r1, #0
    575a:	2201      	movs	r2, #1
    575c:	f362 0102 	bfi	r1, r2, #0, #3
    5760:	f36f 01c5 	bfc	r1, #3, #3
    5764:	f363 118f 	bfi	r1, r3, #6, #10
    5768:	4890      	ldr	r0, [pc, #576]	; (59ac <usbd_event_transfer_data+0x320>)
    576a:	f7fc f92d 	bl	19c8 <log_0>
static inline void usbd_evt_flush(void)
    576e:	e000      	b.n	5772 <usbd_event_transfer_data+0xe6>
	} while (ev != NULL);
    5770:	b164      	cbz	r4, 578c <usbd_event_transfer_data+0x100>
    5772:	2200      	movs	r2, #0
    5774:	2300      	movs	r3, #0
    5776:	4887      	ldr	r0, [pc, #540]	; (5994 <usbd_event_transfer_data+0x308>)
    5778:	f004 fff2 	bl	a760 <z_impl_k_queue_get>
		if (ev) {
    577c:	4604      	mov	r4, r0
    577e:	2800      	cmp	r0, #0
    5780:	d0f6      	beq.n	5770 <usbd_event_transfer_data+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5782:	1d01      	adds	r1, r0, #4
    5784:	4882      	ldr	r0, [pc, #520]	; (5990 <usbd_event_transfer_data+0x304>)
    5786:	f008 fda5 	bl	e2d4 <k_mem_slab_free>
}
    578a:	e7f1      	b.n	5770 <usbd_event_transfer_data+0xe4>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    578c:	2200      	movs	r2, #0
    578e:	2300      	movs	r3, #0
    5790:	a901      	add	r1, sp, #4
    5792:	487f      	ldr	r0, [pc, #508]	; (5990 <usbd_event_transfer_data+0x304>)
    5794:	f004 fdd2 	bl	a33c <k_mem_slab_alloc>
    5798:	b180      	cbz	r0, 57bc <usbd_event_transfer_data+0x130>
    579a:	4b81      	ldr	r3, [pc, #516]	; (59a0 <usbd_event_transfer_data+0x314>)
    579c:	4a81      	ldr	r2, [pc, #516]	; (59a4 <usbd_event_transfer_data+0x318>)
    579e:	1a9b      	subs	r3, r3, r2
    57a0:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    57a2:	f04f 0100 	mov.w	r1, #0
    57a6:	2201      	movs	r2, #1
    57a8:	f362 0102 	bfi	r1, r2, #0, #3
    57ac:	f36f 01c5 	bfc	r1, #3, #3
    57b0:	f363 118f 	bfi	r1, r3, #6, #10
    57b4:	487e      	ldr	r0, [pc, #504]	; (59b0 <usbd_event_transfer_data+0x324>)
    57b6:	f7fc f907 	bl	19c8 <log_0>
			return NULL;
    57ba:	e7b5      	b.n	5728 <usbd_event_transfer_data+0x9c>
		ev = (struct usbd_event *)block.data;
    57bc:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    57be:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    57c0:	2304      	movs	r3, #4
    57c2:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    57c4:	4873      	ldr	r0, [pc, #460]	; (5994 <usbd_event_transfer_data+0x308>)
    57c6:	f008 fe96 	bl	e4f6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    57ca:	4973      	ldr	r1, [pc, #460]	; (5998 <usbd_event_transfer_data+0x30c>)
    57cc:	4873      	ldr	r0, [pc, #460]	; (599c <usbd_event_transfer_data+0x310>)
    57ce:	f008 feb3 	bl	e538 <k_work_submit_to_queue>
		return NULL;
    57d2:	e7a9      	b.n	5728 <usbd_event_transfer_data+0x9c>
    57d4:	4b72      	ldr	r3, [pc, #456]	; (59a0 <usbd_event_transfer_data+0x314>)
    57d6:	4a73      	ldr	r2, [pc, #460]	; (59a4 <usbd_event_transfer_data+0x318>)
    57d8:	1a9b      	subs	r3, r3, r2
    57da:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    57dc:	f04f 0100 	mov.w	r1, #0
    57e0:	2201      	movs	r2, #1
    57e2:	f362 0102 	bfi	r1, r2, #0, #3
    57e6:	f36f 01c5 	bfc	r1, #3, #3
    57ea:	f363 118f 	bfi	r1, r3, #6, #10
    57ee:	486f      	ldr	r0, [pc, #444]	; (59ac <usbd_event_transfer_data+0x320>)
    57f0:	f7fc f8ea 	bl	19c8 <log_0>
static inline void usbd_evt_flush(void)
    57f4:	e004      	b.n	5800 <usbd_event_transfer_data+0x174>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    57f6:	1d01      	adds	r1, r0, #4
    57f8:	4865      	ldr	r0, [pc, #404]	; (5990 <usbd_event_transfer_data+0x304>)
    57fa:	f008 fd6b 	bl	e2d4 <k_mem_slab_free>
	} while (ev != NULL);
    57fe:	b144      	cbz	r4, 5812 <usbd_event_transfer_data+0x186>
    5800:	2200      	movs	r2, #0
    5802:	2300      	movs	r3, #0
    5804:	4863      	ldr	r0, [pc, #396]	; (5994 <usbd_event_transfer_data+0x308>)
    5806:	f004 ffab 	bl	a760 <z_impl_k_queue_get>
		if (ev) {
    580a:	4604      	mov	r4, r0
    580c:	2800      	cmp	r0, #0
    580e:	d1f2      	bne.n	57f6 <usbd_event_transfer_data+0x16a>
    5810:	e7f5      	b.n	57fe <usbd_event_transfer_data+0x172>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    5812:	2200      	movs	r2, #0
    5814:	2300      	movs	r3, #0
    5816:	a901      	add	r1, sp, #4
    5818:	485d      	ldr	r0, [pc, #372]	; (5990 <usbd_event_transfer_data+0x304>)
    581a:	f004 fd8f 	bl	a33c <k_mem_slab_alloc>
    581e:	b180      	cbz	r0, 5842 <usbd_event_transfer_data+0x1b6>
    5820:	4b5f      	ldr	r3, [pc, #380]	; (59a0 <usbd_event_transfer_data+0x314>)
    5822:	4a60      	ldr	r2, [pc, #384]	; (59a4 <usbd_event_transfer_data+0x318>)
    5824:	1a9b      	subs	r3, r3, r2
    5826:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    5828:	f04f 0100 	mov.w	r1, #0
    582c:	2201      	movs	r2, #1
    582e:	f362 0102 	bfi	r1, r2, #0, #3
    5832:	f36f 01c5 	bfc	r1, #3, #3
    5836:	f363 118f 	bfi	r1, r3, #6, #10
    583a:	485d      	ldr	r0, [pc, #372]	; (59b0 <usbd_event_transfer_data+0x324>)
    583c:	f7fc f8c4 	bl	19c8 <log_0>
			return NULL;
    5840:	e741      	b.n	56c6 <usbd_event_transfer_data+0x3a>
		ev = (struct usbd_event *)block.data;
    5842:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    5844:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5846:	2304      	movs	r3, #4
    5848:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    584a:	4852      	ldr	r0, [pc, #328]	; (5994 <usbd_event_transfer_data+0x308>)
    584c:	f008 fe53 	bl	e4f6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5850:	4951      	ldr	r1, [pc, #324]	; (5998 <usbd_event_transfer_data+0x30c>)
    5852:	4852      	ldr	r0, [pc, #328]	; (599c <usbd_event_transfer_data+0x310>)
    5854:	f008 fe70 	bl	e538 <k_work_submit_to_queue>
		return NULL;
    5858:	e735      	b.n	56c6 <usbd_event_transfer_data+0x3a>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    585a:	2200      	movs	r2, #0
    585c:	2300      	movs	r3, #0
    585e:	a901      	add	r1, sp, #4
    5860:	484b      	ldr	r0, [pc, #300]	; (5990 <usbd_event_transfer_data+0x304>)
    5862:	f004 fd6b 	bl	a33c <k_mem_slab_alloc>
    5866:	b9f0      	cbnz	r0, 58a6 <usbd_event_transfer_data+0x21a>
	ev = (struct usbd_event *)block.data;
    5868:	9e01      	ldr	r6, [sp, #4]
	ev->block = block;
    586a:	6076      	str	r6, [r6, #4]
			if (!ev) {
    586c:	2e00      	cmp	r6, #0
    586e:	f000 808d 	beq.w	598c <usbd_event_transfer_data+0x300>
				p_event->data.eptransfer.ep);
    5872:	78a3      	ldrb	r3, [r4, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    5874:	f994 2002 	ldrsb.w	r2, [r4, #2]
    5878:	2a00      	cmp	r2, #0
    587a:	db57      	blt.n	592c <usbd_event_transfer_data+0x2a0>
            ret = p_reg->EPIN[epnr].AMOUNT;
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    587c:	f013 0f08 	tst.w	r3, #8
    5880:	d067      	beq.n	5952 <usbd_event_transfer_data+0x2c6>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    5882:	4b4c      	ldr	r3, [pc, #304]	; (59b4 <usbd_event_transfer_data+0x328>)
    5884:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    5888:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    588a:	2301      	movs	r3, #1
    588c:	7433      	strb	r3, [r6, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    588e:	2302      	movs	r3, #2
    5890:	7333      	strb	r3, [r6, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    5892:	60b5      	str	r5, [r6, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    5894:	4631      	mov	r1, r6
    5896:	483f      	ldr	r0, [pc, #252]	; (5994 <usbd_event_transfer_data+0x308>)
    5898:	f008 fe2d 	bl	e4f6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    589c:	493e      	ldr	r1, [pc, #248]	; (5998 <usbd_event_transfer_data+0x30c>)
    589e:	483f      	ldr	r0, [pc, #252]	; (599c <usbd_event_transfer_data+0x310>)
    58a0:	f008 fe4a 	bl	e538 <k_work_submit_to_queue>
}
    58a4:	e072      	b.n	598c <usbd_event_transfer_data+0x300>
    58a6:	4b3e      	ldr	r3, [pc, #248]	; (59a0 <usbd_event_transfer_data+0x314>)
    58a8:	4a3e      	ldr	r2, [pc, #248]	; (59a4 <usbd_event_transfer_data+0x318>)
    58aa:	1a9b      	subs	r3, r3, r2
    58ac:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    58ae:	f04f 0100 	mov.w	r1, #0
    58b2:	2201      	movs	r2, #1
    58b4:	f362 0102 	bfi	r1, r2, #0, #3
    58b8:	f36f 01c5 	bfc	r1, #3, #3
    58bc:	f363 118f 	bfi	r1, r3, #6, #10
    58c0:	483a      	ldr	r0, [pc, #232]	; (59ac <usbd_event_transfer_data+0x320>)
    58c2:	f7fc f881 	bl	19c8 <log_0>
static inline void usbd_evt_flush(void)
    58c6:	e004      	b.n	58d2 <usbd_event_transfer_data+0x246>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    58c8:	1d01      	adds	r1, r0, #4
    58ca:	4831      	ldr	r0, [pc, #196]	; (5990 <usbd_event_transfer_data+0x304>)
    58cc:	f008 fd02 	bl	e2d4 <k_mem_slab_free>
	} while (ev != NULL);
    58d0:	b146      	cbz	r6, 58e4 <usbd_event_transfer_data+0x258>
    58d2:	2200      	movs	r2, #0
    58d4:	2300      	movs	r3, #0
    58d6:	482f      	ldr	r0, [pc, #188]	; (5994 <usbd_event_transfer_data+0x308>)
    58d8:	f004 ff42 	bl	a760 <z_impl_k_queue_get>
		if (ev) {
    58dc:	4606      	mov	r6, r0
    58de:	2800      	cmp	r0, #0
    58e0:	d1f2      	bne.n	58c8 <usbd_event_transfer_data+0x23c>
    58e2:	e7f5      	b.n	58d0 <usbd_event_transfer_data+0x244>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    58e4:	2200      	movs	r2, #0
    58e6:	2300      	movs	r3, #0
    58e8:	a901      	add	r1, sp, #4
    58ea:	4829      	ldr	r0, [pc, #164]	; (5990 <usbd_event_transfer_data+0x304>)
    58ec:	f004 fd26 	bl	a33c <k_mem_slab_alloc>
    58f0:	b180      	cbz	r0, 5914 <usbd_event_transfer_data+0x288>
    58f2:	4b2b      	ldr	r3, [pc, #172]	; (59a0 <usbd_event_transfer_data+0x314>)
    58f4:	4a2b      	ldr	r2, [pc, #172]	; (59a4 <usbd_event_transfer_data+0x318>)
    58f6:	1a9b      	subs	r3, r3, r2
    58f8:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    58fa:	f04f 0100 	mov.w	r1, #0
    58fe:	2201      	movs	r2, #1
    5900:	f362 0102 	bfi	r1, r2, #0, #3
    5904:	f36f 01c5 	bfc	r1, #3, #3
    5908:	f363 118f 	bfi	r1, r3, #6, #10
    590c:	4828      	ldr	r0, [pc, #160]	; (59b0 <usbd_event_transfer_data+0x324>)
    590e:	f7fc f85b 	bl	19c8 <log_0>
			return NULL;
    5912:	e7ab      	b.n	586c <usbd_event_transfer_data+0x1e0>
		ev = (struct usbd_event *)block.data;
    5914:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    5916:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5918:	2304      	movs	r3, #4
    591a:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    591c:	481d      	ldr	r0, [pc, #116]	; (5994 <usbd_event_transfer_data+0x308>)
    591e:	f008 fdea 	bl	e4f6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5922:	491d      	ldr	r1, [pc, #116]	; (5998 <usbd_event_transfer_data+0x30c>)
    5924:	481d      	ldr	r0, [pc, #116]	; (599c <usbd_event_transfer_data+0x310>)
    5926:	f008 fe07 	bl	e538 <k_work_submit_to_queue>
		return NULL;
    592a:	e79f      	b.n	586c <usbd_event_transfer_data+0x1e0>
        if (NRF_USBD_EPISO_CHECK(ep))
    592c:	f013 0f08 	tst.w	r3, #8
    5930:	d003      	beq.n	593a <usbd_event_transfer_data+0x2ae>
            ret = p_reg->ISOIN.AMOUNT;
    5932:	4b20      	ldr	r3, [pc, #128]	; (59b4 <usbd_event_transfer_data+0x328>)
    5934:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
    5938:	e7a6      	b.n	5888 <usbd_event_transfer_data+0x1fc>
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    593a:	f003 030f 	and.w	r3, r3, #15
            ret = p_reg->EPIN[epnr].AMOUNT;
    593e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5942:	009b      	lsls	r3, r3, #2
    5944:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    5948:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    594c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    5950:	e79a      	b.n	5888 <usbd_event_transfer_data+0x1fc>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    5952:	f003 030f 	and.w	r3, r3, #15
            ret = p_reg->EPOUT[epnr].AMOUNT;
    5956:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    595a:	009b      	lsls	r3, r3, #2
    595c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    5960:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    5964:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    5968:	e78e      	b.n	5888 <usbd_event_transfer_data+0x1fc>
    596a:	4a0d      	ldr	r2, [pc, #52]	; (59a0 <usbd_event_transfer_data+0x314>)
    596c:	4b0d      	ldr	r3, [pc, #52]	; (59a4 <usbd_event_transfer_data+0x318>)
    596e:	1ad2      	subs	r2, r2, r3
    5970:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    5972:	f04f 0300 	mov.w	r3, #0
    5976:	2001      	movs	r0, #1
    5978:	f360 0302 	bfi	r3, r0, #0, #3
    597c:	f36f 03c5 	bfc	r3, #3, #3
    5980:	f362 138f 	bfi	r3, r2, #6, #10
    5984:	4632      	mov	r2, r6
    5986:	4808      	ldr	r0, [pc, #32]	; (59a8 <usbd_event_transfer_data+0x31c>)
    5988:	f7fb ffe2 	bl	1950 <log_2>
}
    598c:	b002      	add	sp, #8
    598e:	bd70      	pop	{r4, r5, r6, pc}
    5990:	20000358 	.word	0x20000358
    5994:	200003e8 	.word	0x200003e8
    5998:	20001900 	.word	0x20001900
    599c:	20000710 	.word	0x20000710
    59a0:	0000ef64 	.word	0x0000ef64
    59a4:	0000eefc 	.word	0x0000eefc
    59a8:	0000fd48 	.word	0x0000fd48
    59ac:	0000fc48 	.word	0x0000fc48
    59b0:	0000fc68 	.word	0x0000fc68
    59b4:	50036000 	.word	0x50036000

000059b8 <usbd_event_handler>:
{
    59b8:	b510      	push	{r4, lr}
    59ba:	b088      	sub	sp, #32
	struct usbd_event evt = {0};
    59bc:	2300      	movs	r3, #0
    59be:	9303      	str	r3, [sp, #12]
    59c0:	9304      	str	r3, [sp, #16]
    59c2:	9305      	str	r3, [sp, #20]
    59c4:	9306      	str	r3, [sp, #24]
    59c6:	9307      	str	r3, [sp, #28]
	switch (p_event->type) {
    59c8:	7803      	ldrb	r3, [r0, #0]
    59ca:	3b01      	subs	r3, #1
    59cc:	2b05      	cmp	r3, #5
    59ce:	d826      	bhi.n	5a1e <usbd_event_handler+0x66>
    59d0:	e8df f003 	tbb	[pc, r3]
    59d4:	2e270335 	.word	0x2e270335
    59d8:	3953      	.short	0x3953
		evt.evt_type = USBD_EVT_POWER;
    59da:	2300      	movs	r3, #0
    59dc:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    59e0:	2303      	movs	r3, #3
    59e2:	f88d 3014 	strb.w	r3, [sp, #20]
	if (k_mem_slab_alloc(&fifo_elem_slab,
    59e6:	2200      	movs	r2, #0
    59e8:	2300      	movs	r3, #0
    59ea:	a901      	add	r1, sp, #4
    59ec:	4850      	ldr	r0, [pc, #320]	; (5b30 <usbd_event_handler+0x178>)
    59ee:	f004 fca5 	bl	a33c <k_mem_slab_alloc>
    59f2:	2800      	cmp	r0, #0
    59f4:	d159      	bne.n	5aaa <usbd_event_handler+0xf2>
	ev = (struct usbd_event *)block.data;
    59f6:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    59f8:	6064      	str	r4, [r4, #4]
		if (!ev) {
    59fa:	b184      	cbz	r4, 5a1e <usbd_event_handler+0x66>
		ev->evt_type = evt.evt_type;
    59fc:	f89d 301c 	ldrb.w	r3, [sp, #28]
    5a00:	7423      	strb	r3, [r4, #16]
		ev->evt = evt.evt;
    5a02:	f104 0308 	add.w	r3, r4, #8
    5a06:	9906      	ldr	r1, [sp, #24]
    5a08:	9805      	ldr	r0, [sp, #20]
    5a0a:	e883 0003 	stmia.w	r3, {r0, r1}
	k_fifo_put(&usbd_evt_fifo, ev);
    5a0e:	4621      	mov	r1, r4
    5a10:	4848      	ldr	r0, [pc, #288]	; (5b34 <usbd_event_handler+0x17c>)
    5a12:	f008 fd70 	bl	e4f6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5a16:	4948      	ldr	r1, [pc, #288]	; (5b38 <usbd_event_handler+0x180>)
    5a18:	4848      	ldr	r0, [pc, #288]	; (5b3c <usbd_event_handler+0x184>)
    5a1a:	f008 fd8d 	bl	e538 <k_work_submit_to_queue>
}
    5a1e:	b008      	add	sp, #32
    5a20:	bd10      	pop	{r4, pc}
		evt.evt_type = USBD_EVT_POWER;
    5a22:	2300      	movs	r3, #0
    5a24:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_RESUMED;
    5a28:	2304      	movs	r3, #4
    5a2a:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
    5a2e:	e7da      	b.n	59e6 <usbd_event_handler+0x2e>
		evt.evt_type = USBD_EVT_POWER;
    5a30:	2300      	movs	r3, #0
    5a32:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_RESUMED;
    5a36:	2304      	movs	r3, #4
    5a38:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
    5a3c:	e7d3      	b.n	59e6 <usbd_event_handler+0x2e>
		evt.evt_type = USBD_EVT_RESET;
    5a3e:	2302      	movs	r3, #2
    5a40:	f88d 301c 	strb.w	r3, [sp, #28]
	if (put_evt) {
    5a44:	e7cf      	b.n	59e6 <usbd_event_handler+0x2e>
    5a46:	4604      	mov	r4, r0
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    5a48:	7880      	ldrb	r0, [r0, #2]
    5a4a:	f7ff f8e3 	bl	4c14 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    5a4e:	7a83      	ldrb	r3, [r0, #10]
    5a50:	2b01      	cmp	r3, #1
    5a52:	d00e      	beq.n	5a72 <usbd_event_handler+0xba>
    5a54:	d805      	bhi.n	5a62 <usbd_event_handler+0xaa>
    5a56:	2b00      	cmp	r3, #0
    5a58:	d1e1      	bne.n	5a1e <usbd_event_handler+0x66>
			usbd_event_transfer_ctrl(p_event);
    5a5a:	4620      	mov	r0, r4
    5a5c:	f7ff fc7e 	bl	535c <usbd_event_transfer_ctrl>
	if (put_evt) {
    5a60:	e7dd      	b.n	5a1e <usbd_event_handler+0x66>
    5a62:	3b02      	subs	r3, #2
    5a64:	b2db      	uxtb	r3, r3
    5a66:	2b01      	cmp	r3, #1
    5a68:	d8d9      	bhi.n	5a1e <usbd_event_handler+0x66>
			usbd_event_transfer_data(p_event);
    5a6a:	4620      	mov	r0, r4
    5a6c:	f7ff fe0e 	bl	568c <usbd_event_transfer_data>
	if (put_evt) {
    5a70:	e7d5      	b.n	5a1e <usbd_event_handler+0x66>
			usbd_event_transfer_data(p_event);
    5a72:	4620      	mov	r0, r4
    5a74:	f7ff fe0a 	bl	568c <usbd_event_transfer_data>
	if (put_evt) {
    5a78:	e7d1      	b.n	5a1e <usbd_event_handler+0x66>
		nrfx_usbd_setup_get(&drv_setup);
    5a7a:	a801      	add	r0, sp, #4
    5a7c:	f003 fd82 	bl	9584 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    5a80:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5a84:	2b05      	cmp	r3, #5
    5a86:	d00a      	beq.n	5a9e <usbd_event_handler+0xe6>
				endpoint_ctx(NRF_USBD_EPOUT(0));
    5a88:	2000      	movs	r0, #0
    5a8a:	f7ff f8c3 	bl	4c14 <endpoint_ctx>
			evt.evt_type = USBD_EVT_EP;
    5a8e:	2301      	movs	r3, #1
    5a90:	f88d 301c 	strb.w	r3, [sp, #28]
			evt.evt.ep_evt.ep = ep_ctx;
    5a94:	9005      	str	r0, [sp, #20]
			evt.evt.ep_evt.evt_type = EP_EVT_SETUP_RECV;
    5a96:	2300      	movs	r3, #0
    5a98:	f88d 3018 	strb.w	r3, [sp, #24]
	if (put_evt) {
    5a9c:	e7a3      	b.n	59e6 <usbd_event_handler+0x2e>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    5a9e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5aa2:	f013 0f60 	tst.w	r3, #96	; 0x60
    5aa6:	d0ba      	beq.n	5a1e <usbd_event_handler+0x66>
    5aa8:	e7ee      	b.n	5a88 <usbd_event_handler+0xd0>
    5aaa:	4b25      	ldr	r3, [pc, #148]	; (5b40 <usbd_event_handler+0x188>)
    5aac:	4a25      	ldr	r2, [pc, #148]	; (5b44 <usbd_event_handler+0x18c>)
    5aae:	1a9b      	subs	r3, r3, r2
    5ab0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    5ab2:	f04f 0100 	mov.w	r1, #0
    5ab6:	2201      	movs	r2, #1
    5ab8:	f362 0102 	bfi	r1, r2, #0, #3
    5abc:	f36f 01c5 	bfc	r1, #3, #3
    5ac0:	f363 118f 	bfi	r1, r3, #6, #10
    5ac4:	4820      	ldr	r0, [pc, #128]	; (5b48 <usbd_event_handler+0x190>)
    5ac6:	f7fb ff7f 	bl	19c8 <log_0>
static inline void usbd_evt_flush(void)
    5aca:	e004      	b.n	5ad6 <usbd_event_handler+0x11e>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5acc:	1d01      	adds	r1, r0, #4
    5ace:	4818      	ldr	r0, [pc, #96]	; (5b30 <usbd_event_handler+0x178>)
    5ad0:	f008 fc00 	bl	e2d4 <k_mem_slab_free>
	} while (ev != NULL);
    5ad4:	b144      	cbz	r4, 5ae8 <usbd_event_handler+0x130>
    5ad6:	2200      	movs	r2, #0
    5ad8:	2300      	movs	r3, #0
    5ada:	4816      	ldr	r0, [pc, #88]	; (5b34 <usbd_event_handler+0x17c>)
    5adc:	f004 fe40 	bl	a760 <z_impl_k_queue_get>
		if (ev) {
    5ae0:	4604      	mov	r4, r0
    5ae2:	2800      	cmp	r0, #0
    5ae4:	d1f2      	bne.n	5acc <usbd_event_handler+0x114>
    5ae6:	e7f5      	b.n	5ad4 <usbd_event_handler+0x11c>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    5ae8:	2200      	movs	r2, #0
    5aea:	2300      	movs	r3, #0
    5aec:	a901      	add	r1, sp, #4
    5aee:	4810      	ldr	r0, [pc, #64]	; (5b30 <usbd_event_handler+0x178>)
    5af0:	f004 fc24 	bl	a33c <k_mem_slab_alloc>
    5af4:	b180      	cbz	r0, 5b18 <usbd_event_handler+0x160>
    5af6:	4b12      	ldr	r3, [pc, #72]	; (5b40 <usbd_event_handler+0x188>)
    5af8:	4a12      	ldr	r2, [pc, #72]	; (5b44 <usbd_event_handler+0x18c>)
    5afa:	1a9b      	subs	r3, r3, r2
    5afc:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    5afe:	f04f 0100 	mov.w	r1, #0
    5b02:	2201      	movs	r2, #1
    5b04:	f362 0102 	bfi	r1, r2, #0, #3
    5b08:	f36f 01c5 	bfc	r1, #3, #3
    5b0c:	f363 118f 	bfi	r1, r3, #6, #10
    5b10:	480e      	ldr	r0, [pc, #56]	; (5b4c <usbd_event_handler+0x194>)
    5b12:	f7fb ff59 	bl	19c8 <log_0>
			return NULL;
    5b16:	e770      	b.n	59fa <usbd_event_handler+0x42>
		ev = (struct usbd_event *)block.data;
    5b18:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    5b1a:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5b1c:	2304      	movs	r3, #4
    5b1e:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    5b20:	4804      	ldr	r0, [pc, #16]	; (5b34 <usbd_event_handler+0x17c>)
    5b22:	f008 fce8 	bl	e4f6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5b26:	4904      	ldr	r1, [pc, #16]	; (5b38 <usbd_event_handler+0x180>)
    5b28:	4804      	ldr	r0, [pc, #16]	; (5b3c <usbd_event_handler+0x184>)
    5b2a:	f008 fd05 	bl	e538 <k_work_submit_to_queue>
		return NULL;
    5b2e:	e764      	b.n	59fa <usbd_event_handler+0x42>
    5b30:	20000358 	.word	0x20000358
    5b34:	200003e8 	.word	0x200003e8
    5b38:	20001900 	.word	0x20001900
    5b3c:	20000710 	.word	0x20000710
    5b40:	0000ef64 	.word	0x0000ef64
    5b44:	0000eefc 	.word	0x0000eefc
    5b48:	0000fc48 	.word	0x0000fc48
    5b4c:	0000fc68 	.word	0x0000fc68

00005b50 <usb_dc_attach>:
{
    5b50:	b510      	push	{r4, lr}
	if (ctx->attached) {
    5b52:	4b1c      	ldr	r3, [pc, #112]	; (5bc4 <usb_dc_attach+0x74>)
    5b54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5b58:	b113      	cbz	r3, 5b60 <usb_dc_attach+0x10>
		return 0;
    5b5a:	2400      	movs	r4, #0
}
    5b5c:	4620      	mov	r0, r4
    5b5e:	bd10      	pop	{r4, pc}
	return z_impl_k_mutex_init(mutex);
    5b60:	4c18      	ldr	r4, [pc, #96]	; (5bc4 <usb_dc_attach+0x74>)
    5b62:	f104 0038 	add.w	r0, r4, #56	; 0x38
    5b66:	f008 fc42 	bl	e3ee <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    5b6a:	2002      	movs	r0, #2
    5b6c:	f000 fd42 	bl	65f4 <z_nrf_clock_control_get_onoff>
	ctx->hfxo_mgr =
    5b70:	61e0      	str	r0, [r4, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5b72:	2200      	movs	r2, #0
    5b74:	2101      	movs	r1, #1
    5b76:	2036      	movs	r0, #54	; 0x36
    5b78:	f7fe f900 	bl	3d7c <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
    5b7c:	4812      	ldr	r0, [pc, #72]	; (5bc8 <usb_dc_attach+0x78>)
    5b7e:	f003 f8c5 	bl	8d0c <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    5b82:	4b12      	ldr	r3, [pc, #72]	; (5bcc <usb_dc_attach+0x7c>)
    5b84:	4298      	cmp	r0, r3
    5b86:	d11a      	bne.n	5bbe <usb_dc_attach+0x6e>
	nrfx_power_usbevt_enable();
    5b88:	f004 f9a6 	bl	9ed8 <nrfx_usbreg_enable>
	ret = eps_ctx_init();
    5b8c:	f7ff f876 	bl	4c7c <eps_ctx_init>
	if (ret == 0) {
    5b90:	4604      	mov	r4, r0
    5b92:	b918      	cbnz	r0, 5b9c <usb_dc_attach+0x4c>
		ctx->attached = true;
    5b94:	4b0b      	ldr	r3, [pc, #44]	; (5bc4 <usb_dc_attach+0x74>)
    5b96:	2201      	movs	r2, #1
    5b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    5b9c:	4b0c      	ldr	r3, [pc, #48]	; (5bd0 <usb_dc_attach+0x80>)
    5b9e:	681b      	ldr	r3, [r3, #0]
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    5ba0:	b11b      	cbz	r3, 5baa <usb_dc_attach+0x5a>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5ba2:	490c      	ldr	r1, [pc, #48]	; (5bd4 <usb_dc_attach+0x84>)
    5ba4:	480c      	ldr	r0, [pc, #48]	; (5bd8 <usb_dc_attach+0x88>)
    5ba6:	f008 fcc7 	bl	e538 <k_work_submit_to_queue>
    return p_reg->INTENSET & mask;
}

NRF_STATIC_INLINE uint32_t nrf_usbreg_status_get(NRF_USBREG_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    5baa:	4b0c      	ldr	r3, [pc, #48]	; (5bdc <usb_dc_attach+0x8c>)
    5bac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_usbreg_state_t nrfx_usbreg_usbstatus_get(void)
{
    uint32_t status = nrf_usbreg_status_get(NRF_USBREGULATOR);
    if (0 == (status & NRF_USBREG_STATUS_VBUSDETECT_MASK))
    5bb0:	f013 0f01 	tst.w	r3, #1
    5bb4:	d0d2      	beq.n	5b5c <usb_dc_attach+0xc>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    5bb6:	2000      	movs	r0, #0
    5bb8:	f7ff f936 	bl	4e28 <usb_dc_power_event_handler>
    5bbc:	e7ce      	b.n	5b5c <usb_dc_attach+0xc>
		return -EIO;
    5bbe:	f06f 0404 	mvn.w	r4, #4
    5bc2:	e7cb      	b.n	5b5c <usb_dc_attach+0xc>
    5bc4:	200018d8 	.word	0x200018d8
    5bc8:	000059b9 	.word	0x000059b9
    5bcc:	0bad0000 	.word	0x0bad0000
    5bd0:	200003e8 	.word	0x200003e8
    5bd4:	20001900 	.word	0x20001900
    5bd8:	20000710 	.word	0x20000710
    5bdc:	50037000 	.word	0x50037000

00005be0 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    5be0:	4b07      	ldr	r3, [pc, #28]	; (5c00 <usb_dc_set_address+0x20>)
    5be2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    5be6:	b12b      	cbz	r3, 5bf4 <usb_dc_set_address+0x14>
	return get_usbd_ctx()->ready;
    5be8:	4b05      	ldr	r3, [pc, #20]	; (5c00 <usb_dc_set_address+0x20>)
    5bea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    5bee:	b123      	cbz	r3, 5bfa <usb_dc_set_address+0x1a>
	return 0;
    5bf0:	2000      	movs	r0, #0
    5bf2:	4770      	bx	lr
		return -ENODEV;
    5bf4:	f06f 0012 	mvn.w	r0, #18
    5bf8:	4770      	bx	lr
    5bfa:	f06f 0012 	mvn.w	r0, #18
}
    5bfe:	4770      	bx	lr
    5c00:	200018d8 	.word	0x200018d8

00005c04 <usb_dc_ep_check_cap>:
{
    5c04:	b508      	push	{r3, lr}
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    5c06:	7801      	ldrb	r1, [r0, #0]
    5c08:	f001 020f 	and.w	r2, r1, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    5c0c:	7903      	ldrb	r3, [r0, #4]
    5c0e:	b903      	cbnz	r3, 5c12 <usb_dc_ep_check_cap+0xe>
    5c10:	b92a      	cbnz	r2, 5c1e <usb_dc_ep_check_cap+0x1a>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    5c12:	2a08      	cmp	r2, #8
    5c14:	d816      	bhi.n	5c44 <usb_dc_ep_check_cap+0x40>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    5c16:	2b01      	cmp	r3, #1
    5c18:	d027      	beq.n	5c6a <usb_dc_ep_check_cap+0x66>
	return 0;
    5c1a:	2000      	movs	r0, #0
}
    5c1c:	bd08      	pop	{r3, pc}
    5c1e:	4b17      	ldr	r3, [pc, #92]	; (5c7c <usb_dc_ep_check_cap+0x78>)
    5c20:	4a17      	ldr	r2, [pc, #92]	; (5c80 <usb_dc_ep_check_cap+0x7c>)
    5c22:	1a9b      	subs	r3, r3, r2
    5c24:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid endpoint configuration");
    5c26:	f04f 0100 	mov.w	r1, #0
    5c2a:	2201      	movs	r2, #1
    5c2c:	f362 0102 	bfi	r1, r2, #0, #3
    5c30:	f36f 01c5 	bfc	r1, #3, #3
    5c34:	f363 118f 	bfi	r1, r3, #6, #10
    5c38:	4812      	ldr	r0, [pc, #72]	; (5c84 <usb_dc_ep_check_cap+0x80>)
    5c3a:	f7fb fec5 	bl	19c8 <log_0>
		return -1;
    5c3e:	f04f 30ff 	mov.w	r0, #4294967295
    5c42:	e7eb      	b.n	5c1c <usb_dc_ep_check_cap+0x18>
    5c44:	4b0d      	ldr	r3, [pc, #52]	; (5c7c <usb_dc_ep_check_cap+0x78>)
    5c46:	4a0e      	ldr	r2, [pc, #56]	; (5c80 <usb_dc_ep_check_cap+0x7c>)
    5c48:	1a9b      	subs	r3, r3, r2
    5c4a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid endpoint index/address");
    5c4c:	f04f 0100 	mov.w	r1, #0
    5c50:	2201      	movs	r2, #1
    5c52:	f362 0102 	bfi	r1, r2, #0, #3
    5c56:	f36f 01c5 	bfc	r1, #3, #3
    5c5a:	f363 118f 	bfi	r1, r3, #6, #10
    5c5e:	480a      	ldr	r0, [pc, #40]	; (5c88 <usb_dc_ep_check_cap+0x84>)
    5c60:	f7fb feb2 	bl	19c8 <log_0>
		return -1;
    5c64:	f04f 30ff 	mov.w	r0, #4294967295
    5c68:	e7d8      	b.n	5c1c <usb_dc_ep_check_cap+0x18>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    5c6a:	f011 0f08 	tst.w	r1, #8
    5c6e:	d001      	beq.n	5c74 <usb_dc_ep_check_cap+0x70>
	return 0;
    5c70:	2000      	movs	r0, #0
    5c72:	e7d3      	b.n	5c1c <usb_dc_ep_check_cap+0x18>
		return -1;
    5c74:	f04f 30ff 	mov.w	r0, #4294967295
    5c78:	e7d0      	b.n	5c1c <usb_dc_ep_check_cap+0x18>
    5c7a:	bf00      	nop
    5c7c:	0000ef64 	.word	0x0000ef64
    5c80:	0000eefc 	.word	0x0000eefc
    5c84:	0000fd94 	.word	0x0000fd94
    5c88:	0000fdb4 	.word	0x0000fdb4

00005c8c <usb_dc_ep_configure>:
{
    5c8c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    5c8e:	4b1a      	ldr	r3, [pc, #104]	; (5cf8 <usb_dc_ep_configure+0x6c>)
    5c90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    5c94:	b353      	cbz	r3, 5cec <usb_dc_ep_configure+0x60>
    5c96:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    5c98:	7805      	ldrb	r5, [r0, #0]
    5c9a:	4628      	mov	r0, r5
    5c9c:	f7fe ffba 	bl	4c14 <endpoint_ctx>
	if (!ep_ctx) {
    5ca0:	b338      	cbz	r0, 5cf2 <usb_dc_ep_configure+0x66>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    5ca2:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    5ca4:	7922      	ldrb	r2, [r4, #4]
    5ca6:	7282      	strb	r2, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    5ca8:	8862      	ldrh	r2, [r4, #2]
    5caa:	6042      	str	r2, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    5cac:	7820      	ldrb	r0, [r4, #0]
    5cae:	f010 0f08 	tst.w	r0, #8
    5cb2:	d103      	bne.n	5cbc <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    5cb4:	8863      	ldrh	r3, [r4, #2]
    5cb6:	1e5a      	subs	r2, r3, #1
    5cb8:	4213      	tst	r3, r2
    5cba:	d104      	bne.n	5cc6 <usb_dc_ep_configure+0x3a>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    5cbc:	8861      	ldrh	r1, [r4, #2]
    5cbe:	f003 f815 	bl	8cec <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    5cc2:	2000      	movs	r0, #0
}
    5cc4:	bd38      	pop	{r3, r4, r5, pc}
    5cc6:	4b0d      	ldr	r3, [pc, #52]	; (5cfc <usb_dc_ep_configure+0x70>)
    5cc8:	4a0d      	ldr	r2, [pc, #52]	; (5d00 <usb_dc_ep_configure+0x74>)
    5cca:	1a9b      	subs	r3, r3, r2
    5ccc:	08db      	lsrs	r3, r3, #3
			LOG_ERR("EP max packet size must be a power of 2");
    5cce:	f04f 0100 	mov.w	r1, #0
    5cd2:	2201      	movs	r2, #1
    5cd4:	f362 0102 	bfi	r1, r2, #0, #3
    5cd8:	f36f 01c5 	bfc	r1, #3, #3
    5cdc:	f363 118f 	bfi	r1, r3, #6, #10
    5ce0:	4808      	ldr	r0, [pc, #32]	; (5d04 <usb_dc_ep_configure+0x78>)
    5ce2:	f7fb fe71 	bl	19c8 <log_0>
			return -EINVAL;
    5ce6:	f06f 0015 	mvn.w	r0, #21
    5cea:	e7eb      	b.n	5cc4 <usb_dc_ep_configure+0x38>
		return -ENODEV;
    5cec:	f06f 0012 	mvn.w	r0, #18
    5cf0:	e7e8      	b.n	5cc4 <usb_dc_ep_configure+0x38>
		return -EINVAL;
    5cf2:	f06f 0015 	mvn.w	r0, #21
    5cf6:	e7e5      	b.n	5cc4 <usb_dc_ep_configure+0x38>
    5cf8:	200018d8 	.word	0x200018d8
    5cfc:	0000ef64 	.word	0x0000ef64
    5d00:	0000eefc 	.word	0x0000eefc
    5d04:	0000fdd4 	.word	0x0000fdd4

00005d08 <usb_dc_ep_set_stall>:
{
    5d08:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    5d0a:	4b1e      	ldr	r3, [pc, #120]	; (5d84 <usb_dc_ep_set_stall+0x7c>)
    5d0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    5d10:	b37b      	cbz	r3, 5d72 <usb_dc_ep_set_stall+0x6a>
    5d12:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    5d14:	4b1b      	ldr	r3, [pc, #108]	; (5d84 <usb_dc_ep_set_stall+0x7c>)
    5d16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    5d1a:	b36b      	cbz	r3, 5d78 <usb_dc_ep_set_stall+0x70>
	ep_ctx = endpoint_ctx(ep);
    5d1c:	f7fe ff7a 	bl	4c14 <endpoint_ctx>
	if (!ep_ctx) {
    5d20:	4605      	mov	r5, r0
    5d22:	b360      	cbz	r0, 5d7e <usb_dc_ep_set_stall+0x76>
	switch (ep_ctx->cfg.type) {
    5d24:	7a83      	ldrb	r3, [r0, #10]
    5d26:	2b01      	cmp	r3, #1
    5d28:	d010      	beq.n	5d4c <usb_dc_ep_set_stall+0x44>
    5d2a:	d807      	bhi.n	5d3c <usb_dc_ep_set_stall+0x34>
    5d2c:	b90b      	cbnz	r3, 5d32 <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_setup_stall();
    5d2e:	f003 fca7 	bl	9680 <nrfx_usbd_setup_stall>
	ep_ctx->buf.len = 0U;
    5d32:	2000      	movs	r0, #0
    5d34:	60e8      	str	r0, [r5, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    5d36:	696b      	ldr	r3, [r5, #20]
    5d38:	61ab      	str	r3, [r5, #24]
}
    5d3a:	bd38      	pop	{r3, r4, r5, pc}
	switch (ep_ctx->cfg.type) {
    5d3c:	3b02      	subs	r3, #2
    5d3e:	b2db      	uxtb	r3, r3
    5d40:	2b01      	cmp	r3, #1
    5d42:	d8f6      	bhi.n	5d32 <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    5d44:	4620      	mov	r0, r4
    5d46:	f003 fbe9 	bl	951c <nrfx_usbd_ep_stall>
		break;
    5d4a:	e7f2      	b.n	5d32 <usb_dc_ep_set_stall+0x2a>
    5d4c:	4b0e      	ldr	r3, [pc, #56]	; (5d88 <usb_dc_ep_set_stall+0x80>)
    5d4e:	4a0f      	ldr	r2, [pc, #60]	; (5d8c <usb_dc_ep_set_stall+0x84>)
    5d50:	1a9b      	subs	r3, r3, r2
    5d52:	08db      	lsrs	r3, r3, #3
		LOG_ERR("STALL unsupported on ISO endpoint");
    5d54:	f04f 0100 	mov.w	r1, #0
    5d58:	2201      	movs	r2, #1
    5d5a:	f362 0102 	bfi	r1, r2, #0, #3
    5d5e:	f36f 01c5 	bfc	r1, #3, #3
    5d62:	f363 118f 	bfi	r1, r3, #6, #10
    5d66:	480a      	ldr	r0, [pc, #40]	; (5d90 <usb_dc_ep_set_stall+0x88>)
    5d68:	f7fb fe2e 	bl	19c8 <log_0>
		return -EINVAL;
    5d6c:	f06f 0015 	mvn.w	r0, #21
    5d70:	e7e3      	b.n	5d3a <usb_dc_ep_set_stall+0x32>
		return -ENODEV;
    5d72:	f06f 0012 	mvn.w	r0, #18
    5d76:	e7e0      	b.n	5d3a <usb_dc_ep_set_stall+0x32>
    5d78:	f06f 0012 	mvn.w	r0, #18
    5d7c:	e7dd      	b.n	5d3a <usb_dc_ep_set_stall+0x32>
		return -EINVAL;
    5d7e:	f06f 0015 	mvn.w	r0, #21
    5d82:	e7da      	b.n	5d3a <usb_dc_ep_set_stall+0x32>
    5d84:	200018d8 	.word	0x200018d8
    5d88:	0000ef64 	.word	0x0000ef64
    5d8c:	0000eefc 	.word	0x0000eefc
    5d90:	0000fdfc 	.word	0x0000fdfc

00005d94 <usb_dc_ep_clear_stall>:
	return get_usbd_ctx()->attached;
    5d94:	4b11      	ldr	r3, [pc, #68]	; (5ddc <usb_dc_ep_clear_stall+0x48>)
    5d96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    5d9a:	b19b      	cbz	r3, 5dc4 <usb_dc_ep_clear_stall+0x30>
{
    5d9c:	b510      	push	{r4, lr}
    5d9e:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    5da0:	4b0e      	ldr	r3, [pc, #56]	; (5ddc <usb_dc_ep_clear_stall+0x48>)
    5da2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    5da6:	b183      	cbz	r3, 5dca <usb_dc_ep_clear_stall+0x36>
	ep_ctx = endpoint_ctx(ep);
    5da8:	f7fe ff34 	bl	4c14 <endpoint_ctx>
	if (!ep_ctx) {
    5dac:	b180      	cbz	r0, 5dd0 <usb_dc_ep_clear_stall+0x3c>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    5dae:	f014 0f08 	tst.w	r4, #8
    5db2:	d110      	bne.n	5dd6 <usb_dc_ep_clear_stall+0x42>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    5db4:	4620      	mov	r0, r4
    5db6:	f003 fbd9 	bl	956c <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    5dba:	4620      	mov	r0, r4
    5dbc:	f003 fe08 	bl	99d0 <nrfx_usbd_ep_stall_clear>
	return 0;
    5dc0:	2000      	movs	r0, #0
}
    5dc2:	bd10      	pop	{r4, pc}
		return -ENODEV;
    5dc4:	f06f 0012 	mvn.w	r0, #18
}
    5dc8:	4770      	bx	lr
		return -ENODEV;
    5dca:	f06f 0012 	mvn.w	r0, #18
    5dce:	e7f8      	b.n	5dc2 <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
    5dd0:	f06f 0015 	mvn.w	r0, #21
    5dd4:	e7f5      	b.n	5dc2 <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
    5dd6:	f06f 0015 	mvn.w	r0, #21
    5dda:	e7f2      	b.n	5dc2 <usb_dc_ep_clear_stall+0x2e>
    5ddc:	200018d8 	.word	0x200018d8

00005de0 <usb_dc_ep_is_stalled>:
{
    5de0:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    5de2:	4b10      	ldr	r3, [pc, #64]	; (5e24 <usb_dc_ep_is_stalled+0x44>)
    5de4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    5de8:	b17b      	cbz	r3, 5e0a <usb_dc_ep_is_stalled+0x2a>
    5dea:	4604      	mov	r4, r0
    5dec:	460d      	mov	r5, r1
	return get_usbd_ctx()->ready;
    5dee:	4b0d      	ldr	r3, [pc, #52]	; (5e24 <usb_dc_ep_is_stalled+0x44>)
    5df0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    5df4:	b163      	cbz	r3, 5e10 <usb_dc_ep_is_stalled+0x30>
	ep_ctx = endpoint_ctx(ep);
    5df6:	f7fe ff0d 	bl	4c14 <endpoint_ctx>
	if (!ep_ctx) {
    5dfa:	b160      	cbz	r0, 5e16 <usb_dc_ep_is_stalled+0x36>
	if (!stalled) {
    5dfc:	b175      	cbz	r5, 5e1c <usb_dc_ep_is_stalled+0x3c>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    5dfe:	4620      	mov	r0, r4
    5e00:	f003 fb94 	bl	952c <nrfx_usbd_ep_stall_check>
    5e04:	7028      	strb	r0, [r5, #0]
	return 0;
    5e06:	2000      	movs	r0, #0
}
    5e08:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    5e0a:	f06f 0012 	mvn.w	r0, #18
    5e0e:	e7fb      	b.n	5e08 <usb_dc_ep_is_stalled+0x28>
    5e10:	f06f 0012 	mvn.w	r0, #18
    5e14:	e7f8      	b.n	5e08 <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
    5e16:	f06f 0015 	mvn.w	r0, #21
    5e1a:	e7f5      	b.n	5e08 <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
    5e1c:	f06f 0015 	mvn.w	r0, #21
    5e20:	e7f2      	b.n	5e08 <usb_dc_ep_is_stalled+0x28>
    5e22:	bf00      	nop
    5e24:	200018d8 	.word	0x200018d8

00005e28 <usb_dc_ep_enable>:
{
    5e28:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    5e2a:	4b15      	ldr	r3, [pc, #84]	; (5e80 <usb_dc_ep_enable+0x58>)
    5e2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    5e30:	b1eb      	cbz	r3, 5e6e <usb_dc_ep_enable+0x46>
    5e32:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    5e34:	f7fe feee 	bl	4c14 <endpoint_ctx>
	if (!ep_ctx) {
    5e38:	4605      	mov	r5, r0
    5e3a:	b1d8      	cbz	r0, 5e74 <usb_dc_ep_enable+0x4c>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    5e3c:	f014 0f08 	tst.w	r4, #8
    5e40:	d009      	beq.n	5e56 <usb_dc_ep_enable+0x2e>
	if (ep_ctx->cfg.en) {
    5e42:	7a2b      	ldrb	r3, [r5, #8]
    5e44:	b9cb      	cbnz	r3, 5e7a <usb_dc_ep_enable+0x52>
	ep_ctx->cfg.en = true;
    5e46:	2301      	movs	r3, #1
    5e48:	722b      	strb	r3, [r5, #8]
	return get_usbd_ctx()->ready;
    5e4a:	4b0d      	ldr	r3, [pc, #52]	; (5e80 <usb_dc_ep_enable+0x58>)
    5e4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (dev_ready()) {
    5e50:	b943      	cbnz	r3, 5e64 <usb_dc_ep_enable+0x3c>
	return 0;
    5e52:	2000      	movs	r0, #0
}
    5e54:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    5e56:	4620      	mov	r0, r4
    5e58:	f003 fb88 	bl	956c <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    5e5c:	4620      	mov	r0, r4
    5e5e:	f003 fdb7 	bl	99d0 <nrfx_usbd_ep_stall_clear>
    5e62:	e7ee      	b.n	5e42 <usb_dc_ep_enable+0x1a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    5e64:	4620      	mov	r0, r4
    5e66:	f003 fd59 	bl	991c <nrfx_usbd_ep_enable>
	return 0;
    5e6a:	2000      	movs	r0, #0
    5e6c:	e7f2      	b.n	5e54 <usb_dc_ep_enable+0x2c>
		return -ENODEV;
    5e6e:	f06f 0012 	mvn.w	r0, #18
    5e72:	e7ef      	b.n	5e54 <usb_dc_ep_enable+0x2c>
		return -EINVAL;
    5e74:	f06f 0015 	mvn.w	r0, #21
    5e78:	e7ec      	b.n	5e54 <usb_dc_ep_enable+0x2c>
		return -EALREADY;
    5e7a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5e7e:	e7e9      	b.n	5e54 <usb_dc_ep_enable+0x2c>
    5e80:	200018d8 	.word	0x200018d8

00005e84 <usb_dc_ep_disable>:
{
    5e84:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    5e86:	4b13      	ldr	r3, [pc, #76]	; (5ed4 <usb_dc_ep_disable+0x50>)
    5e88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    5e8c:	b1ab      	cbz	r3, 5eba <usb_dc_ep_disable+0x36>
    5e8e:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    5e90:	4b10      	ldr	r3, [pc, #64]	; (5ed4 <usb_dc_ep_disable+0x50>)
    5e92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    5e96:	b19b      	cbz	r3, 5ec0 <usb_dc_ep_disable+0x3c>
	ep_ctx = endpoint_ctx(ep);
    5e98:	f7fe febc 	bl	4c14 <endpoint_ctx>
	if (!ep_ctx) {
    5e9c:	4605      	mov	r5, r0
    5e9e:	b190      	cbz	r0, 5ec6 <usb_dc_ep_disable+0x42>
	if (!ep_ctx->cfg.en) {
    5ea0:	7a03      	ldrb	r3, [r0, #8]
    5ea2:	b19b      	cbz	r3, 5ecc <usb_dc_ep_disable+0x48>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    5ea4:	4620      	mov	r0, r4
    5ea6:	f003 ff61 	bl	9d6c <nrfx_usbd_ep_disable>
	ep_ctx->write_in_progress = false;
    5eaa:	2400      	movs	r4, #0
    5eac:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    5eae:	4628      	mov	r0, r5
    5eb0:	f007 fbdc 	bl	d66c <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    5eb4:	722c      	strb	r4, [r5, #8]
	return 0;
    5eb6:	4620      	mov	r0, r4
}
    5eb8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    5eba:	f06f 0012 	mvn.w	r0, #18
    5ebe:	e7fb      	b.n	5eb8 <usb_dc_ep_disable+0x34>
    5ec0:	f06f 0012 	mvn.w	r0, #18
    5ec4:	e7f8      	b.n	5eb8 <usb_dc_ep_disable+0x34>
		return -EINVAL;
    5ec6:	f06f 0015 	mvn.w	r0, #21
    5eca:	e7f5      	b.n	5eb8 <usb_dc_ep_disable+0x34>
		return -EALREADY;
    5ecc:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5ed0:	e7f2      	b.n	5eb8 <usb_dc_ep_disable+0x34>
    5ed2:	bf00      	nop
    5ed4:	200018d8 	.word	0x200018d8

00005ed8 <usb_dc_ep_write>:
{
    5ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5edc:	b084      	sub	sp, #16
    5ede:	461f      	mov	r7, r3
	return get_usbd_ctx()->attached;
    5ee0:	4b4e      	ldr	r3, [pc, #312]	; (601c <usb_dc_ep_write+0x144>)
    5ee2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    5ee6:	2b00      	cmp	r3, #0
    5ee8:	f000 808c 	beq.w	6004 <usb_dc_ep_write+0x12c>
    5eec:	4604      	mov	r4, r0
    5eee:	4688      	mov	r8, r1
    5ef0:	4616      	mov	r6, r2
	return get_usbd_ctx()->ready;
    5ef2:	4b4a      	ldr	r3, [pc, #296]	; (601c <usb_dc_ep_write+0x144>)
    5ef4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    5ef8:	2b00      	cmp	r3, #0
    5efa:	f000 8086 	beq.w	600a <usb_dc_ep_write+0x132>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    5efe:	f010 0f80 	tst.w	r0, #128	; 0x80
    5f02:	f000 8085 	beq.w	6010 <usb_dc_ep_write+0x138>
	ep_ctx = endpoint_ctx(ep);
    5f06:	f7fe fe85 	bl	4c14 <endpoint_ctx>
	if (!ep_ctx) {
    5f0a:	4605      	mov	r5, r0
    5f0c:	2800      	cmp	r0, #0
    5f0e:	f000 8082 	beq.w	6016 <usb_dc_ep_write+0x13e>
	if (!ep_ctx->cfg.en) {
    5f12:	7a03      	ldrb	r3, [r0, #8]
    5f14:	2b00      	cmp	r3, #0
    5f16:	d04e      	beq.n	5fb6 <usb_dc_ep_write+0xde>
	return z_impl_k_mutex_lock(mutex, timeout);
    5f18:	f04f 32ff 	mov.w	r2, #4294967295
    5f1c:	f04f 33ff 	mov.w	r3, #4294967295
    5f20:	483f      	ldr	r0, [pc, #252]	; (6020 <usb_dc_ep_write+0x148>)
    5f22:	f004 fb4f 	bl	a5c4 <z_impl_k_mutex_lock>
	if (ep_ctx->write_in_progress) {
    5f26:	7fab      	ldrb	r3, [r5, #30]
    5f28:	2b00      	cmp	r3, #0
    5f2a:	d158      	bne.n	5fde <usb_dc_ep_write+0x106>
	if (!data_len && ep_ctx->trans_zlp) {
    5f2c:	b91e      	cbnz	r6, 5f36 <usb_dc_ep_write+0x5e>
    5f2e:	7feb      	ldrb	r3, [r5, #31]
    5f30:	b10b      	cbz	r3, 5f36 <usb_dc_ep_write+0x5e>
		ep_ctx->trans_zlp = false;
    5f32:	2300      	movs	r3, #0
    5f34:	77eb      	strb	r3, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    5f36:	7aab      	ldrb	r3, [r5, #10]
    5f38:	b963      	cbnz	r3, 5f54 <usb_dc_ep_write+0x7c>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    5f3a:	b15e      	cbz	r6, 5f54 <usb_dc_ep_write+0x7c>
    5f3c:	4a37      	ldr	r2, [pc, #220]	; (601c <usb_dc_ep_write+0x144>)
    5f3e:	8952      	ldrh	r2, [r2, #10]
    5f40:	42b2      	cmp	r2, r6
    5f42:	d907      	bls.n	5f54 <usb_dc_ep_write+0x7c>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    5f44:	6869      	ldr	r1, [r5, #4]
    5f46:	fbb6 f2f1 	udiv	r2, r6, r1
    5f4a:	fb01 6212 	mls	r2, r1, r2, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    5f4e:	b90a      	cbnz	r2, 5f54 <usb_dc_ep_write+0x7c>
			ep_ctx->trans_zlp = true;
    5f50:	2201      	movs	r2, #1
    5f52:	77ea      	strb	r2, [r5, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    5f54:	b91b      	cbnz	r3, 5f5e <usb_dc_ep_write+0x86>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    5f56:	f003 fb9b 	bl	9690 <nrfx_usbd_last_setup_dir_get>
    5f5a:	42a0      	cmp	r0, r4
    5f5c:	d145      	bne.n	5fea <usb_dc_ep_write+0x112>
	ep_ctx->write_in_progress = true;
    5f5e:	2301      	movs	r3, #1
    5f60:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    5f62:	f8cd 8004 	str.w	r8, [sp, #4]
    5f66:	9602      	str	r6, [sp, #8]
    5f68:	2300      	movs	r3, #0
    5f6a:	9303      	str	r3, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    5f6c:	a901      	add	r1, sp, #4
    5f6e:	4620      	mov	r0, r4
    5f70:	f002 ff24 	bl	8dbc <nrfx_usbd_ep_transfer>
    5f74:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
    5f76:	4b2b      	ldr	r3, [pc, #172]	; (6024 <usb_dc_ep_write+0x14c>)
    5f78:	4298      	cmp	r0, r3
    5f7a:	d03d      	beq.n	5ff8 <usb_dc_ep_write+0x120>
		ep_ctx->write_in_progress = false;
    5f7c:	2300      	movs	r3, #0
    5f7e:	77ab      	strb	r3, [r5, #30]
		if (ret_bytes) {
    5f80:	b107      	cbz	r7, 5f84 <usb_dc_ep_write+0xac>
			*ret_bytes = 0;
    5f82:	603b      	str	r3, [r7, #0]
    5f84:	4b28      	ldr	r3, [pc, #160]	; (6028 <usb_dc_ep_write+0x150>)
    5f86:	4a29      	ldr	r2, [pc, #164]	; (602c <usb_dc_ep_write+0x154>)
    5f88:	1a9b      	subs	r3, r3, r2
    5f8a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    5f8c:	f04f 0200 	mov.w	r2, #0
    5f90:	2001      	movs	r0, #1
    5f92:	f360 0202 	bfi	r2, r0, #0, #3
    5f96:	f36f 02c5 	bfc	r2, #3, #3
    5f9a:	f363 128f 	bfi	r2, r3, #6, #10
    5f9e:	4824      	ldr	r0, [pc, #144]	; (6030 <usb_dc_ep_write+0x158>)
    5fa0:	f7fb fca0 	bl	18e4 <log_1>
		result = -EIO;
    5fa4:	f06f 0404 	mvn.w	r4, #4
	return z_impl_k_mutex_unlock(mutex);
    5fa8:	481d      	ldr	r0, [pc, #116]	; (6020 <usb_dc_ep_write+0x148>)
    5faa:	f004 fb95 	bl	a6d8 <z_impl_k_mutex_unlock>
}
    5fae:	4620      	mov	r0, r4
    5fb0:	b004      	add	sp, #16
    5fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fb6:	4b1c      	ldr	r3, [pc, #112]	; (6028 <usb_dc_ep_write+0x150>)
    5fb8:	4a1c      	ldr	r2, [pc, #112]	; (602c <usb_dc_ep_write+0x154>)
    5fba:	1a9b      	subs	r3, r3, r2
    5fbc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    5fbe:	f04f 0200 	mov.w	r2, #0
    5fc2:	2101      	movs	r1, #1
    5fc4:	f361 0202 	bfi	r2, r1, #0, #3
    5fc8:	f36f 02c5 	bfc	r2, #3, #3
    5fcc:	f363 128f 	bfi	r2, r3, #6, #10
    5fd0:	4621      	mov	r1, r4
    5fd2:	4818      	ldr	r0, [pc, #96]	; (6034 <usb_dc_ep_write+0x15c>)
    5fd4:	f7fb fc86 	bl	18e4 <log_1>
		return -EINVAL;
    5fd8:	f06f 0415 	mvn.w	r4, #21
    5fdc:	e7e7      	b.n	5fae <usb_dc_ep_write+0xd6>
    5fde:	4810      	ldr	r0, [pc, #64]	; (6020 <usb_dc_ep_write+0x148>)
    5fe0:	f004 fb7a 	bl	a6d8 <z_impl_k_mutex_unlock>
		return -EAGAIN;
    5fe4:	f06f 040a 	mvn.w	r4, #10
    5fe8:	e7e1      	b.n	5fae <usb_dc_ep_write+0xd6>
		nrfx_usbd_setup_clear();
    5fea:	f003 fb41 	bl	9670 <nrfx_usbd_setup_clear>
    5fee:	480c      	ldr	r0, [pc, #48]	; (6020 <usb_dc_ep_write+0x148>)
    5ff0:	f004 fb72 	bl	a6d8 <z_impl_k_mutex_unlock>
		return 0;
    5ff4:	2400      	movs	r4, #0
    5ff6:	e7da      	b.n	5fae <usb_dc_ep_write+0xd6>
		if (ret_bytes) {
    5ff8:	b117      	cbz	r7, 6000 <usb_dc_ep_write+0x128>
			*ret_bytes = data_len;
    5ffa:	603e      	str	r6, [r7, #0]
	int result = 0;
    5ffc:	2400      	movs	r4, #0
    5ffe:	e7d3      	b.n	5fa8 <usb_dc_ep_write+0xd0>
    6000:	2400      	movs	r4, #0
    6002:	e7d1      	b.n	5fa8 <usb_dc_ep_write+0xd0>
		return -ENODEV;
    6004:	f06f 0412 	mvn.w	r4, #18
    6008:	e7d1      	b.n	5fae <usb_dc_ep_write+0xd6>
    600a:	f06f 0412 	mvn.w	r4, #18
    600e:	e7ce      	b.n	5fae <usb_dc_ep_write+0xd6>
		return -EINVAL;
    6010:	f06f 0415 	mvn.w	r4, #21
    6014:	e7cb      	b.n	5fae <usb_dc_ep_write+0xd6>
		return -EINVAL;
    6016:	f06f 0415 	mvn.w	r4, #21
    601a:	e7c8      	b.n	5fae <usb_dc_ep_write+0xd6>
    601c:	200018d8 	.word	0x200018d8
    6020:	20001910 	.word	0x20001910
    6024:	0bad0000 	.word	0x0bad0000
    6028:	0000ef64 	.word	0x0000ef64
    602c:	0000eefc 	.word	0x0000eefc
    6030:	0000fe40 	.word	0x0000fe40
    6034:	0000fe20 	.word	0x0000fe20

00006038 <usb_dc_ep_read_wait>:
{
    6038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    603c:	4698      	mov	r8, r3
	return get_usbd_ctx()->attached;
    603e:	4b36      	ldr	r3, [pc, #216]	; (6118 <usb_dc_ep_read_wait+0xe0>)
    6040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    6044:	2b00      	cmp	r3, #0
    6046:	d05b      	beq.n	6100 <usb_dc_ep_read_wait+0xc8>
    6048:	4606      	mov	r6, r0
    604a:	460d      	mov	r5, r1
    604c:	4617      	mov	r7, r2
	return get_usbd_ctx()->ready;
    604e:	4b32      	ldr	r3, [pc, #200]	; (6118 <usb_dc_ep_read_wait+0xe0>)
    6050:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    6054:	2b00      	cmp	r3, #0
    6056:	d056      	beq.n	6106 <usb_dc_ep_read_wait+0xce>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    6058:	f010 0f80 	tst.w	r0, #128	; 0x80
    605c:	d156      	bne.n	610c <usb_dc_ep_read_wait+0xd4>
	if (!data && max_data_len) {
    605e:	b351      	cbz	r1, 60b6 <usb_dc_ep_read_wait+0x7e>
	ep_ctx = endpoint_ctx(ep);
    6060:	4630      	mov	r0, r6
    6062:	f7fe fdd7 	bl	4c14 <endpoint_ctx>
	if (!ep_ctx) {
    6066:	4604      	mov	r4, r0
    6068:	2800      	cmp	r0, #0
    606a:	d052      	beq.n	6112 <usb_dc_ep_read_wait+0xda>
	if (!ep_ctx->cfg.en) {
    606c:	7a03      	ldrb	r3, [r0, #8]
    606e:	b33b      	cbz	r3, 60c0 <usb_dc_ep_read_wait+0x88>
	return z_impl_k_mutex_lock(mutex, timeout);
    6070:	f04f 32ff 	mov.w	r2, #4294967295
    6074:	f04f 33ff 	mov.w	r3, #4294967295
    6078:	4828      	ldr	r0, [pc, #160]	; (611c <usb_dc_ep_read_wait+0xe4>)
    607a:	f004 faa3 	bl	a5c4 <z_impl_k_mutex_lock>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    607e:	68e3      	ldr	r3, [r4, #12]
    6080:	463e      	mov	r6, r7
    6082:	429f      	cmp	r7, r3
    6084:	bf28      	it	cs
    6086:	461e      	movcs	r6, r3
	if (!data && !max_data_len) {
    6088:	b375      	cbz	r5, 60e8 <usb_dc_ep_read_wait+0xb0>
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    608a:	4632      	mov	r2, r6
    608c:	69a1      	ldr	r1, [r4, #24]
    608e:	4628      	mov	r0, r5
    6090:	f007 fa9e 	bl	d5d0 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    6094:	69a3      	ldr	r3, [r4, #24]
    6096:	4433      	add	r3, r6
    6098:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    609a:	68e3      	ldr	r3, [r4, #12]
    609c:	1b9b      	subs	r3, r3, r6
    609e:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    60a0:	f1b8 0f00 	cmp.w	r8, #0
    60a4:	d001      	beq.n	60aa <usb_dc_ep_read_wait+0x72>
		*read_bytes = bytes_to_copy;
    60a6:	f8c8 6000 	str.w	r6, [r8]
	return z_impl_k_mutex_unlock(mutex);
    60aa:	481c      	ldr	r0, [pc, #112]	; (611c <usb_dc_ep_read_wait+0xe4>)
    60ac:	f004 fb14 	bl	a6d8 <z_impl_k_mutex_unlock>
	return 0;
    60b0:	2000      	movs	r0, #0
}
    60b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!data && max_data_len) {
    60b6:	2a00      	cmp	r2, #0
    60b8:	d0d2      	beq.n	6060 <usb_dc_ep_read_wait+0x28>
		return -EINVAL;
    60ba:	f06f 0015 	mvn.w	r0, #21
    60be:	e7f8      	b.n	60b2 <usb_dc_ep_read_wait+0x7a>
    60c0:	4b17      	ldr	r3, [pc, #92]	; (6120 <usb_dc_ep_read_wait+0xe8>)
    60c2:	4a18      	ldr	r2, [pc, #96]	; (6124 <usb_dc_ep_read_wait+0xec>)
    60c4:	1a9b      	subs	r3, r3, r2
    60c6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    60c8:	f04f 0200 	mov.w	r2, #0
    60cc:	2101      	movs	r1, #1
    60ce:	f361 0202 	bfi	r2, r1, #0, #3
    60d2:	f36f 02c5 	bfc	r2, #3, #3
    60d6:	f363 128f 	bfi	r2, r3, #6, #10
    60da:	4631      	mov	r1, r6
    60dc:	4812      	ldr	r0, [pc, #72]	; (6128 <usb_dc_ep_read_wait+0xf0>)
    60de:	f7fb fc01 	bl	18e4 <log_1>
		return -EINVAL;
    60e2:	f06f 0015 	mvn.w	r0, #21
    60e6:	e7e4      	b.n	60b2 <usb_dc_ep_read_wait+0x7a>
	if (!data && !max_data_len) {
    60e8:	2f00      	cmp	r7, #0
    60ea:	d1ce      	bne.n	608a <usb_dc_ep_read_wait+0x52>
		if (read_bytes) {
    60ec:	f1b8 0f00 	cmp.w	r8, #0
    60f0:	d001      	beq.n	60f6 <usb_dc_ep_read_wait+0xbe>
			*read_bytes = ep_ctx->buf.len;
    60f2:	f8c8 3000 	str.w	r3, [r8]
    60f6:	4809      	ldr	r0, [pc, #36]	; (611c <usb_dc_ep_read_wait+0xe4>)
    60f8:	f004 faee 	bl	a6d8 <z_impl_k_mutex_unlock>
		return 0;
    60fc:	2000      	movs	r0, #0
    60fe:	e7d8      	b.n	60b2 <usb_dc_ep_read_wait+0x7a>
		return -ENODEV;
    6100:	f06f 0012 	mvn.w	r0, #18
    6104:	e7d5      	b.n	60b2 <usb_dc_ep_read_wait+0x7a>
    6106:	f06f 0012 	mvn.w	r0, #18
    610a:	e7d2      	b.n	60b2 <usb_dc_ep_read_wait+0x7a>
		return -EINVAL;
    610c:	f06f 0015 	mvn.w	r0, #21
    6110:	e7cf      	b.n	60b2 <usb_dc_ep_read_wait+0x7a>
		return -EINVAL;
    6112:	f06f 0015 	mvn.w	r0, #21
    6116:	e7cc      	b.n	60b2 <usb_dc_ep_read_wait+0x7a>
    6118:	200018d8 	.word	0x200018d8
    611c:	20001910 	.word	0x20001910
    6120:	0000ef64 	.word	0x0000ef64
    6124:	0000eefc 	.word	0x0000eefc
    6128:	0000fe20 	.word	0x0000fe20

0000612c <usb_dc_ep_read_continue>:
	return get_usbd_ctx()->attached;
    612c:	4b58      	ldr	r3, [pc, #352]	; (6290 <usb_dc_ep_read_continue+0x164>)
    612e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    6132:	2b00      	cmp	r3, #0
    6134:	f000 809f 	beq.w	6276 <usb_dc_ep_read_continue+0x14a>
{
    6138:	b530      	push	{r4, r5, lr}
    613a:	b083      	sub	sp, #12
    613c:	4605      	mov	r5, r0
	return get_usbd_ctx()->ready;
    613e:	4b54      	ldr	r3, [pc, #336]	; (6290 <usb_dc_ep_read_continue+0x164>)
    6140:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    6144:	2b00      	cmp	r3, #0
    6146:	f000 8099 	beq.w	627c <usb_dc_ep_read_continue+0x150>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    614a:	f010 0f80 	tst.w	r0, #128	; 0x80
    614e:	f040 8098 	bne.w	6282 <usb_dc_ep_read_continue+0x156>
	ep_ctx = endpoint_ctx(ep);
    6152:	f7fe fd5f 	bl	4c14 <endpoint_ctx>
	if (!ep_ctx) {
    6156:	4604      	mov	r4, r0
    6158:	2800      	cmp	r0, #0
    615a:	f000 8095 	beq.w	6288 <usb_dc_ep_read_continue+0x15c>
	if (!ep_ctx->cfg.en) {
    615e:	7a03      	ldrb	r3, [r0, #8]
    6160:	b1a3      	cbz	r3, 618c <usb_dc_ep_read_continue+0x60>
	return z_impl_k_mutex_lock(mutex, timeout);
    6162:	f04f 32ff 	mov.w	r2, #4294967295
    6166:	f04f 33ff 	mov.w	r3, #4294967295
    616a:	484a      	ldr	r0, [pc, #296]	; (6294 <usb_dc_ep_read_continue+0x168>)
    616c:	f004 fa2a 	bl	a5c4 <z_impl_k_mutex_lock>
	if (!ep_ctx->buf.len) {
    6170:	68e3      	ldr	r3, [r4, #12]
    6172:	b92b      	cbnz	r3, 6180 <usb_dc_ep_read_continue+0x54>
		ep_ctx->buf.curr = ep_ctx->buf.data;
    6174:	6963      	ldr	r3, [r4, #20]
    6176:	61a3      	str	r3, [r4, #24]
		ep_ctx->read_complete = true;
    6178:	2301      	movs	r3, #1
    617a:	7723      	strb	r3, [r4, #28]
		if (ep_ctx->read_pending) {
    617c:	7f63      	ldrb	r3, [r4, #29]
    617e:	b9cb      	cbnz	r3, 61b4 <usb_dc_ep_read_continue+0x88>
	return z_impl_k_mutex_unlock(mutex);
    6180:	4844      	ldr	r0, [pc, #272]	; (6294 <usb_dc_ep_read_continue+0x168>)
    6182:	f004 faa9 	bl	a6d8 <z_impl_k_mutex_unlock>
	return 0;
    6186:	2000      	movs	r0, #0
}
    6188:	b003      	add	sp, #12
    618a:	bd30      	pop	{r4, r5, pc}
    618c:	4b42      	ldr	r3, [pc, #264]	; (6298 <usb_dc_ep_read_continue+0x16c>)
    618e:	4a43      	ldr	r2, [pc, #268]	; (629c <usb_dc_ep_read_continue+0x170>)
    6190:	1a9b      	subs	r3, r3, r2
    6192:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    6194:	f04f 0200 	mov.w	r2, #0
    6198:	2101      	movs	r1, #1
    619a:	f361 0202 	bfi	r2, r1, #0, #3
    619e:	f36f 02c5 	bfc	r2, #3, #3
    61a2:	f363 128f 	bfi	r2, r3, #6, #10
    61a6:	4629      	mov	r1, r5
    61a8:	483d      	ldr	r0, [pc, #244]	; (62a0 <usb_dc_ep_read_continue+0x174>)
    61aa:	f7fb fb9b 	bl	18e4 <log_1>
		return -EINVAL;
    61ae:	f06f 0015 	mvn.w	r0, #21
    61b2:	e7e9      	b.n	6188 <usb_dc_ep_read_continue+0x5c>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    61b4:	2200      	movs	r2, #0
    61b6:	2300      	movs	r3, #0
    61b8:	a901      	add	r1, sp, #4
    61ba:	483a      	ldr	r0, [pc, #232]	; (62a4 <usb_dc_ep_read_continue+0x178>)
    61bc:	f004 f8be 	bl	a33c <k_mem_slab_alloc>
    61c0:	b980      	cbnz	r0, 61e4 <usb_dc_ep_read_continue+0xb8>
	ev = (struct usbd_event *)block.data;
    61c2:	9d01      	ldr	r5, [sp, #4]
	ev->block = block;
    61c4:	606d      	str	r5, [r5, #4]
			if (!ev) {
    61c6:	2d00      	cmp	r5, #0
    61c8:	d04f      	beq.n	626a <usb_dc_ep_read_continue+0x13e>
			ev->evt_type = USBD_EVT_EP;
    61ca:	2301      	movs	r3, #1
    61cc:	742b      	strb	r3, [r5, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    61ce:	60ac      	str	r4, [r5, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    61d0:	732b      	strb	r3, [r5, #12]
	k_fifo_put(&usbd_evt_fifo, ev);
    61d2:	4629      	mov	r1, r5
    61d4:	4834      	ldr	r0, [pc, #208]	; (62a8 <usb_dc_ep_read_continue+0x17c>)
    61d6:	f008 f98e 	bl	e4f6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    61da:	4934      	ldr	r1, [pc, #208]	; (62ac <usb_dc_ep_read_continue+0x180>)
    61dc:	4834      	ldr	r0, [pc, #208]	; (62b0 <usb_dc_ep_read_continue+0x184>)
    61de:	f008 f9ab 	bl	e538 <k_work_submit_to_queue>
}
    61e2:	e7cd      	b.n	6180 <usb_dc_ep_read_continue+0x54>
    61e4:	4b2c      	ldr	r3, [pc, #176]	; (6298 <usb_dc_ep_read_continue+0x16c>)
    61e6:	4a2d      	ldr	r2, [pc, #180]	; (629c <usb_dc_ep_read_continue+0x170>)
    61e8:	1a9b      	subs	r3, r3, r2
    61ea:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    61ec:	f04f 0100 	mov.w	r1, #0
    61f0:	2201      	movs	r2, #1
    61f2:	f362 0102 	bfi	r1, r2, #0, #3
    61f6:	f36f 01c5 	bfc	r1, #3, #3
    61fa:	f363 118f 	bfi	r1, r3, #6, #10
    61fe:	482d      	ldr	r0, [pc, #180]	; (62b4 <usb_dc_ep_read_continue+0x188>)
    6200:	f7fb fbe2 	bl	19c8 <log_0>
static inline void usbd_evt_flush(void)
    6204:	e004      	b.n	6210 <usb_dc_ep_read_continue+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    6206:	1d01      	adds	r1, r0, #4
    6208:	4826      	ldr	r0, [pc, #152]	; (62a4 <usb_dc_ep_read_continue+0x178>)
    620a:	f008 f863 	bl	e2d4 <k_mem_slab_free>
	} while (ev != NULL);
    620e:	b145      	cbz	r5, 6222 <usb_dc_ep_read_continue+0xf6>
	return z_impl_k_queue_get(queue, timeout);
    6210:	2200      	movs	r2, #0
    6212:	2300      	movs	r3, #0
    6214:	4824      	ldr	r0, [pc, #144]	; (62a8 <usb_dc_ep_read_continue+0x17c>)
    6216:	f004 faa3 	bl	a760 <z_impl_k_queue_get>
		if (ev) {
    621a:	4605      	mov	r5, r0
    621c:	2800      	cmp	r0, #0
    621e:	d1f2      	bne.n	6206 <usb_dc_ep_read_continue+0xda>
    6220:	e7f5      	b.n	620e <usb_dc_ep_read_continue+0xe2>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    6222:	2200      	movs	r2, #0
    6224:	2300      	movs	r3, #0
    6226:	a901      	add	r1, sp, #4
    6228:	481e      	ldr	r0, [pc, #120]	; (62a4 <usb_dc_ep_read_continue+0x178>)
    622a:	f004 f887 	bl	a33c <k_mem_slab_alloc>
    622e:	b180      	cbz	r0, 6252 <usb_dc_ep_read_continue+0x126>
    6230:	4b19      	ldr	r3, [pc, #100]	; (6298 <usb_dc_ep_read_continue+0x16c>)
    6232:	4a1a      	ldr	r2, [pc, #104]	; (629c <usb_dc_ep_read_continue+0x170>)
    6234:	1a9b      	subs	r3, r3, r2
    6236:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    6238:	f04f 0100 	mov.w	r1, #0
    623c:	2201      	movs	r2, #1
    623e:	f362 0102 	bfi	r1, r2, #0, #3
    6242:	f36f 01c5 	bfc	r1, #3, #3
    6246:	f363 118f 	bfi	r1, r3, #6, #10
    624a:	481b      	ldr	r0, [pc, #108]	; (62b8 <usb_dc_ep_read_continue+0x18c>)
    624c:	f7fb fbbc 	bl	19c8 <log_0>
			return NULL;
    6250:	e7b9      	b.n	61c6 <usb_dc_ep_read_continue+0x9a>
		ev = (struct usbd_event *)block.data;
    6252:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    6254:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    6256:	2304      	movs	r3, #4
    6258:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    625a:	4813      	ldr	r0, [pc, #76]	; (62a8 <usb_dc_ep_read_continue+0x17c>)
    625c:	f008 f94b 	bl	e4f6 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6260:	4912      	ldr	r1, [pc, #72]	; (62ac <usb_dc_ep_read_continue+0x180>)
    6262:	4813      	ldr	r0, [pc, #76]	; (62b0 <usb_dc_ep_read_continue+0x184>)
    6264:	f008 f968 	bl	e538 <k_work_submit_to_queue>
		return NULL;
    6268:	e7ad      	b.n	61c6 <usb_dc_ep_read_continue+0x9a>
	return z_impl_k_mutex_unlock(mutex);
    626a:	480a      	ldr	r0, [pc, #40]	; (6294 <usb_dc_ep_read_continue+0x168>)
    626c:	f004 fa34 	bl	a6d8 <z_impl_k_mutex_unlock>
				return -ENOMEM;
    6270:	f06f 000b 	mvn.w	r0, #11
    6274:	e788      	b.n	6188 <usb_dc_ep_read_continue+0x5c>
		return -ENODEV;
    6276:	f06f 0012 	mvn.w	r0, #18
}
    627a:	4770      	bx	lr
		return -ENODEV;
    627c:	f06f 0012 	mvn.w	r0, #18
    6280:	e782      	b.n	6188 <usb_dc_ep_read_continue+0x5c>
		return -EINVAL;
    6282:	f06f 0015 	mvn.w	r0, #21
    6286:	e77f      	b.n	6188 <usb_dc_ep_read_continue+0x5c>
		return -EINVAL;
    6288:	f06f 0015 	mvn.w	r0, #21
    628c:	e77c      	b.n	6188 <usb_dc_ep_read_continue+0x5c>
    628e:	bf00      	nop
    6290:	200018d8 	.word	0x200018d8
    6294:	20001910 	.word	0x20001910
    6298:	0000ef64 	.word	0x0000ef64
    629c:	0000eefc 	.word	0x0000eefc
    62a0:	0000fe20 	.word	0x0000fe20
    62a4:	20000358 	.word	0x20000358
    62a8:	200003e8 	.word	0x200003e8
    62ac:	20001900 	.word	0x20001900
    62b0:	20000710 	.word	0x20000710
    62b4:	0000fc48 	.word	0x0000fc48
    62b8:	0000fc68 	.word	0x0000fc68

000062bc <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
    62bc:	4b08      	ldr	r3, [pc, #32]	; (62e0 <usb_dc_ep_set_callback+0x24>)
    62be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    62c2:	b13b      	cbz	r3, 62d4 <usb_dc_ep_set_callback+0x18>
{
    62c4:	b510      	push	{r4, lr}
    62c6:	460c      	mov	r4, r1
	ep_ctx = endpoint_ctx(ep);
    62c8:	f7fe fca4 	bl	4c14 <endpoint_ctx>
	if (!ep_ctx) {
    62cc:	b128      	cbz	r0, 62da <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    62ce:	6004      	str	r4, [r0, #0]
	return 0;
    62d0:	2000      	movs	r0, #0
}
    62d2:	bd10      	pop	{r4, pc}
		return -ENODEV;
    62d4:	f06f 0012 	mvn.w	r0, #18
}
    62d8:	4770      	bx	lr
		return -EINVAL;
    62da:	f06f 0015 	mvn.w	r0, #21
    62de:	e7f8      	b.n	62d2 <usb_dc_ep_set_callback+0x16>
    62e0:	200018d8 	.word	0x200018d8

000062e4 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    62e4:	4b01      	ldr	r3, [pc, #4]	; (62ec <usb_dc_set_status_callback+0x8>)
    62e6:	6018      	str	r0, [r3, #0]
}
    62e8:	4770      	bx	lr
    62ea:	bf00      	nop
    62ec:	200018d8 	.word	0x200018d8

000062f0 <usb_dc_ep_mps>:
{
    62f0:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    62f2:	4b07      	ldr	r3, [pc, #28]	; (6310 <usb_dc_ep_mps+0x20>)
    62f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    62f8:	b123      	cbz	r3, 6304 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    62fa:	f7fe fc8b 	bl	4c14 <endpoint_ctx>
	if (!ep_ctx) {
    62fe:	b120      	cbz	r0, 630a <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    6300:	6840      	ldr	r0, [r0, #4]
}
    6302:	bd08      	pop	{r3, pc}
		return -ENODEV;
    6304:	f06f 0012 	mvn.w	r0, #18
    6308:	e7fb      	b.n	6302 <usb_dc_ep_mps+0x12>
		return -EINVAL;
    630a:	f06f 0015 	mvn.w	r0, #21
    630e:	e7f8      	b.n	6302 <usb_dc_ep_mps+0x12>
    6310:	200018d8 	.word	0x200018d8

00006314 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    6314:	4800      	ldr	r0, [pc, #0]	; (6318 <get_hf_flags+0x4>)
    6316:	4770      	bx	lr
    6318:	20001bf0 	.word	0x20001bf0

0000631c <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    631c:	4b03      	ldr	r3, [pc, #12]	; (632c <get_subsys+0x10>)
    631e:	1ac0      	subs	r0, r0, r3
    6320:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    6322:	4b03      	ldr	r3, [pc, #12]	; (6330 <get_subsys+0x14>)
    6324:	fb03 f000 	mul.w	r0, r3, r0
    6328:	4770      	bx	lr
    632a:	bf00      	nop
    632c:	20001b78 	.word	0x20001b78
    6330:	b6db6db7 	.word	0xb6db6db7

00006334 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6334:	b538      	push	{r3, r4, r5, lr}
    6336:	4605      	mov	r5, r0
    6338:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    633a:	f7ff ffef 	bl	631c <get_subsys>
    633e:	4601      	mov	r1, r0
    6340:	2240      	movs	r2, #64	; 0x40
    6342:	4803      	ldr	r0, [pc, #12]	; (6350 <onoff_stop+0x1c>)
    6344:	f007 fa98 	bl	d878 <stop>
    6348:	4601      	mov	r1, r0
	notify(mgr, res);
    634a:	4628      	mov	r0, r5
    634c:	47a0      	blx	r4
}
    634e:	bd38      	pop	{r3, r4, r5, pc}
    6350:	0000ec44 	.word	0x0000ec44

00006354 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6354:	b530      	push	{r4, r5, lr}
    6356:	b083      	sub	sp, #12
    6358:	4605      	mov	r5, r0
    635a:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    635c:	f7ff ffde 	bl	631c <get_subsys>
    6360:	4601      	mov	r1, r0
    6362:	2340      	movs	r3, #64	; 0x40
    6364:	9300      	str	r3, [sp, #0]
    6366:	4623      	mov	r3, r4
    6368:	4a05      	ldr	r2, [pc, #20]	; (6380 <onoff_start+0x2c>)
    636a:	4806      	ldr	r0, [pc, #24]	; (6384 <onoff_start+0x30>)
    636c:	f007 fa9e 	bl	d8ac <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    6370:	1e01      	subs	r1, r0, #0
    6372:	db01      	blt.n	6378 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    6374:	b003      	add	sp, #12
    6376:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    6378:	4628      	mov	r0, r5
    637a:	47a0      	blx	r4
}
    637c:	e7fa      	b.n	6374 <onoff_start+0x20>
    637e:	bf00      	nop
    6380:	0000d8f5 	.word	0x0000d8f5
    6384:	0000ec44 	.word	0x0000ec44

00006388 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    6388:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    638a:	2805      	cmp	r0, #5
    638c:	d815      	bhi.n	63ba <clock_event_handler+0x32>
    638e:	e8df f000 	tbb	[pc, r0]
    6392:	1a03      	.short	0x1a03
    6394:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    6398:	2100      	movs	r1, #0
    639a:	480d      	ldr	r0, [pc, #52]	; (63d0 <clock_event_handler+0x48>)
    639c:	f007 f9f3 	bl	d786 <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    63a0:	6883      	ldr	r3, [r0, #8]
    63a2:	f013 0f07 	tst.w	r3, #7
    63a6:	d108      	bne.n	63ba <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    63a8:	2100      	movs	r1, #0
    63aa:	4809      	ldr	r0, [pc, #36]	; (63d0 <clock_event_handler+0x48>)
    63ac:	f007 fa52 	bl	d854 <clkstarted_handle>
    63b0:	e003      	b.n	63ba <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    63b2:	2102      	movs	r1, #2
    63b4:	4806      	ldr	r0, [pc, #24]	; (63d0 <clock_event_handler+0x48>)
    63b6:	f007 fa4d 	bl	d854 <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    63ba:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    63bc:	2103      	movs	r1, #3
    63be:	4804      	ldr	r0, [pc, #16]	; (63d0 <clock_event_handler+0x48>)
    63c0:	f007 fa48 	bl	d854 <clkstarted_handle>
		break;
    63c4:	e7f9      	b.n	63ba <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    63c6:	2101      	movs	r1, #1
    63c8:	4801      	ldr	r0, [pc, #4]	; (63d0 <clock_event_handler+0x48>)
    63ca:	f007 fa43 	bl	d854 <clkstarted_handle>
}
    63ce:	e7f4      	b.n	63ba <clock_event_handler+0x32>
    63d0:	0000ec44 	.word	0x0000ec44

000063d4 <generic_hfclk_start>:
{
    63d4:	b510      	push	{r4, lr}
	__asm__ volatile(
    63d6:	f04f 0320 	mov.w	r3, #32
    63da:	f3ef 8411 	mrs	r4, BASEPRI
    63de:	f383 8812 	msr	BASEPRI_MAX, r3
    63e2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    63e6:	4a13      	ldr	r2, [pc, #76]	; (6434 <generic_hfclk_start+0x60>)
    63e8:	6813      	ldr	r3, [r2, #0]
    63ea:	f043 0302 	orr.w	r3, r3, #2
    63ee:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    63f0:	f013 0f01 	tst.w	r3, #1
    63f4:	d108      	bne.n	6408 <generic_hfclk_start+0x34>
	bool already_started = false;
    63f6:	2300      	movs	r3, #0
	__asm__ volatile(
    63f8:	f384 8811 	msr	BASEPRI, r4
    63fc:	f3bf 8f6f 	isb	sy
	if (already_started) {
    6400:	b99b      	cbnz	r3, 642a <generic_hfclk_start+0x56>
	hfclk_start();
    6402:	f007 fa7f 	bl	d904 <hfclk_start>
}
    6406:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6408:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    640c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6410:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    6414:	f012 0f01 	tst.w	r2, #1
    6418:	d101      	bne.n	641e <generic_hfclk_start+0x4a>
	bool already_started = false;
    641a:	2300      	movs	r3, #0
    641c:	e7ec      	b.n	63f8 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    641e:	f7ff ff79 	bl	6314 <get_hf_flags>
    6422:	f007 fa04 	bl	d82e <set_on_state>
			already_started = true;
    6426:	2301      	movs	r3, #1
    6428:	e7e6      	b.n	63f8 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    642a:	2100      	movs	r1, #0
    642c:	4802      	ldr	r0, [pc, #8]	; (6438 <generic_hfclk_start+0x64>)
    642e:	f007 fa11 	bl	d854 <clkstarted_handle>
		return;
    6432:	e7e8      	b.n	6406 <generic_hfclk_start+0x32>
    6434:	20001c18 	.word	0x20001c18
    6438:	0000ec44 	.word	0x0000ec44

0000643c <generic_hfclk_stop>:
{
    643c:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    643e:	4b08      	ldr	r3, [pc, #32]	; (6460 <generic_hfclk_stop+0x24>)
    6440:	e8d3 2fef 	ldaex	r2, [r3]
    6444:	f022 0102 	bic.w	r1, r2, #2
    6448:	e8c3 1fe0 	stlex	r0, r1, [r3]
    644c:	2800      	cmp	r0, #0
    644e:	d1f7      	bne.n	6440 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    6450:	f012 0f01 	tst.w	r2, #1
    6454:	d000      	beq.n	6458 <generic_hfclk_stop+0x1c>
}
    6456:	bd08      	pop	{r3, pc}
	hfclk_stop();
    6458:	f007 fa68 	bl	d92c <hfclk_stop>
    645c:	e7fb      	b.n	6456 <generic_hfclk_stop+0x1a>
    645e:	bf00      	nop
    6460:	20001c18 	.word	0x20001c18

00006464 <api_blocking_start>:
{
    6464:	b500      	push	{lr}
    6466:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6468:	f8cd d000 	str.w	sp, [sp]
    646c:	f8cd d004 	str.w	sp, [sp, #4]
    6470:	2300      	movs	r3, #0
    6472:	9302      	str	r3, [sp, #8]
    6474:	2301      	movs	r3, #1
    6476:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6478:	466b      	mov	r3, sp
    647a:	4a07      	ldr	r2, [pc, #28]	; (6498 <api_blocking_start+0x34>)
    647c:	f007 fa32 	bl	d8e4 <api_start>
	if (err < 0) {
    6480:	2800      	cmp	r0, #0
    6482:	db05      	blt.n	6490 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    6484:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6488:	2300      	movs	r3, #0
    648a:	4668      	mov	r0, sp
    648c:	f004 f9c8 	bl	a820 <z_impl_k_sem_take>
}
    6490:	b005      	add	sp, #20
    6492:	f85d fb04 	ldr.w	pc, [sp], #4
    6496:	bf00      	nop
    6498:	0000d955 	.word	0x0000d955

0000649c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    649c:	b570      	push	{r4, r5, r6, lr}
    649e:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    64a0:	2200      	movs	r2, #0
    64a2:	2101      	movs	r1, #1
    64a4:	2005      	movs	r0, #5
    64a6:	f7fd fc69 	bl	3d7c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    64aa:	2005      	movs	r0, #5
    64ac:	f7fd fc34 	bl	3d18 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    64b0:	4811      	ldr	r0, [pc, #68]	; (64f8 <clk_init+0x5c>)
    64b2:	f001 f839 	bl	7528 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    64b6:	4b11      	ldr	r3, [pc, #68]	; (64fc <clk_init+0x60>)
    64b8:	4298      	cmp	r0, r3
    64ba:	d119      	bne.n	64f0 <clk_init+0x54>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    64bc:	f001 f846 	bl	754c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    64c0:	2400      	movs	r4, #0
    64c2:	2c03      	cmp	r4, #3
    64c4:	d812      	bhi.n	64ec <clk_init+0x50>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    64c6:	4621      	mov	r1, r4
    64c8:	4630      	mov	r0, r6
    64ca:	f007 f95c 	bl	d786 <get_sub_data>
    64ce:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    64d0:	4621      	mov	r1, r4
    64d2:	4630      	mov	r0, r6
    64d4:	f007 f964 	bl	d7a0 <get_onoff_manager>
    64d8:	4909      	ldr	r1, [pc, #36]	; (6500 <clk_init+0x64>)
    64da:	f005 fc70 	bl	bdbe <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    64de:	2800      	cmp	r0, #0
    64e0:	db05      	blt.n	64ee <clk_init+0x52>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    64e2:	2301      	movs	r3, #1
    64e4:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    64e6:	441c      	add	r4, r3
    64e8:	b2e4      	uxtb	r4, r4
    64ea:	e7ea      	b.n	64c2 <clk_init+0x26>
	}

	return 0;
    64ec:	2000      	movs	r0, #0
}
    64ee:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    64f0:	f06f 0004 	mvn.w	r0, #4
    64f4:	e7fb      	b.n	64ee <clk_init+0x52>
    64f6:	bf00      	nop
    64f8:	00006389 	.word	0x00006389
    64fc:	0bad0000 	.word	0x0bad0000
    6500:	0000fefc 	.word	0x0000fefc

00006504 <lfclk_spinwait>:
{
    6504:	b570      	push	{r4, r5, r6, lr}
    6506:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    6508:	2801      	cmp	r0, #1
    650a:	d107      	bne.n	651c <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    650c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6510:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    6514:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    6518:	2b02      	cmp	r3, #2
    651a:	d03f      	beq.n	659c <lfclk_spinwait+0x98>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    651c:	f007 ff12 	bl	e344 <k_is_in_isr>
    6520:	b920      	cbnz	r0, 652c <lfclk_spinwait+0x28>
	return !z_sys_post_kernel;
    6522:	4b30      	ldr	r3, [pc, #192]	; (65e4 <lfclk_spinwait+0xe0>)
    6524:	781b      	ldrb	r3, [r3, #0]
    6526:	b19b      	cbz	r3, 6550 <lfclk_spinwait+0x4c>
    6528:	2300      	movs	r3, #0
    652a:	e000      	b.n	652e <lfclk_spinwait+0x2a>
    652c:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    652e:	461c      	mov	r4, r3
    6530:	b183      	cbz	r3, 6554 <lfclk_spinwait+0x50>
	__asm__ volatile(
    6532:	f04f 0320 	mov.w	r3, #32
    6536:	f3ef 8611 	mrs	r6, BASEPRI
    653a:	f383 8812 	msr	BASEPRI_MAX, r3
    653e:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    6542:	b9a4      	cbnz	r4, 656e <lfclk_spinwait+0x6a>
    p_reg->INTENCLR = mask;
    6544:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6548:	2202      	movs	r2, #2
    654a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    654e:	e00e      	b.n	656e <lfclk_spinwait+0x6a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6550:	2301      	movs	r3, #1
    6552:	e7ec      	b.n	652e <lfclk_spinwait+0x2a>
	int key = isr_mode ? irq_lock() : 0;
    6554:	2600      	movs	r6, #0
    6556:	e7f4      	b.n	6542 <lfclk_spinwait+0x3e>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    6558:	b30c      	cbz	r4, 659e <lfclk_spinwait+0x9a>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    655a:	4630      	mov	r0, r6
    655c:	f7fd fb84 	bl	3c68 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    6560:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6564:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    6568:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    656a:	2b01      	cmp	r3, #1
    656c:	d01c      	beq.n	65a8 <lfclk_spinwait+0xa4>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    656e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    6572:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    6576:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    657a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    657e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    6582:	d126      	bne.n	65d2 <lfclk_spinwait+0xce>
    return false;
    6584:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    6586:	2a00      	cmp	r2, #0
    6588:	d0e6      	beq.n	6558 <lfclk_spinwait+0x54>
    658a:	2b02      	cmp	r3, #2
    658c:	d001      	beq.n	6592 <lfclk_spinwait+0x8e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    658e:	2d01      	cmp	r5, #1
    6590:	d1e2      	bne.n	6558 <lfclk_spinwait+0x54>
	if (isr_mode) {
    6592:	b304      	cbz	r4, 65d6 <lfclk_spinwait+0xd2>
	__asm__ volatile(
    6594:	f386 8811 	msr	BASEPRI, r6
    6598:	f3bf 8f6f 	isb	sy
}
    659c:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
    659e:	2021      	movs	r0, #33	; 0x21
    65a0:	2100      	movs	r1, #0
    65a2:	f004 fe55 	bl	b250 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    65a6:	e7db      	b.n	6560 <lfclk_spinwait+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    65a8:	4b0f      	ldr	r3, [pc, #60]	; (65e8 <lfclk_spinwait+0xe4>)
    65aa:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    65ac:	2b00      	cmp	r3, #0
    65ae:	d0de      	beq.n	656e <lfclk_spinwait+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    65b0:	4b0d      	ldr	r3, [pc, #52]	; (65e8 <lfclk_spinwait+0xe4>)
    65b2:	2200      	movs	r2, #0
    65b4:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    65b6:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    65b8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    65bc:	2202      	movs	r2, #2
    65be:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    65c2:	4b0a      	ldr	r3, [pc, #40]	; (65ec <lfclk_spinwait+0xe8>)
    65c4:	2220      	movs	r2, #32
    65c6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    65ca:	4b09      	ldr	r3, [pc, #36]	; (65f0 <lfclk_spinwait+0xec>)
    65cc:	2201      	movs	r2, #1
    65ce:	601a      	str	r2, [r3, #0]
}
    65d0:	e7cd      	b.n	656e <lfclk_spinwait+0x6a>
                return true;
    65d2:	2201      	movs	r2, #1
    65d4:	e7d7      	b.n	6586 <lfclk_spinwait+0x82>
    p_reg->INTENSET = mask;
    65d6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    65da:	2202      	movs	r2, #2
    65dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    65e0:	e7dc      	b.n	659c <lfclk_spinwait+0x98>
    65e2:	bf00      	nop
    65e4:	20001f26 	.word	0x20001f26
    65e8:	50005104 	.word	0x50005104
    65ec:	e000e100 	.word	0xe000e100
    65f0:	50005008 	.word	0x50005008

000065f4 <z_nrf_clock_control_get_onoff>:
{
    65f4:	b508      	push	{r3, lr}
	return get_onoff_manager(CLOCK_DEVICE,
    65f6:	b2c1      	uxtb	r1, r0
    65f8:	4801      	ldr	r0, [pc, #4]	; (6600 <z_nrf_clock_control_get_onoff+0xc>)
    65fa:	f007 f8d1 	bl	d7a0 <get_onoff_manager>
}
    65fe:	bd08      	pop	{r3, pc}
    6600:	0000ec44 	.word	0x0000ec44

00006604 <z_nrf_clock_control_lf_on>:
{
    6604:	b510      	push	{r4, lr}
    6606:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6608:	4b0e      	ldr	r3, [pc, #56]	; (6644 <z_nrf_clock_control_lf_on+0x40>)
    660a:	2101      	movs	r1, #1
    660c:	e8d3 2fef 	ldaex	r2, [r3]
    6610:	e8c3 1fe0 	stlex	r0, r1, [r3]
    6614:	2800      	cmp	r0, #0
    6616:	d1f9      	bne.n	660c <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    6618:	b11a      	cbz	r2, 6622 <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    661a:	1e63      	subs	r3, r4, #1
    661c:	2b01      	cmp	r3, #1
    661e:	d90c      	bls.n	663a <z_nrf_clock_control_lf_on+0x36>
}
    6620:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    6622:	4809      	ldr	r0, [pc, #36]	; (6648 <z_nrf_clock_control_lf_on+0x44>)
    6624:	f007 f8bc 	bl	d7a0 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    6628:	4908      	ldr	r1, [pc, #32]	; (664c <z_nrf_clock_control_lf_on+0x48>)
    662a:	2300      	movs	r3, #0
    662c:	604b      	str	r3, [r1, #4]
    662e:	60cb      	str	r3, [r1, #12]
    6630:	2301      	movs	r3, #1
    6632:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    6634:	f005 fbdf 	bl	bdf6 <onoff_request>
    6638:	e7ef      	b.n	661a <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    663a:	4620      	mov	r0, r4
    663c:	f7ff ff62 	bl	6504 <lfclk_spinwait>
		break;
    6640:	e7ee      	b.n	6620 <z_nrf_clock_control_lf_on+0x1c>
    6642:	bf00      	nop
    6644:	20001c1c 	.word	0x20001c1c
    6648:	0000ec44 	.word	0x0000ec44
    664c:	20001b68 	.word	0x20001b68

00006650 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    6650:	b510      	push	{r4, lr}
    6652:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    6654:	280a      	cmp	r0, #10
    6656:	d007      	beq.n	6668 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    6658:	4b07      	ldr	r3, [pc, #28]	; (6678 <console_out+0x28>)
    665a:	6818      	ldr	r0, [r3, #0]
    665c:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    665e:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    6660:	685b      	ldr	r3, [r3, #4]
    6662:	4798      	blx	r3

	return c;
}
    6664:	4620      	mov	r0, r4
    6666:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    6668:	4b03      	ldr	r3, [pc, #12]	; (6678 <console_out+0x28>)
    666a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    666c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    666e:	685b      	ldr	r3, [r3, #4]
    6670:	210d      	movs	r1, #13
    6672:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    6674:	e7f0      	b.n	6658 <console_out+0x8>
    6676:	bf00      	nop
    6678:	20001c20 	.word	0x20001c20

0000667c <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    667c:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    667e:	4c04      	ldr	r4, [pc, #16]	; (6690 <uart_console_hook_install+0x14>)
    6680:	4620      	mov	r0, r4
    6682:	f7fe fac1 	bl	4c08 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    6686:	4620      	mov	r0, r4
    6688:	f7fa f84c 	bl	724 <__printk_hook_install>
#endif
}
    668c:	bd10      	pop	{r4, pc}
    668e:	bf00      	nop
    6690:	00006651 	.word	0x00006651

00006694 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    6694:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    6696:	4806      	ldr	r0, [pc, #24]	; (66b0 <uart_console_init+0x1c>)
    6698:	4b06      	ldr	r3, [pc, #24]	; (66b4 <uart_console_init+0x20>)
    669a:	6018      	str	r0, [r3, #0]
    669c:	f007 fde8 	bl	e270 <z_device_ready>
    66a0:	b118      	cbz	r0, 66aa <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    66a2:	f7ff ffeb 	bl	667c <uart_console_hook_install>

	return 0;
    66a6:	2000      	movs	r0, #0
}
    66a8:	bd08      	pop	{r3, pc}
		return -ENODEV;
    66aa:	f06f 0012 	mvn.w	r0, #18
    66ae:	e7fb      	b.n	66a8 <uart_console_init+0x14>
    66b0:	0000ecbc 	.word	0x0000ecbc
    66b4:	20001c20 	.word	0x20001c20

000066b8 <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    66b8:	4b1f      	ldr	r3, [pc, #124]	; (6738 <get_drive+0x80>)
    66ba:	4003      	ands	r3, r0
    66bc:	4a1f      	ldr	r2, [pc, #124]	; (673c <get_drive+0x84>)
    66be:	4293      	cmp	r3, r2
    66c0:	d032      	beq.n	6728 <get_drive+0x70>
    66c2:	d816      	bhi.n	66f2 <get_drive+0x3a>
    66c4:	2b06      	cmp	r3, #6
    66c6:	d02b      	beq.n	6720 <get_drive+0x68>
    66c8:	d906      	bls.n	66d8 <get_drive+0x20>
    66ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    66ce:	d10d      	bne.n	66ec <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
    66d0:	2301      	movs	r3, #1
    66d2:	700b      	strb	r3, [r1, #0]
	int err = 0;
    66d4:	2000      	movs	r0, #0
		break;
    66d6:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    66d8:	b1fb      	cbz	r3, 671a <get_drive+0x62>
    66da:	2b02      	cmp	r3, #2
    66dc:	d103      	bne.n	66e6 <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
    66de:	2304      	movs	r3, #4
    66e0:	700b      	strb	r3, [r1, #0]
	int err = 0;
    66e2:	2000      	movs	r0, #0
		break;
    66e4:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    66e6:	f06f 0015 	mvn.w	r0, #21
    66ea:	4770      	bx	lr
    66ec:	f06f 0015 	mvn.w	r0, #21
    66f0:	4770      	bx	lr
    66f2:	4a13      	ldr	r2, [pc, #76]	; (6740 <get_drive+0x88>)
    66f4:	4293      	cmp	r3, r2
    66f6:	d01b      	beq.n	6730 <get_drive+0x78>
    66f8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    66fc:	d103      	bne.n	6706 <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
    66fe:	2303      	movs	r3, #3
    6700:	700b      	strb	r3, [r1, #0]
	int err = 0;
    6702:	2000      	movs	r0, #0
		break;
    6704:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    6706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    670a:	d103      	bne.n	6714 <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
    670c:	2302      	movs	r3, #2
    670e:	700b      	strb	r3, [r1, #0]
	int err = 0;
    6710:	2000      	movs	r0, #0
		break;
    6712:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    6714:	f06f 0015 	mvn.w	r0, #21
    6718:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    671a:	2000      	movs	r0, #0
    671c:	7008      	strb	r0, [r1, #0]
		break;
    671e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    6720:	2306      	movs	r3, #6
    6722:	700b      	strb	r3, [r1, #0]
	int err = 0;
    6724:	2000      	movs	r0, #0
		break;
    6726:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    6728:	2307      	movs	r3, #7
    672a:	700b      	strb	r3, [r1, #0]
	int err = 0;
    672c:	2000      	movs	r0, #0
		break;
    672e:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
    6730:	2305      	movs	r3, #5
    6732:	700b      	strb	r3, [r1, #0]
	int err = 0;
    6734:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
    6736:	4770      	bx	lr
    6738:	00f00006 	.word	0x00f00006
    673c:	00100006 	.word	0x00100006
    6740:	00400002 	.word	0x00400002

00006744 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    6744:	b128      	cbz	r0, 6752 <get_dev+0xe>
    6746:	2801      	cmp	r0, #1
    6748:	d101      	bne.n	674e <get_dev+0xa>
    674a:	4803      	ldr	r0, [pc, #12]	; (6758 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    674c:	4770      	bx	lr
	const struct device *dev = NULL;
    674e:	2000      	movs	r0, #0
    6750:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    6752:	4802      	ldr	r0, [pc, #8]	; (675c <get_dev+0x18>)
    6754:	4770      	bx	lr
    6756:	bf00      	nop
    6758:	0000ec5c 	.word	0x0000ec5c
    675c:	0000ec74 	.word	0x0000ec74

00006760 <gpio_nrfx_pin_interrupt_configure>:
{
    6760:	b5f0      	push	{r4, r5, r6, r7, lr}
    6762:	b085      	sub	sp, #20
    6764:	460e      	mov	r6, r1
    6766:	4619      	mov	r1, r3
	return port->config;
    6768:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    676a:	7b1b      	ldrb	r3, [r3, #12]
    676c:	f006 051f 	and.w	r5, r6, #31
    6770:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    6774:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    6778:	d022      	beq.n	67c0 <gpio_nrfx_pin_interrupt_configure+0x60>
    677a:	4607      	mov	r7, r0
    677c:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    677e:	2300      	movs	r3, #0
    6780:	9302      	str	r3, [sp, #8]
    6782:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    6784:	4610      	mov	r0, r2
    6786:	f007 f916 	bl	d9b6 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    678a:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    678e:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    6790:	6899      	ldr	r1, [r3, #8]
    6792:	40f1      	lsrs	r1, r6
    6794:	f011 0f01 	tst.w	r1, #1
    6798:	d102      	bne.n	67a0 <gpio_nrfx_pin_interrupt_configure+0x40>
    679a:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
    679e:	d014      	beq.n	67ca <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    67a0:	2300      	movs	r3, #0
    67a2:	aa02      	add	r2, sp, #8
    67a4:	4619      	mov	r1, r3
    67a6:	4628      	mov	r0, r5
    67a8:	f001 fa84 	bl	7cb4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    67ac:	4b1a      	ldr	r3, [pc, #104]	; (6818 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    67ae:	4298      	cmp	r0, r3
    67b0:	d12f      	bne.n	6812 <gpio_nrfx_pin_interrupt_configure+0xb2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    67b2:	2101      	movs	r1, #1
    67b4:	4628      	mov	r0, r5
    67b6:	f001 fc59 	bl	806c <nrfx_gpiote_trigger_enable>
	return 0;
    67ba:	2000      	movs	r0, #0
}
    67bc:	b005      	add	sp, #20
    67be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    67c0:	4628      	mov	r0, r5
    67c2:	f001 fcb5 	bl	8130 <nrfx_gpiote_trigger_disable>
		return 0;
    67c6:	2000      	movs	r0, #0
    67c8:	e7f8      	b.n	67bc <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    67ca:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    67ce:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    67d0:	2a01      	cmp	r2, #1
    67d2:	d012      	beq.n	67fa <gpio_nrfx_pin_interrupt_configure+0x9a>
        case 0: return NRF_P0;
    67d4:	4a11      	ldr	r2, [pc, #68]	; (681c <gpio_nrfx_pin_interrupt_configure+0xbc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    67d6:	3380      	adds	r3, #128	; 0x80
    67d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    67dc:	f013 0f01 	tst.w	r3, #1
    67e0:	d1de      	bne.n	67a0 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    67e2:	f10d 0107 	add.w	r1, sp, #7
    67e6:	4628      	mov	r0, r5
    67e8:	f001 fbe4 	bl	7fb4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    67ec:	4b0c      	ldr	r3, [pc, #48]	; (6820 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    67ee:	4298      	cmp	r0, r3
    67f0:	d005      	beq.n	67fe <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    67f2:	f10d 0307 	add.w	r3, sp, #7
    67f6:	9303      	str	r3, [sp, #12]
    67f8:	e7d2      	b.n	67a0 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    67fa:	4a0a      	ldr	r2, [pc, #40]	; (6824 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    67fc:	e7eb      	b.n	67d6 <gpio_nrfx_pin_interrupt_configure+0x76>
			err = nrfx_gpiote_channel_alloc(&ch);
    67fe:	f10d 0007 	add.w	r0, sp, #7
    6802:	f001 fc2b 	bl	805c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    6806:	4b04      	ldr	r3, [pc, #16]	; (6818 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    6808:	4298      	cmp	r0, r3
    680a:	d0f2      	beq.n	67f2 <gpio_nrfx_pin_interrupt_configure+0x92>
				return -ENOMEM;
    680c:	f06f 000b 	mvn.w	r0, #11
    6810:	e7d4      	b.n	67bc <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    6812:	f06f 0004 	mvn.w	r0, #4
    6816:	e7d1      	b.n	67bc <gpio_nrfx_pin_interrupt_configure+0x5c>
    6818:	0bad0000 	.word	0x0bad0000
    681c:	50842500 	.word	0x50842500
    6820:	0bad0004 	.word	0x0bad0004
    6824:	50842800 	.word	0x50842800

00006828 <pin_uninit>:
{
    6828:	b530      	push	{r4, r5, lr}
    682a:	b083      	sub	sp, #12
    682c:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    682e:	f10d 0107 	add.w	r1, sp, #7
    6832:	f001 fbbf 	bl	7fb4 <nrfx_gpiote_channel_get>
    6836:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    6838:	4620      	mov	r0, r4
    683a:	f001 fca9 	bl	8190 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    683e:	4b0b      	ldr	r3, [pc, #44]	; (686c <pin_uninit+0x44>)
    6840:	4298      	cmp	r0, r3
    6842:	d10f      	bne.n	6864 <pin_uninit+0x3c>
	if (free_ch) {
    6844:	429d      	cmp	r5, r3
    6846:	d005      	beq.n	6854 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    6848:	4b08      	ldr	r3, [pc, #32]	; (686c <pin_uninit+0x44>)
    684a:	4298      	cmp	r0, r3
    684c:	d107      	bne.n	685e <pin_uninit+0x36>
    684e:	2000      	movs	r0, #0
}
    6850:	b003      	add	sp, #12
    6852:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    6854:	f89d 0007 	ldrb.w	r0, [sp, #7]
    6858:	f001 fbf8 	bl	804c <nrfx_gpiote_channel_free>
    685c:	e7f4      	b.n	6848 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    685e:	f06f 0004 	mvn.w	r0, #4
    6862:	e7f5      	b.n	6850 <pin_uninit+0x28>
		return -EIO;
    6864:	f06f 0004 	mvn.w	r0, #4
    6868:	e7f2      	b.n	6850 <pin_uninit+0x28>
    686a:	bf00      	nop
    686c:	0bad0000 	.word	0x0bad0000

00006870 <gpio_nrfx_pin_configure>:
{
    6870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6874:	b087      	sub	sp, #28
	return port->config;
    6876:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    687a:	f898 300c 	ldrb.w	r3, [r8, #12]
    687e:	f001 051f 	and.w	r5, r1, #31
    6882:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    6886:	2a00      	cmp	r2, #0
    6888:	d043      	beq.n	6912 <gpio_nrfx_pin_configure+0xa2>
    688a:	460c      	mov	r4, r1
    688c:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    688e:	2600      	movs	r6, #0
    6890:	9603      	str	r6, [sp, #12]
    6892:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    6894:	f10d 0117 	add.w	r1, sp, #23
    6898:	4620      	mov	r0, r4
    689a:	f001 fb8b 	bl	7fb4 <nrfx_gpiote_channel_get>
    689e:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    68a0:	4633      	mov	r3, r6
    68a2:	aa03      	add	r2, sp, #12
    68a4:	4631      	mov	r1, r6
    68a6:	4628      	mov	r0, r5
    68a8:	f001 fa04 	bl	7cb4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    68ac:	4b2f      	ldr	r3, [pc, #188]	; (696c <gpio_nrfx_pin_configure+0xfc>)
    68ae:	4298      	cmp	r0, r3
    68b0:	d159      	bne.n	6966 <gpio_nrfx_pin_configure+0xf6>
	if (free_ch) {
    68b2:	4599      	cmp	r9, r3
    68b4:	d035      	beq.n	6922 <gpio_nrfx_pin_configure+0xb2>
	if (flags & GPIO_OUTPUT) {
    68b6:	f417 7f00 	tst.w	r7, #512	; 0x200
    68ba:	d041      	beq.n	6940 <gpio_nrfx_pin_configure+0xd0>
		int rv = get_drive(flags, &drive);
    68bc:	f10d 0103 	add.w	r1, sp, #3
    68c0:	4638      	mov	r0, r7
    68c2:	f7ff fef9 	bl	66b8 <get_drive>
		if (rv != 0) {
    68c6:	4606      	mov	r6, r0
    68c8:	bb38      	cbnz	r0, 691a <gpio_nrfx_pin_configure+0xaa>
		nrfx_gpiote_output_config_t output_config = {
    68ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
    68ce:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    68d2:	f417 7f80 	tst.w	r7, #256	; 0x100
    68d6:	bf0c      	ite	eq
    68d8:	2301      	moveq	r3, #1
    68da:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    68dc:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    68e0:	4638      	mov	r0, r7
    68e2:	f007 f83c 	bl	d95e <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    68e6:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    68ea:	f417 6f00 	tst.w	r7, #2048	; 0x800
    68ee:	d01d      	beq.n	692c <gpio_nrfx_pin_configure+0xbc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    68f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    68f4:	2101      	movs	r1, #1
    68f6:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    68fa:	609c      	str	r4, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    68fc:	2200      	movs	r2, #0
    68fe:	a901      	add	r1, sp, #4
    6900:	4628      	mov	r0, r5
    6902:	f001 fa8f 	bl	7e24 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    6906:	4b19      	ldr	r3, [pc, #100]	; (696c <gpio_nrfx_pin_configure+0xfc>)
    6908:	4298      	cmp	r0, r3
    690a:	d006      	beq.n	691a <gpio_nrfx_pin_configure+0xaa>
    690c:	f06f 0615 	mvn.w	r6, #21
    6910:	e003      	b.n	691a <gpio_nrfx_pin_configure+0xaa>
		return pin_uninit(abs_pin);
    6912:	4628      	mov	r0, r5
    6914:	f7ff ff88 	bl	6828 <pin_uninit>
    6918:	4606      	mov	r6, r0
}
    691a:	4630      	mov	r0, r6
    691c:	b007      	add	sp, #28
    691e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    6922:	f89d 0017 	ldrb.w	r0, [sp, #23]
    6926:	f001 fb91 	bl	804c <nrfx_gpiote_channel_free>
    692a:	e7c4      	b.n	68b6 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    692c:	f417 6f80 	tst.w	r7, #1024	; 0x400
    6930:	d0e4      	beq.n	68fc <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    6932:	f8d8 2004 	ldr.w	r2, [r8, #4]
    6936:	2301      	movs	r3, #1
    6938:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    693c:	60d4      	str	r4, [r2, #12]
}
    693e:	e7dd      	b.n	68fc <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
    6940:	4638      	mov	r0, r7
    6942:	f007 f80c 	bl	d95e <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    6946:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    694a:	2300      	movs	r3, #0
    694c:	461a      	mov	r2, r3
    694e:	a902      	add	r1, sp, #8
    6950:	4628      	mov	r0, r5
    6952:	f001 f9af 	bl	7cb4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    6956:	4b05      	ldr	r3, [pc, #20]	; (696c <gpio_nrfx_pin_configure+0xfc>)
    6958:	4298      	cmp	r0, r3
    695a:	d101      	bne.n	6960 <gpio_nrfx_pin_configure+0xf0>
    695c:	2600      	movs	r6, #0
    695e:	e7dc      	b.n	691a <gpio_nrfx_pin_configure+0xaa>
    6960:	f06f 0615 	mvn.w	r6, #21
    6964:	e7d9      	b.n	691a <gpio_nrfx_pin_configure+0xaa>
		return -EINVAL;
    6966:	f06f 0615 	mvn.w	r6, #21
    696a:	e7d6      	b.n	691a <gpio_nrfx_pin_configure+0xaa>
    696c:	0bad0000 	.word	0x0bad0000

00006970 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    6970:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    6972:	f001 fb61 	bl	8038 <nrfx_gpiote_is_init>
    6976:	b108      	cbz	r0, 697c <gpio_nrfx_init+0xc>
		return 0;
    6978:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    697a:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    697c:	f001 fb32 	bl	7fe4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    6980:	4b08      	ldr	r3, [pc, #32]	; (69a4 <gpio_nrfx_init+0x34>)
    6982:	4298      	cmp	r0, r3
    6984:	d10a      	bne.n	699c <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    6986:	2100      	movs	r1, #0
    6988:	4807      	ldr	r0, [pc, #28]	; (69a8 <gpio_nrfx_init+0x38>)
    698a:	f001 fb0d 	bl	7fa8 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    698e:	2200      	movs	r2, #0
    6990:	2105      	movs	r1, #5
    6992:	200d      	movs	r0, #13
    6994:	f7fd f9f2 	bl	3d7c <z_arm_irq_priority_set>
	return 0;
    6998:	2000      	movs	r0, #0
    699a:	e7ee      	b.n	697a <gpio_nrfx_init+0xa>
		return -EIO;
    699c:	f06f 0004 	mvn.w	r0, #4
    69a0:	e7eb      	b.n	697a <gpio_nrfx_init+0xa>
    69a2:	bf00      	nop
    69a4:	0bad0000 	.word	0x0bad0000
    69a8:	0000da47 	.word	0x0000da47

000069ac <uarte_nrfx_pins_configure>:
	return config->uarte_regs;
}

#ifndef CONFIG_PINCTRL
static void uarte_nrfx_pins_configure(const struct device *dev, bool sleep)
{
    69ac:	b410      	push	{r4}
	return dev->config;
    69ae:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	if (!sleep) {
    69b0:	2900      	cmp	r1, #0
    69b2:	f040 8087 	bne.w	6ac4 <uarte_nrfx_pins_configure+0x118>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    69b6:	68da      	ldr	r2, [r3, #12]
    69b8:	f1b2 3fff 	cmp.w	r2, #4294967295
    69bc:	d018      	beq.n	69f0 <uarte_nrfx_pins_configure+0x44>
    *p_pin = pin_number & 0x1F;
    69be:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    69c2:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    69c4:	2a01      	cmp	r2, #1
    69c6:	d06d      	beq.n	6aa4 <uarte_nrfx_pins_configure+0xf8>
        case 0: return NRF_P0;
    69c8:	4869      	ldr	r0, [pc, #420]	; (6b70 <uarte_nrfx_pins_configure+0x1c4>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    69ca:	2201      	movs	r2, #1
    69cc:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    69ce:	6082      	str	r2, [r0, #8]
			nrf_gpio_pin_write(cfg->tx_pin, 1);
			nrf_gpio_cfg_output(cfg->tx_pin);
    69d0:	68da      	ldr	r2, [r3, #12]
    *p_pin = pin_number & 0x1F;
    69d2:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    69d6:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    69d8:	2a01      	cmp	r2, #1
    69da:	d065      	beq.n	6aa8 <uarte_nrfx_pins_configure+0xfc>
        case 0: return NRF_P0;
    69dc:	4864      	ldr	r0, [pc, #400]	; (6b70 <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    69de:	3180      	adds	r1, #128	; 0x80
    69e0:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    69e4:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    69e8:	f042 0203 	orr.w	r2, r2, #3
    reg->PIN_CNF[pin_number] = cnf;
    69ec:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		}

		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    69f0:	691a      	ldr	r2, [r3, #16]
    69f2:	f1b2 3fff 	cmp.w	r2, #4294967295
    69f6:	d012      	beq.n	6a1e <uarte_nrfx_pins_configure+0x72>
			nrf_gpio_cfg_input(cfg->rx_pin,
					   (cfg->rx_pull_up ?
    69f8:	7f19      	ldrb	r1, [r3, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
    69fa:	2900      	cmp	r1, #0
    69fc:	d056      	beq.n	6aac <uarte_nrfx_pins_configure+0x100>
    69fe:	2403      	movs	r4, #3
    *p_pin = pin_number & 0x1F;
    6a00:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    6a04:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6a06:	2a01      	cmp	r2, #1
    6a08:	d052      	beq.n	6ab0 <uarte_nrfx_pins_configure+0x104>
        case 0: return NRF_P0;
    6a0a:	4859      	ldr	r0, [pc, #356]	; (6b70 <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    6a0c:	3180      	adds	r1, #128	; 0x80
    6a0e:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    6a12:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    6a16:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    6a1a:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
					    NRF_GPIO_PIN_PULLUP :
					    NRF_GPIO_PIN_NOPULL));
		}

		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    6a1e:	695a      	ldr	r2, [r3, #20]
    6a20:	f1b2 3fff 	cmp.w	r2, #4294967295
    6a24:	d018      	beq.n	6a58 <uarte_nrfx_pins_configure+0xac>
    *p_pin = pin_number & 0x1F;
    6a26:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    6a2a:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6a2c:	2a01      	cmp	r2, #1
    6a2e:	d041      	beq.n	6ab4 <uarte_nrfx_pins_configure+0x108>
        case 0: return NRF_P0;
    6a30:	484f      	ldr	r0, [pc, #316]	; (6b70 <uarte_nrfx_pins_configure+0x1c4>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6a32:	2201      	movs	r2, #1
    6a34:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    6a36:	6082      	str	r2, [r0, #8]
			nrf_gpio_pin_write(cfg->rts_pin, 1);
			nrf_gpio_cfg_output(cfg->rts_pin);
    6a38:	695a      	ldr	r2, [r3, #20]
    *p_pin = pin_number & 0x1F;
    6a3a:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    6a3e:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6a40:	2a01      	cmp	r2, #1
    6a42:	d039      	beq.n	6ab8 <uarte_nrfx_pins_configure+0x10c>
        case 0: return NRF_P0;
    6a44:	484a      	ldr	r0, [pc, #296]	; (6b70 <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    6a46:	3180      	adds	r1, #128	; 0x80
    6a48:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    6a4c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    6a50:	f042 0203 	orr.w	r2, r2, #3
    reg->PIN_CNF[pin_number] = cnf;
    6a54:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		}

		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    6a58:	699a      	ldr	r2, [r3, #24]
    6a5a:	f1b2 3fff 	cmp.w	r2, #4294967295
    6a5e:	d011      	beq.n	6a84 <uarte_nrfx_pins_configure+0xd8>
			nrf_gpio_cfg_input(cfg->cts_pin,
					   (cfg->cts_pull_up ?
    6a60:	7f59      	ldrb	r1, [r3, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
    6a62:	b359      	cbz	r1, 6abc <uarte_nrfx_pins_configure+0x110>
    6a64:	2403      	movs	r4, #3
    *p_pin = pin_number & 0x1F;
    6a66:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    6a6a:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6a6c:	2a01      	cmp	r2, #1
    6a6e:	d027      	beq.n	6ac0 <uarte_nrfx_pins_configure+0x114>
        case 0: return NRF_P0;
    6a70:	483f      	ldr	r0, [pc, #252]	; (6b70 <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    6a72:	3180      	adds	r1, #128	; 0x80
    6a74:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    6a78:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    6a7c:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    6a80:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
			nrf_gpio_cfg_default(cfg->cts_pin);
		}
	}

	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    6a84:	681a      	ldr	r2, [r3, #0]
    6a86:	68d8      	ldr	r0, [r3, #12]
    6a88:	6919      	ldr	r1, [r3, #16]

NRF_STATIC_INLINE void nrf_uarte_txrx_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pseltxd,
                                               uint32_t         pselrxd)
{
    p_reg->PSEL.TXD = pseltxd;
    6a8a:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    6a8e:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    6a92:	681a      	ldr	r2, [r3, #0]
    6a94:	6959      	ldr	r1, [r3, #20]
    6a96:	699b      	ldr	r3, [r3, #24]

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
    p_reg->PSEL.RTS = pselrts;
    6a98:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    6a9c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
    6aa0:	bc10      	pop	{r4}
    6aa2:	4770      	bx	lr
        case 1: return NRF_P1;
    6aa4:	4833      	ldr	r0, [pc, #204]	; (6b74 <uarte_nrfx_pins_configure+0x1c8>)
    6aa6:	e790      	b.n	69ca <uarte_nrfx_pins_configure+0x1e>
    6aa8:	4832      	ldr	r0, [pc, #200]	; (6b74 <uarte_nrfx_pins_configure+0x1c8>)
    6aaa:	e798      	b.n	69de <uarte_nrfx_pins_configure+0x32>
			nrf_gpio_cfg_input(cfg->rx_pin,
    6aac:	2400      	movs	r4, #0
    6aae:	e7a7      	b.n	6a00 <uarte_nrfx_pins_configure+0x54>
    6ab0:	4830      	ldr	r0, [pc, #192]	; (6b74 <uarte_nrfx_pins_configure+0x1c8>)
    6ab2:	e7ab      	b.n	6a0c <uarte_nrfx_pins_configure+0x60>
    6ab4:	482f      	ldr	r0, [pc, #188]	; (6b74 <uarte_nrfx_pins_configure+0x1c8>)
    6ab6:	e7bc      	b.n	6a32 <uarte_nrfx_pins_configure+0x86>
    6ab8:	482e      	ldr	r0, [pc, #184]	; (6b74 <uarte_nrfx_pins_configure+0x1c8>)
    6aba:	e7c4      	b.n	6a46 <uarte_nrfx_pins_configure+0x9a>
			nrf_gpio_cfg_input(cfg->cts_pin,
    6abc:	2400      	movs	r4, #0
    6abe:	e7d2      	b.n	6a66 <uarte_nrfx_pins_configure+0xba>
    6ac0:	482c      	ldr	r0, [pc, #176]	; (6b74 <uarte_nrfx_pins_configure+0x1c8>)
    6ac2:	e7d6      	b.n	6a72 <uarte_nrfx_pins_configure+0xc6>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    6ac4:	68da      	ldr	r2, [r3, #12]
    6ac6:	f1b2 3fff 	cmp.w	r2, #4294967295
    6aca:	d00e      	beq.n	6aea <uarte_nrfx_pins_configure+0x13e>
    *p_pin = pin_number & 0x1F;
    6acc:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    6ad0:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6ad2:	2a01      	cmp	r2, #1
    6ad4:	d043      	beq.n	6b5e <uarte_nrfx_pins_configure+0x1b2>
        case 0: return NRF_P0;
    6ad6:	4826      	ldr	r0, [pc, #152]	; (6b70 <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    6ad8:	3180      	adds	r1, #128	; 0x80
    6ada:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    6ade:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    6ae2:	f042 0202 	orr.w	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    6ae6:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    6aea:	691a      	ldr	r2, [r3, #16]
    6aec:	f1b2 3fff 	cmp.w	r2, #4294967295
    6af0:	d00e      	beq.n	6b10 <uarte_nrfx_pins_configure+0x164>
    *p_pin = pin_number & 0x1F;
    6af2:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    6af6:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6af8:	2a01      	cmp	r2, #1
    6afa:	d032      	beq.n	6b62 <uarte_nrfx_pins_configure+0x1b6>
        case 0: return NRF_P0;
    6afc:	481c      	ldr	r0, [pc, #112]	; (6b70 <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    6afe:	3180      	adds	r1, #128	; 0x80
    6b00:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    6b04:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    6b08:	f042 0202 	orr.w	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    6b0c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    6b10:	695a      	ldr	r2, [r3, #20]
    6b12:	f1b2 3fff 	cmp.w	r2, #4294967295
    6b16:	d00e      	beq.n	6b36 <uarte_nrfx_pins_configure+0x18a>
    *p_pin = pin_number & 0x1F;
    6b18:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    6b1c:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6b1e:	2a01      	cmp	r2, #1
    6b20:	d021      	beq.n	6b66 <uarte_nrfx_pins_configure+0x1ba>
        case 0: return NRF_P0;
    6b22:	4813      	ldr	r0, [pc, #76]	; (6b70 <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    6b24:	3180      	adds	r1, #128	; 0x80
    6b26:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    6b2a:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    6b2e:	f042 0202 	orr.w	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    6b32:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    6b36:	699a      	ldr	r2, [r3, #24]
    6b38:	f1b2 3fff 	cmp.w	r2, #4294967295
    6b3c:	d0a2      	beq.n	6a84 <uarte_nrfx_pins_configure+0xd8>
    *p_pin = pin_number & 0x1F;
    6b3e:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    6b42:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6b44:	2a01      	cmp	r2, #1
    6b46:	d010      	beq.n	6b6a <uarte_nrfx_pins_configure+0x1be>
        case 0: return NRF_P0;
    6b48:	4809      	ldr	r0, [pc, #36]	; (6b70 <uarte_nrfx_pins_configure+0x1c4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    6b4a:	3180      	adds	r1, #128	; 0x80
    6b4c:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    6b50:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    6b54:	f042 0202 	orr.w	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    6b58:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
}
    6b5c:	e792      	b.n	6a84 <uarte_nrfx_pins_configure+0xd8>
        case 1: return NRF_P1;
    6b5e:	4805      	ldr	r0, [pc, #20]	; (6b74 <uarte_nrfx_pins_configure+0x1c8>)
    6b60:	e7ba      	b.n	6ad8 <uarte_nrfx_pins_configure+0x12c>
    6b62:	4804      	ldr	r0, [pc, #16]	; (6b74 <uarte_nrfx_pins_configure+0x1c8>)
    6b64:	e7cb      	b.n	6afe <uarte_nrfx_pins_configure+0x152>
    6b66:	4803      	ldr	r0, [pc, #12]	; (6b74 <uarte_nrfx_pins_configure+0x1c8>)
    6b68:	e7dc      	b.n	6b24 <uarte_nrfx_pins_configure+0x178>
    6b6a:	4802      	ldr	r0, [pc, #8]	; (6b74 <uarte_nrfx_pins_configure+0x1c8>)
    6b6c:	e7ed      	b.n	6b4a <uarte_nrfx_pins_configure+0x19e>
    6b6e:	bf00      	nop
    6b70:	50842500 	.word	0x50842500
    6b74:	50842800 	.word	0x50842800

00006b78 <baudrate_set>:
	return dev->config;
    6b78:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6b7a:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    6b7c:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    6b80:	d06f      	beq.n	6c62 <baudrate_set+0xea>
    6b82:	d83a      	bhi.n	6bfa <baudrate_set+0x82>
    6b84:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    6b88:	d06e      	beq.n	6c68 <baudrate_set+0xf0>
    6b8a:	d90a      	bls.n	6ba2 <baudrate_set+0x2a>
    6b8c:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    6b90:	d075      	beq.n	6c7e <baudrate_set+0x106>
    6b92:	d924      	bls.n	6bde <baudrate_set+0x66>
    6b94:	f647 2312 	movw	r3, #31250	; 0x7a12
    6b98:	4299      	cmp	r1, r3
    6b9a:	d12b      	bne.n	6bf4 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    6b9c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    6ba0:	e013      	b.n	6bca <baudrate_set+0x52>
	switch (baudrate) {
    6ba2:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    6ba6:	d061      	beq.n	6c6c <baudrate_set+0xf4>
    6ba8:	d907      	bls.n	6bba <baudrate_set+0x42>
    6baa:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    6bae:	d063      	beq.n	6c78 <baudrate_set+0x100>
    6bb0:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    6bb4:	d110      	bne.n	6bd8 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    6bb6:	4b3c      	ldr	r3, [pc, #240]	; (6ca8 <baudrate_set+0x130>)
    6bb8:	e007      	b.n	6bca <baudrate_set+0x52>
	switch (baudrate) {
    6bba:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    6bbe:	d058      	beq.n	6c72 <baudrate_set+0xfa>
    6bc0:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    6bc4:	d105      	bne.n	6bd2 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    6bc6:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    6bca:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    6bce:	2000      	movs	r0, #0
    6bd0:	4770      	bx	lr
	switch (baudrate) {
    6bd2:	f06f 0015 	mvn.w	r0, #21
    6bd6:	4770      	bx	lr
    6bd8:	f06f 0015 	mvn.w	r0, #21
    6bdc:	4770      	bx	lr
    6bde:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    6be2:	d04e      	beq.n	6c82 <baudrate_set+0x10a>
    6be4:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    6be8:	d101      	bne.n	6bee <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    6bea:	4b30      	ldr	r3, [pc, #192]	; (6cac <baudrate_set+0x134>)
    6bec:	e7ed      	b.n	6bca <baudrate_set+0x52>
	switch (baudrate) {
    6bee:	f06f 0015 	mvn.w	r0, #21
    6bf2:	4770      	bx	lr
    6bf4:	f06f 0015 	mvn.w	r0, #21
    6bf8:	4770      	bx	lr
    6bfa:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    6bfe:	d042      	beq.n	6c86 <baudrate_set+0x10e>
    6c00:	d909      	bls.n	6c16 <baudrate_set+0x9e>
    6c02:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    6c06:	d046      	beq.n	6c96 <baudrate_set+0x11e>
    6c08:	d91f      	bls.n	6c4a <baudrate_set+0xd2>
    6c0a:	4b29      	ldr	r3, [pc, #164]	; (6cb0 <baudrate_set+0x138>)
    6c0c:	4299      	cmp	r1, r3
    6c0e:	d148      	bne.n	6ca2 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    6c10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6c14:	e7d9      	b.n	6bca <baudrate_set+0x52>
	switch (baudrate) {
    6c16:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    6c1a:	d037      	beq.n	6c8c <baudrate_set+0x114>
    6c1c:	d905      	bls.n	6c2a <baudrate_set+0xb2>
    6c1e:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    6c22:	d10f      	bne.n	6c44 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    6c24:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    6c28:	e7cf      	b.n	6bca <baudrate_set+0x52>
	switch (baudrate) {
    6c2a:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    6c2e:	4299      	cmp	r1, r3
    6c30:	d02e      	beq.n	6c90 <baudrate_set+0x118>
    6c32:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    6c36:	d102      	bne.n	6c3e <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    6c38:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    6c3c:	e7c5      	b.n	6bca <baudrate_set+0x52>
	switch (baudrate) {
    6c3e:	f06f 0015 	mvn.w	r0, #21
    6c42:	4770      	bx	lr
    6c44:	f06f 0015 	mvn.w	r0, #21
    6c48:	4770      	bx	lr
    6c4a:	4b1a      	ldr	r3, [pc, #104]	; (6cb4 <baudrate_set+0x13c>)
    6c4c:	4299      	cmp	r1, r3
    6c4e:	d025      	beq.n	6c9c <baudrate_set+0x124>
    6c50:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    6c54:	d102      	bne.n	6c5c <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    6c56:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    6c5a:	e7b6      	b.n	6bca <baudrate_set+0x52>
	switch (baudrate) {
    6c5c:	f06f 0015 	mvn.w	r0, #21
    6c60:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    6c62:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    6c66:	e7b0      	b.n	6bca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    6c68:	4b13      	ldr	r3, [pc, #76]	; (6cb8 <baudrate_set+0x140>)
    6c6a:	e7ae      	b.n	6bca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    6c6c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    6c70:	e7ab      	b.n	6bca <baudrate_set+0x52>
	switch (baudrate) {
    6c72:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    6c76:	e7a8      	b.n	6bca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    6c78:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    6c7c:	e7a5      	b.n	6bca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    6c7e:	4b0f      	ldr	r3, [pc, #60]	; (6cbc <baudrate_set+0x144>)
    6c80:	e7a3      	b.n	6bca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    6c82:	4b0f      	ldr	r3, [pc, #60]	; (6cc0 <baudrate_set+0x148>)
    6c84:	e7a1      	b.n	6bca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    6c86:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    6c8a:	e79e      	b.n	6bca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    6c8c:	4b0d      	ldr	r3, [pc, #52]	; (6cc4 <baudrate_set+0x14c>)
    6c8e:	e79c      	b.n	6bca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    6c90:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    6c94:	e799      	b.n	6bca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    6c96:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    6c9a:	e796      	b.n	6bca <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    6c9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    6ca0:	e793      	b.n	6bca <baudrate_set+0x52>
	switch (baudrate) {
    6ca2:	f06f 0015 	mvn.w	r0, #21
}
    6ca6:	4770      	bx	lr
    6ca8:	0013b000 	.word	0x0013b000
    6cac:	004ea000 	.word	0x004ea000
    6cb0:	000f4240 	.word	0x000f4240
    6cb4:	0003d090 	.word	0x0003d090
    6cb8:	00275000 	.word	0x00275000
    6cbc:	0075c000 	.word	0x0075c000
    6cc0:	003af000 	.word	0x003af000
    6cc4:	013a9000 	.word	0x013a9000

00006cc8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    6cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ccc:	4605      	mov	r5, r0
    6cce:	460f      	mov	r7, r1
	return dev->data;
    6cd0:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6cd4:	f007 fb36 	bl	e344 <k_is_in_isr>
    6cd8:	b920      	cbnz	r0, 6ce4 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    6cda:	4b16      	ldr	r3, [pc, #88]	; (6d34 <uarte_nrfx_poll_out+0x6c>)
    6cdc:	781b      	ldrb	r3, [r3, #0]
    6cde:	b1ab      	cbz	r3, 6d0c <uarte_nrfx_poll_out+0x44>
    6ce0:	2300      	movs	r3, #0
    6ce2:	e000      	b.n	6ce6 <uarte_nrfx_poll_out+0x1e>
    6ce4:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    6ce6:	b19b      	cbz	r3, 6d10 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    6ce8:	f04f 0320 	mov.w	r3, #32
    6cec:	f3ef 8411 	mrs	r4, BASEPRI
    6cf0:	f383 8812 	msr	BASEPRI_MAX, r3
    6cf4:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    6cf8:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    6cfa:	4628      	mov	r0, r5
    6cfc:	f006 ffd7 	bl	dcae <is_tx_ready>
    6d00:	b950      	cbnz	r0, 6d18 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    6d02:	f384 8811 	msr	BASEPRI, r4
    6d06:	f3bf 8f6f 	isb	sy
}
    6d0a:	e7ed      	b.n	6ce8 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6d0c:	2301      	movs	r3, #1
    6d0e:	e7ea      	b.n	6ce6 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    6d10:	4628      	mov	r0, r5
    6d12:	f007 f8e9 	bl	dee8 <wait_tx_ready>
    6d16:	4606      	mov	r6, r0
	}

	data->char_out = c;
    6d18:	4641      	mov	r1, r8
    6d1a:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    6d1e:	2201      	movs	r2, #1
    6d20:	4628      	mov	r0, r5
    6d22:	f006 ffde 	bl	dce2 <tx_start>
	__asm__ volatile(
    6d26:	f386 8811 	msr	BASEPRI, r6
    6d2a:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    6d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d32:	bf00      	nop
    6d34:	20001f26 	.word	0x20001f26

00006d38 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    6d38:	b538      	push	{r3, r4, r5, lr}
    6d3a:	4605      	mov	r5, r0
    6d3c:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    6d3e:	f101 0016 	add.w	r0, r1, #22
    6d42:	f000 fdaf 	bl	78a4 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    6d46:	4b12      	ldr	r3, [pc, #72]	; (6d90 <endtx_stoptx_ppi_init+0x58>)
    6d48:	4298      	cmp	r0, r3
    6d4a:	d10e      	bne.n	6d6a <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    6d4c:	7da3      	ldrb	r3, [r4, #22]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    6d4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    6d52:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    6d56:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    6d5a:	7da2      	ldrb	r2, [r4, #22]
    6d5c:	2301      	movs	r3, #1
    6d5e:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    6d60:	4a0c      	ldr	r2, [pc, #48]	; (6d94 <endtx_stoptx_ppi_init+0x5c>)
    6d62:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    6d66:	2000      	movs	r0, #0
}
    6d68:	bd38      	pop	{r3, r4, r5, pc}
    6d6a:	4b0b      	ldr	r3, [pc, #44]	; (6d98 <endtx_stoptx_ppi_init+0x60>)
    6d6c:	4a0b      	ldr	r2, [pc, #44]	; (6d9c <endtx_stoptx_ppi_init+0x64>)
    6d6e:	1a9b      	subs	r3, r3, r2
    6d70:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate PPI Channel");
    6d72:	f04f 0100 	mov.w	r1, #0
    6d76:	2201      	movs	r2, #1
    6d78:	f362 0102 	bfi	r1, r2, #0, #3
    6d7c:	f36f 01c5 	bfc	r1, #3, #3
    6d80:	f363 118f 	bfi	r1, r3, #6, #10
    6d84:	4806      	ldr	r0, [pc, #24]	; (6da0 <endtx_stoptx_ppi_init+0x68>)
    6d86:	f7fa fe1f 	bl	19c8 <log_0>
		return -EIO;
    6d8a:	f06f 0004 	mvn.w	r0, #4
    6d8e:	e7eb      	b.n	6d68 <endtx_stoptx_ppi_init+0x30>
    6d90:	0bad0000 	.word	0x0bad0000
    6d94:	50017000 	.word	0x50017000
    6d98:	0000ef44 	.word	0x0000ef44
    6d9c:	0000eefc 	.word	0x0000eefc
    6da0:	0000ff5c 	.word	0x0000ff5c

00006da4 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    6da4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    6da8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    6dac:	4b01      	ldr	r3, [pc, #4]	; (6db4 <set_comparator+0x10>)
    6dae:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    6db2:	4770      	bx	lr
    6db4:	50015000 	.word	0x50015000

00006db8 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    6db8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    6dbc:	4b01      	ldr	r3, [pc, #4]	; (6dc4 <get_comparator+0xc>)
    6dbe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    6dc2:	4770      	bx	lr
    6dc4:	50015000 	.word	0x50015000

00006dc8 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6dc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6dcc:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    6dce:	4a02      	ldr	r2, [pc, #8]	; (6dd8 <event_enable+0x10>)
    6dd0:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    6dd4:	4770      	bx	lr
    6dd6:	bf00      	nop
    6dd8:	50015000 	.word	0x50015000

00006ddc <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6de0:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    6de2:	4a02      	ldr	r2, [pc, #8]	; (6dec <event_disable+0x10>)
    6de4:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    6de8:	4770      	bx	lr
    6dea:	bf00      	nop
    6dec:	50015000 	.word	0x50015000

00006df0 <counter>:
     return p_reg->COUNTER;
    6df0:	4b01      	ldr	r3, [pc, #4]	; (6df8 <counter+0x8>)
    6df2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    6df6:	4770      	bx	lr
    6df8:	50015000 	.word	0x50015000

00006dfc <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    6dfc:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    6dfe:	2301      	movs	r3, #1
    6e00:	4083      	lsls	r3, r0
    6e02:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6e04:	4a0d      	ldr	r2, [pc, #52]	; (6e3c <compare_int_lock+0x40>)
    6e06:	e8d2 1fef 	ldaex	r1, [r2]
    6e0a:	ea01 0c04 	and.w	ip, r1, r4
    6e0e:	e8c2 cfee 	stlex	lr, ip, [r2]
    6e12:	f1be 0f00 	cmp.w	lr, #0
    6e16:	d1f6      	bne.n	6e06 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6e18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6e1c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    6e20:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    6e24:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    6e28:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6e2c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    6e30:	420b      	tst	r3, r1
}
    6e32:	bf14      	ite	ne
    6e34:	2001      	movne	r0, #1
    6e36:	2000      	moveq	r0, #0
    6e38:	bd10      	pop	{r4, pc}
    6e3a:	bf00      	nop
    6e3c:	20001c60 	.word	0x20001c60

00006e40 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    6e40:	b570      	push	{r4, r5, r6, lr}
    6e42:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    6e44:	f007 f8e4 	bl	e010 <full_int_lock>
    6e48:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    6e4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6e4e:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    6e50:	4a15      	ldr	r2, [pc, #84]	; (6ea8 <channel_processing_check_and_clear+0x68>)
    6e52:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    6e56:	4213      	tst	r3, r2
    6e58:	d105      	bne.n	6e66 <channel_processing_check_and_clear+0x26>
	bool result = false;
    6e5a:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    6e5c:	4628      	mov	r0, r5
    6e5e:	f007 f8e0 	bl	e022 <full_int_unlock>

	return result;
}
    6e62:	4630      	mov	r0, r6
    6e64:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    6e66:	2301      	movs	r3, #1
    6e68:	40a3      	lsls	r3, r4
    6e6a:	43db      	mvns	r3, r3
    6e6c:	4a0f      	ldr	r2, [pc, #60]	; (6eac <channel_processing_check_and_clear+0x6c>)
    6e6e:	e8d2 1fef 	ldaex	r1, [r2]
    6e72:	ea01 0003 	and.w	r0, r1, r3
    6e76:	e8c2 0fe6 	stlex	r6, r0, [r2]
    6e7a:	2e00      	cmp	r6, #0
    6e7c:	d1f7      	bne.n	6e6e <channel_processing_check_and_clear+0x2e>
    6e7e:	b959      	cbnz	r1, 6e98 <channel_processing_check_and_clear+0x58>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6e80:	f104 0350 	add.w	r3, r4, #80	; 0x50
    6e84:	009b      	lsls	r3, r3, #2
    6e86:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6e88:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    6e8c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    6e90:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    6e92:	b113      	cbz	r3, 6e9a <channel_processing_check_and_clear+0x5a>
    6e94:	2301      	movs	r3, #1
    6e96:	e000      	b.n	6e9a <channel_processing_check_and_clear+0x5a>
    6e98:	2301      	movs	r3, #1
		if (result) {
    6e9a:	461e      	mov	r6, r3
    6e9c:	2b00      	cmp	r3, #0
    6e9e:	d0dd      	beq.n	6e5c <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    6ea0:	4620      	mov	r0, r4
    6ea2:	f007 f8a6 	bl	dff2 <event_clear>
    6ea6:	e7d9      	b.n	6e5c <channel_processing_check_and_clear+0x1c>
    6ea8:	50015000 	.word	0x50015000
    6eac:	20001c5c 	.word	0x20001c5c

00006eb0 <compare_int_unlock>:
	if (key) {
    6eb0:	b901      	cbnz	r1, 6eb4 <compare_int_unlock+0x4>
}
    6eb2:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    6eb4:	2301      	movs	r3, #1
    6eb6:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6eb8:	4a0e      	ldr	r2, [pc, #56]	; (6ef4 <compare_int_unlock+0x44>)
    6eba:	e8d2 1fef 	ldaex	r1, [r2]
    6ebe:	4319      	orrs	r1, r3
    6ec0:	e8c2 1fec 	stlex	ip, r1, [r2]
    6ec4:	f1bc 0f00 	cmp.w	ip, #0
    6ec8:	d1f7      	bne.n	6eba <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6eca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6ece:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    6ed0:	4a09      	ldr	r2, [pc, #36]	; (6ef8 <compare_int_unlock+0x48>)
    6ed2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6ed6:	4b09      	ldr	r3, [pc, #36]	; (6efc <compare_int_unlock+0x4c>)
    6ed8:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    6edc:	fa23 f000 	lsr.w	r0, r3, r0
    6ee0:	f010 0f01 	tst.w	r0, #1
    6ee4:	d0e5      	beq.n	6eb2 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6ee6:	4b06      	ldr	r3, [pc, #24]	; (6f00 <compare_int_unlock+0x50>)
    6ee8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    6eec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    6ef0:	e7df      	b.n	6eb2 <compare_int_unlock+0x2>
    6ef2:	bf00      	nop
    6ef4:	20001c60 	.word	0x20001c60
    6ef8:	50015000 	.word	0x50015000
    6efc:	20001c5c 	.word	0x20001c5c
    6f00:	e000e100 	.word	0xe000e100

00006f04 <sys_clock_timeout_handler>:
{
    6f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f06:	4607      	mov	r7, r0
    6f08:	4614      	mov	r4, r2
    6f0a:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    6f0c:	4610      	mov	r0, r2
    6f0e:	4619      	mov	r1, r3
    6f10:	f007 f87b 	bl	e00a <absolute_time_to_cc>
    6f14:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    6f16:	4b15      	ldr	r3, [pc, #84]	; (6f6c <sys_clock_timeout_handler+0x68>)
    6f18:	681a      	ldr	r2, [r3, #0]
    6f1a:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    6f1c:	601c      	str	r4, [r3, #0]
    6f1e:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    6f20:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    6f24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    6f28:	d308      	bcc.n	6f3c <sys_clock_timeout_handler+0x38>
	return false;
    6f2a:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    6f2c:	f004 fb18 	bl	b560 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    6f30:	4638      	mov	r0, r7
    6f32:	f7ff ff41 	bl	6db8 <get_comparator>
    6f36:	42a8      	cmp	r0, r5
    6f38:	d00c      	beq.n	6f54 <sys_clock_timeout_handler+0x50>
}
    6f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    6f3c:	4b0c      	ldr	r3, [pc, #48]	; (6f70 <sys_clock_timeout_handler+0x6c>)
    6f3e:	6819      	ldr	r1, [r3, #0]
    6f40:	0a0b      	lsrs	r3, r1, #8
    6f42:	060a      	lsls	r2, r1, #24
    6f44:	1952      	adds	r2, r2, r5
    6f46:	f143 0300 	adc.w	r3, r3, #0
    6f4a:	490a      	ldr	r1, [pc, #40]	; (6f74 <sys_clock_timeout_handler+0x70>)
    6f4c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    6f50:	2401      	movs	r4, #1
    6f52:	e7eb      	b.n	6f2c <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    6f54:	b11c      	cbz	r4, 6f5e <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    6f56:	4638      	mov	r0, r7
    6f58:	f7ff ff36 	bl	6dc8 <event_enable>
}
    6f5c:	e7ed      	b.n	6f3a <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    6f5e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    6f62:	4638      	mov	r0, r7
    6f64:	f7ff ff1e 	bl	6da4 <set_comparator>
    6f68:	e7f5      	b.n	6f56 <sys_clock_timeout_handler+0x52>
    6f6a:	bf00      	nop
    6f6c:	200007f8 	.word	0x200007f8
    6f70:	20001c64 	.word	0x20001c64
    6f74:	200007e0 	.word	0x200007e0

00006f78 <z_nrf_rtc_timer_read>:
{
    6f78:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    6f7a:	4b0d      	ldr	r3, [pc, #52]	; (6fb0 <z_nrf_rtc_timer_read+0x38>)
    6f7c:	681b      	ldr	r3, [r3, #0]
    6f7e:	0a1d      	lsrs	r5, r3, #8
    6f80:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    6f82:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    6f86:	f7ff ff33 	bl	6df0 <counter>
    6f8a:	4603      	mov	r3, r0
	val += cntr;
    6f8c:	1820      	adds	r0, r4, r0
    6f8e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    6f92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    6f96:	d20a      	bcs.n	6fae <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    6f98:	4b06      	ldr	r3, [pc, #24]	; (6fb4 <z_nrf_rtc_timer_read+0x3c>)
    6f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
    6f9e:	4299      	cmp	r1, r3
    6fa0:	bf08      	it	eq
    6fa2:	4290      	cmpeq	r0, r2
    6fa4:	d203      	bcs.n	6fae <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    6fa6:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    6faa:	f141 0100 	adc.w	r1, r1, #0
}
    6fae:	bd38      	pop	{r3, r4, r5, pc}
    6fb0:	20001c64 	.word	0x20001c64
    6fb4:	200007e0 	.word	0x200007e0

00006fb8 <compare_set_nolocks>:
{
    6fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6fbc:	4606      	mov	r6, r0
    6fbe:	4614      	mov	r4, r2
    6fc0:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    6fc2:	4610      	mov	r0, r2
    6fc4:	4619      	mov	r1, r3
    6fc6:	f007 f820 	bl	e00a <absolute_time_to_cc>
    6fca:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    6fcc:	f7ff ffd4 	bl	6f78 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    6fd0:	42a9      	cmp	r1, r5
    6fd2:	bf08      	it	eq
    6fd4:	42a0      	cmpeq	r0, r4
    6fd6:	d21e      	bcs.n	7016 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    6fd8:	ebb4 0800 	subs.w	r8, r4, r0
    6fdc:	eb65 0901 	sbc.w	r9, r5, r1
    6fe0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6fe4:	2300      	movs	r3, #0
    6fe6:	454b      	cmp	r3, r9
    6fe8:	bf08      	it	eq
    6fea:	4542      	cmpeq	r2, r8
    6fec:	d32a      	bcc.n	7044 <compare_set_nolocks+0x8c>
		if (target_time != cc_data[chan].target_time) {
    6fee:	4b17      	ldr	r3, [pc, #92]	; (704c <compare_set_nolocks+0x94>)
    6ff0:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    6ff4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    6ff8:	42ab      	cmp	r3, r5
    6ffa:	bf08      	it	eq
    6ffc:	42a2      	cmpeq	r2, r4
    6ffe:	d014      	beq.n	702a <compare_set_nolocks+0x72>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    7000:	4639      	mov	r1, r7
    7002:	4630      	mov	r0, r6
    7004:	f007 f812 	bl	e02c <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    7008:	4639      	mov	r1, r7
    700a:	f006 ffee 	bl	dfea <counter_sub>
    700e:	1824      	adds	r4, r4, r0
    7010:	f145 0500 	adc.w	r5, r5, #0
    7014:	e009      	b.n	702a <compare_set_nolocks+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    7016:	2301      	movs	r3, #1
    7018:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    701a:	4a0d      	ldr	r2, [pc, #52]	; (7050 <compare_set_nolocks+0x98>)
    701c:	e8d2 1fef 	ldaex	r1, [r2]
    7020:	4319      	orrs	r1, r3
    7022:	e8c2 1fe0 	stlex	r0, r1, [r2]
    7026:	2800      	cmp	r0, #0
    7028:	d1f8      	bne.n	701c <compare_set_nolocks+0x64>
	cc_data[chan].target_time = target_time;
    702a:	4b08      	ldr	r3, [pc, #32]	; (704c <compare_set_nolocks+0x94>)
    702c:	0132      	lsls	r2, r6, #4
    702e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    7032:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    7036:	9908      	ldr	r1, [sp, #32]
    7038:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    703a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    703c:	6073      	str	r3, [r6, #4]
	return ret;
    703e:	2000      	movs	r0, #0
}
    7040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    7044:	f06f 0015 	mvn.w	r0, #21
    7048:	e7fa      	b.n	7040 <compare_set_nolocks+0x88>
    704a:	bf00      	nop
    704c:	200007e8 	.word	0x200007e8
    7050:	20001c5c 	.word	0x20001c5c

00007054 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    7054:	b530      	push	{r4, r5, lr}
    7056:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    7058:	2300      	movs	r3, #0
    705a:	4a1e      	ldr	r2, [pc, #120]	; (70d4 <sys_clock_driver_init+0x80>)
    705c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    7060:	2b00      	cmp	r3, #0
    7062:	dd25      	ble.n	70b0 <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
    7064:	4c1b      	ldr	r4, [pc, #108]	; (70d4 <sys_clock_driver_init+0x80>)
    7066:	2502      	movs	r5, #2
    7068:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    706c:	4b1a      	ldr	r3, [pc, #104]	; (70d8 <sys_clock_driver_init+0x84>)
    706e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7072:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    7076:	2200      	movs	r2, #0
    7078:	2101      	movs	r1, #1
    707a:	2015      	movs	r0, #21
    707c:	f7fc fe7e 	bl	3d7c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    7080:	2015      	movs	r0, #21
    7082:	f7fc fe49 	bl	3d18 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    7086:	2301      	movs	r3, #1
    7088:	4a14      	ldr	r2, [pc, #80]	; (70dc <sys_clock_driver_init+0x88>)
    708a:	6013      	str	r3, [r2, #0]
    708c:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    708e:	4a14      	ldr	r2, [pc, #80]	; (70e0 <sys_clock_driver_init+0x8c>)
    7090:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    7092:	2400      	movs	r4, #0
    7094:	9401      	str	r4, [sp, #4]
    7096:	4b13      	ldr	r3, [pc, #76]	; (70e4 <sys_clock_driver_init+0x90>)
    7098:	9300      	str	r3, [sp, #0]
    709a:	4a13      	ldr	r2, [pc, #76]	; (70e8 <sys_clock_driver_init+0x94>)
    709c:	2300      	movs	r3, #0
    709e:	4620      	mov	r0, r4
    70a0:	f006 ffff 	bl	e0a2 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    70a4:	4628      	mov	r0, r5
    70a6:	f7ff faad 	bl	6604 <z_nrf_clock_control_lf_on>

	return 0;
}
    70aa:	4620      	mov	r0, r4
    70ac:	b003      	add	sp, #12
    70ae:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    70b0:	4a0e      	ldr	r2, [pc, #56]	; (70ec <sys_clock_driver_init+0x98>)
    70b2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    70b6:	f04f 30ff 	mov.w	r0, #4294967295
    70ba:	f04f 31ff 	mov.w	r1, #4294967295
    70be:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    70c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    70c6:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    70c8:	4902      	ldr	r1, [pc, #8]	; (70d4 <sys_clock_driver_init+0x80>)
    70ca:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    70ce:	3301      	adds	r3, #1
    70d0:	e7c6      	b.n	7060 <sys_clock_driver_init+0xc>
    70d2:	bf00      	nop
    70d4:	50015000 	.word	0x50015000
    70d8:	e000e100 	.word	0xe000e100
    70dc:	50015008 	.word	0x50015008
    70e0:	20001c60 	.word	0x20001c60
    70e4:	00006f05 	.word	0x00006f05
    70e8:	007fffff 	.word	0x007fffff
    70ec:	200007e8 	.word	0x200007e8

000070f0 <process_channel>:
{
    70f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    70f4:	b082      	sub	sp, #8
    70f6:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    70f8:	f7ff fea2 	bl	6e40 <channel_processing_check_and_clear>
    70fc:	b910      	cbnz	r0, 7104 <process_channel+0x14>
}
    70fe:	b002      	add	sp, #8
    7100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    7104:	f7ff ff38 	bl	6f78 <z_nrf_rtc_timer_read>
    7108:	4606      	mov	r6, r0
    710a:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    710c:	f006 ff80 	bl	e010 <full_int_lock>
    7110:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    7112:	4b13      	ldr	r3, [pc, #76]	; (7160 <process_channel+0x70>)
    7114:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    7118:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    711c:	454f      	cmp	r7, r9
    711e:	bf08      	it	eq
    7120:	4546      	cmpeq	r6, r8
    7122:	d20b      	bcs.n	713c <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    7124:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    7126:	4650      	mov	r0, sl
    7128:	f006 ff7b 	bl	e022 <full_int_unlock>
		if (handler) {
    712c:	2e00      	cmp	r6, #0
    712e:	d0e6      	beq.n	70fe <process_channel+0xe>
			handler(chan, expire_time, user_context);
    7130:	9500      	str	r5, [sp, #0]
    7132:	4642      	mov	r2, r8
    7134:	464b      	mov	r3, r9
    7136:	4620      	mov	r0, r4
    7138:	47b0      	blx	r6
}
    713a:	e7e0      	b.n	70fe <process_channel+0xe>
			handler = cc_data[chan].callback;
    713c:	4a08      	ldr	r2, [pc, #32]	; (7160 <process_channel+0x70>)
    713e:	0123      	lsls	r3, r4, #4
    7140:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    7144:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    7146:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    7148:	2000      	movs	r0, #0
    714a:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    714c:	f04f 32ff 	mov.w	r2, #4294967295
    7150:	f04f 33ff 	mov.w	r3, #4294967295
    7154:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    7158:	4620      	mov	r0, r4
    715a:	f7ff fe3f 	bl	6ddc <event_disable>
    715e:	e7e2      	b.n	7126 <process_channel+0x36>
    7160:	200007e8 	.word	0x200007e8

00007164 <rtc_nrf_isr>:
{
    7164:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    7166:	4b0d      	ldr	r3, [pc, #52]	; (719c <rtc_nrf_isr+0x38>)
    7168:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    716c:	f013 0f02 	tst.w	r3, #2
    7170:	d00a      	beq.n	7188 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7172:	4b0b      	ldr	r3, [pc, #44]	; (71a0 <rtc_nrf_isr+0x3c>)
    7174:	681b      	ldr	r3, [r3, #0]
    7176:	b13b      	cbz	r3, 7188 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7178:	4b09      	ldr	r3, [pc, #36]	; (71a0 <rtc_nrf_isr+0x3c>)
    717a:	2200      	movs	r2, #0
    717c:	601a      	str	r2, [r3, #0]
    717e:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
    7180:	4a08      	ldr	r2, [pc, #32]	; (71a4 <rtc_nrf_isr+0x40>)
    7182:	6813      	ldr	r3, [r2, #0]
    7184:	3301      	adds	r3, #1
    7186:	6013      	str	r3, [r2, #0]
{
    7188:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    718a:	2c00      	cmp	r4, #0
    718c:	dd00      	ble.n	7190 <rtc_nrf_isr+0x2c>
}
    718e:	bd10      	pop	{r4, pc}
		process_channel(chan);
    7190:	4620      	mov	r0, r4
    7192:	f7ff ffad 	bl	70f0 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    7196:	3401      	adds	r4, #1
    7198:	e7f7      	b.n	718a <rtc_nrf_isr+0x26>
    719a:	bf00      	nop
    719c:	50015000 	.word	0x50015000
    71a0:	50015104 	.word	0x50015104
    71a4:	20001c64 	.word	0x20001c64

000071a8 <sys_clock_set_timeout>:
{
    71a8:	b510      	push	{r4, lr}
    71aa:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    71ac:	f1b0 3fff 	cmp.w	r0, #4294967295
    71b0:	d007      	beq.n	71c2 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    71b2:	1e44      	subs	r4, r0, #1
    71b4:	2c00      	cmp	r4, #0
    71b6:	dd07      	ble.n	71c8 <sys_clock_set_timeout+0x20>
    71b8:	4b11      	ldr	r3, [pc, #68]	; (7200 <sys_clock_set_timeout+0x58>)
    71ba:	429c      	cmp	r4, r3
    71bc:	dd05      	ble.n	71ca <sys_clock_set_timeout+0x22>
    71be:	4c11      	ldr	r4, [pc, #68]	; (7204 <sys_clock_set_timeout+0x5c>)
    71c0:	e003      	b.n	71ca <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    71c2:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    71c6:	e7f4      	b.n	71b2 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    71c8:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    71ca:	f7ff fed5 	bl	6f78 <z_nrf_rtc_timer_read>
    71ce:	4b0e      	ldr	r3, [pc, #56]	; (7208 <sys_clock_set_timeout+0x60>)
    71d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    71d4:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    71d6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    71da:	d300      	bcc.n	71de <sys_clock_set_timeout+0x36>
		ticks = 0;
    71dc:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    71de:	4404      	add	r4, r0
    71e0:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
    71e2:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    71e6:	d300      	bcc.n	71ea <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    71e8:	4c06      	ldr	r4, [pc, #24]	; (7204 <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    71ea:	2000      	movs	r0, #0
    71ec:	9001      	str	r0, [sp, #4]
    71ee:	4907      	ldr	r1, [pc, #28]	; (720c <sys_clock_set_timeout+0x64>)
    71f0:	9100      	str	r1, [sp, #0]
    71f2:	1912      	adds	r2, r2, r4
    71f4:	f143 0300 	adc.w	r3, r3, #0
    71f8:	f006 ff53 	bl	e0a2 <compare_set>
}
    71fc:	b002      	add	sp, #8
    71fe:	bd10      	pop	{r4, pc}
    7200:	007ffffe 	.word	0x007ffffe
    7204:	007fffff 	.word	0x007fffff
    7208:	200007f8 	.word	0x200007f8
    720c:	00006f05 	.word	0x00006f05

00007210 <sys_clock_elapsed>:
{
    7210:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    7212:	f7ff feb1 	bl	6f78 <z_nrf_rtc_timer_read>
    7216:	4b02      	ldr	r3, [pc, #8]	; (7220 <sys_clock_elapsed+0x10>)
    7218:	681b      	ldr	r3, [r3, #0]
}
    721a:	1ac0      	subs	r0, r0, r3
    721c:	bd08      	pop	{r3, pc}
    721e:	bf00      	nop
    7220:	200007f8 	.word	0x200007f8

00007224 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    7224:	b508      	push	{r3, lr}
	z_impl_log_panic();
    7226:	f7fa fbff 	bl	1a28 <z_impl_log_panic>
    722a:	4b09      	ldr	r3, [pc, #36]	; (7250 <k_sys_fatal_error_handler+0x2c>)
    722c:	4a09      	ldr	r2, [pc, #36]	; (7254 <k_sys_fatal_error_handler+0x30>)
    722e:	1a9b      	subs	r3, r3, r2
    7230:	08db      	lsrs	r3, r3, #3
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    7232:	f04f 0100 	mov.w	r1, #0
    7236:	2201      	movs	r2, #1
    7238:	f362 0102 	bfi	r1, r2, #0, #3
    723c:	f36f 01c5 	bfc	r1, #3, #3
    7240:	f363 118f 	bfi	r1, r3, #6, #10
    7244:	4804      	ldr	r0, [pc, #16]	; (7258 <k_sys_fatal_error_handler+0x34>)
    7246:	f7fa fbbf 	bl	19c8 <log_0>
		sys_arch_reboot(0);
    724a:	2000      	movs	r0, #0
    724c:	f7fd fa9a 	bl	4784 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    7250:	0000ef0c 	.word	0x0000ef0c
    7254:	0000eefc 	.word	0x0000eefc
    7258:	00010008 	.word	0x00010008

0000725c <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    725c:	4b08      	ldr	r3, [pc, #32]	; (7280 <nrf53_errata_42+0x24>)
    725e:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    7260:	3304      	adds	r3, #4
    7262:	681b      	ldr	r3, [r3, #0]
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    7264:	2a07      	cmp	r2, #7
    7266:	d001      	beq.n	726c <nrf53_errata_42+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    7268:	2000      	movs	r0, #0
    726a:	4770      	bx	lr
                    switch(var2)
    726c:	3b02      	subs	r3, #2
    726e:	2b00      	cmp	r3, #0
    7270:	d804      	bhi.n	727c <nrf53_errata_42+0x20>
    7272:	e8df f003 	tbb	[pc, r3]
    7276:	01          	.byte	0x01
    7277:	00          	.byte	0x00
                if (var1 == 0x07)
    7278:	2001      	movs	r0, #1
    727a:	4770      	bx	lr
                            return false;
    727c:	2000      	movs	r0, #0
    #endif
}
    727e:	4770      	bx	lr
    7280:	00ff0130 	.word	0x00ff0130

00007284 <nrf53_errata_46>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    7284:	4b0a      	ldr	r3, [pc, #40]	; (72b0 <nrf53_errata_46+0x2c>)
    7286:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    7288:	3304      	adds	r3, #4
    728a:	681b      	ldr	r3, [r3, #0]
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    728c:	2a07      	cmp	r2, #7
    728e:	d001      	beq.n	7294 <nrf53_errata_46+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    7290:	2000      	movs	r0, #0
    7292:	4770      	bx	lr
                    switch(var2)
    7294:	2b04      	cmp	r3, #4
    7296:	d007      	beq.n	72a8 <nrf53_errata_46+0x24>
    7298:	d808      	bhi.n	72ac <nrf53_errata_46+0x28>
    729a:	3b02      	subs	r3, #2
    729c:	2b01      	cmp	r3, #1
    729e:	d801      	bhi.n	72a4 <nrf53_errata_46+0x20>
    72a0:	2001      	movs	r0, #1
    #endif
}
    72a2:	4770      	bx	lr
                            return false;
    72a4:	2000      	movs	r0, #0
    72a6:	4770      	bx	lr
                            return false;
    72a8:	2000      	movs	r0, #0
    72aa:	4770      	bx	lr
                            return false;
    72ac:	2000      	movs	r0, #0
    72ae:	4770      	bx	lr
    72b0:	00ff0130 	.word	0x00ff0130

000072b4 <nrf53_errata_49>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    72b4:	4b08      	ldr	r3, [pc, #32]	; (72d8 <nrf53_errata_49+0x24>)
    72b6:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    72b8:	3304      	adds	r3, #4
    72ba:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    72bc:	2a07      	cmp	r2, #7
    72be:	d001      	beq.n	72c4 <nrf53_errata_49+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    72c0:	2000      	movs	r0, #0
    72c2:	4770      	bx	lr
                    switch(var2)
    72c4:	3b02      	subs	r3, #2
    72c6:	2b00      	cmp	r3, #0
    72c8:	d804      	bhi.n	72d4 <nrf53_errata_49+0x20>
    72ca:	e8df f003 	tbb	[pc, r3]
    72ce:	01          	.byte	0x01
    72cf:	00          	.byte	0x00
                if (var1 == 0x07)
    72d0:	2001      	movs	r0, #1
    72d2:	4770      	bx	lr
                            return false;
    72d4:	2000      	movs	r0, #0
    #endif
}
    72d6:	4770      	bx	lr
    72d8:	00ff0130 	.word	0x00ff0130

000072dc <nrf53_errata_55>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    72dc:	4b04      	ldr	r3, [pc, #16]	; (72f0 <nrf53_errata_55+0x14>)
    72de:	681b      	ldr	r3, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    72e0:	4a04      	ldr	r2, [pc, #16]	; (72f4 <nrf53_errata_55+0x18>)
    72e2:	6812      	ldr	r2, [r2, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    72e4:	2b07      	cmp	r3, #7
    72e6:	d001      	beq.n	72ec <nrf53_errata_55+0x10>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    72e8:	2000      	movs	r0, #0
    72ea:	4770      	bx	lr
                            return true;
    72ec:	2001      	movs	r0, #1
    #endif
}
    72ee:	4770      	bx	lr
    72f0:	00ff0130 	.word	0x00ff0130
    72f4:	00ff0134 	.word	0x00ff0134

000072f8 <nrf53_errata_64>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    72f8:	4b08      	ldr	r3, [pc, #32]	; (731c <nrf53_errata_64+0x24>)
    72fa:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    72fc:	3304      	adds	r3, #4
    72fe:	681b      	ldr	r3, [r3, #0]
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    7300:	2a07      	cmp	r2, #7
    7302:	d001      	beq.n	7308 <nrf53_errata_64+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    7304:	2000      	movs	r0, #0
    7306:	4770      	bx	lr
                    switch(var2)
    7308:	3b02      	subs	r3, #2
    730a:	2b00      	cmp	r3, #0
    730c:	d804      	bhi.n	7318 <nrf53_errata_64+0x20>
    730e:	e8df f003 	tbb	[pc, r3]
    7312:	01          	.byte	0x01
    7313:	00          	.byte	0x00
                if (var1 == 0x07)
    7314:	2001      	movs	r0, #1
    7316:	4770      	bx	lr
                            return false;
    7318:	2000      	movs	r0, #0
    #endif
}
    731a:	4770      	bx	lr
    731c:	00ff0130 	.word	0x00ff0130

00007320 <nrf53_errata_69>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    7320:	4b08      	ldr	r3, [pc, #32]	; (7344 <nrf53_errata_69+0x24>)
    7322:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    7324:	3304      	adds	r3, #4
    7326:	681b      	ldr	r3, [r3, #0]
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    7328:	2a07      	cmp	r2, #7
    732a:	d001      	beq.n	7330 <nrf53_errata_69+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    732c:	2000      	movs	r0, #0
    732e:	4770      	bx	lr
                    switch(var2)
    7330:	3b02      	subs	r3, #2
    7332:	2b00      	cmp	r3, #0
    7334:	d804      	bhi.n	7340 <nrf53_errata_69+0x20>
    7336:	e8df f003 	tbb	[pc, r3]
    733a:	01          	.byte	0x01
    733b:	00          	.byte	0x00
                if (var1 == 0x07)
    733c:	2001      	movs	r0, #1
    733e:	4770      	bx	lr
                            return false;
    7340:	2000      	movs	r0, #0
    #endif
}
    7342:	4770      	bx	lr
    7344:	00ff0130 	.word	0x00ff0130

00007348 <nrf53_errata_97>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    7348:	4b08      	ldr	r3, [pc, #32]	; (736c <nrf53_errata_97+0x24>)
    734a:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    734c:	3304      	adds	r3, #4
    734e:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    7350:	2a07      	cmp	r2, #7
    7352:	d001      	beq.n	7358 <nrf53_errata_97+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    7354:	2000      	movs	r0, #0
    7356:	4770      	bx	lr
                    switch(var2)
    7358:	3b02      	subs	r3, #2
    735a:	2b00      	cmp	r3, #0
    735c:	d804      	bhi.n	7368 <nrf53_errata_97+0x20>
    735e:	e8df f003 	tbb	[pc, r3]
    7362:	01          	.byte	0x01
    7363:	00          	.byte	0x00
                if (var1 == 0x07)
    7364:	2001      	movs	r0, #1
    7366:	4770      	bx	lr
                            return false;
    7368:	2000      	movs	r0, #0
    #endif
}
    736a:	4770      	bx	lr
    736c:	00ff0130 	.word	0x00ff0130

00007370 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    7370:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7374:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    7378:	f002 0203 	and.w	r2, r2, #3
    737c:	4b02      	ldr	r3, [pc, #8]	; (7388 <SystemCoreClockUpdate+0x18>)
    737e:	40d3      	lsrs	r3, r2
    7380:	4a02      	ldr	r2, [pc, #8]	; (738c <SystemCoreClockUpdate+0x1c>)
    7382:	6013      	str	r3, [r2, #0]
#endif
}
    7384:	4770      	bx	lr
    7386:	bf00      	nop
    7388:	07a12000 	.word	0x07a12000
    738c:	20000250 	.word	0x20000250

00007390 <SystemInit>:

void SystemInit(void)
{
    7390:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    7392:	f7ff ffd9 	bl	7348 <nrf53_errata_97>
    7396:	b158      	cbz	r0, 73b0 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    7398:	4b3b      	ldr	r3, [pc, #236]	; (7488 <SystemInit+0xf8>)
    739a:	681b      	ldr	r3, [r3, #0]
    739c:	b943      	cbnz	r3, 73b0 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    739e:	4b3a      	ldr	r3, [pc, #232]	; (7488 <SystemInit+0xf8>)
    73a0:	220d      	movs	r2, #13
    73a2:	601a      	str	r2, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    73a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    73a8:	2201      	movs	r2, #1
    73aa:	601a      	str	r2, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    73ac:	2200      	movs	r2, #0
    73ae:	601a      	str	r2, [r3, #0]
{
    73b0:	2200      	movs	r2, #0
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    73b2:	2a1f      	cmp	r2, #31
    73b4:	d815      	bhi.n	73e2 <SystemInit+0x52>
    73b6:	f102 0360 	add.w	r3, r2, #96	; 0x60
    73ba:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    73be:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    73c2:	f1b3 3fff 	cmp.w	r3, #4294967295
    73c6:	d00c      	beq.n	73e2 <SystemInit+0x52>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    73c8:	f102 0360 	add.w	r3, r2, #96	; 0x60
    73cc:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    73d0:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    73d4:	00db      	lsls	r3, r3, #3
    73d6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    73da:	685b      	ldr	r3, [r3, #4]
    73dc:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    73de:	3201      	adds	r2, #1
    73e0:	e7e7      	b.n	73b2 <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    73e2:	f7ff ff89 	bl	72f8 <nrf53_errata_64>
    73e6:	b128      	cbz	r0, 73f4 <SystemInit+0x64>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    73e8:	4b28      	ldr	r3, [pc, #160]	; (748c <SystemInit+0xfc>)
    73ea:	2229      	movs	r2, #41	; 0x29
    73ec:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    73ee:	3330      	adds	r3, #48	; 0x30
    73f0:	2203      	movs	r2, #3
    73f2:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    73f4:	f7ff ff32 	bl	725c <nrf53_errata_42>
    73f8:	b138      	cbz	r0, 740a <SystemInit+0x7a>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    73fa:	4b25      	ldr	r3, [pc, #148]	; (7490 <SystemInit+0x100>)
    73fc:	4a25      	ldr	r2, [pc, #148]	; (7494 <SystemInit+0x104>)
    73fe:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    7400:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7404:	2201      	movs	r2, #1
    7406:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    740a:	f7ff ff3b 	bl	7284 <nrf53_errata_46>
    740e:	b110      	cbz	r0, 7416 <SystemInit+0x86>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    7410:	4b21      	ldr	r3, [pc, #132]	; (7498 <SystemInit+0x108>)
    7412:	2200      	movs	r2, #0
    7414:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    7416:	f7ff ff4d 	bl	72b4 <nrf53_errata_49>
    741a:	b168      	cbz	r0, 7438 <SystemInit+0xa8>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    741c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7420:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    7424:	f013 0f01 	tst.w	r3, #1
    7428:	d006      	beq.n	7438 <SystemInit+0xa8>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    742a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    742e:	2200      	movs	r2, #0
    7430:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    7434:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
    7438:	f7ff ff50 	bl	72dc <nrf53_errata_55>
    743c:	b160      	cbz	r0, 7458 <SystemInit+0xc8>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    743e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7442:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    7446:	f013 0f01 	tst.w	r3, #1
    744a:	d005      	beq.n	7458 <SystemInit+0xc8>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    744c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7450:	f06f 0201 	mvn.w	r2, #1
    7454:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    7458:	f7ff ff62 	bl	7320 <nrf53_errata_69>
    745c:	b110      	cbz	r0, 7464 <SystemInit+0xd4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    745e:	4b0b      	ldr	r3, [pc, #44]	; (748c <SystemInit+0xfc>)
    7460:	2265      	movs	r2, #101	; 0x65
    7462:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    7464:	4a0d      	ldr	r2, [pc, #52]	; (749c <SystemInit+0x10c>)
    7466:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    746a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    746e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    7472:	4a0b      	ldr	r2, [pc, #44]	; (74a0 <SystemInit+0x110>)
    7474:	6811      	ldr	r1, [r2, #0]
    7476:	4b0b      	ldr	r3, [pc, #44]	; (74a4 <SystemInit+0x114>)
    7478:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    747c:	69d2      	ldr	r2, [r2, #28]
    747e:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
    7482:	f7ff ff75 	bl	7370 <SystemCoreClockUpdate>
}
    7486:	bd08      	pop	{r3, pc}
    7488:	50004a20 	.word	0x50004a20
    748c:	5000470c 	.word	0x5000470c
    7490:	50039530 	.word	0x50039530
    7494:	beef0044 	.word	0xbeef0044
    7498:	5003254c 	.word	0x5003254c
    749c:	e000ed00 	.word	0xe000ed00
    74a0:	00ff8000 	.word	0x00ff8000
    74a4:	50006000 	.word	0x50006000

000074a8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    74a8:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    74aa:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    74ac:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
    74b0:	f1d3 031f 	rsbs	r3, r3, #31
    74b4:	d411      	bmi.n	74da <nrfx_flag32_alloc+0x32>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    74b6:	2201      	movs	r2, #1
    74b8:	409a      	lsls	r2, r3
    74ba:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    74be:	e8d0 5fef 	ldaex	r5, [r0]
    74c2:	42a5      	cmp	r5, r4
    74c4:	d104      	bne.n	74d0 <nrfx_flag32_alloc+0x28>
    74c6:	e8c0 2fec 	stlex	ip, r2, [r0]
    74ca:	f1bc 0f00 	cmp.w	ip, #0
    74ce:	d1f6      	bne.n	74be <nrfx_flag32_alloc+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    74d0:	d1eb      	bne.n	74aa <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    74d2:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
    74d4:	4802      	ldr	r0, [pc, #8]	; (74e0 <nrfx_flag32_alloc+0x38>)
}
    74d6:	bc30      	pop	{r4, r5}
    74d8:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
    74da:	4802      	ldr	r0, [pc, #8]	; (74e4 <nrfx_flag32_alloc+0x3c>)
    74dc:	e7fb      	b.n	74d6 <nrfx_flag32_alloc+0x2e>
    74de:	bf00      	nop
    74e0:	0bad0000 	.word	0x0bad0000
    74e4:	0bad0002 	.word	0x0bad0002

000074e8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    74e8:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    74ea:	6803      	ldr	r3, [r0, #0]
    74ec:	460c      	mov	r4, r1
    74ee:	fa23 f101 	lsr.w	r1, r3, r1
    74f2:	f011 0f01 	tst.w	r1, #1
    74f6:	d110      	bne.n	751a <nrfx_flag32_free+0x32>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    74f8:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    74fa:	2301      	movs	r3, #1
    74fc:	40a3      	lsls	r3, r4
    74fe:	4313      	orrs	r3, r2
    7500:	e8d0 1fef 	ldaex	r1, [r0]
    7504:	4291      	cmp	r1, r2
    7506:	d104      	bne.n	7512 <nrfx_flag32_free+0x2a>
    7508:	e8c0 3fec 	stlex	ip, r3, [r0]
    750c:	f1bc 0f00 	cmp.w	ip, #0
    7510:	d1f6      	bne.n	7500 <nrfx_flag32_free+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    7512:	d1f1      	bne.n	74f8 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    7514:	4802      	ldr	r0, [pc, #8]	; (7520 <nrfx_flag32_free+0x38>)
}
    7516:	bc10      	pop	{r4}
    7518:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
    751a:	4802      	ldr	r0, [pc, #8]	; (7524 <nrfx_flag32_free+0x3c>)
    751c:	e7fb      	b.n	7516 <nrfx_flag32_free+0x2e>
    751e:	bf00      	nop
    7520:	0bad0000 	.word	0x0bad0000
    7524:	0bad0004 	.word	0x0bad0004

00007528 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    7528:	4b05      	ldr	r3, [pc, #20]	; (7540 <nrfx_clock_init+0x18>)
    752a:	791b      	ldrb	r3, [r3, #4]
    752c:	b92b      	cbnz	r3, 753a <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    752e:	4b04      	ldr	r3, [pc, #16]	; (7540 <nrfx_clock_init+0x18>)
    7530:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    7532:	2201      	movs	r2, #1
    7534:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    7536:	4803      	ldr	r0, [pc, #12]	; (7544 <nrfx_clock_init+0x1c>)
    7538:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    753a:	4803      	ldr	r0, [pc, #12]	; (7548 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    753c:	4770      	bx	lr
    753e:	bf00      	nop
    7540:	20001c68 	.word	0x20001c68
    7544:	0bad0000 	.word	0x0bad0000
    7548:	0bad000c 	.word	0x0bad000c

0000754c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    754c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    754e:	2005      	movs	r0, #5
    7550:	f7fc fc06 	bl	3d60 <arch_irq_is_enabled>
    7554:	b148      	cbz	r0, 756a <nrfx_clock_enable+0x1e>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    7556:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    755a:	2301      	movs	r3, #1
    755c:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    7560:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    7564:	4a03      	ldr	r2, [pc, #12]	; (7574 <nrfx_clock_enable+0x28>)
    7566:	7013      	strb	r3, [r2, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    7568:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    756a:	2005      	movs	r0, #5
    756c:	f7fc fbd4 	bl	3d18 <arch_irq_enable>
    7570:	e7f1      	b.n	7556 <nrfx_clock_enable+0xa>
    7572:	bf00      	nop
    7574:	20001f20 	.word	0x20001f20

00007578 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    7578:	2803      	cmp	r0, #3
    757a:	d84e      	bhi.n	761a <nrfx_clock_start+0xa2>
    757c:	e8df f000 	tbb	[pc, r0]
    7580:	40322702 	.word	0x40322702
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7584:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    7588:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    758c:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7590:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    7594:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    7598:	d111      	bne.n	75be <nrfx_clock_start+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
    759a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    759e:	2201      	movs	r2, #1
    75a0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    75a4:	4b1d      	ldr	r3, [pc, #116]	; (761c <nrfx_clock_start+0xa4>)
    75a6:	2200      	movs	r2, #0
    75a8:	601a      	str	r2, [r3, #0]
    75aa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    75ac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    75b0:	2202      	movs	r2, #2
    75b2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    75b6:	3308      	adds	r3, #8
    75b8:	2201      	movs	r2, #1
    75ba:	601a      	str	r2, [r3, #0]
}
    75bc:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    75be:	2b02      	cmp	r3, #2
    75c0:	d1eb      	bne.n	759a <nrfx_clock_start+0x22>
    p_reg->LFCLKSRC = (uint32_t)(source);
    75c2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    75c6:	2202      	movs	r2, #2
    75c8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    75cc:	e7ea      	b.n	75a4 <nrfx_clock_start+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    75ce:	4b14      	ldr	r3, [pc, #80]	; (7620 <nrfx_clock_start+0xa8>)
    75d0:	2200      	movs	r2, #0
    75d2:	601a      	str	r2, [r3, #0]
    75d4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    75d6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    75da:	2201      	movs	r2, #1
    75dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    75e0:	601a      	str	r2, [r3, #0]
}
    75e2:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    75e4:	4b0f      	ldr	r3, [pc, #60]	; (7624 <nrfx_clock_start+0xac>)
    75e6:	2200      	movs	r2, #0
    75e8:	601a      	str	r2, [r3, #0]
    75ea:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    75ec:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    75f0:	f44f 7200 	mov.w	r2, #512	; 0x200
    75f4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    75f8:	3320      	adds	r3, #32
    75fa:	2201      	movs	r2, #1
    75fc:	601a      	str	r2, [r3, #0]
}
    75fe:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7600:	4b09      	ldr	r3, [pc, #36]	; (7628 <nrfx_clock_start+0xb0>)
    7602:	2200      	movs	r2, #0
    7604:	601a      	str	r2, [r3, #0]
    7606:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    7608:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    760c:	f44f 7280 	mov.w	r2, #256	; 0x100
    7610:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7614:	3318      	adds	r3, #24
    7616:	2201      	movs	r2, #1
    7618:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    761a:	4770      	bx	lr
    761c:	50005104 	.word	0x50005104
    7620:	50005100 	.word	0x50005100
    7624:	50005124 	.word	0x50005124
    7628:	50005120 	.word	0x50005120

0000762c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    762c:	b570      	push	{r4, r5, r6, lr}
    762e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    7630:	2803      	cmp	r0, #3
    7632:	f200 80cd 	bhi.w	77d0 <nrfx_clock_stop+0x1a4>
    7636:	e8df f000 	tbb	[pc, r0]
    763a:	1402      	.short	0x1402
    763c:	3021      	.short	0x3021
    p_reg->INTENCLR = mask;
    763e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7642:	2202      	movs	r2, #2
    7644:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7648:	f503 7382 	add.w	r3, r3, #260	; 0x104
    764c:	2200      	movs	r2, #0
    764e:	601a      	str	r2, [r3, #0]
    7650:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7652:	4b60      	ldr	r3, [pc, #384]	; (77d4 <nrfx_clock_stop+0x1a8>)
    7654:	2201      	movs	r2, #1
    7656:	601a      	str	r2, [r3, #0]
            NRFX_ASSERT(0);
            return;
    }

    bool stopped;
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    7658:	2c01      	cmp	r4, #1
    765a:	d02d      	beq.n	76b8 <nrfx_clock_stop+0x8c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    765c:	f242 7510 	movw	r5, #10000	; 0x2710
    7660:	e0a1      	b.n	77a6 <nrfx_clock_stop+0x17a>
    p_reg->INTENCLR = mask;
    7662:	2301      	movs	r3, #1
    7664:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    7668:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    766c:	f502 7280 	add.w	r2, r2, #256	; 0x100
    7670:	2100      	movs	r1, #0
    7672:	6011      	str	r1, [r2, #0]
    7674:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7676:	4a58      	ldr	r2, [pc, #352]	; (77d8 <nrfx_clock_stop+0x1ac>)
    7678:	6013      	str	r3, [r2, #0]
}
    767a:	e7ed      	b.n	7658 <nrfx_clock_stop+0x2c>
    p_reg->INTENCLR = mask;
    767c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7680:	f44f 7200 	mov.w	r2, #512	; 0x200
    7684:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7688:	f503 7392 	add.w	r3, r3, #292	; 0x124
    768c:	2200      	movs	r2, #0
    768e:	601a      	str	r2, [r3, #0]
    7690:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7692:	4b52      	ldr	r3, [pc, #328]	; (77dc <nrfx_clock_stop+0x1b0>)
    7694:	2201      	movs	r2, #1
    7696:	601a      	str	r2, [r3, #0]
}
    7698:	e7de      	b.n	7658 <nrfx_clock_stop+0x2c>
    p_reg->INTENCLR = mask;
    769a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    769e:	f44f 7280 	mov.w	r2, #256	; 0x100
    76a2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    76a6:	f503 7390 	add.w	r3, r3, #288	; 0x120
    76aa:	2200      	movs	r2, #0
    76ac:	601a      	str	r2, [r3, #0]
    76ae:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    76b0:	4b4b      	ldr	r3, [pc, #300]	; (77e0 <nrfx_clock_stop+0x1b4>)
    76b2:	2201      	movs	r2, #1
    76b4:	601a      	str	r2, [r3, #0]
}
    76b6:	e7cf      	b.n	7658 <nrfx_clock_stop+0x2c>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    76b8:	4626      	mov	r6, r4
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    76ba:	f242 7510 	movw	r5, #10000	; 0x2710
    76be:	e035      	b.n	772c <nrfx_clock_stop+0x100>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    76c0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    76c4:	f8d3 6418 	ldr.w	r6, [r3, #1048]	; 0x418
    76c8:	f006 0603 	and.w	r6, r6, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    76cc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    76d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    76d4:	d13a      	bne.n	774c <nrfx_clock_stop+0x120>
    return false;
    76d6:	2300      	movs	r3, #0
    76d8:	e01f      	b.n	771a <nrfx_clock_stop+0xee>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    76da:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    76de:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
    76e2:	f006 0601 	and.w	r6, r6, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    76e6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    76ea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    76ee:	d12f      	bne.n	7750 <nrfx_clock_stop+0x124>
    return false;
    76f0:	2300      	movs	r3, #0
    76f2:	e012      	b.n	771a <nrfx_clock_stop+0xee>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    76f4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    76f8:	f8d3 645c 	ldr.w	r6, [r3, #1116]	; 0x45c
    76fc:	f006 0601 	and.w	r6, r6, #1
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    7700:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
    7704:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7708:	d124      	bne.n	7754 <nrfx_clock_stop+0x128>
    return false;
    770a:	2300      	movs	r3, #0
    770c:	e005      	b.n	771a <nrfx_clock_stop+0xee>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    770e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7712:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
    7716:	f3c3 4300 	ubfx	r3, r3, #16, #1
    771a:	2b00      	cmp	r3, #0
    771c:	d058      	beq.n	77d0 <nrfx_clock_stop+0x1a4>
    771e:	2e01      	cmp	r6, #1
    7720:	d156      	bne.n	77d0 <nrfx_clock_stop+0x1a4>
    7722:	2001      	movs	r0, #1
    7724:	f006 fceb 	bl	e0fe <nrfx_busy_wait>
    7728:	3d01      	subs	r5, #1
    772a:	d051      	beq.n	77d0 <nrfx_clock_stop+0x1a4>
    switch (domain)
    772c:	2c03      	cmp	r4, #3
    772e:	d80b      	bhi.n	7748 <nrfx_clock_stop+0x11c>
    7730:	a301      	add	r3, pc, #4	; (adr r3, 7738 <nrfx_clock_stop+0x10c>)
    7732:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    7736:	bf00      	nop
    7738:	000076c1 	.word	0x000076c1
    773c:	000076db 	.word	0x000076db
    7740:	000076f5 	.word	0x000076f5
    7744:	0000770f 	.word	0x0000770f
    7748:	2300      	movs	r3, #0
    774a:	e7e6      	b.n	771a <nrfx_clock_stop+0xee>
                return true;
    774c:	2301      	movs	r3, #1
    774e:	e7e4      	b.n	771a <nrfx_clock_stop+0xee>
                return true;
    7750:	2301      	movs	r3, #1
    7752:	e7e2      	b.n	771a <nrfx_clock_stop+0xee>
                return true;
    7754:	2301      	movs	r3, #1
    7756:	e7e0      	b.n	771a <nrfx_clock_stop+0xee>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7758:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    775c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    7760:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7764:	d12e      	bne.n	77c4 <nrfx_clock_stop+0x198>
    return false;
    7766:	2300      	movs	r3, #0
    7768:	e017      	b.n	779a <nrfx_clock_stop+0x16e>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    776a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    776e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    7772:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7776:	d127      	bne.n	77c8 <nrfx_clock_stop+0x19c>
    return false;
    7778:	2300      	movs	r3, #0
    777a:	e00e      	b.n	779a <nrfx_clock_stop+0x16e>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    777c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7780:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
    7784:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7788:	d120      	bne.n	77cc <nrfx_clock_stop+0x1a0>
    return false;
    778a:	2300      	movs	r3, #0
    778c:	e005      	b.n	779a <nrfx_clock_stop+0x16e>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    778e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7792:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
    7796:	f3c3 4300 	ubfx	r3, r3, #16, #1
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    779a:	b1cb      	cbz	r3, 77d0 <nrfx_clock_stop+0x1a4>
    779c:	2001      	movs	r0, #1
    779e:	f006 fcae 	bl	e0fe <nrfx_busy_wait>
    77a2:	3d01      	subs	r5, #1
    77a4:	d014      	beq.n	77d0 <nrfx_clock_stop+0x1a4>
    switch (domain)
    77a6:	2c03      	cmp	r4, #3
    77a8:	d80a      	bhi.n	77c0 <nrfx_clock_stop+0x194>
    77aa:	a301      	add	r3, pc, #4	; (adr r3, 77b0 <nrfx_clock_stop+0x184>)
    77ac:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    77b0:	00007759 	.word	0x00007759
    77b4:	0000776b 	.word	0x0000776b
    77b8:	0000777d 	.word	0x0000777d
    77bc:	0000778f 	.word	0x0000778f
    77c0:	2300      	movs	r3, #0
    77c2:	e7ea      	b.n	779a <nrfx_clock_stop+0x16e>
                return true;
    77c4:	2301      	movs	r3, #1
    77c6:	e7e8      	b.n	779a <nrfx_clock_stop+0x16e>
                return true;
    77c8:	2301      	movs	r3, #1
    77ca:	e7e6      	b.n	779a <nrfx_clock_stop+0x16e>
                return true;
    77cc:	2301      	movs	r3, #1
    77ce:	e7e4      	b.n	779a <nrfx_clock_stop+0x16e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    77d0:	bd70      	pop	{r4, r5, r6, pc}
    77d2:	bf00      	nop
    77d4:	5000500c 	.word	0x5000500c
    77d8:	50005004 	.word	0x50005004
    77dc:	50005024 	.word	0x50005024
    77e0:	5000501c 	.word	0x5000501c

000077e4 <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    77e4:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    77e6:	4b2a      	ldr	r3, [pc, #168]	; (7890 <nrfx_clock_irq_handler+0xac>)
    77e8:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    77ea:	b15b      	cbz	r3, 7804 <nrfx_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    77ec:	4b28      	ldr	r3, [pc, #160]	; (7890 <nrfx_clock_irq_handler+0xac>)
    77ee:	2000      	movs	r0, #0
    77f0:	6018      	str	r0, [r3, #0]
    77f2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    77f4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    77f8:	2201      	movs	r2, #1
    77fa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    77fe:	4b25      	ldr	r3, [pc, #148]	; (7894 <nrfx_clock_irq_handler+0xb0>)
    7800:	681b      	ldr	r3, [r3, #0]
    7802:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7804:	4b24      	ldr	r3, [pc, #144]	; (7898 <nrfx_clock_irq_handler+0xb4>)
    7806:	681b      	ldr	r3, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    7808:	b1b3      	cbz	r3, 7838 <nrfx_clock_irq_handler+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    780a:	4b23      	ldr	r3, [pc, #140]	; (7898 <nrfx_clock_irq_handler+0xb4>)
    780c:	2200      	movs	r2, #0
    780e:	601a      	str	r2, [r3, #0]
    7810:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7812:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    7816:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    781a:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    781e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    7822:	2b01      	cmp	r3, #1
    7824:	d02b      	beq.n	787e <nrfx_clock_irq_handler+0x9a>
    p_reg->INTENCLR = mask;
    7826:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    782a:	2202      	movs	r2, #2
    782c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    7830:	4b18      	ldr	r3, [pc, #96]	; (7894 <nrfx_clock_irq_handler+0xb0>)
    7832:	681b      	ldr	r3, [r3, #0]
    7834:	2001      	movs	r0, #1
    7836:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7838:	4b18      	ldr	r3, [pc, #96]	; (789c <nrfx_clock_irq_handler+0xb8>)
    783a:	681b      	ldr	r3, [r3, #0]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    783c:	b16b      	cbz	r3, 785a <nrfx_clock_irq_handler+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    783e:	4b17      	ldr	r3, [pc, #92]	; (789c <nrfx_clock_irq_handler+0xb8>)
    7840:	2200      	movs	r2, #0
    7842:	601a      	str	r2, [r3, #0]
    7844:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    7846:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    784a:	f44f 7280 	mov.w	r2, #256	; 0x100
    784e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    7852:	4b10      	ldr	r3, [pc, #64]	; (7894 <nrfx_clock_irq_handler+0xb0>)
    7854:	681b      	ldr	r3, [r3, #0]
    7856:	2004      	movs	r0, #4
    7858:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    785a:	4b11      	ldr	r3, [pc, #68]	; (78a0 <nrfx_clock_irq_handler+0xbc>)
    785c:	681b      	ldr	r3, [r3, #0]
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    785e:	b16b      	cbz	r3, 787c <nrfx_clock_irq_handler+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7860:	4b0f      	ldr	r3, [pc, #60]	; (78a0 <nrfx_clock_irq_handler+0xbc>)
    7862:	2200      	movs	r2, #0
    7864:	601a      	str	r2, [r3, #0]
    7866:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    7868:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    786c:	f44f 7200 	mov.w	r2, #512	; 0x200
    7870:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    7874:	4b07      	ldr	r3, [pc, #28]	; (7894 <nrfx_clock_irq_handler+0xb0>)
    7876:	681b      	ldr	r3, [r3, #0]
    7878:	2005      	movs	r0, #5
    787a:	4798      	blx	r3
    }
#endif
}
    787c:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    787e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7882:	2202      	movs	r2, #2
    7884:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7888:	3308      	adds	r3, #8
    788a:	2201      	movs	r2, #1
    788c:	601a      	str	r2, [r3, #0]
}
    788e:	e7d3      	b.n	7838 <nrfx_clock_irq_handler+0x54>
    7890:	50005100 	.word	0x50005100
    7894:	20001c68 	.word	0x20001c68
    7898:	50005104 	.word	0x50005104
    789c:	50005120 	.word	0x50005120
    78a0:	50005124 	.word	0x50005124

000078a4 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    78a4:	b508      	push	{r3, lr}
    78a6:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    78a8:	4801      	ldr	r0, [pc, #4]	; (78b0 <nrfx_dppi_channel_alloc+0xc>)
    78aa:	f7ff fdfd 	bl	74a8 <nrfx_flag32_alloc>
}
    78ae:	bd08      	pop	{r3, pc}
    78b0:	20000254 	.word	0x20000254

000078b4 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    78b4:	3008      	adds	r0, #8
    78b6:	4b03      	ldr	r3, [pc, #12]	; (78c4 <pin_in_use+0x10>)
    78b8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    78bc:	f000 0001 	and.w	r0, r0, #1
    78c0:	4770      	bx	lr
    78c2:	bf00      	nop
    78c4:	20000258 	.word	0x20000258

000078c8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    78c8:	3008      	adds	r0, #8
    78ca:	4b03      	ldr	r3, [pc, #12]	; (78d8 <pin_in_use_by_te+0x10>)
    78cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    78d0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    78d4:	4770      	bx	lr
    78d6:	bf00      	nop
    78d8:	20000258 	.word	0x20000258

000078dc <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    78dc:	3008      	adds	r0, #8
    78de:	4b04      	ldr	r3, [pc, #16]	; (78f0 <pin_has_trigger+0x14>)
    78e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    78e4:	f010 001c 	ands.w	r0, r0, #28
    78e8:	bf18      	it	ne
    78ea:	2001      	movne	r0, #1
    78ec:	4770      	bx	lr
    78ee:	bf00      	nop
    78f0:	20000258 	.word	0x20000258

000078f4 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    78f4:	3008      	adds	r0, #8
    78f6:	4b03      	ldr	r3, [pc, #12]	; (7904 <pin_is_output+0x10>)
    78f8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    78fc:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7900:	4770      	bx	lr
    7902:	bf00      	nop
    7904:	20000258 	.word	0x20000258

00007908 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7908:	3008      	adds	r0, #8
    790a:	4b02      	ldr	r3, [pc, #8]	; (7914 <pin_te_get+0xc>)
    790c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7910:	0b40      	lsrs	r0, r0, #13
    7912:	4770      	bx	lr
    7914:	20000258 	.word	0x20000258

00007918 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    7918:	2200      	movs	r2, #0
    791a:	e004      	b.n	7926 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    791c:	f04f 33ff 	mov.w	r3, #4294967295
    7920:	4283      	cmp	r3, r0
    7922:	d00f      	beq.n	7944 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    7924:	3201      	adds	r2, #1
    7926:	2a2f      	cmp	r2, #47	; 0x2f
    7928:	d80a      	bhi.n	7940 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    792a:	f102 0308 	add.w	r3, r2, #8
    792e:	4906      	ldr	r1, [pc, #24]	; (7948 <handler_in_use+0x30>)
    7930:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7934:	f413 7f80 	tst.w	r3, #256	; 0x100
    7938:	d0f0      	beq.n	791c <handler_in_use+0x4>
    793a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    793e:	e7ef      	b.n	7920 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    7940:	2000      	movs	r0, #0
    7942:	4770      	bx	lr
            return true;
    7944:	2001      	movs	r0, #1
}
    7946:	4770      	bx	lr
    7948:	20000258 	.word	0x20000258

0000794c <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    794c:	2300      	movs	r3, #0
    794e:	b113      	cbz	r3, 7956 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    7950:	f04f 30ff 	mov.w	r0, #4294967295
}
    7954:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    7956:	4a07      	ldr	r2, [pc, #28]	; (7974 <find_handler+0x28>)
    7958:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    795c:	4282      	cmp	r2, r0
    795e:	d001      	beq.n	7964 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    7960:	3301      	adds	r3, #1
    7962:	e7f4      	b.n	794e <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    7964:	4a03      	ldr	r2, [pc, #12]	; (7974 <find_handler+0x28>)
    7966:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    796a:	6852      	ldr	r2, [r2, #4]
    796c:	428a      	cmp	r2, r1
    796e:	d1f7      	bne.n	7960 <find_handler+0x14>
            return i;
    7970:	4618      	mov	r0, r3
    7972:	4770      	bx	lr
    7974:	20000258 	.word	0x20000258

00007978 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7978:	3008      	adds	r0, #8
    797a:	4b06      	ldr	r3, [pc, #24]	; (7994 <channel_handler_get+0x1c>)
    797c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    7980:	f410 7f80 	tst.w	r0, #256	; 0x100
    7984:	d004      	beq.n	7990 <channel_handler_get+0x18>
    7986:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    798a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    798e:	4770      	bx	lr
        return NULL;
    7990:	2000      	movs	r0, #0
}
    7992:	4770      	bx	lr
    7994:	20000258 	.word	0x20000258

00007998 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    7998:	b570      	push	{r4, r5, r6, lr}
    799a:	4604      	mov	r4, r0
    799c:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    799e:	f7ff ffeb 	bl	7978 <channel_handler_get>

    if (handler)
    79a2:	b120      	cbz	r0, 79ae <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    79a4:	6806      	ldr	r6, [r0, #0]
    79a6:	6842      	ldr	r2, [r0, #4]
    79a8:	4629      	mov	r1, r5
    79aa:	4620      	mov	r0, r4
    79ac:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    79ae:	4b04      	ldr	r3, [pc, #16]	; (79c0 <call_handler+0x28>)
    79b0:	689b      	ldr	r3, [r3, #8]
    79b2:	b123      	cbz	r3, 79be <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    79b4:	4a02      	ldr	r2, [pc, #8]	; (79c0 <call_handler+0x28>)
    79b6:	68d2      	ldr	r2, [r2, #12]
    79b8:	4629      	mov	r1, r5
    79ba:	4620      	mov	r0, r4
    79bc:	4798      	blx	r3
    }
}
    79be:	bd70      	pop	{r4, r5, r6, pc}
    79c0:	20000258 	.word	0x20000258

000079c4 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    79c4:	b570      	push	{r4, r5, r6, lr}
    79c6:	4604      	mov	r4, r0
    79c8:	460d      	mov	r5, r1
    79ca:	4616      	mov	r6, r2
    if (is_level(trigger))
    79cc:	4608      	mov	r0, r1
    79ce:	f006 fbb2 	bl	e136 <is_level>
    79d2:	b9c0      	cbnz	r0, 7a06 <next_sense_cond_call_handler+0x42>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    79d4:	2e02      	cmp	r6, #2
    79d6:	d03a      	beq.n	7a4e <next_sense_cond_call_handler+0x8a>
    79d8:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
    79da:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    79de:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    79e0:	2901      	cmp	r1, #1
    79e2:	d036      	beq.n	7a52 <next_sense_cond_call_handler+0x8e>
        case 0: return NRF_P0;
    79e4:	4921      	ldr	r1, [pc, #132]	; (7a6c <next_sense_cond_call_handler+0xa8>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    79e6:	3280      	adds	r2, #128	; 0x80
    79e8:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    79ec:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    79f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    79f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        nrf_gpio_cfg_sense_set(pin, next_sense);

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    79f8:	2d03      	cmp	r5, #3
    79fa:	d02e      	beq.n	7a5a <next_sense_cond_call_handler+0x96>
    79fc:	2e02      	cmp	r6, #2
    79fe:	d02a      	beq.n	7a56 <next_sense_cond_call_handler+0x92>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7a00:	2e03      	cmp	r6, #3
    7a02:	d02f      	beq.n	7a64 <next_sense_cond_call_handler+0xa0>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    7a04:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    7a06:	4629      	mov	r1, r5
    7a08:	4620      	mov	r0, r4
    7a0a:	f7ff ffc5 	bl	7998 <call_handler>
    *p_pin = pin_number & 0x1F;
    7a0e:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    7a12:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7a14:	2c01      	cmp	r4, #1
    7a16:	d018      	beq.n	7a4a <next_sense_cond_call_handler+0x86>
        case 0: return NRF_P0;
    7a18:	4914      	ldr	r1, [pc, #80]	; (7a6c <next_sense_cond_call_handler+0xa8>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7a1a:	f103 0280 	add.w	r2, r3, #128	; 0x80
    7a1e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    7a22:	f3c2 4201 	ubfx	r2, r2, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    7a26:	4296      	cmp	r6, r2
    7a28:	d1ec      	bne.n	7a04 <next_sense_cond_call_handler+0x40>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7a2a:	3380      	adds	r3, #128	; 0x80
    7a2c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    7a30:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    7a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7a38:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    7a3c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7a40:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    7a44:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
}
    7a48:	e7dc      	b.n	7a04 <next_sense_cond_call_handler+0x40>
        case 1: return NRF_P1;
    7a4a:	4909      	ldr	r1, [pc, #36]	; (7a70 <next_sense_cond_call_handler+0xac>)
    7a4c:	e7e5      	b.n	7a1a <next_sense_cond_call_handler+0x56>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7a4e:	2003      	movs	r0, #3
    7a50:	e7c3      	b.n	79da <next_sense_cond_call_handler+0x16>
    7a52:	4907      	ldr	r1, [pc, #28]	; (7a70 <next_sense_cond_call_handler+0xac>)
    7a54:	e7c7      	b.n	79e6 <next_sense_cond_call_handler+0x22>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7a56:	2d01      	cmp	r5, #1
    7a58:	d1d2      	bne.n	7a00 <next_sense_cond_call_handler+0x3c>
            call_handler(pin, trigger);
    7a5a:	4629      	mov	r1, r5
    7a5c:	4620      	mov	r0, r4
    7a5e:	f7ff ff9b 	bl	7998 <call_handler>
}
    7a62:	e7cf      	b.n	7a04 <next_sense_cond_call_handler+0x40>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    7a64:	2d02      	cmp	r5, #2
    7a66:	d1cd      	bne.n	7a04 <next_sense_cond_call_handler+0x40>
    7a68:	e7f7      	b.n	7a5a <next_sense_cond_call_handler+0x96>
    7a6a:	bf00      	nop
    7a6c:	50842500 	.word	0x50842500
    7a70:	50842800 	.word	0x50842800

00007a74 <latch_pending_read_and_check>:

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
    7a74:	b410      	push	{r4}
    7a76:	b083      	sub	sp, #12
    7a78:	4604      	mov	r4, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    7a7a:	4b11      	ldr	r3, [pc, #68]	; (7ac0 <latch_pending_read_and_check+0x4c>)
    7a7c:	e893 0003 	ldmia.w	r3, {r0, r1}
    7a80:	ab02      	add	r3, sp, #8
    7a82:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    7a86:	4620      	mov	r0, r4
    7a88:	2300      	movs	r3, #0
    7a8a:	e009      	b.n	7aa0 <latch_pending_read_and_check+0x2c>
        *p_masks = gpio_regs[i]->LATCH;
    7a8c:	aa02      	add	r2, sp, #8
    7a8e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    7a92:	f852 2c08 	ldr.w	r2, [r2, #-8]
    7a96:	6a11      	ldr	r1, [r2, #32]
    7a98:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    7a9c:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
    7a9e:	3301      	adds	r3, #1
    7aa0:	2b01      	cmp	r3, #1
    7aa2:	d9f3      	bls.n	7a8c <latch_pending_read_and_check+0x18>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    7aa4:	2300      	movs	r3, #0
    7aa6:	2b01      	cmp	r3, #1
    7aa8:	d804      	bhi.n	7ab4 <latch_pending_read_and_check+0x40>
    {
        if (latch[port_idx])
    7aaa:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    7aae:	b92a      	cbnz	r2, 7abc <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    7ab0:	3301      	adds	r3, #1
    7ab2:	e7f8      	b.n	7aa6 <latch_pending_read_and_check+0x32>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
    7ab4:	2000      	movs	r0, #0
}
    7ab6:	b003      	add	sp, #12
    7ab8:	bc10      	pop	{r4}
    7aba:	4770      	bx	lr
            return true;
    7abc:	2001      	movs	r0, #1
    7abe:	e7fa      	b.n	7ab6 <latch_pending_read_and_check+0x42>
    7ac0:	0000eff8 	.word	0x0000eff8

00007ac4 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7ac4:	f100 0208 	add.w	r2, r0, #8
    7ac8:	4b0e      	ldr	r3, [pc, #56]	; (7b04 <release_handler+0x40>)
    7aca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    7ace:	f413 7f80 	tst.w	r3, #256	; 0x100
    7ad2:	d016      	beq.n	7b02 <release_handler+0x3e>
{
    7ad4:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7ad6:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    7ada:	4610      	mov	r0, r2
    7adc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    7ae0:	4a08      	ldr	r2, [pc, #32]	; (7b04 <release_handler+0x40>)
    7ae2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    7ae6:	4620      	mov	r0, r4
    7ae8:	f7ff ff16 	bl	7918 <handler_in_use>
    7aec:	b100      	cbz	r0, 7af0 <release_handler+0x2c>
}
    7aee:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    7af0:	4804      	ldr	r0, [pc, #16]	; (7b04 <release_handler+0x40>)
    7af2:	2300      	movs	r3, #0
    7af4:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    7af8:	4621      	mov	r1, r4
    7afa:	3074      	adds	r0, #116	; 0x74
    7afc:	f7ff fcf4 	bl	74e8 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    7b00:	e7f5      	b.n	7aee <release_handler+0x2a>
    7b02:	4770      	bx	lr
    7b04:	20000258 	.word	0x20000258

00007b08 <pin_handler_trigger_uninit>:
{
    7b08:	b510      	push	{r4, lr}
    7b0a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    7b0c:	f7ff fedc 	bl	78c8 <pin_in_use_by_te>
    7b10:	b150      	cbz	r0, 7b28 <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    7b12:	4620      	mov	r0, r4
    7b14:	f7ff fef8 	bl	7908 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    7b18:	4b08      	ldr	r3, [pc, #32]	; (7b3c <pin_handler_trigger_uninit+0x34>)
    7b1a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    7b1e:	2200      	movs	r2, #0
    7b20:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    7b24:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    7b28:	4620      	mov	r0, r4
    7b2a:	f7ff ffcb 	bl	7ac4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    7b2e:	3408      	adds	r4, #8
    7b30:	4b03      	ldr	r3, [pc, #12]	; (7b40 <pin_handler_trigger_uninit+0x38>)
    7b32:	2200      	movs	r2, #0
    7b34:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    7b38:	bd10      	pop	{r4, pc}
    7b3a:	bf00      	nop
    7b3c:	5000d000 	.word	0x5000d000
    7b40:	20000258 	.word	0x20000258

00007b44 <pin_handler_set>:
{
    7b44:	b570      	push	{r4, r5, r6, lr}
    7b46:	b082      	sub	sp, #8
    7b48:	4606      	mov	r6, r0
    7b4a:	460c      	mov	r4, r1
    7b4c:	4615      	mov	r5, r2
    release_handler(pin);
    7b4e:	f7ff ffb9 	bl	7ac4 <release_handler>
    if (!handler)
    7b52:	b324      	cbz	r4, 7b9e <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    7b54:	4629      	mov	r1, r5
    7b56:	4620      	mov	r0, r4
    7b58:	f7ff fef8 	bl	794c <find_handler>
    if (handler_id < 0)
    7b5c:	1e03      	subs	r3, r0, #0
    7b5e:	db13      	blt.n	7b88 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    7b60:	4a10      	ldr	r2, [pc, #64]	; (7ba4 <pin_handler_set+0x60>)
    7b62:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    7b66:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    7b6a:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    7b6c:	025b      	lsls	r3, r3, #9
    7b6e:	b29b      	uxth	r3, r3
    7b70:	f106 0008 	add.w	r0, r6, #8
    7b74:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    7b78:	430b      	orrs	r3, r1
    7b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7b7e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    7b82:	4809      	ldr	r0, [pc, #36]	; (7ba8 <pin_handler_set+0x64>)
}
    7b84:	b002      	add	sp, #8
    7b86:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    7b88:	f10d 0107 	add.w	r1, sp, #7
    7b8c:	4807      	ldr	r0, [pc, #28]	; (7bac <pin_handler_set+0x68>)
    7b8e:	f7ff fc8b 	bl	74a8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    7b92:	4b05      	ldr	r3, [pc, #20]	; (7ba8 <pin_handler_set+0x64>)
    7b94:	4298      	cmp	r0, r3
    7b96:	d1f5      	bne.n	7b84 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    7b98:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b9c:	e7e0      	b.n	7b60 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    7b9e:	4802      	ldr	r0, [pc, #8]	; (7ba8 <pin_handler_set+0x64>)
    7ba0:	e7f0      	b.n	7b84 <pin_handler_set+0x40>
    7ba2:	bf00      	nop
    7ba4:	20000258 	.word	0x20000258
    7ba8:	0bad0000 	.word	0x0bad0000
    7bac:	200002cc 	.word	0x200002cc

00007bb0 <port_event_handle>:

static void port_event_handle(void)
{
    7bb0:	b570      	push	{r4, r5, r6, lr}
    7bb2:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    7bb4:	4a2a      	ldr	r2, [pc, #168]	; (7c60 <port_event_handle+0xb0>)
    7bb6:	466b      	mov	r3, sp
    7bb8:	e892 0003 	ldmia.w	r2, {r0, r1}
    7bbc:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    7bc0:	2300      	movs	r3, #0
    7bc2:	a802      	add	r0, sp, #8
    7bc4:	e009      	b.n	7bda <port_event_handle+0x2a>
        *p_masks = gpio_regs[i]->LATCH;
    7bc6:	aa04      	add	r2, sp, #16
    7bc8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    7bcc:	f852 2c10 	ldr.w	r2, [r2, #-16]
    7bd0:	6a11      	ldr	r1, [r2, #32]
    7bd2:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    7bd6:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
    7bd8:	3301      	adds	r3, #1
    7bda:	2b01      	cmp	r3, #1
    7bdc:	d9f3      	bls.n	7bc6 <port_event_handle+0x16>
    7bde:	e03b      	b.n	7c58 <port_event_handle+0xa8>
        case 1: return NRF_P1;
    7be0:	4e20      	ldr	r6, [pc, #128]	; (7c64 <port_event_handle+0xb4>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7be2:	f105 0380 	add.w	r3, r5, #128	; 0x80
    7be6:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    7bea:	f3c2 4201 	ubfx	r2, r2, #16, #2
    7bee:	f7ff fee9 	bl	79c4 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    7bf2:	2301      	movs	r3, #1
    7bf4:	40ab      	lsls	r3, r5
    7bf6:	6233      	str	r3, [r6, #32]
            while (latch[i])
    7bf8:	ab04      	add	r3, sp, #16
    7bfa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7bfe:	f853 0c08 	ldr.w	r0, [r3, #-8]
    7c02:	b1f0      	cbz	r0, 7c42 <port_event_handle+0x92>
                uint32_t pin = NRF_CTZ(latch[i]);
    7c04:	fa90 f0a0 	rbit	r0, r0
    7c08:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    7c0c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7c10:	f100 0208 	add.w	r2, r0, #8
    7c14:	4b14      	ldr	r3, [pc, #80]	; (7c68 <port_event_handle+0xb8>)
    7c16:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    7c1a:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    7c1e:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    7c20:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    7c24:	ae02      	add	r6, sp, #8
    7c26:	2301      	movs	r3, #1
    7c28:	fa03 f202 	lsl.w	r2, r3, r2
    7c2c:	5d73      	ldrb	r3, [r6, r5]
    7c2e:	ea23 0302 	bic.w	r3, r3, r2
    7c32:	5573      	strb	r3, [r6, r5]
    *p_pin = pin_number & 0x1F;
    7c34:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    7c38:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7c3a:	2b01      	cmp	r3, #1
    7c3c:	d0d0      	beq.n	7be0 <port_event_handle+0x30>
        case 0: return NRF_P0;
    7c3e:	4e0b      	ldr	r6, [pc, #44]	; (7c6c <port_event_handle+0xbc>)
    7c40:	e7cf      	b.n	7be2 <port_event_handle+0x32>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7c42:	3401      	adds	r4, #1
    7c44:	2c01      	cmp	r4, #1
    7c46:	d9d7      	bls.n	7bf8 <port_event_handle+0x48>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7c48:	4b09      	ldr	r3, [pc, #36]	; (7c70 <port_event_handle+0xc0>)
    7c4a:	2200      	movs	r2, #0
    7c4c:	601a      	str	r2, [r3, #0]
    7c4e:	681b      	ldr	r3, [r3, #0]
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    7c50:	a802      	add	r0, sp, #8
    7c52:	f7ff ff0f 	bl	7a74 <latch_pending_read_and_check>
    7c56:	b108      	cbz	r0, 7c5c <port_event_handle+0xac>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7c58:	2400      	movs	r4, #0
    7c5a:	e7f3      	b.n	7c44 <port_event_handle+0x94>
}
    7c5c:	b004      	add	sp, #16
    7c5e:	bd70      	pop	{r4, r5, r6, pc}
    7c60:	0000eff8 	.word	0x0000eff8
    7c64:	50842800 	.word	0x50842800
    7c68:	20000258 	.word	0x20000258
    7c6c:	50842500 	.word	0x50842500
    7c70:	5000d17c 	.word	0x5000d17c

00007c74 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    7c74:	b538      	push	{r3, r4, r5, lr}
    7c76:	4604      	mov	r4, r0
    while (mask)
    7c78:	b1cc      	cbz	r4, 7cae <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
    7c7a:	fa94 f3a4 	rbit	r3, r4
    7c7e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    7c82:	2201      	movs	r2, #1
    7c84:	409a      	lsls	r2, r3
    7c86:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    7c8a:	4a09      	ldr	r2, [pc, #36]	; (7cb0 <gpiote_evt_handle+0x3c>)
    7c8c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    7c90:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    7c94:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    7c98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    7c9c:	f3c0 4001 	ubfx	r0, r0, #16, #2
    7ca0:	f006 fa47 	bl	e132 <gpiote_polarity_to_trigger>
    7ca4:	4601      	mov	r1, r0
    7ca6:	4628      	mov	r0, r5
    7ca8:	f7ff fe76 	bl	7998 <call_handler>
    7cac:	e7e4      	b.n	7c78 <gpiote_evt_handle+0x4>
    }
}
    7cae:	bd38      	pop	{r3, r4, r5, pc}
    7cb0:	5000d000 	.word	0x5000d000

00007cb4 <nrfx_gpiote_input_configure>:
{
    7cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7cb8:	4604      	mov	r4, r0
    7cba:	4615      	mov	r5, r2
    7cbc:	461e      	mov	r6, r3
    if (p_input_config)
    7cbe:	b351      	cbz	r1, 7d16 <nrfx_gpiote_input_configure+0x62>
    7cc0:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    7cc2:	f006 fa20 	bl	e106 <pin_is_task_output>
    7cc6:	2800      	cmp	r0, #0
    7cc8:	f040 8097 	bne.w	7dfa <nrfx_gpiote_input_configure+0x146>
    *p_pin = pin_number & 0x1F;
    7ccc:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    7cd0:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7cd2:	2b01      	cmp	r3, #1
    7cd4:	d040      	beq.n	7d58 <nrfx_gpiote_input_configure+0xa4>
        case 0: return NRF_P0;
    7cd6:	484d      	ldr	r0, [pc, #308]	; (7e0c <nrfx_gpiote_input_configure+0x158>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7cd8:	f102 0380 	add.w	r3, r2, #128	; 0x80
    7cdc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7ce0:	2f00      	cmp	r7, #0
    7ce2:	d03b      	beq.n	7d5c <nrfx_gpiote_input_configure+0xa8>
    7ce4:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7ce6:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
    7cea:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7cee:	2f00      	cmp	r7, #0
    7cf0:	d036      	beq.n	7d60 <nrfx_gpiote_input_configure+0xac>
    7cf2:	7839      	ldrb	r1, [r7, #0]
    7cf4:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7cf6:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    7cf8:	3280      	adds	r2, #128	; 0x80
    7cfa:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    7cfe:	4a44      	ldr	r2, [pc, #272]	; (7e10 <nrfx_gpiote_input_configure+0x15c>)
    7d00:	f104 0108 	add.w	r1, r4, #8
    7d04:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    7d08:	f023 0302 	bic.w	r3, r3, #2
    7d0c:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    7d0e:	f043 0301 	orr.w	r3, r3, #1
    7d12:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    7d16:	b1b5      	cbz	r5, 7d46 <nrfx_gpiote_input_configure+0x92>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    7d18:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    7d1c:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
    7d20:	4620      	mov	r0, r4
    7d22:	f7ff fde7 	bl	78f4 <pin_is_output>
    7d26:	b1e8      	cbz	r0, 7d64 <nrfx_gpiote_input_configure+0xb0>
            if (use_evt)
    7d28:	f1b9 0f00 	cmp.w	r9, #0
    7d2c:	d167      	bne.n	7dfe <nrfx_gpiote_input_configure+0x14a>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    7d2e:	4b38      	ldr	r3, [pc, #224]	; (7e10 <nrfx_gpiote_input_configure+0x15c>)
    7d30:	f104 0208 	add.w	r2, r4, #8
    7d34:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
    7d38:	f020 001c 	bic.w	r0, r0, #28
    7d3c:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    7d3e:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
    7d42:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
    7d46:	2e00      	cmp	r6, #0
    7d48:	d05d      	beq.n	7e06 <nrfx_gpiote_input_configure+0x152>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    7d4a:	6872      	ldr	r2, [r6, #4]
    7d4c:	6831      	ldr	r1, [r6, #0]
    7d4e:	4620      	mov	r0, r4
    7d50:	f7ff fef8 	bl	7b44 <pin_handler_set>
}
    7d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        case 1: return NRF_P1;
    7d58:	482e      	ldr	r0, [pc, #184]	; (7e14 <nrfx_gpiote_input_configure+0x160>)
    7d5a:	e7bd      	b.n	7cd8 <nrfx_gpiote_input_configure+0x24>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7d5c:	2100      	movs	r1, #0
    7d5e:	e7c2      	b.n	7ce6 <nrfx_gpiote_input_configure+0x32>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7d60:	2100      	movs	r1, #0
    7d62:	e7c8      	b.n	7cf6 <nrfx_gpiote_input_configure+0x42>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    7d64:	4b2a      	ldr	r3, [pc, #168]	; (7e10 <nrfx_gpiote_input_configure+0x15c>)
    7d66:	f104 0208 	add.w	r2, r4, #8
    7d6a:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
    7d6e:	f027 0720 	bic.w	r7, r7, #32
    7d72:	04ff      	lsls	r7, r7, #19
    7d74:	0cff      	lsrs	r7, r7, #19
    7d76:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
    7d7a:	f1b9 0f00 	cmp.w	r9, #0
    7d7e:	d0d6      	beq.n	7d2e <nrfx_gpiote_input_configure+0x7a>
                if (!edge)
    7d80:	f1b8 0f03 	cmp.w	r8, #3
    7d84:	d83d      	bhi.n	7e02 <nrfx_gpiote_input_configure+0x14e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    7d86:	686b      	ldr	r3, [r5, #4]
    7d88:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    7d8a:	f1b8 0f00 	cmp.w	r8, #0
    7d8e:	d108      	bne.n	7da2 <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
    7d90:	4b21      	ldr	r3, [pc, #132]	; (7e18 <nrfx_gpiote_input_configure+0x164>)
    7d92:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    7d96:	2200      	movs	r2, #0
    7d98:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
    7d9c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
    7da0:	e7c5      	b.n	7d2e <nrfx_gpiote_input_configure+0x7a>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    7da2:	4640      	mov	r0, r8
    7da4:	f006 f9c6 	bl	e134 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    7da8:	4b1b      	ldr	r3, [pc, #108]	; (7e18 <nrfx_gpiote_input_configure+0x164>)
    7daa:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    7dae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    7db2:	f021 0103 	bic.w	r1, r1, #3
    7db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    7dba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    7dbe:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    7dc2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    7dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7dca:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    7dce:	0221      	lsls	r1, r4, #8
    7dd0:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    7dd4:	0400      	lsls	r0, r0, #16
    7dd6:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7dda:	4301      	orrs	r1, r0
    7ddc:	ea4c 0101 	orr.w	r1, ip, r1
    7de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    7de4:	036d      	lsls	r5, r5, #13
    7de6:	b2ad      	uxth	r5, r5
    7de8:	f104 0308 	add.w	r3, r4, #8
    7dec:	432f      	orrs	r7, r5
    7dee:	f047 0720 	orr.w	r7, r7, #32
    7df2:	4a07      	ldr	r2, [pc, #28]	; (7e10 <nrfx_gpiote_input_configure+0x15c>)
    7df4:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
    7df8:	e799      	b.n	7d2e <nrfx_gpiote_input_configure+0x7a>
            return NRFX_ERROR_INVALID_PARAM;
    7dfa:	4808      	ldr	r0, [pc, #32]	; (7e1c <nrfx_gpiote_input_configure+0x168>)
    7dfc:	e7aa      	b.n	7d54 <nrfx_gpiote_input_configure+0xa0>
                return NRFX_ERROR_INVALID_PARAM;
    7dfe:	4807      	ldr	r0, [pc, #28]	; (7e1c <nrfx_gpiote_input_configure+0x168>)
    7e00:	e7a8      	b.n	7d54 <nrfx_gpiote_input_configure+0xa0>
                    return NRFX_ERROR_INVALID_PARAM;
    7e02:	4806      	ldr	r0, [pc, #24]	; (7e1c <nrfx_gpiote_input_configure+0x168>)
    7e04:	e7a6      	b.n	7d54 <nrfx_gpiote_input_configure+0xa0>
        err = NRFX_SUCCESS;
    7e06:	4806      	ldr	r0, [pc, #24]	; (7e20 <nrfx_gpiote_input_configure+0x16c>)
    7e08:	e7a4      	b.n	7d54 <nrfx_gpiote_input_configure+0xa0>
    7e0a:	bf00      	nop
    7e0c:	50842500 	.word	0x50842500
    7e10:	20000258 	.word	0x20000258
    7e14:	50842800 	.word	0x50842800
    7e18:	5000d000 	.word	0x5000d000
    7e1c:	0bad0004 	.word	0x0bad0004
    7e20:	0bad0000 	.word	0x0bad0000

00007e24 <nrfx_gpiote_output_configure>:
{
    7e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e26:	4604      	mov	r4, r0
    7e28:	4615      	mov	r5, r2
    if (p_config)
    7e2a:	2900      	cmp	r1, #0
    7e2c:	d050      	beq.n	7ed0 <nrfx_gpiote_output_configure+0xac>
    7e2e:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    7e30:	f006 f978 	bl	e124 <pin_is_input>
    7e34:	b128      	cbz	r0, 7e42 <nrfx_gpiote_output_configure+0x1e>
    7e36:	4620      	mov	r0, r4
    7e38:	f7ff fd46 	bl	78c8 <pin_in_use_by_te>
    7e3c:	2800      	cmp	r0, #0
    7e3e:	f040 809d 	bne.w	7f7c <nrfx_gpiote_output_configure+0x158>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    7e42:	4620      	mov	r0, r4
    7e44:	f7ff fd4a 	bl	78dc <pin_has_trigger>
    7e48:	b118      	cbz	r0, 7e52 <nrfx_gpiote_output_configure+0x2e>
    7e4a:	7873      	ldrb	r3, [r6, #1]
    7e4c:	2b01      	cmp	r3, #1
    7e4e:	f000 8097 	beq.w	7f80 <nrfx_gpiote_output_configure+0x15c>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    7e52:	f106 0c01 	add.w	ip, r6, #1
    7e56:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
    7e58:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    7e5c:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7e5e:	2b01      	cmp	r3, #1
    7e60:	d07c      	beq.n	7f5c <nrfx_gpiote_output_configure+0x138>
        case 0: return NRF_P0;
    7e62:	494b      	ldr	r1, [pc, #300]	; (7f90 <nrfx_gpiote_output_configure+0x16c>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7e64:	f102 0380 	add.w	r3, r2, #128	; 0x80
    7e68:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7e6c:	f1bc 0f00 	cmp.w	ip, #0
    7e70:	d076      	beq.n	7f60 <nrfx_gpiote_output_configure+0x13c>
    7e72:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7e74:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7e78:	2f00      	cmp	r7, #0
    7e7a:	d073      	beq.n	7f64 <nrfx_gpiote_output_configure+0x140>
    7e7c:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7e80:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7e84:	2e00      	cmp	r6, #0
    7e86:	d070      	beq.n	7f6a <nrfx_gpiote_output_configure+0x146>
    7e88:	f44f 6e70 	mov.w	lr, #3840	; 0xf00
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7e8c:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
    7e90:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    7e94:	f1bc 0f00 	cmp.w	ip, #0
    7e98:	d06a      	beq.n	7f70 <nrfx_gpiote_output_configure+0x14c>
    7e9a:	7873      	ldrb	r3, [r6, #1]
    7e9c:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7e9e:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7ea2:	2f00      	cmp	r7, #0
    7ea4:	d066      	beq.n	7f74 <nrfx_gpiote_output_configure+0x150>
    7ea6:	78b7      	ldrb	r7, [r6, #2]
    7ea8:	00bf      	lsls	r7, r7, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    7eaa:	433b      	orrs	r3, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    7eac:	2e00      	cmp	r6, #0
    7eae:	d063      	beq.n	7f78 <nrfx_gpiote_output_configure+0x154>
    7eb0:	7836      	ldrb	r6, [r6, #0]
    7eb2:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7eb4:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7eb6:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    7eb8:	3280      	adds	r2, #128	; 0x80
    7eba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    7ebe:	4a35      	ldr	r2, [pc, #212]	; (7f94 <nrfx_gpiote_output_configure+0x170>)
    7ec0:	f104 0108 	add.w	r1, r4, #8
    7ec4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    7ec8:	f043 0303 	orr.w	r3, r3, #3
    7ecc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    7ed0:	2d00      	cmp	r5, #0
    7ed2:	d057      	beq.n	7f84 <nrfx_gpiote_output_configure+0x160>
        if (pin_is_input(pin))
    7ed4:	4620      	mov	r0, r4
    7ed6:	f006 f925 	bl	e124 <pin_is_input>
    7eda:	2800      	cmp	r0, #0
    7edc:	d154      	bne.n	7f88 <nrfx_gpiote_output_configure+0x164>
        uint32_t ch = p_task_config->task_ch;
    7ede:	782a      	ldrb	r2, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    7ee0:	4b2d      	ldr	r3, [pc, #180]	; (7f98 <nrfx_gpiote_output_configure+0x174>)
    7ee2:	f502 71a2 	add.w	r1, r2, #324	; 0x144
    7ee6:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    p_reg->CONFIG[idx] = 0;
    7eea:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    7eee:	4929      	ldr	r1, [pc, #164]	; (7f94 <nrfx_gpiote_output_configure+0x170>)
    7ef0:	f104 0008 	add.w	r0, r4, #8
    7ef4:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
    7ef8:	f023 0320 	bic.w	r3, r3, #32
    7efc:	04db      	lsls	r3, r3, #19
    7efe:	0cdb      	lsrs	r3, r3, #19
    7f00:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    7f04:	7869      	ldrb	r1, [r5, #1]
    7f06:	2900      	cmp	r1, #0
    7f08:	d040      	beq.n	7f8c <nrfx_gpiote_output_configure+0x168>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    7f0a:	f895 c002 	ldrb.w	ip, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    7f0e:	4d22      	ldr	r5, [pc, #136]	; (7f98 <nrfx_gpiote_output_configure+0x174>)
    7f10:	f502 76a2 	add.w	r6, r2, #324	; 0x144
    7f14:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
    7f18:	f420 1099 	bic.w	r0, r0, #1253376	; 0x132000
    7f1c:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
    7f20:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7f24:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
    7f28:	0220      	lsls	r0, r4, #8
    7f2a:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    7f2e:	0409      	lsls	r1, r1, #16
    7f30:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7f34:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    7f36:	ea4f 500c 	mov.w	r0, ip, lsl #20
    7f3a:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    7f3e:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7f40:	4339      	orrs	r1, r7
    7f42:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    7f46:	0352      	lsls	r2, r2, #13
    7f48:	b292      	uxth	r2, r2
    7f4a:	3408      	adds	r4, #8
    7f4c:	431a      	orrs	r2, r3
    7f4e:	f042 0220 	orr.w	r2, r2, #32
    7f52:	4b10      	ldr	r3, [pc, #64]	; (7f94 <nrfx_gpiote_output_configure+0x170>)
    7f54:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
    7f58:	4810      	ldr	r0, [pc, #64]	; (7f9c <nrfx_gpiote_output_configure+0x178>)
    7f5a:	e014      	b.n	7f86 <nrfx_gpiote_output_configure+0x162>
        case 1: return NRF_P1;
    7f5c:	4910      	ldr	r1, [pc, #64]	; (7fa0 <nrfx_gpiote_output_configure+0x17c>)
    7f5e:	e781      	b.n	7e64 <nrfx_gpiote_output_configure+0x40>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7f60:	2300      	movs	r3, #0
    7f62:	e787      	b.n	7e74 <nrfx_gpiote_output_configure+0x50>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7f64:	f04f 0e00 	mov.w	lr, #0
    7f68:	e78a      	b.n	7e80 <nrfx_gpiote_output_configure+0x5c>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7f6a:	f04f 0e00 	mov.w	lr, #0
    7f6e:	e78d      	b.n	7e8c <nrfx_gpiote_output_configure+0x68>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    7f70:	2300      	movs	r3, #0
    7f72:	e794      	b.n	7e9e <nrfx_gpiote_output_configure+0x7a>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7f74:	2700      	movs	r7, #0
    7f76:	e798      	b.n	7eaa <nrfx_gpiote_output_configure+0x86>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    7f78:	2600      	movs	r6, #0
    7f7a:	e79b      	b.n	7eb4 <nrfx_gpiote_output_configure+0x90>
    7f7c:	4809      	ldr	r0, [pc, #36]	; (7fa4 <nrfx_gpiote_output_configure+0x180>)
    7f7e:	e002      	b.n	7f86 <nrfx_gpiote_output_configure+0x162>
    7f80:	4808      	ldr	r0, [pc, #32]	; (7fa4 <nrfx_gpiote_output_configure+0x180>)
    7f82:	e000      	b.n	7f86 <nrfx_gpiote_output_configure+0x162>
    7f84:	4805      	ldr	r0, [pc, #20]	; (7f9c <nrfx_gpiote_output_configure+0x178>)
}
    7f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NRFX_ERROR_INVALID_PARAM;
    7f88:	4806      	ldr	r0, [pc, #24]	; (7fa4 <nrfx_gpiote_output_configure+0x180>)
    7f8a:	e7fc      	b.n	7f86 <nrfx_gpiote_output_configure+0x162>
    return NRFX_SUCCESS;
    7f8c:	4803      	ldr	r0, [pc, #12]	; (7f9c <nrfx_gpiote_output_configure+0x178>)
    7f8e:	e7fa      	b.n	7f86 <nrfx_gpiote_output_configure+0x162>
    7f90:	50842500 	.word	0x50842500
    7f94:	20000258 	.word	0x20000258
    7f98:	5000d000 	.word	0x5000d000
    7f9c:	0bad0000 	.word	0x0bad0000
    7fa0:	50842800 	.word	0x50842800
    7fa4:	0bad0004 	.word	0x0bad0004

00007fa8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    7fa8:	4b01      	ldr	r3, [pc, #4]	; (7fb0 <nrfx_gpiote_global_callback_set+0x8>)
    7faa:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    7fac:	60d9      	str	r1, [r3, #12]
}
    7fae:	4770      	bx	lr
    7fb0:	20000258 	.word	0x20000258

00007fb4 <nrfx_gpiote_channel_get>:
{
    7fb4:	b538      	push	{r3, r4, r5, lr}
    7fb6:	4604      	mov	r4, r0
    7fb8:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    7fba:	f7ff fc85 	bl	78c8 <pin_in_use_by_te>
    7fbe:	b140      	cbz	r0, 7fd2 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7fc0:	f104 0008 	add.w	r0, r4, #8
    7fc4:	4b04      	ldr	r3, [pc, #16]	; (7fd8 <nrfx_gpiote_channel_get+0x24>)
    7fc6:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    7fca:	0b5b      	lsrs	r3, r3, #13
    7fcc:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    7fce:	4803      	ldr	r0, [pc, #12]	; (7fdc <nrfx_gpiote_channel_get+0x28>)
}
    7fd0:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    7fd2:	4803      	ldr	r0, [pc, #12]	; (7fe0 <nrfx_gpiote_channel_get+0x2c>)
    7fd4:	e7fc      	b.n	7fd0 <nrfx_gpiote_channel_get+0x1c>
    7fd6:	bf00      	nop
    7fd8:	20000258 	.word	0x20000258
    7fdc:	0bad0000 	.word	0x0bad0000
    7fe0:	0bad0004 	.word	0x0bad0004

00007fe4 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    7fe4:	4b0f      	ldr	r3, [pc, #60]	; (8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    7fe6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    7fea:	b10b      	cbz	r3, 7ff0 <nrfx_gpiote_init+0xc>
        return err_code;
    7fec:	480e      	ldr	r0, [pc, #56]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
}
    7fee:	4770      	bx	lr
{
    7ff0:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    7ff2:	4c0c      	ldr	r4, [pc, #48]	; (8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    7ff4:	2260      	movs	r2, #96	; 0x60
    7ff6:	2100      	movs	r1, #0
    7ff8:	f104 0010 	add.w	r0, r4, #16
    7ffc:	f005 fb0c 	bl	d618 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    8000:	200d      	movs	r0, #13
    8002:	f7fb fe89 	bl	3d18 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8006:	4b09      	ldr	r3, [pc, #36]	; (802c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>)
    8008:	2200      	movs	r2, #0
    800a:	601a      	str	r2, [r3, #0]
    800c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    800e:	4b08      	ldr	r3, [pc, #32]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    8010:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8014:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    8018:	2301      	movs	r3, #1
    801a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    801e:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    8020:	4804      	ldr	r0, [pc, #16]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
}
    8022:	bd10      	pop	{r4, pc}
    8024:	20000258 	.word	0x20000258
    8028:	0bad0005 	.word	0x0bad0005
    802c:	5000d17c 	.word	0x5000d17c
    8030:	5000d000 	.word	0x5000d000
    8034:	0bad0000 	.word	0x0bad0000

00008038 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    8038:	4b03      	ldr	r3, [pc, #12]	; (8048 <nrfx_gpiote_is_init+0x10>)
    803a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    803e:	3800      	subs	r0, #0
    8040:	bf18      	it	ne
    8042:	2001      	movne	r0, #1
    8044:	4770      	bx	lr
    8046:	bf00      	nop
    8048:	20000258 	.word	0x20000258

0000804c <nrfx_gpiote_channel_free>:
{
    804c:	b508      	push	{r3, lr}
    804e:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    8050:	4801      	ldr	r0, [pc, #4]	; (8058 <nrfx_gpiote_channel_free+0xc>)
    8052:	f7ff fa49 	bl	74e8 <nrfx_flag32_free>
}
    8056:	bd08      	pop	{r3, pc}
    8058:	200002c8 	.word	0x200002c8

0000805c <nrfx_gpiote_channel_alloc>:
{
    805c:	b508      	push	{r3, lr}
    805e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    8060:	4801      	ldr	r0, [pc, #4]	; (8068 <nrfx_gpiote_channel_alloc+0xc>)
    8062:	f7ff fa21 	bl	74a8 <nrfx_flag32_alloc>
}
    8066:	bd08      	pop	{r3, pc}
    8068:	200002c8 	.word	0x200002c8

0000806c <nrfx_gpiote_trigger_enable>:
{
    806c:	b538      	push	{r3, r4, r5, lr}
    806e:	4604      	mov	r4, r0
    8070:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8072:	f7ff fc29 	bl	78c8 <pin_in_use_by_te>
    8076:	b308      	cbz	r0, 80bc <nrfx_gpiote_trigger_enable+0x50>
    8078:	4620      	mov	r0, r4
    807a:	f006 f853 	bl	e124 <pin_is_input>
    807e:	b1e8      	cbz	r0, 80bc <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
    8080:	4620      	mov	r0, r4
    8082:	f7ff fc41 	bl	7908 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    8086:	0083      	lsls	r3, r0, #2
    8088:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    808c:	b29b      	uxth	r3, r3
    808e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    8092:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8096:	2200      	movs	r2, #0
    8098:	601a      	str	r2, [r3, #0]
    809a:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    809c:	4a20      	ldr	r2, [pc, #128]	; (8120 <nrfx_gpiote_trigger_enable+0xb4>)
    809e:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    80a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    80a6:	f043 0301 	orr.w	r3, r3, #1
    80aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    80ae:	b37d      	cbz	r5, 8110 <nrfx_gpiote_trigger_enable+0xa4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    80b0:	2301      	movs	r3, #1
    80b2:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
    80b6:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
    80ba:	e029      	b.n	8110 <nrfx_gpiote_trigger_enable+0xa4>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    80bc:	f104 0308 	add.w	r3, r4, #8
    80c0:	4a18      	ldr	r2, [pc, #96]	; (8124 <nrfx_gpiote_trigger_enable+0xb8>)
    80c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    80c6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    80ca:	2b04      	cmp	r3, #4
    80cc:	d010      	beq.n	80f0 <nrfx_gpiote_trigger_enable+0x84>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    80ce:	2b05      	cmp	r3, #5
    80d0:	d01f      	beq.n	8112 <nrfx_gpiote_trigger_enable+0xa6>
    *p_pin = pin_number & 0x1F;
    80d2:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    80d6:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    80d8:	2b01      	cmp	r3, #1
    80da:	d007      	beq.n	80ec <nrfx_gpiote_trigger_enable+0x80>
        case 0: return NRF_P0;
    80dc:	4b12      	ldr	r3, [pc, #72]	; (8128 <nrfx_gpiote_trigger_enable+0xbc>)
    return p_reg->IN;
    80de:	691b      	ldr	r3, [r3, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    80e0:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    80e2:	f013 0f01 	tst.w	r3, #1
    80e6:	d016      	beq.n	8116 <nrfx_gpiote_trigger_enable+0xaa>
    80e8:	2003      	movs	r0, #3
    80ea:	e002      	b.n	80f2 <nrfx_gpiote_trigger_enable+0x86>
        case 1: return NRF_P1;
    80ec:	4b0f      	ldr	r3, [pc, #60]	; (812c <nrfx_gpiote_trigger_enable+0xc0>)
    80ee:	e7f6      	b.n	80de <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    80f0:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    80f2:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    80f6:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    80f8:	2c01      	cmp	r4, #1
    80fa:	d00e      	beq.n	811a <nrfx_gpiote_trigger_enable+0xae>
        case 0: return NRF_P0;
    80fc:	490a      	ldr	r1, [pc, #40]	; (8128 <nrfx_gpiote_trigger_enable+0xbc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    80fe:	3280      	adds	r2, #128	; 0x80
    8100:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    8104:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8108:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    810c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    8110:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    8112:	2002      	movs	r0, #2
    8114:	e7ed      	b.n	80f2 <nrfx_gpiote_trigger_enable+0x86>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    8116:	2002      	movs	r0, #2
    8118:	e7eb      	b.n	80f2 <nrfx_gpiote_trigger_enable+0x86>
        case 1: return NRF_P1;
    811a:	4904      	ldr	r1, [pc, #16]	; (812c <nrfx_gpiote_trigger_enable+0xc0>)
    811c:	e7ef      	b.n	80fe <nrfx_gpiote_trigger_enable+0x92>
    811e:	bf00      	nop
    8120:	5000d000 	.word	0x5000d000
    8124:	20000258 	.word	0x20000258
    8128:	50842500 	.word	0x50842500
    812c:	50842800 	.word	0x50842800

00008130 <nrfx_gpiote_trigger_disable>:
{
    8130:	b510      	push	{r4, lr}
    8132:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8134:	f7ff fbc8 	bl	78c8 <pin_in_use_by_te>
    8138:	b1a0      	cbz	r0, 8164 <nrfx_gpiote_trigger_disable+0x34>
    813a:	4620      	mov	r0, r4
    813c:	f005 fff2 	bl	e124 <pin_is_input>
    8140:	b180      	cbz	r0, 8164 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    8142:	4620      	mov	r0, r4
    8144:	f7ff fbe0 	bl	7908 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    8148:	2201      	movs	r2, #1
    814a:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    814c:	4b0d      	ldr	r3, [pc, #52]	; (8184 <nrfx_gpiote_trigger_disable+0x54>)
    814e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    8152:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    8156:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    815a:	f022 0203 	bic.w	r2, r2, #3
    815e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    8162:	e00c      	b.n	817e <nrfx_gpiote_trigger_disable+0x4e>
    *p_pin = pin_number & 0x1F;
    8164:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    8168:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    816a:	2c01      	cmp	r4, #1
    816c:	d008      	beq.n	8180 <nrfx_gpiote_trigger_disable+0x50>
        case 0: return NRF_P0;
    816e:	4906      	ldr	r1, [pc, #24]	; (8188 <nrfx_gpiote_trigger_disable+0x58>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8170:	3380      	adds	r3, #128	; 0x80
    8172:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    8176:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    817a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    817e:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    8180:	4902      	ldr	r1, [pc, #8]	; (818c <nrfx_gpiote_trigger_disable+0x5c>)
    8182:	e7f5      	b.n	8170 <nrfx_gpiote_trigger_disable+0x40>
    8184:	5000d000 	.word	0x5000d000
    8188:	50842500 	.word	0x50842500
    818c:	50842800 	.word	0x50842800

00008190 <nrfx_gpiote_pin_uninit>:
{
    8190:	b510      	push	{r4, lr}
    8192:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    8194:	f7ff fb8e 	bl	78b4 <pin_in_use>
    8198:	b908      	cbnz	r0, 819e <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    819a:	480d      	ldr	r0, [pc, #52]	; (81d0 <nrfx_gpiote_pin_uninit+0x40>)
}
    819c:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    819e:	4620      	mov	r0, r4
    81a0:	f7ff ffc6 	bl	8130 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    81a4:	4620      	mov	r0, r4
    81a6:	f7ff fcaf 	bl	7b08 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    81aa:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    81ae:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    81b0:	2c01      	cmp	r4, #1
    81b2:	d00b      	beq.n	81cc <nrfx_gpiote_pin_uninit+0x3c>
        case 0: return NRF_P0;
    81b4:	4907      	ldr	r1, [pc, #28]	; (81d4 <nrfx_gpiote_pin_uninit+0x44>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    81b6:	3280      	adds	r2, #128	; 0x80
    81b8:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    81bc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    81c0:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    81c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    return NRFX_SUCCESS;
    81c8:	4803      	ldr	r0, [pc, #12]	; (81d8 <nrfx_gpiote_pin_uninit+0x48>)
    81ca:	e7e7      	b.n	819c <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
    81cc:	4903      	ldr	r1, [pc, #12]	; (81dc <nrfx_gpiote_pin_uninit+0x4c>)
    81ce:	e7f2      	b.n	81b6 <nrfx_gpiote_pin_uninit+0x26>
    81d0:	0bad0004 	.word	0x0bad0004
    81d4:	50842500 	.word	0x50842500
    81d8:	0bad0000 	.word	0x0bad0000
    81dc:	50842800 	.word	0x50842800

000081e0 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    81e0:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    81e2:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    81e4:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    81e8:	2100      	movs	r1, #0
    uint32_t status = 0;
    81ea:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    81ec:	e003      	b.n	81f6 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    81ee:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    81f0:	3304      	adds	r3, #4
    81f2:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    81f4:	3101      	adds	r1, #1
    81f6:	2907      	cmp	r1, #7
    81f8:	d814      	bhi.n	8224 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    81fa:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    81fe:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    8202:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    8204:	2a00      	cmp	r2, #0
    8206:	d0f2      	beq.n	81ee <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    8208:	4a0b      	ldr	r2, [pc, #44]	; (8238 <nrfx_gpiote_irq_handler+0x58>)
    820a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    820e:	4210      	tst	r0, r2
    8210:	d0ed      	beq.n	81ee <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    8212:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    8216:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    821a:	2400      	movs	r4, #0
    821c:	6014      	str	r4, [r2, #0]
    821e:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    8220:	4305      	orrs	r5, r0
    8222:	e7e4      	b.n	81ee <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8224:	4b05      	ldr	r3, [pc, #20]	; (823c <nrfx_gpiote_irq_handler+0x5c>)
    8226:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    8228:	b91b      	cbnz	r3, 8232 <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    822a:	4628      	mov	r0, r5
    822c:	f7ff fd22 	bl	7c74 <gpiote_evt_handle>
}
    8230:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    8232:	f7ff fcbd 	bl	7bb0 <port_event_handle>
    8236:	e7f8      	b.n	822a <nrfx_gpiote_irq_handler+0x4a>
    8238:	5000d000 	.word	0x5000d000
    823c:	5000d17c 	.word	0x5000d17c

00008240 <nrf53_errata_53>:
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    8240:	4b08      	ldr	r3, [pc, #32]	; (8264 <nrf53_errata_53+0x24>)
    8242:	681a      	ldr	r2, [r3, #0]
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    8244:	3304      	adds	r3, #4
    8246:	681b      	ldr	r3, [r3, #0]
                if (var1 == 0x07)
    8248:	2a07      	cmp	r2, #7
    824a:	d001      	beq.n	8250 <nrf53_errata_53+0x10>
        return false;
    824c:	2000      	movs	r0, #0
    824e:	4770      	bx	lr
                    switch(var2)
    8250:	3b02      	subs	r3, #2
    8252:	2b00      	cmp	r3, #0
    8254:	d804      	bhi.n	8260 <nrf53_errata_53+0x20>
    8256:	e8df f003 	tbb	[pc, r3]
    825a:	01          	.byte	0x01
    825b:	00          	.byte	0x00
                if (var1 == 0x07)
    825c:	2001      	movs	r0, #1
    825e:	4770      	bx	lr
                            return false;
    8260:	2000      	movs	r0, #0
}
    8262:	4770      	bx	lr
    8264:	00ff0130 	.word	0x00ff0130

00008268 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    8268:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    826a:	4b19      	ldr	r3, [pc, #100]	; (82d0 <nrfx_power_init+0x68>)
    826c:	781b      	ldrb	r3, [r3, #0]
    826e:	bb63      	cbnz	r3, 82ca <nrfx_power_init+0x62>
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
    8270:	7803      	ldrb	r3, [r0, #0]
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    8272:	f013 0f02 	tst.w	r3, #2
    8276:	d018      	beq.n	82aa <nrfx_power_init+0x42>
    8278:	2201      	movs	r2, #1
    827a:	4b16      	ldr	r3, [pc, #88]	; (82d4 <nrfx_power_init+0x6c>)
    827c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
#elif defined(REGULATORS_PRESENT)
    nrf_regulators_dcdcen_set(NRF_REGULATORS, p_config->dcdcen);
    8280:	7803      	ldrb	r3, [r0, #0]
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    8282:	f013 0f01 	tst.w	r3, #1
    8286:	d012      	beq.n	82ae <nrfx_power_init+0x46>
    8288:	2201      	movs	r2, #1
    828a:	4b12      	ldr	r3, [pc, #72]	; (82d4 <nrfx_power_init+0x6c>)
    828c:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#if !defined(NRF_TRUSTZONE_NONSECURE)
    if (p_config->dcdcen && nrf53_errata_53())
    8290:	7803      	ldrb	r3, [r0, #0]
    8292:	f013 0f01 	tst.w	r3, #1
    8296:	d10c      	bne.n	82b2 <nrfx_power_init+0x4a>
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8298:	2005      	movs	r0, #5
    829a:	f7fb fd61 	bl	3d60 <arch_irq_is_enabled>
    829e:	b180      	cbz	r0, 82c2 <nrfx_power_init+0x5a>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    82a0:	4b0b      	ldr	r3, [pc, #44]	; (82d0 <nrfx_power_init+0x68>)
    82a2:	2201      	movs	r2, #1
    82a4:	701a      	strb	r2, [r3, #0]
    return NRFX_SUCCESS;
    82a6:	480c      	ldr	r0, [pc, #48]	; (82d8 <nrfx_power_init+0x70>)
}
    82a8:	bd08      	pop	{r3, pc}
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    82aa:	2200      	movs	r2, #0
    82ac:	e7e5      	b.n	827a <nrfx_power_init+0x12>
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    82ae:	2200      	movs	r2, #0
    82b0:	e7eb      	b.n	828a <nrfx_power_init+0x22>
    if (p_config->dcdcen && nrf53_errata_53())
    82b2:	f7ff ffc5 	bl	8240 <nrf53_errata_53>
    82b6:	2800      	cmp	r0, #0
    82b8:	d0ee      	beq.n	8298 <nrfx_power_init+0x30>
        *((volatile uint32_t *)0x50004728ul) = 0x1;
    82ba:	4b08      	ldr	r3, [pc, #32]	; (82dc <nrfx_power_init+0x74>)
    82bc:	2201      	movs	r2, #1
    82be:	601a      	str	r2, [r3, #0]
    82c0:	e7ea      	b.n	8298 <nrfx_power_init+0x30>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    82c2:	2005      	movs	r0, #5
    82c4:	f7fb fd28 	bl	3d18 <arch_irq_enable>
    82c8:	e7ea      	b.n	82a0 <nrfx_power_init+0x38>
        return NRFX_ERROR_ALREADY_INITIALIZED;
    82ca:	4805      	ldr	r0, [pc, #20]	; (82e0 <nrfx_power_init+0x78>)
    82cc:	e7ec      	b.n	82a8 <nrfx_power_init+0x40>
    82ce:	bf00      	nop
    82d0:	20001f21 	.word	0x20001f21
    82d4:	50004000 	.word	0x50004000
    82d8:	0bad0000 	.word	0x0bad0000
    82dc:	50004728 	.word	0x50004728
    82e0:	0bad000c 	.word	0x0bad000c

000082e4 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    82e4:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
}

NRF_STATIC_INLINE uint32_t nrf_power_int_enable_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->INTENSET;
    82e6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    82ea:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    82ee:	f014 0f04 	tst.w	r4, #4
    82f2:	d00b      	beq.n	830c <nrfx_power_irq_handler+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    82f4:	f503 7384 	add.w	r3, r3, #264	; 0x108
    82f8:	681b      	ldr	r3, [r3, #0]
    if (ret)
    82fa:	b11b      	cbz	r3, 8304 <nrfx_power_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    82fc:	4a13      	ldr	r2, [pc, #76]	; (834c <nrfx_power_irq_handler+0x68>)
    82fe:	2100      	movs	r1, #0
    8300:	6011      	str	r1, [r2, #0]
    8302:	6812      	ldr	r2, [r2, #0]
    8304:	b113      	cbz	r3, 830c <nrfx_power_irq_handler+0x28>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    8306:	4b12      	ldr	r3, [pc, #72]	; (8350 <nrfx_power_irq_handler+0x6c>)
    8308:	681b      	ldr	r3, [r3, #0]
    830a:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    830c:	f014 0f20 	tst.w	r4, #32
    8310:	d00b      	beq.n	832a <nrfx_power_irq_handler+0x46>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8312:	4b10      	ldr	r3, [pc, #64]	; (8354 <nrfx_power_irq_handler+0x70>)
    8314:	681b      	ldr	r3, [r3, #0]
    if (ret)
    8316:	b11b      	cbz	r3, 8320 <nrfx_power_irq_handler+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8318:	4a0e      	ldr	r2, [pc, #56]	; (8354 <nrfx_power_irq_handler+0x70>)
    831a:	2100      	movs	r1, #0
    831c:	6011      	str	r1, [r2, #0]
    831e:	6812      	ldr	r2, [r2, #0]
    8320:	b11b      	cbz	r3, 832a <nrfx_power_irq_handler+0x46>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    8322:	4b0d      	ldr	r3, [pc, #52]	; (8358 <nrfx_power_irq_handler+0x74>)
    8324:	681b      	ldr	r3, [r3, #0]
    8326:	2000      	movs	r0, #0
    8328:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    832a:	f014 0f40 	tst.w	r4, #64	; 0x40
    832e:	d00b      	beq.n	8348 <nrfx_power_irq_handler+0x64>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8330:	4b0a      	ldr	r3, [pc, #40]	; (835c <nrfx_power_irq_handler+0x78>)
    8332:	681b      	ldr	r3, [r3, #0]
    if (ret)
    8334:	b11b      	cbz	r3, 833e <nrfx_power_irq_handler+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8336:	4a09      	ldr	r2, [pc, #36]	; (835c <nrfx_power_irq_handler+0x78>)
    8338:	2100      	movs	r1, #0
    833a:	6011      	str	r1, [r2, #0]
    833c:	6812      	ldr	r2, [r2, #0]
    833e:	b11b      	cbz	r3, 8348 <nrfx_power_irq_handler+0x64>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    8340:	4b05      	ldr	r3, [pc, #20]	; (8358 <nrfx_power_irq_handler+0x74>)
    8342:	681b      	ldr	r3, [r3, #0]
    8344:	2001      	movs	r0, #1
    8346:	4798      	blx	r3
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    }
#endif
}
    8348:	bd10      	pop	{r4, pc}
    834a:	bf00      	nop
    834c:	50005108 	.word	0x50005108
    8350:	20001c70 	.word	0x20001c70
    8354:	50005114 	.word	0x50005114
    8358:	20001c74 	.word	0x20001c74
    835c:	50005118 	.word	0x50005118

00008360 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    8360:	b500      	push	{lr}
    8362:	b083      	sub	sp, #12
    m_bus_suspend = false;
    8364:	2300      	movs	r3, #0
    8366:	4a09      	ldr	r2, [pc, #36]	; (838c <ev_usbreset_handler+0x2c>)
    8368:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    836a:	4a09      	ldr	r2, [pc, #36]	; (8390 <ev_usbreset_handler+0x30>)
    836c:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    836e:	f8ad 3005 	strh.w	r3, [sp, #5]
    8372:	f88d 3007 	strb.w	r3, [sp, #7]
    8376:	2301      	movs	r3, #1
    8378:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    837c:	4b05      	ldr	r3, [pc, #20]	; (8394 <ev_usbreset_handler+0x34>)
    837e:	681b      	ldr	r3, [r3, #0]
    8380:	a801      	add	r0, sp, #4
    8382:	4798      	blx	r3
}
    8384:	b003      	add	sp, #12
    8386:	f85d fb04 	ldr.w	pc, [sp], #4
    838a:	bf00      	nop
    838c:	20001f22 	.word	0x20001f22
    8390:	20001f25 	.word	0x20001f25
    8394:	20001e78 	.word	0x20001e78

00008398 <ev_sof_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }

static void ev_sof_handler(void)
{
    8398:	b500      	push	{lr}
    839a:	b083      	sub	sp, #12
    nrfx_usbd_evt_t evt =  {
    839c:	2300      	movs	r3, #0
    839e:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    83a2:	4b12      	ldr	r3, [pc, #72]	; (83ec <ev_sof_handler+0x54>)
    83a4:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    83a8:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    83ac:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    if (size_isoout == 0)
    83b0:	b15b      	cbz	r3, 83ca <ev_sof_handler+0x32>
    else if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
    83b2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    83b6:	d115      	bne.n	83e4 <ev_sof_handler+0x4c>
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    };

    /* Process isochronous endpoints */
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    if (nrf_usbd_episoout_size_get(NRF_USBD, NRFX_USBD_EPOUT8) != NRF_USBD_EPISOOUT_NO_DATA)
    83b8:	f1b3 3fff 	cmp.w	r3, #4294967295
    83bc:	d002      	beq.n	83c4 <ev_sof_handler+0x2c>
    {
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    83be:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
    83c2:	e004      	b.n	83ce <ev_sof_handler+0x36>
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    83c4:	f44f 7180 	mov.w	r1, #256	; 0x100
    83c8:	e001      	b.n	83ce <ev_sof_handler+0x36>
    83ca:	f44f 7180 	mov.w	r1, #256	; 0x100
    }
    m_ep_ready |= iso_ready_mask;
    83ce:	4a08      	ldr	r2, [pc, #32]	; (83f0 <ev_sof_handler+0x58>)
    83d0:	6813      	ldr	r3, [r2, #0]
    83d2:	430b      	orrs	r3, r1
    83d4:	6013      	str	r3, [r2, #0]

    m_event_handler(&evt);
    83d6:	4b07      	ldr	r3, [pc, #28]	; (83f4 <ev_sof_handler+0x5c>)
    83d8:	681b      	ldr	r3, [r3, #0]
    83da:	a801      	add	r0, sp, #4
    83dc:	4798      	blx	r3
}
    83de:	b003      	add	sp, #12
    83e0:	f85d fb04 	ldr.w	pc, [sp], #4
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    83e4:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
    83e8:	e7f1      	b.n	83ce <ev_sof_handler+0x36>
    83ea:	bf00      	nop
    83ec:	50036000 	.word	0x50036000
    83f0:	20001d54 	.word	0x20001d54
    83f4:	20001e78 	.word	0x20001e78

000083f8 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    83f8:	b510      	push	{r4, lr}
    83fa:	b082      	sub	sp, #8
    return p_reg->EVENTCAUSE;
    83fc:	4b23      	ldr	r3, [pc, #140]	; (848c <ev_usbevent_handler+0x94>)
    83fe:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    8402:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    8406:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    840a:	f414 7f80 	tst.w	r4, #256	; 0x100
    840e:	d00e      	beq.n	842e <ev_usbevent_handler+0x36>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    8410:	4b1f      	ldr	r3, [pc, #124]	; (8490 <ev_usbevent_handler+0x98>)
    8412:	2201      	movs	r2, #1
    8414:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    8416:	2300      	movs	r3, #0
    8418:	f8ad 3005 	strh.w	r3, [sp, #5]
    841c:	f88d 3007 	strb.w	r3, [sp, #7]
    8420:	2302      	movs	r3, #2
    8422:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    8426:	4b1b      	ldr	r3, [pc, #108]	; (8494 <ev_usbevent_handler+0x9c>)
    8428:	681b      	ldr	r3, [r3, #0]
    842a:	a801      	add	r0, sp, #4
    842c:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    842e:	f414 7f00 	tst.w	r4, #512	; 0x200
    8432:	d00d      	beq.n	8450 <ev_usbevent_handler+0x58>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    8434:	2300      	movs	r3, #0
    8436:	4a16      	ldr	r2, [pc, #88]	; (8490 <ev_usbevent_handler+0x98>)
    8438:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    843a:	f8ad 3005 	strh.w	r3, [sp, #5]
    843e:	f88d 3007 	strb.w	r3, [sp, #7]
    8442:	2303      	movs	r3, #3
    8444:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    8448:	4b12      	ldr	r3, [pc, #72]	; (8494 <ev_usbevent_handler+0x9c>)
    844a:	681b      	ldr	r3, [r3, #0]
    844c:	a801      	add	r0, sp, #4
    844e:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    8450:	f414 6f80 	tst.w	r4, #1024	; 0x400
    8454:	d017      	beq.n	8486 <ev_usbevent_handler+0x8e>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    8456:	4b0e      	ldr	r3, [pc, #56]	; (8490 <ev_usbevent_handler+0x98>)
    8458:	781b      	ldrb	r3, [r3, #0]
    845a:	b1a3      	cbz	r3, 8486 <ev_usbevent_handler+0x8e>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    845c:	2300      	movs	r3, #0
    845e:	4a0c      	ldr	r2, [pc, #48]	; (8490 <ev_usbevent_handler+0x98>)
    8460:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    8462:	2101      	movs	r1, #1
    8464:	4a09      	ldr	r2, [pc, #36]	; (848c <ev_usbevent_handler+0x94>)
    8466:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    846a:	3258      	adds	r2, #88	; 0x58
    846c:	6011      	str	r1, [r2, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    846e:	6812      	ldr	r2, [r2, #0]

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    8470:	f8ad 3005 	strh.w	r3, [sp, #5]
    8474:	f88d 3007 	strb.w	r3, [sp, #7]
    8478:	2304      	movs	r3, #4
    847a:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    847e:	4b05      	ldr	r3, [pc, #20]	; (8494 <ev_usbevent_handler+0x9c>)
    8480:	681b      	ldr	r3, [r3, #0]
    8482:	a801      	add	r0, sp, #4
    8484:	4798      	blx	r3
        }
    }
}
    8486:	b002      	add	sp, #8
    8488:	bd10      	pop	{r4, pc}
    848a:	bf00      	nop
    848c:	50036000 	.word	0x50036000
    8490:	20001f22 	.word	0x20001f22
    8494:	20001e78 	.word	0x20001e78

00008498 <usbd_enable>:

/**
 * @brief Enable USBD peripheral.
 */
static void usbd_enable(void)
{
    8498:	b570      	push	{r4, r5, r6, lr}
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    849a:	f005 fe5b 	bl	e154 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    849e:	4604      	mov	r4, r0
    84a0:	b1b8      	cbz	r0, 84d2 <usbd_enable+0x3a>
	__asm__ volatile(
    84a2:	f04f 0220 	mov.w	r2, #32
    84a6:	f3ef 8311 	mrs	r3, BASEPRI
    84aa:	f382 8812 	msr	BASEPRI_MAX, r2
    84ae:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    84b2:	4a40      	ldr	r2, [pc, #256]	; (85b4 <usbd_enable+0x11c>)
    84b4:	6812      	ldr	r2, [r2, #0]
    84b6:	2a00      	cmp	r2, #0
    84b8:	d16c      	bne.n	8594 <usbd_enable+0xfc>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    84ba:	4a3e      	ldr	r2, [pc, #248]	; (85b4 <usbd_enable+0x11c>)
    84bc:	f249 3175 	movw	r1, #37749	; 0x9375
    84c0:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    84c2:	483d      	ldr	r0, [pc, #244]	; (85b8 <usbd_enable+0x120>)
    84c4:	2503      	movs	r5, #3
    84c6:	6005      	str	r5, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    84c8:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    84ca:	f383 8811 	msr	BASEPRI, r3
    84ce:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
    84d2:	f005 fe3d 	bl	e150 <nrf52_errata_171>
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_171())
    84d6:	4602      	mov	r2, r0
    84d8:	b1b8      	cbz	r0, 850a <usbd_enable+0x72>
	__asm__ volatile(
    84da:	f04f 0120 	mov.w	r1, #32
    84de:	f3ef 8311 	mrs	r3, BASEPRI
    84e2:	f381 8812 	msr	BASEPRI_MAX, r1
    84e6:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    84ea:	4932      	ldr	r1, [pc, #200]	; (85b4 <usbd_enable+0x11c>)
    84ec:	6809      	ldr	r1, [r1, #0]
    84ee:	2900      	cmp	r1, #0
    84f0:	d154      	bne.n	859c <usbd_enable+0x104>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    84f2:	4930      	ldr	r1, [pc, #192]	; (85b4 <usbd_enable+0x11c>)
    84f4:	f249 3075 	movw	r0, #37749	; 0x9375
    84f8:	6008      	str	r0, [r1, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    84fa:	4d30      	ldr	r5, [pc, #192]	; (85bc <usbd_enable+0x124>)
    84fc:	26c0      	movs	r6, #192	; 0xc0
    84fe:	602e      	str	r6, [r5, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8500:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
    8502:	f383 8811 	msr	BASEPRI, r3
    8506:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    850a:	4b2d      	ldr	r3, [pc, #180]	; (85c0 <usbd_enable+0x128>)
    850c:	2101      	movs	r1, #1
    850e:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    8512:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    8516:	4b2a      	ldr	r3, [pc, #168]	; (85c0 <usbd_enable+0x128>)
    8518:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    851c:	f413 6f00 	tst.w	r3, #2048	; 0x800
    8520:	d0f9      	beq.n	8516 <usbd_enable+0x7e>
    p_reg->EVENTCAUSE = flags;
    8522:	4b27      	ldr	r3, [pc, #156]	; (85c0 <usbd_enable+0x128>)
    8524:	f44f 6100 	mov.w	r1, #2048	; 0x800
    8528:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    852c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    nrf_usbd_enable(NRF_USBD);

    /* Waiting for peripheral to enable, this should take a few us */
    usbd_eventcause_wait_and_clear(NRF_USBD_EVENTCAUSE_READY_MASK);

    if (nrfx_usbd_errata_171())
    8530:	b1ba      	cbz	r2, 8562 <usbd_enable+0xca>
	__asm__ volatile(
    8532:	f04f 0220 	mov.w	r2, #32
    8536:	f3ef 8311 	mrs	r3, BASEPRI
    853a:	f382 8812 	msr	BASEPRI_MAX, r2
    853e:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    8542:	4a1c      	ldr	r2, [pc, #112]	; (85b4 <usbd_enable+0x11c>)
    8544:	6812      	ldr	r2, [r2, #0]
    8546:	2a00      	cmp	r2, #0
    8548:	d12c      	bne.n	85a4 <usbd_enable+0x10c>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    854a:	4a1a      	ldr	r2, [pc, #104]	; (85b4 <usbd_enable+0x11c>)
    854c:	f249 3175 	movw	r1, #37749	; 0x9375
    8550:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    8552:	481a      	ldr	r0, [pc, #104]	; (85bc <usbd_enable+0x124>)
    8554:	2500      	movs	r5, #0
    8556:	6005      	str	r5, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8558:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    855a:	f383 8811 	msr	BASEPRI, r3
    855e:	f3bf 8f6f 	isb	sy
    {
        usbd_errata_171_end();
    }

    if (nrfx_usbd_errata_187())
    8562:	b1b4      	cbz	r4, 8592 <usbd_enable+0xfa>
	__asm__ volatile(
    8564:	f04f 0220 	mov.w	r2, #32
    8568:	f3ef 8311 	mrs	r3, BASEPRI
    856c:	f382 8812 	msr	BASEPRI_MAX, r2
    8570:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    8574:	4a0f      	ldr	r2, [pc, #60]	; (85b4 <usbd_enable+0x11c>)
    8576:	6812      	ldr	r2, [r2, #0]
    8578:	b9c2      	cbnz	r2, 85ac <usbd_enable+0x114>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    857a:	4a0e      	ldr	r2, [pc, #56]	; (85b4 <usbd_enable+0x11c>)
    857c:	f249 3175 	movw	r1, #37749	; 0x9375
    8580:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    8582:	480d      	ldr	r0, [pc, #52]	; (85b8 <usbd_enable+0x120>)
    8584:	2400      	movs	r4, #0
    8586:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8588:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    858a:	f383 8811 	msr	BASEPRI, r3
    858e:	f3bf 8f6f 	isb	sy
    {
        usbd_errata_187_211_end();
    }
}
    8592:	bd70      	pop	{r4, r5, r6, pc}
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    8594:	4a08      	ldr	r2, [pc, #32]	; (85b8 <usbd_enable+0x120>)
    8596:	2103      	movs	r1, #3
    8598:	6011      	str	r1, [r2, #0]
    859a:	e796      	b.n	84ca <usbd_enable+0x32>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    859c:	4907      	ldr	r1, [pc, #28]	; (85bc <usbd_enable+0x124>)
    859e:	20c0      	movs	r0, #192	; 0xc0
    85a0:	6008      	str	r0, [r1, #0]
    85a2:	e7ae      	b.n	8502 <usbd_enable+0x6a>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    85a4:	4a05      	ldr	r2, [pc, #20]	; (85bc <usbd_enable+0x124>)
    85a6:	2100      	movs	r1, #0
    85a8:	6011      	str	r1, [r2, #0]
    85aa:	e7d6      	b.n	855a <usbd_enable+0xc2>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    85ac:	4a02      	ldr	r2, [pc, #8]	; (85b8 <usbd_enable+0x120>)
    85ae:	2100      	movs	r1, #0
    85b0:	6011      	str	r1, [r2, #0]
    85b2:	e7ea      	b.n	858a <usbd_enable+0xf2>
    85b4:	4006ec00 	.word	0x4006ec00
    85b8:	4006ed14 	.word	0x4006ed14
    85bc:	4006ec14 	.word	0x4006ec14
    85c0:	50036000 	.word	0x50036000

000085c4 <usbd_ep_data_handler>:
{
    85c4:	b530      	push	{r4, r5, lr}
    85c6:	b083      	sub	sp, #12
    85c8:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    85ca:	2501      	movs	r5, #1
    85cc:	408d      	lsls	r5, r1
    85ce:	4a51      	ldr	r2, [pc, #324]	; (8714 <usbd_ep_data_handler+0x150>)
    85d0:	6813      	ldr	r3, [r2, #0]
    85d2:	432b      	orrs	r3, r5
    85d4:	6013      	str	r3, [r2, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    85d6:	f010 0f80 	tst.w	r0, #128	; 0x80
    85da:	d111      	bne.n	8600 <usbd_ep_data_handler+0x3c>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    85dc:	4b4e      	ldr	r3, [pc, #312]	; (8718 <usbd_ep_data_handler+0x154>)
    85de:	681b      	ldr	r3, [r3, #0]
    85e0:	421d      	tst	r5, r3
    85e2:	d10b      	bne.n	85fc <usbd_ep_data_handler+0x38>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    85e4:	2306      	movs	r3, #6
    85e6:	f88d 3004 	strb.w	r3, [sp, #4]
    85ea:	f88d 0006 	strb.w	r0, [sp, #6]
    85ee:	2301      	movs	r3, #1
    85f0:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    85f4:	4b49      	ldr	r3, [pc, #292]	; (871c <usbd_ep_data_handler+0x158>)
    85f6:	681b      	ldr	r3, [r3, #0]
    85f8:	a801      	add	r0, sp, #4
    85fa:	4798      	blx	r3
}
    85fc:	b003      	add	sp, #12
    85fe:	bd30      	pop	{r4, r5, pc}
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    8600:	f000 030f 	and.w	r3, r0, #15
    8604:	4a46      	ldr	r2, [pc, #280]	; (8720 <usbd_ep_data_handler+0x15c>)
    8606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    860a:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    860e:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8612:	681a      	ldr	r2, [r3, #0]
    if (ret)
    8614:	b112      	cbz	r2, 861c <usbd_ep_data_handler+0x58>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    8616:	2100      	movs	r1, #0
    8618:	6019      	str	r1, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    861a:	681b      	ldr	r3, [r3, #0]
        if (nrf_usbd_event_get_and_clear(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)))
    861c:	2a00      	cmp	r2, #0
    861e:	d03f      	beq.n	86a0 <usbd_ep_data_handler+0xdc>
            if (ep != NRFX_USBD_EPIN0)
    8620:	2c80      	cmp	r4, #128	; 0x80
    8622:	d050      	beq.n	86c6 <usbd_ep_data_handler+0x102>
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    8624:	f005 fd98 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8628:	b110      	cbz	r0, 8630 <usbd_ep_data_handler+0x6c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    862a:	4b3e      	ldr	r3, [pc, #248]	; (8724 <usbd_ep_data_handler+0x160>)
    862c:	2200      	movs	r2, #0
    862e:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8630:	4b3d      	ldr	r3, [pc, #244]	; (8728 <usbd_ep_data_handler+0x164>)
    8632:	2200      	movs	r2, #0
    8634:	701a      	strb	r2, [r3, #0]
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8636:	b263      	sxtb	r3, r4
    8638:	4293      	cmp	r3, r2
    863a:	db1d      	blt.n	8678 <usbd_ep_data_handler+0xb4>
    863c:	493b      	ldr	r1, [pc, #236]	; (872c <usbd_ep_data_handler+0x168>)
        NRF_USBD_EP_NR_GET(ep));
    863e:	f004 020f 	and.w	r2, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8642:	0110      	lsls	r0, r2, #4
    8644:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8648:	7b92      	ldrb	r2, [r2, #14]
    864a:	2a03      	cmp	r2, #3
    864c:	d016      	beq.n	867c <usbd_ep_data_handler+0xb8>
    else if (p_state->handler.feeder == NULL)
    864e:	580a      	ldr	r2, [r1, r0]
    8650:	bb32      	cbnz	r2, 86a0 <usbd_ep_data_handler+0xdc>
    return NRFX_USBD_EP_BITPOS(ep);
    8652:	2b00      	cmp	r3, #0
    8654:	db00      	blt.n	8658 <usbd_ep_data_handler+0x94>
    8656:	2210      	movs	r2, #16
    8658:	f003 030f 	and.w	r3, r3, #15
    865c:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    865e:	2201      	movs	r2, #1
    8660:	fa02 f303 	lsl.w	r3, r2, r3
    8664:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8666:	4a2c      	ldr	r2, [pc, #176]	; (8718 <usbd_ep_data_handler+0x154>)
    8668:	e8d2 1fef 	ldaex	r1, [r2]
    866c:	4019      	ands	r1, r3
    866e:	e8c2 1fe0 	stlex	r0, r1, [r2]
    8672:	2800      	cmp	r0, #0
    8674:	d014      	beq.n	86a0 <usbd_ep_data_handler+0xdc>
    8676:	e7f7      	b.n	8668 <usbd_ep_data_handler+0xa4>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8678:	492d      	ldr	r1, [pc, #180]	; (8730 <usbd_ep_data_handler+0x16c>)
    867a:	e7e0      	b.n	863e <usbd_ep_data_handler+0x7a>
    return NRFX_USBD_EP_BITPOS(ep);
    867c:	2b00      	cmp	r3, #0
    867e:	db20      	blt.n	86c2 <usbd_ep_data_handler+0xfe>
    8680:	2210      	movs	r2, #16
    8682:	f003 030f 	and.w	r3, r3, #15
    8686:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8688:	2201      	movs	r2, #1
    868a:	fa02 f303 	lsl.w	r3, r2, r3
    868e:	43db      	mvns	r3, r3
    8690:	4a21      	ldr	r2, [pc, #132]	; (8718 <usbd_ep_data_handler+0x154>)
    8692:	e8d2 1fef 	ldaex	r1, [r2]
    8696:	4019      	ands	r1, r3
    8698:	e8c2 1fe0 	stlex	r0, r1, [r2]
    869c:	2800      	cmp	r0, #0
    869e:	d1f8      	bne.n	8692 <usbd_ep_data_handler+0xce>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    86a0:	4b1d      	ldr	r3, [pc, #116]	; (8718 <usbd_ep_data_handler+0x154>)
    86a2:	681b      	ldr	r3, [r3, #0]
    86a4:	421d      	tst	r5, r3
    86a6:	d1a9      	bne.n	85fc <usbd_ep_data_handler+0x38>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    86a8:	2306      	movs	r3, #6
    86aa:	f88d 3004 	strb.w	r3, [sp, #4]
    86ae:	f88d 4006 	strb.w	r4, [sp, #6]
    86b2:	2300      	movs	r3, #0
    86b4:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    86b8:	4b18      	ldr	r3, [pc, #96]	; (871c <usbd_ep_data_handler+0x158>)
    86ba:	681b      	ldr	r3, [r3, #0]
    86bc:	a801      	add	r0, sp, #4
    86be:	4798      	blx	r3
    86c0:	e79c      	b.n	85fc <usbd_ep_data_handler+0x38>
    return NRFX_USBD_EP_BITPOS(ep);
    86c2:	2200      	movs	r2, #0
    86c4:	e7dd      	b.n	8682 <usbd_ep_data_handler+0xbe>
    86c6:	f005 fd47 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    86ca:	b110      	cbz	r0, 86d2 <usbd_ep_data_handler+0x10e>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    86cc:	4b15      	ldr	r3, [pc, #84]	; (8724 <usbd_ep_data_handler+0x160>)
    86ce:	2200      	movs	r2, #0
    86d0:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    86d2:	4b15      	ldr	r3, [pc, #84]	; (8728 <usbd_ep_data_handler+0x164>)
    86d4:	2200      	movs	r2, #0
    86d6:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    86d8:	4b14      	ldr	r3, [pc, #80]	; (872c <usbd_ep_data_handler+0x168>)
    86da:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
    86de:	2b03      	cmp	r3, #3
    86e0:	d00e      	beq.n	8700 <usbd_ep_data_handler+0x13c>
    else if (p_state->handler.feeder == NULL)
    86e2:	4b12      	ldr	r3, [pc, #72]	; (872c <usbd_ep_data_handler+0x168>)
    86e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    86e8:	2b00      	cmp	r3, #0
    86ea:	d1d9      	bne.n	86a0 <usbd_ep_data_handler+0xdc>
    86ec:	4b0a      	ldr	r3, [pc, #40]	; (8718 <usbd_ep_data_handler+0x154>)
    86ee:	e8d3 2fef 	ldaex	r2, [r3]
    86f2:	f022 0201 	bic.w	r2, r2, #1
    86f6:	e8c3 2fe1 	stlex	r1, r2, [r3]
    86fa:	2900      	cmp	r1, #0
    86fc:	d0d0      	beq.n	86a0 <usbd_ep_data_handler+0xdc>
    86fe:	e7f6      	b.n	86ee <usbd_ep_data_handler+0x12a>
    8700:	4b05      	ldr	r3, [pc, #20]	; (8718 <usbd_ep_data_handler+0x154>)
    8702:	e8d3 2fef 	ldaex	r2, [r3]
    8706:	f022 0201 	bic.w	r2, r2, #1
    870a:	e8c3 2fe1 	stlex	r1, r2, [r3]
    870e:	2900      	cmp	r1, #0
    8710:	d0c6      	beq.n	86a0 <usbd_ep_data_handler+0xdc>
    8712:	e7f6      	b.n	8702 <usbd_ep_data_handler+0x13e>
    8714:	20001d54 	.word	0x20001d54
    8718:	20001ce4 	.word	0x20001ce4
    871c:	20001e78 	.word	0x20001e78
    8720:	00010034 	.word	0x00010034
    8724:	40027c1c 	.word	0x40027c1c
    8728:	20001f23 	.word	0x20001f23
    872c:	20001d58 	.word	0x20001d58
    8730:	20001de8 	.word	0x20001de8

00008734 <ev_setup_data_handler>:
{
    8734:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    8736:	4b07      	ldr	r3, [pc, #28]	; (8754 <ev_setup_data_handler+0x20>)
    8738:	7818      	ldrb	r0, [r3, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    873a:	f993 3000 	ldrsb.w	r3, [r3]
    873e:	2b00      	cmp	r3, #0
    8740:	db06      	blt.n	8750 <ev_setup_data_handler+0x1c>
    8742:	2110      	movs	r1, #16
    8744:	f003 030f 	and.w	r3, r3, #15
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    8748:	4419      	add	r1, r3
    874a:	f7ff ff3b 	bl	85c4 <usbd_ep_data_handler>
}
    874e:	bd08      	pop	{r3, pc}
    return NRFX_USBD_EP_BITPOS(ep);
    8750:	2100      	movs	r1, #0
    8752:	e7f7      	b.n	8744 <ev_setup_data_handler+0x10>
    8754:	20001f25 	.word	0x20001f25

00008758 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    8758:	b500      	push	{lr}
    875a:	b083      	sub	sp, #12
    875c:	f005 fcfc 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8760:	b110      	cbz	r0, 8768 <ev_dma_epout8_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8762:	4b14      	ldr	r3, [pc, #80]	; (87b4 <ev_dma_epout8_handler+0x5c>)
    8764:	2200      	movs	r2, #0
    8766:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8768:	4b13      	ldr	r3, [pc, #76]	; (87b8 <ev_dma_epout8_handler+0x60>)
    876a:	2200      	movs	r2, #0
    876c:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    876e:	4b13      	ldr	r3, [pc, #76]	; (87bc <ev_dma_epout8_handler+0x64>)
    8770:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
    8774:	2b03      	cmp	r3, #3
    8776:	d019      	beq.n	87ac <ev_dma_epout8_handler+0x54>
    else if (p_state->handler.consumer == NULL)
    8778:	4b10      	ldr	r3, [pc, #64]	; (87bc <ev_dma_epout8_handler+0x64>)
    877a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    877e:	b9ab      	cbnz	r3, 87ac <ev_dma_epout8_handler+0x54>
    8780:	4b0f      	ldr	r3, [pc, #60]	; (87c0 <ev_dma_epout8_handler+0x68>)
    8782:	e8d3 2fef 	ldaex	r2, [r3]
    8786:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    878a:	e8c3 2fe1 	stlex	r1, r2, [r3]
    878e:	2900      	cmp	r1, #0
    8790:	d1f7      	bne.n	8782 <ev_dma_epout8_handler+0x2a>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8792:	2306      	movs	r3, #6
    8794:	f88d 3004 	strb.w	r3, [sp, #4]
    8798:	2308      	movs	r3, #8
    879a:	f88d 3006 	strb.w	r3, [sp, #6]
    879e:	2300      	movs	r3, #0
    87a0:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    87a4:	4b07      	ldr	r3, [pc, #28]	; (87c4 <ev_dma_epout8_handler+0x6c>)
    87a6:	681b      	ldr	r3, [r3, #0]
    87a8:	a801      	add	r0, sp, #4
    87aa:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    87ac:	b003      	add	sp, #12
    87ae:	f85d fb04 	ldr.w	pc, [sp], #4
    87b2:	bf00      	nop
    87b4:	40027c1c 	.word	0x40027c1c
    87b8:	20001f23 	.word	0x20001f23
    87bc:	20001d58 	.word	0x20001d58
    87c0:	20001ce4 	.word	0x20001ce4
    87c4:	20001e78 	.word	0x20001e78

000087c8 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    87c8:	b500      	push	{lr}
    87ca:	b083      	sub	sp, #12
    87cc:	f005 fcc4 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    87d0:	b110      	cbz	r0, 87d8 <ev_dma_epin8_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    87d2:	4b19      	ldr	r3, [pc, #100]	; (8838 <ev_dma_epin8_handler+0x70>)
    87d4:	2200      	movs	r2, #0
    87d6:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    87d8:	4b18      	ldr	r3, [pc, #96]	; (883c <ev_dma_epin8_handler+0x74>)
    87da:	2200      	movs	r2, #0
    87dc:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    87de:	4b18      	ldr	r3, [pc, #96]	; (8840 <ev_dma_epin8_handler+0x78>)
    87e0:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
    87e4:	2b03      	cmp	r3, #3
    87e6:	d01a      	beq.n	881e <ev_dma_epin8_handler+0x56>
    else if (p_state->handler.feeder == NULL)
    87e8:	4b15      	ldr	r3, [pc, #84]	; (8840 <ev_dma_epin8_handler+0x78>)
    87ea:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    87ee:	b9fb      	cbnz	r3, 8830 <ev_dma_epin8_handler+0x68>
    87f0:	4b14      	ldr	r3, [pc, #80]	; (8844 <ev_dma_epin8_handler+0x7c>)
    87f2:	e8d3 2fef 	ldaex	r2, [r3]
    87f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    87fa:	e8c3 2fe1 	stlex	r1, r2, [r3]
    87fe:	2900      	cmp	r1, #0
    8800:	d1f7      	bne.n	87f2 <ev_dma_epin8_handler+0x2a>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8802:	2306      	movs	r3, #6
    8804:	f88d 3004 	strb.w	r3, [sp, #4]
    8808:	2388      	movs	r3, #136	; 0x88
    880a:	f88d 3006 	strb.w	r3, [sp, #6]
    880e:	2300      	movs	r3, #0
    8810:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    8814:	4b0c      	ldr	r3, [pc, #48]	; (8848 <ev_dma_epin8_handler+0x80>)
    8816:	681b      	ldr	r3, [r3, #0]
    8818:	a801      	add	r0, sp, #4
    881a:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    881c:	e008      	b.n	8830 <ev_dma_epin8_handler+0x68>
    881e:	4b09      	ldr	r3, [pc, #36]	; (8844 <ev_dma_epin8_handler+0x7c>)
    8820:	e8d3 2fef 	ldaex	r2, [r3]
    8824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    8828:	e8c3 2fe1 	stlex	r1, r2, [r3]
    882c:	2900      	cmp	r1, #0
    882e:	d1f7      	bne.n	8820 <ev_dma_epin8_handler+0x58>
    8830:	b003      	add	sp, #12
    8832:	f85d fb04 	ldr.w	pc, [sp], #4
    8836:	bf00      	nop
    8838:	40027c1c 	.word	0x40027c1c
    883c:	20001f23 	.word	0x20001f23
    8840:	20001d58 	.word	0x20001d58
    8844:	20001ce4 	.word	0x20001ce4
    8848:	20001e78 	.word	0x20001e78

0000884c <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    884c:	b508      	push	{r3, lr}
    884e:	f005 fc83 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8852:	b110      	cbz	r0, 885a <ev_dma_epin0_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8854:	4b11      	ldr	r3, [pc, #68]	; (889c <ev_dma_epin0_handler+0x50>)
    8856:	2200      	movs	r2, #0
    8858:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    885a:	4b11      	ldr	r3, [pc, #68]	; (88a0 <ev_dma_epin0_handler+0x54>)
    885c:	2200      	movs	r2, #0
    885e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8860:	4b10      	ldr	r3, [pc, #64]	; (88a4 <ev_dma_epin0_handler+0x58>)
    8862:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
    8866:	2b03      	cmp	r3, #3
    8868:	d004      	beq.n	8874 <ev_dma_epin0_handler+0x28>
    else if (p_state->handler.feeder == NULL)
    886a:	4b0e      	ldr	r3, [pc, #56]	; (88a4 <ev_dma_epin0_handler+0x58>)
    886c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8870:	b153      	cbz	r3, 8888 <ev_dma_epin0_handler+0x3c>
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    8872:	bd08      	pop	{r3, pc}
    8874:	4b0c      	ldr	r3, [pc, #48]	; (88a8 <ev_dma_epin0_handler+0x5c>)
    8876:	e8d3 2fef 	ldaex	r2, [r3]
    887a:	f022 0201 	bic.w	r2, r2, #1
    887e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    8882:	2900      	cmp	r1, #0
    8884:	d0f5      	beq.n	8872 <ev_dma_epin0_handler+0x26>
    8886:	e7f6      	b.n	8876 <ev_dma_epin0_handler+0x2a>
    8888:	4b07      	ldr	r3, [pc, #28]	; (88a8 <ev_dma_epin0_handler+0x5c>)
    888a:	e8d3 2fef 	ldaex	r2, [r3]
    888e:	f022 0201 	bic.w	r2, r2, #1
    8892:	e8c3 2fe1 	stlex	r1, r2, [r3]
    8896:	2900      	cmp	r1, #0
    8898:	d0eb      	beq.n	8872 <ev_dma_epin0_handler+0x26>
    889a:	e7f6      	b.n	888a <ev_dma_epin0_handler+0x3e>
    889c:	40027c1c 	.word	0x40027c1c
    88a0:	20001f23 	.word	0x20001f23
    88a4:	20001d58 	.word	0x20001d58
    88a8:	20001ce4 	.word	0x20001ce4

000088ac <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    88ac:	b508      	push	{r3, lr}
    88ae:	f005 fc53 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    88b2:	b110      	cbz	r0, 88ba <ev_dma_epin7_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    88b4:	4b11      	ldr	r3, [pc, #68]	; (88fc <ev_dma_epin7_handler+0x50>)
    88b6:	2200      	movs	r2, #0
    88b8:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    88ba:	4b11      	ldr	r3, [pc, #68]	; (8900 <ev_dma_epin7_handler+0x54>)
    88bc:	2200      	movs	r2, #0
    88be:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    88c0:	4b10      	ldr	r3, [pc, #64]	; (8904 <ev_dma_epin7_handler+0x58>)
    88c2:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
    88c6:	2b03      	cmp	r3, #3
    88c8:	d00d      	beq.n	88e6 <ev_dma_epin7_handler+0x3a>
    else if (p_state->handler.feeder == NULL)
    88ca:	4b0e      	ldr	r3, [pc, #56]	; (8904 <ev_dma_epin7_handler+0x58>)
    88cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    88d0:	b993      	cbnz	r3, 88f8 <ev_dma_epin7_handler+0x4c>
    88d2:	4b0d      	ldr	r3, [pc, #52]	; (8908 <ev_dma_epin7_handler+0x5c>)
    88d4:	e8d3 2fef 	ldaex	r2, [r3]
    88d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    88dc:	e8c3 2fe1 	stlex	r1, r2, [r3]
    88e0:	2900      	cmp	r1, #0
    88e2:	d009      	beq.n	88f8 <ev_dma_epin7_handler+0x4c>
    88e4:	e7f6      	b.n	88d4 <ev_dma_epin7_handler+0x28>
    88e6:	4b08      	ldr	r3, [pc, #32]	; (8908 <ev_dma_epin7_handler+0x5c>)
    88e8:	e8d3 2fef 	ldaex	r2, [r3]
    88ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    88f0:	e8c3 2fe1 	stlex	r1, r2, [r3]
    88f4:	2900      	cmp	r1, #0
    88f6:	d1f7      	bne.n	88e8 <ev_dma_epin7_handler+0x3c>
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    88f8:	bd08      	pop	{r3, pc}
    88fa:	bf00      	nop
    88fc:	40027c1c 	.word	0x40027c1c
    8900:	20001f23 	.word	0x20001f23
    8904:	20001d58 	.word	0x20001d58
    8908:	20001ce4 	.word	0x20001ce4

0000890c <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    890c:	b508      	push	{r3, lr}
    890e:	f005 fc23 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8912:	b110      	cbz	r0, 891a <ev_dma_epin5_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8914:	4b11      	ldr	r3, [pc, #68]	; (895c <ev_dma_epin5_handler+0x50>)
    8916:	2200      	movs	r2, #0
    8918:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    891a:	4b11      	ldr	r3, [pc, #68]	; (8960 <ev_dma_epin5_handler+0x54>)
    891c:	2200      	movs	r2, #0
    891e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8920:	4b10      	ldr	r3, [pc, #64]	; (8964 <ev_dma_epin5_handler+0x58>)
    8922:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
    8926:	2b03      	cmp	r3, #3
    8928:	d00d      	beq.n	8946 <ev_dma_epin5_handler+0x3a>
    else if (p_state->handler.feeder == NULL)
    892a:	4b0e      	ldr	r3, [pc, #56]	; (8964 <ev_dma_epin5_handler+0x58>)
    892c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    8930:	b993      	cbnz	r3, 8958 <ev_dma_epin5_handler+0x4c>
    8932:	4b0d      	ldr	r3, [pc, #52]	; (8968 <ev_dma_epin5_handler+0x5c>)
    8934:	e8d3 2fef 	ldaex	r2, [r3]
    8938:	f022 0220 	bic.w	r2, r2, #32
    893c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    8940:	2900      	cmp	r1, #0
    8942:	d009      	beq.n	8958 <ev_dma_epin5_handler+0x4c>
    8944:	e7f6      	b.n	8934 <ev_dma_epin5_handler+0x28>
    8946:	4b08      	ldr	r3, [pc, #32]	; (8968 <ev_dma_epin5_handler+0x5c>)
    8948:	e8d3 2fef 	ldaex	r2, [r3]
    894c:	f022 0220 	bic.w	r2, r2, #32
    8950:	e8c3 2fe1 	stlex	r1, r2, [r3]
    8954:	2900      	cmp	r1, #0
    8956:	d1f7      	bne.n	8948 <ev_dma_epin5_handler+0x3c>
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    8958:	bd08      	pop	{r3, pc}
    895a:	bf00      	nop
    895c:	40027c1c 	.word	0x40027c1c
    8960:	20001f23 	.word	0x20001f23
    8964:	20001d58 	.word	0x20001d58
    8968:	20001ce4 	.word	0x20001ce4

0000896c <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    896c:	b508      	push	{r3, lr}
    896e:	f005 fbf3 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8972:	b110      	cbz	r0, 897a <ev_dma_epin6_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8974:	4b11      	ldr	r3, [pc, #68]	; (89bc <ev_dma_epin6_handler+0x50>)
    8976:	2200      	movs	r2, #0
    8978:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    897a:	4b11      	ldr	r3, [pc, #68]	; (89c0 <ev_dma_epin6_handler+0x54>)
    897c:	2200      	movs	r2, #0
    897e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8980:	4b10      	ldr	r3, [pc, #64]	; (89c4 <ev_dma_epin6_handler+0x58>)
    8982:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
    8986:	2b03      	cmp	r3, #3
    8988:	d00d      	beq.n	89a6 <ev_dma_epin6_handler+0x3a>
    else if (p_state->handler.feeder == NULL)
    898a:	4b0e      	ldr	r3, [pc, #56]	; (89c4 <ev_dma_epin6_handler+0x58>)
    898c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    8990:	b993      	cbnz	r3, 89b8 <ev_dma_epin6_handler+0x4c>
    8992:	4b0d      	ldr	r3, [pc, #52]	; (89c8 <ev_dma_epin6_handler+0x5c>)
    8994:	e8d3 2fef 	ldaex	r2, [r3]
    8998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    899c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    89a0:	2900      	cmp	r1, #0
    89a2:	d009      	beq.n	89b8 <ev_dma_epin6_handler+0x4c>
    89a4:	e7f6      	b.n	8994 <ev_dma_epin6_handler+0x28>
    89a6:	4b08      	ldr	r3, [pc, #32]	; (89c8 <ev_dma_epin6_handler+0x5c>)
    89a8:	e8d3 2fef 	ldaex	r2, [r3]
    89ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    89b0:	e8c3 2fe1 	stlex	r1, r2, [r3]
    89b4:	2900      	cmp	r1, #0
    89b6:	d1f7      	bne.n	89a8 <ev_dma_epin6_handler+0x3c>
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    89b8:	bd08      	pop	{r3, pc}
    89ba:	bf00      	nop
    89bc:	40027c1c 	.word	0x40027c1c
    89c0:	20001f23 	.word	0x20001f23
    89c4:	20001d58 	.word	0x20001d58
    89c8:	20001ce4 	.word	0x20001ce4

000089cc <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    89cc:	b508      	push	{r3, lr}
    89ce:	f005 fbc3 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    89d2:	b110      	cbz	r0, 89da <ev_dma_epin1_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    89d4:	4b11      	ldr	r3, [pc, #68]	; (8a1c <ev_dma_epin1_handler+0x50>)
    89d6:	2200      	movs	r2, #0
    89d8:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    89da:	4b11      	ldr	r3, [pc, #68]	; (8a20 <ev_dma_epin1_handler+0x54>)
    89dc:	2200      	movs	r2, #0
    89de:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    89e0:	4b10      	ldr	r3, [pc, #64]	; (8a24 <ev_dma_epin1_handler+0x58>)
    89e2:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
    89e6:	2b03      	cmp	r3, #3
    89e8:	d00d      	beq.n	8a06 <ev_dma_epin1_handler+0x3a>
    else if (p_state->handler.feeder == NULL)
    89ea:	4b0e      	ldr	r3, [pc, #56]	; (8a24 <ev_dma_epin1_handler+0x58>)
    89ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    89f0:	b993      	cbnz	r3, 8a18 <ev_dma_epin1_handler+0x4c>
    89f2:	4b0d      	ldr	r3, [pc, #52]	; (8a28 <ev_dma_epin1_handler+0x5c>)
    89f4:	e8d3 2fef 	ldaex	r2, [r3]
    89f8:	f022 0202 	bic.w	r2, r2, #2
    89fc:	e8c3 2fe1 	stlex	r1, r2, [r3]
    8a00:	2900      	cmp	r1, #0
    8a02:	d009      	beq.n	8a18 <ev_dma_epin1_handler+0x4c>
    8a04:	e7f6      	b.n	89f4 <ev_dma_epin1_handler+0x28>
    8a06:	4b08      	ldr	r3, [pc, #32]	; (8a28 <ev_dma_epin1_handler+0x5c>)
    8a08:	e8d3 2fef 	ldaex	r2, [r3]
    8a0c:	f022 0202 	bic.w	r2, r2, #2
    8a10:	e8c3 2fe1 	stlex	r1, r2, [r3]
    8a14:	2900      	cmp	r1, #0
    8a16:	d1f7      	bne.n	8a08 <ev_dma_epin1_handler+0x3c>
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    8a18:	bd08      	pop	{r3, pc}
    8a1a:	bf00      	nop
    8a1c:	40027c1c 	.word	0x40027c1c
    8a20:	20001f23 	.word	0x20001f23
    8a24:	20001d58 	.word	0x20001d58
    8a28:	20001ce4 	.word	0x20001ce4

00008a2c <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    8a2c:	b508      	push	{r3, lr}
    8a2e:	f005 fb93 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8a32:	b110      	cbz	r0, 8a3a <ev_dma_epin2_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8a34:	4b11      	ldr	r3, [pc, #68]	; (8a7c <ev_dma_epin2_handler+0x50>)
    8a36:	2200      	movs	r2, #0
    8a38:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8a3a:	4b11      	ldr	r3, [pc, #68]	; (8a80 <ev_dma_epin2_handler+0x54>)
    8a3c:	2200      	movs	r2, #0
    8a3e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8a40:	4b10      	ldr	r3, [pc, #64]	; (8a84 <ev_dma_epin2_handler+0x58>)
    8a42:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
    8a46:	2b03      	cmp	r3, #3
    8a48:	d00d      	beq.n	8a66 <ev_dma_epin2_handler+0x3a>
    else if (p_state->handler.feeder == NULL)
    8a4a:	4b0e      	ldr	r3, [pc, #56]	; (8a84 <ev_dma_epin2_handler+0x58>)
    8a4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    8a50:	b993      	cbnz	r3, 8a78 <ev_dma_epin2_handler+0x4c>
    8a52:	4b0d      	ldr	r3, [pc, #52]	; (8a88 <ev_dma_epin2_handler+0x5c>)
    8a54:	e8d3 2fef 	ldaex	r2, [r3]
    8a58:	f022 0204 	bic.w	r2, r2, #4
    8a5c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    8a60:	2900      	cmp	r1, #0
    8a62:	d009      	beq.n	8a78 <ev_dma_epin2_handler+0x4c>
    8a64:	e7f6      	b.n	8a54 <ev_dma_epin2_handler+0x28>
    8a66:	4b08      	ldr	r3, [pc, #32]	; (8a88 <ev_dma_epin2_handler+0x5c>)
    8a68:	e8d3 2fef 	ldaex	r2, [r3]
    8a6c:	f022 0204 	bic.w	r2, r2, #4
    8a70:	e8c3 2fe1 	stlex	r1, r2, [r3]
    8a74:	2900      	cmp	r1, #0
    8a76:	d1f7      	bne.n	8a68 <ev_dma_epin2_handler+0x3c>
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    8a78:	bd08      	pop	{r3, pc}
    8a7a:	bf00      	nop
    8a7c:	40027c1c 	.word	0x40027c1c
    8a80:	20001f23 	.word	0x20001f23
    8a84:	20001d58 	.word	0x20001d58
    8a88:	20001ce4 	.word	0x20001ce4

00008a8c <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    8a8c:	b508      	push	{r3, lr}
    8a8e:	f005 fb63 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8a92:	b110      	cbz	r0, 8a9a <ev_dma_epin3_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8a94:	4b11      	ldr	r3, [pc, #68]	; (8adc <ev_dma_epin3_handler+0x50>)
    8a96:	2200      	movs	r2, #0
    8a98:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8a9a:	4b11      	ldr	r3, [pc, #68]	; (8ae0 <ev_dma_epin3_handler+0x54>)
    8a9c:	2200      	movs	r2, #0
    8a9e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8aa0:	4b10      	ldr	r3, [pc, #64]	; (8ae4 <ev_dma_epin3_handler+0x58>)
    8aa2:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
    8aa6:	2b03      	cmp	r3, #3
    8aa8:	d00d      	beq.n	8ac6 <ev_dma_epin3_handler+0x3a>
    else if (p_state->handler.feeder == NULL)
    8aaa:	4b0e      	ldr	r3, [pc, #56]	; (8ae4 <ev_dma_epin3_handler+0x58>)
    8aac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    8ab0:	b993      	cbnz	r3, 8ad8 <ev_dma_epin3_handler+0x4c>
    8ab2:	4b0d      	ldr	r3, [pc, #52]	; (8ae8 <ev_dma_epin3_handler+0x5c>)
    8ab4:	e8d3 2fef 	ldaex	r2, [r3]
    8ab8:	f022 0208 	bic.w	r2, r2, #8
    8abc:	e8c3 2fe1 	stlex	r1, r2, [r3]
    8ac0:	2900      	cmp	r1, #0
    8ac2:	d009      	beq.n	8ad8 <ev_dma_epin3_handler+0x4c>
    8ac4:	e7f6      	b.n	8ab4 <ev_dma_epin3_handler+0x28>
    8ac6:	4b08      	ldr	r3, [pc, #32]	; (8ae8 <ev_dma_epin3_handler+0x5c>)
    8ac8:	e8d3 2fef 	ldaex	r2, [r3]
    8acc:	f022 0208 	bic.w	r2, r2, #8
    8ad0:	e8c3 2fe1 	stlex	r1, r2, [r3]
    8ad4:	2900      	cmp	r1, #0
    8ad6:	d1f7      	bne.n	8ac8 <ev_dma_epin3_handler+0x3c>
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    8ad8:	bd08      	pop	{r3, pc}
    8ada:	bf00      	nop
    8adc:	40027c1c 	.word	0x40027c1c
    8ae0:	20001f23 	.word	0x20001f23
    8ae4:	20001d58 	.word	0x20001d58
    8ae8:	20001ce4 	.word	0x20001ce4

00008aec <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    8aec:	b508      	push	{r3, lr}
    8aee:	f005 fb33 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8af2:	b110      	cbz	r0, 8afa <ev_dma_epin4_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8af4:	4b11      	ldr	r3, [pc, #68]	; (8b3c <ev_dma_epin4_handler+0x50>)
    8af6:	2200      	movs	r2, #0
    8af8:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8afa:	4b11      	ldr	r3, [pc, #68]	; (8b40 <ev_dma_epin4_handler+0x54>)
    8afc:	2200      	movs	r2, #0
    8afe:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8b00:	4b10      	ldr	r3, [pc, #64]	; (8b44 <ev_dma_epin4_handler+0x58>)
    8b02:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
    8b06:	2b03      	cmp	r3, #3
    8b08:	d00d      	beq.n	8b26 <ev_dma_epin4_handler+0x3a>
    else if (p_state->handler.feeder == NULL)
    8b0a:	4b0e      	ldr	r3, [pc, #56]	; (8b44 <ev_dma_epin4_handler+0x58>)
    8b0c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    8b10:	b993      	cbnz	r3, 8b38 <ev_dma_epin4_handler+0x4c>
    8b12:	4b0d      	ldr	r3, [pc, #52]	; (8b48 <ev_dma_epin4_handler+0x5c>)
    8b14:	e8d3 2fef 	ldaex	r2, [r3]
    8b18:	f022 0210 	bic.w	r2, r2, #16
    8b1c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    8b20:	2900      	cmp	r1, #0
    8b22:	d009      	beq.n	8b38 <ev_dma_epin4_handler+0x4c>
    8b24:	e7f6      	b.n	8b14 <ev_dma_epin4_handler+0x28>
    8b26:	4b08      	ldr	r3, [pc, #32]	; (8b48 <ev_dma_epin4_handler+0x5c>)
    8b28:	e8d3 2fef 	ldaex	r2, [r3]
    8b2c:	f022 0210 	bic.w	r2, r2, #16
    8b30:	e8c3 2fe1 	stlex	r1, r2, [r3]
    8b34:	2900      	cmp	r1, #0
    8b36:	d1f7      	bne.n	8b28 <ev_dma_epin4_handler+0x3c>
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    8b38:	bd08      	pop	{r3, pc}
    8b3a:	bf00      	nop
    8b3c:	40027c1c 	.word	0x40027c1c
    8b40:	20001f23 	.word	0x20001f23
    8b44:	20001d58 	.word	0x20001d58
    8b48:	20001ce4 	.word	0x20001ce4

00008b4c <nrfx_usbd_isoinconfig_set>:
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    8b4c:	4b01      	ldr	r3, [pc, #4]	; (8b54 <nrfx_usbd_isoinconfig_set+0x8>)
    8b4e:	f8c3 0530 	str.w	r0, [r3, #1328]	; 0x530
}
    8b52:	4770      	bx	lr
    8b54:	50036000 	.word	0x50036000

00008b58 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    8b58:	2300      	movs	r3, #0
    8b5a:	4a02      	ldr	r2, [pc, #8]	; (8b64 <nrfx_usbd_uninit+0xc>)
    8b5c:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    8b5e:	4a02      	ldr	r2, [pc, #8]	; (8b68 <nrfx_usbd_uninit+0x10>)
    8b60:	7013      	strb	r3, [r2, #0]
    return;
}
    8b62:	4770      	bx	lr
    8b64:	20001e78 	.word	0x20001e78
    8b68:	20001f24 	.word	0x20001f24

00008b6c <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    8b6c:	b538      	push	{r3, r4, r5, lr}
    p_reg->EVENTCAUSE = flags;
    8b6e:	4b41      	ldr	r3, [pc, #260]	; (8c74 <nrfx_usbd_enable+0x108>)
    8b70:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8b74:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    8b78:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD, NRF_USBD_EVENTCAUSE_READY_MASK);

    usbd_enable();
    8b7c:	f7ff fc8c 	bl	8498 <usbd_enable>
}

/* Errata: Unexpected behavior after reset. **/
static inline bool nrfx_usbd_errata_223(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_223();
    8b80:	f005 faec 	bl	e15c <nrf52_errata_223>

    if (nrfx_usbd_errata_223() && m_first_enable)
    8b84:	b118      	cbz	r0, 8b8e <nrfx_usbd_enable+0x22>
    8b86:	4b3c      	ldr	r3, [pc, #240]	; (8c78 <nrfx_usbd_enable+0x10c>)
    8b88:	781b      	ldrb	r3, [r3, #0]
    8b8a:	2b00      	cmp	r3, #0
    8b8c:	d15e      	bne.n	8c4c <nrfx_usbd_enable+0xe0>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    8b8e:	f005 fae1 	bl	e154 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    8b92:	4604      	mov	r4, r0
    8b94:	b1b8      	cbz	r0, 8bc6 <nrfx_usbd_enable+0x5a>
	__asm__ volatile(
    8b96:	f04f 0220 	mov.w	r2, #32
    8b9a:	f3ef 8311 	mrs	r3, BASEPRI
    8b9e:	f382 8812 	msr	BASEPRI_MAX, r2
    8ba2:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    8ba6:	4a35      	ldr	r2, [pc, #212]	; (8c7c <nrfx_usbd_enable+0x110>)
    8ba8:	6812      	ldr	r2, [r2, #0]
    8baa:	2a00      	cmp	r2, #0
    8bac:	d159      	bne.n	8c62 <nrfx_usbd_enable+0xf6>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8bae:	4a33      	ldr	r2, [pc, #204]	; (8c7c <nrfx_usbd_enable+0x110>)
    8bb0:	f249 3175 	movw	r1, #37749	; 0x9375
    8bb4:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    8bb6:	4832      	ldr	r0, [pc, #200]	; (8c80 <nrfx_usbd_enable+0x114>)
    8bb8:	2503      	movs	r5, #3
    8bba:	6005      	str	r5, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8bbc:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    8bbe:	f383 8811 	msr	BASEPRI, r3
    8bc2:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
    8bc6:	f005 fac1 	bl	e14c <nrf52_errata_166>
#endif
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_166())
    8bca:	b150      	cbz	r0, 8be2 <nrfx_usbd_enable+0x76>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    8bcc:	4b2d      	ldr	r3, [pc, #180]	; (8c84 <nrfx_usbd_enable+0x118>)
    8bce:	f240 72e3 	movw	r2, #2019	; 0x7e3
    8bd2:	601a      	str	r2, [r3, #0]
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    8bd4:	3304      	adds	r3, #4
    8bd6:	2240      	movs	r2, #64	; 0x40
    8bd8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    8bda:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    8bde:	f3bf 8f4f 	dsb	sy
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    8be2:	4b24      	ldr	r3, [pc, #144]	; (8c74 <nrfx_usbd_enable+0x108>)
    8be4:	2280      	movs	r2, #128	; 0x80
    8be6:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_ZERODATA);
    }
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    8bea:	2000      	movs	r0, #0
    8bec:	f7ff ffae 	bl	8b4c <nrfx_usbd_isoinconfig_set>
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    8bf0:	4b25      	ldr	r3, [pc, #148]	; (8c88 <nrfx_usbd_enable+0x11c>)
    8bf2:	f240 12ff 	movw	r2, #511	; 0x1ff
    8bf6:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    8bf8:	4b24      	ldr	r3, [pc, #144]	; (8c8c <nrfx_usbd_enable+0x120>)
    8bfa:	2200      	movs	r2, #0
    8bfc:	601a      	str	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    8bfe:	f005 faab 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8c02:	b110      	cbz	r0, 8c0a <nrfx_usbd_enable+0x9e>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8c04:	4b22      	ldr	r3, [pc, #136]	; (8c90 <nrfx_usbd_enable+0x124>)
    8c06:	2200      	movs	r2, #0
    8c08:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8c0a:	2300      	movs	r3, #0
    8c0c:	4a21      	ldr	r2, [pc, #132]	; (8c94 <nrfx_usbd_enable+0x128>)
    8c0e:	7013      	strb	r3, [r2, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    8c10:	4a21      	ldr	r2, [pc, #132]	; (8c98 <nrfx_usbd_enable+0x12c>)
    8c12:	7013      	strb	r3, [r2, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    8c14:	4b21      	ldr	r3, [pc, #132]	; (8c9c <nrfx_usbd_enable+0x130>)
    8c16:	2202      	movs	r2, #2
    8c18:	701a      	strb	r2, [r3, #0]

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    8c1a:	b1b4      	cbz	r4, 8c4a <nrfx_usbd_enable+0xde>
	__asm__ volatile(
    8c1c:	f04f 0220 	mov.w	r2, #32
    8c20:	f3ef 8311 	mrs	r3, BASEPRI
    8c24:	f382 8812 	msr	BASEPRI_MAX, r2
    8c28:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    8c2c:	4a13      	ldr	r2, [pc, #76]	; (8c7c <nrfx_usbd_enable+0x110>)
    8c2e:	6812      	ldr	r2, [r2, #0]
    8c30:	b9da      	cbnz	r2, 8c6a <nrfx_usbd_enable+0xfe>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8c32:	4a12      	ldr	r2, [pc, #72]	; (8c7c <nrfx_usbd_enable+0x110>)
    8c34:	f249 3175 	movw	r1, #37749	; 0x9375
    8c38:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    8c3a:	4811      	ldr	r0, [pc, #68]	; (8c80 <nrfx_usbd_enable+0x114>)
    8c3c:	2400      	movs	r4, #0
    8c3e:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8c40:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    8c42:	f383 8811 	msr	BASEPRI, r3
    8c46:	f3bf 8f6f 	isb	sy
#endif
    {
        usbd_errata_187_211_end();
    }
}
    8c4a:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    8c4c:	4b09      	ldr	r3, [pc, #36]	; (8c74 <nrfx_usbd_enable+0x108>)
    8c4e:	2400      	movs	r4, #0
    8c50:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    8c54:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
         usbd_enable();
    8c58:	f7ff fc1e 	bl	8498 <usbd_enable>
         m_first_enable = false;
    8c5c:	4b06      	ldr	r3, [pc, #24]	; (8c78 <nrfx_usbd_enable+0x10c>)
    8c5e:	701c      	strb	r4, [r3, #0]
    8c60:	e795      	b.n	8b8e <nrfx_usbd_enable+0x22>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    8c62:	4a07      	ldr	r2, [pc, #28]	; (8c80 <nrfx_usbd_enable+0x114>)
    8c64:	2103      	movs	r1, #3
    8c66:	6011      	str	r1, [r2, #0]
    8c68:	e7a9      	b.n	8bbe <nrfx_usbd_enable+0x52>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    8c6a:	4a05      	ldr	r2, [pc, #20]	; (8c80 <nrfx_usbd_enable+0x114>)
    8c6c:	2100      	movs	r1, #0
    8c6e:	6011      	str	r1, [r2, #0]
    8c70:	e7e7      	b.n	8c42 <nrfx_usbd_enable+0xd6>
    8c72:	bf00      	nop
    8c74:	50036000 	.word	0x50036000
    8c78:	2000033c 	.word	0x2000033c
    8c7c:	4006ec00 	.word	0x4006ec00
    8c80:	4006ed14 	.word	0x4006ed14
    8c84:	50036800 	.word	0x50036800
    8c88:	20001d54 	.word	0x20001d54
    8c8c:	20001ce4 	.word	0x20001ce4
    8c90:	40027c1c 	.word	0x40027c1c
    8c94:	20001f23 	.word	0x20001f23
    8c98:	20001f25 	.word	0x20001f25
    8c9c:	20001f24 	.word	0x20001f24

00008ca0 <nrfx_usbd_start>:
    }
#endif
}

void nrfx_usbd_start(bool enable_sof)
{
    8ca0:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    8ca2:	4b09      	ldr	r3, [pc, #36]	; (8cc8 <nrfx_usbd_start+0x28>)
    8ca4:	2200      	movs	r2, #0
    8ca6:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_ENDEPOUT0_MASK    |
       NRF_USBD_INT_USBEVENT_MASK     |
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
    8ca8:	b960      	cbnz	r0, 8cc4 <nrfx_usbd_start+0x24>
    uint32_t ints_to_enable =
    8caa:	4b08      	ldr	r3, [pc, #32]	; (8ccc <nrfx_usbd_start+0x2c>)
    p_reg->INTENSET = mask;
    8cac:	4c08      	ldr	r4, [pc, #32]	; (8cd0 <nrfx_usbd_start+0x30>)
    8cae:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    8cb2:	2036      	movs	r0, #54	; 0x36
    8cb4:	f7fb f830 	bl	3d18 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    8cb8:	2301      	movs	r3, #1
    8cba:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    8cbe:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    8cc2:	bd10      	pop	{r4, pc}
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    8cc4:	4b03      	ldr	r3, [pc, #12]	; (8cd4 <nrfx_usbd_start+0x34>)
    8cc6:	e7f1      	b.n	8cac <nrfx_usbd_start+0xc>
    8cc8:	20001f22 	.word	0x20001f22
    8ccc:	01c01407 	.word	0x01c01407
    8cd0:	50036000 	.word	0x50036000
    8cd4:	01e01407 	.word	0x01e01407

00008cd8 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    8cd8:	4b03      	ldr	r3, [pc, #12]	; (8ce8 <nrfx_usbd_is_enabled+0x10>)
    8cda:	7818      	ldrb	r0, [r3, #0]
}
    8cdc:	2801      	cmp	r0, #1
    8cde:	bf94      	ite	ls
    8ce0:	2000      	movls	r0, #0
    8ce2:	2001      	movhi	r0, #1
    8ce4:	4770      	bx	lr
    8ce6:	bf00      	nop
    8ce8:	20001f24 	.word	0x20001f24

00008cec <nrfx_usbd_ep_max_packet_size_set>:
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8cec:	f010 0f80 	tst.w	r0, #128	; 0x80
    8cf0:	d106      	bne.n	8d00 <nrfx_usbd_ep_max_packet_size_set+0x14>
    8cf2:	4b04      	ldr	r3, [pc, #16]	; (8d04 <nrfx_usbd_ep_max_packet_size_set+0x18>)
        NRF_USBD_EP_NR_GET(ep));
    8cf4:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8cf8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    /* Packet size cannot be higher than maximum buffer size */
    NRFX_ASSERT((NRF_USBD_EPISO_CHECK(ep) && (size <= usbd_ep_iso_capacity(ep))) ||
                (!NRF_USBD_EPISO_CHECK(ep) && (size <= NRFX_USBD_EPSIZE)));

    usbd_ep_state_t * p_state = ep_state_access(ep);
    p_state->max_packet_size = size;
    8cfc:	8181      	strh	r1, [r0, #12]
}
    8cfe:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8d00:	4b01      	ldr	r3, [pc, #4]	; (8d08 <nrfx_usbd_ep_max_packet_size_set+0x1c>)
    8d02:	e7f7      	b.n	8cf4 <nrfx_usbd_ep_max_packet_size_set+0x8>
    8d04:	20001d58 	.word	0x20001d58
    8d08:	20001de8 	.word	0x20001de8

00008d0c <nrfx_usbd_init>:
{
    8d0c:	b570      	push	{r4, r5, r6, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    8d0e:	4b25      	ldr	r3, [pc, #148]	; (8da4 <nrfx_usbd_init+0x98>)
    8d10:	781c      	ldrb	r4, [r3, #0]
    8d12:	2c00      	cmp	r4, #0
    8d14:	d144      	bne.n	8da0 <nrfx_usbd_init+0x94>
    m_event_handler = event_handler;
    8d16:	4b24      	ldr	r3, [pc, #144]	; (8da8 <nrfx_usbd_init+0x9c>)
    8d18:	6018      	str	r0, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    8d1a:	4b22      	ldr	r3, [pc, #136]	; (8da4 <nrfx_usbd_init+0x98>)
    8d1c:	2201      	movs	r2, #1
    8d1e:	701a      	strb	r2, [r3, #0]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    8d20:	4625      	mov	r5, r4
    8d22:	e012      	b.n	8d4a <nrfx_usbd_init+0x3e>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8d24:	2140      	movs	r1, #64	; 0x40
    8d26:	4630      	mov	r0, r6
    8d28:	f7ff ffe0 	bl	8cec <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8d2c:	f016 0f80 	tst.w	r6, #128	; 0x80
    8d30:	d115      	bne.n	8d5e <nrfx_usbd_init+0x52>
    8d32:	491e      	ldr	r1, [pc, #120]	; (8dac <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
    8d34:	f005 030f 	and.w	r3, r5, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8d38:	0118      	lsls	r0, r3, #4
    8d3a:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
    8d3e:	2200      	movs	r2, #0
    8d40:	739a      	strb	r2, [r3, #14]
        p_state->handler.feeder = NULL;
    8d42:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
    8d44:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    8d46:	3501      	adds	r5, #1
    8d48:	b2ed      	uxtb	r5, r5
    8d4a:	2d08      	cmp	r5, #8
    8d4c:	d81c      	bhi.n	8d88 <nrfx_usbd_init+0x7c>
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    8d4e:	f045 0680 	orr.w	r6, r5, #128	; 0x80
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8d52:	f015 0f08 	tst.w	r5, #8
    8d56:	d0e5      	beq.n	8d24 <nrfx_usbd_init+0x18>
    8d58:	f240 11ff 	movw	r1, #511	; 0x1ff
    8d5c:	e7e3      	b.n	8d26 <nrfx_usbd_init+0x1a>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8d5e:	4914      	ldr	r1, [pc, #80]	; (8db0 <nrfx_usbd_init+0xa4>)
    8d60:	e7e8      	b.n	8d34 <nrfx_usbd_init+0x28>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8d62:	2140      	movs	r1, #64	; 0x40
    8d64:	4620      	mov	r0, r4
    8d66:	f7ff ffc1 	bl	8cec <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8d6a:	f014 0f80 	tst.w	r4, #128	; 0x80
    8d6e:	d113      	bne.n	8d98 <nrfx_usbd_init+0x8c>
    8d70:	490e      	ldr	r1, [pc, #56]	; (8dac <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
    8d72:	f004 030f 	and.w	r3, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8d76:	0118      	lsls	r0, r3, #4
    8d78:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
    8d7c:	2200      	movs	r2, #0
    8d7e:	739a      	strb	r2, [r3, #14]
        p_state->handler.consumer = NULL;
    8d80:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
    8d82:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    8d84:	3401      	adds	r4, #1
    8d86:	b2e4      	uxtb	r4, r4
    8d88:	2c08      	cmp	r4, #8
    8d8a:	d807      	bhi.n	8d9c <nrfx_usbd_init+0x90>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8d8c:	f014 0f08 	tst.w	r4, #8
    8d90:	d0e7      	beq.n	8d62 <nrfx_usbd_init+0x56>
    8d92:	f240 11ff 	movw	r1, #511	; 0x1ff
    8d96:	e7e5      	b.n	8d64 <nrfx_usbd_init+0x58>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8d98:	4905      	ldr	r1, [pc, #20]	; (8db0 <nrfx_usbd_init+0xa4>)
    8d9a:	e7ea      	b.n	8d72 <nrfx_usbd_init+0x66>
    return NRFX_SUCCESS;
    8d9c:	4805      	ldr	r0, [pc, #20]	; (8db4 <nrfx_usbd_init+0xa8>)
}
    8d9e:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_STATE;
    8da0:	4805      	ldr	r0, [pc, #20]	; (8db8 <nrfx_usbd_init+0xac>)
    8da2:	e7fc      	b.n	8d9e <nrfx_usbd_init+0x92>
    8da4:	20001f24 	.word	0x20001f24
    8da8:	20001e78 	.word	0x20001e78
    8dac:	20001d58 	.word	0x20001d58
    8db0:	20001de8 	.word	0x20001de8
    8db4:	0bad0000 	.word	0x0bad0000
    8db8:	0bad0005 	.word	0x0bad0005

00008dbc <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    8dbc:	b4f0      	push	{r4, r5, r6, r7}
    return NRFX_USBD_EP_BITPOS(ep);
    8dbe:	b242      	sxtb	r2, r0
    8dc0:	2a00      	cmp	r2, #0
    8dc2:	db14      	blt.n	8dee <nrfx_usbd_ep_transfer+0x32>
    8dc4:	2410      	movs	r4, #16
    8dc6:	f002 030f 	and.w	r3, r2, #15
    8dca:	441c      	add	r4, r3
	__asm__ volatile(
    8dcc:	f04f 0320 	mov.w	r3, #32
    8dd0:	f3ef 8511 	mrs	r5, BASEPRI
    8dd4:	f383 8812 	msr	BASEPRI_MAX, r3
    8dd8:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    8ddc:	f010 070f 	ands.w	r7, r0, #15
    8de0:	d107      	bne.n	8df2 <nrfx_usbd_ep_transfer+0x36>
    8de2:	4b2f      	ldr	r3, [pc, #188]	; (8ea0 <nrfx_usbd_ep_transfer+0xe4>)
    8de4:	781b      	ldrb	r3, [r3, #0]
    8de6:	4283      	cmp	r3, r0
    8de8:	d003      	beq.n	8df2 <nrfx_usbd_ep_transfer+0x36>
    {
        ret = NRFX_ERROR_INVALID_ADDR;
    8dea:	482e      	ldr	r0, [pc, #184]	; (8ea4 <nrfx_usbd_ep_transfer+0xe8>)
    8dec:	e052      	b.n	8e94 <nrfx_usbd_ep_transfer+0xd8>
    return NRFX_USBD_EP_BITPOS(ep);
    8dee:	2400      	movs	r4, #0
    8df0:	e7e9      	b.n	8dc6 <nrfx_usbd_ep_transfer+0xa>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    8df2:	4b2d      	ldr	r3, [pc, #180]	; (8ea8 <nrfx_usbd_ep_transfer+0xec>)
    8df4:	681b      	ldr	r3, [r3, #0]
    8df6:	43db      	mvns	r3, r3
    8df8:	b29b      	uxth	r3, r3
    8dfa:	482c      	ldr	r0, [pc, #176]	; (8eac <nrfx_usbd_ep_transfer+0xf0>)
    8dfc:	6800      	ldr	r0, [r0, #0]
    8dfe:	4303      	orrs	r3, r0
    8e00:	2001      	movs	r0, #1
    8e02:	fa00 f404 	lsl.w	r4, r0, r4
    8e06:	4223      	tst	r3, r4
    8e08:	d143      	bne.n	8e92 <nrfx_usbd_ep_transfer+0xd6>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8e0a:	2a00      	cmp	r2, #0
    8e0c:	db20      	blt.n	8e50 <nrfx_usbd_ep_transfer+0x94>
    8e0e:	4828      	ldr	r0, [pc, #160]	; (8eb0 <nrfx_usbd_ep_transfer+0xf4>)
    8e10:	ea4f 1c07 	mov.w	ip, r7, lsl #4
    8e14:	eb00 1607 	add.w	r6, r0, r7, lsl #4
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
    8e18:	2a00      	cmp	r2, #0
    8e1a:	db1b      	blt.n	8e54 <nrfx_usbd_ep_transfer+0x98>
                }
            }
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    8e1c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    8e20:	4a24      	ldr	r2, [pc, #144]	; (8eb4 <nrfx_usbd_ep_transfer+0xf8>)
    8e22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    8e26:	4a24      	ldr	r2, [pc, #144]	; (8eb8 <nrfx_usbd_ep_transfer+0xfc>)
    8e28:	f840 200c 	str.w	r2, [r0, ip]
        }
        *p_context = *p_transfer;
    8e2c:	c907      	ldmia	r1, {r0, r1, r2}
    8e2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    8e32:	6073      	str	r3, [r6, #4]

        p_state->transfer_cnt = 0;
    8e34:	2300      	movs	r3, #0
    8e36:	60b3      	str	r3, [r6, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    8e38:	73b3      	strb	r3, [r6, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    8e3a:	4a1c      	ldr	r2, [pc, #112]	; (8eac <nrfx_usbd_ep_transfer+0xf0>)
    8e3c:	6813      	ldr	r3, [r2, #0]
    8e3e:	431c      	orrs	r4, r3
    8e40:	6014      	str	r4, [r2, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8e42:	4b1e      	ldr	r3, [pc, #120]	; (8ebc <nrfx_usbd_ep_transfer+0x100>)
    8e44:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    8e48:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        ret = NRFX_SUCCESS;
    8e4c:	481c      	ldr	r0, [pc, #112]	; (8ec0 <nrfx_usbd_ep_transfer+0x104>)
}
    8e4e:	e021      	b.n	8e94 <nrfx_usbd_ep_transfer+0xd8>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8e50:	481c      	ldr	r0, [pc, #112]	; (8ec4 <nrfx_usbd_ep_transfer+0x108>)
    8e52:	e7dd      	b.n	8e10 <nrfx_usbd_ep_transfer+0x54>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    8e54:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    8e58:	4a1b      	ldr	r2, [pc, #108]	; (8ec8 <nrfx_usbd_ep_transfer+0x10c>)
    8e5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    8e5e:	680a      	ldr	r2, [r1, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    8e60:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
    8e64:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    8e68:	d006      	beq.n	8e78 <nrfx_usbd_ep_transfer+0xbc>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8e6a:	688a      	ldr	r2, [r1, #8]
    8e6c:	f012 0f01 	tst.w	r2, #1
    8e70:	d10c      	bne.n	8e8c <nrfx_usbd_ep_transfer+0xd0>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    8e72:	4a16      	ldr	r2, [pc, #88]	; (8ecc <nrfx_usbd_ep_transfer+0x110>)
    8e74:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    8e76:	e7d9      	b.n	8e2c <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8e78:	688a      	ldr	r2, [r1, #8]
    8e7a:	f012 0f01 	tst.w	r2, #1
    8e7e:	d102      	bne.n	8e86 <nrfx_usbd_ep_transfer+0xca>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    8e80:	4a13      	ldr	r2, [pc, #76]	; (8ed0 <nrfx_usbd_ep_transfer+0x114>)
    8e82:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    8e84:	e7d2      	b.n	8e2c <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    8e86:	4a13      	ldr	r2, [pc, #76]	; (8ed4 <nrfx_usbd_ep_transfer+0x118>)
    8e88:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    8e8a:	e7cf      	b.n	8e2c <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    8e8c:	4a12      	ldr	r2, [pc, #72]	; (8ed8 <nrfx_usbd_ep_transfer+0x11c>)
    8e8e:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    8e90:	e7cc      	b.n	8e2c <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_BUSY;
    8e92:	4812      	ldr	r0, [pc, #72]	; (8edc <nrfx_usbd_ep_transfer+0x120>)
	__asm__ volatile(
    8e94:	f385 8811 	msr	BASEPRI, r5
    8e98:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    8e9c:	bcf0      	pop	{r4, r5, r6, r7}
    8e9e:	4770      	bx	lr
    8ea0:	20001f25 	.word	0x20001f25
    8ea4:	0bad000a 	.word	0x0bad000a
    8ea8:	20001d54 	.word	0x20001d54
    8eac:	20001ce4 	.word	0x20001ce4
    8eb0:	20001d58 	.word	0x20001d58
    8eb4:	20001c78 	.word	0x20001c78
    8eb8:	0000e161 	.word	0x0000e161
    8ebc:	e000e100 	.word	0xe000e100
    8ec0:	0bad0000 	.word	0x0bad0000
    8ec4:	20001de8 	.word	0x20001de8
    8ec8:	20001ce8 	.word	0x20001ce8
    8ecc:	0000e1ed 	.word	0x0000e1ed
    8ed0:	0000e197 	.word	0x0000e197
    8ed4:	0000e1b9 	.word	0x0000e1b9
    8ed8:	0000e22b 	.word	0x0000e22b
    8edc:	0bad000b 	.word	0x0bad000b

00008ee0 <nrfx_usbd_feeder_buffer_get>:
}

void * nrfx_usbd_feeder_buffer_get(void)
{
    return m_tx_buffer;
}
    8ee0:	4800      	ldr	r0, [pc, #0]	; (8ee4 <nrfx_usbd_feeder_buffer_get+0x4>)
    8ee2:	4770      	bx	lr
    8ee4:	20001e7c 	.word	0x20001e7c

00008ee8 <nrfx_usbd_ep_status_get>:

nrfx_usbd_ep_status_t nrfx_usbd_ep_status_get(nrfx_usbd_ep_t ep, size_t * p_size)
{
    8ee8:	b430      	push	{r4, r5}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8eea:	f010 0f80 	tst.w	r0, #128	; 0x80
    8eee:	d118      	bne.n	8f22 <nrfx_usbd_ep_status_get+0x3a>
    8ef0:	4b0e      	ldr	r3, [pc, #56]	; (8f2c <nrfx_usbd_ep_status_get+0x44>)
        NRF_USBD_EP_NR_GET(ep));
    8ef2:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8ef6:	0104      	lsls	r4, r0, #4
    8ef8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	__asm__ volatile(
    8efc:	f04f 0520 	mov.w	r5, #32
    8f00:	f3ef 8211 	mrs	r2, BASEPRI
    8f04:	f385 8812 	msr	BASEPRI_MAX, r5
    8f08:	f3bf 8f6f 	isb	sy
    nrfx_usbd_ep_status_t ret;

    usbd_ep_state_t const * p_state = ep_state_access(ep);
    NRFX_CRITICAL_SECTION_ENTER();
    *p_size = p_state->transfer_cnt;
    8f0c:	6885      	ldr	r5, [r0, #8]
    8f0e:	600d      	str	r5, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    8f10:	591b      	ldr	r3, [r3, r4]
    8f12:	b143      	cbz	r3, 8f26 <nrfx_usbd_ep_status_get+0x3e>
    8f14:	2004      	movs	r0, #4
	__asm__ volatile(
    8f16:	f382 8811 	msr	BASEPRI, r2
    8f1a:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    8f1e:	bc30      	pop	{r4, r5}
    8f20:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8f22:	4b03      	ldr	r3, [pc, #12]	; (8f30 <nrfx_usbd_ep_status_get+0x48>)
    8f24:	e7e5      	b.n	8ef2 <nrfx_usbd_ep_status_get+0xa>
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    8f26:	7b80      	ldrb	r0, [r0, #14]
    8f28:	e7f5      	b.n	8f16 <nrfx_usbd_ep_status_get+0x2e>
    8f2a:	bf00      	nop
    8f2c:	20001d58 	.word	0x20001d58
    8f30:	20001de8 	.word	0x20001de8

00008f34 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    8f34:	f010 0f08 	tst.w	r0, #8
    8f38:	d107      	bne.n	8f4a <nrfx_usbd_epout_size_get+0x16>
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    8f3a:	f000 000f 	and.w	r0, r0, #15
    8f3e:	f500 7094 	add.w	r0, r0, #296	; 0x128
    8f42:	4b06      	ldr	r3, [pc, #24]	; (8f5c <nrfx_usbd_epout_size_get+0x28>)
    8f44:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    8f48:	4770      	bx	lr
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    8f4a:	4b04      	ldr	r3, [pc, #16]	; (8f5c <nrfx_usbd_epout_size_get+0x28>)
    8f4c:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
        if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
    8f50:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    8f54:	d100      	bne.n	8f58 <nrfx_usbd_epout_size_get+0x24>
    8f56:	4770      	bx	lr
            size_isoout = 0;
    8f58:	2000      	movs	r0, #0

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    8f5a:	4770      	bx	lr
    8f5c:	50036000 	.word	0x50036000

00008f60 <usbd_dmareq_process>:
    if (!m_dma_pending)
    8f60:	4b6b      	ldr	r3, [pc, #428]	; (9110 <usbd_dmareq_process+0x1b0>)
    8f62:	781b      	ldrb	r3, [r3, #0]
    8f64:	2b00      	cmp	r3, #0
    8f66:	f040 80d1 	bne.w	910c <usbd_dmareq_process+0x1ac>
{
    8f6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f6e:	b085      	sub	sp, #20
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    8f70:	4b68      	ldr	r3, [pc, #416]	; (9114 <usbd_dmareq_process+0x1b4>)
    8f72:	681b      	ldr	r3, [r3, #0]
    8f74:	4a68      	ldr	r2, [pc, #416]	; (9118 <usbd_dmareq_process+0x1b8>)
    8f76:	6810      	ldr	r0, [r2, #0]
    8f78:	4003      	ands	r3, r0
    8f7a:	f000 80c4 	beq.w	9106 <usbd_dmareq_process+0x1a6>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    8f7e:	f013 2001 	ands.w	r0, r3, #16777472	; 0x1000100
    8f82:	d05a      	beq.n	903a <usbd_dmareq_process+0xda>
                pos = usbd_dma_scheduler_algorithm(req & USBD_EPISO_BIT_MASK);
    8f84:	f005 f92d 	bl	e1e2 <usbd_dma_scheduler_algorithm>
    8f88:	4680      	mov	r8, r0
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8f8a:	f1b8 0f0f 	cmp.w	r8, #15
    8f8e:	d959      	bls.n	9044 <usbd_dmareq_process+0xe4>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    8f90:	f1a8 0610 	sub.w	r6, r8, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8f94:	b2f6      	uxtb	r6, r6
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8f96:	b274      	sxtb	r4, r6
    8f98:	2c00      	cmp	r4, #0
    8f9a:	db57      	blt.n	904c <usbd_dmareq_process+0xec>
    8f9c:	f8df a194 	ldr.w	sl, [pc, #404]	; 9134 <usbd_dmareq_process+0x1d4>
    8fa0:	f006 070f 	and.w	r7, r6, #15
        NRF_USBD_EP_NR_GET(ep));
    8fa4:	463d      	mov	r5, r7
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8fa6:	ea4f 1b07 	mov.w	fp, r7, lsl #4
    8faa:	eb0a 1907 	add.w	r9, sl, r7, lsl #4
            if (NRF_USBD_EPIN_CHECK(ep))
    8fae:	2c00      	cmp	r4, #0
    8fb0:	db4f      	blt.n	9052 <usbd_dmareq_process+0xf2>
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    8fb2:	4630      	mov	r0, r6
    8fb4:	f7ff ffbe 	bl	8f34 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    8fb8:	f85a a00b 	ldr.w	sl, [sl, fp]
    8fbc:	4683      	mov	fp, r0
    8fbe:	4603      	mov	r3, r0
    8fc0:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    8fc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
    8fc8:	a802      	add	r0, sp, #8
    8fca:	47d0      	blx	sl
                if (transfer.p_data.rx == NULL)
    8fcc:	9b02      	ldr	r3, [sp, #8]
    8fce:	b113      	cbz	r3, 8fd6 <usbd_dmareq_process+0x76>
                else if (transfer.size < rx_size)
    8fd0:	9b03      	ldr	r3, [sp, #12]
    8fd2:	455b      	cmp	r3, fp
    8fd4:	d34b      	bcc.n	906e <usbd_dmareq_process+0x10e>
                if (!continue_transfer)
    8fd6:	b910      	cbnz	r0, 8fde <usbd_dmareq_process+0x7e>
                    p_state->handler.consumer = NULL;
    8fd8:	2300      	movs	r3, #0
    8fda:	f8c9 3000 	str.w	r3, [r9]
    8fde:	f005 f8bb 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8fe2:	b110      	cbz	r0, 8fea <usbd_dmareq_process+0x8a>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    8fe4:	4b4d      	ldr	r3, [pc, #308]	; (911c <usbd_dmareq_process+0x1bc>)
    8fe6:	2282      	movs	r2, #130	; 0x82
    8fe8:	601a      	str	r2, [r3, #0]
    m_dma_pending = true;
    8fea:	2001      	movs	r0, #1
    8fec:	4b48      	ldr	r3, [pc, #288]	; (9110 <usbd_dmareq_process+0x1b0>)
    8fee:	7018      	strb	r0, [r3, #0]
            m_ep_ready &= ~(1U << pos);
    8ff0:	fa00 f008 	lsl.w	r0, r0, r8
    8ff4:	4a48      	ldr	r2, [pc, #288]	; (9118 <usbd_dmareq_process+0x1b8>)
    8ff6:	6813      	ldr	r3, [r2, #0]
    8ff8:	ea23 0000 	bic.w	r0, r3, r0
    8ffc:	6010      	str	r0, [r2, #0]
            p_state->transfer_cnt += transfer.size;
    8ffe:	9a03      	ldr	r2, [sp, #12]
    9000:	f8d9 3008 	ldr.w	r3, [r9, #8]
    9004:	4413      	add	r3, r2
    9006:	f8c9 3008 	str.w	r3, [r9, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    900a:	9b02      	ldr	r3, [sp, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
    900c:	2c00      	cmp	r4, #0
    900e:	db4b      	blt.n	90a8 <usbd_dmareq_process+0x148>
        if (NRF_USBD_EPISO_CHECK(ep))
    9010:	f016 0f08 	tst.w	r6, #8
    9014:	d05b      	beq.n	90ce <usbd_dmareq_process+0x16e>
            p_reg->ISOOUT.PTR    = ptr;
    9016:	4942      	ldr	r1, [pc, #264]	; (9120 <usbd_dmareq_process+0x1c0>)
    9018:	f8c1 37a0 	str.w	r3, [r1, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    901c:	f8c1 27a4 	str.w	r2, [r1, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
    9020:	2c00      	cmp	r4, #0
    9022:	db5e      	blt.n	90e2 <usbd_dmareq_process+0x182>
    9024:	2328      	movs	r3, #40	; 0x28
    9026:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    902a:	f107 47a0 	add.w	r7, r7, #1342177280	; 0x50000000
    902e:	f507 3758 	add.w	r7, r7, #221184	; 0x36000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9032:	2301      	movs	r3, #1
    9034:	603b      	str	r3, [r7, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9036:	683b      	ldr	r3, [r7, #0]
}
    9038:	e061      	b.n	90fe <usbd_dmareq_process+0x19e>
                pos = usbd_dma_scheduler_algorithm(req);
    903a:	4618      	mov	r0, r3
    903c:	f005 f8d1 	bl	e1e2 <usbd_dma_scheduler_algorithm>
    9040:	4680      	mov	r8, r0
    9042:	e7a2      	b.n	8f8a <usbd_dmareq_process+0x2a>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9044:	f068 067f 	orn	r6, r8, #127	; 0x7f
    9048:	b2f6      	uxtb	r6, r6
    904a:	e7a4      	b.n	8f96 <usbd_dmareq_process+0x36>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    904c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 9138 <usbd_dmareq_process+0x1d8>
    9050:	e7a6      	b.n	8fa0 <usbd_dmareq_process+0x40>
                continue_transfer = p_state->handler.feeder(
    9052:	f8d9 3000 	ldr.w	r3, [r9]
    9056:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    905a:	f8d9 1004 	ldr.w	r1, [r9, #4]
    905e:	a802      	add	r0, sp, #8
    9060:	4798      	blx	r3
                if (!continue_transfer)
    9062:	2800      	cmp	r0, #0
    9064:	d1bb      	bne.n	8fde <usbd_dmareq_process+0x7e>
                    p_state->handler.feeder = NULL;
    9066:	2300      	movs	r3, #0
    9068:	f8c9 3000 	str.w	r3, [r9]
    906c:	e7b7      	b.n	8fde <usbd_dmareq_process+0x7e>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    906e:	2202      	movs	r2, #2
    9070:	f889 200e 	strb.w	r2, [r9, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    9074:	2301      	movs	r3, #1
    9076:	fa03 f808 	lsl.w	r8, r3, r8
    907a:	ea6f 0808 	mvn.w	r8, r8
    907e:	4b25      	ldr	r3, [pc, #148]	; (9114 <usbd_dmareq_process+0x1b4>)
    9080:	e8d3 1fef 	ldaex	r1, [r3]
    9084:	ea01 0108 	and.w	r1, r1, r8
    9088:	e8c3 1fe0 	stlex	r0, r1, [r3]
    908c:	2800      	cmp	r0, #0
    908e:	d1f7      	bne.n	9080 <usbd_dmareq_process+0x120>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    9090:	2306      	movs	r3, #6
    9092:	f88d 3004 	strb.w	r3, [sp, #4]
    9096:	f88d 6006 	strb.w	r6, [sp, #6]
    909a:	f88d 2007 	strb.w	r2, [sp, #7]
                    m_event_handler(&evt);
    909e:	4b21      	ldr	r3, [pc, #132]	; (9124 <usbd_dmareq_process+0x1c4>)
    90a0:	681b      	ldr	r3, [r3, #0]
    90a2:	a801      	add	r0, sp, #4
    90a4:	4798      	blx	r3
                    continue;
    90a6:	e763      	b.n	8f70 <usbd_dmareq_process+0x10>
        if (NRF_USBD_EPISO_CHECK(ep))
    90a8:	f016 0f08 	tst.w	r6, #8
    90ac:	d005      	beq.n	90ba <usbd_dmareq_process+0x15a>
            p_reg->ISOIN.PTR    = ptr;
    90ae:	491c      	ldr	r1, [pc, #112]	; (9120 <usbd_dmareq_process+0x1c0>)
    90b0:	f8c1 36a0 	str.w	r3, [r1, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    90b4:	f8c1 26a4 	str.w	r2, [r1, #1700]	; 0x6a4
    90b8:	e7b2      	b.n	9020 <usbd_dmareq_process+0xc0>
            p_reg->EPIN[epnr].PTR    = ptr;
    90ba:	4919      	ldr	r1, [pc, #100]	; (9120 <usbd_dmareq_process+0x1c0>)
    90bc:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    90c0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    90c4:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    90c8:	f8c0 2604 	str.w	r2, [r0, #1540]	; 0x604
    90cc:	e7a8      	b.n	9020 <usbd_dmareq_process+0xc0>
            p_reg->EPOUT[epnr].PTR    = ptr;
    90ce:	4914      	ldr	r1, [pc, #80]	; (9120 <usbd_dmareq_process+0x1c0>)
    90d0:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    90d4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    90d8:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    90dc:	f8c0 2704 	str.w	r2, [r0, #1796]	; 0x704
    90e0:	e79e      	b.n	9020 <usbd_dmareq_process+0xc0>
    return (nrf_usbd_task_t)(
    90e2:	2304      	movs	r3, #4
    90e4:	e79f      	b.n	9026 <usbd_dmareq_process+0xc6>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    90e6:	4b10      	ldr	r3, [pc, #64]	; (9128 <usbd_dmareq_process+0x1c8>)
    90e8:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    90ec:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    90f0:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    90f4:	681b      	ldr	r3, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    90f6:	b933      	cbnz	r3, 9106 <usbd_dmareq_process+0x1a6>
    90f8:	4b0c      	ldr	r3, [pc, #48]	; (912c <usbd_dmareq_process+0x1cc>)
    90fa:	681b      	ldr	r3, [r3, #0]
    90fc:	b91b      	cbnz	r3, 9106 <usbd_dmareq_process+0x1a6>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    90fe:	2c00      	cmp	r4, #0
    9100:	dbf1      	blt.n	90e6 <usbd_dmareq_process+0x186>
    9102:	4b0b      	ldr	r3, [pc, #44]	; (9130 <usbd_dmareq_process+0x1d0>)
    9104:	e7f0      	b.n	90e8 <usbd_dmareq_process+0x188>
}
    9106:	b005      	add	sp, #20
    9108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    910c:	4770      	bx	lr
    910e:	bf00      	nop
    9110:	20001f23 	.word	0x20001f23
    9114:	20001ce4 	.word	0x20001ce4
    9118:	20001d54 	.word	0x20001d54
    911c:	40027c1c 	.word	0x40027c1c
    9120:	50036000 	.word	0x50036000
    9124:	20001e78 	.word	0x20001e78
    9128:	00010034 	.word	0x00010034
    912c:	50036100 	.word	0x50036100
    9130:	00010054 	.word	0x00010054
    9134:	20001d58 	.word	0x20001d58
    9138:	20001de8 	.word	0x20001de8

0000913c <ev_epdata_handler>:
{
    913c:	b510      	push	{r4, lr}
    return p_reg->EPDATASTATUS;
    913e:	4b0f      	ldr	r3, [pc, #60]	; (917c <ev_epdata_handler+0x40>)
    9140:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    9144:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
    NRFX_LOG_DEBUG("USBD event: EndpointEPStatus: %x", dataepstatus);
    9148:	e009      	b.n	915e <ev_epdata_handler+0x22>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    914a:	f043 0080 	orr.w	r0, r3, #128	; 0x80
        dataepstatus &= ~(1UL << bitpos);
    914e:	b2db      	uxtb	r3, r3
    9150:	2201      	movs	r2, #1
    9152:	fa02 f303 	lsl.w	r3, r2, r3
    9156:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    915a:	f7ff fa33 	bl	85c4 <usbd_ep_data_handler>
    while (dataepstatus)
    915e:	b154      	cbz	r4, 9176 <ev_epdata_handler+0x3a>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    9160:	fa94 f3a4 	rbit	r3, r4
    9164:	fab3 f383 	clz	r3, r3
    9168:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    916a:	2b0f      	cmp	r3, #15
    916c:	d9ed      	bls.n	914a <ev_epdata_handler+0xe>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    916e:	f1a3 0010 	sub.w	r0, r3, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9172:	b2c0      	uxtb	r0, r0
    9174:	e7eb      	b.n	914e <ev_epdata_handler+0x12>
        usbd_dmareq_process();
    9176:	f7ff fef3 	bl	8f60 <usbd_dmareq_process>
}
    917a:	bd10      	pop	{r4, pc}
    917c:	50036000 	.word	0x50036000

00009180 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    9180:	b500      	push	{lr}
    9182:	b083      	sub	sp, #12
    9184:	f004 ffe8 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9188:	b110      	cbz	r0, 9190 <ev_dma_epout7_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    918a:	4b19      	ldr	r3, [pc, #100]	; (91f0 <ev_dma_epout7_handler+0x70>)
    918c:	2200      	movs	r2, #0
    918e:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9190:	4b18      	ldr	r3, [pc, #96]	; (91f4 <ev_dma_epout7_handler+0x74>)
    9192:	2200      	movs	r2, #0
    9194:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9196:	4b18      	ldr	r3, [pc, #96]	; (91f8 <ev_dma_epout7_handler+0x78>)
    9198:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
    919c:	2b03      	cmp	r3, #3
    919e:	d019      	beq.n	91d4 <ev_dma_epout7_handler+0x54>
    else if (p_state->handler.consumer == NULL)
    91a0:	4b15      	ldr	r3, [pc, #84]	; (91f8 <ev_dma_epout7_handler+0x78>)
    91a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    91a4:	b9fb      	cbnz	r3, 91e6 <ev_dma_epout7_handler+0x66>
    91a6:	4b15      	ldr	r3, [pc, #84]	; (91fc <ev_dma_epout7_handler+0x7c>)
    91a8:	e8d3 2fef 	ldaex	r2, [r3]
    91ac:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    91b0:	e8c3 2fe1 	stlex	r1, r2, [r3]
    91b4:	2900      	cmp	r1, #0
    91b6:	d1f7      	bne.n	91a8 <ev_dma_epout7_handler+0x28>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    91b8:	2306      	movs	r3, #6
    91ba:	f88d 3004 	strb.w	r3, [sp, #4]
    91be:	2307      	movs	r3, #7
    91c0:	f88d 3006 	strb.w	r3, [sp, #6]
    91c4:	2300      	movs	r3, #0
    91c6:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    91ca:	4b0d      	ldr	r3, [pc, #52]	; (9200 <ev_dma_epout7_handler+0x80>)
    91cc:	681b      	ldr	r3, [r3, #0]
    91ce:	a801      	add	r0, sp, #4
    91d0:	4798      	blx	r3
    91d2:	e008      	b.n	91e6 <ev_dma_epout7_handler+0x66>
    91d4:	4b09      	ldr	r3, [pc, #36]	; (91fc <ev_dma_epout7_handler+0x7c>)
    91d6:	e8d3 2fef 	ldaex	r2, [r3]
    91da:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    91de:	e8c3 2fe1 	stlex	r1, r2, [r3]
    91e2:	2900      	cmp	r1, #0
    91e4:	d1f7      	bne.n	91d6 <ev_dma_epout7_handler+0x56>
    usbd_dmareq_process();
    91e6:	f7ff febb 	bl	8f60 <usbd_dmareq_process>
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    91ea:	b003      	add	sp, #12
    91ec:	f85d fb04 	ldr.w	pc, [sp], #4
    91f0:	40027c1c 	.word	0x40027c1c
    91f4:	20001f23 	.word	0x20001f23
    91f8:	20001d58 	.word	0x20001d58
    91fc:	20001ce4 	.word	0x20001ce4
    9200:	20001e78 	.word	0x20001e78

00009204 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    9204:	b500      	push	{lr}
    9206:	b083      	sub	sp, #12
    9208:	f004 ffa6 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    920c:	b110      	cbz	r0, 9214 <ev_dma_epout1_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    920e:	4b19      	ldr	r3, [pc, #100]	; (9274 <ev_dma_epout1_handler+0x70>)
    9210:	2200      	movs	r2, #0
    9212:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9214:	4b18      	ldr	r3, [pc, #96]	; (9278 <ev_dma_epout1_handler+0x74>)
    9216:	2200      	movs	r2, #0
    9218:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    921a:	4b18      	ldr	r3, [pc, #96]	; (927c <ev_dma_epout1_handler+0x78>)
    921c:	7f9b      	ldrb	r3, [r3, #30]
    921e:	2b03      	cmp	r3, #3
    9220:	d019      	beq.n	9256 <ev_dma_epout1_handler+0x52>
    else if (p_state->handler.consumer == NULL)
    9222:	4b16      	ldr	r3, [pc, #88]	; (927c <ev_dma_epout1_handler+0x78>)
    9224:	691b      	ldr	r3, [r3, #16]
    9226:	b9fb      	cbnz	r3, 9268 <ev_dma_epout1_handler+0x64>
    9228:	4b15      	ldr	r3, [pc, #84]	; (9280 <ev_dma_epout1_handler+0x7c>)
    922a:	e8d3 2fef 	ldaex	r2, [r3]
    922e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
    9232:	e8c3 2fe1 	stlex	r1, r2, [r3]
    9236:	2900      	cmp	r1, #0
    9238:	d1f7      	bne.n	922a <ev_dma_epout1_handler+0x26>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    923a:	2306      	movs	r3, #6
    923c:	f88d 3004 	strb.w	r3, [sp, #4]
    9240:	2301      	movs	r3, #1
    9242:	f88d 3006 	strb.w	r3, [sp, #6]
    9246:	2300      	movs	r3, #0
    9248:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    924c:	4b0d      	ldr	r3, [pc, #52]	; (9284 <ev_dma_epout1_handler+0x80>)
    924e:	681b      	ldr	r3, [r3, #0]
    9250:	a801      	add	r0, sp, #4
    9252:	4798      	blx	r3
    9254:	e008      	b.n	9268 <ev_dma_epout1_handler+0x64>
    9256:	4b0a      	ldr	r3, [pc, #40]	; (9280 <ev_dma_epout1_handler+0x7c>)
    9258:	e8d3 2fef 	ldaex	r2, [r3]
    925c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
    9260:	e8c3 2fe1 	stlex	r1, r2, [r3]
    9264:	2900      	cmp	r1, #0
    9266:	d1f7      	bne.n	9258 <ev_dma_epout1_handler+0x54>
    usbd_dmareq_process();
    9268:	f7ff fe7a 	bl	8f60 <usbd_dmareq_process>
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    926c:	b003      	add	sp, #12
    926e:	f85d fb04 	ldr.w	pc, [sp], #4
    9272:	bf00      	nop
    9274:	40027c1c 	.word	0x40027c1c
    9278:	20001f23 	.word	0x20001f23
    927c:	20001d58 	.word	0x20001d58
    9280:	20001ce4 	.word	0x20001ce4
    9284:	20001e78 	.word	0x20001e78

00009288 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    9288:	b500      	push	{lr}
    928a:	b083      	sub	sp, #12
    928c:	f004 ff64 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9290:	b110      	cbz	r0, 9298 <ev_dma_epout2_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9292:	4b19      	ldr	r3, [pc, #100]	; (92f8 <ev_dma_epout2_handler+0x70>)
    9294:	2200      	movs	r2, #0
    9296:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9298:	4b18      	ldr	r3, [pc, #96]	; (92fc <ev_dma_epout2_handler+0x74>)
    929a:	2200      	movs	r2, #0
    929c:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    929e:	4b18      	ldr	r3, [pc, #96]	; (9300 <ev_dma_epout2_handler+0x78>)
    92a0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    92a4:	2b03      	cmp	r3, #3
    92a6:	d019      	beq.n	92dc <ev_dma_epout2_handler+0x54>
    else if (p_state->handler.consumer == NULL)
    92a8:	4b15      	ldr	r3, [pc, #84]	; (9300 <ev_dma_epout2_handler+0x78>)
    92aa:	6a1b      	ldr	r3, [r3, #32]
    92ac:	b9fb      	cbnz	r3, 92ee <ev_dma_epout2_handler+0x66>
    92ae:	4b15      	ldr	r3, [pc, #84]	; (9304 <ev_dma_epout2_handler+0x7c>)
    92b0:	e8d3 2fef 	ldaex	r2, [r3]
    92b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    92b8:	e8c3 2fe1 	stlex	r1, r2, [r3]
    92bc:	2900      	cmp	r1, #0
    92be:	d1f7      	bne.n	92b0 <ev_dma_epout2_handler+0x28>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    92c0:	2306      	movs	r3, #6
    92c2:	f88d 3004 	strb.w	r3, [sp, #4]
    92c6:	2302      	movs	r3, #2
    92c8:	f88d 3006 	strb.w	r3, [sp, #6]
    92cc:	2300      	movs	r3, #0
    92ce:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    92d2:	4b0d      	ldr	r3, [pc, #52]	; (9308 <ev_dma_epout2_handler+0x80>)
    92d4:	681b      	ldr	r3, [r3, #0]
    92d6:	a801      	add	r0, sp, #4
    92d8:	4798      	blx	r3
    92da:	e008      	b.n	92ee <ev_dma_epout2_handler+0x66>
    92dc:	4b09      	ldr	r3, [pc, #36]	; (9304 <ev_dma_epout2_handler+0x7c>)
    92de:	e8d3 2fef 	ldaex	r2, [r3]
    92e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    92e6:	e8c3 2fe1 	stlex	r1, r2, [r3]
    92ea:	2900      	cmp	r1, #0
    92ec:	d1f7      	bne.n	92de <ev_dma_epout2_handler+0x56>
    usbd_dmareq_process();
    92ee:	f7ff fe37 	bl	8f60 <usbd_dmareq_process>
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    92f2:	b003      	add	sp, #12
    92f4:	f85d fb04 	ldr.w	pc, [sp], #4
    92f8:	40027c1c 	.word	0x40027c1c
    92fc:	20001f23 	.word	0x20001f23
    9300:	20001d58 	.word	0x20001d58
    9304:	20001ce4 	.word	0x20001ce4
    9308:	20001e78 	.word	0x20001e78

0000930c <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    930c:	b500      	push	{lr}
    930e:	b083      	sub	sp, #12
    9310:	f004 ff22 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9314:	b110      	cbz	r0, 931c <ev_dma_epout3_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9316:	4b19      	ldr	r3, [pc, #100]	; (937c <ev_dma_epout3_handler+0x70>)
    9318:	2200      	movs	r2, #0
    931a:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    931c:	4b18      	ldr	r3, [pc, #96]	; (9380 <ev_dma_epout3_handler+0x74>)
    931e:	2200      	movs	r2, #0
    9320:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9322:	4b18      	ldr	r3, [pc, #96]	; (9384 <ev_dma_epout3_handler+0x78>)
    9324:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
    9328:	2b03      	cmp	r3, #3
    932a:	d019      	beq.n	9360 <ev_dma_epout3_handler+0x54>
    else if (p_state->handler.consumer == NULL)
    932c:	4b15      	ldr	r3, [pc, #84]	; (9384 <ev_dma_epout3_handler+0x78>)
    932e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9330:	b9fb      	cbnz	r3, 9372 <ev_dma_epout3_handler+0x66>
    9332:	4b15      	ldr	r3, [pc, #84]	; (9388 <ev_dma_epout3_handler+0x7c>)
    9334:	e8d3 2fef 	ldaex	r2, [r3]
    9338:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
    933c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    9340:	2900      	cmp	r1, #0
    9342:	d1f7      	bne.n	9334 <ev_dma_epout3_handler+0x28>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9344:	2306      	movs	r3, #6
    9346:	f88d 3004 	strb.w	r3, [sp, #4]
    934a:	2303      	movs	r3, #3
    934c:	f88d 3006 	strb.w	r3, [sp, #6]
    9350:	2300      	movs	r3, #0
    9352:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    9356:	4b0d      	ldr	r3, [pc, #52]	; (938c <ev_dma_epout3_handler+0x80>)
    9358:	681b      	ldr	r3, [r3, #0]
    935a:	a801      	add	r0, sp, #4
    935c:	4798      	blx	r3
    935e:	e008      	b.n	9372 <ev_dma_epout3_handler+0x66>
    9360:	4b09      	ldr	r3, [pc, #36]	; (9388 <ev_dma_epout3_handler+0x7c>)
    9362:	e8d3 2fef 	ldaex	r2, [r3]
    9366:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
    936a:	e8c3 2fe1 	stlex	r1, r2, [r3]
    936e:	2900      	cmp	r1, #0
    9370:	d1f7      	bne.n	9362 <ev_dma_epout3_handler+0x56>
    usbd_dmareq_process();
    9372:	f7ff fdf5 	bl	8f60 <usbd_dmareq_process>
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    9376:	b003      	add	sp, #12
    9378:	f85d fb04 	ldr.w	pc, [sp], #4
    937c:	40027c1c 	.word	0x40027c1c
    9380:	20001f23 	.word	0x20001f23
    9384:	20001d58 	.word	0x20001d58
    9388:	20001ce4 	.word	0x20001ce4
    938c:	20001e78 	.word	0x20001e78

00009390 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    9390:	b500      	push	{lr}
    9392:	b083      	sub	sp, #12
    9394:	f004 fee0 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9398:	b110      	cbz	r0, 93a0 <ev_dma_epout4_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    939a:	4b19      	ldr	r3, [pc, #100]	; (9400 <ev_dma_epout4_handler+0x70>)
    939c:	2200      	movs	r2, #0
    939e:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    93a0:	4b18      	ldr	r3, [pc, #96]	; (9404 <ev_dma_epout4_handler+0x74>)
    93a2:	2200      	movs	r2, #0
    93a4:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    93a6:	4b18      	ldr	r3, [pc, #96]	; (9408 <ev_dma_epout4_handler+0x78>)
    93a8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    93ac:	2b03      	cmp	r3, #3
    93ae:	d019      	beq.n	93e4 <ev_dma_epout4_handler+0x54>
    else if (p_state->handler.consumer == NULL)
    93b0:	4b15      	ldr	r3, [pc, #84]	; (9408 <ev_dma_epout4_handler+0x78>)
    93b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    93b4:	b9fb      	cbnz	r3, 93f6 <ev_dma_epout4_handler+0x66>
    93b6:	4b15      	ldr	r3, [pc, #84]	; (940c <ev_dma_epout4_handler+0x7c>)
    93b8:	e8d3 2fef 	ldaex	r2, [r3]
    93bc:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    93c0:	e8c3 2fe1 	stlex	r1, r2, [r3]
    93c4:	2900      	cmp	r1, #0
    93c6:	d1f7      	bne.n	93b8 <ev_dma_epout4_handler+0x28>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    93c8:	2306      	movs	r3, #6
    93ca:	f88d 3004 	strb.w	r3, [sp, #4]
    93ce:	2304      	movs	r3, #4
    93d0:	f88d 3006 	strb.w	r3, [sp, #6]
    93d4:	2300      	movs	r3, #0
    93d6:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    93da:	4b0d      	ldr	r3, [pc, #52]	; (9410 <ev_dma_epout4_handler+0x80>)
    93dc:	681b      	ldr	r3, [r3, #0]
    93de:	a801      	add	r0, sp, #4
    93e0:	4798      	blx	r3
    93e2:	e008      	b.n	93f6 <ev_dma_epout4_handler+0x66>
    93e4:	4b09      	ldr	r3, [pc, #36]	; (940c <ev_dma_epout4_handler+0x7c>)
    93e6:	e8d3 2fef 	ldaex	r2, [r3]
    93ea:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    93ee:	e8c3 2fe1 	stlex	r1, r2, [r3]
    93f2:	2900      	cmp	r1, #0
    93f4:	d1f7      	bne.n	93e6 <ev_dma_epout4_handler+0x56>
    usbd_dmareq_process();
    93f6:	f7ff fdb3 	bl	8f60 <usbd_dmareq_process>
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    93fa:	b003      	add	sp, #12
    93fc:	f85d fb04 	ldr.w	pc, [sp], #4
    9400:	40027c1c 	.word	0x40027c1c
    9404:	20001f23 	.word	0x20001f23
    9408:	20001d58 	.word	0x20001d58
    940c:	20001ce4 	.word	0x20001ce4
    9410:	20001e78 	.word	0x20001e78

00009414 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    9414:	b500      	push	{lr}
    9416:	b083      	sub	sp, #12
    9418:	f004 fe9e 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    941c:	b110      	cbz	r0, 9424 <ev_dma_epout5_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    941e:	4b19      	ldr	r3, [pc, #100]	; (9484 <ev_dma_epout5_handler+0x70>)
    9420:	2200      	movs	r2, #0
    9422:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9424:	4b18      	ldr	r3, [pc, #96]	; (9488 <ev_dma_epout5_handler+0x74>)
    9426:	2200      	movs	r2, #0
    9428:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    942a:	4b18      	ldr	r3, [pc, #96]	; (948c <ev_dma_epout5_handler+0x78>)
    942c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
    9430:	2b03      	cmp	r3, #3
    9432:	d019      	beq.n	9468 <ev_dma_epout5_handler+0x54>
    else if (p_state->handler.consumer == NULL)
    9434:	4b15      	ldr	r3, [pc, #84]	; (948c <ev_dma_epout5_handler+0x78>)
    9436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    9438:	b9fb      	cbnz	r3, 947a <ev_dma_epout5_handler+0x66>
    943a:	4b15      	ldr	r3, [pc, #84]	; (9490 <ev_dma_epout5_handler+0x7c>)
    943c:	e8d3 2fef 	ldaex	r2, [r3]
    9440:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    9444:	e8c3 2fe1 	stlex	r1, r2, [r3]
    9448:	2900      	cmp	r1, #0
    944a:	d1f7      	bne.n	943c <ev_dma_epout5_handler+0x28>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    944c:	2306      	movs	r3, #6
    944e:	f88d 3004 	strb.w	r3, [sp, #4]
    9452:	2305      	movs	r3, #5
    9454:	f88d 3006 	strb.w	r3, [sp, #6]
    9458:	2300      	movs	r3, #0
    945a:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    945e:	4b0d      	ldr	r3, [pc, #52]	; (9494 <ev_dma_epout5_handler+0x80>)
    9460:	681b      	ldr	r3, [r3, #0]
    9462:	a801      	add	r0, sp, #4
    9464:	4798      	blx	r3
    9466:	e008      	b.n	947a <ev_dma_epout5_handler+0x66>
    9468:	4b09      	ldr	r3, [pc, #36]	; (9490 <ev_dma_epout5_handler+0x7c>)
    946a:	e8d3 2fef 	ldaex	r2, [r3]
    946e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    9472:	e8c3 2fe1 	stlex	r1, r2, [r3]
    9476:	2900      	cmp	r1, #0
    9478:	d1f7      	bne.n	946a <ev_dma_epout5_handler+0x56>
    usbd_dmareq_process();
    947a:	f7ff fd71 	bl	8f60 <usbd_dmareq_process>
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    947e:	b003      	add	sp, #12
    9480:	f85d fb04 	ldr.w	pc, [sp], #4
    9484:	40027c1c 	.word	0x40027c1c
    9488:	20001f23 	.word	0x20001f23
    948c:	20001d58 	.word	0x20001d58
    9490:	20001ce4 	.word	0x20001ce4
    9494:	20001e78 	.word	0x20001e78

00009498 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    9498:	b500      	push	{lr}
    949a:	b083      	sub	sp, #12
    949c:	f004 fe5c 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    94a0:	b110      	cbz	r0, 94a8 <ev_dma_epout6_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    94a2:	4b19      	ldr	r3, [pc, #100]	; (9508 <ev_dma_epout6_handler+0x70>)
    94a4:	2200      	movs	r2, #0
    94a6:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    94a8:	4b18      	ldr	r3, [pc, #96]	; (950c <ev_dma_epout6_handler+0x74>)
    94aa:	2200      	movs	r2, #0
    94ac:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    94ae:	4b18      	ldr	r3, [pc, #96]	; (9510 <ev_dma_epout6_handler+0x78>)
    94b0:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
    94b4:	2b03      	cmp	r3, #3
    94b6:	d018      	beq.n	94ea <ev_dma_epout6_handler+0x52>
    else if (p_state->handler.consumer == NULL)
    94b8:	4b15      	ldr	r3, [pc, #84]	; (9510 <ev_dma_epout6_handler+0x78>)
    94ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    94bc:	b9f3      	cbnz	r3, 94fc <ev_dma_epout6_handler+0x64>
    94be:	4b15      	ldr	r3, [pc, #84]	; (9514 <ev_dma_epout6_handler+0x7c>)
    94c0:	e8d3 2fef 	ldaex	r2, [r3]
    94c4:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
    94c8:	e8c3 2fe1 	stlex	r1, r2, [r3]
    94cc:	2900      	cmp	r1, #0
    94ce:	d1f7      	bne.n	94c0 <ev_dma_epout6_handler+0x28>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    94d0:	2306      	movs	r3, #6
    94d2:	f88d 3004 	strb.w	r3, [sp, #4]
    94d6:	f88d 3006 	strb.w	r3, [sp, #6]
    94da:	2300      	movs	r3, #0
    94dc:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    94e0:	4b0d      	ldr	r3, [pc, #52]	; (9518 <ev_dma_epout6_handler+0x80>)
    94e2:	681b      	ldr	r3, [r3, #0]
    94e4:	a801      	add	r0, sp, #4
    94e6:	4798      	blx	r3
    94e8:	e008      	b.n	94fc <ev_dma_epout6_handler+0x64>
    94ea:	4b0a      	ldr	r3, [pc, #40]	; (9514 <ev_dma_epout6_handler+0x7c>)
    94ec:	e8d3 2fef 	ldaex	r2, [r3]
    94f0:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
    94f4:	e8c3 2fe1 	stlex	r1, r2, [r3]
    94f8:	2900      	cmp	r1, #0
    94fa:	d1f7      	bne.n	94ec <ev_dma_epout6_handler+0x54>
    usbd_dmareq_process();
    94fc:	f7ff fd30 	bl	8f60 <usbd_dmareq_process>
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    9500:	b003      	add	sp, #12
    9502:	f85d fb04 	ldr.w	pc, [sp], #4
    9506:	bf00      	nop
    9508:	40027c1c 	.word	0x40027c1c
    950c:	20001f23 	.word	0x20001f23
    9510:	20001d58 	.word	0x20001d58
    9514:	20001ce4 	.word	0x20001ce4
    9518:	20001e78 	.word	0x20001e78

0000951c <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    951c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    9520:	4b01      	ldr	r3, [pc, #4]	; (9528 <nrfx_usbd_ep_stall+0xc>)
    9522:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    9526:	4770      	bx	lr
    9528:	50036000 	.word	0x50036000

0000952c <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    952c:	f010 0f08 	tst.w	r0, #8
    9530:	d117      	bne.n	9562 <nrfx_usbd_ep_stall_check+0x36>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    9532:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    9536:	f010 0f80 	tst.w	r0, #128	; 0x80
    953a:	d10c      	bne.n	9556 <nrfx_usbd_ep_stall_check+0x2a>
        return p_reg->HALTED.EPOUT[epnr];
    953c:	f503 7388 	add.w	r3, r3, #272	; 0x110
    9540:	009b      	lsls	r3, r3, #2
    9542:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    9546:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    954a:	6858      	ldr	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    954c:	2801      	cmp	r0, #1
    954e:	bf14      	ite	ne
    9550:	2000      	movne	r0, #0
    9552:	2001      	moveq	r0, #1
    9554:	4770      	bx	lr
        return p_reg->HALTED.EPIN[epnr];
    9556:	f503 7384 	add.w	r3, r3, #264	; 0x108
    955a:	4a03      	ldr	r2, [pc, #12]	; (9568 <nrfx_usbd_ep_stall_check+0x3c>)
    955c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    9560:	e7f4      	b.n	954c <nrfx_usbd_ep_stall_check+0x20>
        return false;
    9562:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    9564:	4770      	bx	lr
    9566:	bf00      	nop
    9568:	50036000 	.word	0x50036000

0000956c <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    956c:	4b04      	ldr	r3, [pc, #16]	; (9580 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    956e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    9572:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    9576:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    957a:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    957e:	4770      	bx	lr
    9580:	50036000 	.word	0x50036000

00009584 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    9584:	b510      	push	{r4, lr}
    9586:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    9588:	2208      	movs	r2, #8
    958a:	2100      	movs	r1, #0
    958c:	f004 f844 	bl	d618 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    9590:	4b11      	ldr	r3, [pc, #68]	; (95d8 <nrfx_usbd_setup_get+0x54>)
    9592:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    9596:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    9598:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    959c:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    959e:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    95a2:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    95a4:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    95a8:	0209      	lsls	r1, r1, #8
    95aa:	b289      	uxth	r1, r1
    95ac:	430a      	orrs	r2, r1
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    95ae:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    95b0:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    95b4:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    95b6:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    95ba:	0209      	lsls	r1, r1, #8
    95bc:	b289      	uxth	r1, r1
    95be:	430a      	orrs	r2, r1
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    95c0:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    95c2:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    95c6:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    95c8:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    95cc:	021b      	lsls	r3, r3, #8
    95ce:	b29b      	uxth	r3, r3
    95d0:	4313      	orrs	r3, r2
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    95d2:	80e3      	strh	r3, [r4, #6]
}
    95d4:	bd10      	pop	{r4, pc}
    95d6:	bf00      	nop
    95d8:	50036000 	.word	0x50036000

000095dc <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    95dc:	4b02      	ldr	r3, [pc, #8]	; (95e8 <nrfx_usbd_setup_data_clear+0xc>)
    95de:	2201      	movs	r2, #1
    95e0:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    95e2:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    95e4:	4770      	bx	lr
    95e6:	bf00      	nop
    95e8:	5003604c 	.word	0x5003604c

000095ec <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    95ec:	b500      	push	{lr}
    95ee:	b083      	sub	sp, #12
    95f0:	f004 fdb2 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    95f4:	b110      	cbz	r0, 95fc <ev_dma_epout0_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    95f6:	4b19      	ldr	r3, [pc, #100]	; (965c <ev_dma_epout0_handler+0x70>)
    95f8:	2200      	movs	r2, #0
    95fa:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    95fc:	4b18      	ldr	r3, [pc, #96]	; (9660 <ev_dma_epout0_handler+0x74>)
    95fe:	2200      	movs	r2, #0
    9600:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9602:	4b18      	ldr	r3, [pc, #96]	; (9664 <ev_dma_epout0_handler+0x78>)
    9604:	7b9b      	ldrb	r3, [r3, #14]
    9606:	2b03      	cmp	r3, #3
    9608:	d005      	beq.n	9616 <ev_dma_epout0_handler+0x2a>
    else if (p_state->handler.consumer == NULL)
    960a:	4b16      	ldr	r3, [pc, #88]	; (9664 <ev_dma_epout0_handler+0x78>)
    960c:	681b      	ldr	r3, [r3, #0]
    960e:	b163      	cbz	r3, 962a <ev_dma_epout0_handler+0x3e>
        nrfx_usbd_setup_data_clear();
    9610:	f7ff ffe4 	bl	95dc <nrfx_usbd_setup_data_clear>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    9614:	e01e      	b.n	9654 <ev_dma_epout0_handler+0x68>
    9616:	4b14      	ldr	r3, [pc, #80]	; (9668 <ev_dma_epout0_handler+0x7c>)
    9618:	e8d3 2fef 	ldaex	r2, [r3]
    961c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    9620:	e8c3 2fe1 	stlex	r1, r2, [r3]
    9624:	2900      	cmp	r1, #0
    9626:	d015      	beq.n	9654 <ev_dma_epout0_handler+0x68>
    9628:	e7f6      	b.n	9618 <ev_dma_epout0_handler+0x2c>
    962a:	4b0f      	ldr	r3, [pc, #60]	; (9668 <ev_dma_epout0_handler+0x7c>)
    962c:	e8d3 2fef 	ldaex	r2, [r3]
    9630:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    9634:	e8c3 2fe1 	stlex	r1, r2, [r3]
    9638:	2900      	cmp	r1, #0
    963a:	d1f7      	bne.n	962c <ev_dma_epout0_handler+0x40>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    963c:	2306      	movs	r3, #6
    963e:	f88d 3004 	strb.w	r3, [sp, #4]
    9642:	2300      	movs	r3, #0
    9644:	f88d 3006 	strb.w	r3, [sp, #6]
    9648:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    964c:	4b07      	ldr	r3, [pc, #28]	; (966c <ev_dma_epout0_handler+0x80>)
    964e:	681b      	ldr	r3, [r3, #0]
    9650:	a801      	add	r0, sp, #4
    9652:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    9654:	b003      	add	sp, #12
    9656:	f85d fb04 	ldr.w	pc, [sp], #4
    965a:	bf00      	nop
    965c:	40027c1c 	.word	0x40027c1c
    9660:	20001f23 	.word	0x20001f23
    9664:	20001d58 	.word	0x20001d58
    9668:	20001ce4 	.word	0x20001ce4
    966c:	20001e78 	.word	0x20001e78

00009670 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9670:	4b02      	ldr	r3, [pc, #8]	; (967c <nrfx_usbd_setup_clear+0xc>)
    9672:	2201      	movs	r2, #1
    9674:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9676:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    9678:	4770      	bx	lr
    967a:	bf00      	nop
    967c:	50036050 	.word	0x50036050

00009680 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9680:	4b02      	ldr	r3, [pc, #8]	; (968c <nrfx_usbd_setup_stall+0xc>)
    9682:	2201      	movs	r2, #1
    9684:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9686:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    9688:	4770      	bx	lr
    968a:	bf00      	nop
    968c:	50036054 	.word	0x50036054

00009690 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    9690:	4b01      	ldr	r3, [pc, #4]	; (9698 <nrfx_usbd_last_setup_dir_get+0x8>)
    9692:	7818      	ldrb	r0, [r3, #0]
    9694:	4770      	bx	lr
    9696:	bf00      	nop
    9698:	20001f25 	.word	0x20001f25

0000969c <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    969c:	b410      	push	{r4}
	__asm__ volatile(
    969e:	f04f 0320 	mov.w	r3, #32
    96a2:	f3ef 8411 	mrs	r4, BASEPRI
    96a6:	f383 8812 	msr	BASEPRI_MAX, r3
    96aa:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_EP_BITPOS(ep);
    96ae:	b243      	sxtb	r3, r0
    96b0:	2b00      	cmp	r3, #0
    96b2:	db1e      	blt.n	96f2 <nrfx_usbd_transfer_out_drop+0x56>
    96b4:	2210      	movs	r2, #16
    96b6:	f003 030f 	and.w	r3, r3, #15
    96ba:	4413      	add	r3, r2
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    96bc:	2201      	movs	r2, #1
    96be:	fa02 f303 	lsl.w	r3, r2, r3
    96c2:	490d      	ldr	r1, [pc, #52]	; (96f8 <nrfx_usbd_transfer_out_drop+0x5c>)
    96c4:	680a      	ldr	r2, [r1, #0]
    96c6:	ea22 0203 	bic.w	r2, r2, r3
    96ca:	600a      	str	r2, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    96cc:	f010 0f08 	tst.w	r0, #8
    96d0:	d109      	bne.n	96e6 <nrfx_usbd_transfer_out_drop+0x4a>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    96d2:	f000 000f 	and.w	r0, r0, #15
    96d6:	4b09      	ldr	r3, [pc, #36]	; (96fc <nrfx_usbd_transfer_out_drop+0x60>)
    96d8:	f500 7094 	add.w	r0, r0, #296	; 0x128
    96dc:	2200      	movs	r2, #0
    96de:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    96e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	__asm__ volatile(
    96e6:	f384 8811 	msr	BASEPRI, r4
    96ea:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    96ee:	bc10      	pop	{r4}
    96f0:	4770      	bx	lr
    return NRFX_USBD_EP_BITPOS(ep);
    96f2:	2200      	movs	r2, #0
    96f4:	e7df      	b.n	96b6 <nrfx_usbd_transfer_out_drop+0x1a>
    96f6:	bf00      	nop
    96f8:	20001d54 	.word	0x20001d54
    96fc:	50036000 	.word	0x50036000

00009700 <ev_setup_handler>:
{
    9700:	b5f0      	push	{r4, r5, r6, r7, lr}
    9702:	b083      	sub	sp, #12
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    9704:	4b5c      	ldr	r3, [pc, #368]	; (9878 <ev_setup_handler+0x178>)
    9706:	f8d3 4480 	ldr.w	r4, [r3, #1152]	; 0x480
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    970a:	4b5c      	ldr	r3, [pc, #368]	; (987c <ev_setup_handler+0x17c>)
    970c:	681b      	ldr	r3, [r3, #0]
    970e:	43db      	mvns	r3, r3
    9710:	b29b      	uxth	r3, r3
    9712:	4a5b      	ldr	r2, [pc, #364]	; (9880 <ev_setup_handler+0x180>)
    9714:	6812      	ldr	r2, [r2, #0]
    9716:	4313      	orrs	r3, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    9718:	4a5a      	ldr	r2, [pc, #360]	; (9884 <ev_setup_handler+0x184>)
    971a:	7810      	ldrb	r0, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    971c:	f992 2000 	ldrsb.w	r2, [r2]
    9720:	2a00      	cmp	r2, #0
    9722:	db2a      	blt.n	977a <ev_setup_handler+0x7a>
    9724:	2110      	movs	r1, #16
    9726:	f002 020f 	and.w	r2, r2, #15
    972a:	4411      	add	r1, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    972c:	2201      	movs	r2, #1
    972e:	408a      	lsls	r2, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9730:	4213      	tst	r3, r2
    9732:	d124      	bne.n	977e <ev_setup_handler+0x7e>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    9734:	f014 0f80 	tst.w	r4, #128	; 0x80
    9738:	f040 809c 	bne.w	9874 <ev_setup_handler+0x174>
    973c:	2200      	movs	r2, #0
    m_last_setup_dir =
    973e:	4b51      	ldr	r3, [pc, #324]	; (9884 <ev_setup_handler+0x184>)
    9740:	701a      	strb	r2, [r3, #0]
    9742:	4b4f      	ldr	r3, [pc, #316]	; (9880 <ev_setup_handler+0x180>)
    9744:	e8d3 2fef 	ldaex	r2, [r3]
    9748:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
    974c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    9750:	2900      	cmp	r1, #0
    9752:	d1f7      	bne.n	9744 <ev_setup_handler+0x44>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    9754:	4a49      	ldr	r2, [pc, #292]	; (987c <ev_setup_handler+0x17c>)
    9756:	6813      	ldr	r3, [r2, #0]
    9758:	f043 0301 	orr.w	r3, r3, #1
    975c:	6013      	str	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    975e:	2300      	movs	r3, #0
    9760:	f8ad 3005 	strh.w	r3, [sp, #5]
    9764:	f88d 3007 	strb.w	r3, [sp, #7]
    9768:	2305      	movs	r3, #5
    976a:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    976e:	4b46      	ldr	r3, [pc, #280]	; (9888 <ev_setup_handler+0x188>)
    9770:	681b      	ldr	r3, [r3, #0]
    9772:	a801      	add	r0, sp, #4
    9774:	4798      	blx	r3
}
    9776:	b003      	add	sp, #12
    9778:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NRFX_USBD_EP_BITPOS(ep);
    977a:	2100      	movs	r1, #0
    977c:	e7d3      	b.n	9726 <ev_setup_handler+0x26>
	__asm__ volatile(
    977e:	f04f 0320 	mov.w	r3, #32
    9782:	f3ef 8611 	mrs	r6, BASEPRI
    9786:	f383 8812 	msr	BASEPRI_MAX, r3
    978a:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    978e:	b243      	sxtb	r3, r0
    9790:	2b00      	cmp	r3, #0
    9792:	db24      	blt.n	97de <ev_setup_handler+0xde>
    9794:	4d3d      	ldr	r5, [pc, #244]	; (988c <ev_setup_handler+0x18c>)
        NRF_USBD_EP_NR_GET(ep));
    9796:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    979a:	eb05 1502 	add.w	r5, r5, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    979e:	2b00      	cmp	r3, #0
    97a0:	db22      	blt.n	97e8 <ev_setup_handler+0xe8>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    97a2:	4a37      	ldr	r2, [pc, #220]	; (9880 <ev_setup_handler+0x180>)
    97a4:	6811      	ldr	r1, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    97a6:	f003 030f 	and.w	r3, r3, #15
    97aa:	f103 0210 	add.w	r2, r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    97ae:	2301      	movs	r3, #1
    97b0:	4093      	lsls	r3, r2
    97b2:	ea33 0201 	bics.w	r2, r3, r1
    97b6:	d114      	bne.n	97e2 <ev_setup_handler+0xe2>
            p_state->handler.consumer = NULL;
    97b8:	2200      	movs	r2, #0
    97ba:	602a      	str	r2, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    97bc:	4930      	ldr	r1, [pc, #192]	; (9880 <ev_setup_handler+0x180>)
    97be:	680a      	ldr	r2, [r1, #0]
    97c0:	ea22 0203 	bic.w	r2, r2, r3
    97c4:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    97c6:	492d      	ldr	r1, [pc, #180]	; (987c <ev_setup_handler+0x17c>)
    97c8:	680a      	ldr	r2, [r1, #0]
    97ca:	ea22 0303 	bic.w	r3, r2, r3
    97ce:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    97d0:	2303      	movs	r3, #3
    97d2:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
    97d4:	f386 8811 	msr	BASEPRI, r6
    97d8:	f3bf 8f6f 	isb	sy
}
    97dc:	e7aa      	b.n	9734 <ev_setup_handler+0x34>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    97de:	4d2c      	ldr	r5, [pc, #176]	; (9890 <ev_setup_handler+0x190>)
    97e0:	e7d9      	b.n	9796 <ev_setup_handler+0x96>
            nrfx_usbd_transfer_out_drop(ep);
    97e2:	f7ff ff5b 	bl	969c <nrfx_usbd_transfer_out_drop>
    97e6:	e7f3      	b.n	97d0 <ev_setup_handler+0xd0>
        if(!NRF_USBD_EPISO_CHECK(ep))
    97e8:	f010 0f08 	tst.w	r0, #8
    97ec:	d10f      	bne.n	980e <ev_setup_handler+0x10e>
            if(ep != NRFX_USBD_EPIN0)
    97ee:	2880      	cmp	r0, #128	; 0x80
    97f0:	d032      	beq.n	9858 <ev_setup_handler+0x158>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    97f2:	f202 32da 	addw	r2, r2, #986	; 0x3da
    97f6:	0052      	lsls	r2, r2, #1
    97f8:	4926      	ldr	r1, [pc, #152]	; (9894 <ev_setup_handler+0x194>)
    97fa:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    97fc:	3104      	adds	r1, #4
    97fe:	680a      	ldr	r2, [r1, #0]
    9800:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    9802:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9806:	680f      	ldr	r7, [r1, #0]
    9808:	433a      	orrs	r2, r7
    980a:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    980c:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    980e:	4a1b      	ldr	r2, [pc, #108]	; (987c <ev_setup_handler+0x17c>)
    9810:	6811      	ldr	r1, [r2, #0]
    9812:	4a1b      	ldr	r2, [pc, #108]	; (9880 <ev_setup_handler+0x180>)
    9814:	6817      	ldr	r7, [r2, #0]
    9816:	ea67 0c01 	orn	ip, r7, r1
    return NRFX_USBD_EP_BITPOS(ep);
    981a:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    981e:	2201      	movs	r2, #1
    9820:	fa02 f303 	lsl.w	r3, r2, r3
    9824:	ea1c 0f03 	tst.w	ip, r3
    9828:	d0d4      	beq.n	97d4 <ev_setup_handler+0xd4>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    982a:	ea27 0703 	bic.w	r7, r7, r3
    982e:	4a14      	ldr	r2, [pc, #80]	; (9880 <ev_setup_handler+0x180>)
    9830:	6017      	str	r7, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    9832:	430b      	orrs	r3, r1
    9834:	4a11      	ldr	r2, [pc, #68]	; (987c <ev_setup_handler+0x17c>)
    9836:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    9838:	2300      	movs	r3, #0
    983a:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    983c:	2303      	movs	r3, #3
    983e:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    9840:	2206      	movs	r2, #6
    9842:	f88d 2000 	strb.w	r2, [sp]
    9846:	f88d 0002 	strb.w	r0, [sp, #2]
    984a:	f88d 3003 	strb.w	r3, [sp, #3]
            m_event_handler(&evt);
    984e:	4b0e      	ldr	r3, [pc, #56]	; (9888 <ev_setup_handler+0x188>)
    9850:	681b      	ldr	r3, [r3, #0]
    9852:	4668      	mov	r0, sp
    9854:	4798      	blx	r3
    9856:	e7bd      	b.n	97d4 <ev_setup_handler+0xd4>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    9858:	4a0e      	ldr	r2, [pc, #56]	; (9894 <ev_setup_handler+0x194>)
    985a:	f240 71b4 	movw	r1, #1972	; 0x7b4
    985e:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9860:	490d      	ldr	r1, [pc, #52]	; (9898 <ev_setup_handler+0x198>)
    9862:	680a      	ldr	r2, [r1, #0]
    9864:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    9866:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    986a:	680f      	ldr	r7, [r1, #0]
    986c:	433a      	orrs	r2, r7
    986e:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9870:	680a      	ldr	r2, [r1, #0]
    9872:	e7cc      	b.n	980e <ev_setup_handler+0x10e>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    9874:	2280      	movs	r2, #128	; 0x80
    9876:	e762      	b.n	973e <ev_setup_handler+0x3e>
    9878:	50036000 	.word	0x50036000
    987c:	20001d54 	.word	0x20001d54
    9880:	20001ce4 	.word	0x20001ce4
    9884:	20001f25 	.word	0x20001f25
    9888:	20001e78 	.word	0x20001e78
    988c:	20001d58 	.word	0x20001d58
    9890:	20001de8 	.word	0x20001de8
    9894:	50036800 	.word	0x50036800
    9898:	50036804 	.word	0x50036804

0000989c <nrfx_usbd_irq_handler>:
{
    989c:	b570      	push	{r4, r5, r6, lr}
    return p_reg->INTENSET;
    989e:	4b1d      	ldr	r3, [pc, #116]	; (9914 <nrfx_usbd_irq_handler+0x78>)
    98a0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    uint32_t active = 0;
    98a4:	2400      	movs	r4, #0
    while (to_process)
    98a6:	e003      	b.n	98b0 <nrfx_usbd_irq_handler+0x14>
        to_process &= ~(1UL << event_nr);
    98a8:	2301      	movs	r3, #1
    98aa:	408b      	lsls	r3, r1
    98ac:	ea22 0203 	bic.w	r2, r2, r3
    while (to_process)
    98b0:	b1aa      	cbz	r2, 98de <nrfx_usbd_irq_handler+0x42>
        if (nrf_usbd_event_get_and_clear(NRF_USBD,
    98b2:	fa92 f1a2 	rbit	r1, r2
    98b6:	fab1 f181 	clz	r1, r1
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    98ba:	f101 0340 	add.w	r3, r1, #64	; 0x40
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    98be:	009b      	lsls	r3, r3, #2
    98c0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    98c4:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    98c8:	6818      	ldr	r0, [r3, #0]
    if (ret)
    98ca:	b110      	cbz	r0, 98d2 <nrfx_usbd_irq_handler+0x36>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    98cc:	2500      	movs	r5, #0
    98ce:	601d      	str	r5, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    98d0:	681b      	ldr	r3, [r3, #0]
    98d2:	2800      	cmp	r0, #0
    98d4:	d0e8      	beq.n	98a8 <nrfx_usbd_irq_handler+0xc>
            active |= 1UL << event_nr;
    98d6:	2301      	movs	r3, #1
    98d8:	408b      	lsls	r3, r1
    98da:	431c      	orrs	r4, r3
    98dc:	e7e4      	b.n	98a8 <nrfx_usbd_irq_handler+0xc>
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    98de:	f404 0600 	and.w	r6, r4, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    98e2:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
    while (active)
    98e6:	e00b      	b.n	9900 <nrfx_usbd_irq_handler+0x64>
        m_isr[event_nr]();
    98e8:	fa94 f5a4 	rbit	r5, r4
    98ec:	fab5 f585 	clz	r5, r5
    98f0:	4b09      	ldr	r3, [pc, #36]	; (9918 <nrfx_usbd_irq_handler+0x7c>)
    98f2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    98f6:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    98f8:	2301      	movs	r3, #1
    98fa:	40ab      	lsls	r3, r5
    98fc:	ea24 0403 	bic.w	r4, r4, r3
    while (active)
    9900:	2c00      	cmp	r4, #0
    9902:	d1f1      	bne.n	98e8 <nrfx_usbd_irq_handler+0x4c>
    usbd_dmareq_process();
    9904:	f7ff fb2c 	bl	8f60 <usbd_dmareq_process>
    if (setup_active)
    9908:	b906      	cbnz	r6, 990c <nrfx_usbd_irq_handler+0x70>
}
    990a:	bd70      	pop	{r4, r5, r6, pc}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    990c:	f7ff fef8 	bl	9700 <ev_setup_handler>
}
    9910:	e7fb      	b.n	990a <nrfx_usbd_irq_handler+0x6e>
    9912:	bf00      	nop
    9914:	50036000 	.word	0x50036000
    9918:	00010068 	.word	0x00010068

0000991c <nrfx_usbd_ep_enable>:
{
    991c:	b538      	push	{r3, r4, r5, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    991e:	b244      	sxtb	r4, r0
    9920:	2c00      	cmp	r4, #0
    9922:	db22      	blt.n	996a <nrfx_usbd_ep_enable+0x4e>
    9924:	4b26      	ldr	r3, [pc, #152]	; (99c0 <nrfx_usbd_ep_enable+0xa4>)
    9926:	f000 010f 	and.w	r1, r0, #15
    992a:	5c5a      	ldrb	r2, [r3, r1]
    992c:	2301      	movs	r3, #1
    992e:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
    9930:	4a24      	ldr	r2, [pc, #144]	; (99c4 <nrfx_usbd_ep_enable+0xa8>)
    9932:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
    9936:	2c00      	cmp	r4, #0
    9938:	db19      	blt.n	996e <nrfx_usbd_ep_enable+0x52>
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    993a:	4b22      	ldr	r3, [pc, #136]	; (99c4 <nrfx_usbd_ep_enable+0xa8>)
    993c:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
    9940:	40cb      	lsrs	r3, r1
    9942:	f003 0301 	and.w	r3, r3, #1
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    9946:	b97b      	cbnz	r3, 9968 <nrfx_usbd_ep_enable+0x4c>
    if (NRF_USBD_EPIN_CHECK(ep))
    9948:	2c00      	cmp	r4, #0
    994a:	db16      	blt.n	997a <nrfx_usbd_ep_enable+0x5e>
        p_reg->EPOUTEN |= 1UL << epnr;
    994c:	4d1d      	ldr	r5, [pc, #116]	; (99c4 <nrfx_usbd_ep_enable+0xa8>)
    994e:	f8d5 3514 	ldr.w	r3, [r5, #1300]	; 0x514
    9952:	2201      	movs	r2, #1
    9954:	408a      	lsls	r2, r1
    9956:	4313      	orrs	r3, r2
    9958:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    995c:	b121      	cbz	r1, 9968 <nrfx_usbd_ep_enable+0x4c>
    995e:	2c00      	cmp	r4, #0
    9960:	db02      	blt.n	9968 <nrfx_usbd_ep_enable+0x4c>
        NRF_USBD_EPOUT_CHECK(ep) &&
    9962:	f010 0f08 	tst.w	r0, #8
    9966:	d011      	beq.n	998c <nrfx_usbd_ep_enable+0x70>
}
    9968:	bd38      	pop	{r3, r4, r5, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    996a:	4b17      	ldr	r3, [pc, #92]	; (99c8 <nrfx_usbd_ep_enable+0xac>)
    996c:	e7db      	b.n	9926 <nrfx_usbd_ep_enable+0xa>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    996e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    9972:	40cb      	lsrs	r3, r1
    9974:	f003 0301 	and.w	r3, r3, #1
    9978:	e7e5      	b.n	9946 <nrfx_usbd_ep_enable+0x2a>
        p_reg->EPINEN |= 1UL << epnr;
    997a:	4d12      	ldr	r5, [pc, #72]	; (99c4 <nrfx_usbd_ep_enable+0xa8>)
    997c:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    9980:	2201      	movs	r2, #1
    9982:	408a      	lsls	r2, r1
    9984:	4313      	orrs	r3, r2
    9986:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
    998a:	e7e7      	b.n	995c <nrfx_usbd_ep_enable+0x40>
	__asm__ volatile(
    998c:	f04f 0320 	mov.w	r3, #32
    9990:	f3ef 8511 	mrs	r5, BASEPRI
    9994:	f383 8812 	msr	BASEPRI_MAX, r3
    9998:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    999c:	f7ff fe7e 	bl	969c <nrfx_usbd_transfer_out_drop>
    return NRFX_USBD_EP_BITPOS(ep);
    99a0:	f004 040f 	and.w	r4, r4, #15
    99a4:	3410      	adds	r4, #16
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    99a6:	2301      	movs	r3, #1
    99a8:	fa03 f404 	lsl.w	r4, r3, r4
    99ac:	4a07      	ldr	r2, [pc, #28]	; (99cc <nrfx_usbd_ep_enable+0xb0>)
    99ae:	6813      	ldr	r3, [r2, #0]
    99b0:	ea23 0304 	bic.w	r3, r3, r4
    99b4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    99b6:	f385 8811 	msr	BASEPRI, r5
    99ba:	f3bf 8f6f 	isb	sy
}
    99be:	e7d3      	b.n	9968 <nrfx_usbd_ep_enable+0x4c>
    99c0:	00010048 	.word	0x00010048
    99c4:	50036000 	.word	0x50036000
    99c8:	00010028 	.word	0x00010028
    99cc:	20001ce4 	.word	0x20001ce4

000099d0 <nrfx_usbd_ep_stall_clear>:
{
    99d0:	b510      	push	{r4, lr}
    99d2:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    99d4:	f010 0f80 	tst.w	r0, #128	; 0x80
    99d8:	d003      	beq.n	99e2 <nrfx_usbd_ep_stall_clear+0x12>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    99da:	4b06      	ldr	r3, [pc, #24]	; (99f4 <nrfx_usbd_ep_stall_clear+0x24>)
    99dc:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    99e0:	bd10      	pop	{r4, pc}
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    99e2:	f7ff fda3 	bl	952c <nrfx_usbd_ep_stall_check>
    99e6:	2800      	cmp	r0, #0
    99e8:	d0f7      	beq.n	99da <nrfx_usbd_ep_stall_clear+0xa>
        nrfx_usbd_transfer_out_drop(ep);
    99ea:	4620      	mov	r0, r4
    99ec:	f7ff fe56 	bl	969c <nrfx_usbd_transfer_out_drop>
    99f0:	e7f3      	b.n	99da <nrfx_usbd_ep_stall_clear+0xa>
    99f2:	bf00      	nop
    99f4:	50036000 	.word	0x50036000

000099f8 <usbd_ep_abort_all>:
{
    99f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    99fa:	b083      	sub	sp, #12
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    99fc:	4b53      	ldr	r3, [pc, #332]	; (9b4c <usbd_ep_abort_all+0x154>)
    99fe:	885b      	ldrh	r3, [r3, #2]
    9a00:	4a53      	ldr	r2, [pc, #332]	; (9b50 <usbd_ep_abort_all+0x158>)
    9a02:	6814      	ldr	r4, [r2, #0]
    9a04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    while (0 != ep_waiting)
    9a08:	e00a      	b.n	9a20 <usbd_ep_abort_all+0x28>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9a0a:	f045 0080 	orr.w	r0, r5, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    9a0e:	f010 0f08 	tst.w	r0, #8
    9a12:	d012      	beq.n	9a3a <usbd_ep_abort_all+0x42>
        ep_waiting &= ~(1U << bitpos);
    9a14:	b2eb      	uxtb	r3, r5
    9a16:	2201      	movs	r2, #1
    9a18:	fa02 f303 	lsl.w	r3, r2, r3
    9a1c:	ea24 0403 	bic.w	r4, r4, r3
    while (0 != ep_waiting)
    9a20:	2c00      	cmp	r4, #0
    9a22:	f000 808c 	beq.w	9b3e <usbd_ep_abort_all+0x146>
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    9a26:	fa94 f5a4 	rbit	r5, r4
    9a2a:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9a2e:	2d0f      	cmp	r5, #15
    9a30:	d9eb      	bls.n	9a0a <usbd_ep_abort_all+0x12>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    9a32:	f1a5 0010 	sub.w	r0, r5, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9a36:	b2c0      	uxtb	r0, r0
    9a38:	e7e9      	b.n	9a0e <usbd_ep_abort_all+0x16>
	__asm__ volatile(
    9a3a:	f04f 0320 	mov.w	r3, #32
    9a3e:	f3ef 8711 	mrs	r7, BASEPRI
    9a42:	f383 8812 	msr	BASEPRI_MAX, r3
    9a46:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9a4a:	b243      	sxtb	r3, r0
    9a4c:	2b00      	cmp	r3, #0
    9a4e:	db24      	blt.n	9a9a <usbd_ep_abort_all+0xa2>
    9a50:	4e40      	ldr	r6, [pc, #256]	; (9b54 <usbd_ep_abort_all+0x15c>)
        NRF_USBD_EP_NR_GET(ep));
    9a52:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9a56:	eb06 1602 	add.w	r6, r6, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    9a5a:	2b00      	cmp	r3, #0
    9a5c:	db22      	blt.n	9aa4 <usbd_ep_abort_all+0xac>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9a5e:	4a3c      	ldr	r2, [pc, #240]	; (9b50 <usbd_ep_abort_all+0x158>)
    9a60:	6811      	ldr	r1, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    9a62:	f003 030f 	and.w	r3, r3, #15
    9a66:	f103 0210 	add.w	r2, r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9a6a:	2301      	movs	r3, #1
    9a6c:	4093      	lsls	r3, r2
    9a6e:	ea33 0201 	bics.w	r2, r3, r1
    9a72:	d114      	bne.n	9a9e <usbd_ep_abort_all+0xa6>
            p_state->handler.consumer = NULL;
    9a74:	2200      	movs	r2, #0
    9a76:	6032      	str	r2, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9a78:	4935      	ldr	r1, [pc, #212]	; (9b50 <usbd_ep_abort_all+0x158>)
    9a7a:	680a      	ldr	r2, [r1, #0]
    9a7c:	ea22 0203 	bic.w	r2, r2, r3
    9a80:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    9a82:	4932      	ldr	r1, [pc, #200]	; (9b4c <usbd_ep_abort_all+0x154>)
    9a84:	680a      	ldr	r2, [r1, #0]
    9a86:	ea22 0303 	bic.w	r3, r2, r3
    9a8a:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    9a8c:	2303      	movs	r3, #3
    9a8e:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    9a90:	f387 8811 	msr	BASEPRI, r7
    9a94:	f3bf 8f6f 	isb	sy
}
    9a98:	e7bc      	b.n	9a14 <usbd_ep_abort_all+0x1c>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9a9a:	4e2f      	ldr	r6, [pc, #188]	; (9b58 <usbd_ep_abort_all+0x160>)
    9a9c:	e7d9      	b.n	9a52 <usbd_ep_abort_all+0x5a>
            nrfx_usbd_transfer_out_drop(ep);
    9a9e:	f7ff fdfd 	bl	969c <nrfx_usbd_transfer_out_drop>
    9aa2:	e7f3      	b.n	9a8c <usbd_ep_abort_all+0x94>
        if(!NRF_USBD_EPISO_CHECK(ep))
    9aa4:	f010 0f08 	tst.w	r0, #8
    9aa8:	d111      	bne.n	9ace <usbd_ep_abort_all+0xd6>
            if(ep != NRFX_USBD_EPIN0)
    9aaa:	2880      	cmp	r0, #128	; 0x80
    9aac:	d037      	beq.n	9b1e <usbd_ep_abort_all+0x126>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    9aae:	f202 32da 	addw	r2, r2, #986	; 0x3da
    9ab2:	0052      	lsls	r2, r2, #1
    9ab4:	4929      	ldr	r1, [pc, #164]	; (9b5c <usbd_ep_abort_all+0x164>)
    9ab6:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9ab8:	3104      	adds	r1, #4
    9aba:	680a      	ldr	r2, [r1, #0]
    9abc:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    9abe:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9ac2:	f8d1 c000 	ldr.w	ip, [r1]
    9ac6:	ea42 020c 	orr.w	r2, r2, ip
    9aca:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9acc:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    9ace:	4a1f      	ldr	r2, [pc, #124]	; (9b4c <usbd_ep_abort_all+0x154>)
    9ad0:	6811      	ldr	r1, [r2, #0]
    9ad2:	4a1f      	ldr	r2, [pc, #124]	; (9b50 <usbd_ep_abort_all+0x158>)
    9ad4:	f8d2 c000 	ldr.w	ip, [r2]
    9ad8:	ea6c 0e01 	orn	lr, ip, r1
    return NRFX_USBD_EP_BITPOS(ep);
    9adc:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    9ae0:	2201      	movs	r2, #1
    9ae2:	fa02 f303 	lsl.w	r3, r2, r3
    9ae6:	ea1e 0f03 	tst.w	lr, r3
    9aea:	d0d1      	beq.n	9a90 <usbd_ep_abort_all+0x98>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9aec:	ea2c 0203 	bic.w	r2, ip, r3
    9af0:	f8df c05c 	ldr.w	ip, [pc, #92]	; 9b50 <usbd_ep_abort_all+0x158>
    9af4:	f8cc 2000 	str.w	r2, [ip]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    9af8:	430b      	orrs	r3, r1
    9afa:	4a14      	ldr	r2, [pc, #80]	; (9b4c <usbd_ep_abort_all+0x154>)
    9afc:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    9afe:	2300      	movs	r3, #0
    9b00:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    9b02:	2303      	movs	r3, #3
    9b04:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    9b06:	2206      	movs	r2, #6
    9b08:	f88d 2004 	strb.w	r2, [sp, #4]
    9b0c:	f88d 0006 	strb.w	r0, [sp, #6]
    9b10:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    9b14:	4b12      	ldr	r3, [pc, #72]	; (9b60 <usbd_ep_abort_all+0x168>)
    9b16:	681b      	ldr	r3, [r3, #0]
    9b18:	a801      	add	r0, sp, #4
    9b1a:	4798      	blx	r3
    9b1c:	e7b8      	b.n	9a90 <usbd_ep_abort_all+0x98>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    9b1e:	4a0f      	ldr	r2, [pc, #60]	; (9b5c <usbd_ep_abort_all+0x164>)
    9b20:	f240 71b4 	movw	r1, #1972	; 0x7b4
    9b24:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9b26:	490f      	ldr	r1, [pc, #60]	; (9b64 <usbd_ep_abort_all+0x16c>)
    9b28:	680a      	ldr	r2, [r1, #0]
    9b2a:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    9b2c:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9b30:	f8d1 c000 	ldr.w	ip, [r1]
    9b34:	ea42 020c 	orr.w	r2, r2, ip
    9b38:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9b3a:	680a      	ldr	r2, [r1, #0]
    9b3c:	e7c7      	b.n	9ace <usbd_ep_abort_all+0xd6>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    9b3e:	4b03      	ldr	r3, [pc, #12]	; (9b4c <usbd_ep_abort_all+0x154>)
    9b40:	f240 12ff 	movw	r2, #511	; 0x1ff
    9b44:	601a      	str	r2, [r3, #0]
}
    9b46:	b003      	add	sp, #12
    9b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b4a:	bf00      	nop
    9b4c:	20001d54 	.word	0x20001d54
    9b50:	20001ce4 	.word	0x20001ce4
    9b54:	20001d58 	.word	0x20001d58
    9b58:	20001de8 	.word	0x20001de8
    9b5c:	50036800 	.word	0x50036800
    9b60:	20001e78 	.word	0x20001e78
    9b64:	50036804 	.word	0x50036804

00009b68 <nrfx_usbd_stop>:
{
    9b68:	b510      	push	{r4, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9b6a:	4b0d      	ldr	r3, [pc, #52]	; (9ba0 <nrfx_usbd_stop+0x38>)
    9b6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    9b70:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    9b74:	2036      	movs	r0, #54	; 0x36
    9b76:	f7fa f8f3 	bl	3d60 <arch_irq_is_enabled>
    9b7a:	b900      	cbnz	r0, 9b7e <nrfx_usbd_stop+0x16>
}
    9b7c:	bd10      	pop	{r4, pc}
        usbd_ep_abort_all();
    9b7e:	f7ff ff3b 	bl	99f8 <usbd_ep_abort_all>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    9b82:	4c08      	ldr	r4, [pc, #32]	; (9ba4 <nrfx_usbd_stop+0x3c>)
    9b84:	2300      	movs	r3, #0
    9b86:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    9b8a:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
    9b8e:	2036      	movs	r0, #54	; 0x36
    9b90:	f7fa f8d2 	bl	3d38 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    9b94:	f04f 33ff 	mov.w	r3, #4294967295
    9b98:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    9b9c:	e7ee      	b.n	9b7c <nrfx_usbd_stop+0x14>
    9b9e:	bf00      	nop
    9ba0:	e000e100 	.word	0xe000e100
    9ba4:	50036000 	.word	0x50036000

00009ba8 <nrfx_usbd_disable>:
{
    9ba8:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    9baa:	f7ff ffdd 	bl	9b68 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    9bae:	4b0b      	ldr	r3, [pc, #44]	; (9bdc <nrfx_usbd_disable+0x34>)
    9bb0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    9bb4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    9bb8:	2200      	movs	r2, #0
    9bba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    9bbe:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    9bc2:	f004 fac9 	bl	e158 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9bc6:	b110      	cbz	r0, 9bce <nrfx_usbd_disable+0x26>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9bc8:	4b05      	ldr	r3, [pc, #20]	; (9be0 <nrfx_usbd_disable+0x38>)
    9bca:	2200      	movs	r2, #0
    9bcc:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9bce:	4b05      	ldr	r3, [pc, #20]	; (9be4 <nrfx_usbd_disable+0x3c>)
    9bd0:	2200      	movs	r2, #0
    9bd2:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    9bd4:	4b04      	ldr	r3, [pc, #16]	; (9be8 <nrfx_usbd_disable+0x40>)
    9bd6:	2201      	movs	r2, #1
    9bd8:	701a      	strb	r2, [r3, #0]
}
    9bda:	bd08      	pop	{r3, pc}
    9bdc:	50036000 	.word	0x50036000
    9be0:	40027c1c 	.word	0x40027c1c
    9be4:	20001f23 	.word	0x20001f23
    9be8:	20001f24 	.word	0x20001f24

00009bec <nrfx_usbd_suspend>:
{
    9bec:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    9bee:	f04f 0320 	mov.w	r3, #32
    9bf2:	f3ef 8511 	mrs	r5, BASEPRI
    9bf6:	f383 8812 	msr	BASEPRI_MAX, r3
    9bfa:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    9bfe:	4b13      	ldr	r3, [pc, #76]	; (9c4c <nrfx_usbd_suspend+0x60>)
    9c00:	781b      	ldrb	r3, [r3, #0]
    9c02:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    9c06:	b92b      	cbnz	r3, 9c14 <nrfx_usbd_suspend+0x28>
	__asm__ volatile(
    9c08:	f385 8811 	msr	BASEPRI, r5
    9c0c:	f3bf 8f6f 	isb	sy
}
    9c10:	4620      	mov	r0, r4
    9c12:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    9c14:	f7ff fef0 	bl	99f8 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    9c18:	4b0d      	ldr	r3, [pc, #52]	; (9c50 <nrfx_usbd_suspend+0x64>)
    9c1a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    9c1e:	f413 7f00 	tst.w	r3, #512	; 0x200
    9c22:	d111      	bne.n	9c48 <nrfx_usbd_suspend+0x5c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    9c24:	4b0a      	ldr	r3, [pc, #40]	; (9c50 <nrfx_usbd_suspend+0x64>)
    9c26:	2201      	movs	r2, #1
    9c28:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    9c2c:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    9c30:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    9c34:	f413 7f00 	tst.w	r3, #512	; 0x200
    9c38:	d0e6      	beq.n	9c08 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    9c3a:	4b05      	ldr	r3, [pc, #20]	; (9c50 <nrfx_usbd_suspend+0x64>)
    9c3c:	2400      	movs	r4, #0
    9c3e:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    9c42:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
}
    9c46:	e7df      	b.n	9c08 <nrfx_usbd_suspend+0x1c>
    bool suspended = false;
    9c48:	2400      	movs	r4, #0
    9c4a:	e7dd      	b.n	9c08 <nrfx_usbd_suspend+0x1c>
    9c4c:	20001f22 	.word	0x20001f22
    9c50:	50036000 	.word	0x50036000

00009c54 <nrfx_usbd_ep_abort>:
{
    9c54:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c56:	b083      	sub	sp, #12
	__asm__ volatile(
    9c58:	f04f 0320 	mov.w	r3, #32
    9c5c:	f3ef 8511 	mrs	r5, BASEPRI
    9c60:	f383 8812 	msr	BASEPRI_MAX, r3
    9c64:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9c68:	b243      	sxtb	r3, r0
    9c6a:	2b00      	cmp	r3, #0
    9c6c:	db25      	blt.n	9cba <nrfx_usbd_ep_abort+0x66>
    9c6e:	4c38      	ldr	r4, [pc, #224]	; (9d50 <nrfx_usbd_ep_abort+0xfc>)
        NRF_USBD_EP_NR_GET(ep));
    9c70:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9c74:	eb04 1402 	add.w	r4, r4, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    9c78:	2b00      	cmp	r3, #0
    9c7a:	db23      	blt.n	9cc4 <nrfx_usbd_ep_abort+0x70>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9c7c:	4a35      	ldr	r2, [pc, #212]	; (9d54 <nrfx_usbd_ep_abort+0x100>)
    9c7e:	6811      	ldr	r1, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    9c80:	f003 030f 	and.w	r3, r3, #15
    9c84:	f103 0210 	add.w	r2, r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9c88:	2301      	movs	r3, #1
    9c8a:	4093      	lsls	r3, r2
    9c8c:	ea33 0201 	bics.w	r2, r3, r1
    9c90:	d115      	bne.n	9cbe <nrfx_usbd_ep_abort+0x6a>
            p_state->handler.consumer = NULL;
    9c92:	2200      	movs	r2, #0
    9c94:	6022      	str	r2, [r4, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9c96:	492f      	ldr	r1, [pc, #188]	; (9d54 <nrfx_usbd_ep_abort+0x100>)
    9c98:	680a      	ldr	r2, [r1, #0]
    9c9a:	ea22 0203 	bic.w	r2, r2, r3
    9c9e:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    9ca0:	492d      	ldr	r1, [pc, #180]	; (9d58 <nrfx_usbd_ep_abort+0x104>)
    9ca2:	680a      	ldr	r2, [r1, #0]
    9ca4:	ea22 0303 	bic.w	r3, r2, r3
    9ca8:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    9caa:	2303      	movs	r3, #3
    9cac:	73a3      	strb	r3, [r4, #14]
	__asm__ volatile(
    9cae:	f385 8811 	msr	BASEPRI, r5
    9cb2:	f3bf 8f6f 	isb	sy
}
    9cb6:	b003      	add	sp, #12
    9cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9cba:	4c28      	ldr	r4, [pc, #160]	; (9d5c <nrfx_usbd_ep_abort+0x108>)
    9cbc:	e7d8      	b.n	9c70 <nrfx_usbd_ep_abort+0x1c>
            nrfx_usbd_transfer_out_drop(ep);
    9cbe:	f7ff fced 	bl	969c <nrfx_usbd_transfer_out_drop>
    9cc2:	e7f2      	b.n	9caa <nrfx_usbd_ep_abort+0x56>
        if(!NRF_USBD_EPISO_CHECK(ep))
    9cc4:	f010 0f08 	tst.w	r0, #8
    9cc8:	d10f      	bne.n	9cea <nrfx_usbd_ep_abort+0x96>
            if(ep != NRFX_USBD_EPIN0)
    9cca:	2880      	cmp	r0, #128	; 0x80
    9ccc:	d031      	beq.n	9d32 <nrfx_usbd_ep_abort+0xde>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    9cce:	f202 32da 	addw	r2, r2, #986	; 0x3da
    9cd2:	0052      	lsls	r2, r2, #1
    9cd4:	4922      	ldr	r1, [pc, #136]	; (9d60 <nrfx_usbd_ep_abort+0x10c>)
    9cd6:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9cd8:	3104      	adds	r1, #4
    9cda:	680a      	ldr	r2, [r1, #0]
    9cdc:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    9cde:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9ce2:	680e      	ldr	r6, [r1, #0]
    9ce4:	4332      	orrs	r2, r6
    9ce6:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9ce8:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    9cea:	4a1b      	ldr	r2, [pc, #108]	; (9d58 <nrfx_usbd_ep_abort+0x104>)
    9cec:	6811      	ldr	r1, [r2, #0]
    9cee:	4a19      	ldr	r2, [pc, #100]	; (9d54 <nrfx_usbd_ep_abort+0x100>)
    9cf0:	6816      	ldr	r6, [r2, #0]
    9cf2:	ea66 0701 	orn	r7, r6, r1
    return NRFX_USBD_EP_BITPOS(ep);
    9cf6:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    9cfa:	2201      	movs	r2, #1
    9cfc:	fa02 f303 	lsl.w	r3, r2, r3
    9d00:	421f      	tst	r7, r3
    9d02:	d0d4      	beq.n	9cae <nrfx_usbd_ep_abort+0x5a>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9d04:	ea26 0603 	bic.w	r6, r6, r3
    9d08:	4a12      	ldr	r2, [pc, #72]	; (9d54 <nrfx_usbd_ep_abort+0x100>)
    9d0a:	6016      	str	r6, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    9d0c:	430b      	orrs	r3, r1
    9d0e:	4a12      	ldr	r2, [pc, #72]	; (9d58 <nrfx_usbd_ep_abort+0x104>)
    9d10:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    9d12:	2300      	movs	r3, #0
    9d14:	6023      	str	r3, [r4, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    9d16:	2303      	movs	r3, #3
    9d18:	73a3      	strb	r3, [r4, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    9d1a:	2206      	movs	r2, #6
    9d1c:	f88d 2004 	strb.w	r2, [sp, #4]
    9d20:	f88d 0006 	strb.w	r0, [sp, #6]
    9d24:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    9d28:	4b0e      	ldr	r3, [pc, #56]	; (9d64 <nrfx_usbd_ep_abort+0x110>)
    9d2a:	681b      	ldr	r3, [r3, #0]
    9d2c:	a801      	add	r0, sp, #4
    9d2e:	4798      	blx	r3
    9d30:	e7bd      	b.n	9cae <nrfx_usbd_ep_abort+0x5a>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    9d32:	4a0b      	ldr	r2, [pc, #44]	; (9d60 <nrfx_usbd_ep_abort+0x10c>)
    9d34:	f240 71b4 	movw	r1, #1972	; 0x7b4
    9d38:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9d3a:	490b      	ldr	r1, [pc, #44]	; (9d68 <nrfx_usbd_ep_abort+0x114>)
    9d3c:	680a      	ldr	r2, [r1, #0]
    9d3e:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    9d40:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9d44:	680e      	ldr	r6, [r1, #0]
    9d46:	4332      	orrs	r2, r6
    9d48:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9d4a:	680a      	ldr	r2, [r1, #0]
    9d4c:	e7cd      	b.n	9cea <nrfx_usbd_ep_abort+0x96>
    9d4e:	bf00      	nop
    9d50:	20001d58 	.word	0x20001d58
    9d54:	20001ce4 	.word	0x20001ce4
    9d58:	20001d54 	.word	0x20001d54
    9d5c:	20001de8 	.word	0x20001de8
    9d60:	50036800 	.word	0x50036800
    9d64:	20001e78 	.word	0x20001e78
    9d68:	50036804 	.word	0x50036804

00009d6c <nrfx_usbd_ep_disable>:
{
    9d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d6e:	b083      	sub	sp, #12
    9d70:	4604      	mov	r4, r0
	__asm__ volatile(
    9d72:	f04f 0320 	mov.w	r3, #32
    9d76:	f3ef 8611 	mrs	r6, BASEPRI
    9d7a:	f383 8812 	msr	BASEPRI_MAX, r3
    9d7e:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9d82:	b243      	sxtb	r3, r0
    9d84:	2b00      	cmp	r3, #0
    9d86:	db3c      	blt.n	9e02 <nrfx_usbd_ep_disable+0x96>
    9d88:	4d49      	ldr	r5, [pc, #292]	; (9eb0 <nrfx_usbd_ep_disable+0x144>)
        NRF_USBD_EP_NR_GET(ep));
    9d8a:	f004 020f 	and.w	r2, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9d8e:	eb05 1502 	add.w	r5, r5, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    9d92:	2b00      	cmp	r3, #0
    9d94:	db3b      	blt.n	9e0e <nrfx_usbd_ep_disable+0xa2>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9d96:	4a47      	ldr	r2, [pc, #284]	; (9eb4 <nrfx_usbd_ep_disable+0x148>)
    9d98:	6811      	ldr	r1, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    9d9a:	f003 030f 	and.w	r3, r3, #15
    9d9e:	f103 0210 	add.w	r2, r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9da2:	2301      	movs	r3, #1
    9da4:	4093      	lsls	r3, r2
    9da6:	ea33 0201 	bics.w	r2, r3, r1
    9daa:	d12c      	bne.n	9e06 <nrfx_usbd_ep_disable+0x9a>
            p_state->handler.consumer = NULL;
    9dac:	2200      	movs	r2, #0
    9dae:	602a      	str	r2, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9db0:	4940      	ldr	r1, [pc, #256]	; (9eb4 <nrfx_usbd_ep_disable+0x148>)
    9db2:	680a      	ldr	r2, [r1, #0]
    9db4:	ea22 0203 	bic.w	r2, r2, r3
    9db8:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    9dba:	493f      	ldr	r1, [pc, #252]	; (9eb8 <nrfx_usbd_ep_disable+0x14c>)
    9dbc:	680a      	ldr	r2, [r1, #0]
    9dbe:	ea22 0303 	bic.w	r3, r2, r3
    9dc2:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    9dc4:	2303      	movs	r3, #3
    9dc6:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
    9dc8:	f386 8811 	msr	BASEPRI, r6
    9dcc:	f3bf 8f6f 	isb	sy
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    9dd0:	f004 030f 	and.w	r3, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    9dd4:	b264      	sxtb	r4, r4
    9dd6:	2c00      	cmp	r4, #0
    9dd8:	db5e      	blt.n	9e98 <nrfx_usbd_ep_disable+0x12c>
        p_reg->EPOUTEN &= ~(1UL << epnr);
    9dda:	4838      	ldr	r0, [pc, #224]	; (9ebc <nrfx_usbd_ep_disable+0x150>)
    9ddc:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
    9de0:	2101      	movs	r1, #1
    9de2:	4099      	lsls	r1, r3
    9de4:	ea22 0201 	bic.w	r2, r2, r1
    9de8:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    9dec:	2c00      	cmp	r4, #0
    9dee:	db5d      	blt.n	9eac <nrfx_usbd_ep_disable+0x140>
    9df0:	4a33      	ldr	r2, [pc, #204]	; (9ec0 <nrfx_usbd_ep_disable+0x154>)
    9df2:	5cd2      	ldrb	r2, [r2, r3]
    9df4:	2301      	movs	r3, #1
    9df6:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    9df8:	4a30      	ldr	r2, [pc, #192]	; (9ebc <nrfx_usbd_ep_disable+0x150>)
    9dfa:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    9dfe:	b003      	add	sp, #12
    9e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9e02:	4d30      	ldr	r5, [pc, #192]	; (9ec4 <nrfx_usbd_ep_disable+0x158>)
    9e04:	e7c1      	b.n	9d8a <nrfx_usbd_ep_disable+0x1e>
            nrfx_usbd_transfer_out_drop(ep);
    9e06:	4620      	mov	r0, r4
    9e08:	f7ff fc48 	bl	969c <nrfx_usbd_transfer_out_drop>
    9e0c:	e7da      	b.n	9dc4 <nrfx_usbd_ep_disable+0x58>
        if(!NRF_USBD_EPISO_CHECK(ep))
    9e0e:	f014 0f08 	tst.w	r4, #8
    9e12:	d10f      	bne.n	9e34 <nrfx_usbd_ep_disable+0xc8>
            if(ep != NRFX_USBD_EPIN0)
    9e14:	2c80      	cmp	r4, #128	; 0x80
    9e16:	d031      	beq.n	9e7c <nrfx_usbd_ep_disable+0x110>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    9e18:	f202 32da 	addw	r2, r2, #986	; 0x3da
    9e1c:	0052      	lsls	r2, r2, #1
    9e1e:	492a      	ldr	r1, [pc, #168]	; (9ec8 <nrfx_usbd_ep_disable+0x15c>)
    9e20:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9e22:	3104      	adds	r1, #4
    9e24:	680a      	ldr	r2, [r1, #0]
    9e26:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    9e28:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9e2c:	6808      	ldr	r0, [r1, #0]
    9e2e:	4302      	orrs	r2, r0
    9e30:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9e32:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    9e34:	4a20      	ldr	r2, [pc, #128]	; (9eb8 <nrfx_usbd_ep_disable+0x14c>)
    9e36:	6811      	ldr	r1, [r2, #0]
    9e38:	4a1e      	ldr	r2, [pc, #120]	; (9eb4 <nrfx_usbd_ep_disable+0x148>)
    9e3a:	6810      	ldr	r0, [r2, #0]
    9e3c:	ea60 0701 	orn	r7, r0, r1
    return NRFX_USBD_EP_BITPOS(ep);
    9e40:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    9e44:	2201      	movs	r2, #1
    9e46:	fa02 f303 	lsl.w	r3, r2, r3
    9e4a:	421f      	tst	r7, r3
    9e4c:	d0bc      	beq.n	9dc8 <nrfx_usbd_ep_disable+0x5c>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9e4e:	ea20 0003 	bic.w	r0, r0, r3
    9e52:	4a18      	ldr	r2, [pc, #96]	; (9eb4 <nrfx_usbd_ep_disable+0x148>)
    9e54:	6010      	str	r0, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    9e56:	430b      	orrs	r3, r1
    9e58:	4a17      	ldr	r2, [pc, #92]	; (9eb8 <nrfx_usbd_ep_disable+0x14c>)
    9e5a:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    9e5c:	2300      	movs	r3, #0
    9e5e:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    9e60:	2303      	movs	r3, #3
    9e62:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    9e64:	2206      	movs	r2, #6
    9e66:	f88d 2004 	strb.w	r2, [sp, #4]
    9e6a:	f88d 4006 	strb.w	r4, [sp, #6]
    9e6e:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    9e72:	4b16      	ldr	r3, [pc, #88]	; (9ecc <nrfx_usbd_ep_disable+0x160>)
    9e74:	681b      	ldr	r3, [r3, #0]
    9e76:	a801      	add	r0, sp, #4
    9e78:	4798      	blx	r3
    9e7a:	e7a5      	b.n	9dc8 <nrfx_usbd_ep_disable+0x5c>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    9e7c:	4a12      	ldr	r2, [pc, #72]	; (9ec8 <nrfx_usbd_ep_disable+0x15c>)
    9e7e:	f240 71b4 	movw	r1, #1972	; 0x7b4
    9e82:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9e84:	4912      	ldr	r1, [pc, #72]	; (9ed0 <nrfx_usbd_ep_disable+0x164>)
    9e86:	680a      	ldr	r2, [r1, #0]
    9e88:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    9e8a:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9e8e:	6808      	ldr	r0, [r1, #0]
    9e90:	4302      	orrs	r2, r0
    9e92:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9e94:	680a      	ldr	r2, [r1, #0]
    9e96:	e7cd      	b.n	9e34 <nrfx_usbd_ep_disable+0xc8>
        p_reg->EPINEN &= ~(1UL << epnr);
    9e98:	4808      	ldr	r0, [pc, #32]	; (9ebc <nrfx_usbd_ep_disable+0x150>)
    9e9a:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    9e9e:	2101      	movs	r1, #1
    9ea0:	4099      	lsls	r1, r3
    9ea2:	ea22 0201 	bic.w	r2, r2, r1
    9ea6:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    9eaa:	e79f      	b.n	9dec <nrfx_usbd_ep_disable+0x80>
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    9eac:	4a09      	ldr	r2, [pc, #36]	; (9ed4 <nrfx_usbd_ep_disable+0x168>)
    9eae:	e7a0      	b.n	9df2 <nrfx_usbd_ep_disable+0x86>
    9eb0:	20001d58 	.word	0x20001d58
    9eb4:	20001ce4 	.word	0x20001ce4
    9eb8:	20001d54 	.word	0x20001d54
    9ebc:	50036000 	.word	0x50036000
    9ec0:	00010048 	.word	0x00010048
    9ec4:	20001de8 	.word	0x20001de8
    9ec8:	50036800 	.word	0x50036800
    9ecc:	20001e78 	.word	0x20001e78
    9ed0:	50036804 	.word	0x50036804
    9ed4:	00010028 	.word	0x00010028

00009ed8 <nrfx_usbreg_enable>:
    p_reg->INTENSET = mask;
    9ed8:	4b02      	ldr	r3, [pc, #8]	; (9ee4 <nrfx_usbreg_enable+0xc>)
    9eda:	2207      	movs	r2, #7
    9edc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
void nrfx_usbreg_enable(void)
{
    nrf_usbreg_int_enable(NRF_USBREGULATOR, NRF_USBREG_INT_USBDETECTED |
                                            NRF_USBREG_INT_USBREMOVED  |
                                            NRF_USBREG_INT_USBPWRRDY);
}
    9ee0:	4770      	bx	lr
    9ee2:	bf00      	nop
    9ee4:	50037000 	.word	0x50037000

00009ee8 <nrfx_usbreg_disable>:
    p_reg->INTENCLR = mask;
    9ee8:	4b02      	ldr	r3, [pc, #8]	; (9ef4 <nrfx_usbreg_disable+0xc>)
    9eea:	2207      	movs	r2, #7
    9eec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
void nrfx_usbreg_disable(void)
{
    nrf_usbreg_int_disable(NRF_USBREGULATOR, NRF_USBREG_INT_USBDETECTED |
                                             NRF_USBREG_INT_USBREMOVED  |
                                             NRF_USBREG_INT_USBPWRRDY);
}
    9ef0:	4770      	bx	lr
    9ef2:	bf00      	nop
    9ef4:	50037000 	.word	0x50037000

00009ef8 <nrfx_usbreg_uninit>:

void nrfx_usbreg_uninit(void)
{
    9ef8:	b508      	push	{r3, lr}
    nrfx_usbreg_disable();
    9efa:	f7ff fff5 	bl	9ee8 <nrfx_usbreg_disable>
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(NRF_USBREGULATOR));
    9efe:	2037      	movs	r0, #55	; 0x37
    9f00:	f7f9 ff1a 	bl	3d38 <arch_irq_disable>
    m_usbevt_handler = NULL;
    9f04:	4b01      	ldr	r3, [pc, #4]	; (9f0c <nrfx_usbreg_uninit+0x14>)
    9f06:	2200      	movs	r2, #0
    9f08:	601a      	str	r2, [r3, #0]
}
    9f0a:	bd08      	pop	{r3, pc}
    9f0c:	20001ebc 	.word	0x20001ebc

00009f10 <nrfx_usbreg_init>:
{
    9f10:	b510      	push	{r4, lr}
    9f12:	4604      	mov	r4, r0
    nrfx_usbreg_uninit();
    9f14:	f7ff fff0 	bl	9ef8 <nrfx_usbreg_uninit>
    m_usbevt_handler = p_config->handler;
    9f18:	6822      	ldr	r2, [r4, #0]
    9f1a:	4b06      	ldr	r3, [pc, #24]	; (9f34 <nrfx_usbreg_init+0x24>)
    9f1c:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9f1e:	2300      	movs	r3, #0
    9f20:	4a05      	ldr	r2, [pc, #20]	; (9f38 <nrfx_usbreg_init+0x28>)
    9f22:	6013      	str	r3, [r2, #0]
    9f24:	3208      	adds	r2, #8
    9f26:	6013      	str	r3, [r2, #0]
    9f28:	3a04      	subs	r2, #4
    9f2a:	6013      	str	r3, [r2, #0]
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_USBREGULATOR));
    9f2c:	2037      	movs	r0, #55	; 0x37
    9f2e:	f7f9 fef3 	bl	3d18 <arch_irq_enable>
}
    9f32:	bd10      	pop	{r4, pc}
    9f34:	20001ebc 	.word	0x20001ebc
    9f38:	50037100 	.word	0x50037100

00009f3c <nrfx_usbreg_irq_handler>:

void nrfx_usbreg_irq_handler(void)
{
    9f3c:	b508      	push	{r3, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9f3e:	4b0f      	ldr	r3, [pc, #60]	; (9f7c <nrfx_usbreg_irq_handler+0x40>)
    9f40:	681b      	ldr	r3, [r3, #0]
    if (nrf_usbreg_event_check(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBDETECTED))
    9f42:	b12b      	cbz	r3, 9f50 <nrfx_usbreg_irq_handler+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9f44:	2000      	movs	r0, #0
    9f46:	4b0d      	ldr	r3, [pc, #52]	; (9f7c <nrfx_usbreg_irq_handler+0x40>)
    9f48:	6018      	str	r0, [r3, #0]
    {
        nrf_usbreg_event_clear(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBDETECTED);
        m_usbevt_handler(NRFX_USBREG_EVT_DETECTED);
    9f4a:	4b0d      	ldr	r3, [pc, #52]	; (9f80 <nrfx_usbreg_irq_handler+0x44>)
    9f4c:	681b      	ldr	r3, [r3, #0]
    9f4e:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9f50:	4b0c      	ldr	r3, [pc, #48]	; (9f84 <nrfx_usbreg_irq_handler+0x48>)
    9f52:	681b      	ldr	r3, [r3, #0]
    }
    if (nrf_usbreg_event_check(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBREMOVED))
    9f54:	b133      	cbz	r3, 9f64 <nrfx_usbreg_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9f56:	4b0b      	ldr	r3, [pc, #44]	; (9f84 <nrfx_usbreg_irq_handler+0x48>)
    9f58:	2200      	movs	r2, #0
    9f5a:	601a      	str	r2, [r3, #0]
    {
        nrf_usbreg_event_clear(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBREMOVED);
        m_usbevt_handler(NRFX_USBREG_EVT_REMOVED);
    9f5c:	4b08      	ldr	r3, [pc, #32]	; (9f80 <nrfx_usbreg_irq_handler+0x44>)
    9f5e:	681b      	ldr	r3, [r3, #0]
    9f60:	2001      	movs	r0, #1
    9f62:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9f64:	4b08      	ldr	r3, [pc, #32]	; (9f88 <nrfx_usbreg_irq_handler+0x4c>)
    9f66:	681b      	ldr	r3, [r3, #0]
    }
    if (nrf_usbreg_event_check(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBPWRRDY))
    9f68:	b133      	cbz	r3, 9f78 <nrfx_usbreg_irq_handler+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9f6a:	4b07      	ldr	r3, [pc, #28]	; (9f88 <nrfx_usbreg_irq_handler+0x4c>)
    9f6c:	2200      	movs	r2, #0
    9f6e:	601a      	str	r2, [r3, #0]
    {
        nrf_usbreg_event_clear(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBPWRRDY);
        m_usbevt_handler(NRFX_USBREG_EVT_READY);
    9f70:	4b03      	ldr	r3, [pc, #12]	; (9f80 <nrfx_usbreg_irq_handler+0x44>)
    9f72:	681b      	ldr	r3, [r3, #0]
    9f74:	2002      	movs	r0, #2
    9f76:	4798      	blx	r3
    }
}
    9f78:	bd08      	pop	{r3, pc}
    9f7a:	bf00      	nop
    9f7c:	50037100 	.word	0x50037100
    9f80:	20001ebc 	.word	0x20001ebc
    9f84:	50037104 	.word	0x50037104
    9f88:	50037108 	.word	0x50037108

00009f8c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    9f8c:	4b03      	ldr	r3, [pc, #12]	; (9f9c <z_device_state_init+0x10>)

	while (dev < __device_end) {
    9f8e:	4a04      	ldr	r2, [pc, #16]	; (9fa0 <z_device_state_init+0x14>)
    9f90:	4293      	cmp	r3, r2
    9f92:	d201      	bcs.n	9f98 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    9f94:	3318      	adds	r3, #24
    9f96:	e7fa      	b.n	9f8e <z_device_state_init+0x2>
	}
}
    9f98:	4770      	bx	lr
    9f9a:	bf00      	nop
    9f9c:	0000ec44 	.word	0x0000ec44
    9fa0:	0000ecd4 	.word	0x0000ecd4

00009fa4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    9fa4:	b570      	push	{r4, r5, r6, lr}
    9fa6:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    9fa8:	4b11      	ldr	r3, [pc, #68]	; (9ff0 <z_sys_init_run_level+0x4c>)
    9faa:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    9fae:	e009      	b.n	9fc4 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    9fb0:	4240      	negs	r0, r0
    9fb2:	e017      	b.n	9fe4 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    9fb4:	68eb      	ldr	r3, [r5, #12]
    9fb6:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    9fb8:	68ea      	ldr	r2, [r5, #12]
    9fba:	7853      	ldrb	r3, [r2, #1]
    9fbc:	f043 0301 	orr.w	r3, r3, #1
    9fc0:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    9fc2:	3408      	adds	r4, #8
    9fc4:	1c73      	adds	r3, r6, #1
    9fc6:	4a0a      	ldr	r2, [pc, #40]	; (9ff0 <z_sys_init_run_level+0x4c>)
    9fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fcc:	42a3      	cmp	r3, r4
    9fce:	d90d      	bls.n	9fec <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    9fd0:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    9fd2:	6823      	ldr	r3, [r4, #0]
    9fd4:	4628      	mov	r0, r5
    9fd6:	4798      	blx	r3
		if (dev != NULL) {
    9fd8:	2d00      	cmp	r5, #0
    9fda:	d0f2      	beq.n	9fc2 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    9fdc:	2800      	cmp	r0, #0
    9fde:	d0eb      	beq.n	9fb8 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    9fe0:	2800      	cmp	r0, #0
    9fe2:	dbe5      	blt.n	9fb0 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    9fe4:	28ff      	cmp	r0, #255	; 0xff
    9fe6:	dde5      	ble.n	9fb4 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    9fe8:	20ff      	movs	r0, #255	; 0xff
    9fea:	e7e3      	b.n	9fb4 <z_sys_init_run_level+0x10>
		}
	}
}
    9fec:	bd70      	pop	{r4, r5, r6, pc}
    9fee:	bf00      	nop
    9ff0:	000100cc 	.word	0x000100cc

00009ff4 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    9ff4:	2804      	cmp	r0, #4
    9ff6:	d80c      	bhi.n	a012 <reason_to_str+0x1e>
    9ff8:	e8df f000 	tbb	[pc, r0]
    9ffc:	07050d03 	.word	0x07050d03
    a000:	09          	.byte	0x09
    a001:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    a002:	4806      	ldr	r0, [pc, #24]	; (a01c <reason_to_str+0x28>)
    a004:	4770      	bx	lr
		return "Stack overflow";
    a006:	4806      	ldr	r0, [pc, #24]	; (a020 <reason_to_str+0x2c>)
    a008:	4770      	bx	lr
		return "Kernel oops";
    a00a:	4806      	ldr	r0, [pc, #24]	; (a024 <reason_to_str+0x30>)
    a00c:	4770      	bx	lr
		return "Kernel panic";
    a00e:	4806      	ldr	r0, [pc, #24]	; (a028 <reason_to_str+0x34>)
    a010:	4770      	bx	lr
	default:
		return "Unknown error";
    a012:	4806      	ldr	r0, [pc, #24]	; (a02c <reason_to_str+0x38>)
    a014:	4770      	bx	lr
		return "Unhandled interrupt";
    a016:	4806      	ldr	r0, [pc, #24]	; (a030 <reason_to_str+0x3c>)
	}
}
    a018:	4770      	bx	lr
    a01a:	bf00      	nop
    a01c:	00010134 	.word	0x00010134
    a020:	00010108 	.word	0x00010108
    a024:	00010118 	.word	0x00010118
    a028:	00010124 	.word	0x00010124
    a02c:	000100e4 	.word	0x000100e4
    a030:	000100f4 	.word	0x000100f4

0000a034 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    a034:	b130      	cbz	r0, a044 <thread_name_get+0x10>
{
    a036:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    a038:	f004 f98a 	bl	e350 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    a03c:	b120      	cbz	r0, a048 <thread_name_get+0x14>
    a03e:	7803      	ldrb	r3, [r0, #0]
    a040:	b123      	cbz	r3, a04c <thread_name_get+0x18>
}
    a042:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    a044:	4802      	ldr	r0, [pc, #8]	; (a050 <thread_name_get+0x1c>)
}
    a046:	4770      	bx	lr
		thread_name = "unknown";
    a048:	4801      	ldr	r0, [pc, #4]	; (a050 <thread_name_get+0x1c>)
    a04a:	e7fa      	b.n	a042 <thread_name_get+0xe>
    a04c:	4800      	ldr	r0, [pc, #0]	; (a050 <thread_name_get+0x1c>)
	return thread_name;
    a04e:	e7f8      	b.n	a042 <thread_name_get+0xe>
    a050:	00010144 	.word	0x00010144

0000a054 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a058:	b082      	sub	sp, #8
    a05a:	4605      	mov	r5, r0
    a05c:	460e      	mov	r6, r1
	__asm__ volatile(
    a05e:	f04f 0320 	mov.w	r3, #32
    a062:	f3ef 8711 	mrs	r7, BASEPRI
    a066:	f383 8812 	msr	BASEPRI_MAX, r3
    a06a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    a06e:	f001 f91b 	bl	b2a8 <z_impl_z_current_get>
    a072:	4604      	mov	r4, r0
    a074:	4b29      	ldr	r3, [pc, #164]	; (a11c <z_fatal_error+0xc8>)
    a076:	4a2a      	ldr	r2, [pc, #168]	; (a120 <z_fatal_error+0xcc>)
    a078:	1a9b      	subs	r3, r3, r2
    a07a:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    a07c:	f04f 0800 	mov.w	r8, #0
    a080:	2201      	movs	r2, #1
    a082:	f362 0802 	bfi	r8, r2, #0, #3
    a086:	f36f 08c5 	bfc	r8, #3, #3
    a08a:	f363 188f 	bfi	r8, r3, #6, #10
    a08e:	4628      	mov	r0, r5
    a090:	f7ff ffb0 	bl	9ff4 <reason_to_str>
    a094:	4602      	mov	r2, r0
    a096:	f8ad 8000 	strh.w	r8, [sp]
    a09a:	2300      	movs	r3, #0
    a09c:	4629      	mov	r1, r5
    a09e:	4821      	ldr	r0, [pc, #132]	; (a124 <z_fatal_error+0xd0>)
    a0a0:	f7f7 fbe2 	bl	1868 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    a0a4:	b11e      	cbz	r6, a0ae <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    a0a6:	69f3      	ldr	r3, [r6, #28]
    a0a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    a0ac:	bb2b      	cbnz	r3, a0fa <z_fatal_error+0xa6>
    a0ae:	4b1b      	ldr	r3, [pc, #108]	; (a11c <z_fatal_error+0xc8>)
    a0b0:	4a1b      	ldr	r2, [pc, #108]	; (a120 <z_fatal_error+0xcc>)
    a0b2:	1a9b      	subs	r3, r3, r2
    a0b4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    a0b6:	f04f 0800 	mov.w	r8, #0
    a0ba:	2201      	movs	r2, #1
    a0bc:	f362 0802 	bfi	r8, r2, #0, #3
    a0c0:	f36f 08c5 	bfc	r8, #3, #3
    a0c4:	f363 188f 	bfi	r8, r3, #6, #10
    a0c8:	4620      	mov	r0, r4
    a0ca:	f7ff ffb3 	bl	a034 <thread_name_get>
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    a0ce:	f7f7 fa9d 	bl	160c <z_log_strdup>
    a0d2:	4602      	mov	r2, r0
    a0d4:	4643      	mov	r3, r8
    a0d6:	4621      	mov	r1, r4
    a0d8:	4813      	ldr	r0, [pc, #76]	; (a128 <z_fatal_error+0xd4>)
    a0da:	f7f7 fc39 	bl	1950 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    a0de:	4631      	mov	r1, r6
    a0e0:	4628      	mov	r0, r5
    a0e2:	f7fd f89f 	bl	7224 <k_sys_fatal_error_handler>
	__asm__ volatile(
    a0e6:	f387 8811 	msr	BASEPRI, r7
    a0ea:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    a0ee:	4620      	mov	r0, r4
    a0f0:	f7fa fb94 	bl	481c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    a0f4:	b002      	add	sp, #8
    a0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a0fa:	4b08      	ldr	r3, [pc, #32]	; (a11c <z_fatal_error+0xc8>)
    a0fc:	4a08      	ldr	r2, [pc, #32]	; (a120 <z_fatal_error+0xcc>)
    a0fe:	1a9b      	subs	r3, r3, r2
    a100:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
    a102:	f04f 0100 	mov.w	r1, #0
    a106:	2201      	movs	r2, #1
    a108:	f362 0102 	bfi	r1, r2, #0, #3
    a10c:	f36f 01c5 	bfc	r1, #3, #3
    a110:	f363 118f 	bfi	r1, r3, #6, #10
    a114:	4805      	ldr	r0, [pc, #20]	; (a12c <z_fatal_error+0xd8>)
    a116:	f7f7 fc57 	bl	19c8 <log_0>
    a11a:	e7c8      	b.n	a0ae <z_fatal_error+0x5a>
    a11c:	0000ef2c 	.word	0x0000ef2c
    a120:	0000eefc 	.word	0x0000eefc
    a124:	0001014c 	.word	0x0001014c
    a128:	00010198 	.word	0x00010198
    a12c:	00010174 	.word	0x00010174

0000a130 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    a130:	b5f0      	push	{r4, r5, r6, r7, lr}
    a132:	b089      	sub	sp, #36	; 0x24
    a134:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    a136:	4b15      	ldr	r3, [pc, #84]	; (a18c <init_idle_thread+0x5c>)
    a138:	25b0      	movs	r5, #176	; 0xb0
    a13a:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    a13e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    a142:	4e13      	ldr	r6, [pc, #76]	; (a190 <init_idle_thread+0x60>)
    a144:	eb06 1683 	add.w	r6, r6, r3, lsl #6

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    a148:	af06      	add	r7, sp, #24
    a14a:	4603      	mov	r3, r0
    a14c:	4a11      	ldr	r2, [pc, #68]	; (a194 <init_idle_thread+0x64>)
    a14e:	2108      	movs	r1, #8
    a150:	4638      	mov	r0, r7
    a152:	f001 fd4b 	bl	bbec <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    a156:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a15a:	480f      	ldr	r0, [pc, #60]	; (a198 <init_idle_thread+0x68>)
    a15c:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    a160:	9705      	str	r7, [sp, #20]
    a162:	2301      	movs	r3, #1
    a164:	9304      	str	r3, [sp, #16]
    a166:	230f      	movs	r3, #15
    a168:	9303      	str	r3, [sp, #12]
    a16a:	2300      	movs	r3, #0
    a16c:	9302      	str	r3, [sp, #8]
    a16e:	9301      	str	r3, [sp, #4]
    a170:	9400      	str	r4, [sp, #0]
    a172:	4b0a      	ldr	r3, [pc, #40]	; (a19c <init_idle_thread+0x6c>)
    a174:	f44f 72a0 	mov.w	r2, #320	; 0x140
    a178:	4631      	mov	r1, r6
    a17a:	4628      	mov	r0, r5
    a17c:	f000 f958 	bl	a430 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a180:	7b6b      	ldrb	r3, [r5, #13]
    a182:	f023 0304 	bic.w	r3, r3, #4
    a186:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    a188:	b009      	add	sp, #36	; 0x24
    a18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a18c:	20000800 	.word	0x20000800
    a190:	20002fe8 	.word	0x20002fe8
    a194:	000101b0 	.word	0x000101b0
    a198:	20001ec0 	.word	0x20001ec0
    a19c:	0000a595 	.word	0x0000a595

0000a1a0 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    a1a0:	b570      	push	{r4, r5, r6, lr}
    a1a2:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    a1a4:	f000 ffb4 	bl	b110 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    a1a8:	4d1a      	ldr	r5, [pc, #104]	; (a214 <prepare_multithreading+0x74>)
    a1aa:	4b1b      	ldr	r3, [pc, #108]	; (a218 <prepare_multithreading+0x78>)
    a1ac:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a1ae:	4b1b      	ldr	r3, [pc, #108]	; (a21c <prepare_multithreading+0x7c>)
    a1b0:	9305      	str	r3, [sp, #20]
    a1b2:	2301      	movs	r3, #1
    a1b4:	9304      	str	r3, [sp, #16]
    a1b6:	2400      	movs	r4, #0
    a1b8:	9403      	str	r4, [sp, #12]
    a1ba:	9402      	str	r4, [sp, #8]
    a1bc:	9401      	str	r4, [sp, #4]
    a1be:	9400      	str	r4, [sp, #0]
    a1c0:	4b17      	ldr	r3, [pc, #92]	; (a220 <prepare_multithreading+0x80>)
    a1c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a1c6:	4917      	ldr	r1, [pc, #92]	; (a224 <prepare_multithreading+0x84>)
    a1c8:	4628      	mov	r0, r5
    a1ca:	f000 f931 	bl	a430 <z_setup_new_thread>
    a1ce:	4606      	mov	r6, r0
    a1d0:	7b6b      	ldrb	r3, [r5, #13]
    a1d2:	f023 0304 	bic.w	r3, r3, #4
    a1d6:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    a1d8:	4628      	mov	r0, r5
    a1da:	f004 fa41 	bl	e660 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    a1de:	2c00      	cmp	r4, #0
    a1e0:	dd02      	ble.n	a1e8 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    a1e2:	4630      	mov	r0, r6
    a1e4:	b006      	add	sp, #24
    a1e6:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    a1e8:	4620      	mov	r0, r4
    a1ea:	f7ff ffa1 	bl	a130 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    a1ee:	4b0e      	ldr	r3, [pc, #56]	; (a228 <prepare_multithreading+0x88>)
    a1f0:	22b0      	movs	r2, #176	; 0xb0
    a1f2:	fb02 3204 	mla	r2, r2, r4, r3
    a1f6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    a1fa:	4b07      	ldr	r3, [pc, #28]	; (a218 <prepare_multithreading+0x78>)
    a1fc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    a200:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    a202:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    a204:	4a09      	ldr	r2, [pc, #36]	; (a22c <prepare_multithreading+0x8c>)
    a206:	eb02 22c4 	add.w	r2, r2, r4, lsl #11
    a20a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
		_kernel.cpus[i].irq_stack =
    a20e:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    a210:	3401      	adds	r4, #1
    a212:	e7e4      	b.n	a1de <prepare_multithreading+0x3e>
    a214:	200008b0 	.word	0x200008b0
    a218:	20001ec0 	.word	0x20001ec0
    a21c:	000101bc 	.word	0x000101bc
    a220:	0000a231 	.word	0x0000a231
    a224:	20002be8 	.word	0x20002be8
    a228:	20000800 	.word	0x20000800
    a22c:	20003128 	.word	0x20003128

0000a230 <bg_thread_main>:
{
    a230:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    a232:	4b0a      	ldr	r3, [pc, #40]	; (a25c <bg_thread_main+0x2c>)
    a234:	2201      	movs	r2, #1
    a236:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    a238:	2002      	movs	r0, #2
    a23a:	f7ff feb3 	bl	9fa4 <z_sys_init_run_level>
	boot_banner();
    a23e:	f001 fadf 	bl	b800 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    a242:	2003      	movs	r0, #3
    a244:	f7ff feae 	bl	9fa4 <z_sys_init_run_level>
	z_init_static_threads();
    a248:	f000 f956 	bl	a4f8 <z_init_static_threads>
	main();
    a24c:	f7f6 f98c 	bl	568 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    a250:	4a03      	ldr	r2, [pc, #12]	; (a260 <bg_thread_main+0x30>)
    a252:	7b13      	ldrb	r3, [r2, #12]
    a254:	f023 0301 	bic.w	r3, r3, #1
    a258:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    a25a:	bd08      	pop	{r3, pc}
    a25c:	20001f26 	.word	0x20001f26
    a260:	200008b0 	.word	0x200008b0

0000a264 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    a264:	b508      	push	{r3, lr}
    a266:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    a268:	4a01      	ldr	r2, [pc, #4]	; (a270 <switch_to_main_thread+0xc>)
    a26a:	4802      	ldr	r0, [pc, #8]	; (a274 <switch_to_main_thread+0x10>)
    a26c:	f7f9 fe36 	bl	3edc <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    a270:	0000a231 	.word	0x0000a231
    a274:	200008b0 	.word	0x200008b0

0000a278 <z_bss_zero>:
{
    a278:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    a27a:	4803      	ldr	r0, [pc, #12]	; (a288 <z_bss_zero+0x10>)
    a27c:	4a03      	ldr	r2, [pc, #12]	; (a28c <z_bss_zero+0x14>)
    a27e:	1a12      	subs	r2, r2, r0
    a280:	2100      	movs	r1, #0
    a282:	f003 f9c9 	bl	d618 <memset>
}
    a286:	bd08      	pop	{r3, pc}
    a288:	20000558 	.word	0x20000558
    a28c:	200020e4 	.word	0x200020e4

0000a290 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    a290:	b500      	push	{lr}
    a292:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    a294:	f7f7 f924 	bl	14e0 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    a298:	4b1c      	ldr	r3, [pc, #112]	; (a30c <z_cstart+0x7c>)
	uint32_t msp =
    a29a:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    a29e:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    a2a2:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a2a6:	4c1a      	ldr	r4, [pc, #104]	; (a310 <z_cstart+0x80>)
    a2a8:	23e0      	movs	r3, #224	; 0xe0
    a2aa:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    a2ae:	2500      	movs	r5, #0
    a2b0:	77e5      	strb	r5, [r4, #31]
    a2b2:	7625      	strb	r5, [r4, #24]
    a2b4:	7665      	strb	r5, [r4, #25]
    a2b6:	76a5      	strb	r5, [r4, #26]
    a2b8:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    a2bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a2be:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    a2c2:	6263      	str	r3, [r4, #36]	; 0x24
    a2c4:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    a2c8:	f7fa f9fc 	bl	46c4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    a2cc:	f7f9 fcb8 	bl	3c40 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    a2d0:	f04f 33ff 	mov.w	r3, #4294967295
    a2d4:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    a2d6:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    a2d8:	f7fa fc74 	bl	4bc4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    a2dc:	f7fa fab4 	bl	4848 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    a2e0:	2401      	movs	r4, #1
    a2e2:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    a2e6:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    a2ea:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    a2ec:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    a2ee:	4b09      	ldr	r3, [pc, #36]	; (a314 <z_cstart+0x84>)
    a2f0:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    a2f4:	f7ff fe4a 	bl	9f8c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    a2f8:	4628      	mov	r0, r5
    a2fa:	f7ff fe53 	bl	9fa4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    a2fe:	4620      	mov	r0, r4
    a300:	f7ff fe50 	bl	9fa4 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    a304:	f7ff ff4c 	bl	a1a0 <prepare_multithreading>
    a308:	f7ff ffac 	bl	a264 <switch_to_main_thread>
    a30c:	20003128 	.word	0x20003128
    a310:	e000ed00 	.word	0xe000ed00
    a314:	20001ec0 	.word	0x20001ec0

0000a318 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    a318:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a31a:	4c06      	ldr	r4, [pc, #24]	; (a334 <init_mem_slab_module+0x1c>)
	int rc = 0;
    a31c:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a31e:	4b06      	ldr	r3, [pc, #24]	; (a338 <init_mem_slab_module+0x20>)
    a320:	429c      	cmp	r4, r3
    a322:	d206      	bcs.n	a332 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    a324:	4620      	mov	r0, r4
    a326:	f003 ffb0 	bl	e28a <create_free_list>
		if (rc < 0) {
    a32a:	2800      	cmp	r0, #0
    a32c:	db01      	blt.n	a332 <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a32e:	341c      	adds	r4, #28
    a330:	e7f5      	b.n	a31e <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    a332:	bd10      	pop	{r4, pc}
    a334:	20000358 	.word	0x20000358
    a338:	20000374 	.word	0x20000374

0000a33c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    a33c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a33e:	b083      	sub	sp, #12
    a340:	460c      	mov	r4, r1
    a342:	461f      	mov	r7, r3
	__asm__ volatile(
    a344:	f04f 0320 	mov.w	r3, #32
    a348:	f3ef 8111 	mrs	r1, BASEPRI
    a34c:	f383 8812 	msr	BASEPRI_MAX, r3
    a350:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    a354:	6943      	ldr	r3, [r0, #20]
    a356:	b16b      	cbz	r3, a374 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
    a358:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    a35a:	6943      	ldr	r3, [r0, #20]
    a35c:	681b      	ldr	r3, [r3, #0]
    a35e:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    a360:	6983      	ldr	r3, [r0, #24]
    a362:	3301      	adds	r3, #1
    a364:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    a366:	2000      	movs	r0, #0
	__asm__ volatile(
    a368:	f381 8811 	msr	BASEPRI, r1
    a36c:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    a370:	b003      	add	sp, #12
    a372:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a374:	4616      	mov	r6, r2
    a376:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    a37a:	ea56 0307 	orrs.w	r3, r6, r7
    a37e:	d104      	bne.n	a38a <k_mem_slab_alloc+0x4e>
		*mem = NULL;
    a380:	2300      	movs	r3, #0
    a382:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    a384:	f06f 000b 	mvn.w	r0, #11
    a388:	e7ee      	b.n	a368 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    a38a:	e9cd 6700 	strd	r6, r7, [sp]
    a38e:	4602      	mov	r2, r0
    a390:	4628      	mov	r0, r5
    a392:	f000 fd93 	bl	aebc <z_pend_curr>
		if (result == 0) {
    a396:	2800      	cmp	r0, #0
    a398:	d1ea      	bne.n	a370 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
    a39a:	4b02      	ldr	r3, [pc, #8]	; (a3a4 <k_mem_slab_alloc+0x68>)
    a39c:	689b      	ldr	r3, [r3, #8]
    a39e:	695b      	ldr	r3, [r3, #20]
    a3a0:	6023      	str	r3, [r4, #0]
		return result;
    a3a2:	e7e5      	b.n	a370 <k_mem_slab_alloc+0x34>
    a3a4:	20001ec0 	.word	0x20001ec0

0000a3a8 <z_thread_monitor_exit>:
	__asm__ volatile(
    a3a8:	f04f 0320 	mov.w	r3, #32
    a3ac:	f3ef 8111 	mrs	r1, BASEPRI
    a3b0:	f383 8812 	msr	BASEPRI_MAX, r3
    a3b4:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    a3b8:	4b0a      	ldr	r3, [pc, #40]	; (a3e4 <z_thread_monitor_exit+0x3c>)
    a3ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a3bc:	4283      	cmp	r3, r0
    a3be:	d104      	bne.n	a3ca <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    a3c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    a3c2:	4b08      	ldr	r3, [pc, #32]	; (a3e4 <z_thread_monitor_exit+0x3c>)
    a3c4:	629a      	str	r2, [r3, #40]	; 0x28
    a3c6:	e007      	b.n	a3d8 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    a3c8:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    a3ca:	b113      	cbz	r3, a3d2 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    a3cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    a3ce:	4282      	cmp	r2, r0
    a3d0:	d1fa      	bne.n	a3c8 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    a3d2:	b10b      	cbz	r3, a3d8 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    a3d4:	6f02      	ldr	r2, [r0, #112]	; 0x70
    a3d6:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    a3d8:	f381 8811 	msr	BASEPRI, r1
    a3dc:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    a3e0:	4770      	bx	lr
    a3e2:	bf00      	nop
    a3e4:	20001ec0 	.word	0x20001ec0

0000a3e8 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    a3e8:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    a3ea:	4604      	mov	r4, r0
    a3ec:	b140      	cbz	r0, a400 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
    a3ee:	2220      	movs	r2, #32
    a3f0:	f104 0074 	add.w	r0, r4, #116	; 0x74
    a3f4:	f003 f8c0 	bl	d578 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    a3f8:	2000      	movs	r0, #0
    a3fa:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    a3fe:	bd10      	pop	{r4, pc}
		thread = _current;
    a400:	4b01      	ldr	r3, [pc, #4]	; (a408 <z_impl_k_thread_name_set+0x20>)
    a402:	689c      	ldr	r4, [r3, #8]
    a404:	e7f3      	b.n	a3ee <z_impl_k_thread_name_set+0x6>
    a406:	bf00      	nop
    a408:	20001ec0 	.word	0x20001ec0

0000a40c <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    a40c:	b538      	push	{r3, r4, r5, lr}
    a40e:	4614      	mov	r4, r2
    a410:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a412:	ea54 0305 	orrs.w	r3, r4, r5
    a416:	d102      	bne.n	a41e <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    a418:	f003 ff9c 	bl	e354 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    a41c:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    a41e:	462b      	mov	r3, r5
    a420:	4902      	ldr	r1, [pc, #8]	; (a42c <schedule_new_thread+0x20>)
    a422:	3018      	adds	r0, #24
    a424:	f000 fff2 	bl	b40c <z_add_timeout>
    a428:	e7f8      	b.n	a41c <schedule_new_thread+0x10>
    a42a:	bf00      	nop
    a42c:	0000e699 	.word	0x0000e699

0000a430 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    a430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a434:	b085      	sub	sp, #20
    a436:	4604      	mov	r4, r0
    a438:	460f      	mov	r7, r1
    a43a:	4615      	mov	r5, r2
    a43c:	461e      	mov	r6, r3
    a43e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    a442:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    a446:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    a44a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    a44e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    a452:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    a454:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    a456:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a458:	2204      	movs	r2, #4
    a45a:	9911      	ldr	r1, [sp, #68]	; 0x44
    a45c:	f003 ff7e 	bl	e35c <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    a460:	462a      	mov	r2, r5
    a462:	4639      	mov	r1, r7
    a464:	4620      	mov	r0, r4
    a466:	f003 ff61 	bl	e32c <setup_thread_stack>
    a46a:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a46c:	f8cd 8008 	str.w	r8, [sp, #8]
    a470:	f8cd 9004 	str.w	r9, [sp, #4]
    a474:	f8cd a000 	str.w	sl, [sp]
    a478:	4633      	mov	r3, r6
    a47a:	4602      	mov	r2, r0
    a47c:	4639      	mov	r1, r7
    a47e:	4620      	mov	r0, r4
    a480:	f7f9 fd0c 	bl	3e9c <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    a484:	2300      	movs	r3, #0
    a486:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    a488:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    a48a:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    a48e:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    a492:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    a496:	f04f 0320 	mov.w	r3, #32
    a49a:	f3ef 8211 	mrs	r2, BASEPRI
    a49e:	f383 8812 	msr	BASEPRI_MAX, r3
    a4a2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    a4a6:	4b13      	ldr	r3, [pc, #76]	; (a4f4 <z_setup_new_thread+0xc4>)
    a4a8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    a4aa:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    a4ac:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    a4ae:	f382 8811 	msr	BASEPRI, r2
    a4b2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    a4b6:	f1bb 0f00 	cmp.w	fp, #0
    a4ba:	d013      	beq.n	a4e4 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    a4bc:	221f      	movs	r2, #31
    a4be:	4659      	mov	r1, fp
    a4c0:	f104 0074 	add.w	r0, r4, #116	; 0x74
    a4c4:	f003 f858 	bl	d578 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    a4c8:	2300      	movs	r3, #0
    a4ca:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    a4ce:	4b09      	ldr	r3, [pc, #36]	; (a4f4 <z_setup_new_thread+0xc4>)
    a4d0:	689b      	ldr	r3, [r3, #8]
    a4d2:	b15b      	cbz	r3, a4ec <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    a4d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    a4d8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    a4dc:	4628      	mov	r0, r5
    a4de:	b005      	add	sp, #20
    a4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    a4e4:	2300      	movs	r3, #0
    a4e6:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    a4ea:	e7f0      	b.n	a4ce <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    a4ec:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    a4f0:	e7f4      	b.n	a4dc <z_setup_new_thread+0xac>
    a4f2:	bf00      	nop
    a4f4:	20001ec0 	.word	0x20001ec0

0000a4f8 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    a4f8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    a4fc:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    a4fe:	4c23      	ldr	r4, [pc, #140]	; (a58c <z_init_static_threads+0x94>)
    a500:	4b23      	ldr	r3, [pc, #140]	; (a590 <z_init_static_threads+0x98>)
    a502:	429c      	cmp	r4, r3
    a504:	d215      	bcs.n	a532 <z_init_static_threads+0x3a>
		z_setup_new_thread(
    a506:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a508:	9305      	str	r3, [sp, #20]
    a50a:	6a23      	ldr	r3, [r4, #32]
    a50c:	9304      	str	r3, [sp, #16]
    a50e:	69e3      	ldr	r3, [r4, #28]
    a510:	9303      	str	r3, [sp, #12]
    a512:	69a3      	ldr	r3, [r4, #24]
    a514:	9302      	str	r3, [sp, #8]
    a516:	6963      	ldr	r3, [r4, #20]
    a518:	9301      	str	r3, [sp, #4]
    a51a:	6923      	ldr	r3, [r4, #16]
    a51c:	9300      	str	r3, [sp, #0]
    a51e:	68e3      	ldr	r3, [r4, #12]
    a520:	68a2      	ldr	r2, [r4, #8]
    a522:	6861      	ldr	r1, [r4, #4]
    a524:	6820      	ldr	r0, [r4, #0]
    a526:	f7ff ff83 	bl	a430 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    a52a:	6823      	ldr	r3, [r4, #0]
    a52c:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    a52e:	3430      	adds	r4, #48	; 0x30
    a530:	e7e6      	b.n	a500 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    a532:	f000 fb7b 	bl	ac2c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    a536:	4c15      	ldr	r4, [pc, #84]	; (a58c <z_init_static_threads+0x94>)
    a538:	e01b      	b.n	a572 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    a53a:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    a53c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a540:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
    a544:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    a548:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    a54c:	03d8      	lsls	r0, r3, #15
    a54e:	f240 35e7 	movw	r5, #999	; 0x3e7
    a552:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a556:	2300      	movs	r3, #0
    a558:	1940      	adds	r0, r0, r5
    a55a:	f04f 0500 	mov.w	r5, #0
    a55e:	eb45 0101 	adc.w	r1, r5, r1
    a562:	f7f5 fdf7 	bl	154 <__aeabi_uldivmod>
    a566:	4602      	mov	r2, r0
    a568:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    a56a:	4630      	mov	r0, r6
    a56c:	f7ff ff4e 	bl	a40c <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    a570:	3430      	adds	r4, #48	; 0x30
    a572:	4b07      	ldr	r3, [pc, #28]	; (a590 <z_init_static_threads+0x98>)
    a574:	429c      	cmp	r4, r3
    a576:	d204      	bcs.n	a582 <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    a578:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a57a:	f1b3 3fff 	cmp.w	r3, #4294967295
    a57e:	d0f7      	beq.n	a570 <z_init_static_threads+0x78>
    a580:	e7db      	b.n	a53a <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    a582:	f000 fd51 	bl	b028 <k_sched_unlock>
}
    a586:	b006      	add	sp, #24
    a588:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    a58c:	20000358 	.word	0x20000358
    a590:	20000358 	.word	0x20000358

0000a594 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    a594:	b508      	push	{r3, lr}
    a596:	e001      	b.n	a59c <idle+0x8>
	arch_cpu_idle();
    a598:	f7f9 fb58 	bl	3c4c <arch_cpu_idle>
	__asm__ volatile(
    a59c:	f04f 0220 	mov.w	r2, #32
    a5a0:	f3ef 8311 	mrs	r3, BASEPRI
    a5a4:	f382 8812 	msr	BASEPRI_MAX, r2
    a5a8:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    a5ac:	f004 f9c6 	bl	e93c <z_get_next_timeout_expiry>
    a5b0:	4b03      	ldr	r3, [pc, #12]	; (a5c0 <idle+0x2c>)
    a5b2:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    a5b4:	f7f9 f9ae 	bl	3914 <pm_system_suspend>
    a5b8:	2800      	cmp	r0, #0
    a5ba:	d1ef      	bne.n	a59c <idle+0x8>
    a5bc:	e7ec      	b.n	a598 <idle+0x4>
    a5be:	bf00      	nop
    a5c0:	20001ec0 	.word	0x20001ec0

0000a5c4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    a5c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a5c8:	b083      	sub	sp, #12
    a5ca:	4604      	mov	r4, r0
    a5cc:	461d      	mov	r5, r3
    a5ce:	f04f 0320 	mov.w	r3, #32
    a5d2:	f3ef 8711 	mrs	r7, BASEPRI
    a5d6:	f383 8812 	msr	BASEPRI_MAX, r3
    a5da:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    a5de:	68c1      	ldr	r1, [r0, #12]
    a5e0:	b999      	cbnz	r1, a60a <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    a5e2:	2900      	cmp	r1, #0
    a5e4:	d14f      	bne.n	a686 <z_impl_k_mutex_lock+0xc2>
    a5e6:	4b3a      	ldr	r3, [pc, #232]	; (a6d0 <z_impl_k_mutex_lock+0x10c>)
    a5e8:	689b      	ldr	r3, [r3, #8]
    a5ea:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    a5ee:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    a5f0:	3101      	adds	r1, #1
    a5f2:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    a5f4:	4b36      	ldr	r3, [pc, #216]	; (a6d0 <z_impl_k_mutex_lock+0x10c>)
    a5f6:	689b      	ldr	r3, [r3, #8]
    a5f8:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    a5fa:	f387 8811 	msr	BASEPRI, r7
    a5fe:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    a602:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    a604:	b003      	add	sp, #12
    a606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a60a:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    a60c:	6882      	ldr	r2, [r0, #8]
    a60e:	4b30      	ldr	r3, [pc, #192]	; (a6d0 <z_impl_k_mutex_lock+0x10c>)
    a610:	689b      	ldr	r3, [r3, #8]
    a612:	429a      	cmp	r2, r3
    a614:	d0e5      	beq.n	a5e2 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    a616:	ea55 0106 	orrs.w	r1, r5, r6
    a61a:	bf0c      	ite	eq
    a61c:	f04f 0801 	moveq.w	r8, #1
    a620:	f04f 0800 	movne.w	r8, #0
    a624:	d031      	beq.n	a68a <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    a626:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    a62a:	4649      	mov	r1, r9
    a62c:	f993 000e 	ldrsb.w	r0, [r3, #14]
    a630:	f003 fec7 	bl	e3c2 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    a634:	4581      	cmp	r9, r0
    a636:	dc2f      	bgt.n	a698 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    a638:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    a63c:	9600      	str	r6, [sp, #0]
    a63e:	9501      	str	r5, [sp, #4]
    a640:	4622      	mov	r2, r4
    a642:	4639      	mov	r1, r7
    a644:	4823      	ldr	r0, [pc, #140]	; (a6d4 <z_impl_k_mutex_lock+0x110>)
    a646:	f000 fc39 	bl	aebc <z_pend_curr>
	if (got_mutex == 0) {
    a64a:	2800      	cmp	r0, #0
    a64c:	d0da      	beq.n	a604 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    a64e:	f04f 0320 	mov.w	r3, #32
    a652:	f3ef 8511 	mrs	r5, BASEPRI
    a656:	f383 8812 	msr	BASEPRI_MAX, r3
    a65a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    a65e:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a660:	42a3      	cmp	r3, r4
    a662:	d01f      	beq.n	a6a4 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    a664:	b1f3      	cbz	r3, a6a4 <z_impl_k_mutex_lock+0xe0>
    a666:	6921      	ldr	r1, [r4, #16]
    a668:	f993 000e 	ldrsb.w	r0, [r3, #14]
    a66c:	f003 fea9 	bl	e3c2 <new_prio_for_inheritance>
    a670:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    a672:	4620      	mov	r0, r4
    a674:	f003 feb0 	bl	e3d8 <adjust_owner_prio>
    a678:	b9b0      	cbnz	r0, a6a8 <z_impl_k_mutex_lock+0xe4>
    a67a:	f1b9 0f00 	cmp.w	r9, #0
    a67e:	d015      	beq.n	a6ac <z_impl_k_mutex_lock+0xe8>
    a680:	f04f 0801 	mov.w	r8, #1
    a684:	e012      	b.n	a6ac <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    a686:	6923      	ldr	r3, [r4, #16]
    a688:	e7b1      	b.n	a5ee <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    a68a:	f387 8811 	msr	BASEPRI, r7
    a68e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    a692:	f06f 000f 	mvn.w	r0, #15
    a696:	e7b5      	b.n	a604 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    a698:	4601      	mov	r1, r0
    a69a:	4620      	mov	r0, r4
    a69c:	f003 fe9c 	bl	e3d8 <adjust_owner_prio>
    a6a0:	4681      	mov	r9, r0
    a6a2:	e7cb      	b.n	a63c <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    a6a4:	6921      	ldr	r1, [r4, #16]
    a6a6:	e7e4      	b.n	a672 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    a6a8:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    a6ac:	f1b8 0f00 	cmp.w	r8, #0
    a6b0:	d106      	bne.n	a6c0 <z_impl_k_mutex_lock+0xfc>
    a6b2:	f385 8811 	msr	BASEPRI, r5
    a6b6:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    a6ba:	f06f 000a 	mvn.w	r0, #10
    a6be:	e7a1      	b.n	a604 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    a6c0:	4629      	mov	r1, r5
    a6c2:	4804      	ldr	r0, [pc, #16]	; (a6d4 <z_impl_k_mutex_lock+0x110>)
    a6c4:	f000 fa96 	bl	abf4 <z_reschedule>
	return -EAGAIN;
    a6c8:	f06f 000a 	mvn.w	r0, #10
    a6cc:	e79a      	b.n	a604 <z_impl_k_mutex_lock+0x40>
    a6ce:	bf00      	nop
    a6d0:	20001ec0 	.word	0x20001ec0
    a6d4:	20001eec 	.word	0x20001eec

0000a6d8 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    a6d8:	6882      	ldr	r2, [r0, #8]
    a6da:	2a00      	cmp	r2, #0
    a6dc:	d035      	beq.n	a74a <z_impl_k_mutex_unlock+0x72>
{
    a6de:	b538      	push	{r3, r4, r5, lr}
    a6e0:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    a6e2:	4b1d      	ldr	r3, [pc, #116]	; (a758 <z_impl_k_mutex_unlock+0x80>)
    a6e4:	689b      	ldr	r3, [r3, #8]
    a6e6:	429a      	cmp	r2, r3
    a6e8:	d132      	bne.n	a750 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    a6ea:	7bda      	ldrb	r2, [r3, #15]
    a6ec:	3a01      	subs	r2, #1
    a6ee:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    a6f0:	68c3      	ldr	r3, [r0, #12]
    a6f2:	2b01      	cmp	r3, #1
    a6f4:	d905      	bls.n	a702 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    a6f6:	3b01      	subs	r3, #1
    a6f8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    a6fa:	f000 fc95 	bl	b028 <k_sched_unlock>

	return 0;
    a6fe:	2000      	movs	r0, #0
}
    a700:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    a702:	f04f 0320 	mov.w	r3, #32
    a706:	f3ef 8511 	mrs	r5, BASEPRI
    a70a:	f383 8812 	msr	BASEPRI_MAX, r3
    a70e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    a712:	6901      	ldr	r1, [r0, #16]
    a714:	f003 fe60 	bl	e3d8 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    a718:	4620      	mov	r0, r4
    a71a:	f004 f863 	bl	e7e4 <z_unpend_first_thread>
	mutex->owner = new_owner;
    a71e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    a720:	b160      	cbz	r0, a73c <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    a722:	f990 300e 	ldrsb.w	r3, [r0, #14]
    a726:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    a728:	2300      	movs	r3, #0
    a72a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    a72e:	f003 ff97 	bl	e660 <z_ready_thread>
		z_reschedule(&lock, key);
    a732:	4629      	mov	r1, r5
    a734:	4809      	ldr	r0, [pc, #36]	; (a75c <z_impl_k_mutex_unlock+0x84>)
    a736:	f000 fa5d 	bl	abf4 <z_reschedule>
    a73a:	e7de      	b.n	a6fa <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    a73c:	2300      	movs	r3, #0
    a73e:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    a740:	f385 8811 	msr	BASEPRI, r5
    a744:	f3bf 8f6f 	isb	sy
    a748:	e7d7      	b.n	a6fa <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    a74a:	f06f 0015 	mvn.w	r0, #21
}
    a74e:	4770      	bx	lr
		return -EPERM;
    a750:	f04f 30ff 	mov.w	r0, #4294967295
    a754:	e7d4      	b.n	a700 <z_impl_k_mutex_unlock+0x28>
    a756:	bf00      	nop
    a758:	20001ec0 	.word	0x20001ec0
    a75c:	20001eec 	.word	0x20001eec

0000a760 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    a760:	b5d0      	push	{r4, r6, r7, lr}
    a762:	b082      	sub	sp, #8
    a764:	4601      	mov	r1, r0
    a766:	4616      	mov	r6, r2
    a768:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    a76a:	4602      	mov	r2, r0
	__asm__ volatile(
    a76c:	f04f 0320 	mov.w	r3, #32
    a770:	f3ef 8411 	mrs	r4, BASEPRI
    a774:	f383 8812 	msr	BASEPRI_MAX, r3
    a778:	f3bf 8f6f 	isb	sy
    a77c:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    a780:	b188      	cbz	r0, a7a6 <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    a782:	6803      	ldr	r3, [r0, #0]
    a784:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
    a788:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
    a78a:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    a78c:	4290      	cmp	r0, r2
    a78e:	d008      	beq.n	a7a2 <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    a790:	2101      	movs	r1, #1
    a792:	f003 fea1 	bl	e4d8 <z_queue_node_peek>
	__asm__ volatile(
    a796:	f384 8811 	msr	BASEPRI, r4
    a79a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    a79e:	b002      	add	sp, #8
    a7a0:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
    a7a2:	604b      	str	r3, [r1, #4]
}
    a7a4:	e7f4      	b.n	a790 <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a7a6:	ea56 0307 	orrs.w	r3, r6, r7
    a7aa:	d00a      	beq.n	a7c2 <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    a7ac:	e9cd 6700 	strd	r6, r7, [sp]
    a7b0:	4621      	mov	r1, r4
    a7b2:	4610      	mov	r0, r2
    a7b4:	f000 fb82 	bl	aebc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    a7b8:	b948      	cbnz	r0, a7ce <z_impl_k_queue_get+0x6e>
    a7ba:	4b06      	ldr	r3, [pc, #24]	; (a7d4 <z_impl_k_queue_get+0x74>)
    a7bc:	689b      	ldr	r3, [r3, #8]
    a7be:	6958      	ldr	r0, [r3, #20]
    a7c0:	e7ed      	b.n	a79e <z_impl_k_queue_get+0x3e>
    a7c2:	f384 8811 	msr	BASEPRI, r4
    a7c6:	f3bf 8f6f 	isb	sy
		return NULL;
    a7ca:	2000      	movs	r0, #0
    a7cc:	e7e7      	b.n	a79e <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
    a7ce:	2000      	movs	r0, #0
    a7d0:	e7e5      	b.n	a79e <z_impl_k_queue_get+0x3e>
    a7d2:	bf00      	nop
    a7d4:	20001ec0 	.word	0x20001ec0

0000a7d8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    a7d8:	b538      	push	{r3, r4, r5, lr}
    a7da:	4604      	mov	r4, r0
	__asm__ volatile(
    a7dc:	f04f 0320 	mov.w	r3, #32
    a7e0:	f3ef 8511 	mrs	r5, BASEPRI
    a7e4:	f383 8812 	msr	BASEPRI_MAX, r3
    a7e8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    a7ec:	f003 fffa 	bl	e7e4 <z_unpend_first_thread>

	if (thread != NULL) {
    a7f0:	b148      	cbz	r0, a806 <z_impl_k_sem_give+0x2e>
    a7f2:	2200      	movs	r2, #0
    a7f4:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    a7f8:	f003 ff32 	bl	e660 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    a7fc:	4629      	mov	r1, r5
    a7fe:	4807      	ldr	r0, [pc, #28]	; (a81c <z_impl_k_sem_give+0x44>)
    a800:	f000 f9f8 	bl	abf4 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    a804:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    a806:	68a3      	ldr	r3, [r4, #8]
    a808:	68e2      	ldr	r2, [r4, #12]
    a80a:	4293      	cmp	r3, r2
    a80c:	d003      	beq.n	a816 <z_impl_k_sem_give+0x3e>
    a80e:	2201      	movs	r2, #1
    a810:	4413      	add	r3, r2
    a812:	60a3      	str	r3, [r4, #8]
}
    a814:	e7f2      	b.n	a7fc <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    a816:	2200      	movs	r2, #0
    a818:	e7fa      	b.n	a810 <z_impl_k_sem_give+0x38>
    a81a:	bf00      	nop
    a81c:	20001eec 	.word	0x20001eec

0000a820 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    a820:	b530      	push	{r4, r5, lr}
    a822:	b083      	sub	sp, #12
    a824:	461d      	mov	r5, r3
    a826:	f04f 0320 	mov.w	r3, #32
    a82a:	f3ef 8111 	mrs	r1, BASEPRI
    a82e:	f383 8812 	msr	BASEPRI_MAX, r3
    a832:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    a836:	6883      	ldr	r3, [r0, #8]
    a838:	b143      	cbz	r3, a84c <z_impl_k_sem_take+0x2c>
		sem->count--;
    a83a:	3b01      	subs	r3, #1
    a83c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    a83e:	f381 8811 	msr	BASEPRI, r1
    a842:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    a846:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    a848:	b003      	add	sp, #12
    a84a:	bd30      	pop	{r4, r5, pc}
    a84c:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a84e:	ea54 0305 	orrs.w	r3, r4, r5
    a852:	d006      	beq.n	a862 <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    a854:	e9cd 4500 	strd	r4, r5, [sp]
    a858:	4602      	mov	r2, r0
    a85a:	4805      	ldr	r0, [pc, #20]	; (a870 <z_impl_k_sem_take+0x50>)
    a85c:	f000 fb2e 	bl	aebc <z_pend_curr>
	return ret;
    a860:	e7f2      	b.n	a848 <z_impl_k_sem_take+0x28>
    a862:	f381 8811 	msr	BASEPRI, r1
    a866:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    a86a:	f06f 000f 	mvn.w	r0, #15
    a86e:	e7eb      	b.n	a848 <z_impl_k_sem_take+0x28>
    a870:	20001eec 	.word	0x20001eec

0000a874 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
    a874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a876:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
    a878:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    a87a:	f013 0f02 	tst.w	r3, #2
    a87e:	d15b      	bne.n	a938 <submit_to_queue_locked+0xc4>
    a880:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    a882:	f013 0f04 	tst.w	r3, #4
    a886:	d15c      	bne.n	a942 <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
    a888:	680b      	ldr	r3, [r1, #0]
    a88a:	2b00      	cmp	r3, #0
    a88c:	d037      	beq.n	a8fe <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
    a88e:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    a890:	f013 0f01 	tst.w	r3, #1
    a894:	d036      	beq.n	a904 <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
    a896:	68a3      	ldr	r3, [r4, #8]
    a898:	602b      	str	r3, [r5, #0]
			ret = 2;
    a89a:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
    a89c:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
    a89e:	2e00      	cmp	r6, #0
    a8a0:	d03e      	beq.n	a920 <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    a8a2:	4b29      	ldr	r3, [pc, #164]	; (a948 <submit_to_queue_locked+0xd4>)
    a8a4:	689b      	ldr	r3, [r3, #8]
    a8a6:	42b3      	cmp	r3, r6
    a8a8:	d02e      	beq.n	a908 <submit_to_queue_locked+0x94>
    a8aa:	2300      	movs	r3, #0
    a8ac:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
    a8ae:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
    a8b2:	f3c3 0180 	ubfx	r1, r3, #2, #1
    a8b6:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    a8ba:	f013 0f01 	tst.w	r3, #1
    a8be:	d032      	beq.n	a926 <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
    a8c0:	b101      	cbz	r1, a8c4 <submit_to_queue_locked+0x50>
    a8c2:	b39a      	cbz	r2, a92c <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
    a8c4:	b100      	cbz	r0, a8c8 <submit_to_queue_locked+0x54>
    a8c6:	b3a1      	cbz	r1, a932 <submit_to_queue_locked+0xbe>
	parent->next = child;
    a8c8:	2300      	movs	r3, #0
    a8ca:	6023      	str	r3, [r4, #0]
	return list->tail;
    a8cc:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
Z_GENLIST_APPEND(slist, snode)
    a8d0:	b30b      	cbz	r3, a916 <submit_to_queue_locked+0xa2>
	parent->next = child;
    a8d2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    a8d4:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    a8d8:	2200      	movs	r2, #0
    a8da:	4611      	mov	r1, r2
    a8dc:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    a8e0:	f003 ffc0 	bl	e864 <z_sched_wake>
		ret = 1;
    a8e4:	2001      	movs	r0, #1

		if (rc < 0) {
    a8e6:	2800      	cmp	r0, #0
    a8e8:	db06      	blt.n	a8f8 <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
    a8ea:	68e3      	ldr	r3, [r4, #12]
    a8ec:	f043 0304 	orr.w	r3, r3, #4
    a8f0:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
    a8f2:	682b      	ldr	r3, [r5, #0]
    a8f4:	60a3      	str	r3, [r4, #8]
    a8f6:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
    a8f8:	2800      	cmp	r0, #0
    a8fa:	dc21      	bgt.n	a940 <submit_to_queue_locked+0xcc>
    a8fc:	e01e      	b.n	a93c <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
    a8fe:	6883      	ldr	r3, [r0, #8]
    a900:	600b      	str	r3, [r1, #0]
    a902:	e7c4      	b.n	a88e <submit_to_queue_locked+0x1a>
		ret = 1;
    a904:	2701      	movs	r7, #1
    a906:	e7c9      	b.n	a89c <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    a908:	f003 fd1c 	bl	e344 <k_is_in_isr>
    a90c:	b908      	cbnz	r0, a912 <submit_to_queue_locked+0x9e>
    a90e:	2301      	movs	r3, #1
    a910:	e7cc      	b.n	a8ac <submit_to_queue_locked+0x38>
    a912:	2300      	movs	r3, #0
    a914:	e7ca      	b.n	a8ac <submit_to_queue_locked+0x38>
    a916:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
	list->head = node;
    a91a:	f8c6 40b0 	str.w	r4, [r6, #176]	; 0xb0
}
    a91e:	e7db      	b.n	a8d8 <submit_to_queue_locked+0x64>
		return -EINVAL;
    a920:	f06f 0015 	mvn.w	r0, #21
    a924:	e7df      	b.n	a8e6 <submit_to_queue_locked+0x72>
		ret = -ENODEV;
    a926:	f06f 0012 	mvn.w	r0, #18
    a92a:	e7dc      	b.n	a8e6 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
    a92c:	f06f 000f 	mvn.w	r0, #15
    a930:	e7d9      	b.n	a8e6 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
    a932:	f06f 000f 	mvn.w	r0, #15
    a936:	e7d6      	b.n	a8e6 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
    a938:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
    a93c:	2300      	movs	r3, #0
    a93e:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
    a940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
    a942:	2000      	movs	r0, #0
    a944:	e7fa      	b.n	a93c <submit_to_queue_locked+0xc8>
    a946:	bf00      	nop
    a948:	20001ec0 	.word	0x20001ec0

0000a94c <finalize_cancel_locked>:
{
    a94c:	b570      	push	{r4, r5, r6, lr}
    a94e:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
    a950:	68c3      	ldr	r3, [r0, #12]
    a952:	f023 0302 	bic.w	r3, r3, #2
    a956:	60c3      	str	r3, [r0, #12]
	return list->head;
    a958:	4b19      	ldr	r3, [pc, #100]	; (a9c0 <finalize_cancel_locked+0x74>)
    a95a:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    a95c:	b1e8      	cbz	r0, a99a <finalize_cancel_locked+0x4e>
    a95e:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
    a960:	b100      	cbz	r0, a964 <finalize_cancel_locked+0x18>
	return node->next;
    a962:	6804      	ldr	r4, [r0, #0]
    a964:	2600      	movs	r6, #0
    a966:	e01d      	b.n	a9a4 <finalize_cancel_locked+0x58>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    a968:	b15e      	cbz	r6, a982 <finalize_cancel_locked+0x36>
	return node->next;
    a96a:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
    a96c:	6033      	str	r3, [r6, #0]
	return list->tail;
    a96e:	4b14      	ldr	r3, [pc, #80]	; (a9c0 <finalize_cancel_locked+0x74>)
    a970:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    a972:	4298      	cmp	r0, r3
    a974:	d00e      	beq.n	a994 <finalize_cancel_locked+0x48>
	parent->next = child;
    a976:	2300      	movs	r3, #0
    a978:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    a97c:	f7ff ff2c 	bl	a7d8 <z_impl_k_sem_give>
}
    a980:	e015      	b.n	a9ae <finalize_cancel_locked+0x62>
	return node->next;
    a982:	6802      	ldr	r2, [r0, #0]
	list->head = node;
    a984:	4b0e      	ldr	r3, [pc, #56]	; (a9c0 <finalize_cancel_locked+0x74>)
    a986:	601a      	str	r2, [r3, #0]
	return list->tail;
    a988:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    a98a:	4298      	cmp	r0, r3
    a98c:	d1f3      	bne.n	a976 <finalize_cancel_locked+0x2a>
	list->tail = node;
    a98e:	4b0c      	ldr	r3, [pc, #48]	; (a9c0 <finalize_cancel_locked+0x74>)
    a990:	605a      	str	r2, [r3, #4]
}
    a992:	e7f0      	b.n	a976 <finalize_cancel_locked+0x2a>
	list->tail = node;
    a994:	4b0a      	ldr	r3, [pc, #40]	; (a9c0 <finalize_cancel_locked+0x74>)
    a996:	605e      	str	r6, [r3, #4]
}
    a998:	e7ed      	b.n	a976 <finalize_cancel_locked+0x2a>
    a99a:	4604      	mov	r4, r0
    a99c:	e7e2      	b.n	a964 <finalize_cancel_locked+0x18>
    a99e:	4623      	mov	r3, r4
    a9a0:	4620      	mov	r0, r4
    a9a2:	461c      	mov	r4, r3
    a9a4:	b150      	cbz	r0, a9bc <finalize_cancel_locked+0x70>
		if (wc->work == work) {
    a9a6:	6843      	ldr	r3, [r0, #4]
    a9a8:	42ab      	cmp	r3, r5
    a9aa:	d0dd      	beq.n	a968 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
    a9ac:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    a9ae:	2c00      	cmp	r4, #0
    a9b0:	d0f5      	beq.n	a99e <finalize_cancel_locked+0x52>
    a9b2:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    a9b4:	2c00      	cmp	r4, #0
    a9b6:	d0f3      	beq.n	a9a0 <finalize_cancel_locked+0x54>
	return node->next;
    a9b8:	6823      	ldr	r3, [r4, #0]
    a9ba:	e7f1      	b.n	a9a0 <finalize_cancel_locked+0x54>
}
    a9bc:	bd70      	pop	{r4, r5, r6, pc}
    a9be:	bf00      	nop
    a9c0:	20001eec 	.word	0x20001eec

0000a9c4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    a9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a9c6:	b085      	sub	sp, #20
    a9c8:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
    a9ca:	e016      	b.n	a9fa <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
    a9cc:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
	*flagp &= ~BIT(bit);
    a9d0:	f023 0204 	bic.w	r2, r3, #4
    a9d4:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    a9d8:	f013 0f04 	tst.w	r3, #4
    a9dc:	d158      	bne.n	aa90 <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    a9de:	2300      	movs	r3, #0
    a9e0:	9302      	str	r3, [sp, #8]
    a9e2:	f04f 32ff 	mov.w	r2, #4294967295
    a9e6:	f04f 33ff 	mov.w	r3, #4294967295
    a9ea:	e9cd 2300 	strd	r2, r3, [sp]
    a9ee:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
    a9f2:	4631      	mov	r1, r6
    a9f4:	482e      	ldr	r0, [pc, #184]	; (aab0 <work_queue_main+0xec>)
    a9f6:	f000 fc95 	bl	b324 <z_sched_wait>
	__asm__ volatile(
    a9fa:	f04f 0320 	mov.w	r3, #32
    a9fe:	f3ef 8611 	mrs	r6, BASEPRI
    aa02:	f383 8812 	msr	BASEPRI_MAX, r3
    aa06:	f3bf 8f6f 	isb	sy
	return list->head;
    aa0a:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
Z_GENLIST_GET(slist, snode)
    aa0e:	2c00      	cmp	r4, #0
    aa10:	d0dc      	beq.n	a9cc <work_queue_main+0x8>
	return node->next;
    aa12:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    aa14:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	return list->tail;
    aa18:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    aa1c:	4294      	cmp	r4, r2
    aa1e:	d034      	beq.n	aa8a <work_queue_main+0xc6>
	*flagp |= BIT(bit);
    aa20:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    aa24:	f043 0302 	orr.w	r3, r3, #2
    aa28:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
    aa2c:	68e3      	ldr	r3, [r4, #12]
    aa2e:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
    aa32:	f023 0304 	bic.w	r3, r3, #4
    aa36:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
    aa38:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
    aa3a:	2c00      	cmp	r4, #0
    aa3c:	d0cf      	beq.n	a9de <work_queue_main+0x1a>
	__asm__ volatile(
    aa3e:	f386 8811 	msr	BASEPRI, r6
    aa42:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    aa46:	4620      	mov	r0, r4
    aa48:	4798      	blx	r3
	__asm__ volatile(
    aa4a:	f04f 0320 	mov.w	r3, #32
    aa4e:	f3ef 8611 	mrs	r6, BASEPRI
    aa52:	f383 8812 	msr	BASEPRI_MAX, r3
    aa56:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    aa5a:	68e3      	ldr	r3, [r4, #12]
    aa5c:	f023 0301 	bic.w	r3, r3, #1
    aa60:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    aa62:	f013 0f02 	tst.w	r3, #2
    aa66:	d11e      	bne.n	aaa6 <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
    aa68:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    aa6c:	f023 0302 	bic.w	r3, r3, #2
    aa70:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	return (*flagp & BIT(bit)) != 0U;
    aa74:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
    aa78:	f386 8811 	msr	BASEPRI, r6
    aa7c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    aa80:	2b00      	cmp	r3, #0
    aa82:	d1ba      	bne.n	a9fa <work_queue_main+0x36>
	z_impl_k_yield();
    aa84:	f000 fb50 	bl	b128 <z_impl_k_yield>
}
    aa88:	e7b7      	b.n	a9fa <work_queue_main+0x36>
	list->tail = node;
    aa8a:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
}
    aa8e:	e7c7      	b.n	aa20 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    aa90:	f105 07c0 	add.w	r7, r5, #192	; 0xc0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    aa94:	2200      	movs	r2, #0
    aa96:	2101      	movs	r1, #1
    aa98:	4638      	mov	r0, r7
    aa9a:	f003 fee3 	bl	e864 <z_sched_wake>
    aa9e:	2800      	cmp	r0, #0
    aaa0:	d1f8      	bne.n	aa94 <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
    aaa2:	2300      	movs	r3, #0
    aaa4:	e7c9      	b.n	aa3a <work_queue_main+0x76>
			finalize_cancel_locked(work);
    aaa6:	4620      	mov	r0, r4
    aaa8:	f7ff ff50 	bl	a94c <finalize_cancel_locked>
    aaac:	e7dc      	b.n	aa68 <work_queue_main+0xa4>
    aaae:	bf00      	nop
    aab0:	20001eec 	.word	0x20001eec

0000aab4 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    aab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    aab6:	b089      	sub	sp, #36	; 0x24
    aab8:	4604      	mov	r4, r0
    aaba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
    aabc:	2000      	movs	r0, #0
    aabe:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	list->tail = NULL;
    aac2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    aac6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	list->head = (sys_dnode_t *)list;
    aaca:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = (sys_dnode_t *)list;
    aace:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    aad2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
    aad6:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
    aada:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    aade:	b1fd      	cbz	r5, ab20 <k_work_queue_start+0x6c>
    aae0:	7928      	ldrb	r0, [r5, #4]
    aae2:	b9f8      	cbnz	r0, ab24 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    aae4:	2001      	movs	r0, #1
	*flagp = flags;
    aae6:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    aaea:	f04f 36ff 	mov.w	r6, #4294967295
    aaee:	f04f 37ff 	mov.w	r7, #4294967295
    aaf2:	e9cd 6706 	strd	r6, r7, [sp, #24]
    aaf6:	2000      	movs	r0, #0
    aaf8:	9004      	str	r0, [sp, #16]
    aafa:	9303      	str	r3, [sp, #12]
    aafc:	9002      	str	r0, [sp, #8]
    aafe:	9001      	str	r0, [sp, #4]
    ab00:	9400      	str	r4, [sp, #0]
    ab02:	4b0a      	ldr	r3, [pc, #40]	; (ab2c <k_work_queue_start+0x78>)
    ab04:	4620      	mov	r0, r4
    ab06:	f003 fc34 	bl	e372 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    ab0a:	b125      	cbz	r5, ab16 <k_work_queue_start+0x62>
    ab0c:	6829      	ldr	r1, [r5, #0]
    ab0e:	b111      	cbz	r1, ab16 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
    ab10:	4620      	mov	r0, r4
    ab12:	f7ff fc69 	bl	a3e8 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    ab16:	4620      	mov	r0, r4
    ab18:	f003 fc1c 	bl	e354 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    ab1c:	b009      	add	sp, #36	; 0x24
    ab1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
    ab20:	2001      	movs	r0, #1
    ab22:	e7e0      	b.n	aae6 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
    ab24:	f240 1001 	movw	r0, #257	; 0x101
    ab28:	e7dd      	b.n	aae6 <k_work_queue_start+0x32>
    ab2a:	bf00      	nop
    ab2c:	0000a9c5 	.word	0x0000a9c5

0000ab30 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    ab30:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ab32:	f1b3 3fff 	cmp.w	r3, #4294967295
    ab36:	bf08      	it	eq
    ab38:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    ab3c:	d100      	bne.n	ab40 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    ab3e:	bd38      	pop	{r3, r4, r5, pc}
    ab40:	4902      	ldr	r1, [pc, #8]	; (ab4c <add_thread_timeout+0x1c>)
    ab42:	3018      	adds	r0, #24
    ab44:	f000 fc62 	bl	b40c <z_add_timeout>
    ab48:	e7f9      	b.n	ab3e <add_thread_timeout+0xe>
    ab4a:	bf00      	nop
    ab4c:	0000e699 	.word	0x0000e699

0000ab50 <z_reset_time_slice>:
{
    ab50:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    ab52:	4b08      	ldr	r3, [pc, #32]	; (ab74 <z_reset_time_slice+0x24>)
    ab54:	681b      	ldr	r3, [r3, #0]
    ab56:	b903      	cbnz	r3, ab5a <z_reset_time_slice+0xa>
}
    ab58:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    ab5a:	f7fc fb59 	bl	7210 <sys_clock_elapsed>
    ab5e:	4603      	mov	r3, r0
    ab60:	4a04      	ldr	r2, [pc, #16]	; (ab74 <z_reset_time_slice+0x24>)
    ab62:	6810      	ldr	r0, [r2, #0]
    ab64:	4403      	add	r3, r0
    ab66:	4a04      	ldr	r2, [pc, #16]	; (ab78 <z_reset_time_slice+0x28>)
    ab68:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    ab6a:	2100      	movs	r1, #0
    ab6c:	f003 fefc 	bl	e968 <z_set_timeout_expiry>
}
    ab70:	e7f2      	b.n	ab58 <z_reset_time_slice+0x8>
    ab72:	bf00      	nop
    ab74:	20001efc 	.word	0x20001efc
    ab78:	20001ec0 	.word	0x20001ec0

0000ab7c <k_sched_time_slice_set>:
{
    ab7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab80:	4606      	mov	r6, r0
    ab82:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    ab84:	2300      	movs	r3, #0
	__asm__ volatile(
    ab86:	f04f 0220 	mov.w	r2, #32
    ab8a:	f3ef 8711 	mrs	r7, BASEPRI
    ab8e:	f382 8812 	msr	BASEPRI_MAX, r2
    ab92:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    ab96:	e009      	b.n	abac <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
    ab98:	4b13      	ldr	r3, [pc, #76]	; (abe8 <k_sched_time_slice_set+0x6c>)
    ab9a:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    ab9e:	f7ff ffd7 	bl	ab50 <z_reset_time_slice>
	__asm__ volatile(
    aba2:	f387 8811 	msr	BASEPRI, r7
    aba6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    abaa:	2301      	movs	r3, #1
    abac:	b9cb      	cbnz	r3, abe2 <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
    abae:	2300      	movs	r3, #0
    abb0:	4a0e      	ldr	r2, [pc, #56]	; (abec <k_sched_time_slice_set+0x70>)
    abb2:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    abb4:	0c75      	lsrs	r5, r6, #17
    abb6:	03f4      	lsls	r4, r6, #15
    abb8:	f240 30e7 	movw	r0, #999	; 0x3e7
    abbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    abc0:	2300      	movs	r3, #0
    abc2:	1820      	adds	r0, r4, r0
    abc4:	f04f 0100 	mov.w	r1, #0
    abc8:	eb45 0101 	adc.w	r1, r5, r1
    abcc:	f7f5 fac2 	bl	154 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    abd0:	4b07      	ldr	r3, [pc, #28]	; (abf0 <k_sched_time_slice_set+0x74>)
    abd2:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    abd4:	2e00      	cmp	r6, #0
    abd6:	dddf      	ble.n	ab98 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
    abd8:	2802      	cmp	r0, #2
    abda:	bfb8      	it	lt
    abdc:	2002      	movlt	r0, #2
    abde:	6018      	str	r0, [r3, #0]
    abe0:	e7da      	b.n	ab98 <k_sched_time_slice_set+0x1c>
}
    abe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    abe6:	bf00      	nop
    abe8:	20001ef8 	.word	0x20001ef8
    abec:	20001ec0 	.word	0x20001ec0
    abf0:	20001efc 	.word	0x20001efc

0000abf4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    abf4:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    abf6:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    abf8:	b921      	cbnz	r1, ac04 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    abfa:	f3ef 8305 	mrs	r3, IPSR
    abfe:	b913      	cbnz	r3, ac06 <z_reschedule+0x12>
    ac00:	2101      	movs	r1, #1
    ac02:	e000      	b.n	ac06 <z_reschedule+0x12>
    ac04:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    ac06:	f011 0f01 	tst.w	r1, #1
    ac0a:	d007      	beq.n	ac1c <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    ac0c:	4b06      	ldr	r3, [pc, #24]	; (ac28 <z_reschedule+0x34>)
    ac0e:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    ac10:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    ac12:	429a      	cmp	r2, r3
    ac14:	d002      	beq.n	ac1c <z_reschedule+0x28>
	ret = arch_swap(key);
    ac16:	f7f9 f8e7 	bl	3de8 <arch_swap>
		z_swap(lock, key);
    ac1a:	e003      	b.n	ac24 <z_reschedule+0x30>
    ac1c:	f380 8811 	msr	BASEPRI, r0
    ac20:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    ac24:	bd08      	pop	{r3, pc}
    ac26:	bf00      	nop
    ac28:	20001ec0 	.word	0x20001ec0

0000ac2c <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    ac2c:	2300      	movs	r3, #0
	__asm__ volatile(
    ac2e:	f04f 0220 	mov.w	r2, #32
    ac32:	f3ef 8111 	mrs	r1, BASEPRI
    ac36:	f382 8812 	msr	BASEPRI_MAX, r2
    ac3a:	f3bf 8f6f 	isb	sy
    ac3e:	b953      	cbnz	r3, ac56 <k_sched_lock+0x2a>
	--_current->base.sched_locked;
    ac40:	4b05      	ldr	r3, [pc, #20]	; (ac58 <k_sched_lock+0x2c>)
    ac42:	689a      	ldr	r2, [r3, #8]
    ac44:	7bd3      	ldrb	r3, [r2, #15]
    ac46:	3b01      	subs	r3, #1
    ac48:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    ac4a:	f381 8811 	msr	BASEPRI, r1
    ac4e:	f3bf 8f6f 	isb	sy
    ac52:	2301      	movs	r3, #1
    ac54:	e7f3      	b.n	ac3e <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    ac56:	4770      	bx	lr
    ac58:	20001ec0 	.word	0x20001ec0

0000ac5c <update_cache>:
{
    ac5c:	b538      	push	{r3, r4, r5, lr}
    ac5e:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    ac60:	480f      	ldr	r0, [pc, #60]	; (aca0 <update_cache+0x44>)
    ac62:	f003 fcf6 	bl	e652 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    ac66:	4605      	mov	r5, r0
    ac68:	b170      	cbz	r0, ac88 <update_cache+0x2c>
	if (preempt_ok != 0) {
    ac6a:	b984      	cbnz	r4, ac8e <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    ac6c:	4b0d      	ldr	r3, [pc, #52]	; (aca4 <update_cache+0x48>)
    ac6e:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    ac70:	7b5a      	ldrb	r2, [r3, #13]
    ac72:	f012 0f1f 	tst.w	r2, #31
    ac76:	d10a      	bne.n	ac8e <update_cache+0x32>
	return node->next != NULL;
    ac78:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    ac7a:	b942      	cbnz	r2, ac8e <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    ac7c:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    ac7e:	2a7f      	cmp	r2, #127	; 0x7f
    ac80:	d905      	bls.n	ac8e <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    ac82:	4a08      	ldr	r2, [pc, #32]	; (aca4 <update_cache+0x48>)
    ac84:	61d3      	str	r3, [r2, #28]
    ac86:	e00a      	b.n	ac9e <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    ac88:	4b06      	ldr	r3, [pc, #24]	; (aca4 <update_cache+0x48>)
    ac8a:	68dd      	ldr	r5, [r3, #12]
    ac8c:	e7ed      	b.n	ac6a <update_cache+0xe>
		if (thread != _current) {
    ac8e:	4b05      	ldr	r3, [pc, #20]	; (aca4 <update_cache+0x48>)
    ac90:	689b      	ldr	r3, [r3, #8]
    ac92:	42ab      	cmp	r3, r5
    ac94:	d001      	beq.n	ac9a <update_cache+0x3e>
			z_reset_time_slice();
    ac96:	f7ff ff5b 	bl	ab50 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    ac9a:	4b02      	ldr	r3, [pc, #8]	; (aca4 <update_cache+0x48>)
    ac9c:	61dd      	str	r5, [r3, #28]
}
    ac9e:	bd38      	pop	{r3, r4, r5, pc}
    aca0:	20001ee0 	.word	0x20001ee0
    aca4:	20001ec0 	.word	0x20001ec0

0000aca8 <move_thread_to_end_of_prio_q>:
{
    aca8:	b538      	push	{r3, r4, r5, lr}
    acaa:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    acac:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    acae:	f990 300d 	ldrsb.w	r3, [r0, #13]
    acb2:	2b00      	cmp	r3, #0
    acb4:	db28      	blt.n	ad08 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    acb6:	7b6b      	ldrb	r3, [r5, #13]
    acb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    acbc:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    acbe:	4b1a      	ldr	r3, [pc, #104]	; (ad28 <move_thread_to_end_of_prio_q+0x80>)
    acc0:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    acc4:	429c      	cmp	r4, r3
    acc6:	d02d      	beq.n	ad24 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    acc8:	b16c      	cbz	r4, ace6 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    acca:	4621      	mov	r1, r4
    accc:	4628      	mov	r0, r5
    acce:	f003 fc57 	bl	e580 <z_sched_prio_cmp>
    acd2:	2800      	cmp	r0, #0
    acd4:	dc20      	bgt.n	ad18 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    acd6:	b134      	cbz	r4, ace6 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    acd8:	4b13      	ldr	r3, [pc, #76]	; (ad28 <move_thread_to_end_of_prio_q+0x80>)
    acda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    acdc:	429c      	cmp	r4, r3
    acde:	d002      	beq.n	ace6 <move_thread_to_end_of_prio_q+0x3e>
    ace0:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ace2:	2c00      	cmp	r4, #0
    ace4:	d1f0      	bne.n	acc8 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    ace6:	4b10      	ldr	r3, [pc, #64]	; (ad28 <move_thread_to_end_of_prio_q+0x80>)
    ace8:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    acea:	f103 0120 	add.w	r1, r3, #32
    acee:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    acf0:	606a      	str	r2, [r5, #4]

	tail->next = node;
    acf2:	6015      	str	r5, [r2, #0]
	list->tail = node;
    acf4:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    acf6:	4b0c      	ldr	r3, [pc, #48]	; (ad28 <move_thread_to_end_of_prio_q+0x80>)
    acf8:	6898      	ldr	r0, [r3, #8]
    acfa:	42a8      	cmp	r0, r5
    acfc:	bf14      	ite	ne
    acfe:	2000      	movne	r0, #0
    ad00:	2001      	moveq	r0, #1
    ad02:	f7ff ffab 	bl	ac5c <update_cache>
}
    ad06:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ad08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ad0c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    ad0e:	4601      	mov	r1, r0
    ad10:	4806      	ldr	r0, [pc, #24]	; (ad2c <move_thread_to_end_of_prio_q+0x84>)
    ad12:	f003 fc73 	bl	e5fc <z_priq_dumb_remove>
}
    ad16:	e7ce      	b.n	acb6 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    ad18:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    ad1a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    ad1c:	602c      	str	r4, [r5, #0]
	prev->next = node;
    ad1e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    ad20:	6065      	str	r5, [r4, #4]
}
    ad22:	e7e8      	b.n	acf6 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ad24:	2400      	movs	r4, #0
    ad26:	e7cf      	b.n	acc8 <move_thread_to_end_of_prio_q+0x20>
    ad28:	20001ec0 	.word	0x20001ec0
    ad2c:	20001ee0 	.word	0x20001ee0

0000ad30 <z_time_slice>:
{
    ad30:	b510      	push	{r4, lr}
	__asm__ volatile(
    ad32:	f04f 0320 	mov.w	r3, #32
    ad36:	f3ef 8411 	mrs	r4, BASEPRI
    ad3a:	f383 8812 	msr	BASEPRI_MAX, r3
    ad3e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    ad42:	4b1c      	ldr	r3, [pc, #112]	; (adb4 <z_time_slice+0x84>)
    ad44:	689b      	ldr	r3, [r3, #8]
    ad46:	4a1c      	ldr	r2, [pc, #112]	; (adb8 <z_time_slice+0x88>)
    ad48:	6812      	ldr	r2, [r2, #0]
    ad4a:	4293      	cmp	r3, r2
    ad4c:	d01d      	beq.n	ad8a <z_time_slice+0x5a>
	pending_current = NULL;
    ad4e:	4a1a      	ldr	r2, [pc, #104]	; (adb8 <z_time_slice+0x88>)
    ad50:	2100      	movs	r1, #0
    ad52:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    ad54:	4a19      	ldr	r2, [pc, #100]	; (adbc <z_time_slice+0x8c>)
    ad56:	6812      	ldr	r2, [r2, #0]
    ad58:	b322      	cbz	r2, ada4 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    ad5a:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    ad5c:	2a7f      	cmp	r2, #127	; 0x7f
    ad5e:	d821      	bhi.n	ada4 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
    ad60:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    ad62:	f012 0f1f 	tst.w	r2, #31
    ad66:	d11d      	bne.n	ada4 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    ad68:	f993 100e 	ldrsb.w	r1, [r3, #14]
    ad6c:	4a14      	ldr	r2, [pc, #80]	; (adc0 <z_time_slice+0x90>)
    ad6e:	6812      	ldr	r2, [r2, #0]
    ad70:	4291      	cmp	r1, r2
    ad72:	db17      	blt.n	ada4 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    ad74:	4a13      	ldr	r2, [pc, #76]	; (adc4 <z_time_slice+0x94>)
    ad76:	4293      	cmp	r3, r2
    ad78:	d014      	beq.n	ada4 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    ad7a:	4a0e      	ldr	r2, [pc, #56]	; (adb4 <z_time_slice+0x84>)
    ad7c:	6912      	ldr	r2, [r2, #16]
    ad7e:	4282      	cmp	r2, r0
    ad80:	dd0a      	ble.n	ad98 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
    ad82:	1a10      	subs	r0, r2, r0
    ad84:	4b0b      	ldr	r3, [pc, #44]	; (adb4 <z_time_slice+0x84>)
    ad86:	6118      	str	r0, [r3, #16]
    ad88:	e00f      	b.n	adaa <z_time_slice+0x7a>
		z_reset_time_slice();
    ad8a:	f7ff fee1 	bl	ab50 <z_reset_time_slice>
	__asm__ volatile(
    ad8e:	f384 8811 	msr	BASEPRI, r4
    ad92:	f3bf 8f6f 	isb	sy
		return;
    ad96:	e00c      	b.n	adb2 <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
    ad98:	4618      	mov	r0, r3
    ad9a:	f7ff ff85 	bl	aca8 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    ad9e:	f7ff fed7 	bl	ab50 <z_reset_time_slice>
    ada2:	e002      	b.n	adaa <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
    ada4:	4b03      	ldr	r3, [pc, #12]	; (adb4 <z_time_slice+0x84>)
    ada6:	2200      	movs	r2, #0
    ada8:	611a      	str	r2, [r3, #16]
    adaa:	f384 8811 	msr	BASEPRI, r4
    adae:	f3bf 8f6f 	isb	sy
}
    adb2:	bd10      	pop	{r4, pc}
    adb4:	20001ec0 	.word	0x20001ec0
    adb8:	20001ef4 	.word	0x20001ef4
    adbc:	20001efc 	.word	0x20001efc
    adc0:	20001ef8 	.word	0x20001ef8
    adc4:	20000800 	.word	0x20000800

0000adc8 <ready_thread>:
{
    adc8:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    adca:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    adcc:	f990 200d 	ldrsb.w	r2, [r0, #13]
    add0:	2a00      	cmp	r2, #0
    add2:	db2d      	blt.n	ae30 <ready_thread+0x68>
    add4:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    add6:	f013 0f1f 	tst.w	r3, #31
    adda:	d105      	bne.n	ade8 <ready_thread+0x20>
	return node->next != NULL;
    addc:	6982      	ldr	r2, [r0, #24]
    adde:	b10a      	cbz	r2, ade4 <ready_thread+0x1c>
    ade0:	2200      	movs	r2, #0
    ade2:	e002      	b.n	adea <ready_thread+0x22>
    ade4:	2201      	movs	r2, #1
    ade6:	e000      	b.n	adea <ready_thread+0x22>
    ade8:	2200      	movs	r2, #0
    adea:	b30a      	cbz	r2, ae30 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    adec:	f063 037f 	orn	r3, r3, #127	; 0x7f
    adf0:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    adf2:	4b14      	ldr	r3, [pc, #80]	; (ae44 <ready_thread+0x7c>)
    adf4:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    adf8:	429d      	cmp	r5, r3
    adfa:	d020      	beq.n	ae3e <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    adfc:	b16d      	cbz	r5, ae1a <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    adfe:	4629      	mov	r1, r5
    ae00:	4620      	mov	r0, r4
    ae02:	f003 fbbd 	bl	e580 <z_sched_prio_cmp>
    ae06:	2800      	cmp	r0, #0
    ae08:	dc13      	bgt.n	ae32 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ae0a:	b135      	cbz	r5, ae1a <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    ae0c:	4b0d      	ldr	r3, [pc, #52]	; (ae44 <ready_thread+0x7c>)
    ae0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ae10:	429d      	cmp	r5, r3
    ae12:	d002      	beq.n	ae1a <ready_thread+0x52>
    ae14:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ae16:	2d00      	cmp	r5, #0
    ae18:	d1f0      	bne.n	adfc <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    ae1a:	4b0a      	ldr	r3, [pc, #40]	; (ae44 <ready_thread+0x7c>)
    ae1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    ae1e:	f103 0120 	add.w	r1, r3, #32
    ae22:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    ae24:	6062      	str	r2, [r4, #4]
	tail->next = node;
    ae26:	6014      	str	r4, [r2, #0]
	list->tail = node;
    ae28:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    ae2a:	2000      	movs	r0, #0
    ae2c:	f7ff ff16 	bl	ac5c <update_cache>
}
    ae30:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    ae32:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    ae34:	6063      	str	r3, [r4, #4]
	node->next = successor;
    ae36:	6025      	str	r5, [r4, #0]
	prev->next = node;
    ae38:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    ae3a:	606c      	str	r4, [r5, #4]
}
    ae3c:	e7f5      	b.n	ae2a <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ae3e:	2500      	movs	r5, #0
    ae40:	e7dc      	b.n	adfc <ready_thread+0x34>
    ae42:	bf00      	nop
    ae44:	20001ec0 	.word	0x20001ec0

0000ae48 <z_sched_start>:
{
    ae48:	b510      	push	{r4, lr}
	__asm__ volatile(
    ae4a:	f04f 0320 	mov.w	r3, #32
    ae4e:	f3ef 8411 	mrs	r4, BASEPRI
    ae52:	f383 8812 	msr	BASEPRI_MAX, r3
    ae56:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    ae5a:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    ae5c:	f013 0f04 	tst.w	r3, #4
    ae60:	d104      	bne.n	ae6c <z_sched_start+0x24>
	__asm__ volatile(
    ae62:	f384 8811 	msr	BASEPRI, r4
    ae66:	f3bf 8f6f 	isb	sy
}
    ae6a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ae6c:	f023 0304 	bic.w	r3, r3, #4
    ae70:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    ae72:	f7ff ffa9 	bl	adc8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    ae76:	4621      	mov	r1, r4
    ae78:	4801      	ldr	r0, [pc, #4]	; (ae80 <z_sched_start+0x38>)
    ae7a:	f7ff febb 	bl	abf4 <z_reschedule>
    ae7e:	e7f4      	b.n	ae6a <z_sched_start+0x22>
    ae80:	20001ef8 	.word	0x20001ef8

0000ae84 <unready_thread>:
{
    ae84:	b510      	push	{r4, lr}
    ae86:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    ae88:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    ae8a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    ae8e:	2b00      	cmp	r3, #0
    ae90:	db08      	blt.n	aea4 <unready_thread+0x20>
	update_cache(thread == _current);
    ae92:	4b08      	ldr	r3, [pc, #32]	; (aeb4 <unready_thread+0x30>)
    ae94:	6898      	ldr	r0, [r3, #8]
    ae96:	42a0      	cmp	r0, r4
    ae98:	bf14      	ite	ne
    ae9a:	2000      	movne	r0, #0
    ae9c:	2001      	moveq	r0, #1
    ae9e:	f7ff fedd 	bl	ac5c <update_cache>
}
    aea2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    aea4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    aea8:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    aeaa:	4601      	mov	r1, r0
    aeac:	4802      	ldr	r0, [pc, #8]	; (aeb8 <unready_thread+0x34>)
    aeae:	f003 fba5 	bl	e5fc <z_priq_dumb_remove>
}
    aeb2:	e7ee      	b.n	ae92 <unready_thread+0xe>
    aeb4:	20001ec0 	.word	0x20001ec0
    aeb8:	20001ee0 	.word	0x20001ee0

0000aebc <z_pend_curr>:
{
    aebc:	b510      	push	{r4, lr}
    aebe:	460c      	mov	r4, r1
    aec0:	4611      	mov	r1, r2
	pending_current = _current;
    aec2:	4b06      	ldr	r3, [pc, #24]	; (aedc <z_pend_curr+0x20>)
    aec4:	6898      	ldr	r0, [r3, #8]
    aec6:	4b06      	ldr	r3, [pc, #24]	; (aee0 <z_pend_curr+0x24>)
    aec8:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    aeca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    aece:	f003 fc41 	bl	e754 <pend>
    aed2:	4620      	mov	r0, r4
    aed4:	f7f8 ff88 	bl	3de8 <arch_swap>
}
    aed8:	bd10      	pop	{r4, pc}
    aeda:	bf00      	nop
    aedc:	20001ec0 	.word	0x20001ec0
    aee0:	20001ef4 	.word	0x20001ef4

0000aee4 <z_set_prio>:
{
    aee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    aee8:	4604      	mov	r4, r0
    aeea:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    aeec:	2300      	movs	r3, #0
	__asm__ volatile(
    aeee:	f04f 0220 	mov.w	r2, #32
    aef2:	f3ef 8611 	mrs	r6, BASEPRI
    aef6:	f382 8812 	msr	BASEPRI_MAX, r2
    aefa:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    aefe:	4698      	mov	r8, r3
    af00:	e008      	b.n	af14 <z_set_prio+0x30>
		if (need_sched) {
    af02:	f012 0801 	ands.w	r8, r2, #1
    af06:	d111      	bne.n	af2c <z_set_prio+0x48>
			thread->base.prio = prio;
    af08:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
    af0a:	f386 8811 	msr	BASEPRI, r6
    af0e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    af12:	2301      	movs	r3, #1
    af14:	461a      	mov	r2, r3
    af16:	2b00      	cmp	r3, #0
    af18:	d13d      	bne.n	af96 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    af1a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    af1c:	f013 0f1f 	tst.w	r3, #31
    af20:	d1ef      	bne.n	af02 <z_set_prio+0x1e>
	return node->next != NULL;
    af22:	69a1      	ldr	r1, [r4, #24]
    af24:	2900      	cmp	r1, #0
    af26:	d1ec      	bne.n	af02 <z_set_prio+0x1e>
    af28:	2201      	movs	r2, #1
    af2a:	e7ea      	b.n	af02 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    af2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    af30:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    af32:	f8df 906c 	ldr.w	r9, [pc, #108]	; afa0 <z_set_prio+0xbc>
    af36:	4621      	mov	r1, r4
    af38:	4648      	mov	r0, r9
    af3a:	f003 fb5f 	bl	e5fc <z_priq_dumb_remove>
				thread->base.prio = prio;
    af3e:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    af40:	7b63      	ldrb	r3, [r4, #13]
    af42:	f063 037f 	orn	r3, r3, #127	; 0x7f
    af46:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    af48:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    af4c:	454d      	cmp	r5, r9
    af4e:	d020      	beq.n	af92 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    af50:	b16d      	cbz	r5, af6e <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    af52:	4629      	mov	r1, r5
    af54:	4620      	mov	r0, r4
    af56:	f003 fb13 	bl	e580 <z_sched_prio_cmp>
    af5a:	2800      	cmp	r0, #0
    af5c:	dc13      	bgt.n	af86 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    af5e:	b135      	cbz	r5, af6e <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    af60:	4b0e      	ldr	r3, [pc, #56]	; (af9c <z_set_prio+0xb8>)
    af62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    af64:	429d      	cmp	r5, r3
    af66:	d002      	beq.n	af6e <z_set_prio+0x8a>
    af68:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    af6a:	2d00      	cmp	r5, #0
    af6c:	d1f0      	bne.n	af50 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    af6e:	4b0b      	ldr	r3, [pc, #44]	; (af9c <z_set_prio+0xb8>)
    af70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    af72:	f103 0120 	add.w	r1, r3, #32
    af76:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    af78:	6062      	str	r2, [r4, #4]
	tail->next = node;
    af7a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    af7c:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    af7e:	2001      	movs	r0, #1
    af80:	f7ff fe6c 	bl	ac5c <update_cache>
    af84:	e7c1      	b.n	af0a <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    af86:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    af88:	6063      	str	r3, [r4, #4]
	node->next = successor;
    af8a:	6025      	str	r5, [r4, #0]
	prev->next = node;
    af8c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    af8e:	606c      	str	r4, [r5, #4]
}
    af90:	e7f5      	b.n	af7e <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    af92:	2500      	movs	r5, #0
    af94:	e7dc      	b.n	af50 <z_set_prio+0x6c>
}
    af96:	4640      	mov	r0, r8
    af98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    af9c:	20001ec0 	.word	0x20001ec0
    afa0:	20001ee0 	.word	0x20001ee0

0000afa4 <z_impl_k_thread_suspend>:
{
    afa4:	b538      	push	{r3, r4, r5, lr}
    afa6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    afa8:	3018      	adds	r0, #24
    afaa:	f003 fca9 	bl	e900 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    afae:	2300      	movs	r3, #0
	__asm__ volatile(
    afb0:	f04f 0220 	mov.w	r2, #32
    afb4:	f3ef 8511 	mrs	r5, BASEPRI
    afb8:	f382 8812 	msr	BASEPRI_MAX, r2
    afbc:	f3bf 8f6f 	isb	sy
    afc0:	e010      	b.n	afe4 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    afc2:	7b63      	ldrb	r3, [r4, #13]
    afc4:	f043 0310 	orr.w	r3, r3, #16
    afc8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    afca:	4b15      	ldr	r3, [pc, #84]	; (b020 <z_impl_k_thread_suspend+0x7c>)
    afcc:	6898      	ldr	r0, [r3, #8]
    afce:	42a0      	cmp	r0, r4
    afd0:	bf14      	ite	ne
    afd2:	2000      	movne	r0, #0
    afd4:	2001      	moveq	r0, #1
    afd6:	f7ff fe41 	bl	ac5c <update_cache>
	__asm__ volatile(
    afda:	f385 8811 	msr	BASEPRI, r5
    afde:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    afe2:	2301      	movs	r3, #1
    afe4:	b963      	cbnz	r3, b000 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    afe6:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    afe8:	f994 300d 	ldrsb.w	r3, [r4, #13]
    afec:	2b00      	cmp	r3, #0
    afee:	dae8      	bge.n	afc2 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    aff0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    aff4:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    aff6:	4621      	mov	r1, r4
    aff8:	480a      	ldr	r0, [pc, #40]	; (b024 <z_impl_k_thread_suspend+0x80>)
    affa:	f003 faff 	bl	e5fc <z_priq_dumb_remove>
}
    affe:	e7e0      	b.n	afc2 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    b000:	4b07      	ldr	r3, [pc, #28]	; (b020 <z_impl_k_thread_suspend+0x7c>)
    b002:	689b      	ldr	r3, [r3, #8]
    b004:	42a3      	cmp	r3, r4
    b006:	d000      	beq.n	b00a <z_impl_k_thread_suspend+0x66>
}
    b008:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    b00a:	f04f 0320 	mov.w	r3, #32
    b00e:	f3ef 8011 	mrs	r0, BASEPRI
    b012:	f383 8812 	msr	BASEPRI_MAX, r3
    b016:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    b01a:	f003 fada 	bl	e5d2 <z_reschedule_irqlock>
    b01e:	e7f3      	b.n	b008 <z_impl_k_thread_suspend+0x64>
    b020:	20001ec0 	.word	0x20001ec0
    b024:	20001ee0 	.word	0x20001ee0

0000b028 <k_sched_unlock>:

void k_sched_unlock(void)
{
    b028:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    b02a:	2300      	movs	r3, #0
    b02c:	f04f 0220 	mov.w	r2, #32
    b030:	f3ef 8411 	mrs	r4, BASEPRI
    b034:	f382 8812 	msr	BASEPRI_MAX, r2
    b038:	f3bf 8f6f 	isb	sy
    b03c:	b96b      	cbnz	r3, b05a <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    b03e:	4b0c      	ldr	r3, [pc, #48]	; (b070 <k_sched_unlock+0x48>)
    b040:	689a      	ldr	r2, [r3, #8]
    b042:	7bd3      	ldrb	r3, [r2, #15]
    b044:	3301      	adds	r3, #1
    b046:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    b048:	2000      	movs	r0, #0
    b04a:	f7ff fe07 	bl	ac5c <update_cache>
	__asm__ volatile(
    b04e:	f384 8811 	msr	BASEPRI, r4
    b052:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    b056:	2301      	movs	r3, #1
    b058:	e7f0      	b.n	b03c <k_sched_unlock+0x14>
	__asm__ volatile(
    b05a:	f04f 0320 	mov.w	r3, #32
    b05e:	f3ef 8011 	mrs	r0, BASEPRI
    b062:	f383 8812 	msr	BASEPRI_MAX, r3
    b066:	f3bf 8f6f 	isb	sy
    b06a:	f003 fab2 	bl	e5d2 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    b06e:	bd10      	pop	{r4, pc}
    b070:	20001ec0 	.word	0x20001ec0

0000b074 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    b074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    b076:	7b43      	ldrb	r3, [r0, #13]
    b078:	f013 0f08 	tst.w	r3, #8
    b07c:	d145      	bne.n	b10a <end_thread+0x96>
    b07e:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    b080:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    b084:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b088:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    b08a:	f013 0f80 	tst.w	r3, #128	; 0x80
    b08e:	d114      	bne.n	b0ba <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    b090:	68ab      	ldr	r3, [r5, #8]
    b092:	b15b      	cbz	r3, b0ac <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    b094:	4628      	mov	r0, r5
    b096:	f003 fa71 	bl	e57c <pended_on_thread>
    b09a:	4629      	mov	r1, r5
    b09c:	f003 faae 	bl	e5fc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    b0a0:	7b6b      	ldrb	r3, [r5, #13]
    b0a2:	f023 0302 	bic.w	r3, r3, #2
    b0a6:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    b0a8:	2300      	movs	r3, #0
    b0aa:	60ab      	str	r3, [r5, #8]
    b0ac:	f105 0018 	add.w	r0, r5, #24
    b0b0:	f003 fc26 	bl	e900 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    b0b4:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    b0b8:	e01c      	b.n	b0f4 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b0ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b0be:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    b0c0:	4601      	mov	r1, r0
    b0c2:	4812      	ldr	r0, [pc, #72]	; (b10c <end_thread+0x98>)
    b0c4:	f003 fa9a 	bl	e5fc <z_priq_dumb_remove>
}
    b0c8:	e7e2      	b.n	b090 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    b0ca:	4620      	mov	r0, r4
    b0cc:	f003 fa56 	bl	e57c <pended_on_thread>
    b0d0:	4621      	mov	r1, r4
    b0d2:	f003 fa93 	bl	e5fc <z_priq_dumb_remove>
    b0d6:	7b63      	ldrb	r3, [r4, #13]
    b0d8:	f023 0302 	bic.w	r3, r3, #2
    b0dc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    b0de:	2600      	movs	r6, #0
    b0e0:	60a6      	str	r6, [r4, #8]
    b0e2:	f104 0018 	add.w	r0, r4, #24
    b0e6:	f003 fc0b 	bl	e900 <z_abort_timeout>
    b0ea:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    b0ee:	4620      	mov	r0, r4
    b0f0:	f7ff fe6a 	bl	adc8 <ready_thread>
	return list->head == list;
    b0f4:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b0f6:	42bc      	cmp	r4, r7
    b0f8:	d001      	beq.n	b0fe <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    b0fa:	2c00      	cmp	r4, #0
    b0fc:	d1e5      	bne.n	b0ca <end_thread+0x56>
		update_cache(1);
    b0fe:	2001      	movs	r0, #1
    b100:	f7ff fdac 	bl	ac5c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    b104:	4628      	mov	r0, r5
    b106:	f7ff f94f 	bl	a3a8 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    b10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b10c:	20001ee0 	.word	0x20001ee0

0000b110 <z_sched_init>:
{
    b110:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    b112:	4804      	ldr	r0, [pc, #16]	; (b124 <z_sched_init+0x14>)
    b114:	f003 fba2 	bl	e85c <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    b118:	2100      	movs	r1, #0
    b11a:	4608      	mov	r0, r1
    b11c:	f7ff fd2e 	bl	ab7c <k_sched_time_slice_set>
}
    b120:	bd08      	pop	{r3, pc}
    b122:	bf00      	nop
    b124:	20001edc 	.word	0x20001edc

0000b128 <z_impl_k_yield>:
{
    b128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b12a:	f04f 0320 	mov.w	r3, #32
    b12e:	f3ef 8611 	mrs	r6, BASEPRI
    b132:	f383 8812 	msr	BASEPRI_MAX, r3
    b136:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    b13a:	4c1c      	ldr	r4, [pc, #112]	; (b1ac <z_impl_k_yield+0x84>)
    b13c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b13e:	7b4b      	ldrb	r3, [r1, #13]
    b140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b144:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    b146:	f104 0720 	add.w	r7, r4, #32
    b14a:	4638      	mov	r0, r7
    b14c:	f003 fa56 	bl	e5fc <z_priq_dumb_remove>
	queue_thread(_current);
    b150:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    b152:	7b6b      	ldrb	r3, [r5, #13]
    b154:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b158:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    b15a:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b15c:	42bc      	cmp	r4, r7
    b15e:	d023      	beq.n	b1a8 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b160:	b16c      	cbz	r4, b17e <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b162:	4621      	mov	r1, r4
    b164:	4628      	mov	r0, r5
    b166:	f003 fa0b 	bl	e580 <z_sched_prio_cmp>
    b16a:	2800      	cmp	r0, #0
    b16c:	dc16      	bgt.n	b19c <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b16e:	b134      	cbz	r4, b17e <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    b170:	4b0e      	ldr	r3, [pc, #56]	; (b1ac <z_impl_k_yield+0x84>)
    b172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b174:	429c      	cmp	r4, r3
    b176:	d002      	beq.n	b17e <z_impl_k_yield+0x56>
    b178:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b17a:	2c00      	cmp	r4, #0
    b17c:	d1f0      	bne.n	b160 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    b17e:	4b0b      	ldr	r3, [pc, #44]	; (b1ac <z_impl_k_yield+0x84>)
    b180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    b182:	f103 0120 	add.w	r1, r3, #32
    b186:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    b188:	606a      	str	r2, [r5, #4]
	tail->next = node;
    b18a:	6015      	str	r5, [r2, #0]
	list->tail = node;
    b18c:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    b18e:	2001      	movs	r0, #1
    b190:	f7ff fd64 	bl	ac5c <update_cache>
    b194:	4630      	mov	r0, r6
    b196:	f7f8 fe27 	bl	3de8 <arch_swap>
}
    b19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    b19c:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    b19e:	606b      	str	r3, [r5, #4]
	node->next = successor;
    b1a0:	602c      	str	r4, [r5, #0]
	prev->next = node;
    b1a2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    b1a4:	6065      	str	r5, [r4, #4]
}
    b1a6:	e7f2      	b.n	b18e <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b1a8:	2400      	movs	r4, #0
    b1aa:	e7d9      	b.n	b160 <z_impl_k_yield+0x38>
    b1ac:	20001ec0 	.word	0x20001ec0

0000b1b0 <z_tick_sleep>:
{
    b1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1b4:	4604      	mov	r4, r0
    b1b6:	460d      	mov	r5, r1
	if (ticks == 0) {
    b1b8:	ea54 0105 	orrs.w	r1, r4, r5
    b1bc:	d037      	beq.n	b22e <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    b1be:	f06f 0101 	mvn.w	r1, #1
    b1c2:	1a0a      	subs	r2, r1, r0
    b1c4:	f04f 31ff 	mov.w	r1, #4294967295
    b1c8:	eb61 0305 	sbc.w	r3, r1, r5
    b1cc:	2a01      	cmp	r2, #1
    b1ce:	f173 0300 	sbcs.w	r3, r3, #0
    b1d2:	db30      	blt.n	b236 <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    b1d4:	f06f 0601 	mvn.w	r6, #1
    b1d8:	1a36      	subs	r6, r6, r0
    b1da:	f04f 0320 	mov.w	r3, #32
    b1de:	f3ef 8811 	mrs	r8, BASEPRI
    b1e2:	f383 8812 	msr	BASEPRI_MAX, r3
    b1e6:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    b1ea:	4f16      	ldr	r7, [pc, #88]	; (b244 <z_tick_sleep+0x94>)
    b1ec:	68b8      	ldr	r0, [r7, #8]
    b1ee:	4b16      	ldr	r3, [pc, #88]	; (b248 <z_tick_sleep+0x98>)
    b1f0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    b1f2:	f7ff fe47 	bl	ae84 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    b1f6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    b1f8:	4622      	mov	r2, r4
    b1fa:	462b      	mov	r3, r5
    b1fc:	4913      	ldr	r1, [pc, #76]	; (b24c <z_tick_sleep+0x9c>)
    b1fe:	3018      	adds	r0, #24
    b200:	f000 f904 	bl	b40c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    b204:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    b206:	7b53      	ldrb	r3, [r2, #13]
    b208:	f043 0310 	orr.w	r3, r3, #16
    b20c:	7353      	strb	r3, [r2, #13]
    b20e:	4640      	mov	r0, r8
    b210:	f7f8 fdea 	bl	3de8 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    b214:	2500      	movs	r5, #0
    b216:	f003 fbd2 	bl	e9be <sys_clock_tick_get_32>
    b21a:	1a34      	subs	r4, r6, r0
    b21c:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    b220:	2c01      	cmp	r4, #1
    b222:	f175 0300 	sbcs.w	r3, r5, #0
    b226:	da0a      	bge.n	b23e <z_tick_sleep+0x8e>
	return 0;
    b228:	2000      	movs	r0, #0
}
    b22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    b22e:	f7ff ff7b 	bl	b128 <z_impl_k_yield>
		return 0;
    b232:	2000      	movs	r0, #0
    b234:	e7f9      	b.n	b22a <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    b236:	f003 fbc2 	bl	e9be <sys_clock_tick_get_32>
    b23a:	1906      	adds	r6, r0, r4
    b23c:	e7cd      	b.n	b1da <z_tick_sleep+0x2a>
		return ticks;
    b23e:	4620      	mov	r0, r4
    b240:	e7f3      	b.n	b22a <z_tick_sleep+0x7a>
    b242:	bf00      	nop
    b244:	20001ec0 	.word	0x20001ec0
    b248:	20001ef4 	.word	0x20001ef4
    b24c:	0000e699 	.word	0x0000e699

0000b250 <z_impl_k_sleep>:
{
    b250:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b252:	f1b1 3fff 	cmp.w	r1, #4294967295
    b256:	bf08      	it	eq
    b258:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    b25c:	d01a      	beq.n	b294 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    b25e:	f7ff ffa7 	bl	b1b0 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    b262:	4604      	mov	r4, r0
    b264:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    b266:	0169      	lsls	r1, r5, #5
    b268:	0143      	lsls	r3, r0, #5
    b26a:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    b26e:	1a18      	subs	r0, r3, r0
    b270:	eb62 0305 	sbc.w	r3, r2, r5
    b274:	009a      	lsls	r2, r3, #2
    b276:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    b27a:	0081      	lsls	r1, r0, #2
    b27c:	4613      	mov	r3, r2
    b27e:	1908      	adds	r0, r1, r4
    b280:	eb45 0303 	adc.w	r3, r5, r3
    b284:	00da      	lsls	r2, r3, #3
    b286:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    b28a:	00c1      	lsls	r1, r0, #3
    b28c:	0bc8      	lsrs	r0, r1, #15
    b28e:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    b292:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    b294:	4b03      	ldr	r3, [pc, #12]	; (b2a4 <z_impl_k_sleep+0x54>)
    b296:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    b298:	f7ff fe84 	bl	afa4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    b29c:	f04f 30ff 	mov.w	r0, #4294967295
    b2a0:	e7f7      	b.n	b292 <z_impl_k_sleep+0x42>
    b2a2:	bf00      	nop
    b2a4:	20001ec0 	.word	0x20001ec0

0000b2a8 <z_impl_z_current_get>:
}
    b2a8:	4b01      	ldr	r3, [pc, #4]	; (b2b0 <z_impl_z_current_get+0x8>)
    b2aa:	6898      	ldr	r0, [r3, #8]
    b2ac:	4770      	bx	lr
    b2ae:	bf00      	nop
    b2b0:	20001ec0 	.word	0x20001ec0

0000b2b4 <z_impl_k_is_preempt_thread>:
    b2b4:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
    b2b8:	b933      	cbnz	r3, b2c8 <z_impl_k_is_preempt_thread+0x14>
    b2ba:	4b05      	ldr	r3, [pc, #20]	; (b2d0 <z_impl_k_is_preempt_thread+0x1c>)
    b2bc:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    b2be:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
    b2c0:	2b7f      	cmp	r3, #127	; 0x7f
    b2c2:	d803      	bhi.n	b2cc <z_impl_k_is_preempt_thread+0x18>
    b2c4:	2001      	movs	r0, #1
    b2c6:	4770      	bx	lr
    b2c8:	2000      	movs	r0, #0
    b2ca:	4770      	bx	lr
    b2cc:	2000      	movs	r0, #0
}
    b2ce:	4770      	bx	lr
    b2d0:	20001ec0 	.word	0x20001ec0

0000b2d4 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    b2d4:	b538      	push	{r3, r4, r5, lr}
    b2d6:	f04f 0320 	mov.w	r3, #32
    b2da:	f3ef 8511 	mrs	r5, BASEPRI
    b2de:	f383 8812 	msr	BASEPRI_MAX, r3
    b2e2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    b2e6:	7b43      	ldrb	r3, [r0, #13]
    b2e8:	f013 0f08 	tst.w	r3, #8
    b2ec:	d004      	beq.n	b2f8 <z_thread_abort+0x24>
	__asm__ volatile(
    b2ee:	f385 8811 	msr	BASEPRI, r5
    b2f2:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    b2f6:	bd38      	pop	{r3, r4, r5, pc}
    b2f8:	4604      	mov	r4, r0
	end_thread(thread);
    b2fa:	f7ff febb 	bl	b074 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    b2fe:	4b08      	ldr	r3, [pc, #32]	; (b320 <z_thread_abort+0x4c>)
    b300:	689b      	ldr	r3, [r3, #8]
    b302:	42a3      	cmp	r3, r4
    b304:	d004      	beq.n	b310 <z_thread_abort+0x3c>
    b306:	f385 8811 	msr	BASEPRI, r5
    b30a:	f3bf 8f6f 	isb	sy
    b30e:	e7f2      	b.n	b2f6 <z_thread_abort+0x22>
    b310:	f3ef 8305 	mrs	r3, IPSR
    b314:	2b00      	cmp	r3, #0
    b316:	d1f6      	bne.n	b306 <z_thread_abort+0x32>
    b318:	4628      	mov	r0, r5
    b31a:	f7f8 fd65 	bl	3de8 <arch_swap>
	return ret;
    b31e:	e7f2      	b.n	b306 <z_thread_abort+0x32>
    b320:	20001ec0 	.word	0x20001ec0

0000b324 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    b324:	b5d0      	push	{r4, r6, r7, lr}
    b326:	b082      	sub	sp, #8
    b328:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    b32a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    b32e:	e9cd 6700 	strd	r6, r7, [sp]
    b332:	f7ff fdc3 	bl	aebc <z_pend_curr>

	if (data != NULL) {
    b336:	b11c      	cbz	r4, b340 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
    b338:	4b02      	ldr	r3, [pc, #8]	; (b344 <z_sched_wait+0x20>)
    b33a:	689b      	ldr	r3, [r3, #8]
    b33c:	695b      	ldr	r3, [r3, #20]
    b33e:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    b340:	b002      	add	sp, #8
    b342:	bdd0      	pop	{r4, r6, r7, pc}
    b344:	20001ec0 	.word	0x20001ec0

0000b348 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    b348:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    b34a:	4806      	ldr	r0, [pc, #24]	; (b364 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    b34c:	4a06      	ldr	r2, [pc, #24]	; (b368 <z_data_copy+0x20>)
    b34e:	1a12      	subs	r2, r2, r0
    b350:	4906      	ldr	r1, [pc, #24]	; (b36c <z_data_copy+0x24>)
    b352:	f002 f93d 	bl	d5d0 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    b356:	4a06      	ldr	r2, [pc, #24]	; (b370 <z_data_copy+0x28>)
    b358:	4906      	ldr	r1, [pc, #24]	; (b374 <z_data_copy+0x2c>)
    b35a:	4807      	ldr	r0, [pc, #28]	; (b378 <z_data_copy+0x30>)
    b35c:	f002 f938 	bl	d5d0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    b360:	bd08      	pop	{r3, pc}
    b362:	bf00      	nop
    b364:	20000000 	.word	0x20000000
    b368:	20000558 	.word	0x20000558
    b36c:	00010298 	.word	0x00010298
    b370:	00000000 	.word	0x00000000
    b374:	00010298 	.word	0x00010298
    b378:	20000000 	.word	0x20000000

0000b37c <first>:
	return list->head == list;
    b37c:	4b03      	ldr	r3, [pc, #12]	; (b38c <first+0x10>)
    b37e:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b380:	4298      	cmp	r0, r3
    b382:	d000      	beq.n	b386 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    b384:	4770      	bx	lr
    b386:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    b388:	e7fc      	b.n	b384 <first+0x8>
    b38a:	bf00      	nop
    b38c:	200002d4 	.word	0x200002d4

0000b390 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b390:	b130      	cbz	r0, b3a0 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    b392:	4a04      	ldr	r2, [pc, #16]	; (b3a4 <next+0x14>)
    b394:	6852      	ldr	r2, [r2, #4]
    b396:	4290      	cmp	r0, r2
    b398:	d001      	beq.n	b39e <next+0xe>
    b39a:	6800      	ldr	r0, [r0, #0]
    b39c:	4770      	bx	lr
    b39e:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    b3a0:	4770      	bx	lr
    b3a2:	bf00      	nop
    b3a4:	200002d4 	.word	0x200002d4

0000b3a8 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    b3a8:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    b3aa:	4b04      	ldr	r3, [pc, #16]	; (b3bc <elapsed+0x14>)
    b3ac:	681b      	ldr	r3, [r3, #0]
    b3ae:	b10b      	cbz	r3, b3b4 <elapsed+0xc>
    b3b0:	2000      	movs	r0, #0
}
    b3b2:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    b3b4:	f7fb ff2c 	bl	7210 <sys_clock_elapsed>
    b3b8:	e7fb      	b.n	b3b2 <elapsed+0xa>
    b3ba:	bf00      	nop
    b3bc:	20001f00 	.word	0x20001f00

0000b3c0 <next_timeout>:

static int32_t next_timeout(void)
{
    b3c0:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    b3c2:	f7ff ffdb 	bl	b37c <first>
    b3c6:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    b3c8:	f7ff ffee 	bl	b3a8 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    b3cc:	b18c      	cbz	r4, b3f2 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    b3ce:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    b3d2:	1a12      	subs	r2, r2, r0
    b3d4:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    b3d8:	2a01      	cmp	r2, #1
    b3da:	f173 0100 	sbcs.w	r1, r3, #0
    b3de:	db11      	blt.n	b404 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    b3e0:	4610      	mov	r0, r2
    b3e2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b3e6:	f173 0300 	sbcs.w	r3, r3, #0
    b3ea:	db04      	blt.n	b3f6 <next_timeout+0x36>
    b3ec:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    b3f0:	e001      	b.n	b3f6 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    b3f2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    b3f6:	4b04      	ldr	r3, [pc, #16]	; (b408 <next_timeout+0x48>)
    b3f8:	691b      	ldr	r3, [r3, #16]
    b3fa:	b113      	cbz	r3, b402 <next_timeout+0x42>
    b3fc:	4283      	cmp	r3, r0
    b3fe:	da00      	bge.n	b402 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    b400:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    b402:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    b404:	2000      	movs	r0, #0
    b406:	e7f6      	b.n	b3f6 <next_timeout+0x36>
    b408:	20001ec0 	.word	0x20001ec0

0000b40c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    b40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b410:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b412:	f1b3 3fff 	cmp.w	r3, #4294967295
    b416:	bf08      	it	eq
    b418:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    b41c:	f000 8096 	beq.w	b54c <z_add_timeout+0x140>
    b420:	4682      	mov	sl, r0
    b422:	4614      	mov	r4, r2
    b424:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    b426:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    b428:	2300      	movs	r3, #0
	__asm__ volatile(
    b42a:	f04f 0220 	mov.w	r2, #32
    b42e:	f3ef 8b11 	mrs	fp, BASEPRI
    b432:	f382 8812 	msr	BASEPRI_MAX, r2
    b436:	f3bf 8f6f 	isb	sy
    b43a:	e02e      	b.n	b49a <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    b43c:	2201      	movs	r2, #1
    b43e:	2300      	movs	r3, #0
    b440:	e04b      	b.n	b4da <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    b442:	f7ff ffb1 	bl	b3a8 <elapsed>
    b446:	1822      	adds	r2, r4, r0
    b448:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
    b44c:	3201      	adds	r2, #1
    b44e:	f143 0300 	adc.w	r3, r3, #0
    b452:	f8ca 2010 	str.w	r2, [sl, #16]
    b456:	f8ca 3014 	str.w	r3, [sl, #20]
    b45a:	e042      	b.n	b4e2 <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    b45c:	9b00      	ldr	r3, [sp, #0]
    b45e:	1ac2      	subs	r2, r0, r3
    b460:	9b01      	ldr	r3, [sp, #4]
    b462:	eb61 0303 	sbc.w	r3, r1, r3
    b466:	f8cc 2010 	str.w	r2, [ip, #16]
    b46a:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
    b46e:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
    b472:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
    b476:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
    b47a:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
    b47e:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    b482:	f1bc 0f00 	cmp.w	ip, #0
    b486:	d049      	beq.n	b51c <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    b488:	f7ff ff78 	bl	b37c <first>
    b48c:	4582      	cmp	sl, r0
    b48e:	d050      	beq.n	b532 <z_add_timeout+0x126>
	__asm__ volatile(
    b490:	f38b 8811 	msr	BASEPRI, fp
    b494:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    b498:	2301      	movs	r3, #1
    b49a:	2b00      	cmp	r3, #0
    b49c:	d156      	bne.n	b54c <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    b49e:	f06f 0301 	mvn.w	r3, #1
    b4a2:	ebb3 0804 	subs.w	r8, r3, r4
    b4a6:	f04f 30ff 	mov.w	r0, #4294967295
    b4aa:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    b4ae:	f1b8 0f00 	cmp.w	r8, #0
    b4b2:	f179 0300 	sbcs.w	r3, r9, #0
    b4b6:	dbc4      	blt.n	b442 <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    b4b8:	4a26      	ldr	r2, [pc, #152]	; (b554 <z_add_timeout+0x148>)
    b4ba:	6813      	ldr	r3, [r2, #0]
    b4bc:	6852      	ldr	r2, [r2, #4]
    b4be:	18e3      	adds	r3, r4, r3
    b4c0:	eb45 0202 	adc.w	r2, r5, r2
    b4c4:	f06f 0101 	mvn.w	r1, #1
    b4c8:	1ace      	subs	r6, r1, r3
    b4ca:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
    b4ce:	4632      	mov	r2, r6
    b4d0:	463b      	mov	r3, r7
    b4d2:	2e01      	cmp	r6, #1
    b4d4:	f177 0100 	sbcs.w	r1, r7, #0
    b4d8:	dbb0      	blt.n	b43c <z_add_timeout+0x30>
    b4da:	f8ca 2010 	str.w	r2, [sl, #16]
    b4de:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    b4e2:	f7ff ff4b 	bl	b37c <first>
    b4e6:	4684      	mov	ip, r0
    b4e8:	f1bc 0f00 	cmp.w	ip, #0
    b4ec:	d0c9      	beq.n	b482 <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
    b4ee:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
    b4f2:	e9da 2304 	ldrd	r2, r3, [sl, #16]
    b4f6:	e9cd 2300 	strd	r2, r3, [sp]
    b4fa:	4282      	cmp	r2, r0
    b4fc:	418b      	sbcs	r3, r1
    b4fe:	dbad      	blt.n	b45c <z_add_timeout+0x50>
			to->dticks -= t->dticks;
    b500:	9b00      	ldr	r3, [sp, #0]
    b502:	1a1a      	subs	r2, r3, r0
    b504:	9b01      	ldr	r3, [sp, #4]
    b506:	eb63 0301 	sbc.w	r3, r3, r1
    b50a:	f8ca 2010 	str.w	r2, [sl, #16]
    b50e:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    b512:	4660      	mov	r0, ip
    b514:	f7ff ff3c 	bl	b390 <next>
    b518:	4684      	mov	ip, r0
    b51a:	e7e5      	b.n	b4e8 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
    b51c:	4b0e      	ldr	r3, [pc, #56]	; (b558 <z_add_timeout+0x14c>)
    b51e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    b520:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
    b524:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
    b528:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    b52c:	f8c3 a004 	str.w	sl, [r3, #4]
}
    b530:	e7aa      	b.n	b488 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    b532:	f7ff ff45 	bl	b3c0 <next_timeout>

			if (next_time == 0 ||
    b536:	4603      	mov	r3, r0
    b538:	b118      	cbz	r0, b542 <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
    b53a:	4a08      	ldr	r2, [pc, #32]	; (b55c <z_add_timeout+0x150>)
    b53c:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    b53e:	4282      	cmp	r2, r0
    b540:	d0a6      	beq.n	b490 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
    b542:	2100      	movs	r1, #0
    b544:	4618      	mov	r0, r3
    b546:	f7fb fe2f 	bl	71a8 <sys_clock_set_timeout>
    b54a:	e7a1      	b.n	b490 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    b54c:	b003      	add	sp, #12
    b54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b552:	bf00      	nop
    b554:	20000960 	.word	0x20000960
    b558:	200002d4 	.word	0x200002d4
    b55c:	20001ec0 	.word	0x20001ec0

0000b560 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    b560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b562:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    b564:	f7ff fbe4 	bl	ad30 <z_time_slice>
	__asm__ volatile(
    b568:	f04f 0320 	mov.w	r3, #32
    b56c:	f3ef 8511 	mrs	r5, BASEPRI
    b570:	f383 8812 	msr	BASEPRI_MAX, r3
    b574:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    b578:	4b28      	ldr	r3, [pc, #160]	; (b61c <sys_clock_announce+0xbc>)
    b57a:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    b57c:	f7ff fefe 	bl	b37c <first>
    b580:	4604      	mov	r4, r0
    b582:	b350      	cbz	r0, b5da <sys_clock_announce+0x7a>
    b584:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    b588:	4b24      	ldr	r3, [pc, #144]	; (b61c <sys_clock_announce+0xbc>)
    b58a:	681b      	ldr	r3, [r3, #0]
    b58c:	17d9      	asrs	r1, r3, #31
    b58e:	42b3      	cmp	r3, r6
    b590:	eb71 0207 	sbcs.w	r2, r1, r7
    b594:	db21      	blt.n	b5da <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    b596:	4a22      	ldr	r2, [pc, #136]	; (b620 <sys_clock_announce+0xc0>)
    b598:	e9d2 0100 	ldrd	r0, r1, [r2]
    b59c:	1980      	adds	r0, r0, r6
    b59e:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    b5a2:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
    b5a6:	1b9b      	subs	r3, r3, r6
    b5a8:	4a1c      	ldr	r2, [pc, #112]	; (b61c <sys_clock_announce+0xbc>)
    b5aa:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    b5ac:	2200      	movs	r2, #0
    b5ae:	2300      	movs	r3, #0
    b5b0:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    b5b4:	4620      	mov	r0, r4
    b5b6:	f003 f98c 	bl	e8d2 <remove_timeout>
	__asm__ volatile(
    b5ba:	f385 8811 	msr	BASEPRI, r5
    b5be:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    b5c2:	68a3      	ldr	r3, [r4, #8]
    b5c4:	4620      	mov	r0, r4
    b5c6:	4798      	blx	r3
	__asm__ volatile(
    b5c8:	f04f 0320 	mov.w	r3, #32
    b5cc:	f3ef 8511 	mrs	r5, BASEPRI
    b5d0:	f383 8812 	msr	BASEPRI_MAX, r3
    b5d4:	f3bf 8f6f 	isb	sy
    b5d8:	e7d0      	b.n	b57c <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    b5da:	b144      	cbz	r4, b5ee <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    b5dc:	4b0f      	ldr	r3, [pc, #60]	; (b61c <sys_clock_announce+0xbc>)
    b5de:	6819      	ldr	r1, [r3, #0]
    b5e0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    b5e4:	1a52      	subs	r2, r2, r1
    b5e6:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    b5ea:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
    b5ee:	480c      	ldr	r0, [pc, #48]	; (b620 <sys_clock_announce+0xc0>)
    b5f0:	490a      	ldr	r1, [pc, #40]	; (b61c <sys_clock_announce+0xbc>)
    b5f2:	680c      	ldr	r4, [r1, #0]
    b5f4:	e9d0 2300 	ldrd	r2, r3, [r0]
    b5f8:	1912      	adds	r2, r2, r4
    b5fa:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    b5fe:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    b602:	2400      	movs	r4, #0
    b604:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
    b606:	f7ff fedb 	bl	b3c0 <next_timeout>
    b60a:	4621      	mov	r1, r4
    b60c:	f7fb fdcc 	bl	71a8 <sys_clock_set_timeout>
	__asm__ volatile(
    b610:	f385 8811 	msr	BASEPRI, r5
    b614:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    b618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b61a:	bf00      	nop
    b61c:	20001f00 	.word	0x20001f00
    b620:	20000960 	.word	0x20000960

0000b624 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    b624:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    b626:	2100      	movs	r1, #0
	__asm__ volatile(
    b628:	f04f 0320 	mov.w	r3, #32
    b62c:	f3ef 8411 	mrs	r4, BASEPRI
    b630:	f383 8812 	msr	BASEPRI_MAX, r3
    b634:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    b638:	2200      	movs	r2, #0
    b63a:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
    b63c:	b969      	cbnz	r1, b65a <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
    b63e:	f7fb fde7 	bl	7210 <sys_clock_elapsed>
    b642:	4b07      	ldr	r3, [pc, #28]	; (b660 <sys_clock_tick_get+0x3c>)
    b644:	e9d3 2300 	ldrd	r2, r3, [r3]
    b648:	1812      	adds	r2, r2, r0
    b64a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    b64e:	f384 8811 	msr	BASEPRI, r4
    b652:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    b656:	2101      	movs	r1, #1
    b658:	e7f0      	b.n	b63c <sys_clock_tick_get+0x18>
	}
	return t;
}
    b65a:	4610      	mov	r0, r2
    b65c:	4619      	mov	r1, r3
    b65e:	bd10      	pop	{r4, pc}
    b660:	20000960 	.word	0x20000960

0000b664 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    b664:	b570      	push	{r4, r5, r6, lr}
    b666:	4604      	mov	r4, r0
	__asm__ volatile(
    b668:	f04f 0320 	mov.w	r3, #32
    b66c:	f3ef 8611 	mrs	r6, BASEPRI
    b670:	f383 8812 	msr	BASEPRI_MAX, r3
    b674:	f3bf 8f6f 	isb	sy
    b678:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    b67a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    b67e:	ea52 0103 	orrs.w	r1, r2, r3
    b682:	d005      	beq.n	b690 <z_timer_expiration_handler+0x2c>
    b684:	f1b3 3fff 	cmp.w	r3, #4294967295
    b688:	bf08      	it	eq
    b68a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    b68e:	d127      	bne.n	b6e0 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    b690:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b692:	3301      	adds	r3, #1
    b694:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    b696:	6a23      	ldr	r3, [r4, #32]
    b698:	b173      	cbz	r3, b6b8 <z_timer_expiration_handler+0x54>
	__asm__ volatile(
    b69a:	f386 8811 	msr	BASEPRI, r6
    b69e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    b6a2:	6a23      	ldr	r3, [r4, #32]
    b6a4:	4620      	mov	r0, r4
    b6a6:	4798      	blx	r3
	__asm__ volatile(
    b6a8:	f04f 0320 	mov.w	r3, #32
    b6ac:	f3ef 8511 	mrs	r5, BASEPRI
    b6b0:	f383 8812 	msr	BASEPRI_MAX, r3
    b6b4:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    b6b8:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    b6bc:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b6be:	42a3      	cmp	r3, r4
    b6c0:	d012      	beq.n	b6e8 <z_timer_expiration_handler+0x84>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    b6c2:	b18c      	cbz	r4, b6e8 <z_timer_expiration_handler+0x84>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    b6c4:	4620      	mov	r0, r4
    b6c6:	f002 ff65 	bl	e594 <z_unpend_thread_no_timeout>
    b6ca:	2300      	movs	r3, #0
    b6cc:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
    b6d0:	f385 8811 	msr	BASEPRI, r5
    b6d4:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    b6d8:	4620      	mov	r0, r4
    b6da:	f002 ffc1 	bl	e660 <z_ready_thread>
}
    b6de:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b6e0:	4904      	ldr	r1, [pc, #16]	; (b6f4 <z_timer_expiration_handler+0x90>)
    b6e2:	f7ff fe93 	bl	b40c <z_add_timeout>
    b6e6:	e7d3      	b.n	b690 <z_timer_expiration_handler+0x2c>
    b6e8:	f385 8811 	msr	BASEPRI, r5
    b6ec:	f3bf 8f6f 	isb	sy
		return;
    b6f0:	e7f5      	b.n	b6de <z_timer_expiration_handler+0x7a>
    b6f2:	bf00      	nop
    b6f4:	0000b665 	.word	0x0000b665

0000b6f8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    b6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b6fc:	b087      	sub	sp, #28
    b6fe:	4614      	mov	r4, r2
    b700:	461d      	mov	r5, r3
    b702:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    b706:	f1b3 3fff 	cmp.w	r3, #4294967295
    b70a:	bf08      	it	eq
    b70c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    b710:	d035      	beq.n	b77e <z_impl_k_timer_start+0x86>
    b712:	4606      	mov	r6, r0
    b714:	4613      	mov	r3, r2
    b716:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    b718:	f1b9 3fff 	cmp.w	r9, #4294967295
    b71c:	bf08      	it	eq
    b71e:	f1b8 3fff 	cmpeq.w	r8, #4294967295
    b722:	d012      	beq.n	b74a <z_impl_k_timer_start+0x52>
    b724:	ea58 0109 	orrs.w	r1, r8, r9
    b728:	d00f      	beq.n	b74a <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
    b72a:	f06f 0701 	mvn.w	r7, #1
    b72e:	ebb7 0708 	subs.w	r7, r7, r8
    b732:	9702      	str	r7, [sp, #8]
    b734:	f04f 31ff 	mov.w	r1, #4294967295
    b738:	eb61 0709 	sbc.w	r7, r1, r9
    b73c:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    b73e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b742:	2800      	cmp	r0, #0
    b744:	f171 0100 	sbcs.w	r1, r1, #0
    b748:	db1c      	blt.n	b784 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    b74a:	f06f 0101 	mvn.w	r1, #1
    b74e:	ebb1 0a03 	subs.w	sl, r1, r3
    b752:	f04f 31ff 	mov.w	r1, #4294967295
    b756:	eb61 0b02 	sbc.w	fp, r1, r2
    b75a:	f1ba 0f00 	cmp.w	sl, #0
    b75e:	f17b 0100 	sbcs.w	r1, fp, #0
    b762:	db23      	blt.n	b7ac <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    b764:	4630      	mov	r0, r6
    b766:	f003 f8cb 	bl	e900 <z_abort_timeout>
	timer->period = period;
    b76a:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
    b76e:	2300      	movs	r3, #0
    b770:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b772:	4622      	mov	r2, r4
    b774:	462b      	mov	r3, r5
    b776:	4917      	ldr	r1, [pc, #92]	; (b7d4 <z_impl_k_timer_start+0xdc>)
    b778:	4630      	mov	r0, r6
    b77a:	f7ff fe47 	bl	b40c <z_add_timeout>
		     duration);
}
    b77e:	b007      	add	sp, #28
    b780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    b784:	f118 31ff 	adds.w	r1, r8, #4294967295
    b788:	9104      	str	r1, [sp, #16]
    b78a:	f149 31ff 	adc.w	r1, r9, #4294967295
    b78e:	9105      	str	r1, [sp, #20]
    b790:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
    b794:	4638      	mov	r0, r7
    b796:	4641      	mov	r1, r8
    b798:	2f01      	cmp	r7, #1
    b79a:	f178 0700 	sbcs.w	r7, r8, #0
    b79e:	db02      	blt.n	b7a6 <z_impl_k_timer_start+0xae>
    b7a0:	4680      	mov	r8, r0
    b7a2:	4689      	mov	r9, r1
    b7a4:	e7d1      	b.n	b74a <z_impl_k_timer_start+0x52>
    b7a6:	2001      	movs	r0, #1
    b7a8:	2100      	movs	r1, #0
    b7aa:	e7f9      	b.n	b7a0 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
    b7ac:	f113 33ff 	adds.w	r3, r3, #4294967295
    b7b0:	9300      	str	r3, [sp, #0]
    b7b2:	f142 33ff 	adc.w	r3, r2, #4294967295
    b7b6:	9301      	str	r3, [sp, #4]
    b7b8:	e9dd 0100 	ldrd	r0, r1, [sp]
    b7bc:	4602      	mov	r2, r0
    b7be:	460b      	mov	r3, r1
    b7c0:	2800      	cmp	r0, #0
    b7c2:	f171 0100 	sbcs.w	r1, r1, #0
    b7c6:	db02      	blt.n	b7ce <z_impl_k_timer_start+0xd6>
    b7c8:	4614      	mov	r4, r2
    b7ca:	461d      	mov	r5, r3
    b7cc:	e7ca      	b.n	b764 <z_impl_k_timer_start+0x6c>
    b7ce:	2200      	movs	r2, #0
    b7d0:	4613      	mov	r3, r2
    b7d2:	e7f9      	b.n	b7c8 <z_impl_k_timer_start+0xd0>
    b7d4:	0000b665 	.word	0x0000b665

0000b7d8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    b7d8:	b538      	push	{r3, r4, r5, lr}
    b7da:	4604      	mov	r4, r0
    b7dc:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    b7de:	f002 fdb1 	bl	e344 <k_is_in_isr>
    b7e2:	b948      	cbnz	r0, b7f8 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    b7e4:	4b05      	ldr	r3, [pc, #20]	; (b7fc <z_thread_aligned_alloc+0x24>)
    b7e6:	689b      	ldr	r3, [r3, #8]
    b7e8:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
	}

	if (heap != NULL) {
    b7ec:	b118      	cbz	r0, b7f6 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
    b7ee:	462a      	mov	r2, r5
    b7f0:	4621      	mov	r1, r4
    b7f2:	f003 f945 	bl	ea80 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
    b7f6:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
    b7f8:	2000      	movs	r0, #0
	return ret;
    b7fa:	e7fc      	b.n	b7f6 <z_thread_aligned_alloc+0x1e>
    b7fc:	20001ec0 	.word	0x20001ec0

0000b800 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    b800:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    b802:	4a03      	ldr	r2, [pc, #12]	; (b810 <boot_banner+0x10>)
    b804:	4903      	ldr	r1, [pc, #12]	; (b814 <boot_banner+0x14>)
    b806:	4804      	ldr	r0, [pc, #16]	; (b818 <boot_banner+0x18>)
    b808:	f000 f9e2 	bl	bbd0 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    b80c:	bd08      	pop	{r3, pc}
    b80e:	bf00      	nop
    b810:	0000f0b8 	.word	0x0000f0b8
    b814:	000101c8 	.word	0x000101c8
    b818:	000101d8 	.word	0x000101d8

0000b81c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    b81c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b81e:	4c06      	ldr	r4, [pc, #24]	; (b838 <statics_init+0x1c>)
    b820:	4b06      	ldr	r3, [pc, #24]	; (b83c <statics_init+0x20>)
    b822:	429c      	cmp	r4, r3
    b824:	d206      	bcs.n	b834 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    b826:	68a2      	ldr	r2, [r4, #8]
    b828:	6861      	ldr	r1, [r4, #4]
    b82a:	4620      	mov	r0, r4
    b82c:	f003 f94b 	bl	eac6 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b830:	3414      	adds	r4, #20
    b832:	e7f5      	b.n	b820 <statics_init+0x4>
		}
	}
	return 0;
}
    b834:	2000      	movs	r0, #0
    b836:	bd10      	pop	{r4, pc}
    b838:	20000374 	.word	0x20000374
    b83c:	20000374 	.word	0x20000374

0000b840 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    b840:	b510      	push	{r4, lr}
    b842:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    b844:	4b08      	ldr	r3, [pc, #32]	; (b868 <k_sys_work_q_init+0x28>)
    b846:	9302      	str	r3, [sp, #8]
    b848:	2400      	movs	r4, #0
    b84a:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    b84e:	ab02      	add	r3, sp, #8
    b850:	9300      	str	r3, [sp, #0]
    b852:	f04f 33ff 	mov.w	r3, #4294967295
    b856:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b85a:	4904      	ldr	r1, [pc, #16]	; (b86c <k_sys_work_q_init+0x2c>)
    b85c:	4804      	ldr	r0, [pc, #16]	; (b870 <k_sys_work_q_init+0x30>)
    b85e:	f7ff f929 	bl	aab4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    b862:	4620      	mov	r0, r4
    b864:	b004      	add	sp, #16
    b866:	bd10      	pop	{r4, pc}
    b868:	00010200 	.word	0x00010200
    b86c:	20003928 	.word	0x20003928
    b870:	20000968 	.word	0x20000968

0000b874 <nrf_cc3xx_platform_init_no_rng>:
    b874:	b510      	push	{r4, lr}
    b876:	4c0a      	ldr	r4, [pc, #40]	; (b8a0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    b878:	6823      	ldr	r3, [r4, #0]
    b87a:	b11b      	cbz	r3, b884 <nrf_cc3xx_platform_init_no_rng+0x10>
    b87c:	2301      	movs	r3, #1
    b87e:	2000      	movs	r0, #0
    b880:	6023      	str	r3, [r4, #0]
    b882:	bd10      	pop	{r4, pc}
    b884:	f000 f8d4 	bl	ba30 <CC_LibInitNoRng>
    b888:	2800      	cmp	r0, #0
    b88a:	d0f7      	beq.n	b87c <nrf_cc3xx_platform_init_no_rng+0x8>
    b88c:	3801      	subs	r0, #1
    b88e:	2807      	cmp	r0, #7
    b890:	d803      	bhi.n	b89a <nrf_cc3xx_platform_init_no_rng+0x26>
    b892:	4b04      	ldr	r3, [pc, #16]	; (b8a4 <nrf_cc3xx_platform_init_no_rng+0x30>)
    b894:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b898:	bd10      	pop	{r4, pc}
    b89a:	4803      	ldr	r0, [pc, #12]	; (b8a8 <nrf_cc3xx_platform_init_no_rng+0x34>)
    b89c:	bd10      	pop	{r4, pc}
    b89e:	bf00      	nop
    b8a0:	20001f04 	.word	0x20001f04
    b8a4:	0001020c 	.word	0x0001020c
    b8a8:	ffff8ffe 	.word	0xffff8ffe

0000b8ac <nrf_cc3xx_platform_abort>:
    b8ac:	f3bf 8f4f 	dsb	sy
    b8b0:	4905      	ldr	r1, [pc, #20]	; (b8c8 <nrf_cc3xx_platform_abort+0x1c>)
    b8b2:	4b06      	ldr	r3, [pc, #24]	; (b8cc <nrf_cc3xx_platform_abort+0x20>)
    b8b4:	68ca      	ldr	r2, [r1, #12]
    b8b6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    b8ba:	4313      	orrs	r3, r2
    b8bc:	60cb      	str	r3, [r1, #12]
    b8be:	f3bf 8f4f 	dsb	sy
    b8c2:	bf00      	nop
    b8c4:	e7fd      	b.n	b8c2 <nrf_cc3xx_platform_abort+0x16>
    b8c6:	bf00      	nop
    b8c8:	e000ed00 	.word	0xe000ed00
    b8cc:	05fa0004 	.word	0x05fa0004

0000b8d0 <CC_PalAbort>:
    b8d0:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    b8d4:	2100      	movs	r1, #0
    b8d6:	b430      	push	{r4, r5}
    b8d8:	4a08      	ldr	r2, [pc, #32]	; (b8fc <CC_PalAbort+0x2c>)
    b8da:	4c09      	ldr	r4, [pc, #36]	; (b900 <CC_PalAbort+0x30>)
    b8dc:	4d09      	ldr	r5, [pc, #36]	; (b904 <CC_PalAbort+0x34>)
    b8de:	6023      	str	r3, [r4, #0]
    b8e0:	602b      	str	r3, [r5, #0]
    b8e2:	6013      	str	r3, [r2, #0]
    b8e4:	60e3      	str	r3, [r4, #12]
    b8e6:	60eb      	str	r3, [r5, #12]
    b8e8:	60d3      	str	r3, [r2, #12]
    b8ea:	61a3      	str	r3, [r4, #24]
    b8ec:	4a06      	ldr	r2, [pc, #24]	; (b908 <CC_PalAbort+0x38>)
    b8ee:	4c07      	ldr	r4, [pc, #28]	; (b90c <CC_PalAbort+0x3c>)
    b8f0:	61ab      	str	r3, [r5, #24]
    b8f2:	6863      	ldr	r3, [r4, #4]
    b8f4:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    b8f8:	bc30      	pop	{r4, r5}
    b8fa:	4718      	bx	r3
    b8fc:	50845408 	.word	0x50845408
    b900:	50845400 	.word	0x50845400
    b904:	50845404 	.word	0x50845404
    b908:	50844000 	.word	0x50844000
    b90c:	200002dc 	.word	0x200002dc

0000b910 <nrf_cc3xx_platform_set_abort>:
    b910:	4b02      	ldr	r3, [pc, #8]	; (b91c <nrf_cc3xx_platform_set_abort+0xc>)
    b912:	e9d0 1200 	ldrd	r1, r2, [r0]
    b916:	e9c3 1200 	strd	r1, r2, [r3]
    b91a:	4770      	bx	lr
    b91c:	200002dc 	.word	0x200002dc

0000b920 <mutex_free>:
    b920:	b510      	push	{r4, lr}
    b922:	4604      	mov	r4, r0
    b924:	b130      	cbz	r0, b934 <mutex_free+0x14>
    b926:	6863      	ldr	r3, [r4, #4]
    b928:	06db      	lsls	r3, r3, #27
    b92a:	d502      	bpl.n	b932 <mutex_free+0x12>
    b92c:	2300      	movs	r3, #0
    b92e:	6023      	str	r3, [r4, #0]
    b930:	6063      	str	r3, [r4, #4]
    b932:	bd10      	pop	{r4, pc}
    b934:	4b02      	ldr	r3, [pc, #8]	; (b940 <mutex_free+0x20>)
    b936:	4803      	ldr	r0, [pc, #12]	; (b944 <mutex_free+0x24>)
    b938:	685b      	ldr	r3, [r3, #4]
    b93a:	4798      	blx	r3
    b93c:	e7f3      	b.n	b926 <mutex_free+0x6>
    b93e:	bf00      	nop
    b940:	200002dc 	.word	0x200002dc
    b944:	0001022c 	.word	0x0001022c

0000b948 <mutex_unlock>:
    b948:	b168      	cbz	r0, b966 <mutex_unlock+0x1e>
    b94a:	6843      	ldr	r3, [r0, #4]
    b94c:	b13b      	cbz	r3, b95e <mutex_unlock+0x16>
    b94e:	06db      	lsls	r3, r3, #27
    b950:	d507      	bpl.n	b962 <mutex_unlock+0x1a>
    b952:	f3bf 8f5f 	dmb	sy
    b956:	2300      	movs	r3, #0
    b958:	6003      	str	r3, [r0, #0]
    b95a:	4618      	mov	r0, r3
    b95c:	4770      	bx	lr
    b95e:	4803      	ldr	r0, [pc, #12]	; (b96c <mutex_unlock+0x24>)
    b960:	4770      	bx	lr
    b962:	4803      	ldr	r0, [pc, #12]	; (b970 <mutex_unlock+0x28>)
    b964:	4770      	bx	lr
    b966:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    b96a:	4770      	bx	lr
    b96c:	ffff8fea 	.word	0xffff8fea
    b970:	ffff8fe9 	.word	0xffff8fe9

0000b974 <mutex_init>:
    b974:	b510      	push	{r4, lr}
    b976:	4604      	mov	r4, r0
    b978:	b120      	cbz	r0, b984 <mutex_init+0x10>
    b97a:	2200      	movs	r2, #0
    b97c:	2311      	movs	r3, #17
    b97e:	6022      	str	r2, [r4, #0]
    b980:	6063      	str	r3, [r4, #4]
    b982:	bd10      	pop	{r4, pc}
    b984:	4801      	ldr	r0, [pc, #4]	; (b98c <mutex_init+0x18>)
    b986:	f7ff ffa3 	bl	b8d0 <CC_PalAbort>
    b98a:	e7f6      	b.n	b97a <mutex_init+0x6>
    b98c:	00010254 	.word	0x00010254

0000b990 <mutex_lock>:
    b990:	b1a0      	cbz	r0, b9bc <mutex_lock+0x2c>
    b992:	6843      	ldr	r3, [r0, #4]
    b994:	b183      	cbz	r3, b9b8 <mutex_lock+0x28>
    b996:	06db      	lsls	r3, r3, #27
    b998:	d50c      	bpl.n	b9b4 <mutex_lock+0x24>
    b99a:	2201      	movs	r2, #1
    b99c:	e8d0 3fef 	ldaex	r3, [r0]
    b9a0:	e8c0 2fe1 	stlex	r1, r2, [r0]
    b9a4:	2900      	cmp	r1, #0
    b9a6:	d1f9      	bne.n	b99c <mutex_lock+0xc>
    b9a8:	2b01      	cmp	r3, #1
    b9aa:	d0f7      	beq.n	b99c <mutex_lock+0xc>
    b9ac:	f3bf 8f5f 	dmb	sy
    b9b0:	2000      	movs	r0, #0
    b9b2:	4770      	bx	lr
    b9b4:	4803      	ldr	r0, [pc, #12]	; (b9c4 <mutex_lock+0x34>)
    b9b6:	4770      	bx	lr
    b9b8:	4803      	ldr	r0, [pc, #12]	; (b9c8 <mutex_lock+0x38>)
    b9ba:	4770      	bx	lr
    b9bc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    b9c0:	4770      	bx	lr
    b9c2:	bf00      	nop
    b9c4:	ffff8fe9 	.word	0xffff8fe9
    b9c8:	ffff8fea 	.word	0xffff8fea

0000b9cc <nrf_cc3xx_platform_set_mutexes>:
    b9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9d0:	4c14      	ldr	r4, [pc, #80]	; (ba24 <nrf_cc3xx_platform_set_mutexes+0x58>)
    b9d2:	6802      	ldr	r2, [r0, #0]
    b9d4:	68c3      	ldr	r3, [r0, #12]
    b9d6:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
    b9da:	e9c4 6302 	strd	r6, r3, [r4, #8]
    b9de:	e9c4 2500 	strd	r2, r5, [r4]
    b9e2:	4b11      	ldr	r3, [pc, #68]	; (ba28 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    b9e4:	680e      	ldr	r6, [r1, #0]
    b9e6:	6848      	ldr	r0, [r1, #4]
    b9e8:	4d10      	ldr	r5, [pc, #64]	; (ba2c <nrf_cc3xx_platform_set_mutexes+0x60>)
    b9ea:	e9c3 6000 	strd	r6, r0, [r3]
    b9ee:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
    b9f2:	6908      	ldr	r0, [r1, #16]
    b9f4:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    b9f8:	e9c3 7602 	strd	r7, r6, [r3, #8]
    b9fc:	6118      	str	r0, [r3, #16]
    b9fe:	06cb      	lsls	r3, r1, #27
    ba00:	d50d      	bpl.n	ba1e <nrf_cc3xx_platform_set_mutexes+0x52>
    ba02:	2300      	movs	r3, #0
    ba04:	f505 7088 	add.w	r0, r5, #272	; 0x110
    ba08:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    ba0c:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    ba10:	4790      	blx	r2
    ba12:	6823      	ldr	r3, [r4, #0]
    ba14:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    ba18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ba1c:	4718      	bx	r3
    ba1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba22:	bf00      	nop
    ba24:	200002ec 	.word	0x200002ec
    ba28:	200002fc 	.word	0x200002fc
    ba2c:	20001f28 	.word	0x20001f28

0000ba30 <CC_LibInitNoRng>:
    ba30:	b508      	push	{r3, lr}
    ba32:	f000 f80f 	bl	ba54 <CC_HalInit>
    ba36:	b928      	cbnz	r0, ba44 <CC_LibInitNoRng+0x14>
    ba38:	f000 f80e 	bl	ba58 <CC_PalInit>
    ba3c:	b930      	cbnz	r0, ba4c <CC_LibInitNoRng+0x1c>
    ba3e:	4a04      	ldr	r2, [pc, #16]	; (ba50 <CC_LibInitNoRng+0x20>)
    ba40:	6010      	str	r0, [r2, #0]
    ba42:	bd08      	pop	{r3, pc}
    ba44:	f000 f836 	bl	bab4 <CC_PalTerminate>
    ba48:	2003      	movs	r0, #3
    ba4a:	bd08      	pop	{r3, pc}
    ba4c:	2004      	movs	r0, #4
    ba4e:	bd08      	pop	{r3, pc}
    ba50:	50845a0c 	.word	0x50845a0c

0000ba54 <CC_HalInit>:
    ba54:	2000      	movs	r0, #0
    ba56:	4770      	bx	lr

0000ba58 <CC_PalInit>:
    ba58:	b510      	push	{r4, lr}
    ba5a:	4811      	ldr	r0, [pc, #68]	; (baa0 <CC_PalInit+0x48>)
    ba5c:	f000 f848 	bl	baf0 <CC_PalMutexCreate>
    ba60:	b100      	cbz	r0, ba64 <CC_PalInit+0xc>
    ba62:	bd10      	pop	{r4, pc}
    ba64:	480f      	ldr	r0, [pc, #60]	; (baa4 <CC_PalInit+0x4c>)
    ba66:	f000 f843 	bl	baf0 <CC_PalMutexCreate>
    ba6a:	2800      	cmp	r0, #0
    ba6c:	d1f9      	bne.n	ba62 <CC_PalInit+0xa>
    ba6e:	4c0e      	ldr	r4, [pc, #56]	; (baa8 <CC_PalInit+0x50>)
    ba70:	4620      	mov	r0, r4
    ba72:	f000 f83d 	bl	baf0 <CC_PalMutexCreate>
    ba76:	2800      	cmp	r0, #0
    ba78:	d1f3      	bne.n	ba62 <CC_PalInit+0xa>
    ba7a:	4b0c      	ldr	r3, [pc, #48]	; (baac <CC_PalInit+0x54>)
    ba7c:	480c      	ldr	r0, [pc, #48]	; (bab0 <CC_PalInit+0x58>)
    ba7e:	601c      	str	r4, [r3, #0]
    ba80:	f000 f836 	bl	baf0 <CC_PalMutexCreate>
    ba84:	4601      	mov	r1, r0
    ba86:	2800      	cmp	r0, #0
    ba88:	d1eb      	bne.n	ba62 <CC_PalInit+0xa>
    ba8a:	f000 f82d 	bl	bae8 <CC_PalDmaInit>
    ba8e:	4604      	mov	r4, r0
    ba90:	b108      	cbz	r0, ba96 <CC_PalInit+0x3e>
    ba92:	4620      	mov	r0, r4
    ba94:	bd10      	pop	{r4, pc}
    ba96:	f000 f83f 	bl	bb18 <CC_PalPowerSaveModeInit>
    ba9a:	4620      	mov	r0, r4
    ba9c:	e7fa      	b.n	ba94 <CC_PalInit+0x3c>
    ba9e:	bf00      	nop
    baa0:	20000334 	.word	0x20000334
    baa4:	20000328 	.word	0x20000328
    baa8:	20000330 	.word	0x20000330
    baac:	20000338 	.word	0x20000338
    bab0:	2000032c 	.word	0x2000032c

0000bab4 <CC_PalTerminate>:
    bab4:	b508      	push	{r3, lr}
    bab6:	4808      	ldr	r0, [pc, #32]	; (bad8 <CC_PalTerminate+0x24>)
    bab8:	f000 f824 	bl	bb04 <CC_PalMutexDestroy>
    babc:	4807      	ldr	r0, [pc, #28]	; (badc <CC_PalTerminate+0x28>)
    babe:	f000 f821 	bl	bb04 <CC_PalMutexDestroy>
    bac2:	4807      	ldr	r0, [pc, #28]	; (bae0 <CC_PalTerminate+0x2c>)
    bac4:	f000 f81e 	bl	bb04 <CC_PalMutexDestroy>
    bac8:	4806      	ldr	r0, [pc, #24]	; (bae4 <CC_PalTerminate+0x30>)
    baca:	f000 f81b 	bl	bb04 <CC_PalMutexDestroy>
    bace:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bad2:	f000 b80b 	b.w	baec <CC_PalDmaTerminate>
    bad6:	bf00      	nop
    bad8:	20000334 	.word	0x20000334
    badc:	20000328 	.word	0x20000328
    bae0:	20000330 	.word	0x20000330
    bae4:	2000032c 	.word	0x2000032c

0000bae8 <CC_PalDmaInit>:
    bae8:	2000      	movs	r0, #0
    baea:	4770      	bx	lr

0000baec <CC_PalDmaTerminate>:
    baec:	4770      	bx	lr
    baee:	bf00      	nop

0000baf0 <CC_PalMutexCreate>:
    baf0:	b508      	push	{r3, lr}
    baf2:	4b03      	ldr	r3, [pc, #12]	; (bb00 <CC_PalMutexCreate+0x10>)
    baf4:	6802      	ldr	r2, [r0, #0]
    baf6:	681b      	ldr	r3, [r3, #0]
    baf8:	6810      	ldr	r0, [r2, #0]
    bafa:	4798      	blx	r3
    bafc:	2000      	movs	r0, #0
    bafe:	bd08      	pop	{r3, pc}
    bb00:	200002ec 	.word	0x200002ec

0000bb04 <CC_PalMutexDestroy>:
    bb04:	b508      	push	{r3, lr}
    bb06:	4b03      	ldr	r3, [pc, #12]	; (bb14 <CC_PalMutexDestroy+0x10>)
    bb08:	6802      	ldr	r2, [r0, #0]
    bb0a:	685b      	ldr	r3, [r3, #4]
    bb0c:	6810      	ldr	r0, [r2, #0]
    bb0e:	4798      	blx	r3
    bb10:	2000      	movs	r0, #0
    bb12:	bd08      	pop	{r3, pc}
    bb14:	200002ec 	.word	0x200002ec

0000bb18 <CC_PalPowerSaveModeInit>:
    bb18:	b570      	push	{r4, r5, r6, lr}
    bb1a:	4c09      	ldr	r4, [pc, #36]	; (bb40 <CC_PalPowerSaveModeInit+0x28>)
    bb1c:	4d09      	ldr	r5, [pc, #36]	; (bb44 <CC_PalPowerSaveModeInit+0x2c>)
    bb1e:	6920      	ldr	r0, [r4, #16]
    bb20:	68ab      	ldr	r3, [r5, #8]
    bb22:	4798      	blx	r3
    bb24:	b118      	cbz	r0, bb2e <CC_PalPowerSaveModeInit+0x16>
    bb26:	4b08      	ldr	r3, [pc, #32]	; (bb48 <CC_PalPowerSaveModeInit+0x30>)
    bb28:	4808      	ldr	r0, [pc, #32]	; (bb4c <CC_PalPowerSaveModeInit+0x34>)
    bb2a:	685b      	ldr	r3, [r3, #4]
    bb2c:	4798      	blx	r3
    bb2e:	2100      	movs	r1, #0
    bb30:	4a07      	ldr	r2, [pc, #28]	; (bb50 <CC_PalPowerSaveModeInit+0x38>)
    bb32:	68eb      	ldr	r3, [r5, #12]
    bb34:	6011      	str	r1, [r2, #0]
    bb36:	6920      	ldr	r0, [r4, #16]
    bb38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bb3c:	4718      	bx	r3
    bb3e:	bf00      	nop
    bb40:	200002fc 	.word	0x200002fc
    bb44:	200002ec 	.word	0x200002ec
    bb48:	200002dc 	.word	0x200002dc
    bb4c:	00010278 	.word	0x00010278
    bb50:	20001f18 	.word	0x20001f18

0000bb54 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    bb54:	4602      	mov	r2, r0
    bb56:	b158      	cbz	r0, bb70 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    bb58:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    bb5a:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    bb5e:	2b01      	cmp	r3, #1
    bb60:	d003      	beq.n	bb6a <sys_notify_validate+0x16>
    bb62:	2b03      	cmp	r3, #3
    bb64:	d107      	bne.n	bb76 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    bb66:	6803      	ldr	r3, [r0, #0]
    bb68:	b143      	cbz	r3, bb7c <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    bb6a:	2000      	movs	r0, #0
    bb6c:	6090      	str	r0, [r2, #8]
    bb6e:	4770      	bx	lr
		return -EINVAL;
    bb70:	f06f 0015 	mvn.w	r0, #21
    bb74:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    bb76:	f06f 0015 	mvn.w	r0, #21
    bb7a:	4770      	bx	lr
			rv = -EINVAL;
    bb7c:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    bb80:	4770      	bx	lr

0000bb82 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    bb82:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    bb84:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    bb86:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    bb8a:	6081      	str	r1, [r0, #8]
	switch (method) {
    bb8c:	2a03      	cmp	r2, #3
    bb8e:	d103      	bne.n	bb98 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    bb90:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    bb92:	2200      	movs	r2, #0
    bb94:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    bb96:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    bb98:	2000      	movs	r0, #0
    bb9a:	e7fa      	b.n	bb92 <sys_notify_finalize+0x10>

0000bb9c <arch_printk_char_out>:
}
    bb9c:	2000      	movs	r0, #0
    bb9e:	4770      	bx	lr

0000bba0 <str_out>:
{
    bba0:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    bba2:	680c      	ldr	r4, [r1, #0]
    bba4:	b154      	cbz	r4, bbbc <str_out+0x1c>
    bba6:	688a      	ldr	r2, [r1, #8]
    bba8:	684b      	ldr	r3, [r1, #4]
    bbaa:	429a      	cmp	r2, r3
    bbac:	da06      	bge.n	bbbc <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    bbae:	3b01      	subs	r3, #1
    bbb0:	429a      	cmp	r2, r3
    bbb2:	d008      	beq.n	bbc6 <str_out+0x26>
		ctx->str[ctx->count++] = c;
    bbb4:	1c53      	adds	r3, r2, #1
    bbb6:	608b      	str	r3, [r1, #8]
    bbb8:	54a0      	strb	r0, [r4, r2]
    bbba:	e002      	b.n	bbc2 <str_out+0x22>
		ctx->count++;
    bbbc:	688b      	ldr	r3, [r1, #8]
    bbbe:	3301      	adds	r3, #1
    bbc0:	608b      	str	r3, [r1, #8]
}
    bbc2:	bc10      	pop	{r4}
    bbc4:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    bbc6:	1c53      	adds	r3, r2, #1
    bbc8:	608b      	str	r3, [r1, #8]
    bbca:	2300      	movs	r3, #0
    bbcc:	54a3      	strb	r3, [r4, r2]
    bbce:	e7f8      	b.n	bbc2 <str_out+0x22>

0000bbd0 <printk>:
{
    bbd0:	b40f      	push	{r0, r1, r2, r3}
    bbd2:	b500      	push	{lr}
    bbd4:	b083      	sub	sp, #12
    bbd6:	a904      	add	r1, sp, #16
    bbd8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    bbdc:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    bbde:	f7f4 fda7 	bl	730 <vprintk>
}
    bbe2:	b003      	add	sp, #12
    bbe4:	f85d eb04 	ldr.w	lr, [sp], #4
    bbe8:	b004      	add	sp, #16
    bbea:	4770      	bx	lr

0000bbec <snprintk>:
{
    bbec:	b40c      	push	{r2, r3}
    bbee:	b500      	push	{lr}
    bbf0:	b083      	sub	sp, #12
    bbf2:	ab04      	add	r3, sp, #16
    bbf4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    bbf8:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    bbfa:	f7f4 fda9 	bl	750 <vsnprintk>
}
    bbfe:	b003      	add	sp, #12
    bc00:	f85d eb04 	ldr.w	lr, [sp], #4
    bc04:	b002      	add	sp, #8
    bc06:	4770      	bx	lr

0000bc08 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    bc08:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    bc0c:	8b01      	ldrh	r1, [r0, #24]
    bc0e:	f021 0107 	bic.w	r1, r1, #7
    bc12:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    bc14:	8301      	strh	r1, [r0, #24]
}
    bc16:	4770      	bx	lr

0000bc18 <notify_monitors>:
{
    bc18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bc1c:	4606      	mov	r6, r0
    bc1e:	460f      	mov	r7, r1
    bc20:	4690      	mov	r8, r2
	return list->head;
    bc22:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    bc24:	b119      	cbz	r1, bc2e <notify_monitors+0x16>
    bc26:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    bc28:	b131      	cbz	r1, bc38 <notify_monitors+0x20>
	return node->next;
    bc2a:	680c      	ldr	r4, [r1, #0]
    bc2c:	e004      	b.n	bc38 <notify_monitors+0x20>
    bc2e:	460c      	mov	r4, r1
    bc30:	e002      	b.n	bc38 <notify_monitors+0x20>
    bc32:	4623      	mov	r3, r4
    bc34:	4621      	mov	r1, r4
    bc36:	461c      	mov	r4, r3
    bc38:	b159      	cbz	r1, bc52 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    bc3a:	684d      	ldr	r5, [r1, #4]
    bc3c:	4643      	mov	r3, r8
    bc3e:	463a      	mov	r2, r7
    bc40:	4630      	mov	r0, r6
    bc42:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    bc44:	2c00      	cmp	r4, #0
    bc46:	d0f4      	beq.n	bc32 <notify_monitors+0x1a>
    bc48:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    bc4a:	2c00      	cmp	r4, #0
    bc4c:	d0f2      	beq.n	bc34 <notify_monitors+0x1c>
	return node->next;
    bc4e:	6823      	ldr	r3, [r4, #0]
    bc50:	e7f0      	b.n	bc34 <notify_monitors+0x1c>
}
    bc52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bc56 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bc56:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    bc58:	f013 0307 	ands.w	r3, r3, #7
    bc5c:	d103      	bne.n	bc66 <process_recheck+0x10>
	return list->head;
    bc5e:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    bc60:	b10a      	cbz	r2, bc66 <process_recheck+0x10>
		evt = EVT_START;
    bc62:	2003      	movs	r0, #3
    bc64:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    bc66:	2b02      	cmp	r3, #2
    bc68:	d003      	beq.n	bc72 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    bc6a:	2b01      	cmp	r3, #1
    bc6c:	d006      	beq.n	bc7c <process_recheck+0x26>
	int evt = EVT_NOP;
    bc6e:	2000      	movs	r0, #0
    bc70:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    bc72:	8b42      	ldrh	r2, [r0, #26]
    bc74:	2a00      	cmp	r2, #0
    bc76:	d1f8      	bne.n	bc6a <process_recheck+0x14>
		evt = EVT_STOP;
    bc78:	2004      	movs	r0, #4
    bc7a:	4770      	bx	lr
    bc7c:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    bc7e:	b10b      	cbz	r3, bc84 <process_recheck+0x2e>
		evt = EVT_RESET;
    bc80:	2005      	movs	r0, #5
}
    bc82:	4770      	bx	lr
	int evt = EVT_NOP;
    bc84:	2000      	movs	r0, #0
    bc86:	4770      	bx	lr

0000bc88 <process_complete>:
{
    bc88:	b538      	push	{r3, r4, r5, lr}
    bc8a:	4604      	mov	r4, r0
    bc8c:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bc8e:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    bc90:	2a00      	cmp	r2, #0
    bc92:	db07      	blt.n	bca4 <process_complete+0x1c>
    bc94:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    bc98:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    bc9a:	2a01      	cmp	r2, #1
    bc9c:	d90e      	bls.n	bcbc <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    bc9e:	2b04      	cmp	r3, #4
    bca0:	d032      	beq.n	bd08 <process_complete+0x80>
}
    bca2:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    bca4:	e9d0 0100 	ldrd	r0, r1, [r0]
    bca8:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    bcac:	2300      	movs	r3, #0
    bcae:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    bcb0:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    bcb2:	2101      	movs	r1, #1
    bcb4:	4620      	mov	r0, r4
    bcb6:	f7ff ffa7 	bl	bc08 <set_state>
    bcba:	e7f2      	b.n	bca2 <process_complete+0x1a>
		*clients = mgr->clients;
    bcbc:	e9d0 0100 	ldrd	r0, r1, [r0]
    bcc0:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    bcc4:	2200      	movs	r2, #0
    bcc6:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    bcc8:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    bcca:	2b06      	cmp	r3, #6
    bccc:	d117      	bne.n	bcfe <process_complete+0x76>
	return list->head;
    bcce:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    bcd0:	b13b      	cbz	r3, bce2 <process_complete+0x5a>
				mgr->refs += 1U;
    bcd2:	8b62      	ldrh	r2, [r4, #26]
    bcd4:	3201      	adds	r2, #1
    bcd6:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    bcd8:	2b00      	cmp	r3, #0
    bcda:	d0f9      	beq.n	bcd0 <process_complete+0x48>
	return node->next;
    bcdc:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    bcde:	2b00      	cmp	r3, #0
    bce0:	d1f6      	bne.n	bcd0 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
    bce2:	2102      	movs	r1, #2
    bce4:	4620      	mov	r0, r4
    bce6:	f7ff ff8f 	bl	bc08 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    bcea:	4620      	mov	r0, r4
    bcec:	f7ff ffb3 	bl	bc56 <process_recheck>
    bcf0:	2800      	cmp	r0, #0
    bcf2:	d0d6      	beq.n	bca2 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    bcf4:	8b23      	ldrh	r3, [r4, #24]
    bcf6:	f043 0320 	orr.w	r3, r3, #32
    bcfa:	8323      	strh	r3, [r4, #24]
    bcfc:	e7d1      	b.n	bca2 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    bcfe:	2100      	movs	r1, #0
    bd00:	4620      	mov	r0, r4
    bd02:	f7ff ff81 	bl	bc08 <set_state>
    bd06:	e7f0      	b.n	bcea <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
    bd08:	2100      	movs	r1, #0
    bd0a:	f7ff ff7d 	bl	bc08 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    bd0e:	4620      	mov	r0, r4
    bd10:	f7ff ffa1 	bl	bc56 <process_recheck>
    bd14:	2800      	cmp	r0, #0
    bd16:	d0c4      	beq.n	bca2 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    bd18:	8b23      	ldrh	r3, [r4, #24]
    bd1a:	f043 0320 	orr.w	r3, r3, #32
    bd1e:	8323      	strh	r3, [r4, #24]
}
    bd20:	e7bf      	b.n	bca2 <process_complete+0x1a>

0000bd22 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    bd22:	b158      	cbz	r0, bd3c <validate_args+0x1a>
{
    bd24:	b510      	push	{r4, lr}
    bd26:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    bd28:	b159      	cbz	r1, bd42 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    bd2a:	1d08      	adds	r0, r1, #4
    bd2c:	f7ff ff12 	bl	bb54 <sys_notify_validate>
	if ((rv == 0)
    bd30:	b918      	cbnz	r0, bd3a <validate_args+0x18>
	    && ((cli->notify.flags
    bd32:	68a3      	ldr	r3, [r4, #8]
    bd34:	f033 0303 	bics.w	r3, r3, #3
    bd38:	d106      	bne.n	bd48 <validate_args+0x26>
}
    bd3a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    bd3c:	f06f 0015 	mvn.w	r0, #21
}
    bd40:	4770      	bx	lr
		return -EINVAL;
    bd42:	f06f 0015 	mvn.w	r0, #21
    bd46:	e7f8      	b.n	bd3a <validate_args+0x18>
		rv = -EINVAL;
    bd48:	f06f 0015 	mvn.w	r0, #21
    bd4c:	e7f5      	b.n	bd3a <validate_args+0x18>

0000bd4e <notify_one>:
{
    bd4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd52:	4607      	mov	r7, r0
    bd54:	460c      	mov	r4, r1
    bd56:	4616      	mov	r6, r2
    bd58:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    bd5a:	4619      	mov	r1, r3
    bd5c:	1d20      	adds	r0, r4, #4
    bd5e:	f7ff ff10 	bl	bb82 <sys_notify_finalize>
	if (cb) {
    bd62:	b128      	cbz	r0, bd70 <notify_one+0x22>
    bd64:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    bd66:	462b      	mov	r3, r5
    bd68:	4632      	mov	r2, r6
    bd6a:	4621      	mov	r1, r4
    bd6c:	4638      	mov	r0, r7
    bd6e:	47c0      	blx	r8
}
    bd70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bd74 <notify_all>:
{
    bd74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bd78:	4681      	mov	r9, r0
    bd7a:	460c      	mov	r4, r1
    bd7c:	4690      	mov	r8, r2
    bd7e:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    bd80:	e005      	b.n	bd8e <notify_all+0x1a>
	list->tail = node;
    bd82:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    bd84:	463b      	mov	r3, r7
    bd86:	4642      	mov	r2, r8
    bd88:	4648      	mov	r0, r9
    bd8a:	f7ff ffe0 	bl	bd4e <notify_one>
	return list->head;
    bd8e:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    bd90:	b129      	cbz	r1, bd9e <notify_all+0x2a>
	return node->next;
    bd92:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    bd94:	6025      	str	r5, [r4, #0]
	return list->tail;
    bd96:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    bd98:	428e      	cmp	r6, r1
    bd9a:	d1f3      	bne.n	bd84 <notify_all+0x10>
    bd9c:	e7f1      	b.n	bd82 <notify_all+0xe>
}
    bd9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000bda2 <transition_complete>:
{
    bda2:	b510      	push	{r4, lr}
	__asm__ volatile(
    bda4:	f04f 0420 	mov.w	r4, #32
    bda8:	f3ef 8211 	mrs	r2, BASEPRI
    bdac:	f384 8812 	msr	BASEPRI_MAX, r4
    bdb0:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    bdb4:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    bdb6:	2101      	movs	r1, #1
    bdb8:	f7f4 fce0 	bl	77c <process_event>
}
    bdbc:	bd10      	pop	{r4, pc}

0000bdbe <onoff_manager_init>:
	if ((mgr == NULL)
    bdbe:	4603      	mov	r3, r0
    bdc0:	b168      	cbz	r0, bdde <onoff_manager_init+0x20>
	    || (transitions == NULL)
    bdc2:	b179      	cbz	r1, bde4 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    bdc4:	680a      	ldr	r2, [r1, #0]
    bdc6:	b182      	cbz	r2, bdea <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    bdc8:	684a      	ldr	r2, [r1, #4]
    bdca:	b18a      	cbz	r2, bdf0 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    bdcc:	2000      	movs	r0, #0
    bdce:	6018      	str	r0, [r3, #0]
    bdd0:	6058      	str	r0, [r3, #4]
    bdd2:	6098      	str	r0, [r3, #8]
    bdd4:	60d8      	str	r0, [r3, #12]
    bdd6:	6158      	str	r0, [r3, #20]
    bdd8:	6198      	str	r0, [r3, #24]
    bdda:	6119      	str	r1, [r3, #16]
	return 0;
    bddc:	4770      	bx	lr
		return -EINVAL;
    bdde:	f06f 0015 	mvn.w	r0, #21
    bde2:	4770      	bx	lr
    bde4:	f06f 0015 	mvn.w	r0, #21
    bde8:	4770      	bx	lr
    bdea:	f06f 0015 	mvn.w	r0, #21
    bdee:	4770      	bx	lr
    bdf0:	f06f 0015 	mvn.w	r0, #21
}
    bdf4:	4770      	bx	lr

0000bdf6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    bdf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bdf8:	4604      	mov	r4, r0
    bdfa:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    bdfc:	f7ff ff91 	bl	bd22 <validate_args>

	if (rv < 0) {
    be00:	1e06      	subs	r6, r0, #0
    be02:	db37      	blt.n	be74 <onoff_request+0x7e>
    be04:	f04f 0320 	mov.w	r3, #32
    be08:	f3ef 8211 	mrs	r2, BASEPRI
    be0c:	f383 8812 	msr	BASEPRI_MAX, r3
    be10:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    be14:	8b25      	ldrh	r5, [r4, #24]
    be16:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    be1a:	8b63      	ldrh	r3, [r4, #26]
    be1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    be20:	428b      	cmp	r3, r1
    be22:	d02f      	beq.n	be84 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    be24:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    be26:	2d02      	cmp	r5, #2
    be28:	d00c      	beq.n	be44 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    be2a:	b18d      	cbz	r5, be50 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    be2c:	2d04      	cmp	r5, #4
    be2e:	d00f      	beq.n	be50 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    be30:	2d06      	cmp	r5, #6
    be32:	d00d      	beq.n	be50 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    be34:	2d05      	cmp	r5, #5
    be36:	d01f      	beq.n	be78 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    be38:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    be3c:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    be3e:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    be40:	4608      	mov	r0, r1
    be42:	e00a      	b.n	be5a <onoff_request+0x64>
		mgr->refs += 1U;
    be44:	3301      	adds	r3, #1
    be46:	8363      	strh	r3, [r4, #26]
		notify = true;
    be48:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    be4a:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    be4c:	4618      	mov	r0, r3
    be4e:	e004      	b.n	be5a <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    be50:	fab5 f385 	clz	r3, r5
    be54:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    be56:	2100      	movs	r1, #0
		add_client = true;
    be58:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    be5a:	b128      	cbz	r0, be68 <onoff_request+0x72>
	parent->next = child;
    be5c:	2000      	movs	r0, #0
    be5e:	6038      	str	r0, [r7, #0]
	return list->tail;
    be60:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    be62:	b1a8      	cbz	r0, be90 <onoff_request+0x9a>
	parent->next = child;
    be64:	6007      	str	r7, [r0, #0]
	list->tail = node;
    be66:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    be68:	b9ab      	cbnz	r3, be96 <onoff_request+0xa0>
	__asm__ volatile(
    be6a:	f382 8811 	msr	BASEPRI, r2
    be6e:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    be72:	b9a9      	cbnz	r1, bea0 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    be74:	4630      	mov	r0, r6
    be76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    be78:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    be7c:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    be7e:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    be80:	4608      	mov	r0, r1
    be82:	e7ea      	b.n	be5a <onoff_request+0x64>
		rv = -EAGAIN;
    be84:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    be88:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    be8a:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    be8c:	4608      	mov	r0, r1
    be8e:	e7e4      	b.n	be5a <onoff_request+0x64>
    be90:	6067      	str	r7, [r4, #4]
	list->head = node;
    be92:	6027      	str	r7, [r4, #0]
}
    be94:	e7e8      	b.n	be68 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    be96:	2102      	movs	r1, #2
    be98:	4620      	mov	r0, r4
    be9a:	f7f4 fc6f 	bl	77c <process_event>
    be9e:	e7e9      	b.n	be74 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    bea0:	2300      	movs	r3, #0
    bea2:	462a      	mov	r2, r5
    bea4:	4639      	mov	r1, r7
    bea6:	4620      	mov	r0, r4
    bea8:	f7ff ff51 	bl	bd4e <notify_one>
    beac:	e7e2      	b.n	be74 <onoff_request+0x7e>

0000beae <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    beae:	b510      	push	{r4, lr}
	__asm__ volatile(
    beb0:	f04f 0320 	mov.w	r3, #32
    beb4:	f3ef 8211 	mrs	r2, BASEPRI
    beb8:	f383 8812 	msr	BASEPRI_MAX, r3
    bebc:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bec0:	8b03      	ldrh	r3, [r0, #24]
    bec2:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    bec6:	2b02      	cmp	r3, #2
    bec8:	d007      	beq.n	beda <onoff_release+0x2c>
		if (state == ONOFF_STATE_ERROR) {
    beca:	2b01      	cmp	r3, #1
    becc:	d002      	beq.n	bed4 <onoff_release+0x26>
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    bece:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT_NO_MSG(mgr->refs > 0);
	mgr->refs -= 1U;
	stop = (mgr->refs == 0);

out:
	if (stop) {
    bed2:	e008      	b.n	bee6 <onoff_release+0x38>
			rv = -EIO;
    bed4:	f06f 0404 	mvn.w	r4, #4
    bed8:	e005      	b.n	bee6 <onoff_release+0x38>
    beda:	461c      	mov	r4, r3
	mgr->refs -= 1U;
    bedc:	8b43      	ldrh	r3, [r0, #26]
    bede:	3b01      	subs	r3, #1
    bee0:	b29b      	uxth	r3, r3
    bee2:	8343      	strh	r3, [r0, #26]
	if (stop) {
    bee4:	b12b      	cbz	r3, bef2 <onoff_release+0x44>
	__asm__ volatile(
    bee6:	f382 8811 	msr	BASEPRI, r2
    beea:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
    beee:	4620      	mov	r0, r4
    bef0:	bd10      	pop	{r4, pc}
		process_event(mgr, EVT_RECHECK, key);
    bef2:	2102      	movs	r1, #2
    bef4:	f7f4 fc42 	bl	77c <process_event>
    bef8:	e7f9      	b.n	beee <onoff_release+0x40>

0000befa <onoff_cancel>:
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
	if ((mgr == NULL) || (cli == NULL)) {
    befa:	2800      	cmp	r0, #0
    befc:	d031      	beq.n	bf62 <onoff_cancel+0x68>
{
    befe:	b470      	push	{r4, r5, r6}
    bf00:	4605      	mov	r5, r0
	if ((mgr == NULL) || (cli == NULL)) {
    bf02:	2900      	cmp	r1, #0
    bf04:	d030      	beq.n	bf68 <onoff_cancel+0x6e>
	__asm__ volatile(
    bf06:	f04f 0320 	mov.w	r3, #32
    bf0a:	f3ef 8611 	mrs	r6, BASEPRI
    bf0e:	f383 8812 	msr	BASEPRI_MAX, r3
    bf12:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bf16:	8b00      	ldrh	r0, [r0, #24]
    bf18:	f000 0007 	and.w	r0, r0, #7

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    bf1c:	460c      	mov	r4, r1
	return list->head;
    bf1e:	682b      	ldr	r3, [r5, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    bf20:	2200      	movs	r2, #0
    bf22:	b1b3      	cbz	r3, bf52 <onoff_cancel+0x58>
    bf24:	429c      	cmp	r4, r3
    bf26:	d002      	beq.n	bf2e <onoff_cancel+0x34>
    bf28:	461a      	mov	r2, r3
    bf2a:	681b      	ldr	r3, [r3, #0]
    bf2c:	e7f9      	b.n	bf22 <onoff_cancel+0x28>
Z_GENLIST_REMOVE(slist, snode)
    bf2e:	b13a      	cbz	r2, bf40 <onoff_cancel+0x46>
	return node->next;
    bf30:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    bf32:	6013      	str	r3, [r2, #0]
	return list->tail;
    bf34:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    bf36:	4299      	cmp	r1, r3
    bf38:	d009      	beq.n	bf4e <onoff_cancel+0x54>
	parent->next = child;
    bf3a:	2300      	movs	r3, #0
    bf3c:	600b      	str	r3, [r1, #0]
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    bf3e:	e00a      	b.n	bf56 <onoff_cancel+0x5c>
	return node->next;
    bf40:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    bf42:	602b      	str	r3, [r5, #0]
	return list->tail;
    bf44:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    bf46:	4291      	cmp	r1, r2
    bf48:	d1f7      	bne.n	bf3a <onoff_cancel+0x40>
	list->tail = node;
    bf4a:	606b      	str	r3, [r5, #4]
}
    bf4c:	e7f5      	b.n	bf3a <onoff_cancel+0x40>
	list->tail = node;
    bf4e:	606a      	str	r2, [r5, #4]
}
    bf50:	e7f3      	b.n	bf3a <onoff_cancel+0x40>
	int rv = -EALREADY;
    bf52:	f06f 0077 	mvn.w	r0, #119	; 0x77
	__asm__ volatile(
    bf56:	f386 8811 	msr	BASEPRI, r6
    bf5a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    bf5e:	bc70      	pop	{r4, r5, r6}
    bf60:	4770      	bx	lr
		return -EINVAL;
    bf62:	f06f 0015 	mvn.w	r0, #21
}
    bf66:	4770      	bx	lr
		return -EINVAL;
    bf68:	f06f 0015 	mvn.w	r0, #21
    bf6c:	e7f7      	b.n	bf5e <onoff_cancel+0x64>

0000bf6e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    bf6e:	b508      	push	{r3, lr}
    bf70:	4604      	mov	r4, r0
    bf72:	4608      	mov	r0, r1
    bf74:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    bf76:	461a      	mov	r2, r3
    bf78:	47a0      	blx	r4
	return z_impl_z_current_get();
    bf7a:	f7ff f995 	bl	b2a8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    bf7e:	f7f8 fc4d 	bl	481c <z_impl_k_thread_abort>

0000bf82 <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    bf82:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(bytes / CHUNK_UNIT);
}

static inline bool big_heap(struct z_heap *h)
{
	return big_heap_chunks(h->end_chunk);
    bf84:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    bf86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    bf8a:	d303      	bcc.n	bf94 <chunk_mem+0x12>
    bf8c:	2308      	movs	r3, #8
    bf8e:	4419      	add	r1, r3

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
    bf90:	4408      	add	r0, r1
    bf92:	4770      	bx	lr
    bf94:	2304      	movs	r3, #4
    bf96:	e7fa      	b.n	bf8e <chunk_mem+0xc>

0000bf98 <free_list_remove_bidx>:

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    bf98:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
    bf9a:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    bf9e:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    bfa0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    bfa4:	d317      	bcc.n	bfd6 <free_list_remove_bidx+0x3e>
		return ((uint32_t *)cmem)[f];
    bfa6:	68eb      	ldr	r3, [r5, #12]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
    bfa8:	4299      	cmp	r1, r3
    bfaa:	d016      	beq.n	bfda <free_list_remove_bidx+0x42>
	if (big_heap(h)) {
    bfac:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    bfb0:	d320      	bcc.n	bff4 <free_list_remove_bidx+0x5c>
		return ((uint32_t *)cmem)[f];
    bfb2:	68a9      	ldr	r1, [r5, #8]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
    bfb4:	3204      	adds	r2, #4
    bfb6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    bfba:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    bfbe:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    bfc2:	d319      	bcc.n	bff8 <free_list_remove_bidx+0x60>
		((uint32_t *)cmem)[f] = val;
    bfc4:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
    bfc6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
    bfca:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    bfcc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    bfd0:	d314      	bcc.n	bffc <free_list_remove_bidx+0x64>
		((uint32_t *)cmem)[f] = val;
    bfd2:	6099      	str	r1, [r3, #8]
    bfd4:	e00c      	b.n	bff0 <free_list_remove_bidx+0x58>
		return ((uint16_t *)cmem)[f];
    bfd6:	88eb      	ldrh	r3, [r5, #6]
    bfd8:	e7e6      	b.n	bfa8 <free_list_remove_bidx+0x10>
		h->avail_buckets &= ~BIT(bidx);
    bfda:	2301      	movs	r3, #1
    bfdc:	fa03 f102 	lsl.w	r1, r3, r2
    bfe0:	68c3      	ldr	r3, [r0, #12]
    bfe2:	ea23 0301 	bic.w	r3, r3, r1
    bfe6:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    bfe8:	3204      	adds	r2, #4
    bfea:	2300      	movs	r3, #0
    bfec:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
    bff0:	bc30      	pop	{r4, r5}
    bff2:	4770      	bx	lr
    bff4:	88a9      	ldrh	r1, [r5, #4]
    bff6:	e7dd      	b.n	bfb4 <free_list_remove_bidx+0x1c>
		((uint16_t *)cmem)[f] = val;
    bff8:	80d3      	strh	r3, [r2, #6]
    bffa:	e7e4      	b.n	bfc6 <free_list_remove_bidx+0x2e>
    bffc:	8099      	strh	r1, [r3, #4]
    bffe:	e7f7      	b.n	bff0 <free_list_remove_bidx+0x58>

0000c000 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    c000:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
    c002:	1d13      	adds	r3, r2, #4
    c004:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    c008:	b9d3      	cbnz	r3, c040 <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
    c00a:	2301      	movs	r3, #1
    c00c:	fa03 f402 	lsl.w	r4, r3, r2
    c010:	68c3      	ldr	r3, [r0, #12]
    c012:	4323      	orrs	r3, r4
    c014:	60c3      	str	r3, [r0, #12]
		b->next = c;
    c016:	3204      	adds	r2, #4
    c018:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    c01c:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    c020:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    c022:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    c026:	d307      	bcc.n	c038 <free_list_add_bidx+0x38>
		((uint32_t *)cmem)[f] = val;
    c028:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
    c02a:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    c02c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    c030:	d304      	bcc.n	c03c <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
    c032:	60d9      	str	r1, [r3, #12]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
    c034:	bc70      	pop	{r4, r5, r6}
    c036:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
    c038:	8099      	strh	r1, [r3, #4]
    c03a:	e7f6      	b.n	c02a <free_list_add_bidx+0x2a>
    c03c:	80d9      	strh	r1, [r3, #6]
    c03e:	e7f9      	b.n	c034 <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
    c040:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
    c044:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    c046:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    c04a:	d318      	bcc.n	c07e <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
    c04c:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
    c04e:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
    c052:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    c056:	d314      	bcc.n	c082 <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
    c058:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
    c05a:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    c05c:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    c060:	d311      	bcc.n	c086 <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
    c062:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
    c064:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
    c068:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    c06a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c06e:	d30c      	bcc.n	c08a <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
    c070:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
    c072:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    c074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c078:	d309      	bcc.n	c08e <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
    c07a:	60a1      	str	r1, [r4, #8]
    c07c:	e7da      	b.n	c034 <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
    c07e:	88a2      	ldrh	r2, [r4, #4]
    c080:	e7e5      	b.n	c04e <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
    c082:	80aa      	strh	r2, [r5, #4]
    c084:	e7e9      	b.n	c05a <free_list_add_bidx+0x5a>
    c086:	80eb      	strh	r3, [r5, #6]
    c088:	e7ec      	b.n	c064 <free_list_add_bidx+0x64>
    c08a:	80d1      	strh	r1, [r2, #6]
    c08c:	e7f1      	b.n	c072 <free_list_add_bidx+0x72>
    c08e:	80a1      	strh	r1, [r4, #4]
    c090:	e7d0      	b.n	c034 <free_list_add_bidx+0x34>

0000c092 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
    c092:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
    c094:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    c098:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
    c09a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    c09e:	d325      	bcc.n	c0ec <split_chunks+0x5a>
		return ((uint32_t *)cmem)[f];
    c0a0:	6866      	ldr	r6, [r4, #4]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
    c0a2:	1a53      	subs	r3, r2, r1
	chunksz_t rsz = sz0 - lsz;
    c0a4:	1a89      	subs	r1, r1, r2
    c0a6:	eb01 0156 	add.w	r1, r1, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c0aa:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
    c0ac:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    c0b0:	d31e      	bcc.n	c0f0 <split_chunks+0x5e>
		((uint32_t *)cmem)[f] = val;
    c0b2:	6066      	str	r6, [r4, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c0b4:	004d      	lsls	r5, r1, #1
	void *cmem = &buf[c];
    c0b6:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
    c0ba:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    c0bc:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    c0c0:	d318      	bcc.n	c0f4 <split_chunks+0x62>
		((uint32_t *)cmem)[f] = val;
    c0c2:	6065      	str	r5, [r4, #4]
	return big_heap_chunks(h->end_chunk);
    c0c4:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
    c0c6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    c0ca:	d315      	bcc.n	c0f8 <split_chunks+0x66>
		((uint32_t *)cmem)[f] = val;
    c0cc:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->end_chunk);
    c0d0:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    c0d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c0d6:	d312      	bcc.n	c0fe <split_chunks+0x6c>
		return ((uint32_t *)cmem)[f];
    c0d8:	6864      	ldr	r4, [r4, #4]
	return c + chunk_size(h, c);
    c0da:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
    c0de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c0e2:	d30e      	bcc.n	c102 <split_chunks+0x70>
		((uint32_t *)cmem)[f] = val;
    c0e4:	f840 1032 	str.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
    c0e8:	bc70      	pop	{r4, r5, r6}
    c0ea:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
    c0ec:	8866      	ldrh	r6, [r4, #2]
    c0ee:	e7d8      	b.n	c0a2 <split_chunks+0x10>
		((uint16_t *)cmem)[f] = val;
    c0f0:	8066      	strh	r6, [r4, #2]
    c0f2:	e7df      	b.n	c0b4 <split_chunks+0x22>
    c0f4:	8065      	strh	r5, [r4, #2]
    c0f6:	e7e5      	b.n	c0c4 <split_chunks+0x32>
    c0f8:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
    c0fc:	e7e8      	b.n	c0d0 <split_chunks+0x3e>
		return ((uint16_t *)cmem)[f];
    c0fe:	8864      	ldrh	r4, [r4, #2]
    c100:	e7eb      	b.n	c0da <split_chunks+0x48>
		((uint16_t *)cmem)[f] = val;
    c102:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
    c106:	e7ef      	b.n	c0e8 <split_chunks+0x56>

0000c108 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
    c108:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
    c10a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    c10e:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    c110:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    c114:	d31c      	bcc.n	c150 <merge_chunks+0x48>
		return ((uint32_t *)cmem)[f];
    c116:	684b      	ldr	r3, [r1, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    c118:	085b      	lsrs	r3, r3, #1
	void *cmem = &buf[c];
    c11a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
	if (big_heap(h)) {
    c11e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    c122:	d317      	bcc.n	c154 <merge_chunks+0x4c>
		return ((uint32_t *)cmem)[f];
    c124:	686e      	ldr	r6, [r5, #4]
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    c126:	eb03 0356 	add.w	r3, r3, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c12a:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
    c12c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    c130:	d312      	bcc.n	c158 <merge_chunks+0x50>
		((uint32_t *)cmem)[f] = val;
    c132:	604e      	str	r6, [r1, #4]
	return big_heap_chunks(h->end_chunk);
    c134:	6881      	ldr	r1, [r0, #8]
	if (big_heap(h)) {
    c136:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    c13a:	d30f      	bcc.n	c15c <merge_chunks+0x54>
		return ((uint32_t *)cmem)[f];
    c13c:	686c      	ldr	r4, [r5, #4]
	return c + chunk_size(h, c);
    c13e:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
    c142:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    c146:	d30b      	bcc.n	c160 <merge_chunks+0x58>
		((uint32_t *)cmem)[f] = val;
    c148:	f840 3032 	str.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
    c14c:	bc70      	pop	{r4, r5, r6}
    c14e:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
    c150:	884b      	ldrh	r3, [r1, #2]
    c152:	e7e1      	b.n	c118 <merge_chunks+0x10>
    c154:	886e      	ldrh	r6, [r5, #2]
    c156:	e7e6      	b.n	c126 <merge_chunks+0x1e>
		((uint16_t *)cmem)[f] = val;
    c158:	804e      	strh	r6, [r1, #2]
    c15a:	e7eb      	b.n	c134 <merge_chunks+0x2c>
		return ((uint16_t *)cmem)[f];
    c15c:	886c      	ldrh	r4, [r5, #2]
    c15e:	e7ee      	b.n	c13e <merge_chunks+0x36>
		((uint16_t *)cmem)[f] = val;
    c160:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
    c164:	e7f2      	b.n	c14c <merge_chunks+0x44>

0000c166 <mem_to_chunkid>:
	return big_heap_chunks(h->end_chunk);
    c166:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
    c168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c16c:	d304      	bcc.n	c178 <mem_to_chunkid+0x12>
    c16e:	2308      	movs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c170:	1ac9      	subs	r1, r1, r3
    c172:	1a08      	subs	r0, r1, r0
}
    c174:	08c0      	lsrs	r0, r0, #3
    c176:	4770      	bx	lr
    c178:	2304      	movs	r3, #4
    c17a:	e7f9      	b.n	c170 <mem_to_chunkid+0xa>

0000c17c <free_list_remove>:
{
    c17c:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
    c17e:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
    c180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c184:	d307      	bcc.n	c196 <free_list_remove+0x1a>
	void *cmem = &buf[c];
    c186:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
    c18a:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    c18c:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
    c18e:	2a01      	cmp	r2, #1
    c190:	d002      	beq.n	c198 <free_list_remove+0x1c>
    c192:	2200      	movs	r2, #0
    c194:	e000      	b.n	c198 <free_list_remove+0x1c>
    c196:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
    c198:	b9a2      	cbnz	r2, c1c4 <free_list_remove+0x48>
	void *cmem = &buf[c];
    c19a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    c19e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c1a2:	d310      	bcc.n	c1c6 <free_list_remove+0x4a>
		return ((uint32_t *)cmem)[f];
    c1a4:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    c1a6:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
    c1a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c1ac:	d30d      	bcc.n	c1ca <free_list_remove+0x4e>
    c1ae:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c1b0:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    c1b2:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
    c1b6:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
    c1b8:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
    c1bc:	f1c2 021f 	rsb	r2, r2, #31
    c1c0:	f7ff feea 	bl	bf98 <free_list_remove_bidx>
}
    c1c4:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
    c1c6:	8852      	ldrh	r2, [r2, #2]
    c1c8:	e7ed      	b.n	c1a6 <free_list_remove+0x2a>
	return big_heap(h) ? 8 : 4;
    c1ca:	2304      	movs	r3, #4
    c1cc:	e7f0      	b.n	c1b0 <free_list_remove+0x34>

0000c1ce <free_list_add>:
{
    c1ce:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
    c1d0:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
    c1d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c1d6:	d307      	bcc.n	c1e8 <free_list_add+0x1a>
	void *cmem = &buf[c];
    c1d8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
    c1dc:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    c1de:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
    c1e0:	2a01      	cmp	r2, #1
    c1e2:	d002      	beq.n	c1ea <free_list_add+0x1c>
    c1e4:	2200      	movs	r2, #0
    c1e6:	e000      	b.n	c1ea <free_list_add+0x1c>
    c1e8:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
    c1ea:	b9a2      	cbnz	r2, c216 <free_list_add+0x48>
	void *cmem = &buf[c];
    c1ec:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    c1f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c1f4:	d310      	bcc.n	c218 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
    c1f6:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    c1f8:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
    c1fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c1fe:	d30d      	bcc.n	c21c <free_list_add+0x4e>
    c200:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c202:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    c204:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
    c208:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
    c20a:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    c20e:	f1c2 021f 	rsb	r2, r2, #31
    c212:	f7ff fef5 	bl	c000 <free_list_add_bidx>
}
    c216:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
    c218:	8852      	ldrh	r2, [r2, #2]
    c21a:	e7ed      	b.n	c1f8 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
    c21c:	2304      	movs	r3, #4
    c21e:	e7f0      	b.n	c202 <free_list_add+0x34>

0000c220 <free_chunk>:
{
    c220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c222:	4604      	mov	r4, r0
    c224:	460d      	mov	r5, r1
	void *cmem = &buf[c];
    c226:	00ce      	lsls	r6, r1, #3
    c228:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    c22c:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    c22e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c232:	d31f      	bcc.n	c274 <free_chunk+0x54>
		return ((uint32_t *)cmem)[f];
    c234:	6879      	ldr	r1, [r7, #4]
	return c + chunk_size(h, c);
    c236:	eb05 0151 	add.w	r1, r5, r1, lsr #1
	void *cmem = &buf[c];
    c23a:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
    c23e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c242:	d319      	bcc.n	c278 <free_chunk+0x58>
		return ((uint32_t *)cmem)[f];
    c244:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, right_chunk(h, c))) {
    c246:	f013 0f01 	tst.w	r3, #1
    c24a:	d017      	beq.n	c27c <free_chunk+0x5c>
	return big_heap_chunks(h->end_chunk);
    c24c:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    c24e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c252:	d324      	bcc.n	c29e <free_chunk+0x7e>
		return ((uint32_t *)cmem)[f];
    c254:	59a1      	ldr	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
    c256:	1a69      	subs	r1, r5, r1
	void *cmem = &buf[c];
    c258:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
    c25c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c260:	d31f      	bcc.n	c2a2 <free_chunk+0x82>
		return ((uint32_t *)cmem)[f];
    c262:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, left_chunk(h, c))) {
    c264:	f013 0f01 	tst.w	r3, #1
    c268:	d01d      	beq.n	c2a6 <free_chunk+0x86>
	free_list_add(h, c);
    c26a:	4629      	mov	r1, r5
    c26c:	4620      	mov	r0, r4
    c26e:	f7ff ffae 	bl	c1ce <free_list_add>
}
    c272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ((uint16_t *)cmem)[f];
    c274:	8879      	ldrh	r1, [r7, #2]
    c276:	e7de      	b.n	c236 <free_chunk+0x16>
    c278:	8853      	ldrh	r3, [r2, #2]
    c27a:	e7e4      	b.n	c246 <free_chunk+0x26>
		free_list_remove(h, right_chunk(h, c));
    c27c:	4620      	mov	r0, r4
    c27e:	f7ff ff7d 	bl	c17c <free_list_remove>
	return big_heap_chunks(h->end_chunk);
    c282:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    c284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c288:	d307      	bcc.n	c29a <free_chunk+0x7a>
		return ((uint32_t *)cmem)[f];
    c28a:	687a      	ldr	r2, [r7, #4]
		merge_chunks(h, c, right_chunk(h, c));
    c28c:	eb05 0252 	add.w	r2, r5, r2, lsr #1
    c290:	4629      	mov	r1, r5
    c292:	4620      	mov	r0, r4
    c294:	f7ff ff38 	bl	c108 <merge_chunks>
    c298:	e7d8      	b.n	c24c <free_chunk+0x2c>
		return ((uint16_t *)cmem)[f];
    c29a:	887a      	ldrh	r2, [r7, #2]
    c29c:	e7f6      	b.n	c28c <free_chunk+0x6c>
    c29e:	5ba1      	ldrh	r1, [r4, r6]
    c2a0:	e7d9      	b.n	c256 <free_chunk+0x36>
    c2a2:	8853      	ldrh	r3, [r2, #2]
    c2a4:	e7de      	b.n	c264 <free_chunk+0x44>
		free_list_remove(h, left_chunk(h, c));
    c2a6:	4620      	mov	r0, r4
    c2a8:	f7ff ff68 	bl	c17c <free_list_remove>
	return big_heap_chunks(h->end_chunk);
    c2ac:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    c2ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c2b2:	d30c      	bcc.n	c2ce <free_chunk+0xae>
		return ((uint32_t *)cmem)[f];
    c2b4:	59a1      	ldr	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
    c2b6:	462a      	mov	r2, r5
    c2b8:	1a69      	subs	r1, r5, r1
    c2ba:	4620      	mov	r0, r4
    c2bc:	f7ff ff24 	bl	c108 <merge_chunks>
	return big_heap_chunks(h->end_chunk);
    c2c0:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    c2c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c2c6:	d304      	bcc.n	c2d2 <free_chunk+0xb2>
		return ((uint32_t *)cmem)[f];
    c2c8:	59a3      	ldr	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
    c2ca:	1aed      	subs	r5, r5, r3
    c2cc:	e7cd      	b.n	c26a <free_chunk+0x4a>
		return ((uint16_t *)cmem)[f];
    c2ce:	5ba1      	ldrh	r1, [r4, r6]
    c2d0:	e7f1      	b.n	c2b6 <free_chunk+0x96>
    c2d2:	5ba3      	ldrh	r3, [r4, r6]
    c2d4:	e7f9      	b.n	c2ca <free_chunk+0xaa>

0000c2d6 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    c2d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->end_chunk);
    c2d8:	6885      	ldr	r5, [r0, #8]
	return big_heap(h) ? 8 : 4;
    c2da:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    c2de:	d311      	bcc.n	c304 <alloc_chunk+0x2e>
    c2e0:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c2e2:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    c2e4:	eba1 03d3 	sub.w	r3, r1, r3, lsr #3
    c2e8:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
    c2ea:	fab3 f383 	clz	r3, r3
    c2ee:	f1c3 021f 	rsb	r2, r3, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    c2f2:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
    c2f6:	f850 c024 	ldr.w	ip, [r0, r4, lsl #2]
    c2fa:	f1bc 0f00 	cmp.w	ip, #0
    c2fe:	d024      	beq.n	c34a <alloc_chunk+0x74>
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
    c300:	2603      	movs	r6, #3
    c302:	e010      	b.n	c326 <alloc_chunk+0x50>
	return big_heap(h) ? 8 : 4;
    c304:	2304      	movs	r3, #4
    c306:	e7ec      	b.n	c2e2 <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
    c308:	f8b7 e002 	ldrh.w	lr, [r7, #2]
    c30c:	e015      	b.n	c33a <alloc_chunk+0x64>
		do {
			chunkid_t c = b->next;
			if (chunk_size(h, c) >= sz) {
				free_list_remove_bidx(h, c, bi);
    c30e:	4621      	mov	r1, r4
    c310:	f7ff fe42 	bl	bf98 <free_list_remove_bidx>
				return c;
    c314:	e021      	b.n	c35a <alloc_chunk+0x84>
    c316:	88fc      	ldrh	r4, [r7, #6]
			}
			b->next = next_free_chunk(h, c);
    c318:	1d17      	adds	r7, r2, #4
    c31a:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
    c31e:	3e01      	subs	r6, #1
    c320:	d013      	beq.n	c34a <alloc_chunk+0x74>
    c322:	45a4      	cmp	ip, r4
    c324:	d011      	beq.n	c34a <alloc_chunk+0x74>
			chunkid_t c = b->next;
    c326:	1d14      	adds	r4, r2, #4
    c328:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
    c32c:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
	if (big_heap(h)) {
    c330:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    c334:	d3e8      	bcc.n	c308 <alloc_chunk+0x32>
		return ((uint32_t *)cmem)[f];
    c336:	f8d7 e004 	ldr.w	lr, [r7, #4]
			if (chunk_size(h, c) >= sz) {
    c33a:	ebb1 0f5e 	cmp.w	r1, lr, lsr #1
    c33e:	d9e6      	bls.n	c30e <alloc_chunk+0x38>
	if (big_heap(h)) {
    c340:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    c344:	d3e7      	bcc.n	c316 <alloc_chunk+0x40>
		return ((uint32_t *)cmem)[f];
    c346:	68fc      	ldr	r4, [r7, #12]
    c348:	e7e6      	b.n	c318 <alloc_chunk+0x42>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    c34a:	68c4      	ldr	r4, [r0, #12]
    c34c:	f1c3 0220 	rsb	r2, r3, #32
    c350:	2301      	movs	r3, #1
    c352:	4093      	lsls	r3, r2
    c354:	425b      	negs	r3, r3

	if (bmask != 0U) {
    c356:	401c      	ands	r4, r3
    c358:	d101      	bne.n	c35e <alloc_chunk+0x88>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    c35a:	4620      	mov	r0, r4
    c35c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask);
    c35e:	fa94 f2a4 	rbit	r2, r4
    c362:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    c366:	1d13      	adds	r3, r2, #4
    c368:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    c36c:	4621      	mov	r1, r4
    c36e:	f7ff fe13 	bl	bf98 <free_list_remove_bidx>
		return c;
    c372:	e7f2      	b.n	c35a <alloc_chunk+0x84>

0000c374 <sys_heap_free>:
	if (mem == NULL) {
    c374:	b1c1      	cbz	r1, c3a8 <sys_heap_free+0x34>
{
    c376:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
    c378:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
    c37a:	4620      	mov	r0, r4
    c37c:	f7ff fef3 	bl	c166 <mem_to_chunkid>
    c380:	4601      	mov	r1, r0
	void *cmem = &buf[c];
    c382:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
    c386:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
    c388:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    c38c:	d307      	bcc.n	c39e <sys_heap_free+0x2a>
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    c38e:	685a      	ldr	r2, [r3, #4]
    c390:	f022 0201 	bic.w	r2, r2, #1
    c394:	605a      	str	r2, [r3, #4]
	free_chunk(h, c);
    c396:	4620      	mov	r0, r4
    c398:	f7ff ff42 	bl	c220 <free_chunk>
}
    c39c:	bd10      	pop	{r4, pc}
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    c39e:	885a      	ldrh	r2, [r3, #2]
    c3a0:	f022 0201 	bic.w	r2, r2, #1
    c3a4:	805a      	strh	r2, [r3, #2]
    c3a6:	e7f6      	b.n	c396 <sys_heap_free+0x22>
    c3a8:	4770      	bx	lr

0000c3aa <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    c3aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
    c3ac:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
    c3ae:	2900      	cmp	r1, #0
    c3b0:	d03c      	beq.n	c42c <sys_heap_alloc+0x82>
    c3b2:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    c3b4:	68aa      	ldr	r2, [r5, #8]
    c3b6:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
    c3ba:	d939      	bls.n	c430 <sys_heap_alloc+0x86>
	return big_heap(h) ? 8 : 4;
    c3bc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    c3c0:	d320      	bcc.n	c404 <sys_heap_alloc+0x5a>
    c3c2:	2408      	movs	r4, #8
	return chunksz(chunk_header_bytes(h) + bytes);
    c3c4:	441c      	add	r4, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c3c6:	3407      	adds	r4, #7
    c3c8:	08e4      	lsrs	r4, r4, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
    c3ca:	4621      	mov	r1, r4
    c3cc:	4628      	mov	r0, r5
    c3ce:	f7ff ff82 	bl	c2d6 <alloc_chunk>
	if (c == 0U) {
    c3d2:	4607      	mov	r7, r0
    c3d4:	b370      	cbz	r0, c434 <sys_heap_alloc+0x8a>
	void *cmem = &buf[c];
    c3d6:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
    c3da:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
    c3dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c3e0:	d312      	bcc.n	c408 <sys_heap_alloc+0x5e>
		return ((uint32_t *)cmem)[f];
    c3e2:	6873      	ldr	r3, [r6, #4]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
    c3e4:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
    c3e8:	d310      	bcc.n	c40c <sys_heap_alloc+0x62>
	return big_heap_chunks(h->end_chunk);
    c3ea:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
    c3ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c3f0:	d317      	bcc.n	c422 <sys_heap_alloc+0x78>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    c3f2:	6873      	ldr	r3, [r6, #4]
    c3f4:	f043 0301 	orr.w	r3, r3, #1
    c3f8:	6073      	str	r3, [r6, #4]

	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
    c3fa:	4639      	mov	r1, r7
    c3fc:	4628      	mov	r0, r5
    c3fe:	f7ff fdc0 	bl	bf82 <chunk_mem>
}
    c402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return big_heap(h) ? 8 : 4;
    c404:	2404      	movs	r4, #4
    c406:	e7dd      	b.n	c3c4 <sys_heap_alloc+0x1a>
		return ((uint16_t *)cmem)[f];
    c408:	8873      	ldrh	r3, [r6, #2]
    c40a:	e7eb      	b.n	c3e4 <sys_heap_alloc+0x3a>
		split_chunks(h, c, c + chunk_sz);
    c40c:	443c      	add	r4, r7
    c40e:	4622      	mov	r2, r4
    c410:	4639      	mov	r1, r7
    c412:	4628      	mov	r0, r5
    c414:	f7ff fe3d 	bl	c092 <split_chunks>
		free_list_add(h, c + chunk_sz);
    c418:	4621      	mov	r1, r4
    c41a:	4628      	mov	r0, r5
    c41c:	f7ff fed7 	bl	c1ce <free_list_add>
    c420:	e7e3      	b.n	c3ea <sys_heap_alloc+0x40>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c422:	8873      	ldrh	r3, [r6, #2]
    c424:	f043 0301 	orr.w	r3, r3, #1
    c428:	8073      	strh	r3, [r6, #2]
    c42a:	e7e6      	b.n	c3fa <sys_heap_alloc+0x50>
		return NULL;
    c42c:	2000      	movs	r0, #0
    c42e:	e7e8      	b.n	c402 <sys_heap_alloc+0x58>
    c430:	2000      	movs	r0, #0
    c432:	e7e6      	b.n	c402 <sys_heap_alloc+0x58>
		return NULL;
    c434:	2000      	movs	r0, #0
    c436:	e7e4      	b.n	c402 <sys_heap_alloc+0x58>

0000c438 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    c438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c43c:	460d      	mov	r5, r1
    c43e:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    c440:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    c442:	424b      	negs	r3, r1
    c444:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
    c448:	ea31 0303 	bics.w	r3, r1, r3
    c44c:	d04e      	beq.n	c4ec <sys_heap_aligned_alloc+0xb4>
		align -= rew;
    c44e:	eba1 0508 	sub.w	r5, r1, r8
	return big_heap_chunks(h->end_chunk);
    c452:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
    c454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c458:	d346      	bcc.n	c4e8 <sys_heap_aligned_alloc+0xb0>
    c45a:	2308      	movs	r3, #8
		gap = MIN(rew, chunk_header_bytes(h));
    c45c:	4598      	cmp	r8, r3
    c45e:	d200      	bcs.n	c462 <sys_heap_aligned_alloc+0x2a>
    c460:	4643      	mov	r3, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    c462:	2c00      	cmp	r4, #0
    c464:	d070      	beq.n	c548 <sys_heap_aligned_alloc+0x110>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    c466:	68b2      	ldr	r2, [r6, #8]
    c468:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
    c46c:	d96e      	bls.n	c54c <sys_heap_aligned_alloc+0x114>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
    c46e:	1929      	adds	r1, r5, r4
    c470:	1ac9      	subs	r1, r1, r3
	return big_heap(h) ? 8 : 4;
    c472:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    c476:	d34a      	bcc.n	c50e <sys_heap_aligned_alloc+0xd6>
    c478:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
    c47a:	4419      	add	r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c47c:	3107      	adds	r1, #7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    c47e:	08c9      	lsrs	r1, r1, #3
    c480:	4630      	mov	r0, r6
    c482:	f7ff ff28 	bl	c2d6 <alloc_chunk>

	if (c0 == 0) {
    c486:	4607      	mov	r7, r0
    c488:	2800      	cmp	r0, #0
    c48a:	d061      	beq.n	c550 <sys_heap_aligned_alloc+0x118>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
    c48c:	4601      	mov	r1, r0
    c48e:	4630      	mov	r0, r6
    c490:	f7ff fd77 	bl	bf82 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    c494:	4440      	add	r0, r8
    c496:	4428      	add	r0, r5
    c498:	3801      	subs	r0, #1
    c49a:	426d      	negs	r5, r5
    c49c:	4005      	ands	r5, r0
    c49e:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    c4a2:	442c      	add	r4, r5
    c4a4:	3407      	adds	r4, #7
    c4a6:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
    c4aa:	4629      	mov	r1, r5
    c4ac:	4630      	mov	r0, r6
    c4ae:	f7ff fe5a 	bl	c166 <mem_to_chunkid>
    c4b2:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
    c4b4:	1ba4      	subs	r4, r4, r6
    c4b6:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
    c4b8:	4287      	cmp	r7, r0
    c4ba:	d32a      	bcc.n	c512 <sys_heap_aligned_alloc+0xda>
	void *cmem = &buf[c];
    c4bc:	eb06 07c8 	add.w	r7, r6, r8, lsl #3
	return big_heap_chunks(h->end_chunk);
    c4c0:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
    c4c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c4c6:	d32e      	bcc.n	c526 <sys_heap_aligned_alloc+0xee>
		return ((uint32_t *)cmem)[f];
    c4c8:	687b      	ldr	r3, [r7, #4]
	return c + chunk_size(h, c);
    c4ca:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
    c4ce:	429c      	cmp	r4, r3
    c4d0:	d32b      	bcc.n	c52a <sys_heap_aligned_alloc+0xf2>
	return big_heap_chunks(h->end_chunk);
    c4d2:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
    c4d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c4d8:	d331      	bcc.n	c53e <sys_heap_aligned_alloc+0x106>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    c4da:	687b      	ldr	r3, [r7, #4]
    c4dc:	f043 0301 	orr.w	r3, r3, #1
    c4e0:	607b      	str	r3, [r7, #4]
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
    c4e2:	4628      	mov	r0, r5
    c4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return big_heap(h) ? 8 : 4;
    c4e8:	2304      	movs	r3, #4
    c4ea:	e7b7      	b.n	c45c <sys_heap_aligned_alloc+0x24>
	return big_heap_chunks(h->end_chunk);
    c4ec:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
    c4ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c4f2:	d305      	bcc.n	c500 <sys_heap_aligned_alloc+0xc8>
    c4f4:	2308      	movs	r3, #8
		if (align <= chunk_header_bytes(h)) {
    c4f6:	429d      	cmp	r5, r3
    c4f8:	d904      	bls.n	c504 <sys_heap_aligned_alloc+0xcc>
		rew = 0;
    c4fa:	f04f 0800 	mov.w	r8, #0
    c4fe:	e7b0      	b.n	c462 <sys_heap_aligned_alloc+0x2a>
    c500:	2304      	movs	r3, #4
    c502:	e7f8      	b.n	c4f6 <sys_heap_aligned_alloc+0xbe>
			return sys_heap_alloc(heap, bytes);
    c504:	4621      	mov	r1, r4
    c506:	f7ff ff50 	bl	c3aa <sys_heap_alloc>
    c50a:	4605      	mov	r5, r0
    c50c:	e7e9      	b.n	c4e2 <sys_heap_aligned_alloc+0xaa>
    c50e:	2304      	movs	r3, #4
    c510:	e7b3      	b.n	c47a <sys_heap_aligned_alloc+0x42>
		split_chunks(h, c0, c);
    c512:	4602      	mov	r2, r0
    c514:	4639      	mov	r1, r7
    c516:	4630      	mov	r0, r6
    c518:	f7ff fdbb 	bl	c092 <split_chunks>
		free_list_add(h, c0);
    c51c:	4639      	mov	r1, r7
    c51e:	4630      	mov	r0, r6
    c520:	f7ff fe55 	bl	c1ce <free_list_add>
    c524:	e7ca      	b.n	c4bc <sys_heap_aligned_alloc+0x84>
		return ((uint16_t *)cmem)[f];
    c526:	887b      	ldrh	r3, [r7, #2]
    c528:	e7cf      	b.n	c4ca <sys_heap_aligned_alloc+0x92>
		split_chunks(h, c, c_end);
    c52a:	4622      	mov	r2, r4
    c52c:	4641      	mov	r1, r8
    c52e:	4630      	mov	r0, r6
    c530:	f7ff fdaf 	bl	c092 <split_chunks>
		free_list_add(h, c_end);
    c534:	4621      	mov	r1, r4
    c536:	4630      	mov	r0, r6
    c538:	f7ff fe49 	bl	c1ce <free_list_add>
    c53c:	e7c9      	b.n	c4d2 <sys_heap_aligned_alloc+0x9a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c53e:	887b      	ldrh	r3, [r7, #2]
    c540:	f043 0301 	orr.w	r3, r3, #1
    c544:	807b      	strh	r3, [r7, #2]
    c546:	e7cc      	b.n	c4e2 <sys_heap_aligned_alloc+0xaa>
		return NULL;
    c548:	2500      	movs	r5, #0
    c54a:	e7ca      	b.n	c4e2 <sys_heap_aligned_alloc+0xaa>
    c54c:	2500      	movs	r5, #0
    c54e:	e7c8      	b.n	c4e2 <sys_heap_aligned_alloc+0xaa>
		return NULL;
    c550:	2500      	movs	r5, #0
    c552:	e7c6      	b.n	c4e2 <sys_heap_aligned_alloc+0xaa>

0000c554 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    c554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c556:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
    c558:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    c55c:	d32a      	bcc.n	c5b4 <sys_heap_init+0x60>
    c55e:	2508      	movs	r5, #8
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    c560:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    c562:	1dc8      	adds	r0, r1, #7
    c564:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    c568:	440d      	add	r5, r1
    c56a:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    c56e:	1a2d      	subs	r5, r5, r0
    c570:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
    c572:	4606      	mov	r6, r0
	heap->heap = h;
    c574:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
    c576:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
    c578:	2300      	movs	r3, #0
    c57a:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
    c57c:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    c580:	d31a      	bcc.n	c5b8 <sys_heap_init+0x64>
    c582:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c584:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    c586:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
    c58a:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
    c58c:	fab3 f383 	clz	r3, r3
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    c590:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    c594:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
    c598:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c59a:	f103 0e07 	add.w	lr, r3, #7
    c59e:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    c5a2:	2300      	movs	r3, #0
    c5a4:	4563      	cmp	r3, ip
    c5a6:	da09      	bge.n	c5bc <sys_heap_init+0x68>
		h->buckets[i].next = 0;
    c5a8:	1d1a      	adds	r2, r3, #4
    c5aa:	2400      	movs	r4, #0
    c5ac:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    c5b0:	3301      	adds	r3, #1
    c5b2:	e7f7      	b.n	c5a4 <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
    c5b4:	2504      	movs	r5, #4
    c5b6:	e7d3      	b.n	c560 <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
    c5b8:	2304      	movs	r3, #4
    c5ba:	e7e3      	b.n	c584 <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c5bc:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
    c5be:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    c5c2:	d333      	bcc.n	c62c <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
    c5c4:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
    c5c6:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    c5ca:	d331      	bcc.n	c630 <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
    c5cc:	2300      	movs	r3, #0
    c5ce:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
    c5d0:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    c5d4:	d32f      	bcc.n	c636 <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    c5d6:	6843      	ldr	r3, [r0, #4]
    c5d8:	f043 0301 	orr.w	r3, r3, #1
    c5dc:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    c5de:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c5e0:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
    c5e2:	f02e 0307 	bic.w	r3, lr, #7
    c5e6:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
    c5e8:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    c5ec:	d328      	bcc.n	c640 <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
    c5ee:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
    c5f0:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    c5f2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    c5f6:	d325      	bcc.n	c644 <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
    c5f8:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
    c5fa:	f025 0307 	bic.w	r3, r5, #7
    c5fe:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
    c600:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    c602:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    c606:	d31f      	bcc.n	c648 <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
    c608:	2400      	movs	r4, #0
    c60a:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
    c60c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    c60e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    c612:	d31c      	bcc.n	c64e <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
    c614:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
    c616:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    c618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c61c:	d319      	bcc.n	c652 <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    c61e:	686b      	ldr	r3, [r5, #4]
    c620:	f043 0301 	orr.w	r3, r3, #1
    c624:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    c626:	f7ff fdd2 	bl	c1ce <free_list_add>
}
    c62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
    c62c:	8043      	strh	r3, [r0, #2]
    c62e:	e7ca      	b.n	c5c6 <sys_heap_init+0x72>
    c630:	2300      	movs	r3, #0
    c632:	8003      	strh	r3, [r0, #0]
    c634:	e7cc      	b.n	c5d0 <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c636:	8843      	ldrh	r3, [r0, #2]
    c638:	f043 0301 	orr.w	r3, r3, #1
    c63c:	8043      	strh	r3, [r0, #2]
    c63e:	e7ce      	b.n	c5de <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
    c640:	8066      	strh	r6, [r4, #2]
    c642:	e7d5      	b.n	c5f0 <sys_heap_init+0x9c>
    c644:	52c1      	strh	r1, [r0, r3]
    c646:	e7d8      	b.n	c5fa <sys_heap_init+0xa6>
    c648:	2400      	movs	r4, #0
    c64a:	806c      	strh	r4, [r5, #2]
    c64c:	e7de      	b.n	c60c <sys_heap_init+0xb8>
    c64e:	52c2      	strh	r2, [r0, r3]
    c650:	e7e1      	b.n	c616 <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c652:	886b      	ldrh	r3, [r5, #2]
    c654:	f043 0301 	orr.w	r3, r3, #1
    c658:	806b      	strh	r3, [r5, #2]
    c65a:	e7e4      	b.n	c626 <sys_heap_init+0xd2>

0000c65c <extract_decimal>:
{
    c65c:	b410      	push	{r4}
    c65e:	4604      	mov	r4, r0
	const char *sp = *str;
    c660:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    c662:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    c664:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    c666:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    c66a:	2909      	cmp	r1, #9
    c66c:	d806      	bhi.n	c67c <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
    c66e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    c672:	3201      	adds	r2, #1
    c674:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    c678:	3830      	subs	r0, #48	; 0x30
    c67a:	e7f3      	b.n	c664 <extract_decimal+0x8>
	*str = sp;
    c67c:	6022      	str	r2, [r4, #0]
}
    c67e:	bc10      	pop	{r4}
    c680:	4770      	bx	lr

0000c682 <encode_uint>:
{
    c682:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c686:	b083      	sub	sp, #12
    c688:	4604      	mov	r4, r0
    c68a:	460d      	mov	r5, r1
    c68c:	9201      	str	r2, [sp, #4]
    c68e:	469a      	mov	sl, r3
    c690:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    c694:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    c696:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    c69a:	2b6f      	cmp	r3, #111	; 0x6f
    c69c:	d00f      	beq.n	c6be <encode_uint+0x3c>
    c69e:	d906      	bls.n	c6ae <encode_uint+0x2c>
    c6a0:	2b70      	cmp	r3, #112	; 0x70
    c6a2:	d00f      	beq.n	c6c4 <encode_uint+0x42>
    c6a4:	2b78      	cmp	r3, #120	; 0x78
    c6a6:	d110      	bne.n	c6ca <encode_uint+0x48>
		return 16;
    c6a8:	f04f 0910 	mov.w	r9, #16
    c6ac:	e026      	b.n	c6fc <encode_uint+0x7a>
	switch (specifier) {
    c6ae:	2b58      	cmp	r3, #88	; 0x58
    c6b0:	d002      	beq.n	c6b8 <encode_uint+0x36>
    c6b2:	f04f 090a 	mov.w	r9, #10
    c6b6:	e021      	b.n	c6fc <encode_uint+0x7a>
		return 16;
    c6b8:	f04f 0910 	mov.w	r9, #16
    c6bc:	e01e      	b.n	c6fc <encode_uint+0x7a>
		return 8;
    c6be:	f04f 0908 	mov.w	r9, #8
    c6c2:	e01b      	b.n	c6fc <encode_uint+0x7a>
		return 16;
    c6c4:	f04f 0910 	mov.w	r9, #16
    c6c8:	e018      	b.n	c6fc <encode_uint+0x7a>
	switch (specifier) {
    c6ca:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    c6ce:	e015      	b.n	c6fc <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c6d0:	f1bb 0f19 	cmp.w	fp, #25
    c6d4:	d820      	bhi.n	c718 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    c6d6:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c6d8:	3237      	adds	r2, #55	; 0x37
    c6da:	b2d2      	uxtb	r2, r2
    c6dc:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
    c6e0:	4632      	mov	r2, r6
    c6e2:	463b      	mov	r3, r7
    c6e4:	4620      	mov	r0, r4
    c6e6:	4629      	mov	r1, r5
    c6e8:	f7f3 fd34 	bl	154 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    c6ec:	42bd      	cmp	r5, r7
    c6ee:	bf08      	it	eq
    c6f0:	42b4      	cmpeq	r4, r6
    c6f2:	d315      	bcc.n	c720 <encode_uint+0x9e>
    c6f4:	45d0      	cmp	r8, sl
    c6f6:	d913      	bls.n	c720 <encode_uint+0x9e>
		value /= radix;
    c6f8:	4604      	mov	r4, r0
    c6fa:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    c6fc:	464e      	mov	r6, r9
    c6fe:	2700      	movs	r7, #0
    c700:	464a      	mov	r2, r9
    c702:	463b      	mov	r3, r7
    c704:	4620      	mov	r0, r4
    c706:	4629      	mov	r1, r5
    c708:	f7f3 fd24 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c70c:	2a09      	cmp	r2, #9
    c70e:	d8df      	bhi.n	c6d0 <encode_uint+0x4e>
    c710:	b2d2      	uxtb	r2, r2
    c712:	3230      	adds	r2, #48	; 0x30
    c714:	b2d2      	uxtb	r2, r2
    c716:	e7e1      	b.n	c6dc <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    c718:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c71a:	3257      	adds	r2, #87	; 0x57
    c71c:	b2d2      	uxtb	r2, r2
    c71e:	e7dd      	b.n	c6dc <encode_uint+0x5a>
	if (conv->flag_hash) {
    c720:	9b01      	ldr	r3, [sp, #4]
    c722:	781b      	ldrb	r3, [r3, #0]
    c724:	f013 0f20 	tst.w	r3, #32
    c728:	d005      	beq.n	c736 <encode_uint+0xb4>
		if (radix == 8) {
    c72a:	f1b9 0f08 	cmp.w	r9, #8
    c72e:	d006      	beq.n	c73e <encode_uint+0xbc>
		} else if (radix == 16) {
    c730:	f1b9 0f10 	cmp.w	r9, #16
    c734:	d009      	beq.n	c74a <encode_uint+0xc8>
}
    c736:	4640      	mov	r0, r8
    c738:	b003      	add	sp, #12
    c73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    c73e:	9a01      	ldr	r2, [sp, #4]
    c740:	7893      	ldrb	r3, [r2, #2]
    c742:	f043 0308 	orr.w	r3, r3, #8
    c746:	7093      	strb	r3, [r2, #2]
    c748:	e7f5      	b.n	c736 <encode_uint+0xb4>
			conv->altform_0c = true;
    c74a:	9a01      	ldr	r2, [sp, #4]
    c74c:	7893      	ldrb	r3, [r2, #2]
    c74e:	f043 0310 	orr.w	r3, r3, #16
    c752:	7093      	strb	r3, [r2, #2]
    c754:	e7ef      	b.n	c736 <encode_uint+0xb4>

0000c756 <outs>:
{
    c756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c75a:	4607      	mov	r7, r0
    c75c:	460e      	mov	r6, r1
    c75e:	4614      	mov	r4, r2
    c760:	4698      	mov	r8, r3
	size_t count = 0;
    c762:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c764:	e006      	b.n	c774 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    c766:	4631      	mov	r1, r6
    c768:	f814 0b01 	ldrb.w	r0, [r4], #1
    c76c:	47b8      	blx	r7
		if (rc < 0) {
    c76e:	2800      	cmp	r0, #0
    c770:	db09      	blt.n	c786 <outs+0x30>
		++count;
    c772:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c774:	4544      	cmp	r4, r8
    c776:	d3f6      	bcc.n	c766 <outs+0x10>
    c778:	f1b8 0f00 	cmp.w	r8, #0
    c77c:	d102      	bne.n	c784 <outs+0x2e>
    c77e:	7823      	ldrb	r3, [r4, #0]
    c780:	2b00      	cmp	r3, #0
    c782:	d1f0      	bne.n	c766 <outs+0x10>
	return (int)count;
    c784:	4628      	mov	r0, r5
}
    c786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c78a <get_rewind_value>:
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
}

static uint32_t get_rewind_value(uint32_t buf_size, uint32_t threshold)
{
	return buf_size * (threshold / buf_size);
    c78a:	fbb1 f1f0 	udiv	r1, r1, r0
}
    c78e:	fb00 f001 	mul.w	r0, r0, r1
    c792:	4770      	bx	lr

0000c794 <mod>:
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    c794:	6983      	ldr	r3, [r0, #24]
    c796:	b113      	cbz	r3, c79e <mod+0xa>
    c798:	ea03 0001 	and.w	r0, r3, r1
    c79c:	4770      	bx	lr
    c79e:	6900      	ldr	r0, [r0, #16]
    c7a0:	fbb1 f3f0 	udiv	r3, r1, r0
    c7a4:	fb00 1013 	mls	r0, r0, r3, r1
}
    c7a8:	4770      	bx	lr

0000c7aa <ring_buf_get_rewind_threshold>:
}
    c7aa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    c7ae:	4770      	bx	lr

0000c7b0 <ring_buf_is_empty>:

int ring_buf_is_empty(struct ring_buf *buf)
{
    c7b0:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
    c7b2:	6844      	ldr	r4, [r0, #4]
	uint32_t head = buf->head;
    c7b4:	6805      	ldr	r5, [r0, #0]

	if (tail < head) {
    c7b6:	42ac      	cmp	r4, r5
    c7b8:	d304      	bcc.n	c7c4 <ring_buf_is_empty+0x14>
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
    c7ba:	42ac      	cmp	r4, r5
    c7bc:	bf14      	ite	ne
    c7be:	2000      	movne	r0, #0
    c7c0:	2001      	moveq	r0, #1
    c7c2:	bd70      	pop	{r4, r5, r6, pc}
		tail += get_rewind_value(buf->size,
    c7c4:	6906      	ldr	r6, [r0, #16]
    c7c6:	f7ff fff0 	bl	c7aa <ring_buf_get_rewind_threshold>
    c7ca:	4601      	mov	r1, r0
    c7cc:	4630      	mov	r0, r6
    c7ce:	f7ff ffdc 	bl	c78a <get_rewind_value>
    c7d2:	4404      	add	r4, r0
    c7d4:	e7f1      	b.n	c7ba <ring_buf_is_empty+0xa>

0000c7d6 <ring_buf_put_claim>:

	return 0;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    c7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c7da:	4604      	mov	r4, r0
    c7dc:	460e      	mov	r6, r1
    c7de:	4617      	mov	r7, r2
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
    c7e0:	f8d0 8008 	ldr.w	r8, [r0, #8]
    c7e4:	4641      	mov	r1, r8
    c7e6:	f7ff ffd5 	bl	c794 <mod>
    c7ea:	4601      	mov	r1, r0
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
    c7ec:	6825      	ldr	r5, [r4, #0]
    c7ee:	6920      	ldr	r0, [r4, #16]
    c7f0:	4405      	add	r5, r0
    c7f2:	eba5 0208 	sub.w	r2, r5, r8
	trail_size = buf->size - tmp_trail_mod;
    c7f6:	1a40      	subs	r0, r0, r1

	/* Limit requested size to available size. */
	size = MIN(size, space);
    c7f8:	42ba      	cmp	r2, r7
    c7fa:	bf28      	it	cs
    c7fc:	463a      	movcs	r2, r7

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
    c7fe:	4290      	cmp	r0, r2
    c800:	bf28      	it	cs
    c802:	4610      	movcs	r0, r2
	*data = &buf->buf.buf8[tmp_trail_mod];
    c804:	6963      	ldr	r3, [r4, #20]
    c806:	4419      	add	r1, r3
    c808:	6031      	str	r1, [r6, #0]

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
    c80a:	68a3      	ldr	r3, [r4, #8]
    c80c:	4403      	add	r3, r0
	buf->misc.byte_mode.tmp_tail =
    c80e:	60a3      	str	r3, [r4, #8]

	return allocated;
}
    c810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c814 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
    c814:	b570      	push	{r4, r5, r6, lr}
    c816:	4604      	mov	r4, r0
    c818:	460d      	mov	r5, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
    c81a:	f7ff ffc6 	bl	c7aa <ring_buf_get_rewind_threshold>
    c81e:	4601      	mov	r1, r0

	if ((buf->tail + size) > (buf->head + buf->size)) {
    c820:	6866      	ldr	r6, [r4, #4]
    c822:	1972      	adds	r2, r6, r5
    c824:	6823      	ldr	r3, [r4, #0]
    c826:	6920      	ldr	r0, [r4, #16]
    c828:	4403      	add	r3, r0
    c82a:	429a      	cmp	r2, r3
    c82c:	d80b      	bhi.n	c846 <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
    c82e:	428e      	cmp	r6, r1
    c830:	d907      	bls.n	c842 <ring_buf_put_finish+0x2e>
		rew = get_rewind_value(buf->size, threshold);
    c832:	f7ff ffaa 	bl	c78a <get_rewind_value>
	} else {
		rew = 0;
	}

	buf->tail += (size - rew);
    c836:	1a2d      	subs	r5, r5, r0
    c838:	442e      	add	r6, r5
    c83a:	6066      	str	r6, [r4, #4]
	buf->misc.byte_mode.tmp_tail = buf->tail;
    c83c:	60a6      	str	r6, [r4, #8]

	return 0;
    c83e:	2000      	movs	r0, #0
}
    c840:	bd70      	pop	{r4, r5, r6, pc}
		rew = 0;
    c842:	2000      	movs	r0, #0
    c844:	e7f7      	b.n	c836 <ring_buf_put_finish+0x22>
		return -EINVAL;
    c846:	f06f 0015 	mvn.w	r0, #21
    c84a:	e7f9      	b.n	c840 <ring_buf_put_finish+0x2c>

0000c84c <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    c84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c850:	b082      	sub	sp, #8
    c852:	4680      	mov	r8, r0
    c854:	460e      	mov	r6, r1
    c856:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    c858:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    c85a:	462a      	mov	r2, r5
    c85c:	a901      	add	r1, sp, #4
    c85e:	4640      	mov	r0, r8
    c860:	f7ff ffb9 	bl	c7d6 <ring_buf_put_claim>
    c864:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    c866:	4602      	mov	r2, r0
    c868:	4631      	mov	r1, r6
    c86a:	9801      	ldr	r0, [sp, #4]
    c86c:	f000 feb0 	bl	d5d0 <memcpy>
		total_size += partial_size;
    c870:	4427      	add	r7, r4
		size -= partial_size;
		data += partial_size;
    c872:	4426      	add	r6, r4
	} while (size && partial_size);
    c874:	1b2d      	subs	r5, r5, r4
    c876:	d001      	beq.n	c87c <ring_buf_put+0x30>
    c878:	2c00      	cmp	r4, #0
    c87a:	d1ee      	bne.n	c85a <ring_buf_put+0xe>

	err = ring_buf_put_finish(buf, total_size);
    c87c:	4639      	mov	r1, r7
    c87e:	4640      	mov	r0, r8
    c880:	f7ff ffc8 	bl	c814 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    c884:	4638      	mov	r0, r7
    c886:	b002      	add	sp, #8
    c888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c88c <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    c88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c890:	4604      	mov	r4, r0
    c892:	460e      	mov	r6, r1
    c894:	4617      	mov	r7, r2
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;
    c896:	6845      	ldr	r5, [r0, #4]

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    c898:	68c3      	ldr	r3, [r0, #12]
    c89a:	42ab      	cmp	r3, r5
    c89c:	d818      	bhi.n	c8d0 <ring_buf_get_claim+0x44>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
    c89e:	f8d4 800c 	ldr.w	r8, [r4, #12]
    c8a2:	4641      	mov	r1, r8
    c8a4:	4620      	mov	r0, r4
    c8a6:	f7ff ff75 	bl	c794 <mod>
    c8aa:	4601      	mov	r1, r0
	space = tail - buf->misc.byte_mode.tmp_head;
    c8ac:	eba5 0508 	sub.w	r5, r5, r8
	trail_size = buf->size - tmp_head_mod;
    c8b0:	6923      	ldr	r3, [r4, #16]
    c8b2:	1a18      	subs	r0, r3, r0

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
    c8b4:	42bd      	cmp	r5, r7
    c8b6:	bf28      	it	cs
    c8b8:	463d      	movcs	r5, r7

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
    c8ba:	42a8      	cmp	r0, r5
    c8bc:	bf28      	it	cs
    c8be:	4628      	movcs	r0, r5

	*data = &buf->buf.buf8[tmp_head_mod];
    c8c0:	6963      	ldr	r3, [r4, #20]
    c8c2:	4419      	add	r1, r3
    c8c4:	6031      	str	r1, [r6, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
    c8c6:	68e3      	ldr	r3, [r4, #12]
    c8c8:	4403      	add	r3, r0
    c8ca:	60e3      	str	r3, [r4, #12]

	return granted_size;
}
    c8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tail += get_rewind_value(buf->size,
    c8d0:	f8d0 8010 	ldr.w	r8, [r0, #16]
    c8d4:	f7ff ff69 	bl	c7aa <ring_buf_get_rewind_threshold>
    c8d8:	4601      	mov	r1, r0
    c8da:	4640      	mov	r0, r8
    c8dc:	f7ff ff55 	bl	c78a <get_rewind_value>
    c8e0:	4405      	add	r5, r0
    c8e2:	e7dc      	b.n	c89e <ring_buf_get_claim+0x12>

0000c8e4 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
    c8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c8e6:	4604      	mov	r4, r0
    c8e8:	460d      	mov	r5, r1
	uint32_t tail = buf->tail;
    c8ea:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    c8ec:	68c3      	ldr	r3, [r0, #12]
    c8ee:	42b3      	cmp	r3, r6
    c8f0:	d80a      	bhi.n	c908 <ring_buf_get_finish+0x24>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
				       ring_buf_get_rewind_threshold());
		tail += rew;
	} else {
		rew = 0;
    c8f2:	2000      	movs	r0, #0
	}

	if ((buf->head + size) > tail) {
    c8f4:	6823      	ldr	r3, [r4, #0]
    c8f6:	195a      	adds	r2, r3, r5
    c8f8:	42b2      	cmp	r2, r6
    c8fa:	d80e      	bhi.n	c91a <ring_buf_get_finish+0x36>
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
    c8fc:	1a2d      	subs	r5, r5, r0
    c8fe:	442b      	add	r3, r5
    c900:	6023      	str	r3, [r4, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
    c902:	60e3      	str	r3, [r4, #12]

	return 0;
    c904:	2000      	movs	r0, #0
}
    c906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = get_rewind_value(buf->size,
    c908:	6907      	ldr	r7, [r0, #16]
    c90a:	f7ff ff4e 	bl	c7aa <ring_buf_get_rewind_threshold>
    c90e:	4601      	mov	r1, r0
    c910:	4638      	mov	r0, r7
    c912:	f7ff ff3a 	bl	c78a <get_rewind_value>
		tail += rew;
    c916:	4406      	add	r6, r0
    c918:	e7ec      	b.n	c8f4 <ring_buf_get_finish+0x10>
		return -EINVAL;
    c91a:	f06f 0015 	mvn.w	r0, #21
    c91e:	e7f2      	b.n	c906 <ring_buf_get_finish+0x22>

0000c920 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    c920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c924:	b082      	sub	sp, #8
    c926:	4680      	mov	r8, r0
    c928:	460e      	mov	r6, r1
    c92a:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    c92c:	2700      	movs	r7, #0
    c92e:	e009      	b.n	c944 <ring_buf_get+0x24>
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
		if (data) {
			memcpy(data, src, partial_size);
    c930:	4602      	mov	r2, r0
    c932:	9901      	ldr	r1, [sp, #4]
    c934:	4630      	mov	r0, r6
    c936:	f000 fe4b 	bl	d5d0 <memcpy>
			data += partial_size;
    c93a:	4426      	add	r6, r4
		}
		total_size += partial_size;
    c93c:	4427      	add	r7, r4
		size -= partial_size;
	} while (size && partial_size);
    c93e:	1b2d      	subs	r5, r5, r4
    c940:	d009      	beq.n	c956 <ring_buf_get+0x36>
    c942:	b144      	cbz	r4, c956 <ring_buf_get+0x36>
		partial_size = ring_buf_get_claim(buf, &src, size);
    c944:	462a      	mov	r2, r5
    c946:	a901      	add	r1, sp, #4
    c948:	4640      	mov	r0, r8
    c94a:	f7ff ff9f 	bl	c88c <ring_buf_get_claim>
    c94e:	4604      	mov	r4, r0
		if (data) {
    c950:	2e00      	cmp	r6, #0
    c952:	d1ed      	bne.n	c930 <ring_buf_get+0x10>
    c954:	e7f2      	b.n	c93c <ring_buf_get+0x1c>

	err = ring_buf_get_finish(buf, total_size);
    c956:	4639      	mov	r1, r7
    c958:	4640      	mov	r0, r8
    c95a:	f7ff ffc3 	bl	c8e4 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    c95e:	4638      	mov	r0, r7
    c960:	b002      	add	sp, #8
    c962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c966 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    c966:	4770      	bx	lr

0000c968 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    c968:	b084      	sub	sp, #16
    c96a:	ab04      	add	r3, sp, #16
    c96c:	e903 0007 	stmdb	r3, {r0, r1, r2}
    c970:	2300      	movs	r3, #0
    c972:	f383 8811 	msr	BASEPRI, r3
    c976:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    c97a:	b004      	add	sp, #16
    c97c:	4770      	bx	lr

0000c97e <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    c97e:	2300      	movs	r3, #0
    c980:	6043      	str	r3, [r0, #4]
	list->head = NULL;
    c982:	6003      	str	r3, [r0, #0]
}
    c984:	4770      	bx	lr

0000c986 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    c986:	6803      	ldr	r3, [r0, #0]
    c988:	b12b      	cbz	r3, c996 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
    c98a:	6843      	ldr	r3, [r0, #4]
    c98c:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
    c98e:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    c990:	2300      	movs	r3, #0
    c992:	600b      	str	r3, [r1, #0]
}
    c994:	4770      	bx	lr
		list->head = msg;
    c996:	6001      	str	r1, [r0, #0]
    c998:	e7f9      	b.n	c98e <log_list_add_tail+0x8>

0000c99a <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    c99a:	6800      	ldr	r0, [r0, #0]
    c99c:	4770      	bx	lr

0000c99e <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
    c99e:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
    c9a0:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
    c9a2:	b108      	cbz	r0, c9a8 <log_list_head_get+0xa>
		list->head = list->head->next;
    c9a4:	6802      	ldr	r2, [r0, #0]
    c9a6:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
    c9a8:	4770      	bx	lr

0000c9aa <dummy_timestamp>:
}
    c9aa:	2000      	movs	r0, #0
    c9ac:	4770      	bx	lr

0000c9ae <msg_filter_check>:
}
    c9ae:	2001      	movs	r0, #1
    c9b0:	4770      	bx	lr

0000c9b2 <default_get_timestamp>:
{
    c9b2:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    c9b4:	f001 fb8e 	bl	e0d4 <sys_clock_cycle_get_32>
}
    c9b8:	bd08      	pop	{r3, pc}

0000c9ba <z_log_get_s_mask>:
{
    c9ba:	b470      	push	{r4, r5, r6}
    c9bc:	4603      	mov	r3, r0
	uint32_t mask = 0U;
    c9be:	2000      	movs	r0, #0
	uint32_t arg = 0U;
    c9c0:	4605      	mov	r5, r0
	bool arm = false;
    c9c2:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
    c9c4:	e001      	b.n	c9ca <z_log_get_s_mask+0x10>
			arm = !arm;
    c9c6:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
    c9ca:	f813 2b01 	ldrb.w	r2, [r3], #1
    c9ce:	b19a      	cbz	r2, c9f8 <z_log_get_s_mask+0x3e>
    c9d0:	428d      	cmp	r5, r1
    c9d2:	d211      	bcs.n	c9f8 <z_log_get_s_mask+0x3e>
		if (curr == '%') {
    c9d4:	2a25      	cmp	r2, #37	; 0x25
    c9d6:	d0f6      	beq.n	c9c6 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
    c9d8:	2c00      	cmp	r4, #0
    c9da:	d0f6      	beq.n	c9ca <z_log_get_s_mask+0x10>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    c9dc:	f042 0620 	orr.w	r6, r2, #32
    c9e0:	3e61      	subs	r6, #97	; 0x61
    c9e2:	2e19      	cmp	r6, #25
    c9e4:	d8f1      	bhi.n	c9ca <z_log_get_s_mask+0x10>
			if (curr == 's') {
    c9e6:	2a73      	cmp	r2, #115	; 0x73
    c9e8:	d002      	beq.n	c9f0 <z_log_get_s_mask+0x36>
			arg++;
    c9ea:	3501      	adds	r5, #1
			arm = false;
    c9ec:	2400      	movs	r4, #0
    c9ee:	e7ec      	b.n	c9ca <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
    c9f0:	2201      	movs	r2, #1
    c9f2:	40aa      	lsls	r2, r5
    c9f4:	4310      	orrs	r0, r2
    c9f6:	e7f8      	b.n	c9ea <z_log_get_s_mask+0x30>
}
    c9f8:	bc70      	pop	{r4, r5, r6}
    c9fa:	4770      	bx	lr

0000c9fc <z_log_get_tag>:
}
    c9fc:	2000      	movs	r0, #0
    c9fe:	4770      	bx	lr

0000ca00 <block_on_alloc>:
}
    ca00:	2000      	movs	r0, #0
    ca02:	4770      	bx	lr

0000ca04 <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    ca04:	2901      	cmp	r1, #1
    ca06:	d906      	bls.n	ca16 <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
    ca08:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    ca0a:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
    ca0c:	2906      	cmp	r1, #6
    ca0e:	d907      	bls.n	ca20 <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
    ca10:	3907      	subs	r1, #7
		cont = cont->next;
    ca12:	681b      	ldr	r3, [r3, #0]
    ca14:	e7fa      	b.n	ca0c <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
    ca16:	3104      	adds	r1, #4
    ca18:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    ca1c:	6888      	ldr	r0, [r1, #8]
    ca1e:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
    ca20:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    ca24:	6848      	ldr	r0, [r1, #4]
}
    ca26:	4770      	bx	lr

0000ca28 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    ca28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ca2c:	461c      	mov	r4, r3
    ca2e:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
    ca32:	8903      	ldrh	r3, [r0, #8]
    ca34:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
    ca38:	42a3      	cmp	r3, r4
    ca3a:	d91f      	bls.n	ca7c <log_msg_hexdump_data_op+0x54>
    ca3c:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
    ca3e:	6811      	ldr	r1, [r2, #0]
    ca40:	4421      	add	r1, r4
    ca42:	4299      	cmp	r1, r3
    ca44:	d901      	bls.n	ca4a <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
    ca46:	1b19      	subs	r1, r3, r4
    ca48:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
    ca4a:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    ca4c:	2b0c      	cmp	r3, #12
    ca4e:	d919      	bls.n	ca84 <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
    ca50:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
    ca54:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    ca56:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
    ca58:	42a3      	cmp	r3, r4
    ca5a:	d91e      	bls.n	ca9a <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    ca5c:	42bb      	cmp	r3, r7
    ca5e:	bf28      	it	cs
    ca60:	463b      	movcs	r3, r7
    ca62:	461d      	mov	r5, r3

		if (put_op) {
    ca64:	f1b9 0f00 	cmp.w	r9, #0
    ca68:	d010      	beq.n	ca8c <log_msg_hexdump_data_op+0x64>
			(void)memcpy(&head_data[offset], data, cpy_len);
    ca6a:	461a      	mov	r2, r3
    ca6c:	4641      	mov	r1, r8
    ca6e:	eb0c 0004 	add.w	r0, ip, r4
    ca72:	f000 fdad 	bl	d5d0 <memcpy>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
    ca76:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
    ca78:	44a8      	add	r8, r5
    ca7a:	e021      	b.n	cac0 <log_msg_hexdump_data_op+0x98>
		*length = 0;
    ca7c:	2300      	movs	r3, #0
    ca7e:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    ca80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
    ca84:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
    ca88:	2600      	movs	r6, #0
    ca8a:	e7e5      	b.n	ca58 <log_msg_hexdump_data_op+0x30>
			(void)memcpy(data, &head_data[offset], cpy_len);
    ca8c:	461a      	mov	r2, r3
    ca8e:	eb0c 0104 	add.w	r1, ip, r4
    ca92:	4640      	mov	r0, r8
    ca94:	f000 fd9c 	bl	d5d0 <memcpy>
    ca98:	e7ed      	b.n	ca76 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
    ca9a:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
    ca9c:	b91e      	cbnz	r6, caa6 <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
    ca9e:	6946      	ldr	r6, [r0, #20]
    caa0:	e001      	b.n	caa6 <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
    caa2:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
    caa4:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
    caa6:	2c1b      	cmp	r4, #27
    caa8:	d8fb      	bhi.n	caa2 <log_msg_hexdump_data_op+0x7a>
    caaa:	e009      	b.n	cac0 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
    caac:	1931      	adds	r1, r6, r4
    caae:	462a      	mov	r2, r5
    cab0:	3104      	adds	r1, #4
    cab2:	4640      	mov	r0, r8
    cab4:	f000 fd8c 	bl	d5d0 <memcpy>
		cont = cont->next;
    cab8:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
    caba:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
    cabc:	44a8      	add	r8, r5
		offset = 0;
    cabe:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
    cac0:	2f00      	cmp	r7, #0
    cac2:	d0dd      	beq.n	ca80 <log_msg_hexdump_data_op+0x58>
    cac4:	2e00      	cmp	r6, #0
    cac6:	d0db      	beq.n	ca80 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    cac8:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    cacc:	42bd      	cmp	r5, r7
    cace:	bf28      	it	cs
    cad0:	463d      	movcs	r5, r7
		if (put_op) {
    cad2:	f1b9 0f00 	cmp.w	r9, #0
    cad6:	d0e9      	beq.n	caac <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
    cad8:	1930      	adds	r0, r6, r4
    cada:	462a      	mov	r2, r5
    cadc:	4641      	mov	r1, r8
    cade:	3004      	adds	r0, #4
    cae0:	f000 fd76 	bl	d5d0 <memcpy>
    cae4:	e7e8      	b.n	cab8 <log_msg_hexdump_data_op+0x90>

0000cae6 <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
    cae6:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    cae8:	e8d0 3fef 	ldaex	r3, [r0]
    caec:	3301      	adds	r3, #1
    caee:	e8c0 3fe2 	stlex	r2, r3, [r0]
    caf2:	2a00      	cmp	r2, #0
    caf4:	d1f8      	bne.n	cae8 <log_msg_get+0x2>
}
    caf6:	4770      	bx	lr

0000caf8 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    caf8:	7a40      	ldrb	r0, [r0, #9]
}
    cafa:	0900      	lsrs	r0, r0, #4
    cafc:	4770      	bx	lr

0000cafe <log_msg_arg_get>:
{
    cafe:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
    cb00:	7a43      	ldrb	r3, [r0, #9]
    cb02:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
    cb06:	d20a      	bcs.n	cb1e <log_msg_arg_get+0x20>
    cb08:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    cb0a:	2a03      	cmp	r2, #3
    cb0c:	d804      	bhi.n	cb18 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
    cb0e:	3104      	adds	r1, #4
    cb10:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    cb14:	6840      	ldr	r0, [r0, #4]
    cb16:	e003      	b.n	cb20 <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
    cb18:	f7ff ff74 	bl	ca04 <cont_arg_get>
    cb1c:	e000      	b.n	cb20 <log_msg_arg_get+0x22>
		return 0;
    cb1e:	2000      	movs	r0, #0
}
    cb20:	bd08      	pop	{r3, pc}

0000cb22 <log_msg_str_get>:
}
    cb22:	6900      	ldr	r0, [r0, #16]
    cb24:	4770      	bx	lr

0000cb26 <log_msg_put>:
{
    cb26:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
    cb28:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    cb2a:	e8d3 2fef 	ldaex	r2, [r3]
    cb2e:	3a01      	subs	r2, #1
    cb30:	e8c3 2fe1 	stlex	r1, r2, [r3]
    cb34:	2900      	cmp	r1, #0
    cb36:	d1f8      	bne.n	cb2a <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
    cb38:	6843      	ldr	r3, [r0, #4]
    cb3a:	b103      	cbz	r3, cb3e <log_msg_put+0x18>
}
    cb3c:	bd08      	pop	{r3, pc}
		msg_free(msg);
    cb3e:	f7f5 f841 	bl	1bc4 <msg_free>
}
    cb42:	e7fb      	b.n	cb3c <log_msg_put+0x16>

0000cb44 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
    cb44:	b510      	push	{r4, lr}
    cb46:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    cb48:	2400      	movs	r4, #0
    cb4a:	9400      	str	r4, [sp, #0]
    cb4c:	f7ff ff6c 	bl	ca28 <log_msg_hexdump_data_op>
}
    cb50:	b002      	add	sp, #8
    cb52:	bd10      	pop	{r4, pc}

0000cb54 <buffer_write>:
{
    cb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cb56:	4607      	mov	r7, r0
    cb58:	460d      	mov	r5, r1
    cb5a:	4614      	mov	r4, r2
    cb5c:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    cb5e:	4632      	mov	r2, r6
    cb60:	4621      	mov	r1, r4
    cb62:	4628      	mov	r0, r5
    cb64:	47b8      	blx	r7
		buf += processed;
    cb66:	4405      	add	r5, r0
	} while (len != 0);
    cb68:	1a24      	subs	r4, r4, r0
    cb6a:	d1f8      	bne.n	cb5e <buffer_write+0xa>
}
    cb6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000cb6e <color_prefix>:
{
    cb6e:	b508      	push	{r3, lr}
    cb70:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    cb72:	2201      	movs	r2, #1
    cb74:	f7f5 f8be 	bl	1cf4 <color_print>
}
    cb78:	bd08      	pop	{r3, pc}

0000cb7a <color_postfix>:
{
    cb7a:	b508      	push	{r3, lr}
    cb7c:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    cb7e:	2200      	movs	r2, #0
    cb80:	f7f5 f8b8 	bl	1cf4 <color_print>
}
    cb84:	bd08      	pop	{r3, pc}

0000cb86 <postfix_print>:
{
    cb86:	b538      	push	{r3, r4, r5, lr}
    cb88:	4605      	mov	r5, r0
    cb8a:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    cb8c:	f001 0101 	and.w	r1, r1, #1
    cb90:	f7ff fff3 	bl	cb7a <color_postfix>
	newline_print(output, flags);
    cb94:	4621      	mov	r1, r4
    cb96:	4628      	mov	r0, r5
    cb98:	f7f5 f8c2 	bl	1d20 <newline_print>
}
    cb9c:	bd38      	pop	{r3, r4, r5, pc}

0000cb9e <std_print>:
{
    cb9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cba2:	b08e      	sub	sp, #56	; 0x38
    cba4:	af0e      	add	r7, sp, #56	; 0x38
    cba6:	4606      	mov	r6, r0
    cba8:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
    cbaa:	f7ff ffba 	bl	cb22 <log_msg_str_get>
    cbae:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
    cbb0:	4630      	mov	r0, r6
    cbb2:	f7ff ffa1 	bl	caf8 <log_msg_nargs_get>
    cbb6:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
    cbb8:	0083      	lsls	r3, r0, #2
    cbba:	3307      	adds	r3, #7
    cbbc:	f023 0307 	bic.w	r3, r3, #7
    cbc0:	ebad 0d03 	sub.w	sp, sp, r3
    cbc4:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    cbc6:	2400      	movs	r4, #0
    cbc8:	4544      	cmp	r4, r8
    cbca:	d207      	bcs.n	cbdc <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
    cbcc:	4621      	mov	r1, r4
    cbce:	4630      	mov	r0, r6
    cbd0:	f7ff ff95 	bl	cafe <log_msg_arg_get>
    cbd4:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
    cbd8:	3401      	adds	r4, #1
    cbda:	e7f5      	b.n	cbc8 <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
    cbdc:	4630      	mov	r0, r6
    cbde:	f7ff ff8b 	bl	caf8 <log_msg_nargs_get>
    cbe2:	280f      	cmp	r0, #15
    cbe4:	d815      	bhi.n	cc12 <std_print+0x74>
    cbe6:	e8df f010 	tbh	[pc, r0, lsl #1]
    cbea:	0010      	.short	0x0010
    cbec:	001d0017 	.word	0x001d0017
    cbf0:	002d0024 	.word	0x002d0024
    cbf4:	00450038 	.word	0x00450038
    cbf8:	00650054 	.word	0x00650054
    cbfc:	008d0078 	.word	0x008d0078
    cc00:	00bd00a4 	.word	0x00bd00a4
    cc04:	00f500d8 	.word	0x00f500d8
    cc08:	0114      	.short	0x0114
		print_formatted(output, str);
    cc0a:	4651      	mov	r1, sl
    cc0c:	4648      	mov	r0, r9
    cc0e:	f7f5 f819 	bl	1c44 <print_formatted>
}
    cc12:	46bd      	mov	sp, r7
    cc14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
    cc18:	682a      	ldr	r2, [r5, #0]
    cc1a:	4651      	mov	r1, sl
    cc1c:	4648      	mov	r0, r9
    cc1e:	f7f5 f811 	bl	1c44 <print_formatted>
		break;
    cc22:	e7f6      	b.n	cc12 <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
    cc24:	686b      	ldr	r3, [r5, #4]
    cc26:	682a      	ldr	r2, [r5, #0]
    cc28:	4651      	mov	r1, sl
    cc2a:	4648      	mov	r0, r9
    cc2c:	f7f5 f80a 	bl	1c44 <print_formatted>
		break;
    cc30:	e7ef      	b.n	cc12 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
    cc32:	686b      	ldr	r3, [r5, #4]
    cc34:	682a      	ldr	r2, [r5, #0]
    cc36:	68a9      	ldr	r1, [r5, #8]
    cc38:	9100      	str	r1, [sp, #0]
    cc3a:	4651      	mov	r1, sl
    cc3c:	4648      	mov	r0, r9
    cc3e:	f7f5 f801 	bl	1c44 <print_formatted>
		break;
    cc42:	e7e6      	b.n	cc12 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    cc44:	686b      	ldr	r3, [r5, #4]
    cc46:	682a      	ldr	r2, [r5, #0]
    cc48:	68e9      	ldr	r1, [r5, #12]
    cc4a:	9101      	str	r1, [sp, #4]
    cc4c:	68a9      	ldr	r1, [r5, #8]
    cc4e:	9100      	str	r1, [sp, #0]
    cc50:	4651      	mov	r1, sl
    cc52:	4648      	mov	r0, r9
    cc54:	f7f4 fff6 	bl	1c44 <print_formatted>
		break;
    cc58:	e7db      	b.n	cc12 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    cc5a:	686b      	ldr	r3, [r5, #4]
    cc5c:	682a      	ldr	r2, [r5, #0]
    cc5e:	6929      	ldr	r1, [r5, #16]
    cc60:	9102      	str	r1, [sp, #8]
    cc62:	68e9      	ldr	r1, [r5, #12]
    cc64:	9101      	str	r1, [sp, #4]
    cc66:	68a9      	ldr	r1, [r5, #8]
    cc68:	9100      	str	r1, [sp, #0]
    cc6a:	4651      	mov	r1, sl
    cc6c:	4648      	mov	r0, r9
    cc6e:	f7f4 ffe9 	bl	1c44 <print_formatted>
		break;
    cc72:	e7ce      	b.n	cc12 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    cc74:	686b      	ldr	r3, [r5, #4]
    cc76:	682a      	ldr	r2, [r5, #0]
    cc78:	6969      	ldr	r1, [r5, #20]
    cc7a:	9103      	str	r1, [sp, #12]
    cc7c:	6929      	ldr	r1, [r5, #16]
    cc7e:	9102      	str	r1, [sp, #8]
    cc80:	68e9      	ldr	r1, [r5, #12]
    cc82:	9101      	str	r1, [sp, #4]
    cc84:	68a9      	ldr	r1, [r5, #8]
    cc86:	9100      	str	r1, [sp, #0]
    cc88:	4651      	mov	r1, sl
    cc8a:	4648      	mov	r0, r9
    cc8c:	f7f4 ffda 	bl	1c44 <print_formatted>
		break;
    cc90:	e7bf      	b.n	cc12 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    cc92:	686b      	ldr	r3, [r5, #4]
    cc94:	682a      	ldr	r2, [r5, #0]
    cc96:	69a9      	ldr	r1, [r5, #24]
    cc98:	9104      	str	r1, [sp, #16]
    cc9a:	6969      	ldr	r1, [r5, #20]
    cc9c:	9103      	str	r1, [sp, #12]
    cc9e:	6929      	ldr	r1, [r5, #16]
    cca0:	9102      	str	r1, [sp, #8]
    cca2:	68e9      	ldr	r1, [r5, #12]
    cca4:	9101      	str	r1, [sp, #4]
    cca6:	68a9      	ldr	r1, [r5, #8]
    cca8:	9100      	str	r1, [sp, #0]
    ccaa:	4651      	mov	r1, sl
    ccac:	4648      	mov	r0, r9
    ccae:	f7f4 ffc9 	bl	1c44 <print_formatted>
		break;
    ccb2:	e7ae      	b.n	cc12 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    ccb4:	686b      	ldr	r3, [r5, #4]
    ccb6:	682a      	ldr	r2, [r5, #0]
    ccb8:	69e9      	ldr	r1, [r5, #28]
    ccba:	9105      	str	r1, [sp, #20]
    ccbc:	69a9      	ldr	r1, [r5, #24]
    ccbe:	9104      	str	r1, [sp, #16]
    ccc0:	6969      	ldr	r1, [r5, #20]
    ccc2:	9103      	str	r1, [sp, #12]
    ccc4:	6929      	ldr	r1, [r5, #16]
    ccc6:	9102      	str	r1, [sp, #8]
    ccc8:	68e9      	ldr	r1, [r5, #12]
    ccca:	9101      	str	r1, [sp, #4]
    cccc:	68a9      	ldr	r1, [r5, #8]
    ccce:	9100      	str	r1, [sp, #0]
    ccd0:	4651      	mov	r1, sl
    ccd2:	4648      	mov	r0, r9
    ccd4:	f7f4 ffb6 	bl	1c44 <print_formatted>
		break;
    ccd8:	e79b      	b.n	cc12 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    ccda:	686b      	ldr	r3, [r5, #4]
    ccdc:	682a      	ldr	r2, [r5, #0]
    ccde:	6a29      	ldr	r1, [r5, #32]
    cce0:	9106      	str	r1, [sp, #24]
    cce2:	69e9      	ldr	r1, [r5, #28]
    cce4:	9105      	str	r1, [sp, #20]
    cce6:	69a9      	ldr	r1, [r5, #24]
    cce8:	9104      	str	r1, [sp, #16]
    ccea:	6969      	ldr	r1, [r5, #20]
    ccec:	9103      	str	r1, [sp, #12]
    ccee:	6929      	ldr	r1, [r5, #16]
    ccf0:	9102      	str	r1, [sp, #8]
    ccf2:	68e9      	ldr	r1, [r5, #12]
    ccf4:	9101      	str	r1, [sp, #4]
    ccf6:	68a9      	ldr	r1, [r5, #8]
    ccf8:	9100      	str	r1, [sp, #0]
    ccfa:	4651      	mov	r1, sl
    ccfc:	4648      	mov	r0, r9
    ccfe:	f7f4 ffa1 	bl	1c44 <print_formatted>
		break;
    cd02:	e786      	b.n	cc12 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    cd04:	686b      	ldr	r3, [r5, #4]
    cd06:	682a      	ldr	r2, [r5, #0]
    cd08:	6a69      	ldr	r1, [r5, #36]	; 0x24
    cd0a:	9107      	str	r1, [sp, #28]
    cd0c:	6a29      	ldr	r1, [r5, #32]
    cd0e:	9106      	str	r1, [sp, #24]
    cd10:	69e9      	ldr	r1, [r5, #28]
    cd12:	9105      	str	r1, [sp, #20]
    cd14:	69a9      	ldr	r1, [r5, #24]
    cd16:	9104      	str	r1, [sp, #16]
    cd18:	6969      	ldr	r1, [r5, #20]
    cd1a:	9103      	str	r1, [sp, #12]
    cd1c:	6929      	ldr	r1, [r5, #16]
    cd1e:	9102      	str	r1, [sp, #8]
    cd20:	68e9      	ldr	r1, [r5, #12]
    cd22:	9101      	str	r1, [sp, #4]
    cd24:	68a9      	ldr	r1, [r5, #8]
    cd26:	9100      	str	r1, [sp, #0]
    cd28:	4651      	mov	r1, sl
    cd2a:	4648      	mov	r0, r9
    cd2c:	f7f4 ff8a 	bl	1c44 <print_formatted>
		break;
    cd30:	e76f      	b.n	cc12 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    cd32:	686b      	ldr	r3, [r5, #4]
    cd34:	682a      	ldr	r2, [r5, #0]
    cd36:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    cd38:	9108      	str	r1, [sp, #32]
    cd3a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    cd3c:	9107      	str	r1, [sp, #28]
    cd3e:	6a29      	ldr	r1, [r5, #32]
    cd40:	9106      	str	r1, [sp, #24]
    cd42:	69e9      	ldr	r1, [r5, #28]
    cd44:	9105      	str	r1, [sp, #20]
    cd46:	69a9      	ldr	r1, [r5, #24]
    cd48:	9104      	str	r1, [sp, #16]
    cd4a:	6969      	ldr	r1, [r5, #20]
    cd4c:	9103      	str	r1, [sp, #12]
    cd4e:	6929      	ldr	r1, [r5, #16]
    cd50:	9102      	str	r1, [sp, #8]
    cd52:	68e9      	ldr	r1, [r5, #12]
    cd54:	9101      	str	r1, [sp, #4]
    cd56:	68a9      	ldr	r1, [r5, #8]
    cd58:	9100      	str	r1, [sp, #0]
    cd5a:	4651      	mov	r1, sl
    cd5c:	4648      	mov	r0, r9
    cd5e:	f7f4 ff71 	bl	1c44 <print_formatted>
		break;
    cd62:	e756      	b.n	cc12 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    cd64:	686b      	ldr	r3, [r5, #4]
    cd66:	682a      	ldr	r2, [r5, #0]
    cd68:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    cd6a:	9109      	str	r1, [sp, #36]	; 0x24
    cd6c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    cd6e:	9108      	str	r1, [sp, #32]
    cd70:	6a69      	ldr	r1, [r5, #36]	; 0x24
    cd72:	9107      	str	r1, [sp, #28]
    cd74:	6a29      	ldr	r1, [r5, #32]
    cd76:	9106      	str	r1, [sp, #24]
    cd78:	69e9      	ldr	r1, [r5, #28]
    cd7a:	9105      	str	r1, [sp, #20]
    cd7c:	69a9      	ldr	r1, [r5, #24]
    cd7e:	9104      	str	r1, [sp, #16]
    cd80:	6969      	ldr	r1, [r5, #20]
    cd82:	9103      	str	r1, [sp, #12]
    cd84:	6929      	ldr	r1, [r5, #16]
    cd86:	9102      	str	r1, [sp, #8]
    cd88:	68e9      	ldr	r1, [r5, #12]
    cd8a:	9101      	str	r1, [sp, #4]
    cd8c:	68a9      	ldr	r1, [r5, #8]
    cd8e:	9100      	str	r1, [sp, #0]
    cd90:	4651      	mov	r1, sl
    cd92:	4648      	mov	r0, r9
    cd94:	f7f4 ff56 	bl	1c44 <print_formatted>
		break;
    cd98:	e73b      	b.n	cc12 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    cd9a:	686b      	ldr	r3, [r5, #4]
    cd9c:	682a      	ldr	r2, [r5, #0]
    cd9e:	6b29      	ldr	r1, [r5, #48]	; 0x30
    cda0:	910a      	str	r1, [sp, #40]	; 0x28
    cda2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    cda4:	9109      	str	r1, [sp, #36]	; 0x24
    cda6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    cda8:	9108      	str	r1, [sp, #32]
    cdaa:	6a69      	ldr	r1, [r5, #36]	; 0x24
    cdac:	9107      	str	r1, [sp, #28]
    cdae:	6a29      	ldr	r1, [r5, #32]
    cdb0:	9106      	str	r1, [sp, #24]
    cdb2:	69e9      	ldr	r1, [r5, #28]
    cdb4:	9105      	str	r1, [sp, #20]
    cdb6:	69a9      	ldr	r1, [r5, #24]
    cdb8:	9104      	str	r1, [sp, #16]
    cdba:	6969      	ldr	r1, [r5, #20]
    cdbc:	9103      	str	r1, [sp, #12]
    cdbe:	6929      	ldr	r1, [r5, #16]
    cdc0:	9102      	str	r1, [sp, #8]
    cdc2:	68e9      	ldr	r1, [r5, #12]
    cdc4:	9101      	str	r1, [sp, #4]
    cdc6:	68a9      	ldr	r1, [r5, #8]
    cdc8:	9100      	str	r1, [sp, #0]
    cdca:	4651      	mov	r1, sl
    cdcc:	4648      	mov	r0, r9
    cdce:	f7f4 ff39 	bl	1c44 <print_formatted>
		break;
    cdd2:	e71e      	b.n	cc12 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    cdd4:	686b      	ldr	r3, [r5, #4]
    cdd6:	682a      	ldr	r2, [r5, #0]
    cdd8:	6b69      	ldr	r1, [r5, #52]	; 0x34
    cdda:	910b      	str	r1, [sp, #44]	; 0x2c
    cddc:	6b29      	ldr	r1, [r5, #48]	; 0x30
    cdde:	910a      	str	r1, [sp, #40]	; 0x28
    cde0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    cde2:	9109      	str	r1, [sp, #36]	; 0x24
    cde4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    cde6:	9108      	str	r1, [sp, #32]
    cde8:	6a69      	ldr	r1, [r5, #36]	; 0x24
    cdea:	9107      	str	r1, [sp, #28]
    cdec:	6a29      	ldr	r1, [r5, #32]
    cdee:	9106      	str	r1, [sp, #24]
    cdf0:	69e9      	ldr	r1, [r5, #28]
    cdf2:	9105      	str	r1, [sp, #20]
    cdf4:	69a9      	ldr	r1, [r5, #24]
    cdf6:	9104      	str	r1, [sp, #16]
    cdf8:	6969      	ldr	r1, [r5, #20]
    cdfa:	9103      	str	r1, [sp, #12]
    cdfc:	6929      	ldr	r1, [r5, #16]
    cdfe:	9102      	str	r1, [sp, #8]
    ce00:	68e9      	ldr	r1, [r5, #12]
    ce02:	9101      	str	r1, [sp, #4]
    ce04:	68a9      	ldr	r1, [r5, #8]
    ce06:	9100      	str	r1, [sp, #0]
    ce08:	4651      	mov	r1, sl
    ce0a:	4648      	mov	r0, r9
    ce0c:	f7f4 ff1a 	bl	1c44 <print_formatted>
		break;
    ce10:	e6ff      	b.n	cc12 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    ce12:	686b      	ldr	r3, [r5, #4]
    ce14:	682a      	ldr	r2, [r5, #0]
    ce16:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    ce18:	910c      	str	r1, [sp, #48]	; 0x30
    ce1a:	6b69      	ldr	r1, [r5, #52]	; 0x34
    ce1c:	910b      	str	r1, [sp, #44]	; 0x2c
    ce1e:	6b29      	ldr	r1, [r5, #48]	; 0x30
    ce20:	910a      	str	r1, [sp, #40]	; 0x28
    ce22:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    ce24:	9109      	str	r1, [sp, #36]	; 0x24
    ce26:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    ce28:	9108      	str	r1, [sp, #32]
    ce2a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    ce2c:	9107      	str	r1, [sp, #28]
    ce2e:	6a29      	ldr	r1, [r5, #32]
    ce30:	9106      	str	r1, [sp, #24]
    ce32:	69e9      	ldr	r1, [r5, #28]
    ce34:	9105      	str	r1, [sp, #20]
    ce36:	69a9      	ldr	r1, [r5, #24]
    ce38:	9104      	str	r1, [sp, #16]
    ce3a:	6969      	ldr	r1, [r5, #20]
    ce3c:	9103      	str	r1, [sp, #12]
    ce3e:	6929      	ldr	r1, [r5, #16]
    ce40:	9102      	str	r1, [sp, #8]
    ce42:	68e9      	ldr	r1, [r5, #12]
    ce44:	9101      	str	r1, [sp, #4]
    ce46:	68a9      	ldr	r1, [r5, #8]
    ce48:	9100      	str	r1, [sp, #0]
    ce4a:	4651      	mov	r1, sl
    ce4c:	4648      	mov	r0, r9
    ce4e:	f7f4 fef9 	bl	1c44 <print_formatted>
}
    ce52:	e6de      	b.n	cc12 <std_print+0x74>

0000ce54 <log_output_flush>:
{
    ce54:	b510      	push	{r4, lr}
    ce56:	4604      	mov	r4, r0
		     output->control_block->offset,
    ce58:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    ce5a:	6853      	ldr	r3, [r2, #4]
    ce5c:	6812      	ldr	r2, [r2, #0]
    ce5e:	6881      	ldr	r1, [r0, #8]
    ce60:	6800      	ldr	r0, [r0, #0]
    ce62:	f7ff fe77 	bl	cb54 <buffer_write>
	output->control_block->offset = 0;
    ce66:	6863      	ldr	r3, [r4, #4]
    ce68:	2200      	movs	r2, #0
    ce6a:	601a      	str	r2, [r3, #0]
}
    ce6c:	bd10      	pop	{r4, pc}

0000ce6e <out_func>:
{
    ce6e:	b538      	push	{r3, r4, r5, lr}
    ce70:	4605      	mov	r5, r0
    ce72:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    ce74:	684b      	ldr	r3, [r1, #4]
    ce76:	681a      	ldr	r2, [r3, #0]
    ce78:	68cb      	ldr	r3, [r1, #12]
    ce7a:	429a      	cmp	r2, r3
    ce7c:	d00b      	beq.n	ce96 <out_func+0x28>
	idx = atomic_inc(&out_ctx->control_block->offset);
    ce7e:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    ce80:	e8d3 2fef 	ldaex	r2, [r3]
    ce84:	1c51      	adds	r1, r2, #1
    ce86:	e8c3 1fe0 	stlex	r0, r1, [r3]
    ce8a:	2800      	cmp	r0, #0
    ce8c:	d1f8      	bne.n	ce80 <out_func+0x12>
	out_ctx->buf[idx] = (uint8_t)c;
    ce8e:	68a3      	ldr	r3, [r4, #8]
    ce90:	549d      	strb	r5, [r3, r2]
}
    ce92:	2000      	movs	r0, #0
    ce94:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
    ce96:	4608      	mov	r0, r1
    ce98:	f7ff ffdc 	bl	ce54 <log_output_flush>
    ce9c:	e7ef      	b.n	ce7e <out_func+0x10>

0000ce9e <log_output_msg_process>:
{
    ce9e:	b5f0      	push	{r4, r5, r6, r7, lr}
    cea0:	b085      	sub	sp, #20
    cea2:	4606      	mov	r6, r0
    cea4:	460c      	mov	r4, r1
    cea6:	4617      	mov	r7, r2
    cea8:	7a0b      	ldrb	r3, [r1, #8]
    ceaa:	f083 0301 	eor.w	r3, r3, #1
    ceae:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
    ceb2:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
    ceb4:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
    ceb6:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
    ceba:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
    cebc:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
    cec0:	f011 0507 	ands.w	r5, r1, #7
    cec4:	d10f      	bne.n	cee6 <log_output_msg_process+0x48>
    cec6:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    cec8:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
    ceca:	f013 0f01 	tst.w	r3, #1
    cece:	d014      	beq.n	cefa <log_output_msg_process+0x5c>
	} else if (raw_string) {
    ced0:	b9c5      	cbnz	r5, cf04 <log_output_msg_process+0x66>
		raw_string_print(msg, output);
    ced2:	4631      	mov	r1, r6
    ced4:	4620      	mov	r0, r4
    ced6:	f7f5 f831 	bl	1f3c <raw_string_print>
	if (!raw_string) {
    ceda:	b9cd      	cbnz	r5, cf10 <log_output_msg_process+0x72>
	log_output_flush(output);
    cedc:	4630      	mov	r0, r6
    cede:	f7ff ffb9 	bl	ce54 <log_output_flush>
}
    cee2:	b005      	add	sp, #20
    cee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
    cee6:	9002      	str	r0, [sp, #8]
    cee8:	f8cd c004 	str.w	ip, [sp, #4]
    ceec:	9500      	str	r5, [sp, #0]
    ceee:	4639      	mov	r1, r7
    cef0:	4630      	mov	r0, r6
    cef2:	f7f4 ffbd 	bl	1e70 <prefix_print>
    cef6:	4602      	mov	r2, r0
    cef8:	e7e6      	b.n	cec8 <log_output_msg_process+0x2a>
		std_print(msg, output);
    cefa:	4631      	mov	r1, r6
    cefc:	4620      	mov	r0, r4
    cefe:	f7ff fe4e 	bl	cb9e <std_print>
    cf02:	e7ea      	b.n	ceda <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
    cf04:	463b      	mov	r3, r7
    cf06:	4631      	mov	r1, r6
    cf08:	4620      	mov	r0, r4
    cf0a:	f7f4 ffed 	bl	1ee8 <hexdump_print>
    cf0e:	e7e4      	b.n	ceda <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
    cf10:	462a      	mov	r2, r5
    cf12:	4639      	mov	r1, r7
    cf14:	4630      	mov	r0, r6
    cf16:	f7ff fe36 	bl	cb86 <postfix_print>
    cf1a:	e7df      	b.n	cedc <log_output_msg_process+0x3e>

0000cf1c <usb_vbus_set>:
}
    cf1c:	2000      	movs	r0, #0
    cf1e:	4770      	bx	lr

0000cf20 <usb_eps_reconfigure>:
{
    cf20:	b508      	push	{r3, lr}
	if (cur_alt_setting != alt_setting) {
    cf22:	4291      	cmp	r1, r2
    cf24:	d002      	beq.n	cf2c <usb_eps_reconfigure+0xc>
		ret = reset_endpoint(ep_desc);
    cf26:	f7f5 fb51 	bl	25cc <reset_endpoint>
}
    cf2a:	bd08      	pop	{r3, pc}
		ret = set_endpoint(ep_desc);
    cf2c:	f7f5 fa56 	bl	23dc <set_endpoint>
    cf30:	e7fb      	b.n	cf2a <usb_eps_reconfigure+0xa>

0000cf32 <usb_handle_std_interface_req>:
{
    cf32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf34:	4604      	mov	r4, r0
    cf36:	460e      	mov	r6, r1
    cf38:	4615      	mov	r5, r2
	uint8_t *data = *data_buf;
    cf3a:	6817      	ldr	r7, [r2, #0]
	if (!is_device_configured() ||
    cf3c:	f7f5 f948 	bl	21d0 <is_device_configured>
    cf40:	b900      	cbnz	r0, cf44 <usb_handle_std_interface_req+0x12>
}
    cf42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    cf44:	7920      	ldrb	r0, [r4, #4]
    cf46:	f7f5 f94d 	bl	21e4 <is_interface_valid>
	if (!is_device_configured() ||
    cf4a:	2800      	cmp	r0, #0
    cf4c:	d0f9      	beq.n	cf42 <usb_handle_std_interface_req+0x10>
	if (usb_reqtype_is_to_host(setup)) {
    cf4e:	f994 3000 	ldrsb.w	r3, [r4]
    cf52:	2b00      	cmp	r3, #0
    cf54:	db04      	blt.n	cf60 <usb_handle_std_interface_req+0x2e>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    cf56:	7863      	ldrb	r3, [r4, #1]
    cf58:	2b0b      	cmp	r3, #11
    cf5a:	d013      	beq.n	cf84 <usb_handle_std_interface_req+0x52>
	return false;
    cf5c:	2000      	movs	r0, #0
    cf5e:	e7f0      	b.n	cf42 <usb_handle_std_interface_req+0x10>
		switch (setup->bRequest) {
    cf60:	7863      	ldrb	r3, [r4, #1]
    cf62:	b11b      	cbz	r3, cf6c <usb_handle_std_interface_req+0x3a>
    cf64:	2b0a      	cmp	r3, #10
    cf66:	d007      	beq.n	cf78 <usb_handle_std_interface_req+0x46>
    cf68:	2000      	movs	r0, #0
    cf6a:	e7ea      	b.n	cf42 <usb_handle_std_interface_req+0x10>
			data[0] = 0U;
    cf6c:	2300      	movs	r3, #0
    cf6e:	703b      	strb	r3, [r7, #0]
			data[1] = 0U;
    cf70:	707b      	strb	r3, [r7, #1]
			*len = 2;
    cf72:	2302      	movs	r3, #2
    cf74:	6033      	str	r3, [r6, #0]
			return true;
    cf76:	e7e4      	b.n	cf42 <usb_handle_std_interface_req+0x10>
			return usb_get_interface(setup, len, data_buf);
    cf78:	462a      	mov	r2, r5
    cf7a:	4631      	mov	r1, r6
    cf7c:	4620      	mov	r0, r4
    cf7e:	f7f5 f909 	bl	2194 <usb_get_interface>
    cf82:	e7de      	b.n	cf42 <usb_handle_std_interface_req+0x10>
			return usb_set_interface(setup);
    cf84:	4620      	mov	r0, r4
    cf86:	f7f5 fb4b 	bl	2620 <usb_set_interface>
    cf8a:	e7da      	b.n	cf42 <usb_handle_std_interface_req+0x10>

0000cf8c <disable_interface_ep>:
{
    cf8c:	b508      	push	{r3, lr}
	return usb_dc_ep_disable(ep_data->ep_addr);
    cf8e:	7900      	ldrb	r0, [r0, #4]
    cf90:	f7f8 ff78 	bl	5e84 <usb_dc_ep_disable>
}
    cf94:	bd08      	pop	{r3, pc}

0000cf96 <usb_get_status_endpoint>:
{
    cf96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf98:	460e      	mov	r6, r1
	uint8_t ep = setup->wIndex;
    cf9a:	7904      	ldrb	r4, [r0, #4]
	uint8_t *data = *data_buf;
    cf9c:	6817      	ldr	r7, [r2, #0]
	if (!is_ep_valid(ep)) {
    cf9e:	4620      	mov	r0, r4
    cfa0:	f7f5 f932 	bl	2208 <is_ep_valid>
    cfa4:	4605      	mov	r5, r0
    cfa6:	b130      	cbz	r0, cfb6 <usb_get_status_endpoint+0x20>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    cfa8:	f034 0380 	bics.w	r3, r4, #128	; 0x80
    cfac:	d005      	beq.n	cfba <usb_get_status_endpoint+0x24>
    cfae:	f7f5 f90f 	bl	21d0 <is_device_configured>
    cfb2:	b910      	cbnz	r0, cfba <usb_get_status_endpoint+0x24>
	return false;
    cfb4:	4605      	mov	r5, r0
}
    cfb6:	4628      	mov	r0, r5
    cfb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_dc_ep_is_stalled(ep, &data[0]);
    cfba:	4639      	mov	r1, r7
    cfbc:	4620      	mov	r0, r4
    cfbe:	f7f8 ff0f 	bl	5de0 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    cfc2:	2300      	movs	r3, #0
    cfc4:	707b      	strb	r3, [r7, #1]
		*len = 2;
    cfc6:	2302      	movs	r3, #2
    cfc8:	6033      	str	r3, [r6, #0]
		return true;
    cfca:	e7f4      	b.n	cfb6 <usb_get_status_endpoint+0x20>

0000cfcc <usb_handle_std_endpoint_req>:
{
    cfcc:	b508      	push	{r3, lr}
	if (usb_reqtype_is_to_host(setup)) {
    cfce:	f990 3000 	ldrsb.w	r3, [r0]
    cfd2:	2b00      	cmp	r3, #0
    cfd4:	db06      	blt.n	cfe4 <usb_handle_std_endpoint_req+0x18>
		switch (setup->bRequest) {
    cfd6:	7843      	ldrb	r3, [r0, #1]
    cfd8:	2b01      	cmp	r3, #1
    cfda:	d00a      	beq.n	cff2 <usb_handle_std_endpoint_req+0x26>
    cfdc:	2b03      	cmp	r3, #3
    cfde:	d010      	beq.n	d002 <usb_handle_std_endpoint_req+0x36>
    cfe0:	2000      	movs	r0, #0
    cfe2:	e002      	b.n	cfea <usb_handle_std_endpoint_req+0x1e>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    cfe4:	7843      	ldrb	r3, [r0, #1]
    cfe6:	b10b      	cbz	r3, cfec <usb_handle_std_endpoint_req+0x20>
	return false;
    cfe8:	2000      	movs	r0, #0
}
    cfea:	bd08      	pop	{r3, pc}
			return usb_get_status_endpoint(setup, len, data_buf);
    cfec:	f7ff ffd3 	bl	cf96 <usb_get_status_endpoint>
    cff0:	e7fb      	b.n	cfea <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    cff2:	8843      	ldrh	r3, [r0, #2]
    cff4:	b10b      	cbz	r3, cffa <usb_handle_std_endpoint_req+0x2e>
	return false;
    cff6:	2000      	movs	r0, #0
    cff8:	e7f7      	b.n	cfea <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, false);
    cffa:	2100      	movs	r1, #0
    cffc:	f7f5 f9be 	bl	237c <usb_halt_endpoint_req>
    d000:	e7f3      	b.n	cfea <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    d002:	8843      	ldrh	r3, [r0, #2]
    d004:	b10b      	cbz	r3, d00a <usb_handle_std_endpoint_req+0x3e>
	return false;
    d006:	2000      	movs	r0, #0
    d008:	e7ef      	b.n	cfea <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, true);
    d00a:	2101      	movs	r1, #1
    d00c:	f7f5 f9b6 	bl	237c <usb_halt_endpoint_req>
    d010:	e7eb      	b.n	cfea <usb_handle_std_endpoint_req+0x1e>

0000d012 <usb_write>:
{
    d012:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d016:	4681      	mov	r9, r0
    d018:	4688      	mov	r8, r1
    d01a:	4617      	mov	r7, r2
    d01c:	461e      	mov	r6, r3
	int tries = CONFIG_USB_NUMOF_EP_WRITE_RETRIES;
    d01e:	2503      	movs	r5, #3
    d020:	e000      	b.n	d024 <usb_write+0x12>
	} while (ret == -EAGAIN && tries--);
    d022:	461d      	mov	r5, r3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    d024:	4633      	mov	r3, r6
    d026:	463a      	mov	r2, r7
    d028:	4641      	mov	r1, r8
    d02a:	4648      	mov	r0, r9
    d02c:	f7f8 ff54 	bl	5ed8 <usb_dc_ep_write>
    d030:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    d032:	f110 0f0b 	cmn.w	r0, #11
    d036:	d008      	beq.n	d04a <usb_write+0x38>
	} while (ret == -EAGAIN && tries--);
    d038:	f114 0f0b 	cmn.w	r4, #11
    d03c:	d102      	bne.n	d044 <usb_write+0x32>
    d03e:	1e6b      	subs	r3, r5, #1
    d040:	2d00      	cmp	r5, #0
    d042:	d1ee      	bne.n	d022 <usb_write+0x10>
}
    d044:	4620      	mov	r0, r4
    d046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_impl_k_yield();
    d04a:	f7fe f86d 	bl	b128 <z_impl_k_yield>
}
    d04e:	e7f3      	b.n	d038 <usb_write+0x26>

0000d050 <ascii7_to_utf16le>:
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    d050:	f810 2b02 	ldrb.w	r2, [r0], #2
    d054:	1ed3      	subs	r3, r2, #3
	int ascii_idx_max = USB_BSTRING_ASCII_IDX_MAX(str_descr->bLength);
    d056:	0852      	lsrs	r2, r2, #1
    d058:	3a02      	subs	r2, #2
	for (int i = idx_max; i >= 0; i -= 2) {
    d05a:	2b00      	cmp	r3, #0
    d05c:	db0b      	blt.n	d076 <ascii7_to_utf16le+0x26>
{
    d05e:	b410      	push	{r4}
		buf[i] = 0U;
    d060:	2100      	movs	r1, #0
    d062:	54c1      	strb	r1, [r0, r3]
		buf[i - 1] = buf[ascii_idx_max--];
    d064:	1e59      	subs	r1, r3, #1
    d066:	5c84      	ldrb	r4, [r0, r2]
    d068:	5444      	strb	r4, [r0, r1]
	for (int i = idx_max; i >= 0; i -= 2) {
    d06a:	3b02      	subs	r3, #2
		buf[i - 1] = buf[ascii_idx_max--];
    d06c:	3a01      	subs	r2, #1
	for (int i = idx_max; i >= 0; i -= 2) {
    d06e:	2b00      	cmp	r3, #0
    d070:	daf6      	bge.n	d060 <ascii7_to_utf16le+0x10>
}
    d072:	bc10      	pop	{r4}
    d074:	4770      	bx	lr
    d076:	4770      	bx	lr

0000d078 <usb_validate_ep_cfg_data>:
{
    d078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d07c:	b083      	sub	sp, #12
    d07e:	4605      	mov	r5, r0
    d080:	4689      	mov	r9, r1
    d082:	4690      	mov	r8, r2
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    d084:	2700      	movs	r7, #0
    d086:	e04a      	b.n	d11e <usb_validate_ep_cfg_data+0xa6>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    d088:	f8d8 2000 	ldr.w	r2, [r8]
    d08c:	f104 0110 	add.w	r1, r4, #16
    d090:	2301      	movs	r3, #1
    d092:	408b      	lsls	r3, r1
    d094:	421a      	tst	r2, r3
    d096:	d108      	bne.n	d0aa <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    d098:	f064 037f 	orn	r3, r4, #127	; 0x7f
    d09c:	f88d 3000 	strb.w	r3, [sp]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    d0a0:	4668      	mov	r0, sp
    d0a2:	f7f8 fdaf 	bl	5c04 <usb_dc_ep_check_cap>
    d0a6:	4603      	mov	r3, r0
    d0a8:	b1d0      	cbz	r0, d0e0 <usb_validate_ep_cfg_data+0x68>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    d0aa:	3401      	adds	r4, #1
    d0ac:	b2e4      	uxtb	r4, r4
    d0ae:	2c0f      	cmp	r4, #15
    d0b0:	d834      	bhi.n	d11c <usb_validate_ep_cfg_data+0xa4>
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    d0b2:	78eb      	ldrb	r3, [r5, #3]
    d0b4:	f003 0303 	and.w	r3, r3, #3
    d0b8:	f88d 3004 	strb.w	r3, [sp, #4]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    d0bc:	88ab      	ldrh	r3, [r5, #4]
    d0be:	f8ad 3002 	strh.w	r3, [sp, #2]
			ep_cfg.ep_addr = ep_descr->bEndpointAddress;
    d0c2:	78ab      	ldrb	r3, [r5, #2]
    d0c4:	f88d 3000 	strb.w	r3, [sp]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    d0c8:	f013 0f80 	tst.w	r3, #128	; 0x80
    d0cc:	d1dc      	bne.n	d088 <usb_validate_ep_cfg_data+0x10>
				if ((*requested_ep & (1U << (idx)))) {
    d0ce:	f8d8 2000 	ldr.w	r2, [r8]
    d0d2:	2301      	movs	r3, #1
    d0d4:	40a3      	lsls	r3, r4
    d0d6:	421a      	tst	r2, r3
    d0d8:	d1e7      	bne.n	d0aa <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = idx;
    d0da:	f88d 4000 	strb.w	r4, [sp]
    d0de:	e7df      	b.n	d0a0 <usb_validate_ep_cfg_data+0x28>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    d0e0:	f89d 2000 	ldrb.w	r2, [sp]
    d0e4:	70aa      	strb	r2, [r5, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    d0e6:	7132      	strb	r2, [r6, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    d0e8:	f012 0f80 	tst.w	r2, #128	; 0x80
    d0ec:	d10b      	bne.n	d106 <usb_validate_ep_cfg_data+0x8e>
					*requested_ep |= (1U << idx);
    d0ee:	2201      	movs	r2, #1
    d0f0:	fa02 f404 	lsl.w	r4, r2, r4
    d0f4:	f8d8 2000 	ldr.w	r2, [r8]
    d0f8:	4322      	orrs	r2, r4
    d0fa:	f8c8 2000 	str.w	r2, [r8]
}
    d0fe:	4618      	mov	r0, r3
    d100:	b003      	add	sp, #12
    d102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					*requested_ep |= (1U << (idx + 16U));
    d106:	f104 0110 	add.w	r1, r4, #16
    d10a:	2201      	movs	r2, #1
    d10c:	fa02 f101 	lsl.w	r1, r2, r1
    d110:	f8d8 2000 	ldr.w	r2, [r8]
    d114:	430a      	orrs	r2, r1
    d116:	f8c8 2000 	str.w	r2, [r8]
    d11a:	e7f0      	b.n	d0fe <usb_validate_ep_cfg_data+0x86>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    d11c:	3701      	adds	r7, #1
    d11e:	f899 301c 	ldrb.w	r3, [r9, #28]
    d122:	429f      	cmp	r7, r3
    d124:	d209      	bcs.n	d13a <usb_validate_ep_cfg_data+0xc2>
		struct usb_ep_cfg_data *ep_data = cfg_data->endpoint;
    d126:	f8d9 6020 	ldr.w	r6, [r9, #32]
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    d12a:	78aa      	ldrb	r2, [r5, #2]
    d12c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
    d130:	7933      	ldrb	r3, [r6, #4]
    d132:	429a      	cmp	r2, r3
    d134:	d1f2      	bne.n	d11c <usb_validate_ep_cfg_data+0xa4>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    d136:	2401      	movs	r4, #1
    d138:	e7b9      	b.n	d0ae <usb_validate_ep_cfg_data+0x36>
	return -1;
    d13a:	f04f 33ff 	mov.w	r3, #4294967295
    d13e:	e7de      	b.n	d0fe <usb_validate_ep_cfg_data+0x86>

0000d140 <usb_get_dev_data_by_cfg>:
	return list->head;
    d140:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d142:	b110      	cbz	r0, d14a <usb_get_dev_data_by_cfg+0xa>
    d144:	3804      	subs	r0, #4
    d146:	e000      	b.n	d14a <usb_get_dev_data_by_cfg+0xa>
    d148:	3804      	subs	r0, #4
    d14a:	b140      	cbz	r0, d15e <usb_get_dev_data_by_cfg+0x1e>
		const struct device *dev = dev_data->dev;
    d14c:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg_cur = dev->config;
    d14e:	685b      	ldr	r3, [r3, #4]

		if (cfg_cur == cfg) {
    d150:	428b      	cmp	r3, r1
    d152:	d004      	beq.n	d15e <usb_get_dev_data_by_cfg+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    d154:	1d03      	adds	r3, r0, #4
    d156:	d003      	beq.n	d160 <usb_get_dev_data_by_cfg+0x20>
	return node->next;
    d158:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d15a:	2800      	cmp	r0, #0
    d15c:	d1f4      	bne.n	d148 <usb_get_dev_data_by_cfg+0x8>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    d15e:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d160:	4618      	mov	r0, r3
    d162:	e7f2      	b.n	d14a <usb_get_dev_data_by_cfg+0xa>

0000d164 <usb_get_dev_data_by_iface>:
	return list->head;
    d164:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d166:	b110      	cbz	r0, d16e <usb_get_dev_data_by_iface+0xa>
    d168:	3804      	subs	r0, #4
    d16a:	e000      	b.n	d16e <usb_get_dev_data_by_iface+0xa>
    d16c:	3804      	subs	r0, #4
    d16e:	b150      	cbz	r0, d186 <usb_get_dev_data_by_iface+0x22>
		const struct device *dev = dev_data->dev;
    d170:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
    d172:	685b      	ldr	r3, [r3, #4]
		const struct usb_if_descriptor *if_desc =
    d174:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    d176:	789b      	ldrb	r3, [r3, #2]
    d178:	428b      	cmp	r3, r1
    d17a:	d004      	beq.n	d186 <usb_get_dev_data_by_iface+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    d17c:	1d03      	adds	r3, r0, #4
    d17e:	d003      	beq.n	d188 <usb_get_dev_data_by_iface+0x24>
	return node->next;
    d180:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d182:	2800      	cmp	r0, #0
    d184:	d1f2      	bne.n	d16c <usb_get_dev_data_by_iface+0x8>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    d186:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d188:	4618      	mov	r0, r3
    d18a:	e7f0      	b.n	d16e <usb_get_dev_data_by_iface+0xa>

0000d18c <usb_get_dev_data_by_ep>:
	return list->head;
    d18c:	6800      	ldr	r0, [r0, #0]

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d18e:	b100      	cbz	r0, d192 <usb_get_dev_data_by_ep+0x6>
    d190:	3804      	subs	r0, #4
    d192:	b1d0      	cbz	r0, d1ca <usb_get_dev_data_by_ep+0x3e>
{
    d194:	b430      	push	{r4, r5}
    d196:	e005      	b.n	d1a4 <usb_get_dev_data_by_ep+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
    d198:	1d03      	adds	r3, r0, #4
    d19a:	d012      	beq.n	d1c2 <usb_get_dev_data_by_ep+0x36>
	return node->next;
    d19c:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d19e:	b190      	cbz	r0, d1c6 <usb_get_dev_data_by_ep+0x3a>
    d1a0:	3804      	subs	r0, #4
    d1a2:	b180      	cbz	r0, d1c6 <usb_get_dev_data_by_ep+0x3a>
		const struct device *dev = dev_data->dev;
    d1a4:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
    d1a6:	685c      	ldr	r4, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    d1a8:	6a25      	ldr	r5, [r4, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    d1aa:	2300      	movs	r3, #0
    d1ac:	7f22      	ldrb	r2, [r4, #28]
    d1ae:	429a      	cmp	r2, r3
    d1b0:	d9f2      	bls.n	d198 <usb_get_dev_data_by_ep+0xc>
			if (ep_data[i].ep_addr == ep) {
    d1b2:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    d1b6:	7912      	ldrb	r2, [r2, #4]
    d1b8:	428a      	cmp	r2, r1
    d1ba:	d004      	beq.n	d1c6 <usb_get_dev_data_by_ep+0x3a>
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    d1bc:	3301      	adds	r3, #1
    d1be:	b2db      	uxtb	r3, r3
    d1c0:	e7f4      	b.n	d1ac <usb_get_dev_data_by_ep+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d1c2:	4618      	mov	r0, r3
    d1c4:	e7ed      	b.n	d1a2 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    d1c6:	bc30      	pop	{r4, r5}
    d1c8:	4770      	bx	lr
    d1ca:	4770      	bx	lr

0000d1cc <usb_transfer_is_busy>:
{
    d1cc:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    d1ce:	f7f5 fddf 	bl	2d90 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    d1d2:	b128      	cbz	r0, d1e0 <usb_transfer_is_busy+0x14>
    d1d4:	6843      	ldr	r3, [r0, #4]
    d1d6:	f113 0f10 	cmn.w	r3, #16
    d1da:	d003      	beq.n	d1e4 <usb_transfer_is_busy+0x18>
	return false;
    d1dc:	2000      	movs	r0, #0
}
    d1de:	bd08      	pop	{r3, pc}
	return false;
    d1e0:	2000      	movs	r0, #0
    d1e2:	e7fc      	b.n	d1de <usb_transfer_is_busy+0x12>
		return true;
    d1e4:	2001      	movs	r0, #1
    d1e6:	e7fa      	b.n	d1de <usb_transfer_is_busy+0x12>

0000d1e8 <cdc_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    d1e8:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    d1ea:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    d1ec:	1c4b      	adds	r3, r1, #1
    d1ee:	b2db      	uxtb	r3, r3
    d1f0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    d1f4:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    d1f6:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    d1fa:	4770      	bx	lr

0000d1fc <cdc_acm_irq_callback_work_handler>:
{
    d1fc:	b508      	push	{r3, lr}
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    d1fe:	f850 3c08 	ldr.w	r3, [r0, #-8]
    d202:	f850 1c04 	ldr.w	r1, [r0, #-4]
    d206:	6f80      	ldr	r0, [r0, #120]	; 0x78
    d208:	4798      	blx	r3
}
    d20a:	bd08      	pop	{r3, pc}

0000d20c <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    d20c:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
    d20e:	2200      	movs	r2, #0
    d210:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
    d214:	4770      	bx	lr

0000d216 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    d216:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    d218:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    d21c:	b122      	cbz	r2, d228 <cdc_acm_irq_tx_ready+0x12>
    d21e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    d222:	b91b      	cbnz	r3, d22c <cdc_acm_irq_tx_ready+0x16>
	return 0;
    d224:	2000      	movs	r0, #0
    d226:	4770      	bx	lr
    d228:	2000      	movs	r0, #0
    d22a:	4770      	bx	lr
		return 1;
    d22c:	2001      	movs	r0, #1
}
    d22e:	4770      	bx	lr

0000d230 <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    d230:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
    d232:	2200      	movs	r2, #0
    d234:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
    d238:	4770      	bx	lr

0000d23a <cdc_acm_irq_rx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    d23a:	6903      	ldr	r3, [r0, #16]
	if (dev_data->rx_ready) {
    d23c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    d240:	b90b      	cbnz	r3, d246 <cdc_acm_irq_rx_ready+0xc>
	return 0;
    d242:	2000      	movs	r0, #0
    d244:	4770      	bx	lr
		return 1;
    d246:	2001      	movs	r0, #1
}
    d248:	4770      	bx	lr

0000d24a <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    d24a:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    d24c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    d250:	b112      	cbz	r2, d258 <cdc_acm_irq_is_pending+0xe>
    d252:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    d256:	b93a      	cbnz	r2, d268 <cdc_acm_irq_is_pending+0x1e>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    d258:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    d25c:	b132      	cbz	r2, d26c <cdc_acm_irq_is_pending+0x22>
    d25e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    d262:	b92b      	cbnz	r3, d270 <cdc_acm_irq_is_pending+0x26>
		return 0;
    d264:	2000      	movs	r0, #0
    d266:	4770      	bx	lr
		return 1;
    d268:	2001      	movs	r0, #1
    d26a:	4770      	bx	lr
		return 0;
    d26c:	2000      	movs	r0, #0
    d26e:	4770      	bx	lr
		return 1;
    d270:	2001      	movs	r0, #1
}
    d272:	4770      	bx	lr

0000d274 <cdc_acm_irq_update>:
}
    d274:	2001      	movs	r0, #1
    d276:	4770      	bx	lr

0000d278 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    d278:	6903      	ldr	r3, [r0, #16]
	dev_data->cb = cb;
    d27a:	6019      	str	r1, [r3, #0]
	dev_data->cb_data = cb_data;
    d27c:	605a      	str	r2, [r3, #4]
}
    d27e:	4770      	bx	lr

0000d280 <cdc_acm_baudrate_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    d280:	6903      	ldr	r3, [r0, #16]
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    d282:	6759      	str	r1, [r3, #116]	; 0x74
}
    d284:	4770      	bx	lr

0000d286 <cdc_acm_line_ctrl_get>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    d286:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    d288:	2902      	cmp	r1, #2
    d28a:	d00a      	beq.n	d2a2 <cdc_acm_line_ctrl_get+0x1c>
    d28c:	2904      	cmp	r1, #4
    d28e:	d00f      	beq.n	d2b0 <cdc_acm_line_ctrl_get+0x2a>
    d290:	2901      	cmp	r1, #1
    d292:	d002      	beq.n	d29a <cdc_acm_line_ctrl_get+0x14>
    d294:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    d298:	4770      	bx	lr
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    d29a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    d29c:	6013      	str	r3, [r2, #0]
		return 0;
    d29e:	2000      	movs	r0, #0
    d2a0:	4770      	bx	lr
		*val = (dev_data->line_state &
    d2a2:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    d2a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
		*val = (dev_data->line_state &
    d2aa:	6013      	str	r3, [r2, #0]
		return 0;
    d2ac:	2000      	movs	r0, #0
    d2ae:	4770      	bx	lr
		*val = (dev_data->line_state &
    d2b0:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    d2b4:	f003 0301 	and.w	r3, r3, #1
		*val = (dev_data->line_state &
    d2b8:	6013      	str	r3, [r2, #0]
		return 0;
    d2ba:	2000      	movs	r0, #0
    d2bc:	4770      	bx	lr

0000d2be <cdc_acm_line_ctrl_set>:
{
    d2be:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    d2c0:	6904      	ldr	r4, [r0, #16]
	switch (ctrl) {
    d2c2:	2940      	cmp	r1, #64	; 0x40
    d2c4:	f000 8081 	beq.w	d3ca <cdc_acm_line_ctrl_set+0x10c>
    d2c8:	d81b      	bhi.n	d302 <cdc_acm_line_ctrl_set+0x44>
    d2ca:	2920      	cmp	r1, #32
    d2cc:	f200 809f 	bhi.w	d40e <cdc_acm_line_ctrl_set+0x150>
    d2d0:	2900      	cmp	r1, #0
    d2d2:	f000 809f 	beq.w	d414 <cdc_acm_line_ctrl_set+0x156>
    d2d6:	1e4b      	subs	r3, r1, #1
    d2d8:	2b1f      	cmp	r3, #31
    d2da:	f200 809e 	bhi.w	d41a <cdc_acm_line_ctrl_set+0x15c>
    d2de:	e8df f003 	tbb	[pc, r3]
    d2e2:	9c3d      	.short	0x9c3d
    d2e4:	9c9c9c9c 	.word	0x9c9c9c9c
    d2e8:	9c9c429c 	.word	0x9c9c429c
    d2ec:	9c9c9c9c 	.word	0x9c9c9c9c
    d2f0:	9c9c529c 	.word	0x9c9c529c
    d2f4:	9c9c9c9c 	.word	0x9c9c9c9c
    d2f8:	9c9c9c9c 	.word	0x9c9c9c9c
    d2fc:	9c9c9c9c 	.word	0x9c9c9c9c
    d300:	639c      	.short	0x639c
    d302:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    d306:	d071      	beq.n	d3ec <cdc_acm_line_ctrl_set+0x12e>
    d308:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    d30c:	d110      	bne.n	d330 <cdc_acm_line_ctrl_set+0x72>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    d30e:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    d312:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
    d316:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    d31a:	b11a      	cbz	r2, d324 <cdc_acm_line_ctrl_set+0x66>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    d31c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d320:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    d324:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    d328:	f7f6 f970 	bl	360c <cdc_acm_send_notification>
		return 0;
    d32c:	2000      	movs	r0, #0
    d32e:	e019      	b.n	d364 <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
    d330:	2980      	cmp	r1, #128	; 0x80
    d332:	d110      	bne.n	d356 <cdc_acm_line_ctrl_set+0x98>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    d334:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    d338:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    d33c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    d340:	b11a      	cbz	r2, d34a <cdc_acm_line_ctrl_set+0x8c>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    d342:	f043 0310 	orr.w	r3, r3, #16
    d346:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    d34a:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    d34e:	f7f6 f95d 	bl	360c <cdc_acm_send_notification>
		return 0;
    d352:	2000      	movs	r0, #0
    d354:	e006      	b.n	d364 <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
    d356:	f06f 0012 	mvn.w	r0, #18
    d35a:	e003      	b.n	d364 <cdc_acm_line_ctrl_set+0xa6>
		cdc_acm_baudrate_set(dev, val);
    d35c:	4611      	mov	r1, r2
    d35e:	f7ff ff8f 	bl	d280 <cdc_acm_baudrate_set>
		return 0;
    d362:	2000      	movs	r0, #0
}
    d364:	bd10      	pop	{r4, pc}
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    d366:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    d36a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    d36e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    d372:	b11a      	cbz	r2, d37c <cdc_acm_line_ctrl_set+0xbe>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    d374:	f043 0301 	orr.w	r3, r3, #1
    d378:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    d37c:	2101      	movs	r1, #1
    d37e:	f7f6 f945 	bl	360c <cdc_acm_send_notification>
		return 0;
    d382:	2000      	movs	r0, #0
    d384:	e7ee      	b.n	d364 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    d386:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    d38a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    d38e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    d392:	b11a      	cbz	r2, d39c <cdc_acm_line_ctrl_set+0xde>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    d394:	f043 0302 	orr.w	r3, r3, #2
    d398:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    d39c:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    d3a0:	f7f6 f934 	bl	360c <cdc_acm_send_notification>
		return 0;
    d3a4:	2000      	movs	r0, #0
    d3a6:	e7dd      	b.n	d364 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    d3a8:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    d3ac:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d3b0:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    d3b4:	b11a      	cbz	r2, d3be <cdc_acm_line_ctrl_set+0x100>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    d3b6:	f043 0304 	orr.w	r3, r3, #4
    d3ba:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    d3be:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    d3c2:	f7f6 f923 	bl	360c <cdc_acm_send_notification>
		return 0;
    d3c6:	2000      	movs	r0, #0
    d3c8:	e7cc      	b.n	d364 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    d3ca:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    d3ce:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    d3d2:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    d3d6:	b11a      	cbz	r2, d3e0 <cdc_acm_line_ctrl_set+0x122>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    d3d8:	f043 0308 	orr.w	r3, r3, #8
    d3dc:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    d3e0:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    d3e4:	f7f6 f912 	bl	360c <cdc_acm_send_notification>
		return 0;
    d3e8:	2000      	movs	r0, #0
    d3ea:	e7bb      	b.n	d364 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    d3ec:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    d3f0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    d3f4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    d3f8:	b11a      	cbz	r2, d402 <cdc_acm_line_ctrl_set+0x144>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    d3fa:	f043 0320 	orr.w	r3, r3, #32
    d3fe:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    d402:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    d406:	f7f6 f901 	bl	360c <cdc_acm_send_notification>
		return 0;
    d40a:	2000      	movs	r0, #0
    d40c:	e7aa      	b.n	d364 <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
    d40e:	f06f 0012 	mvn.w	r0, #18
    d412:	e7a7      	b.n	d364 <cdc_acm_line_ctrl_set+0xa6>
    d414:	f06f 0012 	mvn.w	r0, #18
    d418:	e7a4      	b.n	d364 <cdc_acm_line_ctrl_set+0xa6>
    d41a:	f06f 0012 	mvn.w	r0, #18
    d41e:	e7a1      	b.n	d364 <cdc_acm_line_ctrl_set+0xa6>

0000d420 <cdc_acm_fifo_read>:
{
    d420:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    d422:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    d424:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    d426:	f7ff fa7b 	bl	c920 <ring_buf_get>
    d42a:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    d42c:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    d42e:	f7ff f9bf 	bl	c7b0 <ring_buf_is_empty>
    d432:	b110      	cbz	r0, d43a <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
    d434:	2300      	movs	r3, #0
    d436:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
    d43a:	4620      	mov	r0, r4
    d43c:	bd38      	pop	{r3, r4, r5, pc}

0000d43e <cdc_acm_poll_in>:
{
    d43e:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    d440:	2201      	movs	r2, #1
    d442:	f7ff ffed 	bl	d420 <cdc_acm_fifo_read>
	return ret == 1 ? 0 : -1;
    d446:	2801      	cmp	r0, #1
    d448:	d101      	bne.n	d44e <cdc_acm_poll_in+0x10>
    d44a:	2000      	movs	r0, #0
}
    d44c:	bd08      	pop	{r3, pc}
	return ret == 1 ? 0 : -1;
    d44e:	f04f 30ff 	mov.w	r0, #4294967295
    d452:	e7fb      	b.n	d44c <cdc_acm_poll_in+0xe>

0000d454 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    d454:	2200      	movs	r2, #0
    d456:	6002      	str	r2, [r0, #0]
    d458:	6042      	str	r2, [r0, #4]
    d45a:	6082      	str	r2, [r0, #8]
}
    d45c:	4770      	bx	lr

0000d45e <abort_function>:
{
    d45e:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    d460:	2000      	movs	r0, #0
    d462:	f7f3 ff21 	bl	12a8 <sys_reboot>

0000d466 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    d466:	b538      	push	{r3, r4, r5, lr}
    d468:	4604      	mov	r4, r0

	if (esf != NULL) {
    d46a:	460d      	mov	r5, r1
    d46c:	b111      	cbz	r1, d474 <z_arm_fatal_error+0xe>
		esf_dump(esf);
    d46e:	4608      	mov	r0, r1
    d470:	f7f6 fc04 	bl	3c7c <esf_dump>
	}
	z_fatal_error(reason, esf);
    d474:	4629      	mov	r1, r5
    d476:	4620      	mov	r0, r4
    d478:	f7fc fdec 	bl	a054 <z_fatal_error>
}
    d47c:	bd38      	pop	{r3, r4, r5, pc}

0000d47e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    d47e:	b508      	push	{r3, lr}
    d480:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    d482:	6800      	ldr	r0, [r0, #0]
    d484:	f7ff ffef 	bl	d466 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    d488:	bd08      	pop	{r3, pc}

0000d48a <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    d48a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    d48c:	2100      	movs	r1, #0
    d48e:	2001      	movs	r0, #1
    d490:	f7ff ffe9 	bl	d466 <z_arm_fatal_error>
}
    d494:	bd08      	pop	{r3, pc}

0000d496 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    d496:	b508      	push	{r3, lr}
	handler();
    d498:	f7f6 fc86 	bl	3da8 <z_SysNmiOnReset>
	z_arm_int_exit();
    d49c:	f7f6 fd54 	bl	3f48 <z_arm_exc_exit>
}
    d4a0:	bd08      	pop	{r3, pc}

0000d4a2 <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
    d4a2:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    d4a6:	f383 880b 	msr	PSPLIM, r3
}
    d4aa:	4770      	bx	lr

0000d4ac <memory_fault_recoverable>:
}
    d4ac:	2000      	movs	r0, #0
    d4ae:	4770      	bx	lr

0000d4b0 <fault_handle>:
{
    d4b0:	b508      	push	{r3, lr}
	*recoverable = false;
    d4b2:	2300      	movs	r3, #0
    d4b4:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    d4b6:	1ecb      	subs	r3, r1, #3
    d4b8:	2b09      	cmp	r3, #9
    d4ba:	d81a      	bhi.n	d4f2 <fault_handle+0x42>
    d4bc:	e8df f003 	tbb	[pc, r3]
    d4c0:	110d0905 	.word	0x110d0905
    d4c4:	19191919 	.word	0x19191919
    d4c8:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    d4ca:	4611      	mov	r1, r2
    d4cc:	f7f6 ffce 	bl	446c <hard_fault>
}
    d4d0:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    d4d2:	2100      	movs	r1, #0
    d4d4:	f7f6 fe2c 	bl	4130 <mem_manage_fault>
		break;
    d4d8:	e7fa      	b.n	d4d0 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    d4da:	2100      	movs	r1, #0
    d4dc:	f7f6 feee 	bl	42bc <bus_fault>
		break;
    d4e0:	e7f6      	b.n	d4d0 <fault_handle+0x20>
		reason = usage_fault(esf);
    d4e2:	f7f6 fd3f 	bl	3f64 <usage_fault>
		break;
    d4e6:	e7f3      	b.n	d4d0 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    d4e8:	4611      	mov	r1, r2
    d4ea:	f7f6 fe07 	bl	40fc <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    d4ee:	2000      	movs	r0, #0
		break;
    d4f0:	e7ee      	b.n	d4d0 <fault_handle+0x20>
		reserved_exception(esf, fault);
    d4f2:	f7f7 f861 	bl	45b8 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    d4f6:	2000      	movs	r0, #0
	return reason;
    d4f8:	e7ea      	b.n	d4d0 <fault_handle+0x20>

0000d4fa <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    d4fa:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    d4fe:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    d502:	d001      	beq.n	d508 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
    d504:	b2c0      	uxtb	r0, r0
    d506:	4770      	bx	lr
	}

	return -EINVAL;
    d508:	f06f 0015 	mvn.w	r0, #21
}
    d50c:	4770      	bx	lr

0000d50e <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
    d50e:	6843      	ldr	r3, [r0, #4]
		&&
    d510:	2b1f      	cmp	r3, #31
    d512:	d90a      	bls.n	d52a <mpu_partition_is_valid+0x1c>
		&&
    d514:	f013 0f1f 	tst.w	r3, #31
    d518:	d001      	beq.n	d51e <mpu_partition_is_valid+0x10>
		&&
    d51a:	2000      	movs	r0, #0
    d51c:	4770      	bx	lr
		((part->start &
    d51e:	6803      	ldr	r3, [r0, #0]
		&&
    d520:	f013 0f1f 	tst.w	r3, #31
    d524:	d003      	beq.n	d52e <mpu_partition_is_valid+0x20>
    d526:	2000      	movs	r0, #0
    d528:	4770      	bx	lr
    d52a:	2000      	movs	r0, #0
    d52c:	4770      	bx	lr
    d52e:	2001      	movs	r0, #1
}
    d530:	4770      	bx	lr

0000d532 <mpu_configure_region>:
{
    d532:	b530      	push	{r4, r5, lr}
    d534:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    d536:	680b      	ldr	r3, [r1, #0]
    d538:	9300      	str	r3, [sp, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    d53a:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    d53c:	890d      	ldrh	r5, [r1, #8]
    d53e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    d542:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    d546:	7a89      	ldrb	r1, [r1, #10]
    d548:	f361 1247 	bfi	r2, r1, #5, #3
    d54c:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    d550:	f023 031f 	bic.w	r3, r3, #31
    d554:	4423      	add	r3, r4
    d556:	3b01      	subs	r3, #1
    d558:	f023 031f 	bic.w	r3, r3, #31
    d55c:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    d55e:	4669      	mov	r1, sp
    d560:	f7f7 f9b0 	bl	48c4 <region_allocate_and_init>
}
    d564:	b005      	add	sp, #20
    d566:	bd30      	pop	{r4, r5, pc}

0000d568 <arm_core_mpu_configure_static_mpu_regions>:
{
    d568:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    d56a:	f7f7 fab9 	bl	4ae0 <mpu_configure_static_mpu_regions>
}
    d56e:	bd08      	pop	{r3, pc}

0000d570 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    d570:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d572:	f7f7 fabf 	bl	4af4 <mpu_mark_areas_for_dynamic_regions>
}
    d576:	bd08      	pop	{r3, pc}

0000d578 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    d578:	4603      	mov	r3, r0
    d57a:	b1a2      	cbz	r2, d5a6 <strncpy+0x2e>
{
    d57c:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    d57e:	780c      	ldrb	r4, [r1, #0]
    d580:	b12c      	cbz	r4, d58e <strncpy+0x16>
		*d = *s;
    d582:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    d586:	3101      	adds	r1, #1
		d++;
		n--;
    d588:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    d58a:	2a00      	cmp	r2, #0
    d58c:	d1f7      	bne.n	d57e <strncpy+0x6>
	}

	while (n > 0) {
    d58e:	b122      	cbz	r2, d59a <strncpy+0x22>
		*d = '\0';
    d590:	2100      	movs	r1, #0
    d592:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    d596:	3a01      	subs	r2, #1
    d598:	e7f9      	b.n	d58e <strncpy+0x16>
	}

	return dest;
}
    d59a:	bc10      	pop	{r4}
    d59c:	4770      	bx	lr
		*d = '\0';
    d59e:	2100      	movs	r1, #0
    d5a0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    d5a4:	3a01      	subs	r2, #1
	while (n > 0) {
    d5a6:	2a00      	cmp	r2, #0
    d5a8:	d1f9      	bne.n	d59e <strncpy+0x26>
    d5aa:	4770      	bx	lr

0000d5ac <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    d5ac:	4603      	mov	r3, r0
	size_t n = 0;
    d5ae:	2000      	movs	r0, #0

	while (*s != '\0') {
    d5b0:	781a      	ldrb	r2, [r3, #0]
    d5b2:	b112      	cbz	r2, d5ba <strlen+0xe>
		s++;
    d5b4:	3301      	adds	r3, #1
		n++;
    d5b6:	3001      	adds	r0, #1
    d5b8:	e7fa      	b.n	d5b0 <strlen+0x4>
	}

	return n;
}
    d5ba:	4770      	bx	lr

0000d5bc <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    d5bc:	4603      	mov	r3, r0
	size_t n = 0;
    d5be:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    d5c0:	781a      	ldrb	r2, [r3, #0]
    d5c2:	b122      	cbz	r2, d5ce <strnlen+0x12>
    d5c4:	4288      	cmp	r0, r1
    d5c6:	d202      	bcs.n	d5ce <strnlen+0x12>
		s++;
    d5c8:	3301      	adds	r3, #1
		n++;
    d5ca:	3001      	adds	r0, #1
    d5cc:	e7f8      	b.n	d5c0 <strnlen+0x4>
	}

	return n;
}
    d5ce:	4770      	bx	lr

0000d5d0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    d5d0:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    d5d2:	ea80 0301 	eor.w	r3, r0, r1
    d5d6:	f013 0f03 	tst.w	r3, #3
    d5da:	d001      	beq.n	d5e0 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
    d5dc:	4603      	mov	r3, r0
    d5de:	e017      	b.n	d610 <memcpy+0x40>
    d5e0:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    d5e2:	f013 0f03 	tst.w	r3, #3
    d5e6:	d00b      	beq.n	d600 <memcpy+0x30>
			if (n == 0) {
    d5e8:	b1a2      	cbz	r2, d614 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    d5ea:	f811 4b01 	ldrb.w	r4, [r1], #1
    d5ee:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    d5f2:	3a01      	subs	r2, #1
    d5f4:	e7f5      	b.n	d5e2 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
    d5f6:	f851 4b04 	ldr.w	r4, [r1], #4
    d5fa:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    d5fe:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    d600:	2a03      	cmp	r2, #3
    d602:	d8f8      	bhi.n	d5f6 <memcpy+0x26>
    d604:	e004      	b.n	d610 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    d606:	f811 4b01 	ldrb.w	r4, [r1], #1
    d60a:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    d60e:	3a01      	subs	r2, #1
	while (n > 0) {
    d610:	2a00      	cmp	r2, #0
    d612:	d1f8      	bne.n	d606 <memcpy+0x36>
	}

	return d;
}
    d614:	bc10      	pop	{r4}
    d616:	4770      	bx	lr

0000d618 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    d618:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    d61a:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
    d61c:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    d61e:	f013 0f03 	tst.w	r3, #3
    d622:	d004      	beq.n	d62e <memset+0x16>
		if (n == 0) {
    d624:	b19a      	cbz	r2, d64e <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
    d626:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    d62a:	3a01      	subs	r2, #1
    d62c:	e7f7      	b.n	d61e <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    d62e:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    d630:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    d634:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    d638:	2a03      	cmp	r2, #3
    d63a:	d906      	bls.n	d64a <memset+0x32>
		*(d_word++) = c_word;
    d63c:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    d640:	3a04      	subs	r2, #4
    d642:	e7f9      	b.n	d638 <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    d644:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    d648:	3a01      	subs	r2, #1
	while (n > 0) {
    d64a:	2a00      	cmp	r2, #0
    d64c:	d1fa      	bne.n	d644 <memset+0x2c>
	}

	return buf;
}
    d64e:	bc10      	pop	{r4}
    d650:	4770      	bx	lr

0000d652 <_stdout_hook_default>:
}
    d652:	f04f 30ff 	mov.w	r0, #4294967295
    d656:	4770      	bx	lr

0000d658 <in_endpoint_ctx>:
{
    d658:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    d65a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    d65e:	f7f7 fad9 	bl	4c14 <endpoint_ctx>
}
    d662:	bd08      	pop	{r3, pc}

0000d664 <out_endpoint_ctx>:
{
    d664:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    d666:	f7f7 fad5 	bl	4c14 <endpoint_ctx>
}
    d66a:	bd08      	pop	{r3, pc}

0000d66c <ep_ctx_reset>:
{
    d66c:	b510      	push	{r4, lr}
    d66e:	4604      	mov	r4, r0
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    d670:	6903      	ldr	r3, [r0, #16]
    d672:	6143      	str	r3, [r0, #20]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    d674:	6183      	str	r3, [r0, #24]
	ep_ctx->buf.len  = 0U;
    d676:	2300      	movs	r3, #0
    d678:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    d67a:	7f83      	ldrb	r3, [r0, #30]
    d67c:	b933      	cbnz	r3, d68c <ep_ctx_reset+0x20>
	ep_ctx->read_complete = true;
    d67e:	2301      	movs	r3, #1
    d680:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    d682:	2300      	movs	r3, #0
    d684:	7763      	strb	r3, [r4, #29]
	ep_ctx->write_in_progress = false;
    d686:	77a3      	strb	r3, [r4, #30]
	ep_ctx->trans_zlp = false;
    d688:	77e3      	strb	r3, [r4, #31]
}
    d68a:	bd10      	pop	{r4, pc}
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    d68c:	7a40      	ldrb	r0, [r0, #9]
    d68e:	f7fc fae1 	bl	9c54 <nrfx_usbd_ep_abort>
    d692:	e7f4      	b.n	d67e <ep_ctx_reset+0x12>

0000d694 <hfxo_stop>:
{
    d694:	b510      	push	{r4, lr}
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    d696:	f100 0320 	add.w	r3, r0, #32
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    d69a:	2200      	movs	r2, #0
    d69c:	e8d3 1fef 	ldaex	r1, [r3]
    d6a0:	2901      	cmp	r1, #1
    d6a2:	d103      	bne.n	d6ac <hfxo_stop+0x18>
    d6a4:	e8c3 2fe4 	stlex	r4, r2, [r3]
    d6a8:	2c00      	cmp	r4, #0
    d6aa:	d1f7      	bne.n	d69c <hfxo_stop+0x8>
    d6ac:	d10d      	bne.n	d6ca <hfxo_stop+0x36>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    d6ae:	69c4      	ldr	r4, [r0, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    d6b0:	f100 010c 	add.w	r1, r0, #12
    d6b4:	4620      	mov	r0, r4
    d6b6:	f7fe fc20 	bl	befa <onoff_cancel>

	if (rv == -EALREADY) {
    d6ba:	f110 0f78 	cmn.w	r0, #120	; 0x78
    d6be:	d000      	beq.n	d6c2 <hfxo_stop+0x2e>
}
    d6c0:	bd10      	pop	{r4, pc}
		rv = onoff_release(mgr);
    d6c2:	4620      	mov	r0, r4
    d6c4:	f7fe fbf3 	bl	beae <onoff_release>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    d6c8:	e7fa      	b.n	d6c0 <hfxo_stop+0x2c>
	return 0;
    d6ca:	2000      	movs	r0, #0
    d6cc:	e7f8      	b.n	d6c0 <hfxo_stop+0x2c>

0000d6ce <usbd_enable_endpoints>:
{
    d6ce:	b510      	push	{r4, lr}
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    d6d0:	2400      	movs	r4, #0
    d6d2:	e003      	b.n	d6dc <usbd_enable_endpoints+0xe>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    d6d4:	7a40      	ldrb	r0, [r0, #9]
    d6d6:	f7fc f921 	bl	991c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    d6da:	3401      	adds	r4, #1
    d6dc:	2c07      	cmp	r4, #7
    d6de:	dc06      	bgt.n	d6ee <usbd_enable_endpoints+0x20>
		ep_ctx = in_endpoint_ctx(i);
    d6e0:	b2e0      	uxtb	r0, r4
    d6e2:	f7ff ffb9 	bl	d658 <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
    d6e6:	7a03      	ldrb	r3, [r0, #8]
    d6e8:	2b00      	cmp	r3, #0
    d6ea:	d0f6      	beq.n	d6da <usbd_enable_endpoints+0xc>
    d6ec:	e7f2      	b.n	d6d4 <usbd_enable_endpoints+0x6>
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
    d6ee:	2088      	movs	r0, #136	; 0x88
    d6f0:	f7ff ffb2 	bl	d658 <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
    d6f4:	7a03      	ldrb	r3, [r0, #8]
    d6f6:	b90b      	cbnz	r3, d6fc <usbd_enable_endpoints+0x2e>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    d6f8:	2400      	movs	r4, #0
    d6fa:	e007      	b.n	d70c <usbd_enable_endpoints+0x3e>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    d6fc:	7a40      	ldrb	r0, [r0, #9]
    d6fe:	f7fc f90d 	bl	991c <nrfx_usbd_ep_enable>
    d702:	e7f9      	b.n	d6f8 <usbd_enable_endpoints+0x2a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    d704:	7a40      	ldrb	r0, [r0, #9]
    d706:	f7fc f909 	bl	991c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    d70a:	3401      	adds	r4, #1
    d70c:	2c07      	cmp	r4, #7
    d70e:	dc06      	bgt.n	d71e <usbd_enable_endpoints+0x50>
		ep_ctx = out_endpoint_ctx(i);
    d710:	b2e0      	uxtb	r0, r4
    d712:	f7ff ffa7 	bl	d664 <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
    d716:	7a03      	ldrb	r3, [r0, #8]
    d718:	2b00      	cmp	r3, #0
    d71a:	d0f6      	beq.n	d70a <usbd_enable_endpoints+0x3c>
    d71c:	e7f2      	b.n	d704 <usbd_enable_endpoints+0x36>
		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
    d71e:	2008      	movs	r0, #8
    d720:	f7ff ffa0 	bl	d664 <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
    d724:	7a03      	ldrb	r3, [r0, #8]
    d726:	b903      	cbnz	r3, d72a <usbd_enable_endpoints+0x5c>
}
    d728:	bd10      	pop	{r4, pc}
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    d72a:	7a40      	ldrb	r0, [r0, #9]
    d72c:	f7fc f8f6 	bl	991c <nrfx_usbd_ep_enable>
}
    d730:	e7fa      	b.n	d728 <usbd_enable_endpoints+0x5a>

0000d732 <hfxo_start>:
{
    d732:	b508      	push	{r3, lr}
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    d734:	f100 0320 	add.w	r3, r0, #32
    d738:	2201      	movs	r2, #1
    d73a:	e8d3 1fef 	ldaex	r1, [r3]
    d73e:	2900      	cmp	r1, #0
    d740:	d104      	bne.n	d74c <hfxo_start+0x1a>
    d742:	e8c3 2fec 	stlex	ip, r2, [r3]
    d746:	f1bc 0f00 	cmp.w	ip, #0
    d74a:	d1f6      	bne.n	d73a <hfxo_start+0x8>
    d74c:	d10a      	bne.n	d764 <hfxo_start+0x32>
	*notify = (struct sys_notify){
    d74e:	2300      	movs	r3, #0
    d750:	6103      	str	r3, [r0, #16]
    d752:	6183      	str	r3, [r0, #24]
    d754:	2301      	movs	r3, #1
    d756:	6143      	str	r3, [r0, #20]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    d758:	f100 010c 	add.w	r1, r0, #12
    d75c:	69c0      	ldr	r0, [r0, #28]
    d75e:	f7fe fb4a 	bl	bdf6 <onoff_request>
}
    d762:	bd08      	pop	{r3, pc}
	return 0;
    d764:	2000      	movs	r0, #0
    d766:	e7fc      	b.n	d762 <hfxo_start+0x30>

0000d768 <usb_dc_ep_read>:
{
    d768:	b570      	push	{r4, r5, r6, lr}
    d76a:	4605      	mov	r5, r0
    d76c:	460c      	mov	r4, r1
    d76e:	4616      	mov	r6, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    d770:	f7f8 fc62 	bl	6038 <usb_dc_ep_read_wait>
	if (ret) {
    d774:	b918      	cbnz	r0, d77e <usb_dc_ep_read+0x16>
	if (!data && !max_data_len) {
    d776:	b11c      	cbz	r4, d780 <usb_dc_ep_read+0x18>
	ret = usb_dc_ep_read_continue(ep);
    d778:	4628      	mov	r0, r5
    d77a:	f7f8 fcd7 	bl	612c <usb_dc_ep_read_continue>
}
    d77e:	bd70      	pop	{r4, r5, r6, pc}
	if (!data && !max_data_len) {
    d780:	2e00      	cmp	r6, #0
    d782:	d1f9      	bne.n	d778 <usb_dc_ep_read+0x10>
    d784:	e7fb      	b.n	d77e <usb_dc_ep_read+0x16>

0000d786 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    d786:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    d788:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d78c:	0089      	lsls	r1, r1, #2
    d78e:	3170      	adds	r1, #112	; 0x70
}
    d790:	4408      	add	r0, r1
    d792:	4770      	bx	lr

0000d794 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    d794:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    d796:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    d79a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    d79e:	4770      	bx	lr

0000d7a0 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    d7a0:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    d7a2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    d7a6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    d7aa:	4770      	bx	lr

0000d7ac <get_status>:
{
    d7ac:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    d7ae:	b2c9      	uxtb	r1, r1
    d7b0:	f7ff ffe9 	bl	d786 <get_sub_data>
    d7b4:	6880      	ldr	r0, [r0, #8]
}
    d7b6:	f000 0007 	and.w	r0, r0, #7
    d7ba:	bd08      	pop	{r3, pc}

0000d7bc <set_off_state>:
	__asm__ volatile(
    d7bc:	f04f 0320 	mov.w	r3, #32
    d7c0:	f3ef 8211 	mrs	r2, BASEPRI
    d7c4:	f383 8812 	msr	BASEPRI_MAX, r3
    d7c8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    d7cc:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    d7ce:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    d7d2:	d001      	beq.n	d7d8 <set_off_state+0x1c>
    d7d4:	428b      	cmp	r3, r1
    d7d6:	d107      	bne.n	d7e8 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    d7d8:	2301      	movs	r3, #1
    d7da:	6003      	str	r3, [r0, #0]
	int err = 0;
    d7dc:	2000      	movs	r0, #0
	__asm__ volatile(
    d7de:	f382 8811 	msr	BASEPRI, r2
    d7e2:	f3bf 8f6f 	isb	sy
}
    d7e6:	4770      	bx	lr
		err = -EPERM;
    d7e8:	f04f 30ff 	mov.w	r0, #4294967295
    d7ec:	e7f7      	b.n	d7de <set_off_state+0x22>

0000d7ee <set_starting_state>:
{
    d7ee:	b410      	push	{r4}
	__asm__ volatile(
    d7f0:	f04f 0320 	mov.w	r3, #32
    d7f4:	f3ef 8211 	mrs	r2, BASEPRI
    d7f8:	f383 8812 	msr	BASEPRI_MAX, r3
    d7fc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    d800:	6803      	ldr	r3, [r0, #0]
    d802:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    d806:	f003 0307 	and.w	r3, r3, #7
    d80a:	2b01      	cmp	r3, #1
    d80c:	d009      	beq.n	d822 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
    d80e:	428c      	cmp	r4, r1
    d810:	d00a      	beq.n	d828 <set_starting_state+0x3a>
		err = -EPERM;
    d812:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    d816:	f382 8811 	msr	BASEPRI, r2
    d81a:	f3bf 8f6f 	isb	sy
}
    d81e:	bc10      	pop	{r4}
    d820:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    d822:	6001      	str	r1, [r0, #0]
	int err = 0;
    d824:	2000      	movs	r0, #0
    d826:	e7f6      	b.n	d816 <set_starting_state+0x28>
		err = -EALREADY;
    d828:	f06f 0077 	mvn.w	r0, #119	; 0x77
    d82c:	e7f3      	b.n	d816 <set_starting_state+0x28>

0000d82e <set_on_state>:
	__asm__ volatile(
    d82e:	f04f 0320 	mov.w	r3, #32
    d832:	f3ef 8211 	mrs	r2, BASEPRI
    d836:	f383 8812 	msr	BASEPRI_MAX, r3
    d83a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    d83e:	6803      	ldr	r3, [r0, #0]
    d840:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d844:	f043 0302 	orr.w	r3, r3, #2
    d848:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    d84a:	f382 8811 	msr	BASEPRI, r2
    d84e:	f3bf 8f6f 	isb	sy
}
    d852:	4770      	bx	lr

0000d854 <clkstarted_handle>:
{
    d854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d856:	4606      	mov	r6, r0
    d858:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    d85a:	f7ff ff94 	bl	d786 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    d85e:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    d860:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    d862:	2300      	movs	r3, #0
    d864:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    d868:	f7ff ffe1 	bl	d82e <set_on_state>
	if (callback) {
    d86c:	b11d      	cbz	r5, d876 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    d86e:	463a      	mov	r2, r7
    d870:	4621      	mov	r1, r4
    d872:	4630      	mov	r0, r6
    d874:	47a8      	blx	r5
}
    d876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d878 <stop>:
{
    d878:	b570      	push	{r4, r5, r6, lr}
    d87a:	4606      	mov	r6, r0
    d87c:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    d87e:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    d880:	4621      	mov	r1, r4
    d882:	f7ff ff80 	bl	d786 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    d886:	4629      	mov	r1, r5
    d888:	3008      	adds	r0, #8
    d88a:	f7ff ff97 	bl	d7bc <set_off_state>
	if (err < 0) {
    d88e:	2800      	cmp	r0, #0
    d890:	db06      	blt.n	d8a0 <stop+0x28>
	get_sub_config(dev, type)->stop();
    d892:	4621      	mov	r1, r4
    d894:	4630      	mov	r0, r6
    d896:	f7ff ff7d 	bl	d794 <get_sub_config>
    d89a:	6843      	ldr	r3, [r0, #4]
    d89c:	4798      	blx	r3
	return 0;
    d89e:	2000      	movs	r0, #0
}
    d8a0:	bd70      	pop	{r4, r5, r6, pc}

0000d8a2 <api_stop>:
{
    d8a2:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    d8a4:	2280      	movs	r2, #128	; 0x80
    d8a6:	f7ff ffe7 	bl	d878 <stop>
}
    d8aa:	bd08      	pop	{r3, pc}

0000d8ac <async_start>:
{
    d8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d8b0:	4606      	mov	r6, r0
    d8b2:	4690      	mov	r8, r2
    d8b4:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    d8b6:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    d8b8:	4629      	mov	r1, r5
    d8ba:	f7ff ff64 	bl	d786 <get_sub_data>
    d8be:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    d8c0:	9906      	ldr	r1, [sp, #24]
    d8c2:	3008      	adds	r0, #8
    d8c4:	f7ff ff93 	bl	d7ee <set_starting_state>
	if (err < 0) {
    d8c8:	2800      	cmp	r0, #0
    d8ca:	db09      	blt.n	d8e0 <async_start+0x34>
	subdata->cb = cb;
    d8cc:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    d8d0:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    d8d2:	4629      	mov	r1, r5
    d8d4:	4630      	mov	r0, r6
    d8d6:	f7ff ff5d 	bl	d794 <get_sub_config>
    d8da:	6803      	ldr	r3, [r0, #0]
    d8dc:	4798      	blx	r3
	return 0;
    d8de:	2000      	movs	r0, #0
}
    d8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d8e4 <api_start>:
{
    d8e4:	b510      	push	{r4, lr}
    d8e6:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    d8e8:	2480      	movs	r4, #128	; 0x80
    d8ea:	9400      	str	r4, [sp, #0]
    d8ec:	f7ff ffde 	bl	d8ac <async_start>
}
    d8f0:	b002      	add	sp, #8
    d8f2:	bd10      	pop	{r4, pc}

0000d8f4 <onoff_started_callback>:
{
    d8f4:	b510      	push	{r4, lr}
    d8f6:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    d8f8:	b2c9      	uxtb	r1, r1
    d8fa:	f7ff ff51 	bl	d7a0 <get_onoff_manager>
	notify(mgr, 0);
    d8fe:	2100      	movs	r1, #0
    d900:	47a0      	blx	r4
}
    d902:	bd10      	pop	{r4, pc}

0000d904 <hfclk_start>:
{
    d904:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    d906:	2001      	movs	r0, #1
    d908:	f7f9 fe36 	bl	7578 <nrfx_clock_start>
}
    d90c:	bd08      	pop	{r3, pc}

0000d90e <hfclkaudio_start>:
{
    d90e:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    d910:	2003      	movs	r0, #3
    d912:	f7f9 fe31 	bl	7578 <nrfx_clock_start>
}
    d916:	bd08      	pop	{r3, pc}

0000d918 <hfclk192m_start>:
{
    d918:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    d91a:	2002      	movs	r0, #2
    d91c:	f7f9 fe2c 	bl	7578 <nrfx_clock_start>
}
    d920:	bd08      	pop	{r3, pc}

0000d922 <lfclk_start>:
{
    d922:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    d924:	2000      	movs	r0, #0
    d926:	f7f9 fe27 	bl	7578 <nrfx_clock_start>
}
    d92a:	bd08      	pop	{r3, pc}

0000d92c <hfclk_stop>:
{
    d92c:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    d92e:	2001      	movs	r0, #1
    d930:	f7f9 fe7c 	bl	762c <nrfx_clock_stop>
}
    d934:	bd08      	pop	{r3, pc}

0000d936 <hfclkaudio_stop>:
{
    d936:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    d938:	2003      	movs	r0, #3
    d93a:	f7f9 fe77 	bl	762c <nrfx_clock_stop>
}
    d93e:	bd08      	pop	{r3, pc}

0000d940 <hfclk192m_stop>:
{
    d940:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    d942:	2002      	movs	r0, #2
    d944:	f7f9 fe72 	bl	762c <nrfx_clock_stop>
}
    d948:	bd08      	pop	{r3, pc}

0000d94a <lfclk_stop>:
{
    d94a:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    d94c:	2000      	movs	r0, #0
    d94e:	f7f9 fe6d 	bl	762c <nrfx_clock_stop>
}
    d952:	bd08      	pop	{r3, pc}

0000d954 <blocking_start_callback>:
{
    d954:	b508      	push	{r3, lr}
    d956:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    d958:	f7fc ff3e 	bl	a7d8 <z_impl_k_sem_give>
}
    d95c:	bd08      	pop	{r3, pc}

0000d95e <get_pull>:
	if (flags & GPIO_PULL_UP) {
    d95e:	f010 0f10 	tst.w	r0, #16
    d962:	d104      	bne.n	d96e <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    d964:	f010 0f20 	tst.w	r0, #32
    d968:	d103      	bne.n	d972 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    d96a:	2000      	movs	r0, #0
    d96c:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    d96e:	2003      	movs	r0, #3
    d970:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    d972:	2001      	movs	r0, #1
}
    d974:	4770      	bx	lr

0000d976 <gpio_nrfx_port_get_raw>:
	return port->config;
    d976:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d978:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    d97a:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    d97c:	600b      	str	r3, [r1, #0]
}
    d97e:	2000      	movs	r0, #0
    d980:	4770      	bx	lr

0000d982 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    d982:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d984:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    d986:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    d988:	4042      	eors	r2, r0
    d98a:	400a      	ands	r2, r1
    d98c:	4042      	eors	r2, r0
    p_reg->OUT = value;
    d98e:	605a      	str	r2, [r3, #4]
}
    d990:	2000      	movs	r0, #0
    d992:	4770      	bx	lr

0000d994 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    d994:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d996:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    d998:	6099      	str	r1, [r3, #8]
}
    d99a:	2000      	movs	r0, #0
    d99c:	4770      	bx	lr

0000d99e <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    d99e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d9a0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    d9a2:	60d9      	str	r1, [r3, #12]
}
    d9a4:	2000      	movs	r0, #0
    d9a6:	4770      	bx	lr

0000d9a8 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    d9a8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d9aa:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    d9ac:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    d9ae:	404b      	eors	r3, r1
    p_reg->OUT = value;
    d9b0:	6053      	str	r3, [r2, #4]
}
    d9b2:	2000      	movs	r0, #0
    d9b4:	4770      	bx	lr

0000d9b6 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    d9b6:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    d9ba:	d007      	beq.n	d9cc <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    d9bc:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
    d9c0:	d00d      	beq.n	d9de <get_trigger+0x28>
    d9c2:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    d9c6:	d008      	beq.n	d9da <get_trigger+0x24>
    d9c8:	2001      	movs	r0, #1
}
    d9ca:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    d9cc:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    d9d0:	d001      	beq.n	d9d6 <get_trigger+0x20>
    d9d2:	2005      	movs	r0, #5
    d9d4:	4770      	bx	lr
    d9d6:	2004      	movs	r0, #4
    d9d8:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    d9da:	2002      	movs	r0, #2
    d9dc:	4770      	bx	lr
    d9de:	2003      	movs	r0, #3
    d9e0:	4770      	bx	lr

0000d9e2 <gpio_nrfx_manage_callback>:
{
    d9e2:	b470      	push	{r4, r5, r6}
	return port->data;
    d9e4:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    d9e6:	1d05      	adds	r5, r0, #4
	return list->head;
    d9e8:	6843      	ldr	r3, [r0, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    d9ea:	b1db      	cbz	r3, da24 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    d9ec:	460e      	mov	r6, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d9ee:	2400      	movs	r4, #0
    d9f0:	e00a      	b.n	da08 <gpio_nrfx_manage_callback+0x26>
	return node->next;
    d9f2:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    d9f4:	6043      	str	r3, [r0, #4]
	return list->tail;
    d9f6:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    d9f8:	42a1      	cmp	r1, r4
    d9fa:	d10f      	bne.n	da1c <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    d9fc:	606b      	str	r3, [r5, #4]
}
    d9fe:	e00d      	b.n	da1c <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    da00:	606c      	str	r4, [r5, #4]
}
    da02:	e00b      	b.n	da1c <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    da04:	461c      	mov	r4, r3
    da06:	681b      	ldr	r3, [r3, #0]
    da08:	b15b      	cbz	r3, da22 <gpio_nrfx_manage_callback+0x40>
    da0a:	429e      	cmp	r6, r3
    da0c:	d1fa      	bne.n	da04 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
    da0e:	2c00      	cmp	r4, #0
    da10:	d0ef      	beq.n	d9f2 <gpio_nrfx_manage_callback+0x10>
	return node->next;
    da12:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    da14:	6023      	str	r3, [r4, #0]
	return list->tail;
    da16:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    da18:	4299      	cmp	r1, r3
    da1a:	d0f1      	beq.n	da00 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
    da1c:	2300      	movs	r3, #0
    da1e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    da20:	e000      	b.n	da24 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
    da22:	b152      	cbz	r2, da3a <gpio_nrfx_manage_callback+0x58>
				return -EINVAL;
			}
		}
	}

	if (set) {
    da24:	b162      	cbz	r2, da40 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
    da26:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
    da28:	600b      	str	r3, [r1, #0]
	list->head = node;
    da2a:	6041      	str	r1, [r0, #4]
	return list->tail;
    da2c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    da2e:	b10b      	cbz	r3, da34 <gpio_nrfx_manage_callback+0x52>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    da30:	2000      	movs	r0, #0
    da32:	e006      	b.n	da42 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    da34:	6069      	str	r1, [r5, #4]
    da36:	2000      	movs	r0, #0
}
    da38:	e003      	b.n	da42 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
    da3a:	f06f 0015 	mvn.w	r0, #21
    da3e:	e000      	b.n	da42 <gpio_nrfx_manage_callback+0x60>
	return 0;
    da40:	2000      	movs	r0, #0
}
    da42:	bc70      	pop	{r4, r5, r6}
    da44:	4770      	bx	lr

0000da46 <nrfx_gpio_handler>:
{
    da46:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
    da48:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    da4c:	0940      	lsrs	r0, r0, #5
    da4e:	f7f8 fe79 	bl	6744 <get_dev>
	if (port == NULL) {
    da52:	b1d8      	cbz	r0, da8c <nrfx_gpio_handler+0x46>
    da54:	4606      	mov	r6, r0
	return port->data;
    da56:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    da58:	2501      	movs	r5, #1
    da5a:	40a5      	lsls	r5, r4
	return list->head;
    da5c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    da5e:	b119      	cbz	r1, da68 <nrfx_gpio_handler+0x22>
    da60:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    da62:	b149      	cbz	r1, da78 <nrfx_gpio_handler+0x32>
	return node->next;
    da64:	680c      	ldr	r4, [r1, #0]
    da66:	e007      	b.n	da78 <nrfx_gpio_handler+0x32>
    da68:	460c      	mov	r4, r1
    da6a:	e005      	b.n	da78 <nrfx_gpio_handler+0x32>
    da6c:	b164      	cbz	r4, da88 <nrfx_gpio_handler+0x42>
    da6e:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    da70:	b104      	cbz	r4, da74 <nrfx_gpio_handler+0x2e>
	return node->next;
    da72:	6823      	ldr	r3, [r4, #0]
    da74:	4621      	mov	r1, r4
    da76:	461c      	mov	r4, r3
    da78:	b141      	cbz	r1, da8c <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
    da7a:	688a      	ldr	r2, [r1, #8]
    da7c:	402a      	ands	r2, r5
    da7e:	d0f5      	beq.n	da6c <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    da80:	684b      	ldr	r3, [r1, #4]
    da82:	4630      	mov	r0, r6
    da84:	4798      	blx	r3
    da86:	e7f1      	b.n	da6c <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    da88:	4623      	mov	r3, r4
    da8a:	e7f3      	b.n	da74 <nrfx_gpio_handler+0x2e>
}
    da8c:	bd70      	pop	{r4, r5, r6, pc}

0000da8e <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    da8e:	b510      	push	{r4, lr}
    da90:	b082      	sub	sp, #8
    da92:	460c      	mov	r4, r1
}

NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
    da94:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    da98:	f8d2 1208 	ldr.w	r1, [r2, #520]	; 0x208
    da9c:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
    daa0:	0a1b      	lsrs	r3, r3, #8
    daa2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    daa6:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
    daaa:	f8d2 1208 	ldr.w	r1, [r2, #520]	; 0x208
    daae:	0209      	lsls	r1, r1, #8
    dab0:	4011      	ands	r1, r2
    dab2:	430b      	orrs	r3, r1
    dab4:	f8d2 1208 	ldr.w	r1, [r2, #520]	; 0x208
    dab8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    dabc:	9300      	str	r3, [sp, #0]
    dabe:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
    dac2:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
    dac6:	0a1b      	lsrs	r3, r3, #8
    dac8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    dacc:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
    dad0:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
    dad4:	0209      	lsls	r1, r1, #8
    dad6:	4011      	ands	r1, r2
    dad8:	430b      	orrs	r3, r1
    dada:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    dade:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    dae2:	9301      	str	r3, [sp, #4]

	if (length > sizeof(dev_id.id)) {
    dae4:	2c08      	cmp	r4, #8
    dae6:	d900      	bls.n	daea <z_impl_hwinfo_get_device_id+0x5c>
		length = sizeof(dev_id.id);
    dae8:	2408      	movs	r4, #8
	}

	memcpy(buffer, dev_id.id, length);
    daea:	4622      	mov	r2, r4
    daec:	4669      	mov	r1, sp
    daee:	f7ff fd6f 	bl	d5d0 <memcpy>

	return length;
}
    daf2:	4620      	mov	r0, r4
    daf4:	b002      	add	sp, #8
    daf6:	bd10      	pop	{r4, pc}

0000daf8 <endtx_isr>:
	return dev->config;
    daf8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    dafa:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    dafc:	f04f 0120 	mov.w	r1, #32
    db00:	f3ef 8211 	mrs	r2, BASEPRI
    db04:	f381 8812 	msr	BASEPRI_MAX, r1
    db08:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    db0c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    db10:	b131      	cbz	r1, db20 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    db12:	2100      	movs	r1, #0
    db14:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    db18:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    db1c:	2101      	movs	r1, #1
    db1e:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    db20:	f382 8811 	msr	BASEPRI, r2
    db24:	f3bf 8f6f 	isb	sy
}
    db28:	4770      	bx	lr

0000db2a <uarte_nrfx_isr_int>:
{
    db2a:	b538      	push	{r3, r4, r5, lr}
    db2c:	4604      	mov	r4, r0
	return dev->config;
    db2e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    db30:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    db32:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    db36:	f413 7f80 	tst.w	r3, #256	; 0x100
    db3a:	d003      	beq.n	db44 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    db3c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    db40:	2b00      	cmp	r3, #0
    db42:	d139      	bne.n	dbb8 <uarte_nrfx_isr_int+0x8e>
	return dev->config;
    db44:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    db46:	685b      	ldr	r3, [r3, #4]
    db48:	f013 0f10 	tst.w	r3, #16
    db4c:	d01a      	beq.n	db84 <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
    db4e:	f04f 0320 	mov.w	r3, #32
    db52:	f3ef 8211 	mrs	r2, BASEPRI
    db56:	f383 8812 	msr	BASEPRI_MAX, r3
    db5a:	f3bf 8f6f 	isb	sy
    db5e:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    db62:	b113      	cbz	r3, db6a <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    db64:	2300      	movs	r3, #0
    db66:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
    db6a:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    db6c:	68db      	ldr	r3, [r3, #12]
    db6e:	b10b      	cbz	r3, db74 <uarte_nrfx_isr_int+0x4a>
    db70:	691b      	ldr	r3, [r3, #16]
    db72:	b91b      	cbnz	r3, db7c <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
    db74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    db78:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
    db7c:	f382 8811 	msr	BASEPRI, r2
    db80:	f3bf 8f6f 	isb	sy
	return dev->data;
    db84:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
    db86:	68da      	ldr	r2, [r3, #12]
    db88:	b1aa      	cbz	r2, dbb6 <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    db8a:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    db8e:	b121      	cbz	r1, db9a <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
    db90:	2100      	movs	r1, #0
    db92:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    db94:	68da      	ldr	r2, [r3, #12]
    db96:	7b92      	ldrb	r2, [r2, #14]
    db98:	b98a      	cbnz	r2, dbbe <uarte_nrfx_isr_int+0x94>
    db9a:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    db9e:	b122      	cbz	r2, dbaa <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dba0:	2200      	movs	r2, #0
    dba2:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
    dba6:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
    dbaa:	68da      	ldr	r2, [r3, #12]
    dbac:	6813      	ldr	r3, [r2, #0]
    dbae:	b113      	cbz	r3, dbb6 <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    dbb0:	6851      	ldr	r1, [r2, #4]
    dbb2:	4620      	mov	r0, r4
    dbb4:	4798      	blx	r3
}
    dbb6:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    dbb8:	f7ff ff9e 	bl	daf8 <endtx_isr>
    dbbc:	e7c2      	b.n	db44 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
    dbbe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    dbc2:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    dbc6:	68db      	ldr	r3, [r3, #12]
    dbc8:	7399      	strb	r1, [r3, #14]
			return;
    dbca:	e7f4      	b.n	dbb6 <uarte_nrfx_isr_int+0x8c>

0000dbcc <uarte_nrfx_configure>:
{
    dbcc:	b530      	push	{r4, r5, lr}
    dbce:	b083      	sub	sp, #12
    dbd0:	4605      	mov	r5, r0
    dbd2:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
    dbd4:	794b      	ldrb	r3, [r1, #5]
    dbd6:	2b01      	cmp	r3, #1
    dbd8:	d006      	beq.n	dbe8 <uarte_nrfx_configure+0x1c>
    dbda:	2b03      	cmp	r3, #3
    dbdc:	d011      	beq.n	dc02 <uarte_nrfx_configure+0x36>
    dbde:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
    dbe2:	4610      	mov	r0, r2
    dbe4:	b003      	add	sp, #12
    dbe6:	bd30      	pop	{r4, r5, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    dbe8:	2300      	movs	r3, #0
    dbea:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    dbee:	79a3      	ldrb	r3, [r4, #6]
    dbf0:	2b03      	cmp	r3, #3
    dbf2:	d147      	bne.n	dc84 <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
    dbf4:	79e3      	ldrb	r3, [r4, #7]
    dbf6:	b143      	cbz	r3, dc0a <uarte_nrfx_configure+0x3e>
    dbf8:	2b01      	cmp	r3, #1
    dbfa:	d015      	beq.n	dc28 <uarte_nrfx_configure+0x5c>
    dbfc:	f06f 0285 	mvn.w	r2, #133	; 0x85
    dc00:	e7ef      	b.n	dbe2 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    dc02:	2310      	movs	r3, #16
    dc04:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    dc08:	e7f1      	b.n	dbee <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    dc0a:	2300      	movs	r3, #0
    dc0c:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    dc10:	2300      	movs	r3, #0
    dc12:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
    dc16:	7923      	ldrb	r3, [r4, #4]
    dc18:	2b01      	cmp	r3, #1
    dc1a:	d02b      	beq.n	dc74 <uarte_nrfx_configure+0xa8>
    dc1c:	2b02      	cmp	r3, #2
    dc1e:	d025      	beq.n	dc6c <uarte_nrfx_configure+0xa0>
    dc20:	b133      	cbz	r3, dc30 <uarte_nrfx_configure+0x64>
    dc22:	f06f 0285 	mvn.w	r2, #133	; 0x85
    dc26:	e7dc      	b.n	dbe2 <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    dc28:	2301      	movs	r3, #1
    dc2a:	f88d 3000 	strb.w	r3, [sp]
		break;
    dc2e:	e7ef      	b.n	dc10 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    dc30:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    dc34:	6821      	ldr	r1, [r4, #0]
    dc36:	4628      	mov	r0, r5
    dc38:	f7f8 ff9e 	bl	6b78 <baudrate_set>
    dc3c:	4602      	mov	r2, r0
    dc3e:	bb20      	cbnz	r0, dc8a <uarte_nrfx_configure+0xbe>
	return dev->config;
    dc40:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
    dc42:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    dc44:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
    dc48:	f89d 0002 	ldrb.w	r0, [sp, #2]
    dc4c:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
    dc4e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    dc52:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
    dc54:	f89d 0000 	ldrb.w	r0, [sp]
    dc58:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    dc5a:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	return dev->data;
    dc5e:	692b      	ldr	r3, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
    dc60:	3304      	adds	r3, #4
    dc62:	e894 0003 	ldmia.w	r4, {r0, r1}
    dc66:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    dc6a:	e7ba      	b.n	dbe2 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    dc6c:	230e      	movs	r3, #14
    dc6e:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
    dc72:	e7df      	b.n	dc34 <uarte_nrfx_configure+0x68>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    dc74:	230e      	movs	r3, #14
    dc76:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    dc7a:	f44f 7380 	mov.w	r3, #256	; 0x100
    dc7e:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
    dc82:	e7d7      	b.n	dc34 <uarte_nrfx_configure+0x68>
		return -ENOTSUP;
    dc84:	f06f 0285 	mvn.w	r2, #133	; 0x85
    dc88:	e7ab      	b.n	dbe2 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
    dc8a:	f06f 0285 	mvn.w	r2, #133	; 0x85
    dc8e:	e7a8      	b.n	dbe2 <uarte_nrfx_configure+0x16>

0000dc90 <uarte_nrfx_config_get>:
{
    dc90:	460b      	mov	r3, r1
	return dev->data;
    dc92:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
    dc94:	6891      	ldr	r1, [r2, #8]
    dc96:	6850      	ldr	r0, [r2, #4]
    dc98:	e883 0003 	stmia.w	r3, {r0, r1}
}
    dc9c:	2000      	movs	r0, #0
    dc9e:	4770      	bx	lr

0000dca0 <uarte_nrfx_err_check>:
	return dev->config;
    dca0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    dca2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    dca4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    dca8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    dcac:	4770      	bx	lr

0000dcae <is_tx_ready>:
	return dev->config;
    dcae:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    dcb0:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    dcb2:	685b      	ldr	r3, [r3, #4]
    dcb4:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dcb8:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    dcbc:	b929      	cbnz	r1, dcca <is_tx_ready+0x1c>
    dcbe:	b933      	cbnz	r3, dcce <is_tx_ready+0x20>
    dcc0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    dcc4:	b92b      	cbnz	r3, dcd2 <is_tx_ready+0x24>
    dcc6:	2000      	movs	r0, #0
    dcc8:	4770      	bx	lr
    dcca:	2001      	movs	r0, #1
    dccc:	4770      	bx	lr
    dcce:	2000      	movs	r0, #0
    dcd0:	4770      	bx	lr
    dcd2:	2001      	movs	r0, #1
}
    dcd4:	4770      	bx	lr

0000dcd6 <uarte_enable>:
	return dev->config;
    dcd6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    dcd8:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    dcda:	2208      	movs	r2, #8
    dcdc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    dce0:	4770      	bx	lr

0000dce2 <tx_start>:
{
    dce2:	b510      	push	{r4, lr}
	return dev->config;
    dce4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    dce6:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    dce8:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    dcec:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dcf0:	2300      	movs	r3, #0
    dcf2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    dcf6:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    dcfa:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
    dcfe:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
    dd02:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    dd04:	685b      	ldr	r3, [r3, #4]
    dd06:	f013 0f10 	tst.w	r3, #16
    dd0a:	d102      	bne.n	dd12 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dd0c:	2301      	movs	r3, #1
    dd0e:	60a3      	str	r3, [r4, #8]
}
    dd10:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    dd12:	2101      	movs	r1, #1
    dd14:	f7ff ffdf 	bl	dcd6 <uarte_enable>
    p_reg->INTENSET = mask;
    dd18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    dd1c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    dd20:	e7f4      	b.n	dd0c <tx_start+0x2a>

0000dd22 <uarte_nrfx_poll_in>:
{
    dd22:	b410      	push	{r4}
	return dev->data;
    dd24:	6904      	ldr	r4, [r0, #16]
	return dev->config;
    dd26:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    dd28:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dd2a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    dd2e:	b152      	cbz	r2, dd46 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    dd30:	7d62      	ldrb	r2, [r4, #21]
    dd32:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dd34:	2000      	movs	r0, #0
    dd36:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    dd3a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dd3e:	2201      	movs	r2, #1
    dd40:	601a      	str	r2, [r3, #0]
}
    dd42:	bc10      	pop	{r4}
    dd44:	4770      	bx	lr
		return -1;
    dd46:	f04f 30ff 	mov.w	r0, #4294967295
    dd4a:	e7fa      	b.n	dd42 <uarte_nrfx_poll_in+0x20>

0000dd4c <uarte_nrfx_fifo_fill>:
{
    dd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd50:	4680      	mov	r8, r0
	return dev->data;
    dd52:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    dd54:	68fb      	ldr	r3, [r7, #12]
    dd56:	899e      	ldrh	r6, [r3, #12]
    dd58:	4296      	cmp	r6, r2
    dd5a:	bfa8      	it	ge
    dd5c:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    dd5e:	3310      	adds	r3, #16
    dd60:	2201      	movs	r2, #1
    dd62:	e8d3 0fef 	ldaex	r0, [r3]
    dd66:	2800      	cmp	r0, #0
    dd68:	d103      	bne.n	dd72 <uarte_nrfx_fifo_fill+0x26>
    dd6a:	e8c3 2fe4 	stlex	r4, r2, [r3]
    dd6e:	2c00      	cmp	r4, #0
    dd70:	d1f7      	bne.n	dd62 <uarte_nrfx_fifo_fill+0x16>
    dd72:	d101      	bne.n	dd78 <uarte_nrfx_fifo_fill+0x2c>
	for (int i = 0; i < len; i++) {
    dd74:	2300      	movs	r3, #0
    dd76:	e006      	b.n	dd86 <uarte_nrfx_fifo_fill+0x3a>
		return 0;
    dd78:	2600      	movs	r6, #0
    dd7a:	e019      	b.n	ddb0 <uarte_nrfx_fifo_fill+0x64>
		data->int_driven->tx_buffer[i] = tx_data[i];
    dd7c:	68fc      	ldr	r4, [r7, #12]
    dd7e:	68a4      	ldr	r4, [r4, #8]
    dd80:	5ccd      	ldrb	r5, [r1, r3]
    dd82:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
    dd84:	3301      	adds	r3, #1
    dd86:	42b3      	cmp	r3, r6
    dd88:	dbf8      	blt.n	dd7c <uarte_nrfx_fifo_fill+0x30>
	__asm__ volatile(
    dd8a:	f04f 0320 	mov.w	r3, #32
    dd8e:	f3ef 8411 	mrs	r4, BASEPRI
    dd92:	f383 8812 	msr	BASEPRI_MAX, r3
    dd96:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    dd9a:	4640      	mov	r0, r8
    dd9c:	f7ff ff87 	bl	dcae <is_tx_ready>
    dda0:	b948      	cbnz	r0, ddb6 <uarte_nrfx_fifo_fill+0x6a>
		data->int_driven->fifo_fill_lock = 0;
    dda2:	68fb      	ldr	r3, [r7, #12]
    dda4:	2600      	movs	r6, #0
    dda6:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
    dda8:	f384 8811 	msr	BASEPRI, r4
    ddac:	f3bf 8f6f 	isb	sy
}
    ddb0:	4630      	mov	r0, r6
    ddb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
    ddb6:	68fb      	ldr	r3, [r7, #12]
    ddb8:	4632      	mov	r2, r6
    ddba:	6899      	ldr	r1, [r3, #8]
    ddbc:	4640      	mov	r0, r8
    ddbe:	f7ff ff90 	bl	dce2 <tx_start>
    ddc2:	e7f1      	b.n	dda8 <uarte_nrfx_fifo_fill+0x5c>

0000ddc4 <uarte_nrfx_fifo_read>:
	return dev->config;
    ddc4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    ddc6:	681b      	ldr	r3, [r3, #0]
	return dev->data;
    ddc8:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    ddca:	2a00      	cmp	r2, #0
    ddcc:	dd0c      	ble.n	dde8 <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ddce:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    ddd2:	b15a      	cbz	r2, ddec <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ddd4:	2200      	movs	r2, #0
    ddd6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    ddda:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    ddde:	7d42      	ldrb	r2, [r0, #21]
    dde0:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dde2:	2001      	movs	r0, #1
    dde4:	6018      	str	r0, [r3, #0]
}
    dde6:	4770      	bx	lr
	int num_rx = 0;
    dde8:	2000      	movs	r0, #0
    ddea:	4770      	bx	lr
    ddec:	2000      	movs	r0, #0
}
    ddee:	4770      	bx	lr

0000ddf0 <uarte_nrfx_irq_tx_enable>:
	return dev->config;
    ddf0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    ddf2:	681a      	ldr	r2, [r3, #0]
	return dev->data;
    ddf4:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
    ddf6:	f04f 0020 	mov.w	r0, #32
    ddfa:	f3ef 8311 	mrs	r3, BASEPRI
    ddfe:	f380 8812 	msr	BASEPRI_MAX, r0
    de02:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    de06:	68c9      	ldr	r1, [r1, #12]
    de08:	2000      	movs	r0, #0
    de0a:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    de0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    de10:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    de14:	f383 8811 	msr	BASEPRI, r3
    de18:	f3bf 8f6f 	isb	sy
}
    de1c:	4770      	bx	lr

0000de1e <uarte_nrfx_irq_tx_disable>:
	return dev->data;
    de1e:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
    de20:	68db      	ldr	r3, [r3, #12]
    de22:	2201      	movs	r2, #1
    de24:	739a      	strb	r2, [r3, #14]
}
    de26:	4770      	bx	lr

0000de28 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
    de28:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    de2a:	6819      	ldr	r1, [r3, #0]
	return dev->data;
    de2c:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
    de2e:	68db      	ldr	r3, [r3, #12]
    de30:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    de32:	b94a      	cbnz	r2, de48 <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    de34:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    de38:	b15a      	cbz	r2, de52 <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
    de3a:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    de3e:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
    de42:	d008      	beq.n	de56 <uarte_nrfx_irq_tx_ready_complete+0x2e>
    de44:	2001      	movs	r0, #1
    de46:	e000      	b.n	de4a <uarte_nrfx_irq_tx_ready_complete+0x22>
    de48:	2000      	movs	r0, #0
	if (ready) {
    de4a:	b108      	cbz	r0, de50 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    de4c:	2200      	movs	r2, #0
    de4e:	611a      	str	r2, [r3, #16]
}
    de50:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    de52:	2000      	movs	r0, #0
    de54:	e7f9      	b.n	de4a <uarte_nrfx_irq_tx_ready_complete+0x22>
    de56:	2000      	movs	r0, #0
    de58:	e7f7      	b.n	de4a <uarte_nrfx_irq_tx_ready_complete+0x22>

0000de5a <uarte_nrfx_irq_rx_ready>:
	return dev->config;
    de5a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    de5c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    de5e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    de62:	3800      	subs	r0, #0
    de64:	bf18      	it	ne
    de66:	2001      	movne	r0, #1
    de68:	4770      	bx	lr

0000de6a <uarte_nrfx_irq_rx_enable>:
	return dev->config;
    de6a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    de6c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    de6e:	2210      	movs	r2, #16
    de70:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    de74:	4770      	bx	lr

0000de76 <uarte_nrfx_irq_rx_disable>:
	return dev->config;
    de76:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    de78:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    de7a:	2210      	movs	r2, #16
    de7c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    de80:	4770      	bx	lr

0000de82 <uarte_nrfx_irq_err_enable>:
	return dev->config;
    de82:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    de84:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    de86:	f44f 7200 	mov.w	r2, #512	; 0x200
    de8a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    de8e:	4770      	bx	lr

0000de90 <uarte_nrfx_irq_err_disable>:
	return dev->config;
    de90:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    de92:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    de94:	f44f 7200 	mov.w	r2, #512	; 0x200
    de98:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    de9c:	4770      	bx	lr

0000de9e <uarte_nrfx_irq_is_pending>:
{
    de9e:	b538      	push	{r3, r4, r5, lr}
    dea0:	4604      	mov	r4, r0
	return dev->config;
    dea2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    dea4:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    dea6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    deaa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    deae:	d106      	bne.n	debe <uarte_nrfx_irq_is_pending+0x20>
    deb0:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    deb4:	f013 0f10 	tst.w	r3, #16
    deb8:	d107      	bne.n	deca <uarte_nrfx_irq_is_pending+0x2c>
    deba:	2000      	movs	r0, #0
}
    debc:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    debe:	f7ff ffb3 	bl	de28 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    dec2:	2800      	cmp	r0, #0
    dec4:	d0f4      	beq.n	deb0 <uarte_nrfx_irq_is_pending+0x12>
		||
    dec6:	2001      	movs	r0, #1
    dec8:	e7f8      	b.n	debc <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
    deca:	4620      	mov	r0, r4
    decc:	f7ff ffc5 	bl	de5a <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    ded0:	2800      	cmp	r0, #0
    ded2:	d0f3      	beq.n	debc <uarte_nrfx_irq_is_pending+0x1e>
		||
    ded4:	2001      	movs	r0, #1
    ded6:	e7f1      	b.n	debc <uarte_nrfx_irq_is_pending+0x1e>

0000ded8 <uarte_nrfx_irq_update>:
}
    ded8:	2001      	movs	r0, #1
    deda:	4770      	bx	lr

0000dedc <uarte_nrfx_irq_callback_set>:
	return dev->data;
    dedc:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
    dede:	68d8      	ldr	r0, [r3, #12]
    dee0:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    dee2:	68db      	ldr	r3, [r3, #12]
    dee4:	605a      	str	r2, [r3, #4]
}
    dee6:	4770      	bx	lr

0000dee8 <wait_tx_ready>:
{
    dee8:	b570      	push	{r4, r5, r6, lr}
    deea:	4606      	mov	r6, r0
    deec:	e014      	b.n	df18 <wait_tx_ready+0x30>
		if (res) {
    deee:	b17d      	cbz	r5, df10 <wait_tx_ready+0x28>
	__asm__ volatile(
    def0:	f04f 0320 	mov.w	r3, #32
    def4:	f3ef 8411 	mrs	r4, BASEPRI
    def8:	f383 8812 	msr	BASEPRI_MAX, r3
    defc:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    df00:	4630      	mov	r0, r6
    df02:	f7ff fed4 	bl	dcae <is_tx_ready>
    df06:	b9a0      	cbnz	r0, df32 <wait_tx_ready+0x4a>
	__asm__ volatile(
    df08:	f384 8811 	msr	BASEPRI, r4
    df0c:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    df10:	2021      	movs	r0, #33	; 0x21
    df12:	2100      	movs	r1, #0
    df14:	f7fd f99c 	bl	b250 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    df18:	2464      	movs	r4, #100	; 0x64
    df1a:	4630      	mov	r0, r6
    df1c:	f7ff fec7 	bl	dcae <is_tx_ready>
    df20:	4605      	mov	r5, r0
    df22:	2800      	cmp	r0, #0
    df24:	d1e3      	bne.n	deee <wait_tx_ready+0x6>
    df26:	2001      	movs	r0, #1
    df28:	f000 f8e9 	bl	e0fe <nrfx_busy_wait>
    df2c:	3c01      	subs	r4, #1
    df2e:	d1f4      	bne.n	df1a <wait_tx_ready+0x32>
    df30:	e7dd      	b.n	deee <wait_tx_ready+0x6>
}
    df32:	4620      	mov	r0, r4
    df34:	bd70      	pop	{r4, r5, r6, pc}

0000df36 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    df36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    df38:	4604      	mov	r4, r0
	return dev->config;
    df3a:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
    df3c:	6835      	ldr	r5, [r6, #0]
	return dev->data;
    df3e:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    df40:	2100      	movs	r1, #0
    df42:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    df46:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
    df48:	f7f8 fd30 	bl	69ac <uarte_nrfx_pins_configure>
	return dev->data;
    df4c:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    df4e:	3104      	adds	r1, #4
    df50:	4620      	mov	r0, r4
    df52:	f7ff fe3b 	bl	dbcc <uarte_nrfx_configure>
	if (err) {
    df56:	4604      	mov	r4, r0
    df58:	bb68      	cbnz	r0, dfb6 <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    df5a:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    df5c:	f013 0f02 	tst.w	r3, #2
    df60:	d12b      	bne.n	dfba <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    df62:	2308      	movs	r3, #8
    df64:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    df68:	7a33      	ldrb	r3, [r6, #8]
    df6a:	b95b      	cbnz	r3, df84 <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    df6c:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    df70:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    df74:	f107 0315 	add.w	r3, r7, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    df78:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    df7c:	2301      	movs	r3, #1
    df7e:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    df82:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    df84:	6873      	ldr	r3, [r6, #4]
    df86:	f013 0f02 	tst.w	r3, #2
    df8a:	d103      	bne.n	df94 <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
    df8c:	f44f 7380 	mov.w	r3, #256	; 0x100
    df90:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    df94:	6873      	ldr	r3, [r6, #4]
    df96:	f013 0f10 	tst.w	r3, #16
    df9a:	d003      	beq.n	dfa4 <uarte_instance_init+0x6e>
    df9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    dfa0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    dfa4:	3714      	adds	r7, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    dfa6:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    dfaa:	2300      	movs	r3, #0
    dfac:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dfb0:	2301      	movs	r3, #1
    dfb2:	60ab      	str	r3, [r5, #8]
    dfb4:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    dfb6:	4620      	mov	r0, r4
    dfb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    dfba:	4639      	mov	r1, r7
    dfbc:	4628      	mov	r0, r5
    dfbe:	f7f8 febb 	bl	6d38 <endtx_stoptx_ppi_init>
		if (err < 0) {
    dfc2:	2800      	cmp	r0, #0
    dfc4:	dacd      	bge.n	df62 <uarte_instance_init+0x2c>
			return err;
    dfc6:	4604      	mov	r4, r0
    dfc8:	e7f5      	b.n	dfb6 <uarte_instance_init+0x80>

0000dfca <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    dfca:	b510      	push	{r4, lr}
    dfcc:	4604      	mov	r4, r0
    dfce:	2200      	movs	r2, #0
    dfd0:	2101      	movs	r1, #1
    dfd2:	2008      	movs	r0, #8
    dfd4:	f7f5 fed2 	bl	3d7c <z_arm_irq_priority_set>
    dfd8:	2008      	movs	r0, #8
    dfda:	f7f5 fe9d 	bl	3d18 <arch_irq_enable>
    dfde:	2101      	movs	r1, #1
    dfe0:	4620      	mov	r0, r4
    dfe2:	f7ff ffa8 	bl	df36 <uarte_instance_init>
    dfe6:	bd10      	pop	{r4, pc}

0000dfe8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    dfe8:	4770      	bx	lr

0000dfea <counter_sub>:
	return (a - b) & COUNTER_MAX;
    dfea:	1a40      	subs	r0, r0, r1
}
    dfec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    dff0:	4770      	bx	lr

0000dff2 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    dff2:	f100 0350 	add.w	r3, r0, #80	; 0x50
    dff6:	009b      	lsls	r3, r3, #2
    dff8:	b29b      	uxth	r3, r3
    dffa:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    dffe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    e002:	2200      	movs	r2, #0
    e004:	601a      	str	r2, [r3, #0]
    e006:	681b      	ldr	r3, [r3, #0]
}
    e008:	4770      	bx	lr

0000e00a <absolute_time_to_cc>:
}
    e00a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e00e:	4770      	bx	lr

0000e010 <full_int_lock>:
	__asm__ volatile(
    e010:	f04f 0320 	mov.w	r3, #32
    e014:	f3ef 8011 	mrs	r0, BASEPRI
    e018:	f383 8812 	msr	BASEPRI_MAX, r3
    e01c:	f3bf 8f6f 	isb	sy
}
    e020:	4770      	bx	lr

0000e022 <full_int_unlock>:
	__asm__ volatile(
    e022:	f380 8811 	msr	BASEPRI, r0
    e026:	f3bf 8f6f 	isb	sy
}
    e02a:	4770      	bx	lr

0000e02c <set_absolute_alarm>:
{
    e02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e02e:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    e030:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    e034:	f7f8 fec0 	bl	6db8 <get_comparator>
    e038:	4607      	mov	r7, r0
    e03a:	e019      	b.n	e070 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    e03c:	2013      	movs	r0, #19
    e03e:	f000 fcc2 	bl	e9c6 <z_impl_k_busy_wait>
}
    e042:	e022      	b.n	e08a <set_absolute_alarm+0x5e>
		event_clear(chan);
    e044:	4630      	mov	r0, r6
    e046:	f7ff ffd4 	bl	dff2 <event_clear>
		event_enable(chan);
    e04a:	4630      	mov	r0, r6
    e04c:	f7f8 febc 	bl	6dc8 <event_enable>
		set_comparator(chan, cc_val);
    e050:	4629      	mov	r1, r5
    e052:	4630      	mov	r0, r6
    e054:	f7f8 fea6 	bl	6da4 <set_comparator>
		now2 = counter();
    e058:	f7f8 feca 	bl	6df0 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    e05c:	4284      	cmp	r4, r0
    e05e:	d01e      	beq.n	e09e <set_absolute_alarm+0x72>
    e060:	1c81      	adds	r1, r0, #2
    e062:	4628      	mov	r0, r5
    e064:	f7ff ffc1 	bl	dfea <counter_sub>
	} while ((now2 != now) &&
    e068:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    e06c:	d917      	bls.n	e09e <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    e06e:	462f      	mov	r7, r5
		now = counter();
    e070:	f7f8 febe 	bl	6df0 <counter>
    e074:	4604      	mov	r4, r0
		set_comparator(chan, now);
    e076:	4601      	mov	r1, r0
    e078:	4630      	mov	r0, r6
    e07a:	f7f8 fe93 	bl	6da4 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    e07e:	4621      	mov	r1, r4
    e080:	4638      	mov	r0, r7
    e082:	f7ff ffb2 	bl	dfea <counter_sub>
    e086:	2801      	cmp	r0, #1
    e088:	d0d8      	beq.n	e03c <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    e08a:	1ca7      	adds	r7, r4, #2
    e08c:	4639      	mov	r1, r7
    e08e:	4628      	mov	r0, r5
    e090:	f7ff ffab 	bl	dfea <counter_sub>
    e094:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    e098:	d9d4      	bls.n	e044 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    e09a:	463d      	mov	r5, r7
    e09c:	e7d2      	b.n	e044 <set_absolute_alarm+0x18>
}
    e09e:	4628      	mov	r0, r5
    e0a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e0a2 <compare_set>:
{
    e0a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    e0a4:	b083      	sub	sp, #12
    e0a6:	4604      	mov	r4, r0
    e0a8:	4617      	mov	r7, r2
    e0aa:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    e0ac:	f7f8 fea6 	bl	6dfc <compare_int_lock>
    e0b0:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    e0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e0b4:	9301      	str	r3, [sp, #4]
    e0b6:	9b08      	ldr	r3, [sp, #32]
    e0b8:	9300      	str	r3, [sp, #0]
    e0ba:	463a      	mov	r2, r7
    e0bc:	462b      	mov	r3, r5
    e0be:	4620      	mov	r0, r4
    e0c0:	f7f8 ff7a 	bl	6fb8 <compare_set_nolocks>
    e0c4:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    e0c6:	4631      	mov	r1, r6
    e0c8:	4620      	mov	r0, r4
    e0ca:	f7f8 fef1 	bl	6eb0 <compare_int_unlock>
}
    e0ce:	4628      	mov	r0, r5
    e0d0:	b003      	add	sp, #12
    e0d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e0d4 <sys_clock_cycle_get_32>:
{
    e0d4:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    e0d6:	f7f8 ff4f 	bl	6f78 <z_nrf_rtc_timer_read>
}
    e0da:	bd08      	pop	{r3, pc}

0000e0dc <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    e0dc:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    e0de:	f7fd fbc9 	bl	b874 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    e0e2:	bd08      	pop	{r3, pc}

0000e0e4 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    e0e4:	b510      	push	{r4, lr}
    e0e6:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    e0e8:	f7f5 fcc4 	bl	3a74 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    e0ec:	f7f5 fd94 	bl	3c18 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    e0f0:	4620      	mov	r0, r4
    e0f2:	f7ff fff3 	bl	e0dc <hw_cc3xx_init_internal>
	return res;
}
    e0f6:	bd10      	pop	{r4, pc}

0000e0f8 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    e0f8:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    e0fa:	4780      	blx	r0
}
    e0fc:	bd08      	pop	{r3, pc}

0000e0fe <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    e0fe:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    e100:	f000 fc61 	bl	e9c6 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    e104:	bd08      	pop	{r3, pc}

0000e106 <pin_is_task_output>:
{
    e106:	b510      	push	{r4, lr}
    e108:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    e10a:	f7f9 fbf3 	bl	78f4 <pin_is_output>
    e10e:	b128      	cbz	r0, e11c <pin_is_task_output+0x16>
    e110:	4620      	mov	r0, r4
    e112:	f7f9 fbd9 	bl	78c8 <pin_in_use_by_te>
    e116:	b118      	cbz	r0, e120 <pin_is_task_output+0x1a>
    e118:	2001      	movs	r0, #1
    e11a:	e000      	b.n	e11e <pin_is_task_output+0x18>
    e11c:	2000      	movs	r0, #0
}
    e11e:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    e120:	2000      	movs	r0, #0
    e122:	e7fc      	b.n	e11e <pin_is_task_output+0x18>

0000e124 <pin_is_input>:
{
    e124:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    e126:	f7f9 fbe5 	bl	78f4 <pin_is_output>
    e12a:	f080 0001 	eor.w	r0, r0, #1
}
    e12e:	b2c0      	uxtb	r0, r0
    e130:	bd08      	pop	{r3, pc}

0000e132 <gpiote_polarity_to_trigger>:
}
    e132:	4770      	bx	lr

0000e134 <gpiote_trigger_to_polarity>:
}
    e134:	4770      	bx	lr

0000e136 <is_level>:
}
    e136:	2803      	cmp	r0, #3
    e138:	bf94      	ite	ls
    e13a:	2000      	movls	r0, #0
    e13c:	2001      	movhi	r0, #1
    e13e:	4770      	bx	lr

0000e140 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    e140:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    e142:	f7fa f8cf 	bl	82e4 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
    e146:	f7f9 fb4d 	bl	77e4 <nrfx_clock_irq_handler>
}
    e14a:	bd08      	pop	{r3, pc}

0000e14c <nrf52_errata_166>:
                }
            }
        #endif
        return false;
    #endif
}
    e14c:	2000      	movs	r0, #0
    e14e:	4770      	bx	lr

0000e150 <nrf52_errata_171>:
                }
            }
        #endif
        return false;
    #endif
}
    e150:	2000      	movs	r0, #0
    e152:	4770      	bx	lr

0000e154 <nrf52_errata_187>:
                }
            }
        #endif
        return false;
    #endif
}
    e154:	2000      	movs	r0, #0
    e156:	4770      	bx	lr

0000e158 <nrf52_errata_199>:
                }
            }
        #endif
        return false;
    #endif
}
    e158:	2000      	movs	r0, #0
    e15a:	4770      	bx	lr

0000e15c <nrf52_errata_223>:
                }
            }
        #endif
        return false;
    #endif
}
    e15c:	2000      	movs	r0, #0
    e15e:	4770      	bx	lr

0000e160 <nrfx_usbd_consumer>:
{
    e160:	b430      	push	{r4, r5}
    size_t size = p_transfer->size;
    e162:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    e164:	42a3      	cmp	r3, r4
    e166:	d908      	bls.n	e17a <nrfx_usbd_consumer+0x1a>
        p_next->size = 0;
    e168:	2500      	movs	r5, #0
    e16a:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    e16c:	6809      	ldr	r1, [r1, #0]
    e16e:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
    e170:	429a      	cmp	r2, r3
    e172:	d00b      	beq.n	e18c <nrfx_usbd_consumer+0x2c>
    e174:	2000      	movs	r0, #0
}
    e176:	bc30      	pop	{r4, r5}
    e178:	4770      	bx	lr
        p_next->size = data_size;
    e17a:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    e17c:	680d      	ldr	r5, [r1, #0]
    e17e:	6005      	str	r5, [r0, #0]
        size -= data_size;
    e180:	1ae4      	subs	r4, r4, r3
        p_transfer->size = size;
    e182:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    e184:	6808      	ldr	r0, [r1, #0]
    e186:	4418      	add	r0, r3
    e188:	6008      	str	r0, [r1, #0]
    e18a:	e7f1      	b.n	e170 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
    e18c:	b90c      	cbnz	r4, e192 <nrfx_usbd_consumer+0x32>
    e18e:	2000      	movs	r0, #0
    e190:	e7f1      	b.n	e176 <nrfx_usbd_consumer+0x16>
    e192:	2001      	movs	r0, #1
    e194:	e7ef      	b.n	e176 <nrfx_usbd_consumer+0x16>

0000e196 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
    e196:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
    e198:	4293      	cmp	r3, r2
    e19a:	d800      	bhi.n	e19e <nrfx_usbd_feeder_ram+0x8>
    size_t tx_size = p_transfer->size;
    e19c:	461a      	mov	r2, r3
    p_next->p_data = p_transfer->p_data;
    e19e:	680b      	ldr	r3, [r1, #0]
    e1a0:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
    e1a2:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
    e1a4:	6848      	ldr	r0, [r1, #4]
    e1a6:	1a80      	subs	r0, r0, r2
    e1a8:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    e1aa:	680b      	ldr	r3, [r1, #0]
    e1ac:	441a      	add	r2, r3
    e1ae:	600a      	str	r2, [r1, #0]
}
    e1b0:	3800      	subs	r0, #0
    e1b2:	bf18      	it	ne
    e1b4:	2001      	movne	r0, #1
    e1b6:	4770      	bx	lr

0000e1b8 <nrfx_usbd_feeder_ram_zlp>:
    size_t tx_size = p_transfer->size;
    e1b8:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
    e1ba:	4293      	cmp	r3, r2
    e1bc:	d800      	bhi.n	e1c0 <nrfx_usbd_feeder_ram_zlp+0x8>
    size_t tx_size = p_transfer->size;
    e1be:	461a      	mov	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    e1c0:	b162      	cbz	r2, e1dc <nrfx_usbd_feeder_ram_zlp+0x24>
    e1c2:	680b      	ldr	r3, [r1, #0]
    e1c4:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
    e1c6:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
    e1c8:	684b      	ldr	r3, [r1, #4]
    e1ca:	1a9b      	subs	r3, r3, r2
    e1cc:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    e1ce:	680b      	ldr	r3, [r1, #0]
    e1d0:	4413      	add	r3, r2
    e1d2:	600b      	str	r3, [r1, #0]
}
    e1d4:	1e10      	subs	r0, r2, #0
    e1d6:	bf18      	it	ne
    e1d8:	2001      	movne	r0, #1
    e1da:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    e1dc:	2300      	movs	r3, #0
    e1de:	e7f1      	b.n	e1c4 <nrfx_usbd_feeder_ram_zlp+0xc>

0000e1e0 <ev_started_handler>:
}
    e1e0:	4770      	bx	lr

0000e1e2 <usbd_dma_scheduler_algorithm>:
}
    e1e2:	fa90 f0a0 	rbit	r0, r0
    e1e6:	fab0 f080 	clz	r0, r0
    e1ea:	4770      	bx	lr

0000e1ec <nrfx_usbd_feeder_flash>:
{
    e1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e1f0:	4606      	mov	r6, r0
    e1f2:	460c      	mov	r4, r1
    e1f4:	4615      	mov	r5, r2
    size_t tx_size  = p_transfer->size;
    e1f6:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
    e1fa:	f7fa fe71 	bl	8ee0 <nrfx_usbd_feeder_buffer_get>
    e1fe:	4607      	mov	r7, r0
    if (tx_size > ep_size)
    e200:	45a8      	cmp	r8, r5
    e202:	d800      	bhi.n	e206 <nrfx_usbd_feeder_flash+0x1a>
    size_t tx_size  = p_transfer->size;
    e204:	4645      	mov	r5, r8
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    e206:	462a      	mov	r2, r5
    e208:	6821      	ldr	r1, [r4, #0]
    e20a:	4638      	mov	r0, r7
    e20c:	f7ff f9e0 	bl	d5d0 <memcpy>
    p_next->p_data.tx = p_buffer;
    e210:	6037      	str	r7, [r6, #0]
    p_next->size = tx_size;
    e212:	6075      	str	r5, [r6, #4]
    p_transfer->size -= tx_size;
    e214:	6860      	ldr	r0, [r4, #4]
    e216:	1b40      	subs	r0, r0, r5
    e218:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    e21a:	6822      	ldr	r2, [r4, #0]
    e21c:	442a      	add	r2, r5
    e21e:	6022      	str	r2, [r4, #0]
}
    e220:	3800      	subs	r0, #0
    e222:	bf18      	it	ne
    e224:	2001      	movne	r0, #1
    e226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e22a <nrfx_usbd_feeder_flash_zlp>:
{
    e22a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e22e:	4606      	mov	r6, r0
    e230:	460d      	mov	r5, r1
    e232:	4614      	mov	r4, r2
    size_t tx_size  = p_transfer->size;
    e234:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
    e238:	f7fa fe52 	bl	8ee0 <nrfx_usbd_feeder_buffer_get>
    e23c:	4607      	mov	r7, r0
    if (tx_size > ep_size)
    e23e:	45a0      	cmp	r8, r4
    e240:	d800      	bhi.n	e244 <nrfx_usbd_feeder_flash_zlp+0x1a>
    size_t tx_size  = p_transfer->size;
    e242:	4644      	mov	r4, r8
    if (tx_size != 0)
    e244:	b96c      	cbnz	r4, e262 <nrfx_usbd_feeder_flash_zlp+0x38>
        p_next->p_data.tx = NULL;
    e246:	2300      	movs	r3, #0
    e248:	6033      	str	r3, [r6, #0]
    p_next->size = tx_size;
    e24a:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
    e24c:	686b      	ldr	r3, [r5, #4]
    e24e:	1b1b      	subs	r3, r3, r4
    e250:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    e252:	682b      	ldr	r3, [r5, #0]
    e254:	4423      	add	r3, r4
    e256:	602b      	str	r3, [r5, #0]
}
    e258:	1e20      	subs	r0, r4, #0
    e25a:	bf18      	it	ne
    e25c:	2001      	movne	r0, #1
    e25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    e262:	4622      	mov	r2, r4
    e264:	6829      	ldr	r1, [r5, #0]
    e266:	4638      	mov	r0, r7
    e268:	f7ff f9b2 	bl	d5d0 <memcpy>
        p_next->p_data.tx = p_buffer;
    e26c:	6037      	str	r7, [r6, #0]
    e26e:	e7ec      	b.n	e24a <nrfx_usbd_feeder_flash_zlp+0x20>

0000e270 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    e270:	b148      	cbz	r0, e286 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    e272:	68c3      	ldr	r3, [r0, #12]
    e274:	8818      	ldrh	r0, [r3, #0]
    e276:	f3c0 0008 	ubfx	r0, r0, #0, #9
    e27a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    e27e:	bf14      	ite	ne
    e280:	2000      	movne	r0, #0
    e282:	2001      	moveq	r0, #1
    e284:	4770      	bx	lr
		return false;
    e286:	2000      	movs	r0, #0
}
    e288:	4770      	bx	lr

0000e28a <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    e28a:	68c2      	ldr	r2, [r0, #12]
    e28c:	6903      	ldr	r3, [r0, #16]
    e28e:	431a      	orrs	r2, r3
    e290:	f012 0203 	ands.w	r2, r2, #3
    e294:	d10d      	bne.n	e2b2 <create_free_list+0x28>
	slab->free_list = NULL;
    e296:	2100      	movs	r1, #0
    e298:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    e29a:	e005      	b.n	e2a8 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    e29c:	6941      	ldr	r1, [r0, #20]
    e29e:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    e2a0:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    e2a2:	68c1      	ldr	r1, [r0, #12]
    e2a4:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    e2a6:	3201      	adds	r2, #1
    e2a8:	6881      	ldr	r1, [r0, #8]
    e2aa:	4291      	cmp	r1, r2
    e2ac:	d8f6      	bhi.n	e29c <create_free_list+0x12>
	return 0;
    e2ae:	2000      	movs	r0, #0
    e2b0:	4770      	bx	lr
		return -EINVAL;
    e2b2:	f06f 0015 	mvn.w	r0, #21
}
    e2b6:	4770      	bx	lr

0000e2b8 <k_mem_slab_init>:
{
    e2b8:	b510      	push	{r4, lr}
    e2ba:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    e2bc:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    e2be:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    e2c0:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    e2c2:	2300      	movs	r3, #0
    e2c4:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    e2c6:	f7ff ffe0 	bl	e28a <create_free_list>
	if (rc < 0) {
    e2ca:	2800      	cmp	r0, #0
    e2cc:	db01      	blt.n	e2d2 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    e2ce:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    e2d0:	6064      	str	r4, [r4, #4]
}
    e2d2:	bd10      	pop	{r4, pc}

0000e2d4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    e2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e2d6:	4604      	mov	r4, r0
    e2d8:	460d      	mov	r5, r1
	__asm__ volatile(
    e2da:	f04f 0320 	mov.w	r3, #32
    e2de:	f3ef 8611 	mrs	r6, BASEPRI
    e2e2:	f383 8812 	msr	BASEPRI_MAX, r3
    e2e6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    e2ea:	6943      	ldr	r3, [r0, #20]
    e2ec:	b163      	cbz	r3, e308 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    e2ee:	682b      	ldr	r3, [r5, #0]
    e2f0:	6962      	ldr	r2, [r4, #20]
    e2f2:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    e2f4:	682b      	ldr	r3, [r5, #0]
    e2f6:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    e2f8:	69a3      	ldr	r3, [r4, #24]
    e2fa:	3b01      	subs	r3, #1
    e2fc:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    e2fe:	f386 8811 	msr	BASEPRI, r6
    e302:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    e306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e308:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    e30c:	f000 fa6a 	bl	e7e4 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    e310:	2800      	cmp	r0, #0
    e312:	d0ec      	beq.n	e2ee <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    e314:	682a      	ldr	r2, [r5, #0]
    e316:	2100      	movs	r1, #0
    e318:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    e31c:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    e31e:	f000 f99f 	bl	e660 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    e322:	4631      	mov	r1, r6
    e324:	4638      	mov	r0, r7
    e326:	f7fc fc65 	bl	abf4 <z_reschedule>
			return;
    e32a:	e7ec      	b.n	e306 <k_mem_slab_free+0x32>

0000e32c <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    e32c:	3207      	adds	r2, #7
    e32e:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    e332:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    e336:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    e33a:	2300      	movs	r3, #0
    e33c:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
    e340:	1888      	adds	r0, r1, r2
    e342:	4770      	bx	lr

0000e344 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e344:	f3ef 8005 	mrs	r0, IPSR
}
    e348:	3800      	subs	r0, #0
    e34a:	bf18      	it	ne
    e34c:	2001      	movne	r0, #1
    e34e:	4770      	bx	lr

0000e350 <k_thread_name_get>:
}
    e350:	3074      	adds	r0, #116	; 0x74
    e352:	4770      	bx	lr

0000e354 <z_impl_k_thread_start>:
{
    e354:	b508      	push	{r3, lr}
	z_sched_start(thread);
    e356:	f7fc fd77 	bl	ae48 <z_sched_start>
}
    e35a:	bd08      	pop	{r3, pc}

0000e35c <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    e35c:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    e35e:	2400      	movs	r4, #0
    e360:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    e362:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    e364:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    e366:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    e368:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    e36a:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    e36c:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    e36e:	bc10      	pop	{r4}
    e370:	4770      	bx	lr

0000e372 <z_impl_k_thread_create>:
{
    e372:	b5f0      	push	{r4, r5, r6, r7, lr}
    e374:	b087      	sub	sp, #28
    e376:	4604      	mov	r4, r0
    e378:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    e37c:	2500      	movs	r5, #0
    e37e:	9505      	str	r5, [sp, #20]
    e380:	9d10      	ldr	r5, [sp, #64]	; 0x40
    e382:	9504      	str	r5, [sp, #16]
    e384:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    e386:	9503      	str	r5, [sp, #12]
    e388:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    e38a:	9502      	str	r5, [sp, #8]
    e38c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    e38e:	9501      	str	r5, [sp, #4]
    e390:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    e392:	9500      	str	r5, [sp, #0]
    e394:	f7fc f84c 	bl	a430 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    e398:	f1b7 3fff 	cmp.w	r7, #4294967295
    e39c:	bf08      	it	eq
    e39e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    e3a2:	d102      	bne.n	e3aa <z_impl_k_thread_create+0x38>
}
    e3a4:	4620      	mov	r0, r4
    e3a6:	b007      	add	sp, #28
    e3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
    e3aa:	4632      	mov	r2, r6
    e3ac:	463b      	mov	r3, r7
    e3ae:	4620      	mov	r0, r4
    e3b0:	f7fc f82c 	bl	a40c <schedule_new_thread>
    e3b4:	e7f6      	b.n	e3a4 <z_impl_k_thread_create+0x32>

0000e3b6 <z_pm_save_idle_exit>:
{
    e3b6:	b508      	push	{r3, lr}
	pm_system_resume();
    e3b8:	f7f5 fa4a 	bl	3850 <pm_system_resume>
	sys_clock_idle_exit();
    e3bc:	f7ff fe14 	bl	dfe8 <sys_clock_idle_exit>
}
    e3c0:	bd08      	pop	{r3, pc}

0000e3c2 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    e3c2:	4288      	cmp	r0, r1
    e3c4:	da00      	bge.n	e3c8 <new_prio_for_inheritance+0x6>
    e3c6:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    e3c8:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    e3cc:	db01      	blt.n	e3d2 <new_prio_for_inheritance+0x10>
    e3ce:	4608      	mov	r0, r1
    e3d0:	4770      	bx	lr
    e3d2:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    e3d6:	4770      	bx	lr

0000e3d8 <adjust_owner_prio>:
{
    e3d8:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    e3da:	6880      	ldr	r0, [r0, #8]
    e3dc:	f990 300e 	ldrsb.w	r3, [r0, #14]
    e3e0:	428b      	cmp	r3, r1
    e3e2:	d101      	bne.n	e3e8 <adjust_owner_prio+0x10>
	return false;
    e3e4:	2000      	movs	r0, #0
}
    e3e6:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    e3e8:	f7fc fd7c 	bl	aee4 <z_set_prio>
    e3ec:	e7fb      	b.n	e3e6 <adjust_owner_prio+0xe>

0000e3ee <z_impl_k_mutex_init>:
{
    e3ee:	4603      	mov	r3, r0
	mutex->owner = NULL;
    e3f0:	2000      	movs	r0, #0
    e3f2:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    e3f4:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    e3f6:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    e3f8:	605b      	str	r3, [r3, #4]
}
    e3fa:	4770      	bx	lr

0000e3fc <prepare_thread_to_run>:
{
    e3fc:	b508      	push	{r3, lr}
    e3fe:	2200      	movs	r2, #0
    e400:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
    e404:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
    e406:	f000 f92b 	bl	e660 <z_ready_thread>
}
    e40a:	bd08      	pop	{r3, pc}

0000e40c <queue_insert>:
{
    e40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e410:	4605      	mov	r5, r0
    e412:	460e      	mov	r6, r1
    e414:	4614      	mov	r4, r2
    e416:	461f      	mov	r7, r3
    e418:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    e41c:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
    e420:	f04f 0320 	mov.w	r3, #32
    e424:	f3ef 8911 	mrs	r9, BASEPRI
    e428:	f383 8812 	msr	BASEPRI_MAX, r3
    e42c:	f3bf 8f6f 	isb	sy
	if (is_append) {
    e430:	b102      	cbz	r2, e434 <queue_insert+0x28>
	return list->tail;
    e432:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    e434:	4640      	mov	r0, r8
    e436:	f000 f9d5 	bl	e7e4 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    e43a:	b9a0      	cbnz	r0, e466 <queue_insert+0x5a>
	if (alloc) {
    e43c:	b9e7      	cbnz	r7, e478 <queue_insert+0x6c>
	node->next_and_flags = flags;
    e43e:	2300      	movs	r3, #0
    e440:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    e442:	b356      	cbz	r6, e49a <queue_insert+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    e444:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    e446:	f033 0303 	bics.w	r3, r3, #3
    e44a:	d134      	bne.n	e4b6 <queue_insert+0xaa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e44c:	6823      	ldr	r3, [r4, #0]
    e44e:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    e452:	6023      	str	r3, [r4, #0]
	return list->tail;
    e454:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    e456:	b35a      	cbz	r2, e4b0 <queue_insert+0xa4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e458:	6813      	ldr	r3, [r2, #0]
    e45a:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    e45e:	4323      	orrs	r3, r4
    e460:	6013      	str	r3, [r2, #0]
	list->tail = node;
    e462:	606c      	str	r4, [r5, #4]
}
    e464:	e031      	b.n	e4ca <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
    e466:	4621      	mov	r1, r4
    e468:	f7ff ffc8 	bl	e3fc <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
    e46c:	4649      	mov	r1, r9
    e46e:	4640      	mov	r0, r8
    e470:	f7fc fbc0 	bl	abf4 <z_reschedule>
		return 0;
    e474:	2000      	movs	r0, #0
    e476:	e02d      	b.n	e4d4 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
    e478:	2108      	movs	r1, #8
    e47a:	2000      	movs	r0, #0
    e47c:	f7fd f9ac 	bl	b7d8 <z_thread_aligned_alloc>
		if (anode == NULL) {
    e480:	b120      	cbz	r0, e48c <queue_insert+0x80>
		anode->data = data;
    e482:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
    e484:	2201      	movs	r2, #1
    e486:	6002      	str	r2, [r0, #0]
		data = anode;
    e488:	4604      	mov	r4, r0
    e48a:	e7da      	b.n	e442 <queue_insert+0x36>
	__asm__ volatile(
    e48c:	f389 8811 	msr	BASEPRI, r9
    e490:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    e494:	f06f 000b 	mvn.w	r0, #11
    e498:	e01c      	b.n	e4d4 <queue_insert+0xc8>
	return list->head;
    e49a:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e49c:	6823      	ldr	r3, [r4, #0]
    e49e:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    e4a2:	4313      	orrs	r3, r2
    e4a4:	6023      	str	r3, [r4, #0]
	list->head = node;
    e4a6:	602c      	str	r4, [r5, #0]
	return list->tail;
    e4a8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
    e4aa:	b973      	cbnz	r3, e4ca <queue_insert+0xbe>
	list->tail = node;
    e4ac:	606c      	str	r4, [r5, #4]
}
    e4ae:	e00c      	b.n	e4ca <queue_insert+0xbe>
	list->tail = node;
    e4b0:	606c      	str	r4, [r5, #4]
	list->head = node;
    e4b2:	602c      	str	r4, [r5, #0]
}
    e4b4:	e009      	b.n	e4ca <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e4b6:	6822      	ldr	r2, [r4, #0]
    e4b8:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    e4bc:	4313      	orrs	r3, r2
    e4be:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e4c0:	6833      	ldr	r3, [r6, #0]
    e4c2:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    e4c6:	431c      	orrs	r4, r3
    e4c8:	6034      	str	r4, [r6, #0]
	z_reschedule(&queue->lock, key);
    e4ca:	4649      	mov	r1, r9
    e4cc:	4640      	mov	r0, r8
    e4ce:	f7fc fb91 	bl	abf4 <z_reschedule>
	return 0;
    e4d2:	2000      	movs	r0, #0
}
    e4d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000e4d8 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    e4d8:	b160      	cbz	r0, e4f4 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e4da:	6803      	ldr	r3, [r0, #0]
    e4dc:	f013 0f03 	tst.w	r3, #3
    e4e0:	d008      	beq.n	e4f4 <z_queue_node_peek+0x1c>
{
    e4e2:	b510      	push	{r4, lr}
		ret = anode->data;
    e4e4:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    e4e6:	b909      	cbnz	r1, e4ec <z_queue_node_peek+0x14>
		ret = anode->data;
    e4e8:	4620      	mov	r0, r4
}
    e4ea:	bd10      	pop	{r4, pc}
			k_free(anode);
    e4ec:	f000 fae2 	bl	eab4 <k_free>
		ret = anode->data;
    e4f0:	4620      	mov	r0, r4
    e4f2:	e7fa      	b.n	e4ea <z_queue_node_peek+0x12>
}
    e4f4:	4770      	bx	lr

0000e4f6 <k_queue_append>:
{
    e4f6:	b500      	push	{lr}
    e4f8:	b083      	sub	sp, #12
    e4fa:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    e4fc:	2301      	movs	r3, #1
    e4fe:	9300      	str	r3, [sp, #0]
    e500:	2300      	movs	r3, #0
    e502:	4619      	mov	r1, r3
    e504:	f7ff ff82 	bl	e40c <queue_insert>
}
    e508:	b003      	add	sp, #12
    e50a:	f85d fb04 	ldr.w	pc, [sp], #4

0000e50e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    e50e:	b13a      	cbz	r2, e520 <z_impl_k_sem_init+0x12>
    e510:	428a      	cmp	r2, r1
    e512:	d308      	bcc.n	e526 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    e514:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    e516:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    e518:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    e51a:	6040      	str	r0, [r0, #4]
	return 0;
    e51c:	2000      	movs	r0, #0
    e51e:	4770      	bx	lr
		return -EINVAL;
    e520:	f06f 0015 	mvn.w	r0, #21
    e524:	4770      	bx	lr
    e526:	f06f 0015 	mvn.w	r0, #21
}
    e52a:	4770      	bx	lr

0000e52c <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    e52c:	2300      	movs	r3, #0
    e52e:	6003      	str	r3, [r0, #0]
    e530:	6083      	str	r3, [r0, #8]
    e532:	60c3      	str	r3, [r0, #12]
    e534:	6041      	str	r1, [r0, #4]
}
    e536:	4770      	bx	lr

0000e538 <k_work_submit_to_queue>:
{
    e538:	b530      	push	{r4, r5, lr}
    e53a:	b083      	sub	sp, #12
    e53c:	9001      	str	r0, [sp, #4]
    e53e:	4608      	mov	r0, r1
	__asm__ volatile(
    e540:	f04f 0320 	mov.w	r3, #32
    e544:	f3ef 8511 	mrs	r5, BASEPRI
    e548:	f383 8812 	msr	BASEPRI_MAX, r3
    e54c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    e550:	a901      	add	r1, sp, #4
    e552:	f7fc f98f 	bl	a874 <submit_to_queue_locked>
    e556:	4604      	mov	r4, r0
	__asm__ volatile(
    e558:	f385 8811 	msr	BASEPRI, r5
    e55c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    e560:	2800      	cmp	r0, #0
    e562:	dc02      	bgt.n	e56a <k_work_submit_to_queue+0x32>
}
    e564:	4620      	mov	r0, r4
    e566:	b003      	add	sp, #12
    e568:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
    e56a:	f7fc fea3 	bl	b2b4 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    e56e:	2800      	cmp	r0, #0
    e570:	d0f8      	beq.n	e564 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
    e572:	f7fc fdd9 	bl	b128 <z_impl_k_yield>
	return ret;
    e576:	e7f5      	b.n	e564 <k_work_submit_to_queue+0x2c>

0000e578 <thread_active_elsewhere>:
}
    e578:	2000      	movs	r0, #0
    e57a:	4770      	bx	lr

0000e57c <pended_on_thread>:
}
    e57c:	6880      	ldr	r0, [r0, #8]
    e57e:	4770      	bx	lr

0000e580 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    e580:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    e584:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    e588:	4283      	cmp	r3, r0
    e58a:	d001      	beq.n	e590 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    e58c:	1ac0      	subs	r0, r0, r3
    e58e:	4770      	bx	lr
	return 0;
    e590:	2000      	movs	r0, #0
}
    e592:	4770      	bx	lr

0000e594 <z_unpend_thread_no_timeout>:
{
    e594:	b538      	push	{r3, r4, r5, lr}
    e596:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    e598:	2300      	movs	r3, #0
	__asm__ volatile(
    e59a:	f04f 0220 	mov.w	r2, #32
    e59e:	f3ef 8511 	mrs	r5, BASEPRI
    e5a2:	f382 8812 	msr	BASEPRI_MAX, r2
    e5a6:	f3bf 8f6f 	isb	sy
    e5aa:	b98b      	cbnz	r3, e5d0 <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    e5ac:	4620      	mov	r0, r4
    e5ae:	f7ff ffe5 	bl	e57c <pended_on_thread>
    e5b2:	4621      	mov	r1, r4
    e5b4:	f000 f822 	bl	e5fc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    e5b8:	7b63      	ldrb	r3, [r4, #13]
    e5ba:	f023 0302 	bic.w	r3, r3, #2
    e5be:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    e5c0:	2300      	movs	r3, #0
    e5c2:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    e5c4:	f385 8811 	msr	BASEPRI, r5
    e5c8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e5cc:	2301      	movs	r3, #1
    e5ce:	e7ec      	b.n	e5aa <z_unpend_thread_no_timeout+0x16>
}
    e5d0:	bd38      	pop	{r3, r4, r5, pc}

0000e5d2 <z_reschedule_irqlock>:
{
    e5d2:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    e5d4:	4603      	mov	r3, r0
    e5d6:	b920      	cbnz	r0, e5e2 <z_reschedule_irqlock+0x10>
    e5d8:	f3ef 8205 	mrs	r2, IPSR
    e5dc:	b942      	cbnz	r2, e5f0 <z_reschedule_irqlock+0x1e>
    e5de:	2201      	movs	r2, #1
    e5e0:	e000      	b.n	e5e4 <z_reschedule_irqlock+0x12>
    e5e2:	2200      	movs	r2, #0
	if (resched(key)) {
    e5e4:	b932      	cbnz	r2, e5f4 <z_reschedule_irqlock+0x22>
    e5e6:	f383 8811 	msr	BASEPRI, r3
    e5ea:	f3bf 8f6f 	isb	sy
}
    e5ee:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    e5f0:	2200      	movs	r2, #0
    e5f2:	e7f7      	b.n	e5e4 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    e5f4:	4618      	mov	r0, r3
    e5f6:	f7f5 fbf7 	bl	3de8 <arch_swap>
	return ret;
    e5fa:	e7f8      	b.n	e5ee <z_reschedule_irqlock+0x1c>

0000e5fc <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    e5fc:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    e5fe:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    e600:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    e602:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    e604:	2300      	movs	r3, #0
    e606:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    e608:	604b      	str	r3, [r1, #4]
}
    e60a:	4770      	bx	lr

0000e60c <z_unpend_thread>:
{
    e60c:	b538      	push	{r3, r4, r5, lr}
    e60e:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    e610:	2300      	movs	r3, #0
	__asm__ volatile(
    e612:	f04f 0220 	mov.w	r2, #32
    e616:	f3ef 8511 	mrs	r5, BASEPRI
    e61a:	f382 8812 	msr	BASEPRI_MAX, r2
    e61e:	f3bf 8f6f 	isb	sy
    e622:	b98b      	cbnz	r3, e648 <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    e624:	4620      	mov	r0, r4
    e626:	f7ff ffa9 	bl	e57c <pended_on_thread>
    e62a:	4621      	mov	r1, r4
    e62c:	f7ff ffe6 	bl	e5fc <z_priq_dumb_remove>
    e630:	7b63      	ldrb	r3, [r4, #13]
    e632:	f023 0302 	bic.w	r3, r3, #2
    e636:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    e638:	2300      	movs	r3, #0
    e63a:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    e63c:	f385 8811 	msr	BASEPRI, r5
    e640:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e644:	2301      	movs	r3, #1
    e646:	e7ec      	b.n	e622 <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
    e648:	f104 0018 	add.w	r0, r4, #24
    e64c:	f000 f958 	bl	e900 <z_abort_timeout>
}
    e650:	bd38      	pop	{r3, r4, r5, pc}

0000e652 <z_priq_dumb_best>:
{
    e652:	4603      	mov	r3, r0
	return list->head == list;
    e654:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e656:	4283      	cmp	r3, r0
    e658:	d000      	beq.n	e65c <z_priq_dumb_best+0xa>
}
    e65a:	4770      	bx	lr
	struct k_thread *thread = NULL;
    e65c:	2000      	movs	r0, #0
	return thread;
    e65e:	e7fc      	b.n	e65a <z_priq_dumb_best+0x8>

0000e660 <z_ready_thread>:
{
    e660:	b538      	push	{r3, r4, r5, lr}
    e662:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    e664:	2300      	movs	r3, #0
	__asm__ volatile(
    e666:	f04f 0220 	mov.w	r2, #32
    e66a:	f3ef 8511 	mrs	r5, BASEPRI
    e66e:	f382 8812 	msr	BASEPRI_MAX, r2
    e672:	f3bf 8f6f 	isb	sy
    e676:	e007      	b.n	e688 <z_ready_thread+0x28>
			ready_thread(thread);
    e678:	4620      	mov	r0, r4
    e67a:	f7fc fba5 	bl	adc8 <ready_thread>
	__asm__ volatile(
    e67e:	f385 8811 	msr	BASEPRI, r5
    e682:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e686:	2301      	movs	r3, #1
    e688:	b92b      	cbnz	r3, e696 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    e68a:	4620      	mov	r0, r4
    e68c:	f7ff ff74 	bl	e578 <thread_active_elsewhere>
    e690:	2800      	cmp	r0, #0
    e692:	d1f4      	bne.n	e67e <z_ready_thread+0x1e>
    e694:	e7f0      	b.n	e678 <z_ready_thread+0x18>
}
    e696:	bd38      	pop	{r3, r4, r5, pc}

0000e698 <z_thread_timeout>:
{
    e698:	b570      	push	{r4, r5, r6, lr}
    e69a:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    e69c:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    e6a0:	2300      	movs	r3, #0
	__asm__ volatile(
    e6a2:	f04f 0220 	mov.w	r2, #32
    e6a6:	f3ef 8611 	mrs	r6, BASEPRI
    e6aa:	f382 8812 	msr	BASEPRI_MAX, r2
    e6ae:	f3bf 8f6f 	isb	sy
    e6b2:	e019      	b.n	e6e8 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    e6b4:	4628      	mov	r0, r5
    e6b6:	f7ff ff61 	bl	e57c <pended_on_thread>
    e6ba:	4629      	mov	r1, r5
    e6bc:	f7ff ff9e 	bl	e5fc <z_priq_dumb_remove>
    e6c0:	7b6b      	ldrb	r3, [r5, #13]
    e6c2:	f023 0302 	bic.w	r3, r3, #2
    e6c6:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    e6c8:	2300      	movs	r3, #0
    e6ca:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    e6cc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    e6d0:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    e6d4:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    e6d8:	4628      	mov	r0, r5
    e6da:	f7fc fb75 	bl	adc8 <ready_thread>
	__asm__ volatile(
    e6de:	f386 8811 	msr	BASEPRI, r6
    e6e2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e6e6:	2301      	movs	r3, #1
    e6e8:	b94b      	cbnz	r3, e6fe <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    e6ea:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    e6ee:	f013 0f28 	tst.w	r3, #40	; 0x28
    e6f2:	d1f4      	bne.n	e6de <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
    e6f4:	f854 3c10 	ldr.w	r3, [r4, #-16]
    e6f8:	2b00      	cmp	r3, #0
    e6fa:	d1db      	bne.n	e6b4 <z_thread_timeout+0x1c>
    e6fc:	e7e6      	b.n	e6cc <z_thread_timeout+0x34>
}
    e6fe:	bd70      	pop	{r4, r5, r6, pc}

0000e700 <add_to_waitq_locked>:
{
    e700:	b570      	push	{r4, r5, r6, lr}
    e702:	4605      	mov	r5, r0
    e704:	460e      	mov	r6, r1
	unready_thread(thread);
    e706:	f7fc fbbd 	bl	ae84 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    e70a:	7b6b      	ldrb	r3, [r5, #13]
    e70c:	f043 0302 	orr.w	r3, r3, #2
    e710:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    e712:	b1b6      	cbz	r6, e742 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    e714:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    e716:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e718:	42a6      	cmp	r6, r4
    e71a:	d019      	beq.n	e750 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e71c:	b164      	cbz	r4, e738 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e71e:	4621      	mov	r1, r4
    e720:	4628      	mov	r0, r5
    e722:	f7ff ff2d 	bl	e580 <z_sched_prio_cmp>
    e726:	2800      	cmp	r0, #0
    e728:	dc0c      	bgt.n	e744 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    e72a:	b12c      	cbz	r4, e738 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    e72c:	6873      	ldr	r3, [r6, #4]
    e72e:	429c      	cmp	r4, r3
    e730:	d002      	beq.n	e738 <add_to_waitq_locked+0x38>
    e732:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e734:	2c00      	cmp	r4, #0
    e736:	d1f1      	bne.n	e71c <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    e738:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    e73a:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    e73c:	606b      	str	r3, [r5, #4]
	tail->next = node;
    e73e:	601d      	str	r5, [r3, #0]
	list->tail = node;
    e740:	6075      	str	r5, [r6, #4]
}
    e742:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    e744:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    e746:	606b      	str	r3, [r5, #4]
	node->next = successor;
    e748:	602c      	str	r4, [r5, #0]
	prev->next = node;
    e74a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    e74c:	6065      	str	r5, [r4, #4]
}
    e74e:	e7f8      	b.n	e742 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e750:	2400      	movs	r4, #0
    e752:	e7e3      	b.n	e71c <add_to_waitq_locked+0x1c>

0000e754 <pend>:
{
    e754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e758:	4605      	mov	r5, r0
    e75a:	460f      	mov	r7, r1
    e75c:	4691      	mov	r9, r2
    e75e:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    e760:	2400      	movs	r4, #0
	__asm__ volatile(
    e762:	f04f 0320 	mov.w	r3, #32
    e766:	f3ef 8611 	mrs	r6, BASEPRI
    e76a:	f383 8812 	msr	BASEPRI_MAX, r3
    e76e:	f3bf 8f6f 	isb	sy
    e772:	b94c      	cbnz	r4, e788 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
    e774:	4639      	mov	r1, r7
    e776:	4628      	mov	r0, r5
    e778:	f7ff ffc2 	bl	e700 <add_to_waitq_locked>
	__asm__ volatile(
    e77c:	f386 8811 	msr	BASEPRI, r6
    e780:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e784:	2401      	movs	r4, #1
    e786:	e7f4      	b.n	e772 <pend+0x1e>
	add_thread_timeout(thread, timeout);
    e788:	464a      	mov	r2, r9
    e78a:	4643      	mov	r3, r8
    e78c:	4628      	mov	r0, r5
    e78e:	f7fc f9cf 	bl	ab30 <add_thread_timeout>
}
    e792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000e796 <z_unpend1_no_timeout>:
{
    e796:	b570      	push	{r4, r5, r6, lr}
    e798:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    e79a:	2300      	movs	r3, #0
	__asm__ volatile(
    e79c:	f04f 0220 	mov.w	r2, #32
    e7a0:	f3ef 8511 	mrs	r5, BASEPRI
    e7a4:	f382 8812 	msr	BASEPRI_MAX, r2
    e7a8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    e7ac:	461c      	mov	r4, r3
    e7ae:	e00f      	b.n	e7d0 <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    e7b0:	f7ff fee4 	bl	e57c <pended_on_thread>
    e7b4:	4621      	mov	r1, r4
    e7b6:	f7ff ff21 	bl	e5fc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    e7ba:	7b63      	ldrb	r3, [r4, #13]
    e7bc:	f023 0302 	bic.w	r3, r3, #2
    e7c0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    e7c2:	2300      	movs	r3, #0
    e7c4:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    e7c6:	f385 8811 	msr	BASEPRI, r5
    e7ca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e7ce:	2301      	movs	r3, #1
    e7d0:	b933      	cbnz	r3, e7e0 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
    e7d2:	4630      	mov	r0, r6
    e7d4:	f7ff ff3d 	bl	e652 <z_priq_dumb_best>
		if (thread != NULL) {
    e7d8:	4604      	mov	r4, r0
    e7da:	2800      	cmp	r0, #0
    e7dc:	d1e8      	bne.n	e7b0 <z_unpend1_no_timeout+0x1a>
    e7de:	e7f2      	b.n	e7c6 <z_unpend1_no_timeout+0x30>
}
    e7e0:	4620      	mov	r0, r4
    e7e2:	bd70      	pop	{r4, r5, r6, pc}

0000e7e4 <z_unpend_first_thread>:
{
    e7e4:	b570      	push	{r4, r5, r6, lr}
    e7e6:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    e7e8:	2300      	movs	r3, #0
	__asm__ volatile(
    e7ea:	f04f 0220 	mov.w	r2, #32
    e7ee:	f3ef 8511 	mrs	r5, BASEPRI
    e7f2:	f382 8812 	msr	BASEPRI_MAX, r2
    e7f6:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    e7fa:	461c      	mov	r4, r3
    e7fc:	e013      	b.n	e826 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    e7fe:	f7ff febd 	bl	e57c <pended_on_thread>
    e802:	4621      	mov	r1, r4
    e804:	f7ff fefa 	bl	e5fc <z_priq_dumb_remove>
    e808:	7b63      	ldrb	r3, [r4, #13]
    e80a:	f023 0302 	bic.w	r3, r3, #2
    e80e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    e810:	2300      	movs	r3, #0
    e812:	60a3      	str	r3, [r4, #8]
    e814:	f104 0018 	add.w	r0, r4, #24
    e818:	f000 f872 	bl	e900 <z_abort_timeout>
	__asm__ volatile(
    e81c:	f385 8811 	msr	BASEPRI, r5
    e820:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e824:	2301      	movs	r3, #1
    e826:	b933      	cbnz	r3, e836 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    e828:	4630      	mov	r0, r6
    e82a:	f7ff ff12 	bl	e652 <z_priq_dumb_best>
		if (thread != NULL) {
    e82e:	4604      	mov	r4, r0
    e830:	2800      	cmp	r0, #0
    e832:	d1e4      	bne.n	e7fe <z_unpend_first_thread+0x1a>
    e834:	e7f2      	b.n	e81c <z_unpend_first_thread+0x38>
}
    e836:	4620      	mov	r0, r4
    e838:	bd70      	pop	{r4, r5, r6, pc}

0000e83a <z_unpend_all>:
{
    e83a:	b538      	push	{r3, r4, r5, lr}
    e83c:	4605      	mov	r5, r0
	int need_sched = 0;
    e83e:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    e840:	e006      	b.n	e850 <z_unpend_all+0x16>
		z_unpend_thread(thread);
    e842:	4620      	mov	r0, r4
    e844:	f7ff fee2 	bl	e60c <z_unpend_thread>
		z_ready_thread(thread);
    e848:	4620      	mov	r0, r4
    e84a:	f7ff ff09 	bl	e660 <z_ready_thread>
		need_sched = 1;
    e84e:	2001      	movs	r0, #1
	return list->head == list;
    e850:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e852:	42a5      	cmp	r5, r4
    e854:	d001      	beq.n	e85a <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    e856:	2c00      	cmp	r4, #0
    e858:	d1f3      	bne.n	e842 <z_unpend_all+0x8>
}
    e85a:	bd38      	pop	{r3, r4, r5, pc}

0000e85c <init_ready_q>:
	sys_dlist_init(&rq->runq);
    e85c:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    e85e:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    e860:	6083      	str	r3, [r0, #8]
}
    e862:	4770      	bx	lr

0000e864 <z_sched_wake>:
{
    e864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e868:	4606      	mov	r6, r0
    e86a:	4688      	mov	r8, r1
    e86c:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
    e86e:	2300      	movs	r3, #0
	__asm__ volatile(
    e870:	f04f 0220 	mov.w	r2, #32
    e874:	f3ef 8511 	mrs	r5, BASEPRI
    e878:	f382 8812 	msr	BASEPRI_MAX, r2
    e87c:	f3bf 8f6f 	isb	sy
	bool ret = false;
    e880:	4699      	mov	r9, r3
    e882:	e01b      	b.n	e8bc <z_sched_wake+0x58>
    e884:	f8c0 80ac 	str.w	r8, [r0, #172]	; 0xac
	thread->base.swap_data = data;
    e888:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    e88a:	f7ff fe77 	bl	e57c <pended_on_thread>
    e88e:	4621      	mov	r1, r4
    e890:	f7ff feb4 	bl	e5fc <z_priq_dumb_remove>
    e894:	7b63      	ldrb	r3, [r4, #13]
    e896:	f023 0302 	bic.w	r3, r3, #2
    e89a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    e89c:	2300      	movs	r3, #0
    e89e:	60a3      	str	r3, [r4, #8]
    e8a0:	f104 0018 	add.w	r0, r4, #24
    e8a4:	f000 f82c 	bl	e900 <z_abort_timeout>
			ready_thread(thread);
    e8a8:	4620      	mov	r0, r4
    e8aa:	f7fc fa8d 	bl	adc8 <ready_thread>
			ret = true;
    e8ae:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
    e8b2:	f385 8811 	msr	BASEPRI, r5
    e8b6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e8ba:	2301      	movs	r3, #1
    e8bc:	b933      	cbnz	r3, e8cc <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
    e8be:	4630      	mov	r0, r6
    e8c0:	f7ff fec7 	bl	e652 <z_priq_dumb_best>
		if (thread != NULL) {
    e8c4:	4604      	mov	r4, r0
    e8c6:	2800      	cmp	r0, #0
    e8c8:	d1dc      	bne.n	e884 <z_sched_wake+0x20>
    e8ca:	e7f2      	b.n	e8b2 <z_sched_wake+0x4e>
}
    e8cc:	4648      	mov	r0, r9
    e8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000e8d2 <remove_timeout>:
{
    e8d2:	b538      	push	{r3, r4, r5, lr}
    e8d4:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    e8d6:	f7fc fd5b 	bl	b390 <next>
    e8da:	b148      	cbz	r0, e8f0 <remove_timeout+0x1e>
    e8dc:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    e8de:	6920      	ldr	r0, [r4, #16]
    e8e0:	6965      	ldr	r5, [r4, #20]
    e8e2:	6913      	ldr	r3, [r2, #16]
    e8e4:	6951      	ldr	r1, [r2, #20]
    e8e6:	181b      	adds	r3, r3, r0
    e8e8:	eb45 0101 	adc.w	r1, r5, r1
    e8ec:	6113      	str	r3, [r2, #16]
    e8ee:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    e8f0:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    e8f2:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    e8f4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    e8f6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    e8f8:	2300      	movs	r3, #0
    e8fa:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    e8fc:	6063      	str	r3, [r4, #4]
}
    e8fe:	bd38      	pop	{r3, r4, r5, pc}

0000e900 <z_abort_timeout>:
{
    e900:	b570      	push	{r4, r5, r6, lr}
    e902:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    e904:	2300      	movs	r3, #0
	__asm__ volatile(
    e906:	f04f 0220 	mov.w	r2, #32
    e90a:	f3ef 8611 	mrs	r6, BASEPRI
    e90e:	f382 8812 	msr	BASEPRI_MAX, r2
    e912:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    e916:	f06f 0015 	mvn.w	r0, #21
    e91a:	e008      	b.n	e92e <z_abort_timeout+0x2e>
			remove_timeout(to);
    e91c:	4620      	mov	r0, r4
    e91e:	f7ff ffd8 	bl	e8d2 <remove_timeout>
			ret = 0;
    e922:	4628      	mov	r0, r5
	__asm__ volatile(
    e924:	f386 8811 	msr	BASEPRI, r6
    e928:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    e92c:	2301      	movs	r3, #1
    e92e:	461d      	mov	r5, r3
    e930:	b91b      	cbnz	r3, e93a <z_abort_timeout+0x3a>
	return node->next != NULL;
    e932:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    e934:	2b00      	cmp	r3, #0
    e936:	d1f1      	bne.n	e91c <z_abort_timeout+0x1c>
    e938:	e7f4      	b.n	e924 <z_abort_timeout+0x24>
}
    e93a:	bd70      	pop	{r4, r5, r6, pc}

0000e93c <z_get_next_timeout_expiry>:
{
    e93c:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    e93e:	2300      	movs	r3, #0
	__asm__ volatile(
    e940:	f04f 0220 	mov.w	r2, #32
    e944:	f3ef 8411 	mrs	r4, BASEPRI
    e948:	f382 8812 	msr	BASEPRI_MAX, r2
    e94c:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    e950:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
    e954:	b93b      	cbnz	r3, e966 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
    e956:	f7fc fd33 	bl	b3c0 <next_timeout>
	__asm__ volatile(
    e95a:	f384 8811 	msr	BASEPRI, r4
    e95e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    e962:	2301      	movs	r3, #1
    e964:	e7f6      	b.n	e954 <z_get_next_timeout_expiry+0x18>
}
    e966:	bd10      	pop	{r4, pc}

0000e968 <z_set_timeout_expiry>:
{
    e968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e96a:	4606      	mov	r6, r0
    e96c:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    e96e:	2300      	movs	r3, #0
	__asm__ volatile(
    e970:	f04f 0220 	mov.w	r2, #32
    e974:	f3ef 8511 	mrs	r5, BASEPRI
    e978:	f382 8812 	msr	BASEPRI_MAX, r2
    e97c:	f3bf 8f6f 	isb	sy
    e980:	e00a      	b.n	e998 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    e982:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    e984:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    e988:	2801      	cmp	r0, #1
    e98a:	dd00      	ble.n	e98e <z_set_timeout_expiry+0x26>
    e98c:	b97c      	cbnz	r4, e9ae <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    e98e:	f385 8811 	msr	BASEPRI, r5
    e992:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    e996:	2301      	movs	r3, #1
    e998:	461c      	mov	r4, r3
    e99a:	b97b      	cbnz	r3, e9bc <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    e99c:	f7fc fd10 	bl	b3c0 <next_timeout>
			      || (ticks <= next_to);
    e9a0:	f1b0 3fff 	cmp.w	r0, #4294967295
    e9a4:	d0ed      	beq.n	e982 <z_set_timeout_expiry+0x1a>
    e9a6:	42b0      	cmp	r0, r6
    e9a8:	dbec      	blt.n	e984 <z_set_timeout_expiry+0x1c>
    e9aa:	2401      	movs	r4, #1
    e9ac:	e7ea      	b.n	e984 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    e9ae:	4639      	mov	r1, r7
    e9b0:	42b0      	cmp	r0, r6
    e9b2:	bfa8      	it	ge
    e9b4:	4630      	movge	r0, r6
    e9b6:	f7f8 fbf7 	bl	71a8 <sys_clock_set_timeout>
    e9ba:	e7e8      	b.n	e98e <z_set_timeout_expiry+0x26>
}
    e9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e9be <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    e9be:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    e9c0:	f7fc fe30 	bl	b624 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    e9c4:	bd08      	pop	{r3, pc}

0000e9c6 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    e9c6:	b900      	cbnz	r0, e9ca <z_impl_k_busy_wait+0x4>
    e9c8:	4770      	bx	lr
{
    e9ca:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    e9cc:	f7f2 fcb6 	bl	133c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    e9d0:	bd08      	pop	{r3, pc}

0000e9d2 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
    e9d2:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e9d4:	f1b1 3fff 	cmp.w	r1, #4294967295
    e9d8:	bf08      	it	eq
    e9da:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    e9de:	d024      	beq.n	ea2a <sys_clock_timeout_end_calc+0x58>
    e9e0:	4604      	mov	r4, r0
    e9e2:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    e9e4:	ea54 0105 	orrs.w	r1, r4, r5
    e9e8:	d00d      	beq.n	ea06 <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    e9ea:	f06f 0101 	mvn.w	r1, #1
    e9ee:	1a0a      	subs	r2, r1, r0
    e9f0:	f04f 31ff 	mov.w	r1, #4294967295
    e9f4:	eb61 0305 	sbc.w	r3, r1, r5
    e9f8:	2a00      	cmp	r2, #0
    e9fa:	f173 0100 	sbcs.w	r1, r3, #0
    e9fe:	db05      	blt.n	ea0c <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
    ea00:	4610      	mov	r0, r2
    ea02:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    ea04:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
    ea06:	f7fc fe0d 	bl	b624 <sys_clock_tick_get>
    ea0a:	e7fb      	b.n	ea04 <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
    ea0c:	f7fc fe0a 	bl	b624 <sys_clock_tick_get>
    ea10:	4623      	mov	r3, r4
    ea12:	462a      	mov	r2, r5
    ea14:	2c01      	cmp	r4, #1
    ea16:	f175 0400 	sbcs.w	r4, r5, #0
    ea1a:	db03      	blt.n	ea24 <sys_clock_timeout_end_calc+0x52>
    ea1c:	18c0      	adds	r0, r0, r3
    ea1e:	eb42 0101 	adc.w	r1, r2, r1
    ea22:	e7ef      	b.n	ea04 <sys_clock_timeout_end_calc+0x32>
    ea24:	2301      	movs	r3, #1
    ea26:	2200      	movs	r2, #0
    ea28:	e7f8      	b.n	ea1c <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
    ea2a:	f04f 30ff 	mov.w	r0, #4294967295
    ea2e:	4601      	mov	r1, r0
    ea30:	e7e8      	b.n	ea04 <sys_clock_timeout_end_calc+0x32>

0000ea32 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
    ea32:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
    ea34:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
    ea36:	2300      	movs	r3, #0
    ea38:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
    ea3a:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
    ea3e:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
    ea40:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
    ea42:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    ea44:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
    ea46:	6343      	str	r3, [r0, #52]	; 0x34
}
    ea48:	4770      	bx	lr

0000ea4a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    ea4a:	b510      	push	{r4, lr}
    ea4c:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    ea4e:	f7ff ff57 	bl	e900 <z_abort_timeout>

	if (inactive) {
    ea52:	b9a0      	cbnz	r0, ea7e <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
    ea54:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ea56:	b10b      	cbz	r3, ea5c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    ea58:	4620      	mov	r0, r4
    ea5a:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    ea5c:	f104 0018 	add.w	r0, r4, #24
    ea60:	f7ff fe99 	bl	e796 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    ea64:	b158      	cbz	r0, ea7e <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
    ea66:	f7ff fdfb 	bl	e660 <z_ready_thread>
	__asm__ volatile(
    ea6a:	f04f 0320 	mov.w	r3, #32
    ea6e:	f3ef 8011 	mrs	r0, BASEPRI
    ea72:	f383 8812 	msr	BASEPRI_MAX, r3
    ea76:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    ea7a:	f7ff fdaa 	bl	e5d2 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
    ea7e:	bd10      	pop	{r4, pc}

0000ea80 <z_heap_aligned_alloc>:
{
    ea80:	b5d0      	push	{r4, r6, r7, lr}
    ea82:	b082      	sub	sp, #8
    ea84:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    ea86:	2000      	movs	r0, #0
    ea88:	2304      	movs	r3, #4
    ea8a:	18d2      	adds	r2, r2, r3
    ea8c:	d20e      	bcs.n	eaac <z_heap_aligned_alloc+0x2c>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
    ea8e:	b978      	cbnz	r0, eab0 <z_heap_aligned_alloc+0x30>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    ea90:	2600      	movs	r6, #0
    ea92:	2700      	movs	r7, #0
    ea94:	e9cd 6700 	strd	r6, r7, [sp]
    ea98:	f041 0104 	orr.w	r1, r1, #4
    ea9c:	4620      	mov	r0, r4
    ea9e:	f000 f81a 	bl	ead6 <k_heap_aligned_alloc>
	if (mem == NULL) {
    eaa2:	b108      	cbz	r0, eaa8 <z_heap_aligned_alloc+0x28>
	*heap_ref = heap;
    eaa4:	f840 4b04 	str.w	r4, [r0], #4
}
    eaa8:	b002      	add	sp, #8
    eaaa:	bdd0      	pop	{r4, r6, r7, pc}
    eaac:	2001      	movs	r0, #1
    eaae:	e7ee      	b.n	ea8e <z_heap_aligned_alloc+0xe>
		return NULL;
    eab0:	2000      	movs	r0, #0
    eab2:	e7f9      	b.n	eaa8 <z_heap_aligned_alloc+0x28>

0000eab4 <k_free>:
	if (ptr != NULL) {
    eab4:	b130      	cbz	r0, eac4 <k_free+0x10>
{
    eab6:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
    eab8:	1f01      	subs	r1, r0, #4
    eaba:	f850 0c04 	ldr.w	r0, [r0, #-4]
    eabe:	f000 f855 	bl	eb6c <k_heap_free>
}
    eac2:	bd08      	pop	{r3, pc}
    eac4:	4770      	bx	lr

0000eac6 <k_heap_init>:
{
    eac6:	b510      	push	{r4, lr}
    eac8:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    eacc:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    eace:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    ead0:	f7fd fd40 	bl	c554 <sys_heap_init>
}
    ead4:	bd10      	pop	{r4, pc}

0000ead6 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    ead6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eada:	b087      	sub	sp, #28
    eadc:	4680      	mov	r8, r0
    eade:	9103      	str	r1, [sp, #12]
    eae0:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    eae2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    eae6:	f7ff ff74 	bl	e9d2 <sys_clock_timeout_end_calc>
    eaea:	4681      	mov	r9, r0
    eaec:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    eaee:	f108 0314 	add.w	r3, r8, #20
    eaf2:	9305      	str	r3, [sp, #20]
    eaf4:	f04f 0320 	mov.w	r3, #32
    eaf8:	f3ef 8511 	mrs	r5, BASEPRI
    eafc:	f383 8812 	msr	BASEPRI_MAX, r3
    eb00:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
    eb04:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
    eb08:	4654      	mov	r4, sl

	while (ret == NULL) {
    eb0a:	e00f      	b.n	eb2c <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    eb0c:	e9cd 6700 	strd	r6, r7, [sp]
    eb10:	f108 020c 	add.w	r2, r8, #12
    eb14:	4629      	mov	r1, r5
    eb16:	9805      	ldr	r0, [sp, #20]
    eb18:	f7fc f9d0 	bl	aebc <z_pend_curr>
    eb1c:	f04f 0320 	mov.w	r3, #32
    eb20:	f3ef 8511 	mrs	r5, BASEPRI
    eb24:	f383 8812 	msr	BASEPRI_MAX, r3
    eb28:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
    eb2c:	b9b4      	cbnz	r4, eb5c <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    eb2e:	9a04      	ldr	r2, [sp, #16]
    eb30:	9903      	ldr	r1, [sp, #12]
    eb32:	4640      	mov	r0, r8
    eb34:	f7fd fc80 	bl	c438 <sys_heap_aligned_alloc>
    eb38:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
    eb3a:	f7fc fd73 	bl	b624 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    eb3e:	b96c      	cbnz	r4, eb5c <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
    eb40:	ebb9 0600 	subs.w	r6, r9, r0
    eb44:	eb6b 0701 	sbc.w	r7, fp, r1
    eb48:	2e01      	cmp	r6, #1
    eb4a:	f177 0300 	sbcs.w	r3, r7, #0
    eb4e:	db05      	blt.n	eb5c <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
    eb50:	f1ba 0f00 	cmp.w	sl, #0
    eb54:	d1da      	bne.n	eb0c <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
    eb56:	f04f 0a01 	mov.w	sl, #1
    eb5a:	e7d7      	b.n	eb0c <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
    eb5c:	f385 8811 	msr	BASEPRI, r5
    eb60:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    eb64:	4620      	mov	r0, r4
    eb66:	b007      	add	sp, #28
    eb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000eb6c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    eb6c:	b570      	push	{r4, r5, r6, lr}
    eb6e:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    eb70:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    eb74:	f04f 0320 	mov.w	r3, #32
    eb78:	f3ef 8511 	mrs	r5, BASEPRI
    eb7c:	f383 8812 	msr	BASEPRI_MAX, r3
    eb80:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
    eb84:	f7fd fbf6 	bl	c374 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    eb88:	f104 000c 	add.w	r0, r4, #12
    eb8c:	f7ff fe55 	bl	e83a <z_unpend_all>
    eb90:	b920      	cbnz	r0, eb9c <k_heap_free+0x30>
	__asm__ volatile(
    eb92:	f385 8811 	msr	BASEPRI, r5
    eb96:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    eb9a:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
    eb9c:	4629      	mov	r1, r5
    eb9e:	4630      	mov	r0, r6
    eba0:	f7fc f828 	bl	abf4 <z_reschedule>
    eba4:	e7f9      	b.n	eb9a <k_heap_free+0x2e>

0000eba6 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    eba6:	4770      	bx	lr

0000eba8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    eba8:	f7f8 bbf2 	b.w	7390 <SystemInit>
